CompileCommand: dontinline test_jdk.* bool dontinline = true
CompileCommand: print test_jdk.micro bool print = true

=========================== JVMCI-compiled nmethod =============================
----------------------------------- Assembly -----------------------------------

Compiled method (JVMCI)   23             test_jdk::micro (93 bytes)
 total in heap  [0x0000705ef85e1d10,0x0000705ef85e21b0] = 1184
 relocation     [0x0000705ef85e1e70,0x0000705ef85e1e98] = 40
 constants      [0x0000705ef85e1ea0,0x0000705ef85e1ec0] = 32
 main code      [0x0000705ef85e1ec0,0x0000705ef85e2109] = 585
 stub code      [0x0000705ef85e2109,0x0000705ef85e2110] = 7
 oops           [0x0000705ef85e2110,0x0000705ef85e2118] = 8
 metadata       [0x0000705ef85e2118,0x0000705ef85e2128] = 16
 scopes data    [0x0000705ef85e2128,0x0000705ef85e2138] = 16
 scopes pcs     [0x0000705ef85e2138,0x0000705ef85e2188] = 80
 dependencies   [0x0000705ef85e2188,0x0000705ef85e2190] = 8
 nul chk table  [0x0000705ef85e2190,0x0000705ef85e21a0] = 16
 JVMCI data     [0x0000705ef85e21a0,0x0000705ef85e21b0] = 16

[Disassembly]
--------------------------------------------------------------------------------

[Constant Pool]
             Address          hex4                    hex8      
  0x0000705ef85e1ea0:   0x41200000      0x41a0000041200000      
  0x0000705ef85e1ea4:   0x41a00000                              
  0x0000705ef85e1ea8:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x0000705ef85e1eac:   0xf4f4f4f4                              
  0x0000705ef85e1eb0:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x0000705ef85e1eb4:   0xf4f4f4f4                              
  0x0000705ef85e1eb8:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x0000705ef85e1ebc:   0xf4f4f4f4                              

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000705ed04014b0} 'micro' '(II)F' in 'test_jdk'
  # parm0:    rsi       = int
  # parm1:    rdx       = int
  #           [sp+0x20]  (sp of caller)
  0x0000705ef85e1ec0:   mov    %eax,-0x14000(%rsp)          ;   {no_reloc}
  0x0000705ef85e1ec7:   sub    $0x18,%rsp
  0x0000705ef85e1ecb:   mov    %rbp,0x10(%rsp)
  0x0000705ef85e1ed0:   mov    %esi,%r10d
  0x0000705ef85e1ed3:   mov    0x108(%r15),%rsi
  0x0000705ef85e1eda:   lea    0x18(%rsi),%rax
  0x0000705ef85e1ede:   cmp    0x118(%r15),%rax
  0x0000705ef85e1ee5:   ja     0x0000705ef85e2067
  0x0000705ef85e1eeb:   mov    %rax,0x108(%r15)
  0x0000705ef85e1ef2:   prefetchw 0xd8(%rsi)
  0x0000705ef85e1ef9:   movq   $0x1,(%rsi)
  0x0000705ef85e1f00:   movl   $0x1000a08,0x8(%rsi)         ;   {metadata('Point')}
  0x0000705ef85e1f07:   mov    %rsi,%r11
  0x0000705ef85e1f0a:   vxorpd %xmm0,%xmm0,%xmm0
  0x0000705ef85e1f0e:   vcvtsi2ss %r10d,%xmm0,%xmm0
  0x0000705ef85e1f13:   vaddss -0x7b(%rip),%xmm0,%xmm1        # 0x0000705ef85e1ea0
                                                            ;   {section_word}
  0x0000705ef85e1f1b:   vmovss %xmm1,0xc(%r11)
  0x0000705ef85e1f21:   vmovss %xmm1,0x10(%r11)
  0x0000705ef85e1f27:   cmp    $0x2711,%edx
  0x0000705ef85e1f2d:   jl     0x0000705ef85e1f90
  0x0000705ef85e1f33:   movabs $0xc7800000,%r8              ;   {oop(a 'java/lang/Class'{0x00000000c7800000} = 'test_jdk')}
  0x0000705ef85e1f3d:   cmpb   $0x0,0x38(%r15)
  0x0000705ef85e1f42:   jne    0x0000705ef85e200a
  0x0000705ef85e1f48:   vmovss %xmm0,0x4(%rsp)
  0x0000705ef85e1f4e:   mov    %r11,%rsi
  0x0000705ef85e1f51:   mov    %esi,0x70(%r8)
  0x0000705ef85e1f55:   mov    %r8,%rsi
  0x0000705ef85e1f58:   xor    %r11,%rsi
  0x0000705ef85e1f5b:   test   $0xfffffffffff00000,%rsi
  0x0000705ef85e1f62:   je     0x0000705ef85e2002
  0x0000705ef85e1f68:   test   %r11,%r11
  0x0000705ef85e1f6b:   je     0x0000705ef85e2041
  0x0000705ef85e1f71:   shr    $0x9,%r8
  0x0000705ef85e1f75:   movabs $0x705ee9a5c000,%rsi
  0x0000705ef85e1f7f:   cmpb   $0x4,(%r8,%rsi,1)
  0x0000705ef85e1f84:   jne    0x0000705ef85e204c
  0x0000705ef85e1f8a:   vmovss 0x4(%rsp),%xmm0
  0x0000705ef85e1f90:   vcvtss2sd 0xc(%r11),%xmm1,%xmm1
  0x0000705ef85e1f96:   vxorpd %xmm2,%xmm2,%xmm2
  0x0000705ef85e1f9a:   vcvtss2sd %xmm0,%xmm2,%xmm2
  0x0000705ef85e1f9e:   vmulsd %xmm2,%xmm2,%xmm2
  0x0000705ef85e1fa2:   vaddsd %xmm2,%xmm2,%xmm2
  0x0000705ef85e1fa6:   vsqrtsd %xmm2,%xmm0,%xmm2
  0x0000705ef85e1faa:   vcvtsd2ss %xmm2,%xmm2,%xmm2
  0x0000705ef85e1fae:   vmulsd %xmm1,%xmm1,%xmm1
  0x0000705ef85e1fb2:   vcvtss2sd 0x10(%r11),%xmm3,%xmm3
  0x0000705ef85e1fb8:   vmulsd %xmm3,%xmm3,%xmm3
  0x0000705ef85e1fbc:   vaddsd %xmm3,%xmm1,%xmm1
  0x0000705ef85e1fc0:   vsqrtsd %xmm1,%xmm0,%xmm1
  0x0000705ef85e1fc4:   vcvtsd2ss %xmm1,%xmm1,%xmm1
  0x0000705ef85e1fc8:   vaddss %xmm1,%xmm2,%xmm1
  0x0000705ef85e1fcc:   vaddss -0x130(%rip),%xmm0,%xmm0        # 0x0000705ef85e1ea4
                                                            ;   {section_word}
  0x0000705ef85e1fd4:   vcvtss2sd %xmm0,%xmm0,%xmm0
  0x0000705ef85e1fd8:   vmulsd %xmm0,%xmm0,%xmm0
  0x0000705ef85e1fdc:   vaddsd %xmm0,%xmm0,%xmm0
  0x0000705ef85e1fe0:   vsqrtsd %xmm0,%xmm0,%xmm0
  0x0000705ef85e1fe4:   vcvtsd2ss %xmm0,%xmm0,%xmm0
  0x0000705ef85e1fe8:   vaddss %xmm0,%xmm1,%xmm0
  0x0000705ef85e1fec:   mov    0x10(%rsp),%rbp
  0x0000705ef85e1ff1:   add    $0x18,%rsp
  0x0000705ef85e1ff5:   mov    0x348(%r15),%rcx
  0x0000705ef85e1ffc:   test   %eax,(%rcx)                  ;   {poll_return}
  0x0000705ef85e1ffe:   vzeroupper 
  0x0000705ef85e2001:   ret    
  0x0000705ef85e2002:   vmovss 0x4(%rsp),%xmm0
  0x0000705ef85e2008:   jmp    0x0000705ef85e1f90
  0x0000705ef85e200a:   lea    0x70(%r8),%rsi
  0x0000705ef85e200e:   mov    (%rsi),%esi
  0x0000705ef85e2010:   test   %esi,%esi
  0x0000705ef85e2012:   je     0x0000705ef85e2081
  0x0000705ef85e2018:   mov    0x20(%r15),%rax
  0x0000705ef85e201c:   test   %rax,%rax
  0x0000705ef85e201f:   je     0x0000705ef85e208c
  0x0000705ef85e2025:   mov    0x30(%r15),%r10
  0x0000705ef85e2029:   mov    %rsi,-0x8(%rax,%r10,1)
  0x0000705ef85e202e:   lea    -0x8(%rax),%rsi
  0x0000705ef85e2032:   mov    %rsi,0x20(%r15)
  0x0000705ef85e2036:   vmovss %xmm0,0x4(%rsp)
  0x0000705ef85e203c:   jmp    0x0000705ef85e1f4e
  0x0000705ef85e2041:   vmovss 0x4(%rsp),%xmm0
  0x0000705ef85e2047:   jmp    0x0000705ef85e1f90
  0x0000705ef85e204c:   lock addl $0x0,(%rsp)
  0x0000705ef85e2051:   cmpb   $0x0,(%r8,%rsi,1)
  0x0000705ef85e2056:   jne    0x0000705ef85e209d
  0x0000705ef85e205c:   vmovss 0x4(%rsp),%xmm0
  0x0000705ef85e2062:   jmp    0x0000705ef85e1f90
  0x0000705ef85e2067:   movabs $0x705e8c000a08,%rsi         ;   {metadata('Point')}
  0x0000705ef85e2071:   call   0x0000705ef85e1080           ; ImmutableOopMap {}
                                                            ;*iconst_3 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test_jdk::micro@0 (line 22)
                                                            ;   {runtime_call Stub<new_instance_or_null(KlassPointer)Object>}
  0x0000705ef85e2076:   nop                                 ; ImmutableOopMap {rax=Oop }
                                                            ;*iconst_3 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test_jdk::micro@0 (line 22)
  0x0000705ef85e2077:   test   %eax,(%rax)                  ; implicit exception: dispatches to 0x0000705ef85e20e1
  0x0000705ef85e2079:   mov    %rax,%r11
  0x0000705ef85e207c:   jmp    0x0000705ef85e1f0a
  0x0000705ef85e2081:   vmovss %xmm0,0x4(%rsp)
  0x0000705ef85e2087:   jmp    0x0000705ef85e1f4e
  0x0000705ef85e208c:   vmovss %xmm0,0x4(%rsp)
  0x0000705ef85e2092:   call   0x0000705ef85e1380           ;   {runtime_call Stub<write_barrier_pre(Object)void>}
  0x0000705ef85e2097:   nop
  0x0000705ef85e2098:   jmp    0x0000705ef85e1f4e
  0x0000705ef85e209d:   mov    %r12b,(%r8,%rsi,1)
  0x0000705ef85e20a1:   mov    0x40(%r15),%r10
  0x0000705ef85e20a5:   add    %rsi,%r8
  0x0000705ef85e20a8:   test   %r10,%r10
  0x0000705ef85e20ab:   je     0x0000705ef85e20cd
  0x0000705ef85e20b1:   mov    0x50(%r15),%rsi
  0x0000705ef85e20b5:   mov    %r8,-0x8(%r10,%rsi,1)
  0x0000705ef85e20ba:   lea    -0x8(%r10),%rsi
  0x0000705ef85e20be:   mov    %rsi,0x40(%r15)
  0x0000705ef85e20c2:   vmovss 0x4(%rsp),%xmm0
  0x0000705ef85e20c8:   jmp    0x0000705ef85e1f90
  0x0000705ef85e20cd:   mov    %r8,%rsi
  0x0000705ef85e20d0:   call   0x0000705ef85e1680           ;   {runtime_call Stub<write_barrier_post(Word)void>}
  0x0000705ef85e20d5:   nop
  0x0000705ef85e20d6:   vmovss 0x4(%rsp),%xmm0
  0x0000705ef85e20dc:   jmp    0x0000705ef85e1f90
  0x0000705ef85e20e1:   movl   $0xffffff8f,0x370(%r15)
  0x0000705ef85e20ec:   movq   $0x0,0x378(%r15)
  0x0000705ef85e20f7:   call   0x0000705ef85ba27a           ; ImmutableOopMap {rax=Oop }
                                                            ;*iconst_3 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test_jdk::micro@0 (line 22)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000705ef85e20fc:   nop
[Exception Handler]
  0x0000705ef85e20fd:   call   0x0000705ef85df680           ;   {runtime_call Stub<ExceptionHandlerStub.exceptionHandler>}
  0x0000705ef85e2102:   nop
[Deopt Handler Code]
  0x0000705ef85e2103:   call   0x0000705ef85ba020           ;   {runtime_call DeoptimizationBlob}
  0x0000705ef85e2108:   nop
[Stub Code]
  0x0000705ef85e2109:   hlt    
  0x0000705ef85e210a:   hlt    
  0x0000705ef85e210b:   hlt    
  0x0000705ef85e210c:   hlt    
  0x0000705ef85e210d:   hlt    
  0x0000705ef85e210e:   hlt    
  0x0000705ef85e210f:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
[time]  144  ms  [res] 4.07628904E14
