[JVMCI properties]
jvmci.Compiler = null                                                     [String]
          Selects the system compiler. This must match the getCompilerName() value returned by a jdk.vm.ci.runtime.JVMCICompilerFactory provider. An empty string or the value "null" selects a compiler that will raise an exception upon receiving a compilation request.
jvmci.InitTimer = false                                                  [Boolean]
          Specifies if initialization timing is enabled.
jvmci.CodeSerializationTypeInfo = false                                  [Boolean]
          Prepend the size and label of each element to the stream when serializing HotSpotCompiledCode to verify both ends of the protocol agree on the format. Defaults to true in non-product builds.
jvmci.DumpSerializedCode = null                                           [String]
          Dump serialized code during code installation for code whose simple name (a stub) or fully qualified name (an nmethod) contains this option's value as a substring.
jvmci.ForceTranslateFailure = null                                        [String]
          Forces HotSpotJVMCIRuntime.translate to throw an exception in the context of the peer runtime. The value is a filter that can restrict the forced failure to matching translated objects. See HotSpotJVMCIRuntime.postTranslation for more details. This option exists soley to test correct handling of translation failure.
jvmci.PrintConfig = false                                                [Boolean]
          Prints VM configuration available via JVMCI.
jvmci.AuditHandles = false                                               [Boolean]
          Record stack trace along with scoped foreign object reference wrappers to debug issue with a wrapper being used after its scope has closed.
jvmci.TraceMethodDataFilter = null                                        [String]
          Enables tracing of profiling info when read by JVMCI.
          Empty value: trace all methods
          Non-empty value: trace methods whose fully qualified name contains the value.
jvmci.UseProfilingInformation = true                                     [Boolean]
          
[Graal properties]
graal.AbortOnBenchmarkCounterOverflow = false                            [Boolean]
          Abort VM with SIGILL if benchmark counters controlled by the
          (Generic|Timed|Benchmark)DynamicCounters
          option overflow.  WARNING: No descriptive error message will be printed! In
          case of an overflow, manual inspection of the emitted code is required.
graal.AggregatedMetricsFile = null                                        [String]
          File to which aggregated metrics are dumped at shutdown. A CSV format
          is used if the file ends with .csv otherwise a more human readable
          format is used. If not specified, metrics are dumped to the console.
graal.AlwaysInlineIntrinsics = false                                     [Boolean]
          Unconditionally inline intrinsics
graal.AlwaysInlineVTableStubs = false                                    [Boolean]
graal.ArrayRegionEqualsConstantLimit = 4096                              [Integer]
          Array region equality checks will be evaluated at compile time if the
          receiver is a constant and its length is smaller than this value.
graal.BenchmarkCounterPrintingCutoff = true                              [Boolean]
          Use a cutoff to print only most significant counters.
graal.BenchmarkCountersDumpDynamic = true                                [Boolean]
          Dump dynamic counters
graal.BenchmarkCountersDumpStatic = false                                [Boolean]
          Dump static counters
graal.BenchmarkCountersFile = null                                        [String]
          File to which benchmark counters are dumped. A CSV format is used if
          the file ends with .csv otherwise a more human readable format is used.
          The fields in the CSV format are: category, group, name, value
graal.BenchmarkDynamicCounters = null                                     [String]
          Turn on the benchmark counters. The format of this option is:
          
            (err|out),start pattern,end pattern
            
          Start counting when the start pattern matches on the given stream and stop when the end pattern occurs.
          You can use "~" to match 1 or more digits.
          Examples:
          
            err, starting =====, PASSED in
            out,Iteration ~ (~s) begins:,Iteration ~ (~s) ends:
            
          The first pattern matches DaCapo output and the second matches SPECjvm2008 output.
          
          As a more detailed example, here are the options to use for getting statistics
          about allocations within the DaCapo pmd benchmark:
          
            -XX:JVMCICounterSize=<value> -XX:-JVMCICountersExcludeCompiler \
            -Dgraal.BenchmarkDynamicCounters="err, starting ====, PASSED in " \
            -Dgraal.ProfileAllocations=true
            
          The JVMCICounterSize value depends on the granularity of the profiling -
          10000 should be sufficient. Omit JVMCICountersExcludeCompiler to exclude
          counting allocations on the compiler threads.
          The counters can be further configured by the ProfileAllocationsContext option.
          
          We highly recommend the use of -Dgraal.AbortOnBenchmarkCounterOverflow=true to
          detect counter overflows eagerly.
graal.BootstrapInitializeOnly = false                                    [Boolean]
          Do not compile anything on bootstrap but just initialize the compiler.
graal.BootstrapTimeout = 15.0                                             [Double]
          Maximum time in minutes to spend bootstrapping (0 to disable this
          limit).
graal.BootstrapWatchDogCriticalRateRatio = 0.25                           [Double]
          Ratio of the maximum compilation rate below which the bootstrap
          compilation rate must not fall (0 or less disables monitoring).
graal.CanonicalGraphStringsCheckConstants = false                        [Boolean]
          Exclude virtual nodes when dumping canonical text for graphs.
graal.CanonicalGraphStringsExcludeVirtuals = true                        [Boolean]
          Exclude virtual nodes when dumping canonical text for graphs.
graal.CanonicalGraphStringsRemoveIdentities = true                       [Boolean]
          Attempts to remove object identity hashes when dumping canonical text
          for graphs.
graal.ClearMetricsAfterBootstrap = false                                 [Boolean]
          Clear the debug metrics after bootstrap.
graal.CompilationBailoutAsFailure = false                                [Boolean]
          Treat compilation bailouts like compilation failures.
graal.CompilationCountLimit = 0                                          [Integer]
          The number of compilations allowed for any method before the VM exits
          (a value of 0 means there is no limit).
graal.CompilationExcludePhases = null                                     [String]
          Exclude certain phases from compilation, either unconditionally or with
          a method filter. Multiple exclusions can be specified separated by ':'.
          Phase names are matched as substrings, e.g.:
          CompilationExcludePhases=PartialEscape:Loop=A.*,B.foo excludes
          PartialEscapePhase from all compilations and any phase containing
          'Loop' in its name from compilations of all methods in class A and of
          method B.foo.
graal.CompilationExpirationPeriod = 300.0                                 [Double]
          Time limit in seconds before a compilation expires (0 to disable the
          limit). A non-zero value for this option is doubled if assertions are
          enabled and quadrupled if DetailedAsserts is true.
graal.CompilationFailureAction := Diagnose                                [String]
          Specifies the action to take when compilation fails.
          
          The accepted values are:
              Silent  - Print nothing to the console.
               Print  - Print a stack trace to the console.
            Diagnose* - Retry the compilation with extra diagnostics.
              ExitVM  - Same as Diagnose except that the VM process exits after retrying.
              
          * If "Diagnose" is set compilation will be retried with extra diagnostics enabled including dumping (see file:doc-files/DumpHelp.txt). 
            In such a scenario DiagnoseDumpLevel can be used to specify the dump level (DebugContext dump levels) accordingly.
                
graal.CompilationNoProgressPeriod = 30.0                                  [Double]
          Time limit in seconds before a compilation expires (0 to disable the
          limit) because no progress was made in the compiler.
graal.CompilationNoProgressStartTrackingProgressPeriod = 10.0             [Double]
          Delay in seconds before compilation progress detection starts.
graal.CompilationWatchDogStartDelay = 0                                  [Integer]
          Delay in seconds before watch dog monitors a compilation (0 disables
          monitoring).
graal.CompilationWatchDogVMExitDelay = 0                                 [Integer]
          Number of seconds after which a compilation appearing to make no
          progress causes the VM to exit (0 disables VM exiting).
graal.CompileGraalWithC1Only = true                                      [Boolean]
          In tiered mode compile Graal and JVMCI using optimized first tier code.
graal.CompilerConfiguration = null                                        [String]
          Names the compiler configuration to use. If omitted, the compiler
          configuration with the highest auto-selection priority is used. To see
          the set of available configurations, supply the value 'help' to this
          option.
graal.ConditionalElimination = true                                      [Boolean]
graal.ConditionalEliminationMaxIterations = 4                            [Integer]
graal.Count = null                                                        [String]
          Pattern for specifying scopes in which counters are enabled. See the
          Dump option for the pattern syntax. An empty value enables all counters
          unconditionally.
graal.Counters = null                                                     [String]
          Comma separated names of counters that are enabled irrespective of the
          value for Count option. An empty value enables all counters
          unconditionally.
graal.CrashAt = null                                                      [String]
          Pattern for method(s) that will trigger an exception when compiled.
          This option exists to test handling compilation crashes gracefully. See
          the MethodFilter option for the pattern syntax. A ':Bailout' suffix
          will raise a bailout exception and a ':PermanentBailout' suffix will
          raise a permanent bailout exception.
graal.DebugStubsAndSnippets = false                                      [Boolean]
          Enable debug output for stub code generation and snippet preparation.
graal.DefaultLoopFrequency = 100.0                                        [Double]
          Default frequency for loops with unknown local frequency.
graal.DefaultUnswitchFactor = 0.7                                         [Double]
          Default unswitching factor for control split node with unkown profile
          data.
graal.DeoptALot = false                                                  [Boolean]
graal.DeoptAfterOSR = true                                               [Boolean]
          Deoptimize OSR compiled code when the OSR entry loop is finished if
          there is no mature profile available for the rest of the method.
graal.DeoptsToDisableOptimisticOptimization = 40                         [Integer]
graal.DetailedAsserts = false                                            [Boolean]
          Enable expensive assertions if normal assertions (i.e. -ea or -esa) are
          enabled.
graal.DiagnoseDumpLevel = 3                                              [Integer]
          Specify the dump level if CompilationFailureAction#Diagnose is used.See
          CompilationFailureAction for details.
          file:doc-files/CompilationFailureActionHelp.txt
graal.DisableIntercept = false                                           [Boolean]
          Disable intercepting exceptions in debug scopes.
graal.DisableIntrinsics = null                                            [String]
          Disable intrinsics matching the given method filter (see MethodFilter
          option for details). For example, 'DisableIntrinsics=String.equals'
          disables intrinsics for any method named 'equals' in a class whose
          simple name is 'String'. You can append ':verbose' at the end of the
          filter value to print out disabled intrinsics as they are encountered
          during compilation (e.g., 'String.equals:verbose').
graal.Dump = null                                                         [String]
          Filter pattern for specifying scopes in which dumping is enabled.
          
          A filter is a list of comma-separated terms of the form:
           
            <pattern>[:<level>]
           
          If <pattern> contains a "*" or "?" character, it is interpreted as a glob pattern.
          Otherwise, it is interpreted as a substring. If <pattern> is empty, it
          matches every scope. If :<level> is omitted, it defaults to 1. The term
          ~<pattern> is a shorthand for <pattern>:0 to disable a debug facility for a pattern.
          
          The default log level is 0 (disabled). Terms with an empty pattern set
          the default log level to the specified value. The last
          matching term with a non-empty pattern selects the level specified. If
          no term matches, the log level is the default level. A filter with no
          terms matches every scope with a log level of 1.
          
          Examples of debug filters:
          --------- 
            (empty string)
          
            Matches any scope with level 1.
          --------- 
            :1
          
            Matches any scope with level 1.
          --------- 
            *
          
            Matches any scope with level 1.
          --------- 
            CodeGen,CodeInstall
          
            Matches scopes containing "CodeGen" or "CodeInstall", both with level 1.
          --------- 
            CodeGen:2,CodeInstall:1
          
            Matches scopes containing "CodeGen" with level 2, or "CodeInstall" with level 1.
          ---------
            Outer:2,Inner:0}
          
            Matches scopes containing "Outer" with log level 2, or "Inner" with log level 0. If the scope
            name contains both patterns then the log level will be 0. This is useful for silencing subscopes.
          ---------
            :1,Dead:2
          
            Matches scopes containing "Dead" with level 2, and all other scopes with level 1.
          --------- 
            Dead:0,:1
          
            Matches all scopes with level 1, except those containing "Dead".   Note that the location of
            the :1 doesn't matter since it's specifying the default log level so it's the same as
            specifying :1,Dead:0.
          --------- 
            Code*
          
            Matches scopes starting with "Code" with level 1.
          --------- 
            Code,~Dead
          
            Matches scopes containing "Code" but not "Dead", with level 1.
graal.DumpAfterEveryBCI = false                                          [Boolean]
          Dump the current graph after every bci to IGV.
graal.DumpEndVersusExitLoopFrequencies = false                           [Boolean]
          Debug flag to dump loop frequency differences computed based on loop
          end or exit nodes.If the frequencies diverge a lot, this may indicate
          missing profiles on control flowinside the loop body.
graal.DumpOnError := true                                                [Boolean]
          Send compiler IR to dump handlers on error.
graal.DumpOnPhaseChange = null                                            [String]
          Dump a before and after graph if the named phase changes the
          graph.%nThe argument is substring matched against the simple name of
          the phase class
graal.DumpPath = "graal_dumps"                                            [String]
          The directory where various Graal dump files are written.
graal.DumpingErrorsAreFatal = false                                      [Boolean]
          Treat any exceptions during dumping as fatal.
graal.DynamicCountersPrintGroupSeparator = true                          [Boolean]
          Use grouping separators for number printing
graal.EagerSnippets = false                                              [Boolean]
          Eagerly construct extra snippet info.
graal.EarlyCodeEmissionOrder = false                                     [Boolean]
          Enable early code emission order computation instead of late code
          emission order computation
graal.EarlyGVN = true                                                    [Boolean]
          Perform early global value numbering.
graal.EarlyLICM = true                                                   [Boolean]
          Perform early loop invariant code motion.
graal.EmitStringSubstitutions = true                                     [Boolean]
          Emit substitutions for String methods
graal.EscapeAnalysisIterations = 2                                       [Integer]
graal.EscapeAnalysisLoopCutoff = 20                                      [Integer]
graal.EscapeAnalyzeOnly = null                                            [String]
graal.ExactFullUnrollMaxNodes = 800                                      [Integer]
graal.ExactPartialUnrollMaxNodes = 200                                   [Integer]
graal.FailedLoopExplosionIsFatal = false                                 [Boolean]
          Do not bail out but throw an exception on failed loop explosion.
graal.FloatingDivNodes = true                                            [Boolean]
          Try to float non-constant division operations to expose global value
          numbering of divisions.
graal.ForceAdversarialLayout = false                                     [Boolean]
          Place N-byte constants in the data section such that they are
          misaligned with respect to N*2. For example, place 4 byte constants at
          offset 4, 12 or 20, etc. This layout is used to detect instructions
          that load constants with alignment smaller than the fetch size. For
          instance, an XORPS instruction that does a 16-byte fetch of a 4-byte
          float not aligned to 16 bytes will cause a segfault.
graal.ForceExplicitReachabilityFence = false                             [Boolean]
          Force an explicit compiler node for Reference.reachabilityFence,
          instead of relying on FrameState liveness
graal.FullUnroll = true                                                  [Boolean]
graal.FullUnrollCodeSizeBudgetFactorForLargeGraphs = 2.0                  [Double]
          Maximum factor by which full unrolling can increase code size for large
          graphs. The FullUnrollSmallGraphThreshold option determines which
          graphs are small
graal.FullUnrollCodeSizeBudgetFactorForSmallGraphs = 10.0                 [Double]
          Maximum factor by which full unrolling can increase code size for small
          graphs. The FullUnrollSmallGraphThreshold option determines which
          graphs are small
graal.FullUnrollConstantCompareBoost = 15                                [Integer]
graal.FullUnrollMaxApplication = 60                                      [Integer]
graal.FullUnrollMaxIterations = 600                                      [Integer]
graal.FullUnrollMaxNodes = 700                                           [Integer]
graal.FullUnrollSmallGraphThreshold = 1000                               [Integer]
          The threshold in terms of NodeSize for a graph to be considered small
          for the purpose of full unrolling. Applied in conjunction with the
          FullUnrollCodeSizeBudgetFactorForSmallGraphs and
          FullUnrollCodeSizeBudgetFactorForLargeGraphs options.
graal.GCDebugStartCycle = -1                                             [Integer]
          Start tracing compiled GC barriers after N garbage collections
          (disabled if N <= 0).
graal.GenLoopSafepoints = true                                           [Boolean]
graal.GenericDynamicCounters = false                                     [Boolean]
          Turn on the benchmark counters, and displays the results on VM shutdown
graal.GraalArithmeticStubs = true                                        [Boolean]
          Use Graal arithmetic stubs instead of HotSpot stubs where possible
graal.GraalCompileOnly = null                                             [String]
          A filter applied to a method the VM has selected for compilation by
          Graal. A method not matching the filter is redirected to a lower tier
          compiler. The filter format is the same as for the MethodFilter option.
graal.GraphCompressionThreshold = 70                                     [Integer]
          Graal graph compression is performed when percent of live nodes falls
          below this value
graal.GuardPriorities = true                                             [Boolean]
graal.HotCodeMinSelfTime = 0.001                                          [Double]
          Minimal self time for a compilation unit to be considered hot globally.
graal.HotSpotDeoptExplicitExceptions = false                             [Boolean]
          Testing only option that forces deopts for exception throws
graal.HotSpotPostOnExceptions = false                                    [Boolean]
          Testing only option that forces deopts for exception throws
graal.HotSpotPrintInlining = false                                       [Boolean]
          Print inlining optimizations
graal.InjectedCompilationDelay = 0                                       [Integer]
          The number of seconds by which to slow down each compilation. The
          compilations slowed down can be restricted with MethodFilter. This
          option exists to test the compilation watchdog.
graal.Inline = true                                                      [Boolean]
          Enable inlining
graal.InlineDuringParsing = true                                         [Boolean]
          Inlines trivial methods during bytecode parsing.
graal.InlineDuringParsingMaxDepth = 10                                   [Integer]
          Maximum depth when inlining during bytecode parsing.
graal.InlineEverything = false                                           [Boolean]
graal.InlineGraalStubs = false                                           [Boolean]
          Embed all the emitted code for Graal-generated stubs.
graal.InlineMegamorphicCalls = true                                      [Boolean]
          Inline calls with megamorphic type profile (i.e., not all types could
          be recorded).
graal.InlineMonomorphicCalls = true                                      [Boolean]
          Inline calls with monomorphic type profile.
graal.InlinePartialIntrinsicExitDuringParsing = true                     [Boolean]
          Inlines partial intrinsic exits during bytecode parsing when possible.
          A partial intrinsic exit is a call within an intrinsic to the method
          being intrinsified and denotes semantics of the original method that
          the intrinsic does not support.
graal.InlinePolymorphicCalls = true                                      [Boolean]
          Inline calls with polymorphic type profile.
graal.InlineVTableStubs = true                                           [Boolean]
graal.InliningDepthError = 1000                                          [Integer]
          Maximum inlining depth during partial evaluation before reporting an
          infinite recursion
graal.InterceptBailout = false                                           [Boolean]
          Intercept also bailout exceptions
graal.Intrinsify = true                                                  [Boolean]
          Use compiler intrinsifications.
graal.IsolatedLoopHeaderAlignment = 32                                   [Integer]
          Alignment in bytes for loop header blocks that have no fall through
          paths.
graal.IterativePeelingLimit = 2                                          [Integer]
          Allow iterative peeling of loops up to this many times (each time the
          peeling phase runs).
graal.LIRDynMoveProfileMethod = false                                    [Boolean]
          Enable dynamic move profiling per method.
graal.LIRInstructionVerifierPath = null                                   [String]
          Path to jar file containing LIR instruction verifier.
graal.LIROptConstantLoadOptimization = true                              [Boolean]
          Enable constant load optimization.
graal.LIROptControlFlowOptimizer = true                                  [Boolean]
graal.LIROptEdgeMoveOptimizer = true                                     [Boolean]
graal.LIROptLSRAEliminateSpillMoves = true                               [Boolean]
          Enable spill move elimination.
graal.LIROptLSRAOptimizeSpillPosition = true                             [Boolean]
          Enable spill position optimization
graal.LIROptLSStackSlotAllocator = true                                  [Boolean]
          Use linear scan stack slot allocation.
graal.LIROptNullCheckOptimizer = true                                    [Boolean]
graal.LIROptRedundantMoveElimination = true                              [Boolean]
graal.LIROptStackMoveOptimizer = true                                    [Boolean]
graal.LIROptimization = true                                             [Boolean]
          Enable LIR level optimizations.
graal.LIRProfileMethods = false                                          [Boolean]
          Enables profiling of methods.
graal.LIRProfileMoves = false                                            [Boolean]
          Enables profiling of move types on LIR level. Move types are for
          example stores (register to stack), constant loads (constant to
          register) or copies (register to register).
graal.LSRAOptSplitOnly = false                                           [Boolean]
          LSRA optimization: Only split but do not reassign
graal.LSRAOptimization = false                                           [Boolean]
          Enable LSRA optimization
graal.LimitInlinedInvokes = 5.0                                           [Double]
graal.ListMetrics = false                                                [Boolean]
          Lists on the console at VM shutdown the metric names available to the
          Timers, Counters and MemUseTrackers options. Note that this only lists
          the metrics that were initialized during the VM execution and so will
          not include metrics for compiler code that is not executed.
graal.LoadExceptionObjectInVM = false                                    [Boolean]
          Use a VM runtime call to load and clear the exception object from the
          thread at the start of a compiled exception handler.
graal.LoadProfiles = null                                                 [String]
          Load per compilation profile information.
graal.Log = null                                                          [String]
          Pattern for specifying scopes in which logging is enabled. See the Dump
          option for the pattern syntax.
graal.LogFile = null                                                      [String]
          File to which logging is sent. A %p in the name will be replaced with a
          string identifying the process, usually the process id and %t will be
          replaced by System.currentTimeMillis(). If the current runtime is in an
          isolate, then %i will be replaced by '<isolate id>' otherwise %i is
          removed. An %I is the same as %i except that the replacement is
          '<isolate id>@<isolate address>'. Using %o as filename sends logging to
          System.out whereas %e sends logging to System.err.
graal.LogVerbose = false                                                 [Boolean]
          Enable more verbose log output when available
graal.LoopExitVsLoopEndFrequencyDiff = 1000.0                             [Double]
          Scaling factor of frequency difference computed based on loop ends or
          exits
graal.LoopHeaderAlignment = 16                                           [Integer]
          Alignment in bytes for loop header blocks.
graal.LoopMaxUnswitch = 3                                                [Integer]
graal.LoopPeeling = true                                                 [Boolean]
graal.LoopPredication = true                                             [Boolean]
          Hoists array bounds checks out of simple loops. This is ignored if
          SpeculativeGuardMovement is enabled.
graal.LoopPredicationMainPath = true                                     [Boolean]
          Restricts LoopPredication to only focus on array bounds checks that
          dominate the back edge of a loop.
graal.LoopUnswitch = true                                                [Boolean]
graal.LoopUnswitchFrequencyBoost = 20.0                                   [Double]
          Number of nodes allowed for a loop unswitching per loop frequency. The
          number of nodes allowed for the unswitching is proportional to the
          relative frequency of the loop by this constant.
graal.LoopUnswitchFrequencyMaxFactor = 0.95                               [Double]
          Maximun value for the frequency factor of an invariant.
graal.LoopUnswitchFrequencyMinFactor = 0.05                               [Double]
          Minimum value for the frequency factor of an invariant.
graal.LoopUnswitchMaxIncrease = 2000                                     [Integer]
          Maximum loop unswitching code size increase in nodes.
graal.LoopUnswitchMinSplitFrequency = 1.0                                 [Double]
          Lower bound for the minimun frequency of an invariant condition to be
          unswitched.
graal.LoopUnswitchTrivial = 20                                           [Integer]
          Number of nodes allowed for a loop unswitching regardless of the loop
          frequency.
graal.MatchExpressions = true                                            [Boolean]
          Allow backend to match complex expressions.
graal.MaxCompilationProblemsPerAction = 2                                [Integer]
          The maximum number of compilation failures to handle with the action
          specified by CompilationFailureAction before changing to a less verbose
          action. This does not apply to the ExitVM action.
graal.MaxDuplicationFactor = 2.0                                          [Double]
          Max amount of extra effort to expend handling irreducible loops. A
          value <= 1 disables support for irreducible loops.
graal.MaxTemplatesPerSnippet = 50                                        [Integer]
graal.MaxUnswitchSuccessors = 64                                         [Integer]
          Maximum number of split successors before aborting unswitching.
graal.MaximumDesiredSize = 20000                                         [Integer]
          Maximum desired size of the compiler graph in nodes.
graal.MaximumEscapeAnalysisArrayLength = 128                             [Integer]
          The maximum length of an array that will be escape analyzed.
graal.MaximumInliningSize = 300                                          [Integer]
          Inlining is explored up to this number of nodes in the graph for each
          call site.
graal.MaximumLoopExplosionCount = 10000                                  [Integer]
          Max number of loop explosions per method.
graal.MaximumRecursiveInlining = 5                                       [Integer]
          Maximum level of recursive inlining.
graal.MegamorphicInliningMinMethodProbability = 0.33                      [Double]
          Minimum probability for methods to be inlined for megamorphic type
          profiles.
graal.MemUseTrackers = null                                               [String]
          Comma separated names of memory usage trackers that are enabled
          irrespective of the value for TrackMemUse option. An empty value
          enables all memory usage trackers unconditionally.
graal.MethodFilter = null                                                 [String]
          Pattern for matching methods. The syntax for a pattern is:
          
            SourcePatterns = SourcePattern ["," SourcePatterns] .
            SourcePattern = [ "~" ] [ Class "." ] method [ "(" [ Parameter { ";" Parameter } ] ")" ] .
            Parameter = Class | "int" | "long" | "float" | "double" | "short" | "char" | "boolean" .
            Class = { package "." } class .
          
          Glob pattern matching (*, ?) is allowed in all parts of the source pattern.
          The "~" prefix negates the pattern.
          
          Positive patterns are joined by an "or" operator: "A,B" matches anything
          matched by "A" or "B". Negative patterns are joined by "and not": "~A,~B"
          matches anything not matched by "A" and not matched by "B". "A,~B,~C,D"
          matches anything matched by "A" or "D" and not matched by "B" and not
          matched by "C".
          
          A set of patterns containing negative patterns but no positive ones contains
          an implicit positive "*" pattern: "~A,~B" is equivalent to "*,~A,~B".
          
          Examples of method filters:
          ---------
            *
          
            Matches all methods in all classes.
          ---------
            canonical(CanonicalizerTool;LogicNode;LogicNode)
          
            Matches all methods named "canonical", with the first parameter of type
            "CanonicalizerTool", and the second and third parameters of type
            "LogicNode".
            The packages of the parameter types are irrelevant.
          ---------
            arraycopy(Object;;;;)
          
            Matches all methods named "arraycopy", with the first parameter
            of type "Object", and four more parameters of any type. The
            packages of the parameter types are irrelevant.
          ---------
            List.set
          
            Matches all methods named "set" in a class whose simple name is "List".
          ---------
            *List.set
          
            Matches all methods named "set" in a class whose simple name ends with "List".
          ---------
            org.graalvm.compiler.nodes.PhiNode.*
          
            Matches all methods in the class "org.graalvm.compiler.nodes.PhiNode".
          ---------
            org.graalvm.compiler.nodes.*.canonical
          
            Matches all methods named "canonical" in classes in the package
            "org.graalvm.compiler.nodes".
          ---------
            arraycopy,toString
          
            Matches all methods named "arraycopy" or "toString", meaning that ',' acts
            as an "or" operator.
          ---------
            java.util.*.*.,~java.util.*Array*.*
            java.util.*.*.,~*Array*.*
          
            These patterns are equivalent and match all methods in the package
            "java.util" except for classes that have "Array" in their name.
          ---------
            ~java.util.*.*
          
            Matches all methods in all classes in all packages except for anything in
            the "java.util" package.
graal.MethodFilterRootOnly = false                                       [Boolean]
          Only check MethodFilter against the root method in the context if true,
          otherwise check all methods
graal.MethodInlineBailoutLimit = 5000                                    [Integer]
          Per-compilation method inlining exploration limit before giving up (use
          0 to disable)
graal.MetricsFile = null                                                  [String]
          File to which metrics are dumped per compilation.
          A CSV format is used if the file ends with .csv otherwise a more
          human readable format is used. The fields in the CSV format are:
                     compilable - method being compiled
            compilable_identity - identity hash code of compilable
                 compilation_nr - where this compilation lies in the ordered
                                  sequence of all compilations identified by
                                  compilable_identity
                 compilation_id - runtime issued identifier for the compilation
                    metric_name - name of metric
                   metric_value - value of metric
graal.MinimalBulkZeroingSize = 2048                                      [Integer]
          If applicable, use bulk zeroing instructions when the zeroing size in
          bytes exceeds this threshold.
graal.MinimalGraphNodeSizeCheckSize = 1000                               [Integer]
          Minimal size in NodeSize to check the graph size increases of phases.
graal.MinimumPeelFrequency = 0.35                                          [Float]
graal.MoveGuardsUpwards = true                                           [Boolean]
          Move guard nodes to earlier places in the dominator tree if all
          successors of basic block share a common guard condition.
graal.NDCV = 0                                                           [Integer]
          Run level for NoDeadCodeVerifyHandler (0 = off, 1 = info, 2 = verbose,
          3 = fatal)
graal.ObjdumpExecutables := "objdump,gobjdump"                            [String]
          Comma separated list of candidate GNU objdump executables. If not
          specified, disassembling via GNU objdump is disabled. Otherwise, the
          first existing executable in the list is used.
graal.OmitHotExceptionStacktrace = false                                 [Boolean]
graal.OptAssumptions = true                                              [Boolean]
graal.OptConvertDeoptsToGuards = true                                    [Boolean]
graal.OptDeoptimizationGrouping = true                                   [Boolean]
graal.OptDevirtualizeInvokesOptimistically = true                        [Boolean]
graal.OptEarlyReadElimination = true                                     [Boolean]
graal.OptEliminateGuards = true                                          [Boolean]
graal.OptFloatingReads = true                                            [Boolean]
graal.OptImplicitNullChecks = true                                       [Boolean]
graal.OptReadElimination = true                                          [Boolean]
graal.OptScheduleOutOfLoops = true                                       [Boolean]
graal.OptimizationLog = null                                         [EconomicSet]
          Enable the structured optimization log and specify where it is printed.
          The accepted values are:
            Directory - Format the structured optimization log as JSON and print it to files in a directory.
                        The directory is specified by OptimizationLogPath. If OptimizationLogPath is not set,
                        the target directory is DumpPath/optimization_log.
               Stdout - Print the structured optimization log to the standard output.
                 Dump - Dump optimization trees for IdealGraphVisualizer according to the PrintGraph option.
          It is possible to specify multiple comma-separated values.
graal.OptimizationLogPath = null                                          [String]
          Path to the directory where the optimization log is saved if
          OptimizationLog is set to Directory. Directories are created if they do
          no exist.
graal.OverrideProfiles = false                                           [Boolean]
          Allow multiple compilations of the same method by overriding existing
          profiles.
graal.PartialEscapeAnalysis = true                                       [Boolean]
graal.PartialUnroll = true                                               [Boolean]
graal.PeelALot = false                                                   [Boolean]
          Stress test for the loop peeling optimization by applying it
          aggressively
graal.PeelOnlyLoopWithNodeID = -1                                        [Integer]
          Peel only the loop with the specific loop begin node ID for debugging
          purposes
graal.PreferUnsignedComparison = true                                    [Boolean]
          Rewrite signed comparisons to unsigned ones if the result is equal.
graal.PrintBBInfo = false                                                [Boolean]
          Enables dumping of basic blocks relative PC and frequencies in the dump
          directory.
graal.PrintBackendCFG = false                                            [Boolean]
          Enable dumping scheduled HIR, LIR, register allocation and code
          generation info to the C1Visualizer.
graal.PrintBlockMapping = false                                          [Boolean]
          Enable dumping CFG built during initial BciBlockMapping
graal.PrintCanonicalGraphStringFlavor = 0                                [Integer]
          Choose format used when dumping canonical text for graphs: 0 gives a
          scheduled graph (better for spotting changes involving the schedule)
          while 1 gives a CFG containing expressions rooted at fixed nodes
          (better for spotting small structure differences)
graal.PrintCanonicalGraphStrings = false                                 [Boolean]
          Enable dumping canonical text from for graphs.
graal.PrintCompilation = false                                           [Boolean]
          Print an informational line to the console for each completed
          compilation.
graal.PrintGraph := File                                                  [String]
          Where IdealGraphVisualizer graph dumps triggered by Dump or DumpOnError
          should be written.
          The accepted values are:
                File - Dump IGV graphs to the local file system (see DumpPath).
             Network - Dump IGV graphs to the network destination specified by PrintGraphHost and PrintGraphPort.
                       If a network connection cannot be opened, dumping falls back to file dumping. 
             Disable - Do not dump IGV graphs.
graal.PrintGraphFile := true                                             [Boolean]
          Setting to true sets PrintGraph=file, setting to false sets
          PrintGraph=network
graal.PrintGraphHost = "127.0.0.1"                                        [String]
          Host part of the address to which graphs are dumped.
graal.PrintGraphPort = 4445                                              [Integer]
          Port part of the address to which graphs are dumped in binary format.
graal.PrintGraphStateDiff = false                                        [Boolean]
          Prints the difference in the graph state caused by each phase of the
          suite.
graal.PrintGraphWithSchedule = false                                     [Boolean]
          Schedule graphs as they are dumped.
graal.PrintIRWithLIR = false                                             [Boolean]
          Print HIR along side LIR as the latter is generated
graal.PrintLIRWithAssembly = false                                       [Boolean]
          Include the LIR as comments with the final assembly.
graal.PrintLoweringScheduleToTTY = false                                 [Boolean]
          Print schedule result pre lowering to TTY.
graal.PrintProfileLoading = false                                        [Boolean]
          Print to stdout when a profile is loaded.
graal.PrintProfilingInformation = false                                  [Boolean]
          Print profiling information when parsing a method's bytecode
graal.PrintUnmodifiedGraphs = true                                       [Boolean]
          Dump a graph even if it has not changed since it was last dumped.
          Change detection is based on adding and deleting nodes or changing
          inputs.
graal.ProfileAllocations = false                                         [Boolean]
          Enable profiling of allocation sites.
graal.ProfileAllocationsContext = AllocatingMethod                        [String]
          Control the naming and granularity of the counters when using
          ProfileAllocations.
          The accepted values are:
                  AllocatingMethod - a counter per method
                   InstanceOrArray - one counter for all instance allocations and
                                     one counter for all array allocations 
                     AllocatedType - one counter per allocated type
            AllocatedTypesInMethod - one counter per allocated type, per method
           
graal.ProfileCompiledMethods = false                                     [Boolean]
graal.ProfileMethodFilter = null                                          [String]
          Restrict saving or loading of profiles based on this filter. See the
          MethodFilter option for the pattern syntax.
graal.ProfileMonitors = false                                            [Boolean]
          Enable profiling of monitor operations.
graal.RawConditionalElimination = true                                   [Boolean]
graal.ReadEliminationMaxLoopVisits = 5                                   [Integer]
graal.ReassociateExpressions = true                                      [Boolean]
          Re-associate loop invariants and constants.
graal.ReduceDCE = true                                                   [Boolean]
          Disable optional dead code eliminations
graal.RegisterPressure = null                                             [String]
          Comma separated list of registers that register allocation is limited
          to.
graal.RemoveLoopSafepoints = true                                        [Boolean]
          Remove safepoints on counted loop ends.
graal.RemoveNeverExecutedCode = true                                     [Boolean]
graal.ReplaceInputsWithConstantsBasedOnStamps = true                     [Boolean]
graal.SaveProfiles = false                                               [Boolean]
          Save per compilation profile information.
graal.SaveProfilesPath = null                                             [String]
          Path for saving compilation profiles. If the value is omitted the debug
          dump path will be used.
graal.ShowConfiguration = none                                            [String]
          Writes to the VM log information about the compiler configuration
          selected.
graal.ShowDumpFiles := true                                              [Boolean]
          Print the name of each dump file path as it's created.
graal.ShowSubstitutionSourceInfo = false                                 [Boolean]
          Controls whether the source position information of snippets and method
          substitutions are exposed to HotSpot. Can be useful when profiling to
          get more precise position information.
graal.SimpleFastInflatedLocking = true                                   [Boolean]
          Handle simple cases for inflated monitors in the fast-path.
graal.SmallCompiledLowLevelGraphSize = 330                               [Integer]
          If the previous low-level graph size of the method exceeds the
          threshold, it is not inlined.
graal.SnippetCounters = false                                            [Boolean]
          Enable counters for various paths in snippets.
graal.SpectrePHTBarriers = None                                           [String]
          Select a strategy to mitigate speculative bounds check bypass (aka
          Spectre-PHT or Spectre V1).
          This is an experimental option - execution of untrusted code is not supported by GraalVM CE.
          The accepted values are:
                            None - No mitigations are used in JIT compiled code.
                      AllTargets - Speculative execution on all branch targets is
                                   stopped using speculative execution barrier instructions.
                                   This option is equivalent to setting SpeculativeExecutionBarriers to true.
                    GuardTargets - Branch targets relevant to Java memory safety are instrumented
                                   with barrier instructions. This option has less performance impact
                                   than AllTargets. 
            NonDeoptGuardTargets - Same as GuardTargets, except that branches which deoptimize are not
                                   protected since they can not be executed repeatedly and are thus less
                                   likely to be successfully exploited in an attack.
          
                                   
          Note that all modes except "None" will also instrument branch target blocks containing UNSAFE memory accesses
          with barrier instructions.
graal.SpectrePHTIndexMasking = false                                     [Boolean]
          Mask indices to scope access to allocation size after bounds check.
graal.SpeculativeExecutionBarriers = false                               [Boolean]
          Stop speculative execution on all branch targets with execution barrier
          instructions.
graal.SpeculativeGuardMovement = true                                    [Boolean]
          Move loop invariant guards (e.g., array bounds checks) out of loops.
graal.StressExplicitExceptionCode = false                                [Boolean]
          Stress the code emitting explicit exception throwing code.
graal.StressInvokeWithExceptionNode = false                              [Boolean]
          Stress the code emitting invokes with explicit exception edges.
graal.StressTestEarlyReads = false                                       [Boolean]
          Stress the code by emitting reads at earliest instead of latest point.
graal.StrictDeoptInsertionChecks = false                                 [Boolean]
          Perform checks that guards and deopts aren't introduced in graphs that
          should handle exceptions explicitly
graal.StrictProfiles = true                                              [Boolean]
          Throw an error if an attempt is made to overwrite/update a profile
          loaded from disk.
graal.StringIndexOfConstantLimit = 4096                                  [Integer]
          String.indexOf invocations will be evaluated at compile time if the
          receiver is a constant and its length is smaller than this value.
graal.SupportJsrBytecodes = true                                         [Boolean]
graal.SupportOSRWithLocks = true                                         [Boolean]
          Support OSR compilations with locks. If DeoptAfterOSR is true we can
          per definition not have unbalanced enter/exits mappings. If
          DeoptAfterOSR is false insert artificial monitor enters after the
          OSRStart to have balanced enter/exits in the graph.
graal.SystemicCompilationFailureRate = 1                                 [Integer]
          Compilation failure rate indicating a systemic compilation problem that
          will issue a warning. The value is made absolute and clamped to produce
          P, a value between 0 and 100. Systemic failure is detected if the
          percent of failing compilations in a sliding time window >= P. A
          negative value will cause the VM to exit after issuing the warning. Set
          to 0 to disable systemic compilation problem detection.
graal.Time = null                                                         [String]
          Pattern for specifying scopes in which timing is enabled. See the Dump
          option for the pattern syntax. An empty value enables all timers
          unconditionally.
graal.TimedDynamicCounters = -1                                          [Integer]
          Turn on the benchmark counters, and displays the results every n
          milliseconds
graal.Timers = null                                                       [String]
          Comma separated names of timers that are enabled irrespective of the
          value for Time option. An empty value enables all timers
          unconditionally.
graal.TraceBytecodeParserLevel = 0                                       [Integer]
          The trace level for the bytecode parser. A value of 1 enables
          instruction tracing and any greater value emits a frame state trace
          just prior to each instruction trace.Instruction tracing output from
          multiple compiler threads will be interleaved so use of this option
          make most sense for single threaded compilation. The MethodFilter
          option can be used to refine tracing to selected methods.
graal.TraceEscapeAnalysis = false                                        [Boolean]
graal.TraceExceptionHandlerStub = false                                  [Boolean]
          Trace execution of stub used to handle an exception thrown by a callee.
graal.TraceInlineDuringParsing = false                                   [Boolean]
          Traces inlining performed during bytecode parsing.
graal.TraceInlining = false                                              [Boolean]
          Enable tracing of inlining decisions.
          Output format:
            compilation of 'Signature of the compilation root method':
              at 'Signature of the root method' ['Bytecode index']: <'Phase'> 'Child method signature': 'Decision made about this callsite'
                at 'Signature of the child method' ['Bytecode index']: 
                   |--<'Phase 1'> 'Grandchild method signature': 'First decision made about this callsite'
                   \--<'Phase 2'> 'Grandchild method signature': 'Second decision made about this callsite'
                at 'Signature of the child method' ['Bytecode index']: <'Phase'> 'Another grandchild method signature': 'The only decision made about this callsite.'
graal.TraceInliningForStubsAndSnippets = false                           [Boolean]
          Enable inlining decision tracing in stubs and snippets.
graal.TraceLIRGeneratorLevel = 0                                         [Integer]
          The trace level for the LIR generator
graal.TraceMonitorsMethodFilter = null                                    [String]
          Trace monitor operations in methods whose fully qualified name contains
          this substring.
graal.TraceMonitorsTypeFilter = null                                      [String]
          Trace monitor operations on objects whose type contains this substring.
graal.TraceParserPlugins = false                                         [Boolean]
          Traces use of plugins during bytecode parsing.
graal.TraceUnwindStub = false                                            [Boolean]
          Trace execution of the stub that routes an exception to a handler in
          the calling frame.
graal.TrackMemUse = null                                                  [String]
          Pattern for specifying scopes in which memory use tracking is enabled.
          See the Dump option for the pattern syntax. An empty value enables all
          memory use trackers unconditionally.
graal.TrackNodeInsertion = false                                         [Boolean]
          Track source stack trace where a node was inserted into the graph.
graal.TrackNodeSourcePosition = false                                    [Boolean]
          Track the NodeSourcePosition.
graal.TrivialInliningSize = 10                                           [Integer]
          Graphs with less than this number of nodes are trivial and therefore
          always inlined.
graal.TruffleCompilerConfiguration = null                                 [String]
          Select a compiler configuration for Truffle compilation (default: use
          Graal system compiler configuration).
graal.TruffleHostInlining = true                                         [Boolean]
          Whether Truffle host inlining is enabled.
graal.TruffleHostInliningBaseBudget = 5000                               [Integer]
          Maximum budget for Truffle host inlining for runtime compiled methods.
graal.TruffleHostInliningByteCodeInterpreterBudget = 100000              [Integer]
          Maximum budget for Truffle host inlining for runtime compiled methods
          with a BytecodeInterpreterSwitch annotation.
graal.TruffleHostInliningMaxExplorationDepth = 1000                      [Integer]
          Determines the maximum call depth for exploration during host inlining.
graal.TruffleHostInliningMaxSubtreeInvokes = 20                          [Integer]
          Maximum number of subtree invokes for a subtree to get inlined until it
          is considered too complex.
graal.TruffleHostInliningMinFrequency = 0.001                             [Double]
          Minimum relative frequency for calls to get inlined. Default 0.001 on
          HotSpot and no minimum frequency on SVM.
graal.TruffleHostInliningPrintExplored = false                           [Boolean]
          When logging is activated for this phase enables printing of only
          explored, but ultimately not inlined call trees.
graal.TruffleImmutableFrameFields = true                                 [Boolean]
          Whether Truffle should mark final frame fields as immutable.
graal.TruffleTrustedNonNullCast = true                                   [Boolean]
          Whether Truffle trusted non-null casts are enabled.
graal.TruffleTrustedTypeCast = true                                      [Boolean]
          Whether Truffle trusted type casts are enabled.
graal.TrustFinalDefaultFields = true                                     [Boolean]
          Determines whether to treat final fields with default values as
          constant.
graal.TypeCheckMaxHints = 2                                              [Integer]
          The maximum number of profiled types that will be used when compiling a
          profiled type check. Note that TypeCheckMinProfileHitProbability also
          influences whether profiling info is used in compiled type checks.
graal.TypeCheckMinProfileHitProbability = 0.5                             [Double]
          If the probability that a type check will hit one the profiled types
          (up to TypeCheckMaxHints) is below this value, the type check will be
          compiled without profiling info
graal.UnrollMaxIterations = 16                                           [Integer]
graal.UseBranchesWithin32ByteBoundary = false                            [Boolean]
          Force branch instructions to align with 32-bytes boundary, to mitigate
          the jcc erratum. See
          https://www.intel.com/content/dam/support/us/en/documents/processors/mitigations-jump-conditional-code-erratum.pdf
          for more details. If not set explicitly, the default value will be
          determined according to the CPU model.
graal.UseCompilationStatistics = false                                   [Boolean]
          Enables CompilationStatistics.
graal.UseExceptionProbability = true                                     [Boolean]
graal.UseLoopEndFrequencies = false                                      [Boolean]
          Derive loop frequencies only from backedge frequencies instead of from
          loop exit frequencies.
graal.UseLoopLimitChecks = true                                          [Boolean]
graal.UseSnippetGraphCache = true                                        [Boolean]
          Use a cache for snippet graphs.
graal.UseSnippetTemplateCache = true                                     [Boolean]
          Use a LRU cache for snippet templates.
graal.UseTrappingNullChecks = true                                       [Boolean]
          Use traps for null checks instead of explicit null-checks
graal.UseTypeCheckHints = true                                           [Boolean]
graal.Verify = null                                                       [String]
          Pattern for specifying scopes in which logging is enabled. See the Dump
          option for the pattern syntax.
graal.VerifyBalancedMonitors = false                                     [Boolean]
          Emit extra code to dynamically check monitor operations are balanced.
graal.VerifyGraalGraphEdges = false                                      [Boolean]
          Perform expensive verification of graph inputs, usages, successors and
          predecessors
graal.VerifyGraalGraphs = true                                           [Boolean]
          Verify graphs often during compilation when assertions are turned on
graal.VerifyGraalPhasesSize = false                                      [Boolean]
          Verify before - after relation of the relative, computed, code size of
          a graph
graal.VerifyHeapAtReturn = false                                         [Boolean]
          Perform platform dependent validation of the Java heap at returns
graal.VerifyKillCFGUnusedNodes = false                                   [Boolean]
          Verify that there are no new unused nodes when performing killCFG
graal.VerifyPhases = false                                               [Boolean]
graal.WarnAboutCodeSignatureMismatch = true                              [Boolean]
          Print to stdout when a compilation performed with different profiles
          generates different backend code.
graal.WarnAboutGraphSignatureMismatch = true                             [Boolean]
          Print to stdout when a compilation performed with different profiles
          generates different frontend IR.
graal.WarnAboutNotCachedLoadedAccess = true                              [Boolean]
          Print to stdout when requesting profiling info not present in a loaded
          profile.
graal.WarnMissingIntrinsic = false                                       [Boolean]
          Print a warning when a missing intrinsic is seen.
graal.ZapStackOnMethodEntry = false                                      [Boolean]
