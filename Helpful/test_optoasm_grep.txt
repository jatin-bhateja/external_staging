+ * @test
+ * @summary verify that -XX:+OptimizeSubstring removes String.substring()
+ * @library /test/lib /
+ * @requires vm.compMode != "Xint" & vm.flavor == "server" & (vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel == 4) & vm.debug == true
+ * @requires !vm.emulatedClient & !vm.graal.enabled
+ * @run driver compiler.c2.TestOptimizeSubstring
+ */
+
+package compiler.c2;
+
+import jdk.test.lib.process.ProcessTools;
+import jdk.test.lib.process.OutputAnalyzer;
+import jdk.test.lib.Asserts;
+import jdk.test.lib.Platform;
+
+public class TestOptimizeSubstring {
+
+    public static void main (String args[]) {
+        if (args.length == 0) {
+            check(true);  // check generated code when c2 enables OptimizeSubstring
+            check(false); // ... and disabled
+            check_nontrivial();
+        } else if (args[0].equals("nontrivial")) {
+            boolean val1 = false;
+             for (int i = 0; i < 20_000; ++i) {
+                val1 |= TestOptimizeSubstring.useStartsWith_NonTrivial();
+            }
+
+            Asserts.assertFalse(val1, "val1 should be false");
+        } else {
+            boolean val1 = false;
+            boolean val2 = false;
+            boolean caughtEx;
+
+            for (int i = 0; i < 20_000; ++i) {
+                val1 |= TestOptimizeSubstring.useStartsWith("abcdef");
+                val2 |= TestOptimizeSubstring.useStartsWith("efgdedf");
+
+                caughtEx = false;
+                try {
+                    TestOptimizeSubstring.useStartsWith("");
+                } catch(StringIndexOutOfBoundsException e) {
+                    caughtEx = true;
+                }
+                Asserts.assertTrue(caughtEx, "useStartsWith(\"\") should throw StringIndexOutOfBoundsException");
+            }
+
+            Asserts.assertTrue (val1, "val1 should be true");
+            Asserts.assertFalse(val2, "val2 should be false");
+        }
+    }
+
+    private static void check(boolean enabled) {
+        OutputAnalyzer oa;
+        // ideally, we should check the opcode 'call' as well, but x86_32.ad uses all CAPITAL opcodes.
+        // the feature is 'CALL, static  wrapper for: _new_array_nozero_Java' on i686.
+        String newStringAlloc = /*call ,*/"static  wrapper for: _new_array_nozero_Java";
+        try {
+            oa = ProcessTools.executeTestJvm("-XX:+UnlockDiagnosticVMOptions", "-Xbootclasspath/a:.",
+                    "-XX:" + (enabled ? "+" : "-") + "OptimizeSubstring",
+                    "-XX:+PrintOptoAssembly", "-XX:-TieredCompilation",
+                    "-XX:CompileOnly=" + TestOptimizeSubstring.class.getName() + "::useStartsWith",
+                    TestOptimizeSubstring.class.getName(),
+                    "runtest");
+        } catch (Exception e) {
+            throw new Error("Exception launching child for case enabled=" + enabled + " : " + e, e);
+        }
+        oa.shouldHaveExitValue(0);
+
+        if (enabled) {
+            oa.shouldNotContain(newStringAlloc);
+        } else {
+            oa.shouldContain(newStringAlloc);
+        }
+   }
+
+    private static void check_nontrivial() {
+        OutputAnalyzer oa;
+        try {
+            oa = ProcessTools.executeTestJvm("-XX:+UnlockDiagnosticVMOptions", "-Xbootclasspath/a:.",
+                    "-XX:+OptimizeSubstring", "-XX:-UseOnStackReplacement",
+                    "-XX:+PrintOptoAssembly", "-XX:-TieredCompilation",
+                    "-XX:CompileOnly=" + TestOptimizeSubstring.class.getName() + "::useStartsWith_NonTrivial",
+                    TestOptimizeSubstring.class.getName(),
+                    "nontrivial");
+        } catch (Exception e) {
+            throw new Error("Exception launching child for check_nontrivial");
+        }
+        oa.shouldHaveExitValue(0);
+    }
+
+    private static boolean useStartsWith(String s) {
+        String x = s.substring(1);
+        return x.startsWith("a") | x.startsWith("b") | x.startsWith("c");
+    }
+
+    // courtesy of John Rose's comment
+    // https://github.com/openjdk/jdk/pull/974#pullrequestreview-551773771
+    private static boolean useStartsWith_NonTrivial() {
+        String s = "abcd";
+        String x = s.substring(1, 2);
+        return x.startsWith("bc");
+    }
+}
