CompileCommand: print json/ext/VectorizedStringEncoder.encode bool print = true
Ruby Engine: jruby
JSON::Parser: JSON::Ext::Parser
== Encoding twitter.json
json.ext.VectorizedStringEncoder loaded successfully.

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2) 6561 2023             json.ext.VectorizedStringEncoder::encode (310 bytes)
 total in heap  [0x00007daf38ccf308,0x00007daf38ccfad8] = 2000
 main code      [0x00007daf38ccf400,0x00007daf38ccfa70] = 1648
 stub code      [0x00007daf38ccfa70,0x00007daf38ccfac0] = 80
 oops           [0x00007daf38ccfac0,0x00007daf38ccfad8] = 24
 mutable data [0x00007daee43bb510,0x00007daee43bb7f8] = 744
 relocation     [0x00007daee43bb510,0x00007daee43bb598] = 136
 metadata       [0x00007daee43bb598,0x00007daee43bb7f8] = 608
 immutable data [0x00007daee43bafc0,0x00007daee43bb500] = 1344
 dependencies   [0x00007daee43bafc0,0x00007daee43bb090] = 208
 nul chk table  [0x00007daee43bb090,0x00007daee43bb0b8] = 40
 handler table  [0x00007daee43bb0b8,0x00007daee43bb130] = 120
 scopes pcs     [0x00007daee43bb130,0x00007daee43bb240] = 272
 scopes data    [0x00007daee43bb240,0x00007daee43bb500] = 704

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Instructions begin]
  0x00007daf38ccf400:   xchg   %ax,%ax
[Entry Point]
  # {method} {0x00007daf007c9560} 'encode' '(Lorg/jruby/util/ByteList;)V' in 'json/ext/VectorizedStringEncoder'
  # this:     rsi:rsi   = 'json/ext/VectorizedStringEncoder'
  # parm0:    rdx:rdx   = 'org/jruby/util/ByteList'
  #           [sp+0x60]  (sp of caller)
  0x00007daf38ccf402:   mov    0x8(%rsi),%r10d
  0x00007daf38ccf406:   cmp    0x8(%rax),%r10d
  0x00007daf38ccf40a:   jne    0x00007daf389683e0           ;   {runtime_call Shared Runtime ic_miss_blob}
[Verified Entry Point]
  0x00007daf38ccf410:   mov    %eax,-0x14000(%rsp)
  0x00007daf38ccf417:   push   %rbp
  0x00007daf38ccf418:   sub    $0x50,%rsp
  0x00007daf38ccf41c:   cmpl   $0x1,0x20(%r15)
  0x00007daf38ccf424:   jne    0x00007daf38ccfa66
  0x00007daf38ccf42a:   mov    %rsi,(%rsp)
  0x00007daf38ccf42e:   mov    0x18(%rdx),%r11d             ; implicit exception: dispatches to 0x00007daf38ccfa14
  0x00007daf38ccf432:   mov    0x10(%rdx),%r8d
  0x00007daf38ccf436:   mov    0xc(%rdx),%r10d
  0x00007daf38ccf43a:   mov    %r10d,%ebp
  0x00007daf38ccf43d:   xor    %ebx,%ebx
  0x00007daf38ccf43f:   lea    0x20(%rbp),%edi
  0x00007daf38ccf442:   cmp    %r8d,%edi
  0x00007daf38ccf445:   jl     0x00007daf38ccf60f
  0x00007daf38ccf44b:   mov    %r11,%r9
  0x00007daf38ccf44e:   movslq %r8d,%rax
  0x00007daf38ccf451:   lea    -0x3(%rax),%rcx
  0x00007daf38ccf455:   dec    %rax
  0x00007daf38ccf458:   mov    $0xffffffff80000000,%rdi
  0x00007daf38ccf45f:   cmp    $0xffffffff80000000,%rcx
  0x00007daf38ccf466:   cmovl  %rdi,%rcx
  0x00007daf38ccf46a:   mov    %ecx,%esi
  0x00007daf38ccf46c:   mov    %ebp,%ecx
  0x00007daf38ccf46e:   cmp    %r8d,%ebp
  0x00007daf38ccf471:   jge    0x00007daf38ccf6b2
  0x00007daf38ccf477:   mov    0xc(%r11),%edx               ; implicit exception: dispatches to 0x00007daf38ccf948
  0x00007daf38ccf47b:   cmp    %edx,%ebp
  0x00007daf38ccf47d:   jae    0x00007daf38ccf94e
  0x00007daf38ccf483:   movslq %edx,%rdi
  0x00007daf38ccf486:   cmp    %rdi,%rax
  0x00007daf38ccf489:   jae    0x00007daf38ccf954
  0x00007daf38ccf48f:   mov    (%rsp),%r13
  0x00007daf38ccf493:   mov    0x20(%r13),%edi
  0x00007daf38ccf497:   mov    0xc(%rdi),%r14d              ; implicit exception: dispatches to 0x00007daf38ccf958
  0x00007daf38ccf49b:   lea    0x1(%rbp),%edx
  0x00007daf38ccf49e:   movzbl 0x10(%r11,%rcx,1),%ebp
  0x00007daf38ccf4a4:   cmp    %r14d,%ebp
  0x00007daf38ccf4a7:   jae    0x00007daf38ccf944
  0x00007daf38ccf4ad:   cmpb   $0x0,0x10(%rdi,%rbp,1)
  0x00007daf38ccf4b2:   jg     0x00007daf38ccf8d2
  0x00007daf38ccf4b8:   inc    %ecx
  0x00007daf38ccf4ba:   cmp    %edx,%ecx
  0x00007daf38ccf4bc:   jl     0x00007daf38ccf49e
  0x00007daf38ccf4be:   cmp    %esi,%ecx
  0x00007daf38ccf4c0:   jge    0x00007daf38ccf5a4
  0x00007daf38ccf4c6:   vmovd  %edi,%xmm1
  0x00007daf38ccf4ca:   jmp    0x00007daf38ccf569
  0x00007daf38ccf4cf:   nop
  0x00007daf38ccf4d0:   mov    (%rsp),%esi
  0x00007daf38ccf4d3:   movzbl 0x10(%r11,%rcx,1),%ebp
  0x00007daf38ccf4d9:   cmp    %r14d,%ebp
  0x00007daf38ccf4dc:   jae    0x00007daf38ccf905
  0x00007daf38ccf4e2:   vmovd  %xmm1,%edi
  0x00007daf38ccf4e6:   cmpb   $0x0,0x10(%rdi,%rbp,1)
  0x00007daf38ccf4eb:   jg     0x00007daf38ccf6c0
  0x00007daf38ccf4f1:   mov    %esi,(%rsp)
  0x00007daf38ccf4f4:   lea    0x1(%rcx),%edx
  0x00007daf38ccf4f7:   movslq %ecx,%rsi
  0x00007daf38ccf4fa:   movzbl 0x11(%r11,%rsi,1),%ebp
  0x00007daf38ccf500:   cmp    %r14d,%ebp
  0x00007daf38ccf503:   jae    0x00007daf38ccf90b
  0x00007daf38ccf509:   cmpb   $0x0,0x10(%rdi,%rbp,1)       ;   {other}
  0x00007daf38ccf50e:   jg     0x00007daf38ccf6bb
  0x00007daf38ccf514:   movzbl 0x12(%r11,%rsi,1),%ebp
  0x00007daf38ccf51a:   lea    0x2(%rcx),%edx
  0x00007daf38ccf51d:   cmp    %r14d,%ebp
  0x00007daf38ccf520:   jae    0x00007daf38ccf90b
  0x00007daf38ccf526:   cmpb   $0x0,0x10(%rdi,%rbp,1)
  0x00007daf38ccf52b:   jg     0x00007daf38ccf6c4
  0x00007daf38ccf531:   movzbl 0x13(%r11,%rsi,1),%ebp
  0x00007daf38ccf537:   lea    0x3(%rcx),%edx
  0x00007daf38ccf53a:   cmp    %r14d,%ebp
  0x00007daf38ccf53d:   jae    0x00007daf38ccf90b
  0x00007daf38ccf543:   cmpb   $0x0,0x10(%rdi,%rbp,1)
  0x00007daf38ccf548:   jg     0x00007daf38ccf6bb
  0x00007daf38ccf54e:   add    $0x4,%ecx
  0x00007daf38ccf551:   cmp    0x4(%rsp),%ecx
  0x00007daf38ccf555:   jl     0x00007daf38ccf4d0
  0x00007daf38ccf55b:   mov    0x30(%r15),%rdx              ; ImmutableOopMap {r11=NarrowOop r9=Oop rdi=NarrowOop r13=Oop xmm1=NarrowOop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) json.ext.VectorizedStringEncoder::encode@285 (line 71)
  0x00007daf38ccf55f:   test   %eax,(%rdx)                  ;   {poll}
  0x00007daf38ccf561:   cmp    (%rsp),%ecx
  0x00007daf38ccf564:   jge    0x00007daf38ccf5a1
  0x00007daf38ccf566:   mov    (%rsp),%esi
  0x00007daf38ccf569:   mov    %esi,%edx
  0x00007daf38ccf56b:   sub    %ecx,%edx
  0x00007daf38ccf56d:   vmovd  %edx,%xmm0
  0x00007daf38ccf571:   xor    %edx,%edx
  0x00007daf38ccf573:   mov    %edx,%edi
  0x00007daf38ccf575:   cmp    %ecx,%esi
  0x00007daf38ccf577:   vmovd  %xmm0,%edx
  0x00007daf38ccf57b:   cmovl  %edi,%edx
  0x00007daf38ccf57e:   vmovd  %edx,%xmm0
  0x00007daf38ccf582:   cmp    $0xfa0,%edx
  0x00007daf38ccf588:   mov    $0xfa0,%edx
  0x00007daf38ccf58d:   mov    %edx,%edi
  0x00007daf38ccf58f:   vmovd  %xmm0,%edx
  0x00007daf38ccf593:   cmova  %edi,%edx
  0x00007daf38ccf596:   add    %ecx,%edx
  0x00007daf38ccf598:   mov    %edx,0x4(%rsp)
  0x00007daf38ccf59c:   jmp    0x00007daf38ccf4d3
  0x00007daf38ccf5a1:   mov    (%rsp),%esi
  0x00007daf38ccf5a4:   cmp    %r8d,%ecx
  0x00007daf38ccf5a7:   jge    0x00007daf38ccf5ca
  0x00007daf38ccf5a9:   movzbl 0x10(%r11,%rcx,1),%ebp
  0x00007daf38ccf5af:   cmp    %r14d,%ebp
  0x00007daf38ccf5b2:   jae    0x00007daf38ccf90d
  0x00007daf38ccf5b8:   cmpb   $0x0,0x10(%rdi,%rbp,1)
  0x00007daf38ccf5bd:   jg     0x00007daf38ccf8d9
  0x00007daf38ccf5c3:   inc    %ecx
  0x00007daf38ccf5c5:   cmp    %r8d,%ecx
  0x00007daf38ccf5c8:   jl     0x00007daf38ccf5a9
  0x00007daf38ccf5ca:   cmp    %r8d,%ebx
  0x00007daf38ccf5cd:   jge    0x00007daf38ccf5fc
  0x00007daf38ccf5cf:   sub    %ebx,%r8d
  0x00007daf38ccf5d2:   add    %r10d,%ebx
  0x00007daf38ccf5d5:   mov    0x24(%r13),%r9d
  0x00007daf38ccf5d9:   mov    %r11,%rdx
  0x00007daf38ccf5dc:   mov    %r9,%rsi
  0x00007daf38ccf5df:   mov    %ebx,%ecx
  0x00007daf38ccf5e1:   nop
  0x00007daf38ccf5e2:   vzeroupper 
  0x00007daf38ccf5e5:   movabs $0x7daee43bb9b0,%rax
  0x00007daf38ccf5ef:   call   0x00007daf38cc7a02           ; ImmutableOopMap {}
                                                            ;*invokevirtual write {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - json.ext.StringEncoder::append@7 (line 365)
                                                            ; - json.ext.VectorizedStringEncoder::encode@306 (line 74)
                                                            ;   {virtual_call}
  0x00007daf38ccf5f4:   nopl   0x10002ec(%rax,%rax,1)       ;   {post_call_nop}
  0x00007daf38ccf5fc:   vzeroupper 
  0x00007daf38ccf5ff:   add    $0x50,%rsp
  0x00007daf38ccf603:   pop    %rbp
  0x00007daf38ccf604:   cmp    0x28(%r15),%rsp              ;   {poll_return}
  0x00007daf38ccf608:   ja     0x00007daf38ccfa50
  0x00007daf38ccf60e:   ret    
  0x00007daf38ccf60f:   mov    0xc(%r11),%esi               ; implicit exception: dispatches to 0x00007daf38ccf9b4
  0x00007daf38ccf613:   lea    -0x1f(%rsi),%ecx
  0x00007daf38ccf616:   test   %ecx,%ecx
  0x00007daf38ccf618:   jl     0x00007daf38ccf9b4
  0x00007daf38ccf61e:   mov    %r11,%r9
  0x00007daf38ccf621:   movabs $0xc7ac9598,%rdi             ;   {oop([B{0x00000000c7ac9598})}
  0x00007daf38ccf62b:   vmovdqu 0x10(%rdi),%ymm3
  0x00007daf38ccf630:   movabs $0xc7ac94e8,%rdi             ;   {oop([B{0x00000000c7ac94e8})}
  0x00007daf38ccf63a:   movabs $0xc7ac9540,%rdx             ;   {oop([B{0x00000000c7ac9540})}
  0x00007daf38ccf644:   vmovdqu 0x10(%rdx),%ymm4
  0x00007daf38ccf649:   vpcmpeqd %ymm5,%ymm5,%ymm5
  0x00007daf38ccf64d:   movabs $0xc7ac9490,%rdx             ;   {oop([B{0x00000000c7ac9490})}
  0x00007daf38ccf657:   vmovdqu 0x10(%rdx),%ymm6
  0x00007daf38ccf65c:   cmp    %ecx,%ebp
  0x00007daf38ccf65e:   jae    0x00007daf38ccf988
  0x00007daf38ccf664:   lea    0x20(%rbp),%edx
  0x00007daf38ccf667:   movslq %ebp,%rax
  0x00007daf38ccf66a:   vmovdqu 0x10(%r11,%rax,1),%ymm0
  0x00007daf38ccf671:   vpxor  0x10(%rdi),%ymm0,%ymm1
  0x00007daf38ccf676:   vpcmpeqb %ymm3,%ymm0,%ymm2
  0x00007daf38ccf67a:   vpcmpgtb %ymm1,%ymm4,%ymm1
  0x00007daf38ccf67e:   vpcmpgtb %ymm0,%ymm6,%ymm0
  0x00007daf38ccf682:   vpxor  %ymm0,%ymm5,%ymm0
  0x00007daf38ccf686:   vpand  %ymm0,%ymm1,%ymm0
  0x00007daf38ccf68a:   vpor   %ymm2,%ymm0,%ymm0
  0x00007daf38ccf68e:   vptest %ymm0,%ymm0
  0x00007daf38ccf693:   jne    0x00007daf38ccf804
  0x00007daf38ccf699:   mov    0x30(%r15),%rax              ; ImmutableOopMap {r11=NarrowOop r9=Oop rdi=Oop [0]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) json.ext.VectorizedStringEncoder::encode@217 (line 58)
  0x00007daf38ccf69d:   test   %eax,(%rax)                  ;   {poll}
  0x00007daf38ccf69f:   add    $0x40,%ebp
  0x00007daf38ccf6a2:   cmp    %r8d,%ebp
  0x00007daf38ccf6a5:   jl     0x00007daf38ccf76f
  0x00007daf38ccf6ab:   mov    %edx,%ebp
  0x00007daf38ccf6ad:   jmp    0x00007daf38ccf44b
  0x00007daf38ccf6b2:   mov    (%rsp),%r13
  0x00007daf38ccf6b6:   jmp    0x00007daf38ccf5ca
  0x00007daf38ccf6bb:   mov    (%rsp),%esi
  0x00007daf38ccf6be:   jmp    0x00007daf38ccf6c7
  0x00007daf38ccf6c0:   mov    %ecx,%edx
  0x00007daf38ccf6c2:   jmp    0x00007daf38ccf6c7
  0x00007daf38ccf6c4:   mov    (%rsp),%esi
  0x00007daf38ccf6c7:   mov    %ebp,0x18(%rsp)
  0x00007daf38ccf6cb:   mov    %r13,(%rsp)
  0x00007daf38ccf6cf:   mov    %r11d,0x1c(%rsp)
  0x00007daf38ccf6d4:   mov    %r8d,0x14(%rsp)
  0x00007daf38ccf6d9:   mov    %r10d,0x10(%rsp)
  0x00007daf38ccf6de:   mov    %r9,0x8(%rsp)
  0x00007daf38ccf6e3:   mov    %rax,0x20(%rsp)
  0x00007daf38ccf6e8:   mov    %esi,0x28(%rsp)
  0x00007daf38ccf6ec:   mov    $0x1,%edi
  0x00007daf38ccf6f1:   mov    (%rsp),%rsi
  0x00007daf38ccf6f5:   mov    0x8(%rsp),%r8
  0x00007daf38ccf6fa:   mov    0x10(%rsp),%r9d
  0x00007daf38ccf6ff:   mov    %ebx,%ecx
  0x00007daf38ccf701:   data16 xchg %ax,%ax
  0x00007daf38ccf704:   vzeroupper 
  0x00007daf38ccf707:   call   0x00007daf38ccfa70           ; ImmutableOopMap {[0]=Oop [8]=Oop [28]=NarrowOop }
                                                            ;*invokevirtual flushPos {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - json.ext.VectorizedStringEncoder::encode@258 (line 65)
                                                            ;   {optimized virtual_call}
  0x00007daf38ccf70c:   nopl   0x3000404(%rax,%rax,1)       ;   {post_call_nop}
  0x00007daf38ccf714:   mov    %eax,%ebp
  0x00007daf38ccf716:   mov    (%rsp),%r10
  0x00007daf38ccf71a:   mov    0x28(%r10),%r11d
  0x00007daf38ccf71e:   mov    %r11,%rcx
  0x00007daf38ccf721:   mov    (%rsp),%rsi
  0x00007daf38ccf725:   mov    0x18(%rsp),%edx
  0x00007daf38ccf729:   movabs $0xc7ac9458,%r8              ;   {oop([B{0x00000000c7ac9458})}
  0x00007daf38ccf733:   nop
  0x00007daf38ccf734:   vzeroupper 
  0x00007daf38ccf737:   call   0x00007daf38ccfa7f           ; ImmutableOopMap {[0]=Oop [8]=Oop [28]=NarrowOop }
                                                            ;*invokevirtual escapeAscii {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - json.ext.VectorizedStringEncoder::encode@276 (line 66)
                                                            ;   {optimized virtual_call}
  0x00007daf38ccf73c:   nopl   0x4000434(%rax,%rax,1)       ;   {post_call_nop}
  0x00007daf38ccf744:   mov    0x30(%r15),%r10              ; ImmutableOopMap {[0]=Oop [8]=Oop [28]=NarrowOop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) json.ext.VectorizedStringEncoder::encode@279 (line 67)
  0x00007daf38ccf748:   test   %eax,(%r10)                  ;   {poll}
  0x00007daf38ccf74b:   mov    0x1c(%rsp),%r11d
  0x00007daf38ccf750:   mov    0x14(%rsp),%r8d
  0x00007daf38ccf755:   mov    0x10(%rsp),%r10d
  0x00007daf38ccf75a:   mov    0x8(%rsp),%r9
  0x00007daf38ccf75f:   mov    0x20(%rsp),%rax
  0x00007daf38ccf764:   mov    0x28(%rsp),%esi
  0x00007daf38ccf768:   mov    %ebp,%ebx
  0x00007daf38ccf76a:   jmp    0x00007daf38ccf46c
  0x00007daf38ccf76f:   mov    %edx,%ebp
  0x00007daf38ccf771:   jmp    0x00007daf38ccf65c
  0x00007daf38ccf776:   data16 nopw 0x0(%rax,%rax,1)
  0x00007daf38ccf780:   mov    %r11d,0x8(%rsp)
  0x00007daf38ccf785:   mov    %r8d,0xc(%rsp)
  0x00007daf38ccf78a:   mov    %r10d,0x10(%rsp)
  0x00007daf38ccf78f:   mov    %esi,0x14(%rsp)
  0x00007daf38ccf793:   mov    %r9,0x18(%rsp)
  0x00007daf38ccf798:   mov    %edx,0x20(%rsp)
  0x00007daf38ccf79c:   mov    %rax,0x28(%rsp)
  0x00007daf38ccf7a1:   mov    %rdi,0x30(%rsp)
  0x00007daf38ccf7a6:   mov    %ecx,0x38(%rsp)
  0x00007daf38ccf7aa:   inc    %r13d
  0x00007daf38ccf7ad:   mov    %r13d,0x24(%rsp)
  0x00007daf38ccf7b2:   mov    (%rsp),%r10
  0x00007daf38ccf7b6:   mov    0x28(%r10),%r10d
  0x00007daf38ccf7ba:   mov    %r10,%rcx
  0x00007daf38ccf7bd:   mov    (%rsp),%rsi
  0x00007daf38ccf7c1:   mov    0x38(%rsp),%edx
  0x00007daf38ccf7c5:   movabs $0xc7ac9458,%r8              ;   {oop([B{0x00000000c7ac9458})}
  0x00007daf38ccf7cf:   nop
  0x00007daf38ccf7d0:   vzeroupper 
  0x00007daf38ccf7d3:   call   0x00007daf38ccfa8e           ; ImmutableOopMap {[0]=Oop [8]=NarrowOop [24]=Oop }
                                                            ;*invokevirtual escapeAscii {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - json.ext.VectorizedStringEncoder::encode@182 (line 49)
                                                            ;   {optimized virtual_call}
  0x00007daf38ccf7d8:   nopl   0x60004d0(%rax,%rax,1)       ;   {post_call_nop}
  0x00007daf38ccf7e0:   mov    0x30(%rsp),%rdi
  0x00007daf38ccf7e5:   test   %rdi,%rdi
  0x00007daf38ccf7e8:   jg     0x00007daf38ccf822
  0x00007daf38ccf7ea:   mov    0x8(%rsp),%r11d
  0x00007daf38ccf7ef:   mov    0xc(%rsp),%r8d
  0x00007daf38ccf7f4:   mov    0x10(%rsp),%r10d
  0x00007daf38ccf7f9:   mov    0x18(%rsp),%r9
  0x00007daf38ccf7fe:   mov    0x20(%rsp),%edx
  0x00007daf38ccf802:   jmp    0x00007daf38ccf811
  0x00007daf38ccf804:   vpmovmskb %ymm0,%edi
  0x00007daf38ccf808:   test   %rdi,%rdi
  0x00007daf38ccf80b:   jg     0x00007daf38ccf849
  0x00007daf38ccf80d:   mov    %ebx,0x24(%rsp)
  0x00007daf38ccf811:   mov    0x30(%r15),%rsi              ; ImmutableOopMap {r11=NarrowOop r9=Oop [0]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) json.ext.VectorizedStringEncoder::encode@201 (line 54)
  0x00007daf38ccf815:   test   %eax,(%rsi)                  ;   {poll}
  0x00007daf38ccf817:   mov    %edx,%ebp
  0x00007daf38ccf819:   mov    0x24(%rsp),%ebx
  0x00007daf38ccf81d:   jmp    0x00007daf38ccf43f
  0x00007daf38ccf822:   mov    0x24(%rsp),%ecx
  0x00007daf38ccf826:   mov    0x8(%rsp),%r11d
  0x00007daf38ccf82b:   mov    0xc(%rsp),%r8d
  0x00007daf38ccf830:   mov    0x10(%rsp),%r10d
  0x00007daf38ccf835:   mov    0x14(%rsp),%esi
  0x00007daf38ccf839:   mov    0x18(%rsp),%r9
  0x00007daf38ccf83e:   mov    0x20(%rsp),%edx
  0x00007daf38ccf842:   mov    0x28(%rsp),%rax
  0x00007daf38ccf847:   mov    %ecx,%ebx
  0x00007daf38ccf849:   tzcnt  %rdi,%rcx
  0x00007daf38ccf84e:   lea    (%rcx,%rbp,1),%r13d
  0x00007daf38ccf852:   blsr   %rdi,%rdi
  0x00007daf38ccf857:   cmp    %esi,%r13d
  0x00007daf38ccf85a:   jae    0x00007daf38ccf9e0
  0x00007daf38ccf860:   movslq %ecx,%rcx
  0x00007daf38ccf863:   add    %rax,%rcx
  0x00007daf38ccf866:   movzbl 0x10(%r11,%rcx,1),%ecx
  0x00007daf38ccf86c:   cmp    %ebx,%r13d
  0x00007daf38ccf86f:   jle    0x00007daf38ccf780
  0x00007daf38ccf875:   mov    %ecx,0x38(%rsp)
  0x00007daf38ccf879:   mov    %rdi,0x30(%rsp)
  0x00007daf38ccf87e:   mov    %rax,0x28(%rsp)
  0x00007daf38ccf883:   mov    %edx,0x20(%rsp)
  0x00007daf38ccf887:   mov    %r9,0x18(%rsp)
  0x00007daf38ccf88c:   mov    %esi,0x14(%rsp)
  0x00007daf38ccf890:   mov    %r8d,0xc(%rsp)
  0x00007daf38ccf895:   mov    %r11d,0x8(%rsp)
  0x00007daf38ccf89a:   mov    %r13d,%r8d
  0x00007daf38ccf89d:   mov    %r13d,0x24(%rsp)
  0x00007daf38ccf8a2:   sub    %ebx,%r8d
  0x00007daf38ccf8a5:   mov    %r10d,0x10(%rsp)
  0x00007daf38ccf8aa:   add    %r10d,%ebx
  0x00007daf38ccf8ad:   mov    (%rsp),%rsi
  0x00007daf38ccf8b1:   mov    %r9,%rdx
  0x00007daf38ccf8b4:   mov    %ebx,%ecx
  0x00007daf38ccf8b6:   xchg   %ax,%ax
  0x00007daf38ccf8b8:   vzeroupper 
  0x00007daf38ccf8bb:   call   0x00007daf38cbcd90           ; ImmutableOopMap {[0]=Oop [8]=NarrowOop [24]=Oop }
                                                            ;*invokevirtual append {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - json.ext.StringEncoder::flushPos@14 (line 306)
                                                            ; - json.ext.VectorizedStringEncoder::encode@164 (line 48)
                                                            ;   {optimized virtual_call}
  0x00007daf38ccf8c0:   nopl   0x80005b8(%rax,%rax,1)       ;   {post_call_nop}
  0x00007daf38ccf8c8:   mov    0x24(%rsp),%r13d
  0x00007daf38ccf8cd:   jmp    0x00007daf38ccf7aa
  0x00007daf38ccf8d2:   mov    %ecx,%edx
  0x00007daf38ccf8d4:   jmp    0x00007daf38ccf6c7
  0x00007daf38ccf8d9:   mov    %ebp,0x18(%rsp)
  0x00007daf38ccf8dd:   mov    %ecx,%edx
  0x00007daf38ccf8df:   mov    %r13,(%rsp)
  0x00007daf38ccf8e3:   mov    %r11d,0x1c(%rsp)
  0x00007daf38ccf8e8:   mov    %r8d,0x14(%rsp)
  0x00007daf38ccf8ed:   mov    %r10d,0x10(%rsp)
  0x00007daf38ccf8f2:   mov    %r9,0x8(%rsp)
  0x00007daf38ccf8f7:   mov    %rax,0x20(%rsp)
  0x00007daf38ccf8fc:   mov    %esi,0x28(%rsp)
  0x00007daf38ccf900:   jmp    0x00007daf38ccf6ec
  0x00007daf38ccf905:   mov    %ecx,%edx
  0x00007daf38ccf907:   vmovd  %xmm1,%edi
  0x00007daf38ccf90b:   mov    %edx,%ecx
  0x00007daf38ccf90d:   mov    $0xffffffe4,%esi
  0x00007daf38ccf912:   mov    %r13,(%rsp)
  0x00007daf38ccf916:   mov    %r11d,0x8(%rsp)
  0x00007daf38ccf91b:   mov    %r10d,0xc(%rsp)
  0x00007daf38ccf920:   mov    %r8d,0x10(%rsp)
  0x00007daf38ccf925:   mov    %ebx,0x14(%rsp)
  0x00007daf38ccf929:   mov    %ecx,0x18(%rsp)
  0x00007daf38ccf92d:   mov    %edi,0x1c(%rsp)
  0x00007daf38ccf931:   data16 xchg %ax,%ax
  0x00007daf38ccf934:   vzeroupper 
  0x00007daf38ccf937:   call   0x00007daf389adc60           ; ImmutableOopMap {[0]=Oop [8]=NarrowOop [28]=NarrowOop }
                                                            ;*baload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - json.ext.VectorizedStringEncoder::encode@242 (line 62)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007daf38ccf93c:   nopl   0x9000634(%rax,%rax,1)       ;   {post_call_nop}
  0x00007daf38ccf944:   mov    %ecx,%edx
  0x00007daf38ccf946:   jmp    0x00007daf38ccf90b
  0x00007daf38ccf948:   mov    (%rsp),%r13
  0x00007daf38ccf94c:   jmp    0x00007daf38ccf958
  0x00007daf38ccf94e:   mov    (%rsp),%r13
  0x00007daf38ccf952:   jmp    0x00007daf38ccf958
  0x00007daf38ccf954:   mov    (%rsp),%r13
  0x00007daf38ccf958:   mov    $0xffffff6e,%esi
  0x00007daf38ccf95d:   mov    %r13,%rbp
  0x00007daf38ccf960:   mov    %r11d,(%rsp)
  0x00007daf38ccf964:   mov    %r10d,0x4(%rsp)
  0x00007daf38ccf969:   mov    %ebx,0xc(%rsp)
  0x00007daf38ccf96d:   mov    %ecx,0x14(%rsp)
  0x00007daf38ccf971:   mov    %r8d,0x18(%rsp)
  0x00007daf38ccf976:   xchg   %ax,%ax
  0x00007daf38ccf978:   vzeroupper 
  0x00007daf38ccf97b:   call   0x00007daf389adc60           ; ImmutableOopMap {rbp=Oop [0]=NarrowOop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) json.ext.VectorizedStringEncoder::encode@224 (line 60)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007daf38ccf980:   nopl   0xa000678(%rax,%rax,1)       ;   {post_call_nop}
  0x00007daf38ccf988:   mov    $0xffffffe4,%esi
  0x00007daf38ccf98d:   mov    %r10d,0xc(%rsp)
  0x00007daf38ccf992:   mov    %r8d,0x10(%rsp)
  0x00007daf38ccf997:   mov    %ebx,0x14(%rsp)
  0x00007daf38ccf99b:   mov    %r11d,0x18(%rsp)
  0x00007daf38ccf9a0:   mov    %ecx,0x20(%rsp)
  0x00007daf38ccf9a4:   vzeroupper 
  0x00007daf38ccf9a7:   call   0x00007daf389adc60           ; ImmutableOopMap {[0]=Oop [24]=NarrowOop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 365)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 58)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@9 (line 3030)
                                                            ; - json.ext.VectorizedStringEncoder::encode@44 (line 32)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007daf38ccf9ac:   nopl   0xb0006a4(%rax,%rax,1)       ;   {post_call_nop}
  0x00007daf38ccf9b4:   mov    $0xffffff6e,%esi
  0x00007daf38ccf9b9:   mov    %r11d,0x8(%rsp)
  0x00007daf38ccf9be:   mov    %r10d,0xc(%rsp)
  0x00007daf38ccf9c3:   mov    %ebx,0x14(%rsp)
  0x00007daf38ccf9c7:   mov    %edi,0x18(%rsp)
  0x00007daf38ccf9cb:   mov    %r8d,0x1c(%rsp)
  0x00007daf38ccf9d0:   vzeroupper 
  0x00007daf38ccf9d3:   call   0x00007daf389adc60           ; ImmutableOopMap {[0]=Oop [8]=NarrowOop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) json.ext.VectorizedStringEncoder::encode@35 (line 31)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007daf38ccf9d8:   nopl   0xc0006d0(%rax,%rax,1)       ;   {post_call_nop}
  0x00007daf38ccf9e0:   mov    $0xffffffe4,%esi
  0x00007daf38ccf9e5:   mov    %r10d,0xc(%rsp)
  0x00007daf38ccf9ea:   mov    %r8d,0x10(%rsp)
  0x00007daf38ccf9ef:   mov    %ebx,0x14(%rsp)
  0x00007daf38ccf9f3:   mov    %r11d,0x1c(%rsp)
  0x00007daf38ccf9f8:   mov    %r13d,0x20(%rsp)
  0x00007daf38ccf9fd:   mov    %rdi,0x28(%rsp)
  0x00007daf38ccfa02:   xchg   %ax,%ax
  0x00007daf38ccfa04:   vzeroupper 
  0x00007daf38ccfa07:   call   0x00007daf389adc60           ; ImmutableOopMap {[0]=Oop [28]=NarrowOop }
                                                            ;*baload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - json.ext.VectorizedStringEncoder::encode@150 (line 46)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007daf38ccfa0c:   nopl   0xd000704(%rax,%rax,1)       ;   {post_call_nop}
  0x00007daf38ccfa14:   mov    $0xfffffff6,%esi
  0x00007daf38ccfa19:   data16 xchg %ax,%ax
  0x00007daf38ccfa1c:   vzeroupper 
  0x00007daf38ccfa1f:   call   0x00007daf389adc60           ; ImmutableOopMap {}
                                                            ;*invokevirtual unsafeBytes {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - json.ext.VectorizedStringEncoder::encode@1 (line 25)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007daf38ccfa24:   nopl   0xe00071c(%rax,%rax,1)       ;   {post_call_nop}
  0x00007daf38ccfa2c:   mov    %rax,%rsi
  0x00007daf38ccfa2f:   jmp    0x00007daf38ccfa43
  0x00007daf38ccfa31:   mov    %rax,%rsi
  0x00007daf38ccfa34:   jmp    0x00007daf38ccfa43
  0x00007daf38ccfa36:   mov    %rax,%rsi
  0x00007daf38ccfa39:   jmp    0x00007daf38ccfa43
  0x00007daf38ccfa3b:   mov    %rax,%rsi
  0x00007daf38ccfa3e:   jmp    0x00007daf38ccfa43
  0x00007daf38ccfa40:   mov    %rax,%rsi
  0x00007daf38ccfa43:   vzeroupper 
  0x00007daf38ccfa46:   add    $0x50,%rsp
  0x00007daf38ccfa4a:   pop    %rbp
  0x00007daf38ccfa4b:   jmp    0x00007daf389b8be0           ;   {runtime_call C2 Runtime rethrow}
  0x00007daf38ccfa50:   movabs $0x7daf38ccf604,%r10         ;   {internal_word}
  0x00007daf38ccfa5a:   mov    %r10,0x538(%r15)
  0x00007daf38ccfa61:   jmp    0x00007daf3896a860           ;   {runtime_call SafepointBlob}
  0x00007daf38ccfa66:   call   Stub::method_entry_barrier   ;   {runtime_call Stub::method_entry_barrier}
  0x00007daf38ccfa6b:   jmp    0x00007daf38ccf42a
[Stub Code]
  0x00007daf38ccfa70:   movabs $0x7daf007c6a98,%rbx         ;   {static_stub}
  0x00007daf38ccfa7a:   jmp    0x00007daf3894b743           ;   {runtime_call I2C/C2I adapters}
  0x00007daf38ccfa7f:   movabs $0x7daf007c6c18,%rbx         ;   {static_stub}
  0x00007daf38ccfa89:   jmp    0x00007daf3893f93d           ;   {runtime_call I2C/C2I adapters}
  0x00007daf38ccfa8e:   movabs $0x7daf007c6c18,%rbx         ;   {static_stub}
  0x00007daf38ccfa98:   jmp    0x00007daf3893f93d           ;   {runtime_call I2C/C2I adapters}
  0x00007daf38ccfa9d:   movabs $0x7daf007c6fc8,%rbx         ;   {static_stub}
  0x00007daf38ccfaa7:   jmp    0x00007daf3895d3bd           ;   {runtime_call I2C/C2I adapters}
[Exception Handler]
  0x00007daf38ccfaac:   jmp    0x00007daf389adf60           ;   {runtime_call ExceptionBlob}
[Deopt Handler Code]
  0x00007daf38ccfab1:   call   0x00007daf38ccfab6
  0x00007daf38ccfab6:   subq   $0x5,(%rsp)
  0x00007daf38ccfabb:   jmp    0x00007daf3896ab60           ;   {runtime_call DeoptimizationBlob}
--------------------------------------------------------------------------------
[/Disassembly]
Warmup execution time: 19.42359178100014
Execution time: 34.940152218041476
------------------------------------------------------------------------
json.ext.VectorizedStringEncoder::encode(Lorg/jruby/util/ByteList;)V
  interpreter_invocation_count:        2898
  invocation_counter:                  2898
  backedge_counter:                   35082
  decompile_count:                        0
  mdo size: 1584 bytes

   0 aload_1
   1 invokevirtual 11 <org/jruby/util/ByteList.unsafeBytes()[B> 
  0    bci: 1    VirtualCallData    count(0) entries(1)
                                    'org/jruby/util/ByteList'(2650 1.00)
   4 astore_2
   5 aload_1
   6 invokevirtual 17 <org/jruby/util/ByteList.begin()I> 
  48   bci: 6    VirtualCallData    count(0) entries(1)
                                    'org/jruby/util/ByteList'(2650 1.00)
   9 istore_3
  10 aload_1
  11 invokevirtual 21 <org/jruby/util/ByteList.realSize()I> 
  96   bci: 11   VirtualCallData    count(0) entries(1)
                                    'org/jruby/util/ByteList'(2650 1.00)
  14 istore #4
  16 iconst_0
  17 istore #5
  19 iload_3
  20 istore #6
  22 fast_iload #6
  24 getstatic 24 <json/ext/VectorizedStringEncoder.SP:Ljdk/incubator/vector/VectorSpecies;> 
  27 invokeinterface 30 <jdk/incubator/vector/VectorSpecies.length()I> 
  144  bci: 27   VirtualCallData    count(0) entries(1)
                                    'jdk/incubator/vector/ByteVector$ByteSpecies'(3204 1.00)
  32 iadd
  33 fast_iload #4
  35 if_icmpge 220
  192  bci: 35   BranchData         taken(2650) displacement(792)
                                    not taken(554)
  38 getstatic 24 <json/ext/VectorizedStringEncoder.SP:Ljdk/incubator/vector/VectorSpecies;> 
  41 aload_2
  42 fast_iload #6
  44 invokestatic 35 <jdk/incubator/vector/ByteVector.fromArray(Ljdk/incubator/vector/VectorSpecies;[BI)Ljdk/incubator/vector/ByteVector;> 
  224  bci: 44   CounterData        count(554)
  47 astore #7
  49 aload #7
  51 getstatic 41 <json/ext/VectorizedStringEncoder.ZERO:Ljdk/incubator/vector/ByteVector;> 
  54 invokevirtual 45 <jdk/incubator/vector/ByteVector.lt(Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;> 
  240  bci: 54   VirtualCallData    count(554) entries(0)
  57 astore #8
  59 aload #7
  61 getstatic 49 <jdk/incubator/vector/VectorOperators.XOR:Ljdk/incubator/vector/VectorOperators$Associative;> 
  64 getstatic 55 <json/ext/VectorizedStringEncoder.TWO:Ljdk/incubator/vector/ByteVector;> 
  67 invokevirtual 58 <jdk/incubator/vector/ByteVector.lanewise(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/ByteVector;> 
  288  bci: 67   VirtualCallData    count(0) entries(1)
                                    'jdk/incubator/vector/Byte256Vector'(554 1.00)
  70 getstatic 62 <json/ext/VectorizedStringEncoder.THIRTY_THREE:Ljdk/incubator/vector/ByteVector;> 
  73 invokevirtual 45 <jdk/incubator/vector/ByteVector.lt(Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;> 
  336  bci: 73   VirtualCallData    count(554) entries(0)
  76 aload #8
  78 invokevirtual 65 <jdk/incubator/vector/VectorMask.andNot(Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/VectorMask;> 
  384  bci: 78   VirtualCallData    count(0) entries(1)
                                    'jdk/incubator/vector/Byte256Vector$Byte256Mask'(554 1.00)
  81 astore #9
  83 aload #7
  85 getstatic 71 <json/ext/VectorizedStringEncoder.BACKSLASH:Ljdk/incubator/vector/ByteVector;> 
  88 invokevirtual 74 <jdk/incubator/vector/ByteVector.eq(Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;> 
  432  bci: 88   VirtualCallData    count(554) entries(0)
  91 aload #9
  93 invokevirtual 77 <jdk/incubator/vector/VectorMask.or(Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/VectorMask;> 
  480  bci: 93   VirtualCallData    count(0) entries(1)
                                    'jdk/incubator/vector/Byte256Vector$Byte256Mask'(554 1.00)
  96 astore #10
  98 aload #10
 100 invokevirtual 80 <jdk/incubator/vector/VectorMask.anyTrue()Z> 
  528  bci: 100  VirtualCallData    count(0) entries(1)
                                    'jdk/incubator/vector/Byte256Vector$Byte256Mask'(554 1.00)
 103 ifeq 204
  576  bci: 103  BranchData         taken(482) displacement(336)
                                    not taken(72)
 106 fast_iload #6
 108 istore #11
 110 aload #10
 112 invokevirtual 84 <jdk/incubator/vector/VectorMask.toLong()J> 
  608  bci: 112  VirtualCallData    count(0) entries(1)
                                    'jdk/incubator/vector/Byte256Vector$Byte256Mask'(72 1.00)
 115 lstore #12
 117 lload #12
 119 lconst_0
 120 lcmp
 121 ifle 188
  656  bci: 121  BranchData         taken(72) displacement(184)
                                    not taken(123)
 124 lload #12
 126 invokestatic 88 <java/lang/Long.numberOfTrailingZeros(J)I> 
  688  bci: 126  CounterData        count(123)
 129 istore #14
 131 lload #12
 133 lload #12
 135 lconst_1
 136 lsub
 137 land
 138 lstore #12
 140 fast_iload2 #11
 142 fast_iload #14
 144 iadd
 145 istore #6
 147 aload_2
 148 fast_iload #6
 150 baload
 151 invokestatic 94 <java/lang/Byte.toUnsignedInt(B)I> 
  704  bci: 151  CounterData        count(123)
 154 istore #15
 156 fast_aload_0
 157 fast_iload2 #6
 159 fast_iload #5
 161 aload_2
 162 iload_3
 163 iconst_1
 164 invokevirtual 100 <json/ext/VectorizedStringEncoder.flushPos(II[BII)I> 
  720  bci: 164  VirtualCallData    count(0) entries(1)
                                    'json/ext/VectorizedStringEncoder'(123 1.00)
 167 dup
 168 istore #6
 170 istore #5
 172 fast_aload_0
 173 fast_iload #15
 175 fast_aaccess_0
 176 fast_agetfield 104 <json/ext/VectorizedStringEncoder.aux:[B> 
 179 getstatic 107 <json/ext/VectorizedStringEncoder.HEX:[B> 
 182 invokevirtual 110 <json/ext/VectorizedStringEncoder.escapeAscii(I[B[B)V> 
  768  bci: 182  VirtualCallData    count(0) entries(1)
                                    'json/ext/VectorizedStringEncoder'(123 1.00)
 185 goto 117
  816  bci: 185  JumpData           taken(123) displacement(-160)
 188 fast_iload #11
 190 getstatic 24 <json/ext/VectorizedStringEncoder.SP:Ljdk/incubator/vector/VectorSpecies;> 
 193 invokeinterface 30 <jdk/incubator/vector/VectorSpecies.length()I> 
  840  bci: 193  VirtualCallData    count(0) entries(1)
                                    'jdk/incubator/vector/ByteVector$ByteSpecies'(72 1.00)
 198 iadd
 199 istore #6
 201 goto 22
  888  bci: 201  JumpData           taken(72) displacement(-744)
 204 fast_iload #6
 206 getstatic 24 <json/ext/VectorizedStringEncoder.SP:Ljdk/incubator/vector/VectorSpecies;> 
 209 invokeinterface 30 <jdk/incubator/vector/VectorSpecies.length()I> 
  912  bci: 209  VirtualCallData    count(0) entries(1)
                                    'jdk/incubator/vector/ByteVector$ByteSpecies'(482 1.00)
 214 iadd
 215 istore #6
 217 goto 22
  960  bci: 217  JumpData           taken(482) displacement(-816)
 220 fast_iload2 #6
 222 fast_iload #4
 224 if_icmpge 288
  984  bci: 224  BranchData         taken(2651) displacement(224)
                                    not taken(31333)
 227 aload_2
 228 fast_iload #6
 230 baload
 231 invokestatic 94 <java/lang/Byte.toUnsignedInt(B)I> 
  1016 bci: 231  CounterData        count(31333)
 234 istore #7
 236 fast_aaccess_0
 237 fast_agetfield 114 <json/ext/VectorizedStringEncoder.escapeTable:[B> 
 240 fast_iload #7
 242 baload
 243 istore #8
 245 fast_iload #8
 247 ifle 282
  1032 bci: 247  BranchData         taken(31325) displacement(152)
                                    not taken(8)
 250 fast_aload_0
 251 fast_iload2 #6
 253 fast_iload #5
 255 aload_2
 256 iload_3
 257 iconst_1
 258 invokevirtual 100 <json/ext/VectorizedStringEncoder.flushPos(II[BII)I> 
  1064 bci: 258  VirtualCallData    count(0) entries(1)
                                    'json/ext/VectorizedStringEncoder'(8 1.00)
 261 dup
 262 istore #6
 264 istore #5
 266 fast_aload_0
 267 fast_iload #7
 269 fast_aaccess_0
 270 fast_agetfield 104 <json/ext/VectorizedStringEncoder.aux:[B> 
 273 getstatic 107 <json/ext/VectorizedStringEncoder.HEX:[B> 
 276 invokevirtual 110 <json/ext/VectorizedStringEncoder.escapeAscii(I[B[B)V> 
  1112 bci: 276  VirtualCallData    count(0) entries(1)
                                    'json/ext/VectorizedStringEncoder'(8 1.00)
 279 goto 220
  1160 bci: 279  JumpData           taken(8) displacement(-176)
 282 iinc #6 1
 285 goto 220
  1184 bci: 285  JumpData           taken(31325) displacement(-200)
 288 fast_iload2 #5
 290 fast_iload #4
 292 if_icmpge 309
  1208 bci: 292  BranchData         taken(11) displacement(80)
                                    not taken(2640)
 295 fast_aload_0
 296 aload_2
 297 iload_3
 298 fast_iload #5
 300 iadd
 301 fast_iload2 #4
 303 fast_iload #5
 305 isub
 306 invokevirtual 117 <json/ext/VectorizedStringEncoder.append([BII)V> 
  1240 bci: 306  VirtualCallData    count(0) entries(1)
                                    'json/ext/VectorizedStringEncoder'(2640 1.00)
 309 return
------------------------------------------------------------------------
Total MDO size: 1584 bytes
