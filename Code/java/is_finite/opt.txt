CompileCommand: print is_finite.micro bool print = true

============================= C2-compiled nmethod ==============================
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 80 --
#r623 rsp+76: in_preserve
#r622 rsp+72: return address
#r621 rsp+68: in_preserve
#r620 rsp+64: saved fp register
#r619 rsp+60: pad2, stack alignment
#r618 rsp+56: pad2, stack alignment
#r617 rsp+52: Fixed slot 1
#r616 rsp+48: Fixed slot 0
#r635 rsp+44: spill
#r634 rsp+40: spill
#r633 rsp+36: spill
#r632 rsp+32: spill
#r631 rsp+28: spill
#r630 rsp+24: spill
#r629 rsp+20: spill
#r628 rsp+16: spill
#r627 rsp+12: spill
#r626 rsp+ 8: spill
#r625 rsp+ 4: spill
#r624 rsp+ 0: spill
#
----------------------- MetaData before Compile_id = 34 ------------------------
{method}
 - this oop:          0x00007f7f3e400638
 - method holder:     'is_finite'
 - constants:         0x00007f7f3e400080 constant pool [117]/operands[12] {0x00007f7f3e400080} for 'is_finite' cache=0x00007f7f3e400b58
 - access:            0x9  public static 
 - flags:             0x6080  queued_for_compilation has_loops_flag has_loops_flag_init 
 - name:              'micro'
 - signature:         '([I[F)V'
 - max stack:         5
 - max locals:        3
 - size of params:    2
 - method size:       14
 - vtable index:      -2
 - i2i entry:         0x00007f7fcc444b60
 - adapters:          AHE@0x00007f7fd8330aa0: 0xbb i2c: 0x00007f7fcc4ab980 c2i: 0x00007f7fcc4aba60 c2iUV: 0x00007f7fcc4aba3f c2iNCI: 0x00007f7fcc4aba9a
 - compiled entry     0x00007f7fcc4aba60
 - code size:         34
 - code start:        0x00007f7f3e400608
 - code end (excl):   0x00007f7f3e40062a
 - method data:       0x00007f7f3e4020e8
 - checked ex length: 0
 - linenumber start:  0x00007f7f3e40062a
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 34 -----------------------
#
#  void ( rawptr:BotPTR )
#
000     N384: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B32 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (152 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02a     movq    RBP, [RSI + #16 (8-bit)]	# ptr
02e     movq    RBX, [RSI + #8 (8-bit)]	# ptr
032     movl    R13, [RSI]	# int
035     movq    RDI, RSI	# spill
038     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
04d     testq   RBP, RBP	# ptr
050     je     B32  P=0.001000 C=-1.000000

056     B2: #	out( B40 B3 ) <- in( B1 )  Freq: 0.999
056     movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
        nop 	# 6 bytes pad for loops and calls
060     cmpl    R11, narrowklass: precise [int (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
067     jne,u   B40  P=0.000001 C=-1.000000

06d     B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
06d     movq    R8, RBP	# spill
070     # checkcastPP of R8

070     B4: #	out( B33 B5 ) <- in( B3 B32 )  Freq: 0.999999
070     testq   RBX, RBX	# ptr
073     je     B33  P=0.001000 C=-1.000000

079     B5: #	out( B40 B6 ) <- in( B4 )  Freq: 0.998999
079     movl    R10, [RBX + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
080     cmpl    R10, narrowklass: precise [float (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
087     jne,u   B40  P=0.000001 C=-1.000000

08d     B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
08d     # checkcastPP of RBX

08d     B7: #	out( B41 B8 ) <- in( B6 B33 )  Freq: 0.999998
08d     movl    R9, [R8 + #12 (8-bit)]	# range
091     NullCheck R8

091     B8: #	out( B42 B9 ) <- in( B7 )  Freq: 0.999997
091     movl    RDX, [RBX + #12 (8-bit)]	# range
094     NullCheck RBX

094     B9: #	out( B30 B10 ) <- in( B8 )  Freq: 0.999996
094     cmpl    R13, R9
097     jge     B30  P=0.000976 C=20500.000000

09d     B10: #	out( B11 ) <- in( B9 )  Freq: 0.99902
09d     leal    R10, [R13 + #1]
0a1     movslq  R11, R10	# i2l
0a4     xorl    RCX, RCX	# long
0a6     testl   R10, R10
0a9     cmovql R11, RCX	# signed, long
0ad     movl    R10, R11	# l2i
0b0     cmpl    R10, R9
0b3     cmovlgt R10, R9	# min

0b7     B11: #	out( B34 B12 ) <- in( B10 B14 ) Loop( B11-B14 inner pre of N355) Freq: 1.99804
        nop 	# 9 bytes pad for loops and calls
0c0     cmpl    R13, RDX	# unsigned
0c3     jae,u   B34  P=0.000001 C=-1.000000

0c9     B12: #	out( B31 B13 ) <- in( B11 )  Freq: 1.99803
0c9     movss   XMM1, [RBX + #16 + R13 << #2]	# float
0d0     is_finite_float RCX, XMM1	! using K7 as TEMP
        nop 	# 2 bytes pad for loops and calls
0e0     testl   RCX, RCX
0e2     je     B31  P=0.000000 C=20480.000000

0e8     B13: #	out( B35 B14 ) <- in( B12 )  Freq: 1.99803
0e8     cmpl    R13, R9	# unsigned
0eb     jae,u   B35  P=0.000001 C=-1.000000

0f1     B14: #	out( B11 B15 ) <- in( B13 )  Freq: 1.99803
0f1     movl    [R8 + #16 + R13 << #2], #9	# int
0fa     incl    R13	# int
        nop 	# 3 bytes pad for loops and calls
100     cmpl    R13, R10
103     jl,s   B11	# loop end  P=0.500000 C=20500.000000

105     B15: #	out( B25 B16 ) <- in( B14 )  Freq: 0.999015
105     movslq  R10, RDX	# i2l
108     movslq  R11, R9	# i2l
10b     cmpq    R11, R10
10e     cmovql R10, R11	# signed, long
112     cmpq    R11, R10
115     cmovql R10, R11	# signed, long
119     movl    RAX, R10	# l2i
        nop 	# 4 bytes pad for loops and calls
120     cmpl    R13, RAX
123     jge     B25  P=0.000001 C=-1.000000

129     B16: #	out( B36 B17 ) <- in( B15 )  Freq: 0.999014
129     leal    R11, [RAX + #-1]
12d     cmpl    R11, RDX	# unsigned
130     jae,u   B36  P=0.000001 C=-1.000000

136     B17: #	out( B37 B18 ) <- in( B16 )  Freq: 0.999013
136     cmpl    R13, RDX	# unsigned
139     jae,u   B37  P=0.000001 C=-1.000000

13f     B18: #	out( B38 B19 ) <- in( B17 )  Freq: 0.999012
        nop 	# 1 bytes pad for loops and calls
140     cmpl    R11, R9	# unsigned
143     jae,u   B38  P=0.000001 C=-1.000000

149     B19: #	out( B39 B20 ) <- in( B18 )  Freq: 0.999011
149     cmpl    R13, R9	# unsigned
14c     jae,u   B39  P=0.000001 C=-1.000000

152     B20: #	out( B21 ) <- in( B19 )  Freq: 0.99901
152     movl    R10, #1000	# int
158     # TLS is in R15
158     xorl    R11, R11	# int

15b     B21: #	out( B22 ) <- in( B20 B24 ) Loop( B21-B24 ) Freq: 682.546
15b     movl    RDI, RAX	# spill
15d     subl    RDI, R13	# int
160     cmpl    RAX, R13
163     cmovll RDI, R11	# signed, int
167     cmpl    RDI, #1000	# unsigned
16d     cmovla RDI, R10	# unsigned, int
171     addl    RDI, R13	# int

174     B22: #	out( B31 B23 ) <- in( B21 B23 ) Loop( B22-B23 inner main of N169 strip mined) Freq: 699269
174     movss   XMM1, [RBX + #16 + R13 << #2]	# float
17b     is_finite_float RCX, XMM1	! using K7 as TEMP
189     testl   RCX, RCX
18b     je     B31  P=0.000000 C=20480.000000

191     B23: #	out( B22 B24 ) <- in( B22 )  Freq: 699269
191     movl    [R8 + #16 + R13 << #2], #9	# int
19a     incl    R13	# int
        nop 	# 3 bytes pad for loops and calls
1a0     cmpl    R13, RDI
1a3     jl,s   B22	# loop end  P=0.999024 C=20500.000000

1a5     B24: #	out( B21 B25 ) <- in( B23 )  Freq: 682.213
1a5     movq    RCX, [R15 + #48 (8-bit)]	# ptr
1a9     testl   rax, [RCX]	# Safepoint: poll for GC        # is_finite::micro @ bci:30 (line 8) L[0]=R8 L[1]=RBX L[2]=R13
        # OopMap {r8=Oop rbx=Oop off=425/0x1a9}
1ab     cmpl    R13, RAX
1ae     jl,s   B21  P=0.999024 C=20500.000000

1b0     B25: #	out( B30 B26 ) <- in( B15 B24 )  Freq: 0.665574
1b0     cmpl    R13, R9
1b3     jge     B30  P=0.500000 C=-1.000000
        nop 	# 3 bytes pad for loops and calls

1bc     B26: #	out( B34 B27 ) <- in( B25 B29 ) Loop( B26-B29 inner post of N355) Freq: 0.665572
        nop 	# 4 bytes pad for loops and calls
1c0     cmpl    R13, RDX	# unsigned
1c3     jae,u   B34  P=0.000001 C=-1.000000

1c9     B27: #	out( B31 B28 ) <- in( B26 )  Freq: 0.665571
1c9     movss   XMM0, [RBX + #16 + R13 << #2]	# float
1d0     is_finite_float RCX, XMM0	! using K7 as TEMP
        nop 	# 2 bytes pad for loops and calls
1e0     testl   RCX, RCX
1e2     je,s   B31  P=0.000000 C=20480.000000

1e4     B28: #	out( B35 B29 ) <- in( B27 )  Freq: 0.665571
1e4     cmpl    R13, R9	# unsigned
1e7     jae,u   B35  P=0.000001 C=-1.000000

1ed     B29: #	out( B26 B30 ) <- in( B28 )  Freq: 0.66557
1ed     movl    [R8 + #16 + R13 << #2], #9	# int
1f6     incl    R13	# int
        nop 	# 7 bytes pad for loops and calls
200     cmpl    R13, R9
203     jl,s   B26	# loop end  P=0.500000 C=20500.000000

205     B30: #	out( N384 ) <- in( B9 B29 B25 )  Freq: 0.666548
205     addq    rsp, 64	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

214     ret

215     B31: #	out( N384 ) <- in( B27 B12 B22 )  Freq: 0.333439
215     movl    RSI, #-179	# int
21a     movq    [rsp + #0], RBX	# spill
21e     movq    [rsp + #16], R8	# spill
223     movl    [rsp + #12], R13	# spill
228     movl    [rsp + #24], RCX	# spill
        nop 	# 3 bytes pad for loops and calls
22f     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # is_finite::micro @ bci:16 (line 9) L[0]=rsp + #16 L[1]=rsp + #0 L[2]=rsp + #12 STK[0]=rsp + #16 STK[1]=rsp + #12 STK[2]=rsp + #24
        # OopMap {[0]=Oop [16]=Oop off=564/0x234}
23c     stop	# ShouldNotReachHere

250     B32: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
250     xorl    R8, R8	# ptr
253     jmp     B4

258     B33: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
258     xorl    RBX, RBX	# ptr
25a     jmp     B7

25f     B34: #	out( N384 ) <- in( B26 B11 )  Freq: 2.69898e-06
25f     movl    RSI, #-28	# int
264     movq    [rsp + #16], R8	# spill
269     movl    [rsp + #12], R13	# spill
26e     movq    [rsp + #24], RBX	# spill
273     movl    [rsp + #32], R13	# spill
        nop 	# 3 bytes pad for loops and calls
27b     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # is_finite::micro @ bci:12 (line 9) L[0]=rsp + #16 L[1]=rsp + #24 L[2]=rsp + #12 STK[0]=rsp + #16 STK[1]=rsp + #32 STK[2]=rsp + #24 STK[3]=rsp + #12
        # OopMap {[16]=Oop [24]=Oop off=640/0x280}
288     stop	# ShouldNotReachHere

29c     B35: #	out( N384 ) <- in( B28 B13 )  Freq: 2.69897e-06
29c     movl    RSI, #-28	# int
2a1     movq    [rsp + #0], RBX	# spill
2a5     movq    [rsp + #16], R8	# spill
2aa     movl    [rsp + #12], R13	# spill
2af     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # is_finite::micro @ bci:26 (line 9) L[0]=rsp + #16 L[1]=rsp + #0 L[2]=rsp + #12 STK[0]=rsp + #16 STK[1]=rsp + #12 STK[2]=#9
        # OopMap {[0]=Oop [16]=Oop off=692/0x2b4}
2bc     stop	# ShouldNotReachHere

2d0     B36: #	out( N384 ) <- in( B16 )  Freq: 1.01228e-06
2d0     stop	# ShouldNotReachHere

2e4     B37: #	out( N384 ) <- in( B17 )  Freq: 1.01228e-06
2e4     stop	# ShouldNotReachHere

2f8     B38: #	out( N384 ) <- in( B18 )  Freq: 1.01228e-06
2f8     stop	# ShouldNotReachHere

30c     B39: #	out( N384 ) <- in( B19 )  Freq: 1.01228e-06
30c     stop	# ShouldNotReachHere

320     B40: #	out( N384 ) <- in( B2 B5 )  Freq: 1.998e-06
320     movl    RSI, #-115	# int
325     movq    [rsp + #0], RBX	# spill
329     movl    [rsp + #8], R13	# spill
        nop 	# 1 bytes pad for loops and calls
32f     call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret' debug_id='0')
        # is_finite::micro @ bci:2 (line 8) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8
        # OopMap {rbp=Oop [0]=Oop off=820/0x334}
33c     stop	# ShouldNotReachHere

350     B41: #	out( N384 ) <- in( B7 )  Freq: 1.01328e-06
350     movl    RSI, #-138	# int
355     movq    RBP, R8	# spill
358     movq    [rsp + #0], RBX	# spill
35c     movl    [rsp + #8], R13	# spill
        nop 	# 2 bytes pad for loops and calls
363     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # is_finite::micro @ bci:2 (line 8) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8
        # OopMap {rbp=Oop [0]=Oop off=872/0x368}
370     stop	# ShouldNotReachHere

384     B42: #	out( N384 ) <- in( B8 )  Freq: 1.01328e-06
384     movl    RSI, #-66	# int
389     movq    RBP, R8	# spill
38c     movq    [rsp + #0], RBX	# spill
390     movl    [rsp + #8], R13	# spill
        nop 	# 2 bytes pad for loops and calls
397     call,static  wrapper for: uncommon_trap(reason='profile_predicate' action='maybe_recompile' debug_id='0')
        # is_finite::micro @ bci:2 (line 8) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8
        # OopMap {rbp=Oop [0]=Oop off=924/0x39c}
3a4     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2) 580   34 %           is_finite::micro @ 2 (34 bytes)
 total in heap  [0x00007f7fcc597b08,0x00007f7fcc598090] = 1416
 relocation     [0x00007f7fcc597bf0,0x00007f7fcc597c68] = 120
 main code      [0x00007f7fcc597c80,0x00007f7fcc598058] = 984
 stub code      [0x00007f7fcc598058,0x00007f7fcc598070] = 24
 oops           [0x00007f7fcc598070,0x00007f7fcc598078] = 8
 metadata       [0x00007f7fcc598078,0x00007f7fcc598090] = 24
 immutable data [0x00007f7f240b2c40,0x00007f7f240b2f40] = 768
 dependencies   [0x00007f7f240b2c40,0x00007f7f240b2c48] = 8
 nul chk table  [0x00007f7f240b2c48,0x00007f7f240b2c60] = 24
 scopes pcs     [0x00007f7f240b2c60,0x00007f7f240b2eb0] = 592
 scopes data    [0x00007f7f240b2eb0,0x00007f7f240b2f40] = 144

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007f7f3e400638} 'micro' '([I[F)V' in 'is_finite'
 ;; N384: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007f7fcc597c80:   callq  0x00007f7fdf18e27e           ;   {runtime_call os::breakpoint()}
  0x00007f7fcc597c85:   nop
  0x00007f7fcc597c86:   nop
  0x00007f7fcc597c87:   nop
  0x00007f7fcc597c88:   nop
  0x00007f7fcc597c89:   nop
  0x00007f7fcc597c8a:   nop
  0x00007f7fcc597c8b:   nop
  0x00007f7fcc597c8c:   nop
  0x00007f7fcc597c8d:   nop
  0x00007f7fcc597c8e:   nop
  0x00007f7fcc597c8f:   nop
 ;; B1: #	out( B32 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007f7fcc597c90:   mov    %eax,-0x18000(%rsp)
  0x00007f7fcc597c97:   push   %rbp
  0x00007f7fcc597c98:   sub    $0x40,%rsp
  0x00007f7fcc597c9c:   cmpl   $0x0,0x20(%r15)
  0x00007f7fcc597ca4:   jne    0x00007f7fcc59804e
  0x00007f7fcc597caa:   mov    0x10(%rsi),%rbp
  0x00007f7fcc597cae:   mov    0x8(%rsi),%rbx
  0x00007f7fcc597cb2:   mov    (%rsi),%r13d
  0x00007f7fcc597cb5:   mov    %rsi,%rdi
  0x00007f7fcc597cb8:   movabs $0x7f7fdf2a6d92,%r10
  0x00007f7fcc597cc2:   callq  *%r10
  0x00007f7fcc597cc5:   nopl   0x0(%rax,%rax,1)             ;   {post_call_nop}
  0x00007f7fcc597ccd:   test   %rbp,%rbp
  0x00007f7fcc597cd0:   je     0x00007f7fcc597ed0
 ;; B2: #	out( B40 B3 ) <- in( B1 )  Freq: 0.999
  0x00007f7fcc597cd6:   mov    0x8(%rbp),%r11d
  0x00007f7fcc597cda:   nop
  0x00007f7fcc597cdb:   nop
  0x00007f7fcc597cdc:   nop
  0x00007f7fcc597cdd:   nop
  0x00007f7fcc597cde:   nop
  0x00007f7fcc597cdf:   nop
  0x00007f7fcc597ce0:   cmp    $0x1c3bd0,%r11d              ;   {metadata({type array int})}
  0x00007f7fcc597ce7:   jne    0x00007f7fcc597fa0
 ;; B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
  0x00007f7fcc597ced:   mov    %rbp,%r8
 ;; B4: #	out( B33 B5 ) <- in( B3 B32 )  Freq: 0.999999
  0x00007f7fcc597cf0:   test   %rbx,%rbx
  0x00007f7fcc597cf3:   je     0x00007f7fcc597ed8
 ;; B5: #	out( B40 B6 ) <- in( B4 )  Freq: 0.998999
  0x00007f7fcc597cf9:   mov    0x8(%rbx),%r10d
  0x00007f7fcc597cfd:   nop
  0x00007f7fcc597cfe:   nop
  0x00007f7fcc597cff:   nop
  0x00007f7fcc597d00:   cmp    $0x1c3390,%r10d              ;   {metadata({type array float})}
  0x00007f7fcc597d07:   jne    0x00007f7fcc597fa0           ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@2 (line 8)
 ;; B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
 ;; B7: #	out( B41 B8 ) <- in( B6 B33 )  Freq: 0.999998
  0x00007f7fcc597d0d:   mov    0xc(%r8),%r9d                ; implicit exception: dispatches to 0x00007f7fcc597fd0
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@4 (line 8)
 ;; B8: #	out( B42 B9 ) <- in( B7 )  Freq: 0.999997
  0x00007f7fcc597d11:   mov    0xc(%rbx),%edx               ; implicit exception: dispatches to 0x00007f7fcc598004
                                                            ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@12 (line 9)
 ;; B9: #	out( B30 B10 ) <- in( B8 )  Freq: 0.999996
  0x00007f7fcc597d14:   cmp    %r9d,%r13d
  0x00007f7fcc597d17:   jge    0x00007f7fcc597e85           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@5 (line 8)
 ;; B10: #	out( B11 ) <- in( B9 )  Freq: 0.99902
  0x00007f7fcc597d1d:   lea    0x1(%r13),%r10d
  0x00007f7fcc597d21:   movslq %r10d,%r11
  0x00007f7fcc597d24:   xor    %ecx,%ecx
  0x00007f7fcc597d26:   test   %r10d,%r10d
  0x00007f7fcc597d29:   cmovl  %rcx,%r11
  0x00007f7fcc597d2d:   mov    %r11d,%r10d
  0x00007f7fcc597d30:   cmp    %r9d,%r10d
  0x00007f7fcc597d33:   cmovg  %r9d,%r10d                   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@26 (line 9)
 ;; B11: #	out( B34 B12 ) <- in( B10 B14 ) Loop( B11-B14 inner pre of N355) Freq: 1.99804
  0x00007f7fcc597d37:   nop
  0x00007f7fcc597d38:   nop
  0x00007f7fcc597d39:   nop
  0x00007f7fcc597d3a:   nop
  0x00007f7fcc597d3b:   nop
  0x00007f7fcc597d3c:   nop
  0x00007f7fcc597d3d:   nop
  0x00007f7fcc597d3e:   nop
  0x00007f7fcc597d3f:   nop
  0x00007f7fcc597d40:   cmp    %edx,%r13d
  0x00007f7fcc597d43:   jae    0x00007f7fcc597edf
 ;; B12: #	out( B31 B13 ) <- in( B11 )  Freq: 1.99803
  0x00007f7fcc597d49:   vmovss 0x10(%rbx,%r13,4),%xmm1
  0x00007f7fcc597d50:   vfpclassss $0x99,%xmm1,%k7
  0x00007f7fcc597d57:   kmovb  %k7,%ecx
  0x00007f7fcc597d5b:   xor    $0x1,%ecx                    ;*invokestatic isFinite {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@13 (line 9)
  0x00007f7fcc597d5e:   nop
  0x00007f7fcc597d5f:   nop
  0x00007f7fcc597d60:   test   %ecx,%ecx
  0x00007f7fcc597d62:   je     0x00007f7fcc597e95           ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@16 (line 9)
 ;; B13: #	out( B35 B14 ) <- in( B12 )  Freq: 1.99803
  0x00007f7fcc597d68:   cmp    %r9d,%r13d
  0x00007f7fcc597d6b:   jae    0x00007f7fcc597f1c
 ;; B14: #	out( B11 B15 ) <- in( B13 )  Freq: 1.99803
  0x00007f7fcc597d71:   movl   $0x9,0x10(%r8,%r13,4)        ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@26 (line 9)
  0x00007f7fcc597d7a:   inc    %r13d                        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@27 (line 8)
  0x00007f7fcc597d7d:   nop
  0x00007f7fcc597d7e:   nop
  0x00007f7fcc597d7f:   nop
  0x00007f7fcc597d80:   cmp    %r10d,%r13d
  0x00007f7fcc597d83:   jl     0x00007f7fcc597d37           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@5 (line 8)
 ;; B15: #	out( B25 B16 ) <- in( B14 )  Freq: 0.999015
  0x00007f7fcc597d85:   movslq %edx,%r10
  0x00007f7fcc597d88:   movslq %r9d,%r11
  0x00007f7fcc597d8b:   cmp    %r10,%r11
  0x00007f7fcc597d8e:   cmovl  %r11,%r10
  0x00007f7fcc597d92:   cmp    %r10,%r11
  0x00007f7fcc597d95:   cmovl  %r11,%r10
  0x00007f7fcc597d99:   mov    %r10d,%eax
  0x00007f7fcc597d9c:   nop
  0x00007f7fcc597d9d:   nop
  0x00007f7fcc597d9e:   nop
  0x00007f7fcc597d9f:   nop
  0x00007f7fcc597da0:   cmp    %eax,%r13d
  0x00007f7fcc597da3:   jge    0x00007f7fcc597e30
 ;; B16: #	out( B36 B17 ) <- in( B15 )  Freq: 0.999014
  0x00007f7fcc597da9:   lea    -0x1(%rax),%r11d
  0x00007f7fcc597dad:   cmp    %edx,%r11d
  0x00007f7fcc597db0:   jae    0x00007f7fcc597f50
 ;; B17: #	out( B37 B18 ) <- in( B16 )  Freq: 0.999013
  0x00007f7fcc597db6:   cmp    %edx,%r13d
  0x00007f7fcc597db9:   jae    0x00007f7fcc597f64
 ;; B18: #	out( B38 B19 ) <- in( B17 )  Freq: 0.999012
  0x00007f7fcc597dbf:   nop
  0x00007f7fcc597dc0:   cmp    %r9d,%r11d
  0x00007f7fcc597dc3:   jae    0x00007f7fcc597f78
 ;; B19: #	out( B39 B20 ) <- in( B18 )  Freq: 0.999011
  0x00007f7fcc597dc9:   cmp    %r9d,%r13d
  0x00007f7fcc597dcc:   jae    0x00007f7fcc597f8c
 ;; B20: #	out( B21 ) <- in( B19 )  Freq: 0.99901
  0x00007f7fcc597dd2:   mov    $0x3e8,%r10d                 ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@30 (line 8)
  0x00007f7fcc597dd8:   xor    %r11d,%r11d
 ;; B21: #	out( B22 ) <- in( B20 B24 ) Loop( B21-B24 ) Freq: 682.546
  0x00007f7fcc597ddb:   mov    %eax,%edi
  0x00007f7fcc597ddd:   sub    %r13d,%edi
  0x00007f7fcc597de0:   cmp    %r13d,%eax
  0x00007f7fcc597de3:   cmovl  %r11d,%edi
  0x00007f7fcc597de7:   cmp    $0x3e8,%edi
  0x00007f7fcc597ded:   cmova  %r10d,%edi
  0x00007f7fcc597df1:   add    %r13d,%edi                   ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@12 (line 9)
 ;; B22: #	out( B31 B23 ) <- in( B21 B23 ) Loop( B22-B23 inner main of N169 strip mined) Freq: 699269
  0x00007f7fcc597df4:   vmovss 0x10(%rbx,%r13,4),%xmm1
  0x00007f7fcc597dfb:   vfpclassss $0x99,%xmm1,%k7          ;   {no_reloc}
  0x00007f7fcc597e02:   kmovb  %k7,%ecx
  0x00007f7fcc597e06:   xor    $0x1,%ecx                    ;*invokestatic isFinite {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@13 (line 9)
  0x00007f7fcc597e09:   test   %ecx,%ecx
  0x00007f7fcc597e0b:   je     0x00007f7fcc597e95           ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@16 (line 9)
 ;; B23: #	out( B22 B24 ) <- in( B22 )  Freq: 699269
  0x00007f7fcc597e11:   movl   $0x9,0x10(%r8,%r13,4)        ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@26 (line 9)
  0x00007f7fcc597e1a:   inc    %r13d                        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@27 (line 8)
  0x00007f7fcc597e1d:   nop
  0x00007f7fcc597e1e:   nop
  0x00007f7fcc597e1f:   nop
  0x00007f7fcc597e20:   cmp    %edi,%r13d
  0x00007f7fcc597e23:   jl     0x00007f7fcc597df4           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@30 (line 8)
 ;; B24: #	out( B21 B25 ) <- in( B23 )  Freq: 682.213
  0x00007f7fcc597e25:   mov    0x30(%r15),%rcx              ; ImmutableOopMap {r8=Oop rbx=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) is_finite::micro@30 (line 8)
  0x00007f7fcc597e29:   test   %eax,(%rcx)                  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@30 (line 8)
                                                            ;   {poll}
  0x00007f7fcc597e2b:   cmp    %eax,%r13d
  0x00007f7fcc597e2e:   jl     0x00007f7fcc597ddb
 ;; B25: #	out( B30 B26 ) <- in( B15 B24 )  Freq: 0.665574
  0x00007f7fcc597e30:   cmp    %r9d,%r13d
  0x00007f7fcc597e33:   jge    0x00007f7fcc597e85
  0x00007f7fcc597e39:   nop
  0x00007f7fcc597e3a:   nop
  0x00007f7fcc597e3b:   nop                                 ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@26 (line 9)
 ;; B26: #	out( B34 B27 ) <- in( B25 B29 ) Loop( B26-B29 inner post of N355) Freq: 0.665572
  0x00007f7fcc597e3c:   nop
  0x00007f7fcc597e3d:   nop
  0x00007f7fcc597e3e:   nop
  0x00007f7fcc597e3f:   nop
  0x00007f7fcc597e40:   cmp    %edx,%r13d
  0x00007f7fcc597e43:   jae    0x00007f7fcc597edf
 ;; B27: #	out( B31 B28 ) <- in( B26 )  Freq: 0.665571
  0x00007f7fcc597e49:   vmovss 0x10(%rbx,%r13,4),%xmm0
  0x00007f7fcc597e50:   vfpclassss $0x99,%xmm0,%k7
  0x00007f7fcc597e57:   kmovb  %k7,%ecx
  0x00007f7fcc597e5b:   xor    $0x1,%ecx                    ;*invokestatic isFinite {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@13 (line 9)
  0x00007f7fcc597e5e:   nop
  0x00007f7fcc597e5f:   nop
  0x00007f7fcc597e60:   test   %ecx,%ecx
  0x00007f7fcc597e62:   je     0x00007f7fcc597e95           ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@16 (line 9)
 ;; B28: #	out( B35 B29 ) <- in( B27 )  Freq: 0.665571
  0x00007f7fcc597e64:   cmp    %r9d,%r13d
  0x00007f7fcc597e67:   jae    0x00007f7fcc597f1c
 ;; B29: #	out( B26 B30 ) <- in( B28 )  Freq: 0.66557
  0x00007f7fcc597e6d:   movl   $0x9,0x10(%r8,%r13,4)        ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@26 (line 9)
  0x00007f7fcc597e76:   inc    %r13d                        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@27 (line 8)
  0x00007f7fcc597e79:   nop
  0x00007f7fcc597e7a:   nop
  0x00007f7fcc597e7b:   nop
  0x00007f7fcc597e7c:   nop
  0x00007f7fcc597e7d:   nop
  0x00007f7fcc597e7e:   nop
  0x00007f7fcc597e7f:   nop
  0x00007f7fcc597e80:   cmp    %r9d,%r13d
  0x00007f7fcc597e83:   jl     0x00007f7fcc597e3c           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@5 (line 8)
 ;; B30: #	out( N384 ) <- in( B9 B29 B25 )  Freq: 0.666548
  0x00007f7fcc597e85:   add    $0x40,%rsp
  0x00007f7fcc597e89:   pop    %rbp
  0x00007f7fcc597e8a:   cmp    0x28(%r15),%rsp              ;   {poll_return}
  0x00007f7fcc597e8e:   ja     0x00007f7fcc598038
  0x00007f7fcc597e94:   retq                                ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@16 (line 9)
 ;; B31: #	out( N384 ) <- in( B27 B12 B22 )  Freq: 0.333439
  0x00007f7fcc597e95:   mov    $0xffffff4d,%esi
  0x00007f7fcc597e9a:   mov    %rbx,(%rsp)
  0x00007f7fcc597e9e:   mov    %r8,0x10(%rsp)
  0x00007f7fcc597ea3:   mov    %r13d,0xc(%rsp)
  0x00007f7fcc597ea8:   mov    %ecx,0x18(%rsp)
  0x00007f7fcc597eac:   nop
  0x00007f7fcc597ead:   nop
  0x00007f7fcc597eae:   nop
  0x00007f7fcc597eaf:   callq  0x00007f7fcc54e6e0           ; ImmutableOopMap {[0]=Oop [16]=Oop }
                                                            ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) is_finite::micro@16 (line 9)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f7fcc597eb4:   nopl   0x10003ac(%rax,%rax,1)       ;   {post_call_nop}
  0x00007f7fcc597ebc:   movabs $0x7f7fdfad4588,%rdi         ;   {external_word}
  0x00007f7fcc597ec6:   and    $0xfffffffffffffff0,%rsp
  0x00007f7fcc597eca:   callq  0x00007f7fdf008a7c           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f7fcc597ecf:   hlt                                 ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@16 (line 9)
 ;; B32: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
  0x00007f7fcc597ed0:   xor    %r8d,%r8d
  0x00007f7fcc597ed3:   jmpq   0x00007f7fcc597cf0
 ;; B33: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
  0x00007f7fcc597ed8:   xor    %ebx,%ebx
  0x00007f7fcc597eda:   jmpq   0x00007f7fcc597d0d
 ;; B34: #	out( N384 ) <- in( B26 B11 )  Freq: 2.69898e-06
  0x00007f7fcc597edf:   mov    $0xffffffe4,%esi
  0x00007f7fcc597ee4:   mov    %r8,0x10(%rsp)
  0x00007f7fcc597ee9:   mov    %r13d,0xc(%rsp)
  0x00007f7fcc597eee:   mov    %rbx,0x18(%rsp)
  0x00007f7fcc597ef3:   mov    %r13d,0x20(%rsp)
  0x00007f7fcc597ef8:   nop
  0x00007f7fcc597ef9:   nop
  0x00007f7fcc597efa:   nop
  0x00007f7fcc597efb:   callq  0x00007f7fcc54e6e0           ; ImmutableOopMap {[16]=Oop [24]=Oop }
                                                            ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@12 (line 9)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f7fcc597f00:   nopl   0x20003f8(%rax,%rax,1)       ;   {post_call_nop}
  0x00007f7fcc597f08:   movabs $0x7f7fdfad4588,%rdi         ;   {external_word}
  0x00007f7fcc597f12:   and    $0xfffffffffffffff0,%rsp
  0x00007f7fcc597f16:   callq  0x00007f7fdf008a7c           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f7fcc597f1b:   hlt    
 ;; B35: #	out( N384 ) <- in( B28 B13 )  Freq: 2.69897e-06
  0x00007f7fcc597f1c:   mov    $0xffffffe4,%esi
  0x00007f7fcc597f21:   mov    %rbx,(%rsp)
  0x00007f7fcc597f25:   mov    %r8,0x10(%rsp)
  0x00007f7fcc597f2a:   mov    %r13d,0xc(%rsp)
  0x00007f7fcc597f2f:   callq  0x00007f7fcc54e6e0           ; ImmutableOopMap {[0]=Oop [16]=Oop }
                                                            ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@26 (line 9)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f7fcc597f34:   nopl   0x300042c(%rax,%rax,1)       ;   {post_call_nop}
  0x00007f7fcc597f3c:   movabs $0x7f7fdfad4588,%rdi         ;   {external_word}
  0x00007f7fcc597f46:   and    $0xfffffffffffffff0,%rsp
  0x00007f7fcc597f4a:   callq  0x00007f7fdf008a7c           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f7fcc597f4f:   hlt                                 ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@26 (line 9)
 ;; B36: #	out( N384 ) <- in( B16 )  Freq: 1.01228e-06
  0x00007f7fcc597f50:   movabs $0x7f7fdfdf3f78,%rdi         ;   {external_word}
  0x00007f7fcc597f5a:   and    $0xfffffffffffffff0,%rsp
  0x00007f7fcc597f5e:   callq  0x00007f7fdf008a7c           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f7fcc597f63:   hlt    
 ;; B37: #	out( N384 ) <- in( B17 )  Freq: 1.01228e-06
  0x00007f7fcc597f64:   movabs $0x7f7fdfdf3f78,%rdi         ;   {external_word}
  0x00007f7fcc597f6e:   and    $0xfffffffffffffff0,%rsp
  0x00007f7fcc597f72:   callq  0x00007f7fdf008a7c           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f7fcc597f77:   hlt    
 ;; B38: #	out( N384 ) <- in( B18 )  Freq: 1.01228e-06
  0x00007f7fcc597f78:   movabs $0x7f7fdfdf3f78,%rdi         ;   {external_word}
  0x00007f7fcc597f82:   and    $0xfffffffffffffff0,%rsp
  0x00007f7fcc597f86:   callq  0x00007f7fdf008a7c           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f7fcc597f8b:   hlt    
 ;; B39: #	out( N384 ) <- in( B19 )  Freq: 1.01228e-06
  0x00007f7fcc597f8c:   movabs $0x7f7fdfdf3f78,%rdi         ;   {external_word}
  0x00007f7fcc597f96:   and    $0xfffffffffffffff0,%rsp
  0x00007f7fcc597f9a:   callq  0x00007f7fdf008a7c           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f7fcc597f9f:   hlt    
 ;; B40: #	out( N384 ) <- in( B2 B5 )  Freq: 1.998e-06
  0x00007f7fcc597fa0:   mov    $0xffffff8d,%esi
  0x00007f7fcc597fa5:   mov    %rbx,(%rsp)
  0x00007f7fcc597fa9:   mov    %r13d,0x8(%rsp)
  0x00007f7fcc597fae:   nop
  0x00007f7fcc597faf:   callq  0x00007f7fcc54e6e0           ; ImmutableOopMap {rbp=Oop [0]=Oop }
                                                            ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@2 (line 8)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f7fcc597fb4:   nopl   0x40004ac(%rax,%rax,1)       ;   {post_call_nop}
  0x00007f7fcc597fbc:   movabs $0x7f7fdfad4588,%rdi         ;   {external_word}
  0x00007f7fcc597fc6:   and    $0xfffffffffffffff0,%rsp
  0x00007f7fcc597fca:   callq  0x00007f7fdf008a7c           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f7fcc597fcf:   hlt    
 ;; B41: #	out( N384 ) <- in( B7 )  Freq: 1.01328e-06
  0x00007f7fcc597fd0:   mov    $0xffffff76,%esi
  0x00007f7fcc597fd5:   mov    %r8,%rbp
  0x00007f7fcc597fd8:   mov    %rbx,(%rsp)
  0x00007f7fcc597fdc:   mov    %r13d,0x8(%rsp)
  0x00007f7fcc597fe1:   nop
  0x00007f7fcc597fe2:   nop
  0x00007f7fcc597fe3:   callq  0x00007f7fcc54e6e0           ; ImmutableOopMap {rbp=Oop [0]=Oop }
                                                            ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@2 (line 8)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f7fcc597fe8:   nopl   0x50004e0(%rax,%rax,1)       ;   {post_call_nop}
  0x00007f7fcc597ff0:   movabs $0x7f7fdfad4588,%rdi         ;   {external_word}
  0x00007f7fcc597ffa:   and    $0xfffffffffffffff0,%rsp
  0x00007f7fcc597ffe:   callq  0x00007f7fdf008a7c           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f7fcc598003:   hlt    
 ;; B42: #	out( N384 ) <- in( B8 )  Freq: 1.01328e-06
  0x00007f7fcc598004:   mov    $0xffffffbe,%esi
  0x00007f7fcc598009:   mov    %r8,%rbp
  0x00007f7fcc59800c:   mov    %rbx,(%rsp)
  0x00007f7fcc598010:   mov    %r13d,0x8(%rsp)
  0x00007f7fcc598015:   nop
  0x00007f7fcc598016:   nop
  0x00007f7fcc598017:   callq  0x00007f7fcc54e6e0           ; ImmutableOopMap {rbp=Oop [0]=Oop }
                                                            ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@2 (line 8)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f7fcc59801c:   nopl   0x6000514(%rax,%rax,1)       ;   {post_call_nop}
  0x00007f7fcc598024:   movabs $0x7f7fdfad4588,%rdi         ;   {external_word}
  0x00007f7fcc59802e:   and    $0xfffffffffffffff0,%rsp
  0x00007f7fcc598032:   callq  0x00007f7fdf008a7c           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f7fcc598037:   hlt                                 ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@16 (line 9)
  0x00007f7fcc598038:   movabs $0x7f7fcc597e8a,%r10         ;   {internal_word}
  0x00007f7fcc598042:   mov    %r10,0x490(%r15)
  0x00007f7fcc598049:   jmpq   0x00007f7fcc558360           ;   {runtime_call SafepointBlob}
  0x00007f7fcc59804e:   callq  Stub::nmethod_entry_barrier  ;   {runtime_call StubRoutines (final stubs)}
  0x00007f7fcc598053:   jmpq   0x00007f7fcc597caa
[Exception Handler]
  0x00007f7fcc598058:   jmpq   0x00007f7fcc558860           ;   {no_reloc}
[Deopt Handler Code]
  0x00007f7fcc59805d:   callq  0x00007f7fcc598062
  0x00007f7fcc598062:   subq   $0x5,(%rsp)
  0x00007f7fcc598067:   jmpq   0x00007f7fcc5597a0           ;   {runtime_call DeoptimizationBlob}
  0x00007f7fcc59806c:   hlt    
  0x00007f7fcc59806d:   hlt    
  0x00007f7fcc59806e:   hlt    
  0x00007f7fcc59806f:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007f7fcc598070:   0x00000007ff061a40 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000007ff061a40}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007f7fcc598078:   0x00007f7f421c3bd0 {type array int}
  0x00007f7fcc598080:   0x00007f7f421c3390 {type array float}
  0x00007f7fcc598088:   0x00007f7f3e400638 {method} {0x00007f7f3e400638} 'micro' '([I[F)V' in 'is_finite'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007f7fcc597c7f offset=ffffffff bits=0):
PcDesc(pc=0x00007f7fcc597d0d offset=8d bits=0):
   is_finite::micro@2 (line 8)
PcDesc(pc=0x00007f7fcc597d11 offset=91 bits=0):
   is_finite::micro@4 (line 8)
PcDesc(pc=0x00007f7fcc597d14 offset=94 bits=0):
   is_finite::micro@12 (line 9)
PcDesc(pc=0x00007f7fcc597d1d offset=9d bits=0):
   is_finite::micro@5 (line 8)
PcDesc(pc=0x00007f7fcc597d37 offset=b7 bits=0):
   is_finite::micro@26 (line 9)
PcDesc(pc=0x00007f7fcc597d5e offset=de bits=0):
   is_finite::micro@13 (line 9)
PcDesc(pc=0x00007f7fcc597d68 offset=e8 bits=0):
   is_finite::micro@16 (line 9)
PcDesc(pc=0x00007f7fcc597d7a offset=fa bits=0):
   is_finite::micro@26 (line 9)
PcDesc(pc=0x00007f7fcc597d7d offset=fd bits=0):
   is_finite::micro@27 (line 8)
PcDesc(pc=0x00007f7fcc597d85 offset=105 bits=0):
   is_finite::micro@5 (line 8)
PcDesc(pc=0x00007f7fcc597dd8 offset=158 bits=0):
   is_finite::micro@30 (line 8)
PcDesc(pc=0x00007f7fcc597df4 offset=174 bits=0):
   is_finite::micro@12 (line 9)
PcDesc(pc=0x00007f7fcc597e09 offset=189 bits=0):
   is_finite::micro@13 (line 9)
PcDesc(pc=0x00007f7fcc597e11 offset=191 bits=0):
   is_finite::micro@16 (line 9)
PcDesc(pc=0x00007f7fcc597e1a offset=19a bits=0):
   is_finite::micro@26 (line 9)
PcDesc(pc=0x00007f7fcc597e1d offset=19d bits=0):
   is_finite::micro@27 (line 8)
PcDesc(pc=0x00007f7fcc597e25 offset=1a5 bits=0):
   is_finite::micro@30 (line 8)
PcDesc(pc=0x00007f7fcc597e29 offset=1a9 bits=1):
   is_finite::micro@30 (line 8)  reexecute=true
   Locals
    - l0: reg r8 [16],oop
    - l1: reg rbx [6],oop
    - l2: reg r13 [26],int
PcDesc(pc=0x00007f7fcc597e2b offset=1ab bits=0):
   is_finite::micro@30 (line 8)
PcDesc(pc=0x00007f7fcc597e3c offset=1bc bits=0):
   is_finite::micro@26 (line 9)
PcDesc(pc=0x00007f7fcc597e5e offset=1de bits=0):
   is_finite::micro@13 (line 9)
PcDesc(pc=0x00007f7fcc597e64 offset=1e4 bits=0):
   is_finite::micro@16 (line 9)
PcDesc(pc=0x00007f7fcc597e76 offset=1f6 bits=0):
   is_finite::micro@26 (line 9)
PcDesc(pc=0x00007f7fcc597e79 offset=1f9 bits=0):
   is_finite::micro@27 (line 8)
PcDesc(pc=0x00007f7fcc597e85 offset=205 bits=0):
   is_finite::micro@5 (line 8)
PcDesc(pc=0x00007f7fcc597e95 offset=215 bits=0):
   is_finite::micro@16 (line 9)
PcDesc(pc=0x00007f7fcc597eb4 offset=234 bits=1):
   is_finite::micro@16 (line 9)  reexecute=true
   Locals
    - l0: stack[16],oop
    - l1: stack[0],oop
    - l2: stack[12]
   Expression stack
    - @0: stack[16],oop
    - @1: stack[12]
    - @2: stack[24]
PcDesc(pc=0x00007f7fcc597ed0 offset=250 bits=0):
   is_finite::micro@16 (line 9)
PcDesc(pc=0x00007f7fcc597f00 offset=280 bits=0):
   is_finite::micro@12 (line 9)
   Locals
    - l0: stack[16],oop
    - l1: stack[24],oop
    - l2: stack[12]
   Expression stack
    - @0: stack[16],oop
    - @1: stack[32]
    - @2: stack[24],oop
    - @3: stack[12]
PcDesc(pc=0x00007f7fcc597f34 offset=2b4 bits=0):
   is_finite::micro@26 (line 9)
   Locals
    - l0: stack[16],oop
    - l1: stack[0],oop
    - l2: stack[12]
   Expression stack
    - @0: stack[16],oop
    - @1: stack[12]
    - @2: 9
PcDesc(pc=0x00007f7fcc597f50 offset=2d0 bits=0):
   is_finite::micro@26 (line 9)
PcDesc(pc=0x00007f7fcc597fb4 offset=334 bits=0):
   is_finite::micro@2 (line 8)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8]
PcDesc(pc=0x00007f7fcc597fe8 offset=368 bits=0):
   is_finite::micro@2 (line 8)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8]
PcDesc(pc=0x00007f7fcc59801c offset=39c bits=0):
   is_finite::micro@2 (line 8)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8]
PcDesc(pc=0x00007f7fcc598038 offset=3b8 bits=0):
   is_finite::micro@16 (line 9)
PcDesc(pc=0x00007f7fcc598071 offset=3f1 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 7 OopMaps

ImmutableOopMap {r8=Oop rbx=Oop } pc offsets: 425 
ImmutableOopMap {[0]=Oop [16]=Oop } pc offsets: 564 
ImmutableOopMap {[16]=Oop [24]=Oop } pc offsets: 640 
ImmutableOopMap {[0]=Oop [16]=Oop } pc offsets: 692 
ImmutableOopMap {rbp=Oop [0]=Oop } pc offsets: 820 872 924 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007f7fcc597d0d offset=8d):
   is_finite::micro@2 (line 8)
ScopeDesc(pc=0x00007f7fcc597d11 offset=91):
   is_finite::micro@4 (line 8)
ScopeDesc(pc=0x00007f7fcc597d14 offset=94):
   is_finite::micro@12 (line 9)
ScopeDesc(pc=0x00007f7fcc597d1d offset=9d):
   is_finite::micro@5 (line 8)
ScopeDesc(pc=0x00007f7fcc597d37 offset=b7):
   is_finite::micro@26 (line 9)
ScopeDesc(pc=0x00007f7fcc597d5e offset=de):
   is_finite::micro@13 (line 9)
ScopeDesc(pc=0x00007f7fcc597d68 offset=e8):
   is_finite::micro@16 (line 9)
ScopeDesc(pc=0x00007f7fcc597d7a offset=fa):
   is_finite::micro@26 (line 9)
ScopeDesc(pc=0x00007f7fcc597d7d offset=fd):
   is_finite::micro@27 (line 8)
ScopeDesc(pc=0x00007f7fcc597d85 offset=105):
   is_finite::micro@5 (line 8)
ScopeDesc(pc=0x00007f7fcc597dd8 offset=158):
   is_finite::micro@30 (line 8)
ScopeDesc(pc=0x00007f7fcc597df4 offset=174):
   is_finite::micro@12 (line 9)
ScopeDesc(pc=0x00007f7fcc597e09 offset=189):
   is_finite::micro@13 (line 9)
ScopeDesc(pc=0x00007f7fcc597e11 offset=191):
   is_finite::micro@16 (line 9)
ScopeDesc(pc=0x00007f7fcc597e1a offset=19a):
   is_finite::micro@26 (line 9)
ScopeDesc(pc=0x00007f7fcc597e1d offset=19d):
   is_finite::micro@27 (line 8)
ScopeDesc(pc=0x00007f7fcc597e25 offset=1a5):
   is_finite::micro@30 (line 8)
ScopeDesc(pc=0x00007f7fcc597e29 offset=1a9):
   is_finite::micro@30 (line 8)  reexecute=true
   Locals
    - l0: reg r8 [16],oop
    - l1: reg rbx [6],oop
    - l2: reg r13 [26],int
ScopeDesc(pc=0x00007f7fcc597e2b offset=1ab):
   is_finite::micro@30 (line 8)
ScopeDesc(pc=0x00007f7fcc597e3c offset=1bc):
   is_finite::micro@26 (line 9)
ScopeDesc(pc=0x00007f7fcc597e5e offset=1de):
   is_finite::micro@13 (line 9)
ScopeDesc(pc=0x00007f7fcc597e64 offset=1e4):
   is_finite::micro@16 (line 9)
ScopeDesc(pc=0x00007f7fcc597e76 offset=1f6):
   is_finite::micro@26 (line 9)
ScopeDesc(pc=0x00007f7fcc597e79 offset=1f9):
   is_finite::micro@27 (line 8)
ScopeDesc(pc=0x00007f7fcc597e85 offset=205):
   is_finite::micro@5 (line 8)
ScopeDesc(pc=0x00007f7fcc597e95 offset=215):
   is_finite::micro@16 (line 9)
ScopeDesc(pc=0x00007f7fcc597eb4 offset=234):
   is_finite::micro@16 (line 9)  reexecute=true
   Locals
    - l0: stack[16],oop
    - l1: stack[0],oop
    - l2: stack[12]
   Expression stack
    - @0: stack[16],oop
    - @1: stack[12]
    - @2: stack[24]
ScopeDesc(pc=0x00007f7fcc597ed0 offset=250):
   is_finite::micro@16 (line 9)
ScopeDesc(pc=0x00007f7fcc597f00 offset=280):
   is_finite::micro@12 (line 9)
   Locals
    - l0: stack[16],oop
    - l1: stack[24],oop
    - l2: stack[12]
   Expression stack
    - @0: stack[16],oop
    - @1: stack[32]
    - @2: stack[24],oop
    - @3: stack[12]
ScopeDesc(pc=0x00007f7fcc597f34 offset=2b4):
   is_finite::micro@26 (line 9)
   Locals
    - l0: stack[16],oop
    - l1: stack[0],oop
    - l2: stack[12]
   Expression stack
    - @0: stack[16],oop
    - @1: stack[12]
    - @2: 9
ScopeDesc(pc=0x00007f7fcc597f50 offset=2d0):
   is_finite::micro@26 (line 9)
ScopeDesc(pc=0x00007f7fcc597fb4 offset=334):
   is_finite::micro@2 (line 8)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8]
ScopeDesc(pc=0x00007f7fcc597fe8 offset=368):
   is_finite::micro@2 (line 8)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8]
ScopeDesc(pc=0x00007f7fcc59801c offset=39c):
   is_finite::micro@2 (line 8)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8]
ScopeDesc(pc=0x00007f7fcc598038 offset=3b8):
   is_finite::micro@16 (line 9)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007f7fcc597bf0: 3100
relocInfo@0x00007f7fcc597bf0 [type=6(runtime_call) addr=0x00007f7fcc597c80 offset=0 format=1] | [destination=0x00007f7fdf18e27e]
         @0x00007f7fcc597bf2: 8045
relocInfo@0x00007f7fcc597bf2 [type=16(post_call_nop) addr=0x00007f7fcc597cc5 offset=69]
         @0x00007f7fcc597bf4: 7801631b
relocInfo@0x00007f7fcc597bf6 [type=12(metadata) addr=0x00007f7fcc597ce0 offset=27 format=3 data=1] | [metadata_addr=0x00007f7fcc598078 *=0x00007f7f421c3bd0]metadata_value=0x00007f7f421c3bd0: {type array int}
         @0x00007f7fcc597bf8: 78026320
relocInfo@0x00007f7fcc597bfa [type=12(metadata) addr=0x00007f7fcc597d00 offset=32 format=3 data=2] | [metadata_addr=0x00007f7fcc598080 *=0x00007f7f421c3390]metadata_value=0x00007f7f421c3390: {type array float}
         @0x00007f7fcc597bfc: 00ff
relocInfo@0x00007f7fcc597bfc [type=0(none) addr=0x00007f7fcc597dff offset=255]
         @0x00007f7fcc597bfe: 502a
relocInfo@0x00007f7fcc597bfe [type=10(poll) addr=0x00007f7fcc597e29 offset=42]
         @0x00007f7fcc597c00: 5861
relocInfo@0x00007f7fcc597c00 [type=11(poll_return) addr=0x00007f7fcc597e8a offset=97]
         @0x00007f7fcc597c02: 3125
relocInfo@0x00007f7fcc597c02 [type=6(runtime_call) addr=0x00007f7fcc597eaf offset=37 format=1] | [destination=0x00007f7fcc54e6e0]
         @0x00007f7fcc597c04: 8005
relocInfo@0x00007f7fcc597c04 [type=16(post_call_nop) addr=0x00007f7fcc597eb4 offset=5]
         @0x00007f7fcc597c06: 781e3808
relocInfo@0x00007f7fcc597c08 [type=7(external_word) addr=0x00007f7fcc597ebc offset=8 data=30] | [target=0x00007f7fdfad4588]
         @0x00007f7fcc597c0a: 310e
relocInfo@0x00007f7fcc597c0a [type=6(runtime_call) addr=0x00007f7fcc597eca offset=14 format=1] | [destination=0x00007f7fdf008a7c]
         @0x00007f7fcc597c0c: 3131
relocInfo@0x00007f7fcc597c0c [type=6(runtime_call) addr=0x00007f7fcc597efb offset=49 format=1] | [destination=0x00007f7fcc54e6e0]
         @0x00007f7fcc597c0e: 8005
relocInfo@0x00007f7fcc597c0e [type=16(post_call_nop) addr=0x00007f7fcc597f00 offset=5]
         @0x00007f7fcc597c10: 781e3808
relocInfo@0x00007f7fcc597c12 [type=7(external_word) addr=0x00007f7fcc597f08 offset=8 data=30] | [target=0x00007f7fdfad4588]
         @0x00007f7fcc597c14: 310e
relocInfo@0x00007f7fcc597c14 [type=6(runtime_call) addr=0x00007f7fcc597f16 offset=14 format=1] | [destination=0x00007f7fdf008a7c]
         @0x00007f7fcc597c16: 3119
relocInfo@0x00007f7fcc597c16 [type=6(runtime_call) addr=0x00007f7fcc597f2f offset=25 format=1] | [destination=0x00007f7fcc54e6e0]
         @0x00007f7fcc597c18: 8005
relocInfo@0x00007f7fcc597c18 [type=16(post_call_nop) addr=0x00007f7fcc597f34 offset=5]
         @0x00007f7fcc597c1a: 781e3808
relocInfo@0x00007f7fcc597c1c [type=7(external_word) addr=0x00007f7fcc597f3c offset=8 data=30] | [target=0x00007f7fdfad4588]
         @0x00007f7fcc597c1e: 310e
relocInfo@0x00007f7fcc597c1e [type=6(runtime_call) addr=0x00007f7fcc597f4a offset=14 format=1] | [destination=0x00007f7fdf008a7c]
         @0x00007f7fcc597c20: 781f3806
relocInfo@0x00007f7fcc597c22 [type=7(external_word) addr=0x00007f7fcc597f50 offset=6 data=31] | [target=0x00007f7fdfdf3f78]
         @0x00007f7fcc597c24: 310e
relocInfo@0x00007f7fcc597c24 [type=6(runtime_call) addr=0x00007f7fcc597f5e offset=14 format=1] | [destination=0x00007f7fdf008a7c]
         @0x00007f7fcc597c26: 781f3806
relocInfo@0x00007f7fcc597c28 [type=7(external_word) addr=0x00007f7fcc597f64 offset=6 data=31] | [target=0x00007f7fdfdf3f78]
         @0x00007f7fcc597c2a: 310e
relocInfo@0x00007f7fcc597c2a [type=6(runtime_call) addr=0x00007f7fcc597f72 offset=14 format=1] | [destination=0x00007f7fdf008a7c]
         @0x00007f7fcc597c2c: 781f3806
relocInfo@0x00007f7fcc597c2e [type=7(external_word) addr=0x00007f7fcc597f78 offset=6 data=31] | [target=0x00007f7fdfdf3f78]
         @0x00007f7fcc597c30: 310e
relocInfo@0x00007f7fcc597c30 [type=6(runtime_call) addr=0x00007f7fcc597f86 offset=14 format=1] | [destination=0x00007f7fdf008a7c]
         @0x00007f7fcc597c32: 781f3806
relocInfo@0x00007f7fcc597c34 [type=7(external_word) addr=0x00007f7fcc597f8c offset=6 data=31] | [target=0x00007f7fdfdf3f78]
         @0x00007f7fcc597c36: 310e
relocInfo@0x00007f7fcc597c36 [type=6(runtime_call) addr=0x00007f7fcc597f9a offset=14 format=1] | [destination=0x00007f7fdf008a7c]
         @0x00007f7fcc597c38: 3115
relocInfo@0x00007f7fcc597c38 [type=6(runtime_call) addr=0x00007f7fcc597faf offset=21 format=1] | [destination=0x00007f7fcc54e6e0]
         @0x00007f7fcc597c3a: 8005
relocInfo@0x00007f7fcc597c3a [type=16(post_call_nop) addr=0x00007f7fcc597fb4 offset=5]
         @0x00007f7fcc597c3c: 781e3808
relocInfo@0x00007f7fcc597c3e [type=7(external_word) addr=0x00007f7fcc597fbc offset=8 data=30] | [target=0x00007f7fdfad4588]
         @0x00007f7fcc597c40: 310e
relocInfo@0x00007f7fcc597c40 [type=6(runtime_call) addr=0x00007f7fcc597fca offset=14 format=1] | [destination=0x00007f7fdf008a7c]
         @0x00007f7fcc597c42: 3119
relocInfo@0x00007f7fcc597c42 [type=6(runtime_call) addr=0x00007f7fcc597fe3 offset=25 format=1] | [destination=0x00007f7fcc54e6e0]
         @0x00007f7fcc597c44: 8005
relocInfo@0x00007f7fcc597c44 [type=16(post_call_nop) addr=0x00007f7fcc597fe8 offset=5]
         @0x00007f7fcc597c46: 781e3808
relocInfo@0x00007f7fcc597c48 [type=7(external_word) addr=0x00007f7fcc597ff0 offset=8 data=30] | [target=0x00007f7fdfad4588]
         @0x00007f7fcc597c4a: 310e
relocInfo@0x00007f7fcc597c4a [type=6(runtime_call) addr=0x00007f7fcc597ffe offset=14 format=1] | [destination=0x00007f7fdf008a7c]
         @0x00007f7fcc597c4c: 3119
relocInfo@0x00007f7fcc597c4c [type=6(runtime_call) addr=0x00007f7fcc598017 offset=25 format=1] | [destination=0x00007f7fcc54e6e0]
         @0x00007f7fcc597c4e: 8005
relocInfo@0x00007f7fcc597c4e [type=16(post_call_nop) addr=0x00007f7fcc59801c offset=5]
         @0x00007f7fcc597c50: 781e3808
relocInfo@0x00007f7fcc597c52 [type=7(external_word) addr=0x00007f7fcc598024 offset=8 data=30] | [target=0x00007f7fdfad4588]
         @0x00007f7fcc597c54: 310e
relocInfo@0x00007f7fcc597c54 [type=6(runtime_call) addr=0x00007f7fcc598032 offset=14 format=1] | [destination=0x00007f7fdf008a7c]
         @0x00007f7fcc597c56: 79ae4006
relocInfo@0x00007f7fcc597c58 [type=8(internal_word) addr=0x00007f7fcc598038 offset=6 data=430] | [target=0x00007f7fcc597e8a]
         @0x00007f7fcc597c5a: 3111
relocInfo@0x00007f7fcc597c5a [type=6(runtime_call) addr=0x00007f7fcc598049 offset=17 format=1] | [destination=0x00007f7fcc558360]
         @0x00007f7fcc597c5c: 3105
relocInfo@0x00007f7fcc597c5c [type=6(runtime_call) addr=0x00007f7fcc59804e offset=5 format=1] | [destination=0x00007f7fcc4b5700]
         @0x00007f7fcc597c5e: 000a
relocInfo@0x00007f7fcc597c5e [type=0(none) addr=0x00007f7fcc598058 offset=10]
         @0x00007f7fcc597c60: 3100
relocInfo@0x00007f7fcc597c60 [type=6(runtime_call) addr=0x00007f7fcc598058 offset=0 format=1] | [destination=0x00007f7fcc558860]
         @0x00007f7fcc597c62: 310f
relocInfo@0x00007f7fcc597c62 [type=6(runtime_call) addr=0x00007f7fcc598067 offset=15 format=1] | [destination=0x00007f7fcc5597a0]
         @0x00007f7fcc597c64: 0000
relocInfo@0x00007f7fcc597c64 [type=0(none) addr=0x00007f7fcc598067 offset=0]
         @0x00007f7fcc597c66: 0000
relocInfo@0x00007f7fcc597c66 [type=0(none) addr=0x00007f7fcc598067 offset=0]
         @0x00007f7fcc597c68: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type evol_method
  method  = *{method} {0x00007f7f3e400638} 'micro' '([I[F)V' in 'is_finite'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 2 entries, 20 bytes):
{
   < 0x00007f7fcc597d0d, 0x00007f7fcc597fd0 > < 0x00007f7fcc597d11, 0x00007f7fcc598004 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 nullptr-oop
#1: 0x00000007ff061a40 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000007ff061a40}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 nullptr-oop
#1: 0x00007f7f421c3bd0 {type array int}
#2: 0x00007f7f421c3390 {type array float}
#3: 0x00007f7f3e400638 {method} {0x00007f7f3e400638} 'micro' '([I[F)V' in 'is_finite'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

============================= C2-compiled nmethod ==============================
#r018 rsi:rsi   : parm 0: int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
#r016 rdx:rdx   : parm 1: float[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
# -- Old rsp -- Framesize: 64 --
#r623 rsp+60: in_preserve
#r622 rsp+56: return address
#r621 rsp+52: in_preserve
#r620 rsp+48: saved fp register
#r619 rsp+44: pad2, stack alignment
#r618 rsp+40: pad2, stack alignment
#r617 rsp+36: Fixed slot 1
#r616 rsp+32: Fixed slot 0
#r631 rsp+28: spill
#r630 rsp+24: spill
#r629 rsp+20: spill
#r628 rsp+16: spill
#r627 rsp+12: spill
#r626 rsp+ 8: spill
#r625 rsp+ 4: spill
#r624 rsp+ 0: spill
#
----------------------- MetaData before Compile_id = 35 ------------------------
{method}
 - this oop:          0x00007f7f3e400638
 - method holder:     'is_finite'
 - constants:         0x00007f7f3e400080 constant pool [117]/operands[12] {0x00007f7f3e400080} for 'is_finite' cache=0x00007f7f3e400b58
 - access:            0x9  public static 
 - flags:             0x6080  queued_for_compilation has_loops_flag has_loops_flag_init 
 - name:              'micro'
 - signature:         '([I[F)V'
 - max stack:         5
 - max locals:        3
 - size of params:    2
 - method size:       14
 - vtable index:      -2
 - i2i entry:         0x00007f7fcc444b60
 - adapters:          AHE@0x00007f7fd8330aa0: 0xbb i2c: 0x00007f7fcc4ab980 c2i: 0x00007f7fcc4aba60 c2iUV: 0x00007f7fcc4aba3f c2iNCI: 0x00007f7fcc4aba9a
 - compiled entry     0x00007f7fcc4aba60
 - code size:         34
 - code start:        0x00007f7f3e400608
 - code end (excl):   0x00007f7f3e40062a
 - method data:       0x00007f7f3e4020e8
 - checked ex length: 0
 - linenumber start:  0x00007f7f3e40062a
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 35 -----------------------
#
#  void ( int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *, float[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact * )
#
000     N1: #	out( B1 ) <- in( B15 B14 B12 B13 )  Freq: 1

000     B1: #	out( B15 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (152 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

01a     movl    R10, [RSI + #12 (8-bit)]	# range
01e     NullCheck RSI

01e     B2: #	out( B12 B3 ) <- in( B1 )  Freq: 0.999999
        nop 	# 2 bytes pad for loops and calls
020     testl   R10, R10	# unsigned
023     jbe,u   B12  P=0.000976 C=20500.000000

029     B3: #	out( B14 B4 ) <- in( B2 )  Freq: 0.999023
029     movl    R11, [RDX + #12 (8-bit)]	# range
02d     NullCheck RDX

02d     B4: #	out( B14 B5 ) <- in( B3 )  Freq: 0.999022
02d     testl   R11, R11	# unsigned
030     jbe,u   B14  P=0.000001 C=-1.000000

036     B5: #	out( B14 B6 ) <- in( B4 )  Freq: 0.999021
036     leal    R8, [R10 + #-1]
        nop 	# 6 bytes pad for loops and calls
040     cmpl    R8, R11	# unsigned
043     jae,u   B14  P=0.000001 C=-1.000000

049     B6: #	out( B14 B7 ) <- in( B5 )  Freq: 0.99902
049     cmpl    R8, R10	# unsigned
04c     jae,u   B14  P=0.000001 C=-1.000000

052     B7: #	out( B8 ) <- in( B6 )  Freq: 0.999019
052     movl    R9, #1000	# int
058     xorl    RDI, RDI	# int
05a     # TLS is in R15
05a     xorl    R8, R8	# int

05d     B8: #	out( B9 ) <- in( B7 B11 ) Loop( B8-B11 ) Freq: 682.552
05d     movl    RCX, R10	# spill
060     subl    RCX, R8	# int
063     cmpl    R10, R8
066     cmovll RCX, RDI	# signed, int
069     cmpl    RCX, #1000	# unsigned
06f     cmovla RCX, R9	# unsigned, int
073     addl    RCX, R8	# int
        nop 	# 10 bytes pad for loops and calls

080     B9: #	out( B13 B10 ) <- in( B8 B10 ) Loop( B9-B10 inner  strip mined) Freq: 699275
080     movss   XMM0, [RDX + #16 + R8 << #2]	# float
087     is_finite_float R11, XMM0	! using K7 as TEMP
096     testl   R11, R11
099     je,s   B13  P=0.000000 C=20480.000000

09b     B10: #	out( B9 B11 ) <- in( B9 )  Freq: 699275
09b     movl    [RSI + #16 + R8 << #2], #9	# int
0a4     incl    R8	# int
0a7     cmpl    R8, RCX
0aa     jl,s   B9	# loop end  P=0.999024 C=20480.000000

0ac     B11: #	out( B8 B12 ) <- in( B10 )  Freq: 682.219
0ac     movq    R11, [R15 + #48 (8-bit)]	# ptr
0b0     testl   rax, [R11]	# Safepoint: poll for GC        # is_finite::micro @ bci:30 (line 8) L[0]=RSI L[1]=RDX L[2]=R8
        # OopMap {rdx=Oop rsi=Oop off=176/0xb0}
0b3     cmpl    R8, R10
0b6     jl,s   B8  P=0.999024 C=20480.000000

0b8     B12: #	out( N1 ) <- in( B11 B2 )  Freq: 0.666554
0b8     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

0c7     ret

0c8     B13: #	out( N1 ) <- in( B9 )  Freq: 0.333441
0c8     movq    [rsp + #0], RDX	# spill
0cc     movq    [rsp + #16], RSI	# spill
0d1     movl    [rsp + #12], R8	# spill
0d6     movl    [rsp + #24], R11	# spill
0db     movl    RSI, #-179	# int
        nop 	# 3 bytes pad for loops and calls
0e3     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # is_finite::micro @ bci:16 (line 9) L[0]=rsp + #16 L[1]=rsp + #0 L[2]=rsp + #12 STK[0]=rsp + #16 STK[1]=rsp + #12 STK[2]=rsp + #24
        # OopMap {[0]=Oop [16]=Oop off=232/0xe8}
0f0     stop	# ShouldNotReachHere

104     B14: #	out( N1 ) <- in( B6 B3 B4 B5 )  Freq: 4.03589e-06
104     movq    RBP, RSI	# spill
107     movq    [rsp + #0], RDX	# spill
10b     movl    [rsp + #8], R10	# spill
110     movl    RSI, #-138	# int
        nop 	# 2 bytes pad for loops and calls
117     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # is_finite::micro @ bci:5 (line 8) L[0]=RBP L[1]=rsp + #0 L[2]=#0 STK[0]=#0 STK[1]=rsp + #8
        # OopMap {rbp=Oop [0]=Oop off=284/0x11c}
124     stop	# ShouldNotReachHere

138     B15: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
138     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
13f     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # is_finite::micro @ bci:4 (line 8) L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=#null
        # OopMap {off=324/0x144}
14c     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2) 681   35             is_finite::micro (34 bytes)
 total in heap  [0x00007f7fcc597808,0x00007f7fcc597ac8] = 704
 relocation     [0x00007f7fcc5978f0,0x00007f7fcc597920] = 48
 main code      [0x00007f7fcc597920,0x00007f7fcc597aa0] = 384
 stub code      [0x00007f7fcc597aa0,0x00007f7fcc597ab8] = 24
 oops           [0x00007f7fcc597ab8,0x00007f7fcc597ac0] = 8
 metadata       [0x00007f7fcc597ac0,0x00007f7fcc597ac8] = 8
 immutable data [0x00007f7f24163bb0,0x00007f7f24163db8] = 520
 dependencies   [0x00007f7f24163bb0,0x00007f7f24163bb8] = 8
 nul chk table  [0x00007f7f24163bb8,0x00007f7f24163bd0] = 24
 scopes pcs     [0x00007f7f24163bd0,0x00007f7f24163d30] = 352
 scopes data    [0x00007f7f24163d30,0x00007f7f24163db8] = 136

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007f7f3e400638} 'micro' '([I[F)V' in 'is_finite'
  # parm0:    rsi:rsi   = '[I'
  # parm1:    rdx:rdx   = '[F'
  #           [sp+0x40]  (sp of caller)
 ;; N1: #	out( B1 ) <- in( B15 B14 B12 B13 )  Freq: 1
 ;; B1: #	out( B15 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007f7fcc597920:   mov    %eax,-0x18000(%rsp)
  0x00007f7fcc597927:   push   %rbp
  0x00007f7fcc597928:   sub    $0x30,%rsp
  0x00007f7fcc59792c:   cmpl   $0x0,0x20(%r15)
  0x00007f7fcc597934:   jne    0x00007f7fcc597a96           ;*synchronization entry
                                                            ; - is_finite::micro@-1 (line 8)
  0x00007f7fcc59793a:   mov    0xc(%rsi),%r10d              ; implicit exception: dispatches to 0x00007f7fcc597a58
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@4 (line 8)
 ;; B2: #	out( B12 B3 ) <- in( B1 )  Freq: 0.999999
  0x00007f7fcc59793e:   nop
  0x00007f7fcc59793f:   nop
  0x00007f7fcc597940:   test   %r10d,%r10d
  0x00007f7fcc597943:   jbe    0x00007f7fcc5979d8           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@5 (line 8)
 ;; B3: #	out( B14 B4 ) <- in( B2 )  Freq: 0.999023
  0x00007f7fcc597949:   mov    0xc(%rdx),%r11d              ; implicit exception: dispatches to 0x00007f7fcc597a24
                                                            ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@12 (line 9)
 ;; B4: #	out( B14 B5 ) <- in( B3 )  Freq: 0.999022
  0x00007f7fcc59794d:   test   %r11d,%r11d
  0x00007f7fcc597950:   jbe    0x00007f7fcc597a24
 ;; B5: #	out( B14 B6 ) <- in( B4 )  Freq: 0.999021
  0x00007f7fcc597956:   lea    -0x1(%r10),%r8d
  0x00007f7fcc59795a:   nop
  0x00007f7fcc59795b:   nop
  0x00007f7fcc59795c:   nop
  0x00007f7fcc59795d:   nop
  0x00007f7fcc59795e:   nop
  0x00007f7fcc59795f:   nop
  0x00007f7fcc597960:   cmp    %r11d,%r8d
  0x00007f7fcc597963:   jae    0x00007f7fcc597a24
 ;; B6: #	out( B14 B7 ) <- in( B5 )  Freq: 0.99902
  0x00007f7fcc597969:   cmp    %r10d,%r8d
  0x00007f7fcc59796c:   jae    0x00007f7fcc597a24
 ;; B7: #	out( B8 ) <- in( B6 )  Freq: 0.999019
  0x00007f7fcc597972:   mov    $0x3e8,%r9d
  0x00007f7fcc597978:   xor    %edi,%edi                    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@30 (line 8)
  0x00007f7fcc59797a:   xor    %r8d,%r8d
 ;; B8: #	out( B9 ) <- in( B7 B11 ) Loop( B8-B11 ) Freq: 682.552
  0x00007f7fcc59797d:   mov    %r10d,%ecx
  0x00007f7fcc597980:   sub    %r8d,%ecx
  0x00007f7fcc597983:   cmp    %r8d,%r10d
  0x00007f7fcc597986:   cmovl  %edi,%ecx
  0x00007f7fcc597989:   cmp    $0x3e8,%ecx
  0x00007f7fcc59798f:   cmova  %r9d,%ecx
  0x00007f7fcc597993:   add    %r8d,%ecx
  0x00007f7fcc597996:   nop
  0x00007f7fcc597997:   nop
  0x00007f7fcc597998:   nop
  0x00007f7fcc597999:   nop
  0x00007f7fcc59799a:   nop
  0x00007f7fcc59799b:   nop
  0x00007f7fcc59799c:   nop
  0x00007f7fcc59799d:   nop
  0x00007f7fcc59799e:   nop
  0x00007f7fcc59799f:   nop                                 ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@8 (line 9)
 ;; B9: #	out( B13 B10 ) <- in( B8 B10 ) Loop( B9-B10 inner  strip mined) Freq: 699275
  0x00007f7fcc5979a0:   vmovss 0x10(%rdx,%r8,4),%xmm0
  0x00007f7fcc5979a7:   vfpclassss $0x99,%xmm0,%k7
  0x00007f7fcc5979ae:   kmovb  %k7,%r11d
  0x00007f7fcc5979b2:   xor    $0x1,%r11d                   ;*invokestatic isFinite {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@13 (line 9)
  0x00007f7fcc5979b6:   test   %r11d,%r11d
  0x00007f7fcc5979b9:   je     0x00007f7fcc5979e8           ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@16 (line 9)
 ;; B10: #	out( B9 B11 ) <- in( B9 )  Freq: 699275
  0x00007f7fcc5979bb:   movl   $0x9,0x10(%rsi,%r8,4)        ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@26 (line 9)
  0x00007f7fcc5979c4:   inc    %r8d                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@27 (line 8)
  0x00007f7fcc5979c7:   cmp    %ecx,%r8d
  0x00007f7fcc5979ca:   jl     0x00007f7fcc5979a0           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@30 (line 8)
 ;; B11: #	out( B8 B12 ) <- in( B10 )  Freq: 682.219
  0x00007f7fcc5979cc:   mov    0x30(%r15),%r11              ; ImmutableOopMap {rdx=Oop rsi=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) is_finite::micro@30 (line 8)
  0x00007f7fcc5979d0:   test   %eax,(%r11)                  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@30 (line 8)
                                                            ;   {poll}
  0x00007f7fcc5979d3:   cmp    %r10d,%r8d
  0x00007f7fcc5979d6:   jl     0x00007f7fcc59797d           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@5 (line 8)
 ;; B12: #	out( N1 ) <- in( B11 B2 )  Freq: 0.666554
  0x00007f7fcc5979d8:   add    $0x30,%rsp
  0x00007f7fcc5979dc:   pop    %rbp
  0x00007f7fcc5979dd:   cmp    0x28(%r15),%rsp              ;   {poll_return}
  0x00007f7fcc5979e1:   ja     0x00007f7fcc597a80
  0x00007f7fcc5979e7:   retq   
 ;; B13: #	out( N1 ) <- in( B9 )  Freq: 0.333441
  0x00007f7fcc5979e8:   mov    %rdx,(%rsp)
  0x00007f7fcc5979ec:   mov    %rsi,0x10(%rsp)
  0x00007f7fcc5979f1:   mov    %r8d,0xc(%rsp)
  0x00007f7fcc5979f6:   mov    %r11d,0x18(%rsp)
  0x00007f7fcc5979fb:   mov    $0xffffff4d,%esi
  0x00007f7fcc597a00:   nop
  0x00007f7fcc597a01:   nop
  0x00007f7fcc597a02:   nop
  0x00007f7fcc597a03:   callq  0x00007f7fcc54e6e0           ; ImmutableOopMap {[0]=Oop [16]=Oop }
                                                            ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) is_finite::micro@16 (line 9)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f7fcc597a08:   nopl   0x1000200(%rax,%rax,1)       ;   {post_call_nop}
  0x00007f7fcc597a10:   movabs $0x7f7fdfad4588,%rdi         ;   {external_word}
  0x00007f7fcc597a1a:   and    $0xfffffffffffffff0,%rsp
  0x00007f7fcc597a1e:   callq  0x00007f7fdf008a7c           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f7fcc597a23:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@5 (line 8)
 ;; B14: #	out( N1 ) <- in( B6 B3 B4 B5 )  Freq: 4.03589e-06
  0x00007f7fcc597a24:   mov    %rsi,%rbp
  0x00007f7fcc597a27:   mov    %rdx,(%rsp)
  0x00007f7fcc597a2b:   mov    %r10d,0x8(%rsp)
  0x00007f7fcc597a30:   mov    $0xffffff76,%esi
  0x00007f7fcc597a35:   nop
  0x00007f7fcc597a36:   nop
  0x00007f7fcc597a37:   callq  0x00007f7fcc54e6e0           ; ImmutableOopMap {rbp=Oop [0]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) is_finite::micro@5 (line 8)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f7fcc597a3c:   nopl   0x2000234(%rax,%rax,1)       ;   {post_call_nop}
  0x00007f7fcc597a44:   movabs $0x7f7fdfad4588,%rdi         ;   {external_word}
  0x00007f7fcc597a4e:   and    $0xfffffffffffffff0,%rsp
  0x00007f7fcc597a52:   callq  0x00007f7fdf008a7c           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f7fcc597a57:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@5 (line 8)
 ;; B15: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
  0x00007f7fcc597a58:   mov    $0xfffffff6,%esi
  0x00007f7fcc597a5d:   nop
  0x00007f7fcc597a5e:   nop
  0x00007f7fcc597a5f:   callq  0x00007f7fcc54e6e0           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@4 (line 8)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f7fcc597a64:   nopl   0x300025c(%rax,%rax,1)       ;   {post_call_nop}
  0x00007f7fcc597a6c:   movabs $0x7f7fdfad4588,%rdi         ;   {external_word}
  0x00007f7fcc597a76:   and    $0xfffffffffffffff0,%rsp
  0x00007f7fcc597a7a:   callq  0x00007f7fdf008a7c           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f7fcc597a7f:   hlt                                 ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - is_finite::micro@4 (line 8)
  0x00007f7fcc597a80:   movabs $0x7f7fcc5979dd,%r10         ;   {internal_word}
  0x00007f7fcc597a8a:   mov    %r10,0x490(%r15)
  0x00007f7fcc597a91:   jmpq   0x00007f7fcc558360           ;   {runtime_call SafepointBlob}
  0x00007f7fcc597a96:   callq  Stub::nmethod_entry_barrier  ;   {runtime_call StubRoutines (final stubs)}
  0x00007f7fcc597a9b:   jmpq   0x00007f7fcc59793a
[Exception Handler]
  0x00007f7fcc597aa0:   jmpq   0x00007f7fcc558860           ;   {no_reloc}
[Deopt Handler Code]
  0x00007f7fcc597aa5:   callq  0x00007f7fcc597aaa
  0x00007f7fcc597aaa:   subq   $0x5,(%rsp)
  0x00007f7fcc597aaf:   jmpq   0x00007f7fcc5597a0           ;   {runtime_call DeoptimizationBlob}
  0x00007f7fcc597ab4:   hlt    
  0x00007f7fcc597ab5:   hlt    
  0x00007f7fcc597ab6:   hlt    
  0x00007f7fcc597ab7:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007f7fcc597ab8:   0x00000007ff061a40 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000007ff061a40}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007f7fcc597ac0:   0x00007f7f3e400638 {method} {0x00007f7f3e400638} 'micro' '([I[F)V' in 'is_finite'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007f7fcc59791f offset=ffffffff bits=0):
PcDesc(pc=0x00007f7fcc59793a offset=1a bits=0):
   is_finite::micro@-1 (line 8)
PcDesc(pc=0x00007f7fcc59793e offset=1e bits=0):
   is_finite::micro@4 (line 8)
PcDesc(pc=0x00007f7fcc597949 offset=29 bits=0):
   is_finite::micro@5 (line 8)
PcDesc(pc=0x00007f7fcc59794d offset=2d bits=0):
   is_finite::micro@12 (line 9)
PcDesc(pc=0x00007f7fcc59797a offset=5a bits=0):
   is_finite::micro@30 (line 8)
PcDesc(pc=0x00007f7fcc5979a0 offset=80 bits=0):
   is_finite::micro@8 (line 9)
PcDesc(pc=0x00007f7fcc5979b6 offset=96 bits=0):
   is_finite::micro@13 (line 9)
PcDesc(pc=0x00007f7fcc5979bb offset=9b bits=0):
   is_finite::micro@16 (line 9)
PcDesc(pc=0x00007f7fcc5979c4 offset=a4 bits=0):
   is_finite::micro@26 (line 9)
PcDesc(pc=0x00007f7fcc5979c7 offset=a7 bits=0):
   is_finite::micro@27 (line 8)
PcDesc(pc=0x00007f7fcc5979cc offset=ac bits=0):
   is_finite::micro@30 (line 8)
PcDesc(pc=0x00007f7fcc5979d0 offset=b0 bits=1):
   is_finite::micro@30 (line 8)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg r8 [16],int
PcDesc(pc=0x00007f7fcc5979d3 offset=b3 bits=0):
   is_finite::micro@30 (line 8)
PcDesc(pc=0x00007f7fcc5979d8 offset=b8 bits=0):
   is_finite::micro@5 (line 8)
PcDesc(pc=0x00007f7fcc597a08 offset=e8 bits=1):
   is_finite::micro@16 (line 9)  reexecute=true
   Locals
    - l0: stack[16],oop
    - l1: stack[0],oop
    - l2: stack[12]
   Expression stack
    - @0: stack[16],oop
    - @1: stack[12]
    - @2: stack[24]
PcDesc(pc=0x00007f7fcc597a24 offset=104 bits=0):
   is_finite::micro@5 (line 8)
PcDesc(pc=0x00007f7fcc597a3c offset=11c bits=1):
   is_finite::micro@5 (line 8)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: 0
   Expression stack
    - @0: 0
    - @1: stack[8]
PcDesc(pc=0x00007f7fcc597a58 offset=138 bits=0):
   is_finite::micro@5 (line 8)
PcDesc(pc=0x00007f7fcc597a64 offset=144 bits=0):
   is_finite::micro@4 (line 8)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: empty
    - @1: nullptr
PcDesc(pc=0x00007f7fcc597a80 offset=160 bits=0):
   is_finite::micro@4 (line 8)
PcDesc(pc=0x00007f7fcc597ab9 offset=199 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 4 OopMaps

ImmutableOopMap {rdx=Oop rsi=Oop } pc offsets: 176 
ImmutableOopMap {[0]=Oop [16]=Oop } pc offsets: 232 
ImmutableOopMap {rbp=Oop [0]=Oop } pc offsets: 284 
ImmutableOopMap {} pc offsets: 324 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007f7fcc59793a offset=1a):
   is_finite::micro@-1 (line 8)
ScopeDesc(pc=0x00007f7fcc59793e offset=1e):
   is_finite::micro@4 (line 8)
ScopeDesc(pc=0x00007f7fcc597949 offset=29):
   is_finite::micro@5 (line 8)
ScopeDesc(pc=0x00007f7fcc59794d offset=2d):
   is_finite::micro@12 (line 9)
ScopeDesc(pc=0x00007f7fcc59797a offset=5a):
   is_finite::micro@30 (line 8)
ScopeDesc(pc=0x00007f7fcc5979a0 offset=80):
   is_finite::micro@8 (line 9)
ScopeDesc(pc=0x00007f7fcc5979b6 offset=96):
   is_finite::micro@13 (line 9)
ScopeDesc(pc=0x00007f7fcc5979bb offset=9b):
   is_finite::micro@16 (line 9)
ScopeDesc(pc=0x00007f7fcc5979c4 offset=a4):
   is_finite::micro@26 (line 9)
ScopeDesc(pc=0x00007f7fcc5979c7 offset=a7):
   is_finite::micro@27 (line 8)
ScopeDesc(pc=0x00007f7fcc5979cc offset=ac):
   is_finite::micro@30 (line 8)
ScopeDesc(pc=0x00007f7fcc5979d0 offset=b0):
   is_finite::micro@30 (line 8)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg r8 [16],int
ScopeDesc(pc=0x00007f7fcc5979d3 offset=b3):
   is_finite::micro@30 (line 8)
ScopeDesc(pc=0x00007f7fcc5979d8 offset=b8):
   is_finite::micro@5 (line 8)
ScopeDesc(pc=0x00007f7fcc597a08 offset=e8):
   is_finite::micro@16 (line 9)  reexecute=true
   Locals
    - l0: stack[16],oop
    - l1: stack[0],oop
    - l2: stack[12]
   Expression stack
    - @0: stack[16],oop
    - @1: stack[12]
    - @2: stack[24]
ScopeDesc(pc=0x00007f7fcc597a24 offset=104):
   is_finite::micro@5 (line 8)
ScopeDesc(pc=0x00007f7fcc597a3c offset=11c):
   is_finite::micro@5 (line 8)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: 0
   Expression stack
    - @0: 0
    - @1: stack[8]
ScopeDesc(pc=0x00007f7fcc597a58 offset=138):
   is_finite::micro@5 (line 8)
ScopeDesc(pc=0x00007f7fcc597a64 offset=144):
   is_finite::micro@4 (line 8)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: empty
    - @1: nullptr
ScopeDesc(pc=0x00007f7fcc597a80 offset=160):
   is_finite::micro@4 (line 8)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007f7fcc5978f0: 50b0
relocInfo@0x00007f7fcc5978f0 [type=10(poll) addr=0x00007f7fcc5979d0 offset=176]
         @0x00007f7fcc5978f2: 580d
relocInfo@0x00007f7fcc5978f2 [type=11(poll_return) addr=0x00007f7fcc5979dd offset=13]
         @0x00007f7fcc5978f4: 3126
relocInfo@0x00007f7fcc5978f4 [type=6(runtime_call) addr=0x00007f7fcc597a03 offset=38 format=1] | [destination=0x00007f7fcc54e6e0]
         @0x00007f7fcc5978f6: 8005
relocInfo@0x00007f7fcc5978f6 [type=16(post_call_nop) addr=0x00007f7fcc597a08 offset=5]
         @0x00007f7fcc5978f8: 781e3808
relocInfo@0x00007f7fcc5978fa [type=7(external_word) addr=0x00007f7fcc597a10 offset=8 data=30] | [target=0x00007f7fdfad4588]
         @0x00007f7fcc5978fc: 310e
relocInfo@0x00007f7fcc5978fc [type=6(runtime_call) addr=0x00007f7fcc597a1e offset=14 format=1] | [destination=0x00007f7fdf008a7c]
         @0x00007f7fcc5978fe: 3119
relocInfo@0x00007f7fcc5978fe [type=6(runtime_call) addr=0x00007f7fcc597a37 offset=25 format=1] | [destination=0x00007f7fcc54e6e0]
         @0x00007f7fcc597900: 8005
relocInfo@0x00007f7fcc597900 [type=16(post_call_nop) addr=0x00007f7fcc597a3c offset=5]
         @0x00007f7fcc597902: 781e3808
relocInfo@0x00007f7fcc597904 [type=7(external_word) addr=0x00007f7fcc597a44 offset=8 data=30] | [target=0x00007f7fdfad4588]
         @0x00007f7fcc597906: 310e
relocInfo@0x00007f7fcc597906 [type=6(runtime_call) addr=0x00007f7fcc597a52 offset=14 format=1] | [destination=0x00007f7fdf008a7c]
         @0x00007f7fcc597908: 310d
relocInfo@0x00007f7fcc597908 [type=6(runtime_call) addr=0x00007f7fcc597a5f offset=13 format=1] | [destination=0x00007f7fcc54e6e0]
         @0x00007f7fcc59790a: 8005
relocInfo@0x00007f7fcc59790a [type=16(post_call_nop) addr=0x00007f7fcc597a64 offset=5]
         @0x00007f7fcc59790c: 781e3808
relocInfo@0x00007f7fcc59790e [type=7(external_word) addr=0x00007f7fcc597a6c offset=8 data=30] | [target=0x00007f7fdfad4588]
         @0x00007f7fcc597910: 310e
relocInfo@0x00007f7fcc597910 [type=6(runtime_call) addr=0x00007f7fcc597a7a offset=14 format=1] | [destination=0x00007f7fdf008a7c]
         @0x00007f7fcc597912: 78a34006
relocInfo@0x00007f7fcc597914 [type=8(internal_word) addr=0x00007f7fcc597a80 offset=6 data=163] | [target=0x00007f7fcc5979dd]
         @0x00007f7fcc597916: 3111
relocInfo@0x00007f7fcc597916 [type=6(runtime_call) addr=0x00007f7fcc597a91 offset=17 format=1] | [destination=0x00007f7fcc558360]
         @0x00007f7fcc597918: 3105
relocInfo@0x00007f7fcc597918 [type=6(runtime_call) addr=0x00007f7fcc597a96 offset=5 format=1] | [destination=0x00007f7fcc4b5700]
         @0x00007f7fcc59791a: 000a
relocInfo@0x00007f7fcc59791a [type=0(none) addr=0x00007f7fcc597aa0 offset=10]
         @0x00007f7fcc59791c: 3100
relocInfo@0x00007f7fcc59791c [type=6(runtime_call) addr=0x00007f7fcc597aa0 offset=0 format=1] | [destination=0x00007f7fcc558860]
         @0x00007f7fcc59791e: 310f
relocInfo@0x00007f7fcc59791e [type=6(runtime_call) addr=0x00007f7fcc597aaf offset=15 format=1] | [destination=0x00007f7fcc5597a0]
         @0x00007f7fcc597920: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type evol_method
  method  = *{method} {0x00007f7f3e400638} 'micro' '([I[F)V' in 'is_finite'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 2 entries, 20 bytes):
{
   < 0x00007f7fcc59793a, 0x00007f7fcc597a58 > < 0x00007f7fcc597949, 0x00007f7fcc597a24 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 nullptr-oop
#1: 0x00000007ff061a40 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000007ff061a40}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 nullptr-oop
#1: 0x00007f7f3e400638 {method} {0x00007f7f3e400638} 'micro' '([I[F)V' in 'is_finite'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[time] 729ms [res][9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
------------------------------------------------------------------------
static is_finite::micro([I[F)V
  interpreter_invocation_count:          20
  invocation_counter:                    20
  backedge_counter:                   20480
  decompile_count:                        0
  mdo size: 552 bytes

   0 iconst_0
   1 istore_2
   2 iload_2
   3 fast_aload_0
   4 arraylength
   5 if_icmpge 33
  0    bci: 5    BranchData         taken(15) displacement(128)
                                    not taken(15360)
   8 fast_aload_0
   9 iload_2
  10 aload_1
  11 iload_2
  12 faload
  13 invokestatic 7 <java/lang/Float.isFinite(F)Z> 
  32   bci: 13   CounterData        count(15360)
  16 ifeq 24
  48   bci: 16   BranchData         taken(0) displacement(56)
                                    not taken(15360)
  19 bipush 9
  21 goto 26
  80   bci: 21   JumpData           taken(15360) displacement(24)
  24 bipush 8
  26 iastore
  27 iinc #2 1
  30 goto 2
  104  bci: 30   JumpData           taken(15360) displacement(-104)
  33 return
------------------------------------------------------------------------
Total MDO size: 552 bytes
