CompileCommand: print slp_align_micro.micro bool print = true
TraceNewVectors [AutoVectorization]:  1187  LoadVector  === 666 1150 1115  [[ ]]  @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; mismatched #vectory<J,4>
TraceNewVectors [AutoVectorization]:  1188  LoadVector  === 666 1150 1118  [[ ]]  @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; mismatched #vectory<J,4>
TraceNewVectors [AutoVectorization]:  1189  AddVL  === _ 1187 1188  [[ ]]  #vectory<J,4>
TraceNewVectors [AutoVectorization]:  1190  StoreVector  === 1147 1150 1102 1189  [[ ]]  @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; mismatched  Memory: @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6;
TraceNewVectors [AutoVectorization]:  1191  LoadVector  === 666 1190 1023  [[ ]]  @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; mismatched #vectory<J,4>
TraceNewVectors [AutoVectorization]:  1192  LoadVector  === 666 1190 1026  [[ ]]  @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; mismatched #vectory<J,4>
TraceNewVectors [AutoVectorization]:  1193  AddVL  === _ 1191 1192  [[ ]]  #vectory<J,4>
TraceNewVectors [AutoVectorization]:  1194  StoreVector  === 1147 1190 1010 1193  [[ ]]  @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; mismatched  Memory: @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6;

============================= C2-compiled nmethod ==============================
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 96 --
#r623 rsp+92: in_preserve
#r622 rsp+88: return address
#r621 rsp+84: in_preserve
#r620 rsp+80: saved fp register
#r619 rsp+76: pad2, stack alignment
#r618 rsp+72: pad2, stack alignment
#r617 rsp+68: Fixed slot 1
#r616 rsp+64: Fixed slot 0
#r639 rsp+60: spill
#r638 rsp+56: spill
#r637 rsp+52: spill
#r636 rsp+48: spill
#r635 rsp+44: spill
#r634 rsp+40: spill
#r633 rsp+36: spill
#r632 rsp+32: spill
#r631 rsp+28: spill
#r630 rsp+24: spill
#r629 rsp+20: spill
#r628 rsp+16: spill
#r627 rsp+12: spill
#r626 rsp+ 8: spill
#r625 rsp+ 4: spill
#r624 rsp+ 0: spill
#
----------------------- MetaData before Compile_id = 194 ------------------------
{method}
 - this oop:          0x00007fbd4060c5a8
 - method holder:     'slp_align_micro'
 - constants:         0x00007fbd4060c070 constant pool [103]/operands[19] {0x00007fbd4060c070} for 'slp_align_micro' cache=0x00007fbd4060cb00
 - access:            0x9  public static 
 - flags:             0x6080  queued_for_compilation has_loops_flag has_loops_flag_init 
 - name:              'micro'
 - signature:         '([J[J[J)V'
 - max stack:         7
 - max locals:        4
 - size of params:    3
 - method size:       14
 - vtable index:      -2
 - i2i entry:         0x00007fbd942eaf00
 - adapters:          AHE@0x00007fbd902e7560: 0xbbb i2c: 0x00007fbd9434e600 c2i: 0x00007fbd9434e6e4 c2iUV: 0x00007fbd9434e6c3 c2iNCI: 0x00007fbd9434e71f
 - compiled entry     0x00007fbd9434e6e4
 - code size:         31
 - code start:        0x00007fbd4060c580
 - code end (excl):   0x00007fbd4060c59f
 - method data:       0x00007fbd4060e378
 - checked ex length: 0
 - linenumber start:  0x00007fbd4060c59f
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 194 -----------------------
#
#  void ( rawptr:BotPTR )
#
000     N503: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B36 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (176 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02a     movq    R14, [RSI + #24 (8-bit)]	# ptr
02e     movq    RBP, [RSI + #16 (8-bit)]	# ptr
032     movl    RBX, [RSI]	# int
034     movq    R13, [RSI + #8 (8-bit)]	# ptr
038     movq    RDI, RSI	# spill
03b     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
053     testq   R14, R14	# ptr
056     je     B36  P=0.001000 C=-1.000000

05c     B2: #	out( B48 B3 ) <- in( B1 )  Freq: 0.999
05c     movl    R11, [R14 + #8 (8-bit)]	# compressed klass ptr
060     cmpl    R11, narrowklass: precise [long (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
067     jne,u   B48  P=0.000001 C=-1.000000

06d     B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
06d     movq    R11, R14	# spill
070     # checkcastPP of R11

070     B4: #	out( B37 B5 ) <- in( B3 B36 )  Freq: 0.999999
070     testq   RBP, RBP	# ptr
073     je     B37  P=0.001000 C=-1.000000

079     B5: #	out( B48 B6 ) <- in( B4 )  Freq: 0.998999
079     movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
080     cmpl    R10, narrowklass: precise [long (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
087     jne,u   B48  P=0.000001 C=-1.000000

08d     B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
08d     movq    R8, RBP	# spill
090     # checkcastPP of R8

090     B7: #	out( B38 B8 ) <- in( B6 B37 )  Freq: 0.999998
090     testq   R13, R13	# ptr
093     je     B38  P=0.001000 C=-1.000000

099     B8: #	out( B48 B9 ) <- in( B7 )  Freq: 0.998998
099     movl    R9, [R13 + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
0a0     cmpl    R9, narrowklass: precise [long (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
0a7     jne,u   B48  P=0.000001 C=-1.000000

0ad     B9: #	out( B10 ) <- in( B8 )  Freq: 0.998997
0ad     # checkcastPP of R13

0ad     B10: #	out( B50 B11 ) <- in( B9 B38 )  Freq: 0.999997
0ad     movl    RCX, [R11 + #12 (8-bit)]	# range
0b1     NullCheck R11

0b1     B11: #	out( B49 B12 ) <- in( B10 )  Freq: 0.999996
0b1     movl    R14, [R8 + #12 (8-bit)]	# range
0b5     NullCheck R8

0b5     B12: #	out( B49 B13 ) <- in( B11 )  Freq: 0.999995
0b5     movl    RSI, [R13 + #12 (8-bit)]	# range
0b9     NullCheck R13

0b9     B13: #	out( B35 B14 ) <- in( B12 )  Freq: 0.999994
0b9     leal    R10, [RCX + #-8]
        nop 	# 3 bytes pad for loops and calls
0c0     cmpl    RBX, R10
0c3     jge     B35  P=0.000976 C=21525.000000

0c9     B14: #	out( B15 ) <- in( B13 )  Freq: 0.999018
0c9     movl    [rsp + #0], R10	# spill
0cd     movl    R10, R13	# ptr -> int
0d0     leal    R9, [RBX + #1]
0d4     movl    RAX, RCX	# spill
0d6     movslq  RDX, RCX	# i2l
0d9     movslq  RBP, R9	# i2l
0dc     leaq    RCX, [RDX + #-8]
0e0     movl    RDI, #-48	# int
0e5     subl    RDI, R10	# int
0e8     shrl    RDI, #3
0eb     xorl    R10, R10	# long
0ee     testl   R9, R9
0f1     cmovql RBP, R10	# signed, long
0f5     movl    R10, RBP	# l2i
0f8     cmpl    R10, [RSP + #0 (32-bit)]
0fc     movl    R9, [rsp + #0]	# spill
100     cmovlgt R10, R9	# min
104     subl    RDI, R10	# int
107     movslq  R9, R10	# i2l
10a     bzhiq R10, RDI, #3 	# using R10 as TEMP, int &  immI_Pow2M1 -> long
115     addq    R9, R10	# long
118     cmpq    R9, RCX
11b     movq    R10, RCX	# spill
11e     cmovql R10, R9	# signed, long
122     movl    R10, R10	# l2i

125     B15: #	out( B39 B16 ) <- in( B14 B18 ) Loop( B15-B18 inner pre of N437 multiversion_fast) Freq: 1.99803
125     leal    R9, [RBX + #7]
129     cmpl    RBX, R14	# unsigned
12c     jae,u   B39  P=0.000001 C=-1.000000

132     B16: #	out( B40 B17 ) <- in( B15 )  Freq: 1.99803
132     movq    RBP, [R8 + #16 + RBX << #3]	# long
137     cmpl    RBX, RSI	# unsigned
139     jae,u   B40  P=0.000001 C=-1.000000

13f     B17: #	out( B41 B18 ) <- in( B16 )  Freq: 1.99803
13f     addq    RBP, [R13 + #16 + RBX << #3]	# long
144     cmpl    R9, RAX	# unsigned
147     jae,u   B41  P=0.000001 C=-1.000000

14d     B18: #	out( B15 B19 ) <- in( B17 )  Freq: 1.99802
14d     movslq  R9, RBX	# i2l
150     movq    [R11 + #72 + R9 << #3], RBP	# long
155     incl    RBX	# int
        nop 	# 9 bytes pad for loops and calls
160     cmpl    RBX, R10
163     jl,s   B15	# loop end  P=0.500000 C=21525.000000

165     B19: #	out( B30 B20 ) <- in( B18 )  Freq: 0.999012
165     movslq  R10, RSI	# i2l
168     leaq    R9, [RDX + #-7]
16c     movslq  RBP, R14	# i2l
16f     cmpq    RCX, RBP
172     cmovql RBP, RCX	# signed, long
176     cmpq    R10, RBP
179     cmovql RBP, R10	# signed, long
17d     cmpq    R9, RBP
180     cmovql RBP, R9	# signed, long
184     movl    R9, RBP	# l2i
187     leal    RDI, [R9 + #-7]
18b     cmpl    RBX, RDI
18d     jge     B30  P=0.000001 C=-1.000000

193     B20: #	out( B42 B21 ) <- in( B19 )  Freq: 0.999011
193     leal    R10, [R9 + #-1]
        nop 	# 9 bytes pad for loops and calls
1a0     cmpl    R10, R14	# unsigned
1a3     jae,u   B42  P=0.000001 C=-1.000000

1a9     B21: #	out( B43 B22 ) <- in( B20 )  Freq: 0.99901
1a9     cmpl    RBX, R14	# unsigned
1ac     jae,u   B43  P=0.000001 C=-1.000000

1b2     B22: #	out( B44 B23 ) <- in( B21 )  Freq: 0.999009
1b2     cmpl    R10, RSI	# unsigned
1b5     jae,u   B44  P=0.000001 C=-1.000000

1bb     B23: #	out( B45 B24 ) <- in( B22 )  Freq: 0.999008
        nop 	# 5 bytes pad for loops and calls
1c0     cmpl    RBX, RSI	# unsigned
1c2     jae,u   B45  P=0.000001 C=-1.000000

1c8     B24: #	out( B46 B25 ) <- in( B23 )  Freq: 0.999007
1c8     addq    RBP, #6	# long
1cc     cmpq    RBP, RDX	# unsigned
1cf     jae,u   B46  P=0.000001 C=-1.000000

1d5     B25: #	out( B47 B26 ) <- in( B24 )  Freq: 0.999006
1d5     movslq  R10, RBX	# i2l
1d8     addq    R10, #7	# long
        nop 	# 4 bytes pad for loops and calls
1e0     cmpq    R10, RDX	# unsigned
1e3     jae,u   B47  P=0.000001 C=-1.000000

1e9     B26: #	out( B27 ) <- in( B25 )  Freq: 0.999005
1e9     movl    R10, #8000	# int
1ef     # TLS is in R15
1ef     xorl    RDX, RDX	# int

1f1     B27: #	out( B28 ) <- in( B26 B29 ) Loop( B27-B29 ) Freq: 1023.98
1f1     movl    RCX, R9	# spill
1f4     subl    RCX, RBX	# int
1f6     addl    RCX, #-7	# int
1f9     cmpl    RDI, RBX
1fb     cmovll RCX, RDX	# signed, int
1fe     cmpl    RCX, #8000	# unsigned
204     cmovla RCX, R10	# unsigned, int
208     addl    RCX, RBX	# int
        nop 	# 6 bytes pad for loops and calls

210     B28: #	out( B28 B29 ) <- in( B27 B28 ) Loop( B28-B28 inner main of N225 strip mined multiversion_fast) Freq: 1.04958e+06
210     load_vector XMM0,[R8 + #16 + RBX << #3]
217     vpaddq  XMM0,XMM0,[R13 + #16 + RBX << #3]	! add packedL
21e     movslq  RBP, RBX	# i2l
221     store_vector [R11 + #72 + RBP << #3],XMM0
	
228     load_vector XMM0,[R8 + #48 + RBP << #3]
22f     vpaddq  XMM0,XMM0,[R13 + #48 + RBP << #3]	! add packedL
236     store_vector [R11 + #104 + RBP << #3],XMM0
	
23d     addl    RBX, #8	# int
240     cmpl    RBX, RCX
242     jl,s   B28	# loop end  P=0.999024 C=21525.000000

244     B29: #	out( B27 B30 ) <- in( B28 )  Freq: 1023.98
244     movq    RCX, [R15 + #48 (8-bit)]	# ptr
248     testl   rax, [RCX]	# Safepoint: poll for GC        # slp_align_micro::micro @ bci:27 (line 11) L[0]=R11 L[1]=R8 L[2]=R13 L[3]=RBX
        # OopMap {r11=Oop r8=Oop r13=Oop off=584/0x248}
24a     cmpl    RBX, RDI
24c     jl,s   B27  P=0.999024 C=21525.000000

24e     B30: #	out( B35 B31 ) <- in( B19 B29 )  Freq: 0.999006
24e     cmpl    RBX, [RSP + #0 (32-bit)]
251     jge     B35  P=0.500000 C=-1.000000
        nop 	# 1 bytes pad for loops and calls

258     B31: #	out( B39 B32 ) <- in( B30 B34 ) Loop( B31-B34 inner post of N437 multiversion_fast) Freq: 0.999003
258     leal    R9, [RBX + #7]
        nop 	# 4 bytes pad for loops and calls
260     cmpl    RBX, R14	# unsigned
263     jae,u   B39  P=0.000001 C=-1.000000

269     B32: #	out( B40 B33 ) <- in( B31 )  Freq: 0.999002
269     movq    RBP, [R8 + #16 + RBX << #3]	# long
26e     cmpl    RBX, RSI	# unsigned
270     jae,u   B40  P=0.000001 C=-1.000000

276     B33: #	out( B41 B34 ) <- in( B32 )  Freq: 0.999001
276     addq    RBP, [R13 + #16 + RBX << #3]	# long
        nop 	# 5 bytes pad for loops and calls
280     cmpl    R9, RAX	# unsigned
283     jae,u   B41  P=0.000001 C=-1.000000

289     B34: #	out( B31 B35 ) <- in( B33 )  Freq: 0.999
289     movslq  R10, RBX	# i2l
28c     movq    [R11 + #72 + R10 << #3], RBP	# long
291     incl    RBX	# int
293     cmpl    RBX, [RSP + #0 (32-bit)]
296     jl,s   B31	# loop end  P=0.500000 C=21525.000000

298     B35: #	out( N503 ) <- in( B13 B34 B30 )  Freq: 0.999979
298     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

2aa     ret

2ab     B36: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
2ab     xorl    R11, R11	# ptr
2ae     jmp     B4

2b3     B37: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
2b3     xorl    R8, R8	# ptr
2b6     jmp     B7

2bb     B38: #	out( B10 ) <- in( B7 )  Freq: 0.000999985
2bb     xorl    R13, R13	# ptr
        nop 	# 2 bytes pad for loops and calls
2c0     jmp     B10

2c5     B39: #	out( N503 ) <- in( B31 B15 )  Freq: 3.03683e-06
2c5     movl    RSI, #-28	# int
2ca     movq    [rsp + #8], R13	# spill
2cf     movq    [rsp + #24], R11	# spill
2d4     movl    [rsp + #20], R9	# spill
2d9     movq    [rsp + #32], R8	# spill
2de     movl    [rsp + #40], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
2e4     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # slp_align_micro::micro @ bci:18 (line 12) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #8 L[3]=rsp + #40 STK[0]=rsp + #24 STK[1]=rsp + #20 STK[2]=rsp + #32 STK[3]=rsp + #40
        # OopMap {[8]=Oop [24]=Oop [32]=Oop off=748/0x2ec}
2f4     stop	# ShouldNotReachHere

308     B40: #	out( N503 ) <- in( B32 B16 )  Freq: 3.03683e-06
308     movl    RSI, #-28	# int
30d     movq    [rsp + #8], R8	# spill
312     movq    [rsp + #32], R11	# spill
317     movl    [rsp + #28], R9	# spill
31c     movq    [rsp + #40], R13	# spill
321     movl    [rsp + #48], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
328     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # slp_align_micro::micro @ bci:21 (line 12) L[0]=rsp + #32 L[1]=rsp + #8 L[2]=rsp + #40 L[3]=rsp + #48 STK[0]=rsp + #32 STK[1]=rsp + #28 STK[2]=RBP STK[3]=_ STK[4]=rsp + #40 STK[5]=rsp + #48
        # OopMap {[8]=Oop [32]=Oop [40]=Oop off=816/0x330}
338     stop	# ShouldNotReachHere

34c     B41: #	out( N503 ) <- in( B33 B17 )  Freq: 3.03683e-06
34c     movl    RSI, #-28	# int
351     movq    [rsp + #8], R8	# spill
356     movq    [rsp + #16], R13	# spill
35b     movl    [rsp + #24], RBX	# spill
35f     movq    [rsp + #32], R11	# spill
364     movl    [rsp + #28], R9	# spill
        nop 	# 3 bytes pad for loops and calls
36c     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # slp_align_micro::micro @ bci:23 (line 12) L[0]=rsp + #32 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #24 STK[0]=rsp + #32 STK[1]=rsp + #28 STK[2]=RBP STK[3]=_
        # OopMap {[8]=Oop [16]=Oop [32]=Oop off=884/0x374}
37c     stop	# ShouldNotReachHere

390     B42: #	out( N503 ) <- in( B20 )  Freq: 1.01228e-06
390     stop	# ShouldNotReachHere

3a4     B43: #	out( N503 ) <- in( B21 )  Freq: 1.01228e-06
3a4     stop	# ShouldNotReachHere

3b8     B44: #	out( N503 ) <- in( B22 )  Freq: 1.01228e-06
3b8     stop	# ShouldNotReachHere

3cc     B45: #	out( N503 ) <- in( B23 )  Freq: 1.01227e-06
3cc     stop	# ShouldNotReachHere

3e0     B46: #	out( N503 ) <- in( B24 )  Freq: 1.01227e-06
3e0     stop	# ShouldNotReachHere

3f4     B47: #	out( N503 ) <- in( B25 )  Freq: 1.01227e-06
3f4     stop	# ShouldNotReachHere

408     B48: #	out( N503 ) <- in( B2 B5 B8 )  Freq: 2.997e-06
408     movl    RSI, #-123	# int
40d     movq    [rsp + #0], R13	# spill
411     movl    [rsp + #8], RBX	# spill
415     movq    [rsp + #16], R14	# spill
        nop 	# 2 bytes pad for loops and calls
41c     call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret' debug_id='0')
        # slp_align_micro::micro @ bci:2 (line 11) L[0]=rsp + #16 L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #8
        # OopMap {rbp=Oop [0]=Oop [16]=Oop off=1060/0x424}
42c     stop	# ShouldNotReachHere

440     B49: #	out( N503 ) <- in( B12 B11 )  Freq: 2.02655e-06
440     movl    RSI, #-66	# int
445     movq    RBP, R11	# spill
448     movq    [rsp + #0], R8	# spill
44c     movq    [rsp + #8], R13	# spill
451     movl    [rsp + #16], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
458     call,static  wrapper for: uncommon_trap(reason='profile_predicate' action='maybe_recompile' debug_id='0')
        # slp_align_micro::micro @ bci:2 (line 11) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=1120/0x460}
468     stop	# ShouldNotReachHere

47c     B50: #	out( N503 ) <- in( B10 )  Freq: 1.01328e-06
47c     movl    RSI, #-146	# int
481     movq    RBP, R11	# spill
484     movq    [rsp + #0], R8	# spill
488     movq    [rsp + #8], R13	# spill
48d     movl    [rsp + #16], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
494     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # slp_align_micro::micro @ bci:2 (line 11) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=1180/0x49c}
4a4     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2) 866  194 %           slp_align_micro::micro @ 2 (31 bytes)
 total in heap  [0x00007fbd9447a288,0x00007fbd9447a908] = 1664
 relocation     [0x00007fbd9447a368,0x00007fbd9447a3f0] = 136
 main code      [0x00007fbd9447a400,0x00007fbd9447a8d8] = 1240
 stub code      [0x00007fbd9447a8d8,0x00007fbd9447a8f0] = 24
 oops           [0x00007fbd9447a8f0,0x00007fbd9447a8f8] = 8
 metadata       [0x00007fbd9447a8f8,0x00007fbd9447a908] = 16
 immutable data [0x00007fbd204b5990,0x00007fbd204b5c98] = 776
 dependencies   [0x00007fbd204b5990,0x00007fbd204b5998] = 8
 nul chk table  [0x00007fbd204b5998,0x00007fbd204b59b8] = 32
 scopes pcs     [0x00007fbd204b59b8,0x00007fbd204b5bc8] = 528
 scopes data    [0x00007fbd204b5bc8,0x00007fbd204b5c98] = 208

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007fbd4060c5a8} 'micro' '([J[J[J)V' in 'slp_align_micro'
 ;; N503: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fbd9447a400:   callq  0x00007fbd98b6d340           ;   {runtime_call os::breakpoint()}
  0x00007fbd9447a405:   nop
  0x00007fbd9447a406:   nop
  0x00007fbd9447a407:   nop
  0x00007fbd9447a408:   nop
  0x00007fbd9447a409:   nop
  0x00007fbd9447a40a:   nop
  0x00007fbd9447a40b:   nop
  0x00007fbd9447a40c:   nop
  0x00007fbd9447a40d:   nop
  0x00007fbd9447a40e:   nop
  0x00007fbd9447a40f:   nop
 ;; B1: #	out( B36 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fbd9447a410:   mov    %eax,-0x18000(%rsp)
  0x00007fbd9447a417:   push   %rbp
  0x00007fbd9447a418:   sub    $0x50,%rsp
  0x00007fbd9447a41c:   cmpl   $0x0,0x20(%r15)
  0x00007fbd9447a424:   jne    0x00007fbd9447a8ce
  0x00007fbd9447a42a:   mov    0x18(%rsi),%r14
  0x00007fbd9447a42e:   mov    0x10(%rsi),%rbp
  0x00007fbd9447a432:   mov    (%rsi),%ebx
  0x00007fbd9447a434:   mov    0x8(%rsi),%r13
  0x00007fbd9447a438:   mov    %rsi,%rdi
  0x00007fbd9447a43b:   vzeroupper 
  0x00007fbd9447a43e:   movabs $0x7fbd98cf58d0,%r10
  0x00007fbd9447a448:   callq  *%r10
  0x00007fbd9447a44b:   nopl   0x0(%rax,%rax,1)             ;   {post_call_nop}
  0x00007fbd9447a453:   test   %r14,%r14
  0x00007fbd9447a456:   je     0x00007fbd9447a6ab
 ;; B2: #	out( B48 B3 ) <- in( B1 )  Freq: 0.999
  0x00007fbd9447a45c:   mov    0x8(%r14),%r11d
  0x00007fbd9447a460:   cmp    $0x56041040,%r11d            ;   {metadata({type array long})}
  0x00007fbd9447a467:   jne    0x00007fbd9447a808
 ;; B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
  0x00007fbd9447a46d:   mov    %r14,%r11
 ;; B4: #	out( B37 B5 ) <- in( B3 B36 )  Freq: 0.999999
  0x00007fbd9447a470:   test   %rbp,%rbp
  0x00007fbd9447a473:   je     0x00007fbd9447a6b3
 ;; B5: #	out( B48 B6 ) <- in( B4 )  Freq: 0.998999
  0x00007fbd9447a479:   mov    0x8(%rbp),%r10d
  0x00007fbd9447a47d:   nop
  0x00007fbd9447a47e:   nop
  0x00007fbd9447a47f:   nop
  0x00007fbd9447a480:   cmp    $0x56041040,%r10d            ;   {metadata({type array long})}
  0x00007fbd9447a487:   jne    0x00007fbd9447a808
 ;; B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
  0x00007fbd9447a48d:   mov    %rbp,%r8
 ;; B7: #	out( B38 B8 ) <- in( B6 B37 )  Freq: 0.999998
  0x00007fbd9447a490:   test   %r13,%r13
  0x00007fbd9447a493:   je     0x00007fbd9447a6bb
 ;; B8: #	out( B48 B9 ) <- in( B7 )  Freq: 0.998998
  0x00007fbd9447a499:   mov    0x8(%r13),%r9d
  0x00007fbd9447a49d:   nop
  0x00007fbd9447a49e:   nop
  0x00007fbd9447a49f:   nop
  0x00007fbd9447a4a0:   cmp    $0x56041040,%r9d             ;   {metadata({type array long})}
  0x00007fbd9447a4a7:   jne    0x00007fbd9447a808           ;*iload_3 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@2 (line 11)
 ;; B9: #	out( B10 ) <- in( B8 )  Freq: 0.998997
 ;; B10: #	out( B50 B11 ) <- in( B9 B38 )  Freq: 0.999997
  0x00007fbd9447a4ad:   mov    0xc(%r11),%ecx               ; implicit exception: dispatches to 0x00007fbd9447a87c
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@4 (line 11)
 ;; B11: #	out( B49 B12 ) <- in( B10 )  Freq: 0.999996
  0x00007fbd9447a4b1:   mov    0xc(%r8),%r14d               ; implicit exception: dispatches to 0x00007fbd9447a840
                                                            ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@18 (line 12)
 ;; B12: #	out( B49 B13 ) <- in( B11 )  Freq: 0.999995
  0x00007fbd9447a4b5:   mov    0xc(%r13),%esi               ; implicit exception: dispatches to 0x00007fbd9447a840
                                                            ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@21 (line 12)
 ;; B13: #	out( B35 B14 ) <- in( B12 )  Freq: 0.999994
  0x00007fbd9447a4b9:   lea    -0x8(%rcx),%r10d
  0x00007fbd9447a4bd:   nop
  0x00007fbd9447a4be:   nop
  0x00007fbd9447a4bf:   nop
  0x00007fbd9447a4c0:   cmp    %r10d,%ebx
  0x00007fbd9447a4c3:   jge    0x00007fbd9447a698           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@8 (line 11)
 ;; B14: #	out( B15 ) <- in( B13 )  Freq: 0.999018
  0x00007fbd9447a4c9:   mov    %r10d,(%rsp)
  0x00007fbd9447a4cd:   mov    %r13d,%r10d
  0x00007fbd9447a4d0:   lea    0x1(%rbx),%r9d
  0x00007fbd9447a4d4:   mov    %ecx,%eax
  0x00007fbd9447a4d6:   movslq %ecx,%rdx
  0x00007fbd9447a4d9:   movslq %r9d,%rbp
  0x00007fbd9447a4dc:   lea    -0x8(%rdx),%rcx
  0x00007fbd9447a4e0:   mov    $0xffffffd0,%edi
  0x00007fbd9447a4e5:   sub    %r10d,%edi
  0x00007fbd9447a4e8:   shr    $0x3,%edi
  0x00007fbd9447a4eb:   xor    %r10d,%r10d
  0x00007fbd9447a4ee:   test   %r9d,%r9d
  0x00007fbd9447a4f1:   cmovl  %r10,%rbp
  0x00007fbd9447a4f5:   mov    %ebp,%r10d
  0x00007fbd9447a4f8:   cmp    (%rsp),%r10d
  0x00007fbd9447a4fc:   mov    (%rsp),%r9d
  0x00007fbd9447a500:   cmovg  %r9d,%r10d
  0x00007fbd9447a504:   sub    %r10d,%edi
  0x00007fbd9447a507:   movslq %r10d,%r9
  0x00007fbd9447a50a:   mov    $0x2,%r10d
  0x00007fbd9447a510:   bzhi   %r10,%rdi,%r10
  0x00007fbd9447a515:   add    %r10,%r9
  0x00007fbd9447a518:   cmp    %rcx,%r9
  0x00007fbd9447a51b:   mov    %rcx,%r10
  0x00007fbd9447a51e:   cmovl  %r9,%r10
  0x00007fbd9447a522:   mov    %r10d,%r10d                  ;*lastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@23 (line 12)
 ;; B15: #	out( B39 B16 ) <- in( B14 B18 ) Loop( B15-B18 inner pre of N437 multiversion_fast) Freq: 1.99803
  0x00007fbd9447a525:   lea    0x7(%rbx),%r9d
  0x00007fbd9447a529:   cmp    %r14d,%ebx
  0x00007fbd9447a52c:   jae    0x00007fbd9447a6c5
 ;; B16: #	out( B40 B17 ) <- in( B15 )  Freq: 1.99803
  0x00007fbd9447a532:   mov    0x10(%r8,%rbx,8),%rbp        ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@18 (line 12)
  0x00007fbd9447a537:   cmp    %esi,%ebx
  0x00007fbd9447a539:   jae    0x00007fbd9447a708
 ;; B17: #	out( B41 B18 ) <- in( B16 )  Freq: 1.99803
  0x00007fbd9447a53f:   add    0x10(%r13,%rbx,8),%rbp       ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@22 (line 12)
  0x00007fbd9447a544:   cmp    %eax,%r9d
  0x00007fbd9447a547:   jae    0x00007fbd9447a74c
 ;; B18: #	out( B15 B19 ) <- in( B17 )  Freq: 1.99802
  0x00007fbd9447a54d:   movslq %ebx,%r9
  0x00007fbd9447a550:   mov    %rbp,0x48(%r11,%r9,8)        ;*lastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@23 (line 12)
  0x00007fbd9447a555:   inc    %ebx                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@24 (line 11)
  0x00007fbd9447a557:   nop
  0x00007fbd9447a558:   nop
  0x00007fbd9447a559:   nop
  0x00007fbd9447a55a:   nop
  0x00007fbd9447a55b:   nop
  0x00007fbd9447a55c:   nop
  0x00007fbd9447a55d:   nop
  0x00007fbd9447a55e:   nop
  0x00007fbd9447a55f:   nop
  0x00007fbd9447a560:   cmp    %r10d,%ebx
  0x00007fbd9447a563:   jl     0x00007fbd9447a525           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@8 (line 11)
 ;; B19: #	out( B30 B20 ) <- in( B18 )  Freq: 0.999012
  0x00007fbd9447a565:   movslq %esi,%r10
  0x00007fbd9447a568:   lea    -0x7(%rdx),%r9
  0x00007fbd9447a56c:   movslq %r14d,%rbp
  0x00007fbd9447a56f:   cmp    %rbp,%rcx
  0x00007fbd9447a572:   cmovl  %rcx,%rbp
  0x00007fbd9447a576:   cmp    %rbp,%r10
  0x00007fbd9447a579:   cmovl  %r10,%rbp
  0x00007fbd9447a57d:   cmp    %rbp,%r9
  0x00007fbd9447a580:   cmovl  %r9,%rbp
  0x00007fbd9447a584:   mov    %ebp,%r9d
  0x00007fbd9447a587:   lea    -0x7(%r9),%edi
  0x00007fbd9447a58b:   cmp    %edi,%ebx
  0x00007fbd9447a58d:   jge    0x00007fbd9447a64e
 ;; B20: #	out( B42 B21 ) <- in( B19 )  Freq: 0.999011
  0x00007fbd9447a593:   lea    -0x1(%r9),%r10d
  0x00007fbd9447a597:   nop
  0x00007fbd9447a598:   nop
  0x00007fbd9447a599:   nop
  0x00007fbd9447a59a:   nop
  0x00007fbd9447a59b:   nop
  0x00007fbd9447a59c:   nop
  0x00007fbd9447a59d:   nop
  0x00007fbd9447a59e:   nop
  0x00007fbd9447a59f:   nop                                 ;   {other}
  0x00007fbd9447a5a0:   cmp    %r14d,%r10d
  0x00007fbd9447a5a3:   jae    0x00007fbd9447a790
 ;; B21: #	out( B43 B22 ) <- in( B20 )  Freq: 0.99901
  0x00007fbd9447a5a9:   cmp    %r14d,%ebx
  0x00007fbd9447a5ac:   jae    0x00007fbd9447a7a4
 ;; B22: #	out( B44 B23 ) <- in( B21 )  Freq: 0.999009
  0x00007fbd9447a5b2:   cmp    %esi,%r10d
  0x00007fbd9447a5b5:   jae    0x00007fbd9447a7b8
 ;; B23: #	out( B45 B24 ) <- in( B22 )  Freq: 0.999008
  0x00007fbd9447a5bb:   nop
  0x00007fbd9447a5bc:   nop
  0x00007fbd9447a5bd:   nop
  0x00007fbd9447a5be:   nop
  0x00007fbd9447a5bf:   nop
  0x00007fbd9447a5c0:   cmp    %esi,%ebx
  0x00007fbd9447a5c2:   jae    0x00007fbd9447a7cc
 ;; B24: #	out( B46 B25 ) <- in( B23 )  Freq: 0.999007
  0x00007fbd9447a5c8:   add    $0x6,%rbp
  0x00007fbd9447a5cc:   cmp    %rdx,%rbp
  0x00007fbd9447a5cf:   jae    0x00007fbd9447a7e0
 ;; B25: #	out( B47 B26 ) <- in( B24 )  Freq: 0.999006
  0x00007fbd9447a5d5:   movslq %ebx,%r10
  0x00007fbd9447a5d8:   add    $0x7,%r10
  0x00007fbd9447a5dc:   nop
  0x00007fbd9447a5dd:   nop
  0x00007fbd9447a5de:   nop
  0x00007fbd9447a5df:   nop
  0x00007fbd9447a5e0:   cmp    %rdx,%r10
  0x00007fbd9447a5e3:   jae    0x00007fbd9447a7f4
 ;; B26: #	out( B27 ) <- in( B25 )  Freq: 0.999005
  0x00007fbd9447a5e9:   mov    $0x1f40,%r10d                ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@27 (line 11)
  0x00007fbd9447a5ef:   xor    %edx,%edx
 ;; B27: #	out( B28 ) <- in( B26 B29 ) Loop( B27-B29 ) Freq: 1023.98
  0x00007fbd9447a5f1:   mov    %r9d,%ecx
  0x00007fbd9447a5f4:   sub    %ebx,%ecx
  0x00007fbd9447a5f6:   add    $0xfffffff9,%ecx
  0x00007fbd9447a5f9:   cmp    %ebx,%edi
  0x00007fbd9447a5fb:   cmovl  %edx,%ecx
  0x00007fbd9447a5fe:   cmp    $0x1f40,%ecx
  0x00007fbd9447a604:   cmova  %r10d,%ecx
  0x00007fbd9447a608:   add    %ebx,%ecx
  0x00007fbd9447a60a:   nop
  0x00007fbd9447a60b:   nop
  0x00007fbd9447a60c:   nop
  0x00007fbd9447a60d:   nop
  0x00007fbd9447a60e:   nop
  0x00007fbd9447a60f:   nop
 ;; B28: #	out( B28 B29 ) <- in( B27 B28 ) Loop( B28-B28 inner main of N225 strip mined multiversion_fast) Freq: 1.04958e+06
  0x00007fbd9447a610:   vmovdqu 0x10(%r8,%rbx,8),%ymm0
  0x00007fbd9447a617:   vpaddq 0x10(%r13,%rbx,8),%ymm0,%ymm0
  0x00007fbd9447a61e:   movslq %ebx,%rbp
  0x00007fbd9447a621:   vmovdqu %ymm0,0x48(%r11,%rbp,8)
  0x00007fbd9447a628:   vmovdqu 0x30(%r8,%rbp,8),%ymm0
  0x00007fbd9447a62f:   vpaddq 0x30(%r13,%rbp,8),%ymm0,%ymm0
  0x00007fbd9447a636:   vmovdqu %ymm0,0x68(%r11,%rbp,8)     ;*lastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@23 (line 12)
  0x00007fbd9447a63d:   add    $0x8,%ebx                    ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@15 (line 12)
  0x00007fbd9447a640:   cmp    %ecx,%ebx
  0x00007fbd9447a642:   jl     0x00007fbd9447a610           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@27 (line 11)
 ;; B29: #	out( B27 B30 ) <- in( B28 )  Freq: 1023.98
  0x00007fbd9447a644:   mov    0x30(%r15),%rcx              ; ImmutableOopMap {r11=Oop r8=Oop r13=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) slp_align_micro::micro@27 (line 11)
  0x00007fbd9447a648:   test   %eax,(%rcx)                  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@27 (line 11)
                                                            ;   {poll}
  0x00007fbd9447a64a:   cmp    %edi,%ebx
  0x00007fbd9447a64c:   jl     0x00007fbd9447a5f1
 ;; B30: #	out( B35 B31 ) <- in( B19 B29 )  Freq: 0.999006
  0x00007fbd9447a64e:   cmp    (%rsp),%ebx
  0x00007fbd9447a651:   jge    0x00007fbd9447a698
  0x00007fbd9447a657:   nop                                 ;*lastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@23 (line 12)
 ;; B31: #	out( B39 B32 ) <- in( B30 B34 ) Loop( B31-B34 inner post of N437 multiversion_fast) Freq: 0.999003
  0x00007fbd9447a658:   lea    0x7(%rbx),%r9d
  0x00007fbd9447a65c:   nop
  0x00007fbd9447a65d:   nop
  0x00007fbd9447a65e:   nop
  0x00007fbd9447a65f:   nop
  0x00007fbd9447a660:   cmp    %r14d,%ebx
  0x00007fbd9447a663:   jae    0x00007fbd9447a6c5
 ;; B32: #	out( B40 B33 ) <- in( B31 )  Freq: 0.999002
  0x00007fbd9447a669:   mov    0x10(%r8,%rbx,8),%rbp        ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@18 (line 12)
  0x00007fbd9447a66e:   cmp    %esi,%ebx
  0x00007fbd9447a670:   jae    0x00007fbd9447a708
 ;; B33: #	out( B41 B34 ) <- in( B32 )  Freq: 0.999001
  0x00007fbd9447a676:   add    0x10(%r13,%rbx,8),%rbp       ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@22 (line 12)
  0x00007fbd9447a67b:   nop
  0x00007fbd9447a67c:   nop
  0x00007fbd9447a67d:   nop
  0x00007fbd9447a67e:   nop
  0x00007fbd9447a67f:   nop
  0x00007fbd9447a680:   cmp    %eax,%r9d
  0x00007fbd9447a683:   jae    0x00007fbd9447a74c
 ;; B34: #	out( B31 B35 ) <- in( B33 )  Freq: 0.999
  0x00007fbd9447a689:   movslq %ebx,%r10
  0x00007fbd9447a68c:   mov    %rbp,0x48(%r11,%r10,8)       ;*lastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@23 (line 12)
  0x00007fbd9447a691:   inc    %ebx                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@24 (line 11)
  0x00007fbd9447a693:   cmp    (%rsp),%ebx
  0x00007fbd9447a696:   jl     0x00007fbd9447a658           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@8 (line 11)
 ;; B35: #	out( N503 ) <- in( B13 B34 B30 )  Freq: 0.999979
  0x00007fbd9447a698:   vzeroupper 
  0x00007fbd9447a69b:   add    $0x50,%rsp
  0x00007fbd9447a69f:   pop    %rbp
  0x00007fbd9447a6a0:   cmp    0x28(%r15),%rsp              ;   {poll_return}
  0x00007fbd9447a6a4:   ja     0x00007fbd9447a8b8
  0x00007fbd9447a6aa:   retq   
 ;; B36: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
  0x00007fbd9447a6ab:   xor    %r11d,%r11d
  0x00007fbd9447a6ae:   jmpq   0x00007fbd9447a470
 ;; B37: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
  0x00007fbd9447a6b3:   xor    %r8d,%r8d
  0x00007fbd9447a6b6:   jmpq   0x00007fbd9447a490
 ;; B38: #	out( B10 ) <- in( B7 )  Freq: 0.000999985
  0x00007fbd9447a6bb:   xor    %r13d,%r13d
  0x00007fbd9447a6be:   nop
  0x00007fbd9447a6bf:   nop
  0x00007fbd9447a6c0:   jmpq   0x00007fbd9447a4ad
 ;; B39: #	out( N503 ) <- in( B31 B15 )  Freq: 3.03683e-06
  0x00007fbd9447a6c5:   mov    $0xffffffe4,%esi
  0x00007fbd9447a6ca:   mov    %r13,0x8(%rsp)
  0x00007fbd9447a6cf:   mov    %r11,0x18(%rsp)
  0x00007fbd9447a6d4:   mov    %r9d,0x14(%rsp)
  0x00007fbd9447a6d9:   mov    %r8,0x20(%rsp)
  0x00007fbd9447a6de:   mov    %ebx,0x28(%rsp)
  0x00007fbd9447a6e2:   nop
  0x00007fbd9447a6e3:   nop
  0x00007fbd9447a6e4:   vzeroupper 
  0x00007fbd9447a6e7:   callq  0x00007fbd943f4ae0           ; ImmutableOopMap {[8]=Oop [24]=Oop [32]=Oop }
                                                            ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@18 (line 12)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fbd9447a6ec:   nopl   0x1000464(%rax,%rax,1)       ;   {post_call_nop}
  0x00007fbd9447a6f4:   movabs $0x7fbd9939b628,%rdi         ;   {external_word}
  0x00007fbd9447a6fe:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd9447a702:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd9447a707:   hlt    
 ;; B40: #	out( N503 ) <- in( B32 B16 )  Freq: 3.03683e-06
  0x00007fbd9447a708:   mov    $0xffffffe4,%esi
  0x00007fbd9447a70d:   mov    %r8,0x8(%rsp)
  0x00007fbd9447a712:   mov    %r11,0x20(%rsp)
  0x00007fbd9447a717:   mov    %r9d,0x1c(%rsp)
  0x00007fbd9447a71c:   mov    %r13,0x28(%rsp)
  0x00007fbd9447a721:   mov    %ebx,0x30(%rsp)
  0x00007fbd9447a725:   nop
  0x00007fbd9447a726:   nop
  0x00007fbd9447a727:   nop
  0x00007fbd9447a728:   vzeroupper 
  0x00007fbd9447a72b:   callq  0x00007fbd943f4ae0           ; ImmutableOopMap {[8]=Oop [32]=Oop [40]=Oop }
                                                            ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@21 (line 12)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fbd9447a730:   nopl   0x20004a8(%rax,%rax,1)       ;   {post_call_nop}
  0x00007fbd9447a738:   movabs $0x7fbd9939b628,%rdi         ;   {external_word}
  0x00007fbd9447a742:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd9447a746:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd9447a74b:   hlt    
 ;; B41: #	out( N503 ) <- in( B33 B17 )  Freq: 3.03683e-06
  0x00007fbd9447a74c:   mov    $0xffffffe4,%esi
  0x00007fbd9447a751:   mov    %r8,0x8(%rsp)
  0x00007fbd9447a756:   mov    %r13,0x10(%rsp)
  0x00007fbd9447a75b:   mov    %ebx,0x18(%rsp)
  0x00007fbd9447a75f:   mov    %r11,0x20(%rsp)
  0x00007fbd9447a764:   mov    %r9d,0x1c(%rsp)
  0x00007fbd9447a769:   nop
  0x00007fbd9447a76a:   nop
  0x00007fbd9447a76b:   nop
  0x00007fbd9447a76c:   vzeroupper 
  0x00007fbd9447a76f:   callq  0x00007fbd943f4ae0           ; ImmutableOopMap {[8]=Oop [16]=Oop [32]=Oop }
                                                            ;*lastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@23 (line 12)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fbd9447a774:   nopl   0x30004ec(%rax,%rax,1)       ;   {post_call_nop}
  0x00007fbd9447a77c:   movabs $0x7fbd9939b628,%rdi         ;   {external_word}
  0x00007fbd9447a786:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd9447a78a:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd9447a78f:   hlt                                 ;*lastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@23 (line 12)
 ;; B42: #	out( N503 ) <- in( B20 )  Freq: 1.01228e-06
  0x00007fbd9447a790:   movabs $0x7fbd99463c90,%rdi         ;   {external_word}
  0x00007fbd9447a79a:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd9447a79e:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd9447a7a3:   hlt    
 ;; B43: #	out( N503 ) <- in( B21 )  Freq: 1.01228e-06
  0x00007fbd9447a7a4:   movabs $0x7fbd99463c90,%rdi         ;   {external_word}
  0x00007fbd9447a7ae:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd9447a7b2:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd9447a7b7:   hlt    
 ;; B44: #	out( N503 ) <- in( B22 )  Freq: 1.01228e-06
  0x00007fbd9447a7b8:   movabs $0x7fbd99463c90,%rdi         ;   {external_word}
  0x00007fbd9447a7c2:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd9447a7c6:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd9447a7cb:   hlt    
 ;; B45: #	out( N503 ) <- in( B23 )  Freq: 1.01227e-06
  0x00007fbd9447a7cc:   movabs $0x7fbd99463c90,%rdi         ;   {external_word}
  0x00007fbd9447a7d6:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd9447a7da:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd9447a7df:   hlt    
 ;; B46: #	out( N503 ) <- in( B24 )  Freq: 1.01227e-06
  0x00007fbd9447a7e0:   movabs $0x7fbd99463c90,%rdi         ;   {external_word}
  0x00007fbd9447a7ea:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd9447a7ee:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd9447a7f3:   hlt    
 ;; B47: #	out( N503 ) <- in( B25 )  Freq: 1.01227e-06
  0x00007fbd9447a7f4:   movabs $0x7fbd99463c90,%rdi         ;   {external_word}
  0x00007fbd9447a7fe:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd9447a802:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd9447a807:   hlt    
 ;; B48: #	out( N503 ) <- in( B2 B5 B8 )  Freq: 2.997e-06
  0x00007fbd9447a808:   mov    $0xffffff85,%esi
  0x00007fbd9447a80d:   mov    %r13,(%rsp)
  0x00007fbd9447a811:   mov    %ebx,0x8(%rsp)
  0x00007fbd9447a815:   mov    %r14,0x10(%rsp)
  0x00007fbd9447a81a:   nop
  0x00007fbd9447a81b:   nop
  0x00007fbd9447a81c:   vzeroupper 
  0x00007fbd9447a81f:   callq  0x00007fbd943f4ae0           ; ImmutableOopMap {rbp=Oop [0]=Oop [16]=Oop }
                                                            ;*iload_3 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@2 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fbd9447a824:   nopl   0x400059c(%rax,%rax,1)       ;   {post_call_nop}
  0x00007fbd9447a82c:   movabs $0x7fbd9939b628,%rdi         ;   {external_word}
  0x00007fbd9447a836:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd9447a83a:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd9447a83f:   hlt    
 ;; B49: #	out( N503 ) <- in( B12 B11 )  Freq: 2.02655e-06
  0x00007fbd9447a840:   mov    $0xffffffbe,%esi
  0x00007fbd9447a845:   mov    %r11,%rbp
  0x00007fbd9447a848:   mov    %r8,(%rsp)
  0x00007fbd9447a84c:   mov    %r13,0x8(%rsp)
  0x00007fbd9447a851:   mov    %ebx,0x10(%rsp)
  0x00007fbd9447a855:   nop
  0x00007fbd9447a856:   nop
  0x00007fbd9447a857:   nop
  0x00007fbd9447a858:   vzeroupper 
  0x00007fbd9447a85b:   callq  0x00007fbd943f4ae0           ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                                                            ;*iload_3 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@2 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fbd9447a860:   nopl   0x50005d8(%rax,%rax,1)       ;   {post_call_nop}
  0x00007fbd9447a868:   movabs $0x7fbd9939b628,%rdi         ;   {external_word}
  0x00007fbd9447a872:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd9447a876:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd9447a87b:   hlt    
 ;; B50: #	out( N503 ) <- in( B10 )  Freq: 1.01328e-06
  0x00007fbd9447a87c:   mov    $0xffffff6e,%esi
  0x00007fbd9447a881:   mov    %r11,%rbp
  0x00007fbd9447a884:   mov    %r8,(%rsp)
  0x00007fbd9447a888:   mov    %r13,0x8(%rsp)
  0x00007fbd9447a88d:   mov    %ebx,0x10(%rsp)
  0x00007fbd9447a891:   nop
  0x00007fbd9447a892:   nop
  0x00007fbd9447a893:   nop
  0x00007fbd9447a894:   vzeroupper 
  0x00007fbd9447a897:   callq  0x00007fbd943f4ae0           ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                                                            ;*iload_3 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@2 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fbd9447a89c:   nopl   0x6000614(%rax,%rax,1)       ;   {post_call_nop}
  0x00007fbd9447a8a4:   movabs $0x7fbd9939b628,%rdi         ;   {external_word}
  0x00007fbd9447a8ae:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd9447a8b2:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd9447a8b7:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@8 (line 11)
  0x00007fbd9447a8b8:   movabs $0x7fbd9447a6a0,%r10         ;   {internal_word}
  0x00007fbd9447a8c2:   mov    %r10,0x498(%r15)
  0x00007fbd9447a8c9:   jmpq   0x00007fbd943fe760           ;   {runtime_call SafepointBlob}
  0x00007fbd9447a8ce:   callq  Stub::method_entry_barrier   ;   {runtime_call Stub::method_entry_barrier}
  0x00007fbd9447a8d3:   jmpq   0x00007fbd9447a42a
[Exception Handler]
  0x00007fbd9447a8d8:   jmpq   0x00007fbd943fec60           ;   {runtime_call ExceptionBlob}
[Deopt Handler Code]
  0x00007fbd9447a8dd:   callq  0x00007fbd9447a8e2
  0x00007fbd9447a8e2:   subq   $0x5,(%rsp)
  0x00007fbd9447a8e7:   jmpq   0x00007fbd943fcea0           ;   {runtime_call DeoptimizationBlob}
  0x00007fbd9447a8ec:   hlt    
  0x00007fbd9447a8ed:   hlt    
  0x00007fbd9447a8ee:   hlt    
  0x00007fbd9447a8ef:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007fbd9447a8f0:   0x000000011f45e148 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f45e148}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007fbd9447a8f8:   0x0000000056041040 {type array long}
  0x00007fbd9447a900:   0x00007fbd4060c5a8 {method} {0x00007fbd4060c5a8} 'micro' '([J[J[J)V' in 'slp_align_micro'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007fbd9447a3ff offset=ffffffff bits=0):
PcDesc(pc=0x00007fbd9447a4ad offset=ad bits=0):
   slp_align_micro::micro@2 (line 11)
PcDesc(pc=0x00007fbd9447a4b1 offset=b1 bits=0):
   slp_align_micro::micro@4 (line 11)
PcDesc(pc=0x00007fbd9447a4b5 offset=b5 bits=0):
   slp_align_micro::micro@18 (line 12)
PcDesc(pc=0x00007fbd9447a4b9 offset=b9 bits=0):
   slp_align_micro::micro@21 (line 12)
PcDesc(pc=0x00007fbd9447a4c9 offset=c9 bits=0):
   slp_align_micro::micro@8 (line 11)
PcDesc(pc=0x00007fbd9447a525 offset=125 bits=0):
   slp_align_micro::micro@23 (line 12)
PcDesc(pc=0x00007fbd9447a537 offset=137 bits=0):
   slp_align_micro::micro@18 (line 12)
PcDesc(pc=0x00007fbd9447a544 offset=144 bits=0):
   slp_align_micro::micro@22 (line 12)
PcDesc(pc=0x00007fbd9447a555 offset=155 bits=0):
   slp_align_micro::micro@23 (line 12)
PcDesc(pc=0x00007fbd9447a557 offset=157 bits=0):
   slp_align_micro::micro@24 (line 11)
PcDesc(pc=0x00007fbd9447a565 offset=165 bits=0):
   slp_align_micro::micro@8 (line 11)
PcDesc(pc=0x00007fbd9447a5ef offset=1ef bits=0):
   slp_align_micro::micro@27 (line 11)
PcDesc(pc=0x00007fbd9447a63d offset=23d bits=0):
   slp_align_micro::micro@23 (line 12)
PcDesc(pc=0x00007fbd9447a640 offset=240 bits=0):
   slp_align_micro::micro@15 (line 12)
PcDesc(pc=0x00007fbd9447a644 offset=244 bits=0):
   slp_align_micro::micro@27 (line 11)
PcDesc(pc=0x00007fbd9447a648 offset=248 bits=1):
   slp_align_micro::micro@27 (line 11)  reexecute=true
   Locals
    - l0: reg r11 [22],oop
    - l1: reg r8 [16],oop
    - l2: reg r13 [26],oop
    - l3: reg rbx [6],int
PcDesc(pc=0x00007fbd9447a64a offset=24a bits=0):
   slp_align_micro::micro@27 (line 11)
PcDesc(pc=0x00007fbd9447a658 offset=258 bits=0):
   slp_align_micro::micro@23 (line 12)
PcDesc(pc=0x00007fbd9447a66e offset=26e bits=0):
   slp_align_micro::micro@18 (line 12)
PcDesc(pc=0x00007fbd9447a67b offset=27b bits=0):
   slp_align_micro::micro@22 (line 12)
PcDesc(pc=0x00007fbd9447a691 offset=291 bits=0):
   slp_align_micro::micro@23 (line 12)
PcDesc(pc=0x00007fbd9447a693 offset=293 bits=0):
   slp_align_micro::micro@24 (line 11)
PcDesc(pc=0x00007fbd9447a698 offset=298 bits=0):
   slp_align_micro::micro@8 (line 11)
PcDesc(pc=0x00007fbd9447a6ec offset=2ec bits=0):
   slp_align_micro::micro@18 (line 12)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[8],oop
    - l3: stack[40]
   Expression stack
    - @0: stack[24],oop
    - @1: stack[20]
    - @2: stack[32],oop
    - @3: stack[40]
PcDesc(pc=0x00007fbd9447a730 offset=330 bits=0):
   slp_align_micro::micro@21 (line 12)
   Locals
    - l0: stack[32],oop
    - l1: stack[8],oop
    - l2: stack[40],oop
    - l3: stack[48]
   Expression stack
    - @0: stack[32],oop
    - @1: stack[28]
    - @2: 0
    - @3: reg rbp [10],long
    - @4: stack[40],oop
    - @5: stack[48]
PcDesc(pc=0x00007fbd9447a774 offset=374 bits=0):
   slp_align_micro::micro@23 (line 12)
   Locals
    - l0: stack[32],oop
    - l1: stack[8],oop
    - l2: stack[16],oop
    - l3: stack[24]
   Expression stack
    - @0: stack[32],oop
    - @1: stack[28]
    - @2: 0
    - @3: reg rbp [10],long
PcDesc(pc=0x00007fbd9447a790 offset=390 bits=0):
   slp_align_micro::micro@23 (line 12)
PcDesc(pc=0x00007fbd9447a824 offset=424 bits=0):
   slp_align_micro::micro@2 (line 11)
   Locals
    - l0: stack[16],oop
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8]
PcDesc(pc=0x00007fbd9447a860 offset=460 bits=0):
   slp_align_micro::micro@2 (line 11)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
PcDesc(pc=0x00007fbd9447a89c offset=49c bits=0):
   slp_align_micro::micro@2 (line 11)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
PcDesc(pc=0x00007fbd9447a8b8 offset=4b8 bits=0):
   slp_align_micro::micro@8 (line 11)
PcDesc(pc=0x00007fbd9447a8f1 offset=4f1 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 7 OopMaps

ImmutableOopMap {r11=Oop r8=Oop r13=Oop } pc offsets: 584 
ImmutableOopMap {[8]=Oop [24]=Oop [32]=Oop } pc offsets: 748 
ImmutableOopMap {[8]=Oop [32]=Oop [40]=Oop } pc offsets: 816 
ImmutableOopMap {[8]=Oop [16]=Oop [32]=Oop } pc offsets: 884 
ImmutableOopMap {rbp=Oop [0]=Oop [16]=Oop } pc offsets: 1060 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 1120 1180 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007fbd9447a4ad offset=ad):
   slp_align_micro::micro@2 (line 11)
ScopeDesc(pc=0x00007fbd9447a4b1 offset=b1):
   slp_align_micro::micro@4 (line 11)
ScopeDesc(pc=0x00007fbd9447a4b5 offset=b5):
   slp_align_micro::micro@18 (line 12)
ScopeDesc(pc=0x00007fbd9447a4b9 offset=b9):
   slp_align_micro::micro@21 (line 12)
ScopeDesc(pc=0x00007fbd9447a4c9 offset=c9):
   slp_align_micro::micro@8 (line 11)
ScopeDesc(pc=0x00007fbd9447a525 offset=125):
   slp_align_micro::micro@23 (line 12)
ScopeDesc(pc=0x00007fbd9447a537 offset=137):
   slp_align_micro::micro@18 (line 12)
ScopeDesc(pc=0x00007fbd9447a544 offset=144):
   slp_align_micro::micro@22 (line 12)
ScopeDesc(pc=0x00007fbd9447a555 offset=155):
   slp_align_micro::micro@23 (line 12)
ScopeDesc(pc=0x00007fbd9447a557 offset=157):
   slp_align_micro::micro@24 (line 11)
ScopeDesc(pc=0x00007fbd9447a565 offset=165):
   slp_align_micro::micro@8 (line 11)
ScopeDesc(pc=0x00007fbd9447a5ef offset=1ef):
   slp_align_micro::micro@27 (line 11)
ScopeDesc(pc=0x00007fbd9447a63d offset=23d):
   slp_align_micro::micro@23 (line 12)
ScopeDesc(pc=0x00007fbd9447a640 offset=240):
   slp_align_micro::micro@15 (line 12)
ScopeDesc(pc=0x00007fbd9447a644 offset=244):
   slp_align_micro::micro@27 (line 11)
ScopeDesc(pc=0x00007fbd9447a648 offset=248):
   slp_align_micro::micro@27 (line 11)  reexecute=true
   Locals
    - l0: reg r11 [22],oop
    - l1: reg r8 [16],oop
    - l2: reg r13 [26],oop
    - l3: reg rbx [6],int
ScopeDesc(pc=0x00007fbd9447a64a offset=24a):
   slp_align_micro::micro@27 (line 11)
ScopeDesc(pc=0x00007fbd9447a658 offset=258):
   slp_align_micro::micro@23 (line 12)
ScopeDesc(pc=0x00007fbd9447a66e offset=26e):
   slp_align_micro::micro@18 (line 12)
ScopeDesc(pc=0x00007fbd9447a67b offset=27b):
   slp_align_micro::micro@22 (line 12)
ScopeDesc(pc=0x00007fbd9447a691 offset=291):
   slp_align_micro::micro@23 (line 12)
ScopeDesc(pc=0x00007fbd9447a693 offset=293):
   slp_align_micro::micro@24 (line 11)
ScopeDesc(pc=0x00007fbd9447a698 offset=298):
   slp_align_micro::micro@8 (line 11)
ScopeDesc(pc=0x00007fbd9447a6ec offset=2ec):
   slp_align_micro::micro@18 (line 12)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[8],oop
    - l3: stack[40]
   Expression stack
    - @0: stack[24],oop
    - @1: stack[20]
    - @2: stack[32],oop
    - @3: stack[40]
ScopeDesc(pc=0x00007fbd9447a730 offset=330):
   slp_align_micro::micro@21 (line 12)
   Locals
    - l0: stack[32],oop
    - l1: stack[8],oop
    - l2: stack[40],oop
    - l3: stack[48]
   Expression stack
    - @0: stack[32],oop
    - @1: stack[28]
    - @2: 0
    - @3: reg rbp [10],long
    - @4: stack[40],oop
    - @5: stack[48]
ScopeDesc(pc=0x00007fbd9447a774 offset=374):
   slp_align_micro::micro@23 (line 12)
   Locals
    - l0: stack[32],oop
    - l1: stack[8],oop
    - l2: stack[16],oop
    - l3: stack[24]
   Expression stack
    - @0: stack[32],oop
    - @1: stack[28]
    - @2: 0
    - @3: reg rbp [10],long
ScopeDesc(pc=0x00007fbd9447a790 offset=390):
   slp_align_micro::micro@23 (line 12)
ScopeDesc(pc=0x00007fbd9447a824 offset=424):
   slp_align_micro::micro@2 (line 11)
   Locals
    - l0: stack[16],oop
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8]
ScopeDesc(pc=0x00007fbd9447a860 offset=460):
   slp_align_micro::micro@2 (line 11)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
ScopeDesc(pc=0x00007fbd9447a89c offset=49c):
   slp_align_micro::micro@2 (line 11)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
ScopeDesc(pc=0x00007fbd9447a8b8 offset=4b8):
   slp_align_micro::micro@8 (line 11)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007fbd9447a368: 3100
relocInfo@0x00007fbd9447a368 [type=6(runtime_call) addr=0x00007fbd9447a400 offset=0 format=1] | [destination=0x00007fbd98b6d340] os::breakpoint()
         @0x00007fbd9447a36a: 804b
relocInfo@0x00007fbd9447a36a [type=16(post_call_nop) addr=0x00007fbd9447a44b offset=75]
         @0x00007fbd9447a36c: 78016315
relocInfo@0x00007fbd9447a36e [type=12(metadata) addr=0x00007fbd9447a460 offset=21 format=3 data=1] | [metadata_addr=0x00007fbd9447a8f8 *=0x0000000056041040]metadata_value=0x0000000056041040: {type array long}
         @0x00007fbd9447a370: 78016320
relocInfo@0x00007fbd9447a372 [type=12(metadata) addr=0x00007fbd9447a480 offset=32 format=3 data=1] | [metadata_addr=0x00007fbd9447a8f8 *=0x0000000056041040]metadata_value=0x0000000056041040: {type array long}
         @0x00007fbd9447a374: 78016320
relocInfo@0x00007fbd9447a376 [type=12(metadata) addr=0x00007fbd9447a4a0 offset=32 format=3 data=1] | [metadata_addr=0x00007fbd9447a8f8 *=0x0000000056041040]metadata_value=0x0000000056041040: {type array long}
         @0x00007fbd9447a378: 00ff
relocInfo@0x00007fbd9447a378 [type=0(none) addr=0x00007fbd9447a59f offset=255]
         @0x00007fbd9447a37a: 50a9
relocInfo@0x00007fbd9447a37a [type=10(poll) addr=0x00007fbd9447a648 offset=169]
         @0x00007fbd9447a37c: 5858
relocInfo@0x00007fbd9447a37c [type=11(poll_return) addr=0x00007fbd9447a6a0 offset=88]
         @0x00007fbd9447a37e: 3147
relocInfo@0x00007fbd9447a37e [type=6(runtime_call) addr=0x00007fbd9447a6e7 offset=71 format=1] | [destination=0x00007fbd943f4ae0] UncommonTrapBlob
         @0x00007fbd9447a380: 8005
relocInfo@0x00007fbd9447a380 [type=16(post_call_nop) addr=0x00007fbd9447a6ec offset=5]
         @0x00007fbd9447a382: 78173808
relocInfo@0x00007fbd9447a384 [type=7(external_word) addr=0x00007fbd9447a6f4 offset=8 data=23] | [target=0x00007fbd9939b628]
         @0x00007fbd9447a386: 310e
relocInfo@0x00007fbd9447a386 [type=6(runtime_call) addr=0x00007fbd9447a702 offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd9447a388: 3129
relocInfo@0x00007fbd9447a388 [type=6(runtime_call) addr=0x00007fbd9447a72b offset=41 format=1] | [destination=0x00007fbd943f4ae0] UncommonTrapBlob
         @0x00007fbd9447a38a: 8005
relocInfo@0x00007fbd9447a38a [type=16(post_call_nop) addr=0x00007fbd9447a730 offset=5]
         @0x00007fbd9447a38c: 78173808
relocInfo@0x00007fbd9447a38e [type=7(external_word) addr=0x00007fbd9447a738 offset=8 data=23] | [target=0x00007fbd9939b628]
         @0x00007fbd9447a390: 310e
relocInfo@0x00007fbd9447a390 [type=6(runtime_call) addr=0x00007fbd9447a746 offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd9447a392: 3129
relocInfo@0x00007fbd9447a392 [type=6(runtime_call) addr=0x00007fbd9447a76f offset=41 format=1] | [destination=0x00007fbd943f4ae0] UncommonTrapBlob
         @0x00007fbd9447a394: 8005
relocInfo@0x00007fbd9447a394 [type=16(post_call_nop) addr=0x00007fbd9447a774 offset=5]
         @0x00007fbd9447a396: 78173808
relocInfo@0x00007fbd9447a398 [type=7(external_word) addr=0x00007fbd9447a77c offset=8 data=23] | [target=0x00007fbd9939b628]
         @0x00007fbd9447a39a: 310e
relocInfo@0x00007fbd9447a39a [type=6(runtime_call) addr=0x00007fbd9447a78a offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd9447a39c: 78193806
relocInfo@0x00007fbd9447a39e [type=7(external_word) addr=0x00007fbd9447a790 offset=6 data=25] | [target=0x00007fbd99463c90]
         @0x00007fbd9447a3a0: 310e
relocInfo@0x00007fbd9447a3a0 [type=6(runtime_call) addr=0x00007fbd9447a79e offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd9447a3a2: 78193806
relocInfo@0x00007fbd9447a3a4 [type=7(external_word) addr=0x00007fbd9447a7a4 offset=6 data=25] | [target=0x00007fbd99463c90]
         @0x00007fbd9447a3a6: 310e
relocInfo@0x00007fbd9447a3a6 [type=6(runtime_call) addr=0x00007fbd9447a7b2 offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd9447a3a8: 78193806
relocInfo@0x00007fbd9447a3aa [type=7(external_word) addr=0x00007fbd9447a7b8 offset=6 data=25] | [target=0x00007fbd99463c90]
         @0x00007fbd9447a3ac: 310e
relocInfo@0x00007fbd9447a3ac [type=6(runtime_call) addr=0x00007fbd9447a7c6 offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd9447a3ae: 78193806
relocInfo@0x00007fbd9447a3b0 [type=7(external_word) addr=0x00007fbd9447a7cc offset=6 data=25] | [target=0x00007fbd99463c90]
         @0x00007fbd9447a3b2: 310e
relocInfo@0x00007fbd9447a3b2 [type=6(runtime_call) addr=0x00007fbd9447a7da offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd9447a3b4: 78193806
relocInfo@0x00007fbd9447a3b6 [type=7(external_word) addr=0x00007fbd9447a7e0 offset=6 data=25] | [target=0x00007fbd99463c90]
         @0x00007fbd9447a3b8: 310e
relocInfo@0x00007fbd9447a3b8 [type=6(runtime_call) addr=0x00007fbd9447a7ee offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd9447a3ba: 78193806
relocInfo@0x00007fbd9447a3bc [type=7(external_word) addr=0x00007fbd9447a7f4 offset=6 data=25] | [target=0x00007fbd99463c90]
         @0x00007fbd9447a3be: 310e
relocInfo@0x00007fbd9447a3be [type=6(runtime_call) addr=0x00007fbd9447a802 offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd9447a3c0: 311d
relocInfo@0x00007fbd9447a3c0 [type=6(runtime_call) addr=0x00007fbd9447a81f offset=29 format=1] | [destination=0x00007fbd943f4ae0] UncommonTrapBlob
         @0x00007fbd9447a3c2: 8005
relocInfo@0x00007fbd9447a3c2 [type=16(post_call_nop) addr=0x00007fbd9447a824 offset=5]
         @0x00007fbd9447a3c4: 78173808
relocInfo@0x00007fbd9447a3c6 [type=7(external_word) addr=0x00007fbd9447a82c offset=8 data=23] | [target=0x00007fbd9939b628]
         @0x00007fbd9447a3c8: 310e
relocInfo@0x00007fbd9447a3c8 [type=6(runtime_call) addr=0x00007fbd9447a83a offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd9447a3ca: 3121
relocInfo@0x00007fbd9447a3ca [type=6(runtime_call) addr=0x00007fbd9447a85b offset=33 format=1] | [destination=0x00007fbd943f4ae0] UncommonTrapBlob
         @0x00007fbd9447a3cc: 8005
relocInfo@0x00007fbd9447a3cc [type=16(post_call_nop) addr=0x00007fbd9447a860 offset=5]
         @0x00007fbd9447a3ce: 78173808
relocInfo@0x00007fbd9447a3d0 [type=7(external_word) addr=0x00007fbd9447a868 offset=8 data=23] | [target=0x00007fbd9939b628]
         @0x00007fbd9447a3d2: 310e
relocInfo@0x00007fbd9447a3d2 [type=6(runtime_call) addr=0x00007fbd9447a876 offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd9447a3d4: 3121
relocInfo@0x00007fbd9447a3d4 [type=6(runtime_call) addr=0x00007fbd9447a897 offset=33 format=1] | [destination=0x00007fbd943f4ae0] UncommonTrapBlob
         @0x00007fbd9447a3d6: 8005
relocInfo@0x00007fbd9447a3d6 [type=16(post_call_nop) addr=0x00007fbd9447a89c offset=5]
         @0x00007fbd9447a3d8: 78173808
relocInfo@0x00007fbd9447a3da [type=7(external_word) addr=0x00007fbd9447a8a4 offset=8 data=23] | [target=0x00007fbd9939b628]
         @0x00007fbd9447a3dc: 310e
relocInfo@0x00007fbd9447a3dc [type=6(runtime_call) addr=0x00007fbd9447a8b2 offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd9447a3de: 7a184006
relocInfo@0x00007fbd9447a3e0 [type=8(internal_word) addr=0x00007fbd9447a8b8 offset=6 data=536] | [target=0x00007fbd9447a6a0]
         @0x00007fbd9447a3e2: 3111
relocInfo@0x00007fbd9447a3e2 [type=6(runtime_call) addr=0x00007fbd9447a8c9 offset=17 format=1] | [destination=0x00007fbd943fe760] SafepointBlob
         @0x00007fbd9447a3e4: 3105
relocInfo@0x00007fbd9447a3e4 [type=6(runtime_call) addr=0x00007fbd9447a8ce offset=5 format=1] | [destination=0x00007fbd9435c0a0] Stub::method_entry_barrier
         @0x00007fbd9447a3e6: 000a
relocInfo@0x00007fbd9447a3e6 [type=0(none) addr=0x00007fbd9447a8d8 offset=10]
         @0x00007fbd9447a3e8: 3100
relocInfo@0x00007fbd9447a3e8 [type=6(runtime_call) addr=0x00007fbd9447a8d8 offset=0 format=1] | [destination=0x00007fbd943fec60] ExceptionBlob
         @0x00007fbd9447a3ea: 310f
relocInfo@0x00007fbd9447a3ea [type=6(runtime_call) addr=0x00007fbd9447a8e7 offset=15 format=1] | [destination=0x00007fbd943fcea0] DeoptimizationBlob
         @0x00007fbd9447a3ec: 0000
relocInfo@0x00007fbd9447a3ec [type=0(none) addr=0x00007fbd9447a8e7 offset=0]
         @0x00007fbd9447a3ee: 0000
relocInfo@0x00007fbd9447a3ee [type=0(none) addr=0x00007fbd9447a8e7 offset=0]
         @0x00007fbd9447a3f0: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type evol_method
  method  = *{method} {0x00007fbd4060c5a8} 'micro' '([J[J[J)V' in 'slp_align_micro'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 3 entries, 28 bytes):
{
   < 0x00007fbd9447a4ad, 0x00007fbd9447a87c > < 0x00007fbd9447a4b1, 0x00007fbd9447a840 > < 0x00007fbd9447a4b5, 0x00007fbd9447a840 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 nullptr-oop
#1: 0x000000011f45e148 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f45e148}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 nullptr-oop
#1: 0x0000000056041040 {type array long}
#2: 0x00007fbd4060c5a8 {method} {0x00007fbd4060c5a8} 'micro' '([J[J[J)V' in 'slp_align_micro'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
TraceNewVectors [AutoVectorization]:  1111  LoadVector  === 972 1034 997  [[ ]]  @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=5; mismatched #vectory<J,4> (does not depend only on test, unknown control)
TraceNewVectors [AutoVectorization]:  1112  LoadVector  === 960 1034 999  [[ ]]  @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=5; mismatched #vectory<J,4> (does not depend only on test, unknown control)
TraceNewVectors [AutoVectorization]:  1113  AddVL  === _ 1111 1112  [[ ]]  #vectory<J,4>
TraceNewVectors [AutoVectorization]:  1114  StoreVector  === 1031 1034 1022 1113  [[ ]]  @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=5; mismatched  Memory: @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=5;
TraceNewVectors [AutoVectorization]:  1115  LoadVector  === 972 1114 869  [[ ]]  @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=5; mismatched #vectory<J,4> (does not depend only on test, unknown control)
TraceNewVectors [AutoVectorization]:  1116  LoadVector  === 960 1114 867  [[ ]]  @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=5; mismatched #vectory<J,4> (does not depend only on test, unknown control)
TraceNewVectors [AutoVectorization]:  1117  AddVL  === _ 1115 1116  [[ ]]  #vectory<J,4>
TraceNewVectors [AutoVectorization]:  1118  StoreVector  === 1031 1114 879 1117  [[ ]]  @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=5; mismatched  Memory: @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=5;

============================= C2-compiled nmethod ==============================
#r018 rsi:rsi   : parm 0: long[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
#r016 rdx:rdx   : parm 1: long[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
#r010 rcx:rcx   : parm 2: long[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
# -- Old rsp -- Framesize: 64 --
#r623 rsp+60: in_preserve
#r622 rsp+56: return address
#r621 rsp+52: in_preserve
#r620 rsp+48: saved fp register
#r619 rsp+44: pad2, stack alignment
#r618 rsp+40: pad2, stack alignment
#r617 rsp+36: Fixed slot 1
#r616 rsp+32: Fixed slot 0
#r631 rsp+28: spill
#r630 rsp+24: spill
#r629 rsp+20: spill
#r628 rsp+16: spill
#r627 rsp+12: spill
#r626 rsp+ 8: spill
#r625 rsp+ 4: spill
#r624 rsp+ 0: spill
#
----------------------- MetaData before Compile_id = 195 ------------------------
{method}
 - this oop:          0x00007fbd4060c5a8
 - method holder:     'slp_align_micro'
 - constants:         0x00007fbd4060c070 constant pool [103]/operands[19] {0x00007fbd4060c070} for 'slp_align_micro' cache=0x00007fbd4060cb00
 - access:            0x9  public static 
 - flags:             0x6080  queued_for_compilation has_loops_flag has_loops_flag_init 
 - name:              'micro'
 - signature:         '([J[J[J)V'
 - max stack:         7
 - max locals:        4
 - size of params:    3
 - method size:       14
 - vtable index:      -2
 - i2i entry:         0x00007fbd942eaf00
 - adapters:          AHE@0x00007fbd902e7560: 0xbbb i2c: 0x00007fbd9434e600 c2i: 0x00007fbd9434e6e4 c2iUV: 0x00007fbd9434e6c3 c2iNCI: 0x00007fbd9434e71f
 - compiled entry     0x00007fbd9434e6e4
 - code size:         31
 - code start:        0x00007fbd4060c580
 - code end (excl):   0x00007fbd4060c59f
 - method data:       0x00007fbd4060e378
 - checked ex length: 0
 - linenumber start:  0x00007fbd4060c59f
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 195 -----------------------
#
#  void ( long[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *, long[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *, long[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact * )
#
000     N1: #	out( B1 ) <- in( B46 B35 B36 B42 B37 B38 B44 B39 B43 B40 B34 B41 B45 )  Freq: 1

000     B1: #	out( B46 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (176 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

01a     movl    R11, [RSI + #12 (8-bit)]	# range
01e     NullCheck RSI

01e     B2: #	out( B34 B3 ) <- in( B1 )  Freq: 0.999999
01e     leal    RDI, [R11 + #-8]
022     testl   RDI, RDI
024     jle     B34  P=0.000976 C=21525.000000

02a     B3: #	out( B35 B4 ) <- in( B2 )  Freq: 0.999023
02a     movl    R14, [RDX + #12 (8-bit)]	# range
02e     NullCheck RDX

02e     B4: #	out( B35 B5 ) <- in( B3 )  Freq: 0.999022
02e     testl   R14, R14	# unsigned
031     jbe,u   B35  P=0.000001 C=-1.000000

037     B5: #	out( B35 B6 ) <- in( B4 )  Freq: 0.999021
037     leal    R10, [R11 + #-9]
        nop 	# 5 bytes pad for loops and calls
040     cmpl    R10, R14	# unsigned
043     jae,u   B35  P=0.000001 C=-1.000000

049     B6: #	out( B35 B7 ) <- in( B5 )  Freq: 0.99902
049     movl    R8, [RCX + #12 (8-bit)]	# range
04d     NullCheck RCX

04d     B7: #	out( B35 B8 ) <- in( B6 )  Freq: 0.999019
04d     testl   R8, R8	# unsigned
050     jbe,u   B35  P=0.000001 C=-1.000000

056     B8: #	out( B35 B9 ) <- in( B7 )  Freq: 0.999018
056     cmpl    R10, R8	# unsigned
059     jae,u   B35  P=0.000001 C=-1.000000

05f     B9: #	out( B35 B10 ) <- in( B8 )  Freq: 0.999017
        nop 	# 1 bytes pad for loops and calls
060     cmpl    R11, #7	# unsigned
064     jbe,u   B35  P=0.000001 C=-1.000000

06a     B10: #	out( B35 B11 ) <- in( B9 )  Freq: 0.999016
06a     leal    R10, [R11 + #-2]
06e     cmpl    R10, R11	# unsigned
071     jae,u   B35  P=0.000001 C=-1.000000

077     B11: #	out( B12 ) <- in( B10 )  Freq: 0.999015
077     movl    R10, RDX	# ptr -> int
07a     movslq  R13, R11	# i2l
07d     leaq    RAX, [R13 + #-8]
081     movl    R9, #-48	# int
087     subl    R9, R10	# int
08a     shrl    R9, #3
08e     decl    R9	# int
091     xorl    RBX, RBX	# int
093     bzhiq R10, R9, #3 	# using R10 as TEMP, int &  immI_Pow2M1 -> long
09e     addq    R10, #1	# long
0a2     cmpq    RAX, R10
0a5     cmovql R10, RAX	# signed, long
0a9     movl    R10, R10	# l2i
0ac     xorl    R9, R9	# int

0af     B12: #	out( B14 B13 ) <- in( B11 B13 ) Loop( B12-B13 inner pre of N248) Freq: 1.99803
0af     movslq  RBP, R9	# i2l
0b2     movq    RAX, [RDX + #16 + RBP << #3]	# long
0b7     addq    RAX, [RCX + #16 + RBP << #3]	# long
0bc     movq    [RSI + #72 + RBP << #3], RAX	# long
0c1     leal    RAX, [R9 + #1]
0c5     cmpl    RAX, R10
0c8     jge,s   B14	# loop end  P=0.500000 C=21504.000000

0ca     B13: #	out( B12 ) <- in( B12 )  Freq: 0.999015
0ca     movl    R9, RAX	# spill
0cd     jmp,s   B12

0cf     B14: #	out( B28 B15 ) <- in( B12 )  Freq: 0.999015
0cf     leal    R10, [R11 + #-39]
0d3     cmpl    RAX, R10
0d6     jge     B28  P=0.000001 C=-1.000000

0dc     B15: #	out( B36 B16 ) <- in( B14 )  Freq: 0.999014
        nop 	# 4 bytes pad for loops and calls
0e0     cmpl    RAX, R14	# unsigned
0e3     jae,u   B36  P=0.000001 C=-1.000000

0e9     B16: #	out( B37 B17 ) <- in( B15 )  Freq: 0.999013
0e9     movdl   XMM1, RDI	# spill
0ed     leal    RDI, [R9 + #32]
0f1     cmpl    RDI, R14	# unsigned
0f4     jae,u   B37  P=0.000001 C=-1.000000

0fa     B17: #	out( B38 B18 ) <- in( B16 )  Freq: 0.999012
        nop 	# 6 bytes pad for loops and calls
100     cmpl    RAX, R8	# unsigned
103     jae,u   B38  P=0.000001 C=-1.000000

109     B18: #	out( B39 B19 ) <- in( B17 )  Freq: 0.999011
109     cmpl    RDI, R8	# unsigned
10c     jae,u   B39  P=0.000001 C=-1.000000

112     B19: #	out( B40 B20 ) <- in( B18 )  Freq: 0.99901
112     addq    RBP, #8	# long
116     cmpq    RBP, R13	# unsigned
119     jae,u   B40  P=0.000001 C=-1.000000

11f     B20: #	out( B41 B21 ) <- in( B19 )  Freq: 0.999009
11f     addl    R9, #39	# int
123     cmpl    R9, R11	# unsigned
126     jae,u   B41  P=0.000001 C=-1.000000

12c     B21: #	out( B22 ) <- in( B20 )  Freq: 0.999008
12c     movl    R9, #32000	# int
132     # TLS is in R15

132     B22: #	out( B23 ) <- in( B21 B24 ) Loop( B22-B24 ) Freq: 1023.98
132     movl    RDI, R11	# spill
135     subl    RDI, RAX	# int
137     addl    RDI, #-39	# int
13a     cmpl    R10, RAX
13d     cmovll RDI, RBX	# signed, int
140     cmpl    RDI, #32000	# unsigned
146     cmovla RDI, R9	# unsigned, int
14a     addl    RDI, RAX	# int
        nop 	# 4 bytes pad for loops and calls

150     B23: #	out( B23 B24 ) <- in( B22 B23 ) Loop( B23-B23 inner main of N142 strip mined) Freq: 1.04958e+06
150     load_vector XMM0,[RCX + #16 + RAX << #3]
156     vpaddq  XMM0,XMM0,[RDX + #16 + RAX << #3]	! add packedL
15c     store_vector [RSI + #72 + RAX << #3],XMM0
	
162     load_vector XMM0,[RDX + #48 + RAX << #3]
168     vpaddq  XMM0,XMM0,[RCX + #48 + RAX << #3]	! add packedL
16e     store_vector [RSI + #104 + RAX << #3],XMM0
	
174     load_vector XMM0,[RDX + #80 + RAX << #3]
17a     vpaddq  XMM0,XMM0,[RCX + #80 + RAX << #3]	! add packedL
180     store_vector [RSI + #136 + RAX << #3],XMM0
	
189     load_vector XMM0,[RCX + #112 + RAX << #3]
18f     vpaddq  XMM0,XMM0,[RDX + #112 + RAX << #3]	! add packedL
195     store_vector [RSI + #168 + RAX << #3],XMM0
	
19e     load_vector XMM0,[RCX + #144 + RAX << #3]
1a7     vpaddq  XMM0,XMM0,[RDX + #144 + RAX << #3]	! add packedL
1b0     store_vector [RSI + #200 + RAX << #3],XMM0
	
1b9     load_vector XMM0,[RDX + #176 + RAX << #3]
1c2     vpaddq  XMM0,XMM0,[RCX + #176 + RAX << #3]	! add packedL
1cb     store_vector [RSI + #232 + RAX << #3],XMM0
	
1d4     load_vector XMM0,[RCX + #208 + RAX << #3]
1dd     vpaddq  XMM0,XMM0,[RDX + #208 + RAX << #3]	! add packedL
1e6     store_vector [RSI + #264 + RAX << #3],XMM0
	
1ef     load_vector XMM0,[RCX + #240 + RAX << #3]
1f8     vpaddq  XMM0,XMM0,[RDX + #240 + RAX << #3]	! add packedL
201     store_vector [RSI + #296 + RAX << #3],XMM0
	
20a     addl    RAX, #32	# int
20d     cmpl    RAX, RDI
20f     jl     B23	# loop end  P=0.999024 C=21504.000000

215     B24: #	out( B22 B25 ) <- in( B23 )  Freq: 1023.98
215     movq    RDI, [R15 + #48 (8-bit)]	# ptr
219     testl   rax, [RDI]	# Safepoint: poll for GC        # slp_align_micro::micro @ bci:27 (line 11) L[0]=RSI L[1]=RDX L[2]=RCX L[3]=RAX
        # OopMap {rcx=Oop rdx=Oop rsi=Oop off=537/0x219}
        nop 	# 5 bytes pad for loops and calls
220     cmpl    RAX, R10
223     jl     B22  P=0.999024 C=21504.000000

229     B25: #	out( B27 B26 ) <- in( B24 )  Freq: 0.999008
229     leal    R10, [R11 + #-15]
22d     cmpl    RAX, R10
230     jge,s   B27  P=0.500000 C=-1.000000
        nop 	# 2 bytes pad for loops and calls

234     B26: #	out( B26 B27 ) <- in( B25 B26 ) Loop( B26-B26 inner post of N1031) Freq: 0.999008
234     load_vector XMM0,[RCX + #16 + RAX << #3]
23a     vpaddq  XMM0,XMM0,[RDX + #16 + RAX << #3]	! add packedL
240     store_vector [RSI + #72 + RAX << #3],XMM0
	
246     load_vector XMM0,[RDX + #48 + RAX << #3]
24c     vpaddq  XMM0,XMM0,[RCX + #48 + RAX << #3]	! add packedL
252     store_vector [RSI + #104 + RAX << #3],XMM0
	
258     addl    RAX, #8	# int
        nop 	# 5 bytes pad for loops and calls
260     cmpl    RAX, R10
263     jl,s   B26	# loop end  P=0.500000 C=21504.000000

265     B27: #	out( B28 ) <- in( B26 B25 )  Freq: 0.999008
265     movdl   RDI, XMM1	# spill

269     B28: #	out( B34 B29 ) <- in( B14 B27 )  Freq: 0.999009
269     cmpl    RAX, RDI
26b     jge     B34  P=0.500000 C=-1.000000

271     B29: #	out( B42 B30 ) <- in( B28 )  Freq: 0.499505
271     cmpl    RAX, R14	# unsigned
274     jae,u   B42  P=0.000001 C=-1.000000

27a     B30: #	out( B43 B31 ) <- in( B29 )  Freq: 0.499504
        nop 	# 6 bytes pad for loops and calls
280     cmpl    RAX, R8	# unsigned
283     jae,u   B43  P=0.000001 C=-1.000000

289     B31: #	out( B44 B32 ) <- in( B30 )  Freq: 0.499504
289     movslq  R10, RAX	# i2l
28c     addq    R10, #7	# long
290     cmpq    R10, R13	# unsigned
293     jae,u   B44  P=0.000001 C=-1.000000

299     B32: #	out( B45 B33 ) <- in( B31 )  Freq: 0.499503
299     leal    R8, [RAX + #7]
        nop 	# 3 bytes pad for loops and calls
2a0     cmpl    R8, R11	# unsigned
2a3     jae,u   B45  P=0.000001 C=-1.000000
        nop 	# 3 bytes pad for loops and calls

2ac     B33: #	out( B33 B34 ) <- in( B32 B33 ) Loop( B33-B33 inner post of N248) Freq: 0.999005
2ac     movq    R10, [RDX + #16 + RAX << #3]	# long
2b1     addq    R10, [RCX + #16 + RAX << #3]	# long
2b6     movq    [RSI + #72 + RAX << #3], R10	# long
2bb     incl    RAX	# int
        nop 	# 3 bytes pad for loops and calls
2c0     cmpl    RAX, RDI
2c2     jl,s   B33	# loop end  P=0.500000 C=21504.000000

2c4     B34: #	out( N1 ) <- in( B33 B28 B2 )  Freq: 0.999983
2c4     vzeroupper
	addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

2d6     ret

2d7     B35: #	out( N1 ) <- in( B10 B3 B4 B5 B6 B7 B8 B9 )  Freq: 8.05849e-06
2d7     movq    RBP, RSI	# spill
2da     movq    [rsp + #0], RDX	# spill
2de     movq    [rsp + #8], RCX	# spill
2e3     movl    RSI, #-146	# int
2e8     movl    [rsp + #16], RDI	# spill
2ec     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # slp_align_micro::micro @ bci:8 (line 11) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=#0 STK[0]=#0 STK[1]=rsp + #16
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=756/0x2f4}
2fc     stop	# ShouldNotReachHere

310     B36: #	out( N1 ) <- in( B15 )  Freq: 1.01228e-06
310     stop	# ShouldNotReachHere

324     B37: #	out( N1 ) <- in( B16 )  Freq: 1.01228e-06
324     stop	# ShouldNotReachHere

338     B38: #	out( N1 ) <- in( B17 )  Freq: 1.01228e-06
338     stop	# ShouldNotReachHere

34c     B39: #	out( N1 ) <- in( B18 )  Freq: 1.01228e-06
34c     stop	# ShouldNotReachHere

360     B40: #	out( N1 ) <- in( B19 )  Freq: 1.01228e-06
360     stop	# ShouldNotReachHere

374     B41: #	out( N1 ) <- in( B20 )  Freq: 1.01228e-06
374     stop	# ShouldNotReachHere

388     B42: #	out( N1 ) <- in( B29 )  Freq: 5.06138e-07
388     stop	# ShouldNotReachHere

39c     B43: #	out( N1 ) <- in( B30 )  Freq: 5.06137e-07
39c     stop	# ShouldNotReachHere

3b0     B44: #	out( N1 ) <- in( B31 )  Freq: 5.06136e-07
3b0     stop	# ShouldNotReachHere

3c4     B45: #	out( N1 ) <- in( B32 )  Freq: 5.06136e-07
3c4     stop	# ShouldNotReachHere

3d8     B46: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
3d8     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
3e0     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # slp_align_micro::micro @ bci:4 (line 11) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#null
        # OopMap {off=1000/0x3e8}
3f0     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2) 904  195             slp_align_micro::micro (31 bytes)
 total in heap  [0x00007fbd94482588,0x00007fbd94482b30] = 1448
 relocation     [0x00007fbd94482668,0x00007fbd944826d0] = 104
 main code      [0x00007fbd944826e0,0x00007fbd94482b08] = 1064
 stub code      [0x00007fbd94482b08,0x00007fbd94482b20] = 24
 oops           [0x00007fbd94482b20,0x00007fbd94482b28] = 8
 metadata       [0x00007fbd94482b28,0x00007fbd94482b30] = 8
 immutable data [0x00007fbd2050de30,0x00007fbd2050e098] = 616
 dependencies   [0x00007fbd2050de30,0x00007fbd2050de38] = 8
 nul chk table  [0x00007fbd2050de38,0x00007fbd2050de58] = 32
 scopes pcs     [0x00007fbd2050de58,0x00007fbd2050e028] = 464
 scopes data    [0x00007fbd2050e028,0x00007fbd2050e098] = 112

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007fbd4060c5a8} 'micro' '([J[J[J)V' in 'slp_align_micro'
  # parm0:    rsi:rsi   = '[J'
  # parm1:    rdx:rdx   = '[J'
  # parm2:    rcx:rcx   = '[J'
  #           [sp+0x40]  (sp of caller)
 ;; N1: #	out( B1 ) <- in( B46 B35 B36 B42 B37 B38 B44 B39 B43 B40 B34 B41 B45 )  Freq: 1
 ;; B1: #	out( B46 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fbd944826e0:   mov    %eax,-0x18000(%rsp)
  0x00007fbd944826e7:   push   %rbp
  0x00007fbd944826e8:   sub    $0x30,%rsp
  0x00007fbd944826ec:   cmpl   $0x0,0x20(%r15)
  0x00007fbd944826f4:   jne    0x00007fbd94482afa           ;*synchronization entry
                                                            ; - slp_align_micro::micro@-1 (line 11)
  0x00007fbd944826fa:   mov    0xc(%rsi),%r11d              ; implicit exception: dispatches to 0x00007fbd94482ab8
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@4 (line 11)
 ;; B2: #	out( B34 B3 ) <- in( B1 )  Freq: 0.999999
  0x00007fbd944826fe:   lea    -0x8(%r11),%edi
  0x00007fbd94482702:   test   %edi,%edi
  0x00007fbd94482704:   jle    0x00007fbd944829a4           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@8 (line 11)
 ;; B3: #	out( B35 B4 ) <- in( B2 )  Freq: 0.999023
  0x00007fbd9448270a:   mov    0xc(%rdx),%r14d              ; implicit exception: dispatches to 0x00007fbd944829b7
                                                            ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@18 (line 12)
 ;; B4: #	out( B35 B5 ) <- in( B3 )  Freq: 0.999022
  0x00007fbd9448270e:   test   %r14d,%r14d
  0x00007fbd94482711:   jbe    0x00007fbd944829b7
 ;; B5: #	out( B35 B6 ) <- in( B4 )  Freq: 0.999021
  0x00007fbd94482717:   lea    -0x9(%r11),%r10d
  0x00007fbd9448271b:   nop
  0x00007fbd9448271c:   nop
  0x00007fbd9448271d:   nop
  0x00007fbd9448271e:   nop
  0x00007fbd9448271f:   nop
  0x00007fbd94482720:   cmp    %r14d,%r10d
  0x00007fbd94482723:   jae    0x00007fbd944829b7
 ;; B6: #	out( B35 B7 ) <- in( B5 )  Freq: 0.99902
  0x00007fbd94482729:   mov    0xc(%rcx),%r8d               ; implicit exception: dispatches to 0x00007fbd944829b7
                                                            ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@21 (line 12)
 ;; B7: #	out( B35 B8 ) <- in( B6 )  Freq: 0.999019
  0x00007fbd9448272d:   test   %r8d,%r8d
  0x00007fbd94482730:   jbe    0x00007fbd944829b7
 ;; B8: #	out( B35 B9 ) <- in( B7 )  Freq: 0.999018
  0x00007fbd94482736:   cmp    %r8d,%r10d
  0x00007fbd94482739:   jae    0x00007fbd944829b7
 ;; B9: #	out( B35 B10 ) <- in( B8 )  Freq: 0.999017
  0x00007fbd9448273f:   nop
  0x00007fbd94482740:   cmp    $0x7,%r11d
  0x00007fbd94482744:   jbe    0x00007fbd944829b7
 ;; B10: #	out( B35 B11 ) <- in( B9 )  Freq: 0.999016
  0x00007fbd9448274a:   lea    -0x2(%r11),%r10d
  0x00007fbd9448274e:   cmp    %r11d,%r10d
  0x00007fbd94482751:   jae    0x00007fbd944829b7
 ;; B11: #	out( B12 ) <- in( B10 )  Freq: 0.999015
  0x00007fbd94482757:   mov    %edx,%r10d
  0x00007fbd9448275a:   movslq %r11d,%r13
  0x00007fbd9448275d:   lea    -0x8(%r13),%rax
  0x00007fbd94482761:   mov    $0xffffffd0,%r9d
  0x00007fbd94482767:   sub    %r10d,%r9d
  0x00007fbd9448276a:   shr    $0x3,%r9d
  0x00007fbd9448276e:   dec    %r9d
  0x00007fbd94482771:   xor    %ebx,%ebx
  0x00007fbd94482773:   mov    $0x2,%r10d
  0x00007fbd94482779:   bzhi   %r10,%r9,%r10
  0x00007fbd9448277e:   add    $0x1,%r10
  0x00007fbd94482782:   cmp    %r10,%rax
  0x00007fbd94482785:   cmovl  %rax,%r10
  0x00007fbd94482789:   mov    %r10d,%r10d
  0x00007fbd9448278c:   xor    %r9d,%r9d                    ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@11 (line 12)
 ;; B12: #	out( B14 B13 ) <- in( B11 B13 ) Loop( B12-B13 inner pre of N248) Freq: 1.99803
  0x00007fbd9448278f:   movslq %r9d,%rbp                    ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@18 (line 12)
  0x00007fbd94482792:   mov    0x10(%rdx,%rbp,8),%rax
  0x00007fbd94482797:   add    0x10(%rcx,%rbp,8),%rax
  0x00007fbd9448279c:   mov    %rax,0x48(%rsi,%rbp,8)       ;*lastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@23 (line 12)
  0x00007fbd944827a1:   lea    0x1(%r9),%eax
  0x00007fbd944827a5:   cmp    %r10d,%eax
  0x00007fbd944827a8:   jge    0x00007fbd944827af           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@8 (line 11)
 ;; B13: #	out( B12 ) <- in( B12 )  Freq: 0.999015
  0x00007fbd944827aa:   mov    %eax,%r9d
  0x00007fbd944827ad:   jmp    0x00007fbd9448278f
 ;; B14: #	out( B28 B15 ) <- in( B12 )  Freq: 0.999015
  0x00007fbd944827af:   lea    -0x27(%r11),%r10d
  0x00007fbd944827b3:   cmp    %r10d,%eax
  0x00007fbd944827b6:   jge    0x00007fbd94482949
 ;; B15: #	out( B36 B16 ) <- in( B14 )  Freq: 0.999014
  0x00007fbd944827bc:   nop
  0x00007fbd944827bd:   nop
  0x00007fbd944827be:   nop
  0x00007fbd944827bf:   nop
  0x00007fbd944827c0:   cmp    %r14d,%eax
  0x00007fbd944827c3:   jae    0x00007fbd944829f0
 ;; B16: #	out( B37 B17 ) <- in( B15 )  Freq: 0.999013
  0x00007fbd944827c9:   vmovd  %edi,%xmm1
  0x00007fbd944827cd:   lea    0x20(%r9),%edi
  0x00007fbd944827d1:   cmp    %r14d,%edi
  0x00007fbd944827d4:   jae    0x00007fbd94482a04
 ;; B17: #	out( B38 B18 ) <- in( B16 )  Freq: 0.999012
  0x00007fbd944827da:   nop
  0x00007fbd944827db:   nop
  0x00007fbd944827dc:   nop
  0x00007fbd944827dd:   nop
  0x00007fbd944827de:   nop
  0x00007fbd944827df:   nop                                 ;   {other}
  0x00007fbd944827e0:   cmp    %r8d,%eax
  0x00007fbd944827e3:   jae    0x00007fbd94482a18
 ;; B18: #	out( B39 B19 ) <- in( B17 )  Freq: 0.999011
  0x00007fbd944827e9:   cmp    %r8d,%edi
  0x00007fbd944827ec:   jae    0x00007fbd94482a2c
 ;; B19: #	out( B40 B20 ) <- in( B18 )  Freq: 0.99901
  0x00007fbd944827f2:   add    $0x8,%rbp
  0x00007fbd944827f6:   cmp    %r13,%rbp
  0x00007fbd944827f9:   jae    0x00007fbd94482a40
 ;; B20: #	out( B41 B21 ) <- in( B19 )  Freq: 0.999009
  0x00007fbd944827ff:   add    $0x27,%r9d
  0x00007fbd94482803:   cmp    %r11d,%r9d
  0x00007fbd94482806:   jae    0x00007fbd94482a54
 ;; B21: #	out( B22 ) <- in( B20 )  Freq: 0.999008
  0x00007fbd9448280c:   mov    $0x7d00,%r9d
 ;; B22: #	out( B23 ) <- in( B21 B24 ) Loop( B22-B24 ) Freq: 1023.98
  0x00007fbd94482812:   mov    %r11d,%edi
  0x00007fbd94482815:   sub    %eax,%edi
  0x00007fbd94482817:   add    $0xffffffd9,%edi
  0x00007fbd9448281a:   cmp    %eax,%r10d
  0x00007fbd9448281d:   cmovl  %ebx,%edi
  0x00007fbd94482820:   cmp    $0x7d00,%edi
  0x00007fbd94482826:   cmova  %r9d,%edi
  0x00007fbd9448282a:   add    %eax,%edi
  0x00007fbd9448282c:   nop
  0x00007fbd9448282d:   nop
  0x00007fbd9448282e:   nop
  0x00007fbd9448282f:   nop                                 ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@11 (line 12)
 ;; B23: #	out( B23 B24 ) <- in( B22 B23 ) Loop( B23-B23 inner main of N142 strip mined) Freq: 1.04958e+06
  0x00007fbd94482830:   vmovdqu 0x10(%rcx,%rax,8),%ymm0
  0x00007fbd94482836:   vpaddq 0x10(%rdx,%rax,8),%ymm0,%ymm0
  0x00007fbd9448283c:   vmovdqu %ymm0,0x48(%rsi,%rax,8)
  0x00007fbd94482842:   vmovdqu 0x30(%rdx,%rax,8),%ymm0
  0x00007fbd94482848:   vpaddq 0x30(%rcx,%rax,8),%ymm0,%ymm0
  0x00007fbd9448284e:   vmovdqu %ymm0,0x68(%rsi,%rax,8)
  0x00007fbd94482854:   vmovdqu 0x50(%rdx,%rax,8),%ymm0
  0x00007fbd9448285a:   vpaddq 0x50(%rcx,%rax,8),%ymm0,%ymm0
  0x00007fbd94482860:   vmovdqu %ymm0,0x88(%rsi,%rax,8)
  0x00007fbd94482869:   vmovdqu 0x70(%rcx,%rax,8),%ymm0
  0x00007fbd9448286f:   vpaddq 0x70(%rdx,%rax,8),%ymm0,%ymm0
  0x00007fbd94482875:   vmovdqu %ymm0,0xa8(%rsi,%rax,8)
  0x00007fbd9448287e:   vmovdqu 0x90(%rcx,%rax,8),%ymm0
  0x00007fbd94482887:   vpaddq 0x90(%rdx,%rax,8),%ymm0,%ymm0
  0x00007fbd94482890:   vmovdqu %ymm0,0xc8(%rsi,%rax,8)
  0x00007fbd94482899:   vmovdqu 0xb0(%rdx,%rax,8),%ymm0
  0x00007fbd944828a2:   vpaddq 0xb0(%rcx,%rax,8),%ymm0,%ymm0
  0x00007fbd944828ab:   vmovdqu %ymm0,0xe8(%rsi,%rax,8)
  0x00007fbd944828b4:   vmovdqu 0xd0(%rcx,%rax,8),%ymm0
  0x00007fbd944828bd:   vpaddq 0xd0(%rdx,%rax,8),%ymm0,%ymm0
  0x00007fbd944828c6:   vmovdqu %ymm0,0x108(%rsi,%rax,8)
  0x00007fbd944828cf:   vmovdqu 0xf0(%rcx,%rax,8),%ymm0
  0x00007fbd944828d8:   vpaddq 0xf0(%rdx,%rax,8),%ymm0,%ymm0;   {other}
  0x00007fbd944828e1:   vmovdqu %ymm0,0x128(%rsi,%rax,8)    ;*lastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@23 (line 12)
  0x00007fbd944828ea:   add    $0x20,%eax                   ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@24 (line 11)
  0x00007fbd944828ed:   cmp    %edi,%eax
  0x00007fbd944828ef:   jl     0x00007fbd94482830           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@27 (line 11)
 ;; B24: #	out( B22 B25 ) <- in( B23 )  Freq: 1023.98
  0x00007fbd944828f5:   mov    0x30(%r15),%rdi              ; ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) slp_align_micro::micro@27 (line 11)
  0x00007fbd944828f9:   test   %eax,(%rdi)                  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@27 (line 11)
                                                            ;   {poll}
  0x00007fbd944828fb:   nop
  0x00007fbd944828fc:   nop
  0x00007fbd944828fd:   nop
  0x00007fbd944828fe:   nop
  0x00007fbd944828ff:   nop
  0x00007fbd94482900:   cmp    %r10d,%eax
  0x00007fbd94482903:   jl     0x00007fbd94482812
 ;; B25: #	out( B27 B26 ) <- in( B24 )  Freq: 0.999008
  0x00007fbd94482909:   lea    -0xf(%r11),%r10d
  0x00007fbd9448290d:   cmp    %r10d,%eax
  0x00007fbd94482910:   jge    0x00007fbd94482945
  0x00007fbd94482912:   nop
  0x00007fbd94482913:   nop                                 ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@11 (line 12)
 ;; B26: #	out( B26 B27 ) <- in( B25 B26 ) Loop( B26-B26 inner post of N1031) Freq: 0.999008
  0x00007fbd94482914:   vmovdqu 0x10(%rcx,%rax,8),%ymm0
  0x00007fbd9448291a:   vpaddq 0x10(%rdx,%rax,8),%ymm0,%ymm0
  0x00007fbd94482920:   vmovdqu %ymm0,0x48(%rsi,%rax,8)
  0x00007fbd94482926:   vmovdqu 0x30(%rdx,%rax,8),%ymm0
  0x00007fbd9448292c:   vpaddq 0x30(%rcx,%rax,8),%ymm0,%ymm0
  0x00007fbd94482932:   vmovdqu %ymm0,0x68(%rsi,%rax,8)     ;*lastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@23 (line 12)
  0x00007fbd94482938:   add    $0x8,%eax                    ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@24 (line 11)
  0x00007fbd9448293b:   nop
  0x00007fbd9448293c:   nop
  0x00007fbd9448293d:   nop
  0x00007fbd9448293e:   nop
  0x00007fbd9448293f:   nop
  0x00007fbd94482940:   cmp    %r10d,%eax
  0x00007fbd94482943:   jl     0x00007fbd94482914           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@8 (line 11)
 ;; B27: #	out( B28 ) <- in( B26 B25 )  Freq: 0.999008
  0x00007fbd94482945:   vmovd  %xmm1,%edi
 ;; B28: #	out( B34 B29 ) <- in( B14 B27 )  Freq: 0.999009
  0x00007fbd94482949:   cmp    %edi,%eax
  0x00007fbd9448294b:   jge    0x00007fbd944829a4
 ;; B29: #	out( B42 B30 ) <- in( B28 )  Freq: 0.499505
  0x00007fbd94482951:   cmp    %r14d,%eax
  0x00007fbd94482954:   jae    0x00007fbd94482a68
 ;; B30: #	out( B43 B31 ) <- in( B29 )  Freq: 0.499504
  0x00007fbd9448295a:   nop
  0x00007fbd9448295b:   nop
  0x00007fbd9448295c:   nop
  0x00007fbd9448295d:   nop
  0x00007fbd9448295e:   nop
  0x00007fbd9448295f:   nop
  0x00007fbd94482960:   cmp    %r8d,%eax
  0x00007fbd94482963:   jae    0x00007fbd94482a7c
 ;; B31: #	out( B44 B32 ) <- in( B30 )  Freq: 0.499504
  0x00007fbd94482969:   movslq %eax,%r10
  0x00007fbd9448296c:   add    $0x7,%r10
  0x00007fbd94482970:   cmp    %r13,%r10
  0x00007fbd94482973:   jae    0x00007fbd94482a90
 ;; B32: #	out( B45 B33 ) <- in( B31 )  Freq: 0.499503
  0x00007fbd94482979:   lea    0x7(%rax),%r8d
  0x00007fbd9448297d:   nop
  0x00007fbd9448297e:   nop
  0x00007fbd9448297f:   nop
  0x00007fbd94482980:   cmp    %r11d,%r8d
  0x00007fbd94482983:   jae    0x00007fbd94482aa4
  0x00007fbd94482989:   nop
  0x00007fbd9448298a:   nop
  0x00007fbd9448298b:   nop                                 ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@11 (line 12)
 ;; B33: #	out( B33 B34 ) <- in( B32 B33 ) Loop( B33-B33 inner post of N248) Freq: 0.999005
  0x00007fbd9448298c:   mov    0x10(%rdx,%rax,8),%r10
  0x00007fbd94482991:   add    0x10(%rcx,%rax,8),%r10
  0x00007fbd94482996:   mov    %r10,0x48(%rsi,%rax,8)       ;*lastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@23 (line 12)
  0x00007fbd9448299b:   inc    %eax                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@24 (line 11)
  0x00007fbd9448299d:   nop
  0x00007fbd9448299e:   nop
  0x00007fbd9448299f:   nop
  0x00007fbd944829a0:   cmp    %edi,%eax
  0x00007fbd944829a2:   jl     0x00007fbd9448298c
 ;; B34: #	out( N1 ) <- in( B33 B28 B2 )  Freq: 0.999983
  0x00007fbd944829a4:   vzeroupper 
  0x00007fbd944829a7:   add    $0x30,%rsp
  0x00007fbd944829ab:   pop    %rbp
  0x00007fbd944829ac:   cmp    0x28(%r15),%rsp              ;   {poll_return}
  0x00007fbd944829b0:   ja     0x00007fbd94482ae4
  0x00007fbd944829b6:   retq                                ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@8 (line 11)
 ;; B35: #	out( N1 ) <- in( B10 B3 B4 B5 B6 B7 B8 B9 )  Freq: 8.05849e-06
  0x00007fbd944829b7:   mov    %rsi,%rbp
  0x00007fbd944829ba:   mov    %rdx,(%rsp)
  0x00007fbd944829be:   mov    %rcx,0x8(%rsp)
  0x00007fbd944829c3:   mov    $0xffffff6e,%esi
  0x00007fbd944829c8:   mov    %edi,0x10(%rsp)
  0x00007fbd944829cc:   vzeroupper 
  0x00007fbd944829cf:   callq  0x00007fbd943f4ae0           ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) slp_align_micro::micro@8 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fbd944829d4:   nopl   0x100044c(%rax,%rax,1)       ;   {post_call_nop}
  0x00007fbd944829dc:   movabs $0x7fbd9939b628,%rdi         ;   {external_word}
  0x00007fbd944829e6:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd944829ea:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd944829ef:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@8 (line 11)
 ;; B36: #	out( N1 ) <- in( B15 )  Freq: 1.01228e-06
  0x00007fbd944829f0:   movabs $0x7fbd99463c90,%rdi         ;   {external_word}
  0x00007fbd944829fa:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd944829fe:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd94482a03:   hlt    
 ;; B37: #	out( N1 ) <- in( B16 )  Freq: 1.01228e-06
  0x00007fbd94482a04:   movabs $0x7fbd99463c90,%rdi         ;   {external_word}
  0x00007fbd94482a0e:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd94482a12:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd94482a17:   hlt    
 ;; B38: #	out( N1 ) <- in( B17 )  Freq: 1.01228e-06
  0x00007fbd94482a18:   movabs $0x7fbd99463c90,%rdi         ;   {external_word}
  0x00007fbd94482a22:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd94482a26:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd94482a2b:   hlt    
 ;; B39: #	out( N1 ) <- in( B18 )  Freq: 1.01228e-06
  0x00007fbd94482a2c:   movabs $0x7fbd99463c90,%rdi         ;   {external_word}
  0x00007fbd94482a36:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd94482a3a:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd94482a3f:   hlt    
 ;; B40: #	out( N1 ) <- in( B19 )  Freq: 1.01228e-06
  0x00007fbd94482a40:   movabs $0x7fbd99463c90,%rdi         ;   {external_word}
  0x00007fbd94482a4a:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd94482a4e:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd94482a53:   hlt    
 ;; B41: #	out( N1 ) <- in( B20 )  Freq: 1.01228e-06
  0x00007fbd94482a54:   movabs $0x7fbd99463c90,%rdi         ;   {external_word}
  0x00007fbd94482a5e:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd94482a62:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd94482a67:   hlt    
 ;; B42: #	out( N1 ) <- in( B29 )  Freq: 5.06138e-07
  0x00007fbd94482a68:   movabs $0x7fbd99463c90,%rdi         ;   {external_word}
  0x00007fbd94482a72:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd94482a76:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd94482a7b:   hlt    
 ;; B43: #	out( N1 ) <- in( B30 )  Freq: 5.06137e-07
  0x00007fbd94482a7c:   movabs $0x7fbd99463c90,%rdi         ;   {external_word}
  0x00007fbd94482a86:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd94482a8a:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd94482a8f:   hlt    
 ;; B44: #	out( N1 ) <- in( B31 )  Freq: 5.06136e-07
  0x00007fbd94482a90:   movabs $0x7fbd99463c90,%rdi         ;   {external_word}
  0x00007fbd94482a9a:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd94482a9e:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd94482aa3:   hlt    
 ;; B45: #	out( N1 ) <- in( B32 )  Freq: 5.06136e-07
  0x00007fbd94482aa4:   movabs $0x7fbd99463c90,%rdi         ;   {external_word}
  0x00007fbd94482aae:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd94482ab2:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd94482ab7:   hlt    
 ;; B46: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
  0x00007fbd94482ab8:   mov    $0xfffffff6,%esi
  0x00007fbd94482abd:   nop
  0x00007fbd94482abe:   nop
  0x00007fbd94482abf:   nop
  0x00007fbd94482ac0:   vzeroupper 
  0x00007fbd94482ac3:   callq  0x00007fbd943f4ae0           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@4 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fbd94482ac8:   nopl   0x2000540(%rax,%rax,1)       ;   {post_call_nop}
  0x00007fbd94482ad0:   movabs $0x7fbd9939b628,%rdi         ;   {external_word}
  0x00007fbd94482ada:   and    $0xfffffffffffffff0,%rsp
  0x00007fbd94482ade:   callq  0x00007fbd98976a60           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fbd94482ae3:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - slp_align_micro::micro@8 (line 11)
  0x00007fbd94482ae4:   movabs $0x7fbd944829ac,%r10         ;   {internal_word}
  0x00007fbd94482aee:   mov    %r10,0x498(%r15)
  0x00007fbd94482af5:   jmpq   0x00007fbd943fe760           ;   {runtime_call SafepointBlob}
  0x00007fbd94482afa:   callq  Stub::method_entry_barrier   ;   {runtime_call Stub::method_entry_barrier}
  0x00007fbd94482aff:   jmpq   0x00007fbd944826fa
  0x00007fbd94482b04:   hlt    
  0x00007fbd94482b05:   hlt    
  0x00007fbd94482b06:   hlt    
  0x00007fbd94482b07:   hlt    
[Exception Handler]
  0x00007fbd94482b08:   jmpq   0x00007fbd943fec60           ;   {runtime_call ExceptionBlob}
[Deopt Handler Code]
  0x00007fbd94482b0d:   callq  0x00007fbd94482b12
  0x00007fbd94482b12:   subq   $0x5,(%rsp)
  0x00007fbd94482b17:   jmpq   0x00007fbd943fcea0           ;   {runtime_call DeoptimizationBlob}
  0x00007fbd94482b1c:   hlt    
  0x00007fbd94482b1d:   hlt    
  0x00007fbd94482b1e:   hlt    
  0x00007fbd94482b1f:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007fbd94482b20:   0x000000011f45e148 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f45e148}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007fbd94482b28:   0x00007fbd4060c5a8 {method} {0x00007fbd4060c5a8} 'micro' '([J[J[J)V' in 'slp_align_micro'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007fbd944826df offset=ffffffff bits=0):
PcDesc(pc=0x00007fbd944826fa offset=1a bits=0):
   slp_align_micro::micro@-1 (line 11)
PcDesc(pc=0x00007fbd944826fe offset=1e bits=0):
   slp_align_micro::micro@4 (line 11)
PcDesc(pc=0x00007fbd9448270a offset=2a bits=0):
   slp_align_micro::micro@8 (line 11)
PcDesc(pc=0x00007fbd9448270e offset=2e bits=0):
   slp_align_micro::micro@18 (line 12)
PcDesc(pc=0x00007fbd9448272d offset=4d bits=0):
   slp_align_micro::micro@21 (line 12)
PcDesc(pc=0x00007fbd9448278f offset=af bits=0):
   slp_align_micro::micro@11 (line 12)
PcDesc(pc=0x00007fbd94482792 offset=b2 bits=0):
   slp_align_micro::micro@18 (line 12)
PcDesc(pc=0x00007fbd944827a1 offset=c1 bits=0):
   slp_align_micro::micro@23 (line 12)
PcDesc(pc=0x00007fbd944827aa offset=ca bits=0):
   slp_align_micro::micro@8 (line 11)
PcDesc(pc=0x00007fbd94482830 offset=150 bits=0):
   slp_align_micro::micro@11 (line 12)
PcDesc(pc=0x00007fbd944828ea offset=20a bits=0):
   slp_align_micro::micro@23 (line 12)
PcDesc(pc=0x00007fbd944828ed offset=20d bits=0):
   slp_align_micro::micro@24 (line 11)
PcDesc(pc=0x00007fbd944828f5 offset=215 bits=0):
   slp_align_micro::micro@27 (line 11)
PcDesc(pc=0x00007fbd944828f9 offset=219 bits=1):
   slp_align_micro::micro@27 (line 11)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: reg rax [0],int
PcDesc(pc=0x00007fbd944828fb offset=21b bits=0):
   slp_align_micro::micro@27 (line 11)
PcDesc(pc=0x00007fbd94482914 offset=234 bits=0):
   slp_align_micro::micro@11 (line 12)
PcDesc(pc=0x00007fbd94482938 offset=258 bits=0):
   slp_align_micro::micro@23 (line 12)
PcDesc(pc=0x00007fbd9448293b offset=25b bits=0):
   slp_align_micro::micro@24 (line 11)
PcDesc(pc=0x00007fbd94482945 offset=265 bits=0):
   slp_align_micro::micro@8 (line 11)
PcDesc(pc=0x00007fbd9448298c offset=2ac bits=0):
   slp_align_micro::micro@11 (line 12)
PcDesc(pc=0x00007fbd9448299b offset=2bb bits=0):
   slp_align_micro::micro@23 (line 12)
PcDesc(pc=0x00007fbd9448299d offset=2bd bits=0):
   slp_align_micro::micro@24 (line 11)
PcDesc(pc=0x00007fbd944829b7 offset=2d7 bits=0):
   slp_align_micro::micro@8 (line 11)
PcDesc(pc=0x00007fbd944829d4 offset=2f4 bits=1):
   slp_align_micro::micro@8 (line 11)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: 0
   Expression stack
    - @0: 0
    - @1: stack[16]
PcDesc(pc=0x00007fbd944829f0 offset=310 bits=0):
   slp_align_micro::micro@8 (line 11)
PcDesc(pc=0x00007fbd94482ac8 offset=3e8 bits=0):
   slp_align_micro::micro@4 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: null
PcDesc(pc=0x00007fbd94482ae4 offset=404 bits=0):
   slp_align_micro::micro@8 (line 11)
PcDesc(pc=0x00007fbd94482b21 offset=441 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 3 OopMaps

ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop } pc offsets: 537 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 756 
ImmutableOopMap {} pc offsets: 1000 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007fbd944826fa offset=1a):
   slp_align_micro::micro@-1 (line 11)
ScopeDesc(pc=0x00007fbd944826fe offset=1e):
   slp_align_micro::micro@4 (line 11)
ScopeDesc(pc=0x00007fbd9448270a offset=2a):
   slp_align_micro::micro@8 (line 11)
ScopeDesc(pc=0x00007fbd9448270e offset=2e):
   slp_align_micro::micro@18 (line 12)
ScopeDesc(pc=0x00007fbd9448272d offset=4d):
   slp_align_micro::micro@21 (line 12)
ScopeDesc(pc=0x00007fbd9448278f offset=af):
   slp_align_micro::micro@11 (line 12)
ScopeDesc(pc=0x00007fbd94482792 offset=b2):
   slp_align_micro::micro@18 (line 12)
ScopeDesc(pc=0x00007fbd944827a1 offset=c1):
   slp_align_micro::micro@23 (line 12)
ScopeDesc(pc=0x00007fbd944827aa offset=ca):
   slp_align_micro::micro@8 (line 11)
ScopeDesc(pc=0x00007fbd94482830 offset=150):
   slp_align_micro::micro@11 (line 12)
ScopeDesc(pc=0x00007fbd944828ea offset=20a):
   slp_align_micro::micro@23 (line 12)
ScopeDesc(pc=0x00007fbd944828ed offset=20d):
   slp_align_micro::micro@24 (line 11)
ScopeDesc(pc=0x00007fbd944828f5 offset=215):
   slp_align_micro::micro@27 (line 11)
ScopeDesc(pc=0x00007fbd944828f9 offset=219):
   slp_align_micro::micro@27 (line 11)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: reg rax [0],int
ScopeDesc(pc=0x00007fbd944828fb offset=21b):
   slp_align_micro::micro@27 (line 11)
ScopeDesc(pc=0x00007fbd94482914 offset=234):
   slp_align_micro::micro@11 (line 12)
ScopeDesc(pc=0x00007fbd94482938 offset=258):
   slp_align_micro::micro@23 (line 12)
ScopeDesc(pc=0x00007fbd9448293b offset=25b):
   slp_align_micro::micro@24 (line 11)
ScopeDesc(pc=0x00007fbd94482945 offset=265):
   slp_align_micro::micro@8 (line 11)
ScopeDesc(pc=0x00007fbd9448298c offset=2ac):
   slp_align_micro::micro@11 (line 12)
ScopeDesc(pc=0x00007fbd9448299b offset=2bb):
   slp_align_micro::micro@23 (line 12)
ScopeDesc(pc=0x00007fbd9448299d offset=2bd):
   slp_align_micro::micro@24 (line 11)
ScopeDesc(pc=0x00007fbd944829b7 offset=2d7):
   slp_align_micro::micro@8 (line 11)
ScopeDesc(pc=0x00007fbd944829d4 offset=2f4):
   slp_align_micro::micro@8 (line 11)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: 0
   Expression stack
    - @0: 0
    - @1: stack[16]
ScopeDesc(pc=0x00007fbd944829f0 offset=310):
   slp_align_micro::micro@8 (line 11)
ScopeDesc(pc=0x00007fbd94482ac8 offset=3e8):
   slp_align_micro::micro@4 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: null
ScopeDesc(pc=0x00007fbd94482ae4 offset=404):
   slp_align_micro::micro@8 (line 11)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007fbd94482668: 00ff
relocInfo@0x00007fbd94482668 [type=0(none) addr=0x00007fbd944827df offset=255]
         @0x00007fbd9448266a: 00ff
relocInfo@0x00007fbd9448266a [type=0(none) addr=0x00007fbd944828de offset=255]
         @0x00007fbd9448266c: 501b
relocInfo@0x00007fbd9448266c [type=10(poll) addr=0x00007fbd944828f9 offset=27]
         @0x00007fbd9448266e: 58b3
relocInfo@0x00007fbd9448266e [type=11(poll_return) addr=0x00007fbd944829ac offset=179]
         @0x00007fbd94482670: 3123
relocInfo@0x00007fbd94482670 [type=6(runtime_call) addr=0x00007fbd944829cf offset=35 format=1] | [destination=0x00007fbd943f4ae0] UncommonTrapBlob
         @0x00007fbd94482672: 8005
relocInfo@0x00007fbd94482672 [type=16(post_call_nop) addr=0x00007fbd944829d4 offset=5]
         @0x00007fbd94482674: 78173808
relocInfo@0x00007fbd94482676 [type=7(external_word) addr=0x00007fbd944829dc offset=8 data=23] | [target=0x00007fbd9939b628]
         @0x00007fbd94482678: 310e
relocInfo@0x00007fbd94482678 [type=6(runtime_call) addr=0x00007fbd944829ea offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd9448267a: 78193806
relocInfo@0x00007fbd9448267c [type=7(external_word) addr=0x00007fbd944829f0 offset=6 data=25] | [target=0x00007fbd99463c90]
         @0x00007fbd9448267e: 310e
relocInfo@0x00007fbd9448267e [type=6(runtime_call) addr=0x00007fbd944829fe offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd94482680: 78193806
relocInfo@0x00007fbd94482682 [type=7(external_word) addr=0x00007fbd94482a04 offset=6 data=25] | [target=0x00007fbd99463c90]
         @0x00007fbd94482684: 310e
relocInfo@0x00007fbd94482684 [type=6(runtime_call) addr=0x00007fbd94482a12 offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd94482686: 78193806
relocInfo@0x00007fbd94482688 [type=7(external_word) addr=0x00007fbd94482a18 offset=6 data=25] | [target=0x00007fbd99463c90]
         @0x00007fbd9448268a: 310e
relocInfo@0x00007fbd9448268a [type=6(runtime_call) addr=0x00007fbd94482a26 offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd9448268c: 78193806
relocInfo@0x00007fbd9448268e [type=7(external_word) addr=0x00007fbd94482a2c offset=6 data=25] | [target=0x00007fbd99463c90]
         @0x00007fbd94482690: 310e
relocInfo@0x00007fbd94482690 [type=6(runtime_call) addr=0x00007fbd94482a3a offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd94482692: 78193806
relocInfo@0x00007fbd94482694 [type=7(external_word) addr=0x00007fbd94482a40 offset=6 data=25] | [target=0x00007fbd99463c90]
         @0x00007fbd94482696: 310e
relocInfo@0x00007fbd94482696 [type=6(runtime_call) addr=0x00007fbd94482a4e offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd94482698: 78193806
relocInfo@0x00007fbd9448269a [type=7(external_word) addr=0x00007fbd94482a54 offset=6 data=25] | [target=0x00007fbd99463c90]
         @0x00007fbd9448269c: 310e
relocInfo@0x00007fbd9448269c [type=6(runtime_call) addr=0x00007fbd94482a62 offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd9448269e: 78193806
relocInfo@0x00007fbd944826a0 [type=7(external_word) addr=0x00007fbd94482a68 offset=6 data=25] | [target=0x00007fbd99463c90]
         @0x00007fbd944826a2: 310e
relocInfo@0x00007fbd944826a2 [type=6(runtime_call) addr=0x00007fbd94482a76 offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd944826a4: 78193806
relocInfo@0x00007fbd944826a6 [type=7(external_word) addr=0x00007fbd94482a7c offset=6 data=25] | [target=0x00007fbd99463c90]
         @0x00007fbd944826a8: 310e
relocInfo@0x00007fbd944826a8 [type=6(runtime_call) addr=0x00007fbd94482a8a offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd944826aa: 78193806
relocInfo@0x00007fbd944826ac [type=7(external_word) addr=0x00007fbd94482a90 offset=6 data=25] | [target=0x00007fbd99463c90]
         @0x00007fbd944826ae: 310e
relocInfo@0x00007fbd944826ae [type=6(runtime_call) addr=0x00007fbd94482a9e offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd944826b0: 78193806
relocInfo@0x00007fbd944826b2 [type=7(external_word) addr=0x00007fbd94482aa4 offset=6 data=25] | [target=0x00007fbd99463c90]
         @0x00007fbd944826b4: 310e
relocInfo@0x00007fbd944826b4 [type=6(runtime_call) addr=0x00007fbd94482ab2 offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd944826b6: 3111
relocInfo@0x00007fbd944826b6 [type=6(runtime_call) addr=0x00007fbd94482ac3 offset=17 format=1] | [destination=0x00007fbd943f4ae0] UncommonTrapBlob
         @0x00007fbd944826b8: 8005
relocInfo@0x00007fbd944826b8 [type=16(post_call_nop) addr=0x00007fbd94482ac8 offset=5]
         @0x00007fbd944826ba: 78173808
relocInfo@0x00007fbd944826bc [type=7(external_word) addr=0x00007fbd94482ad0 offset=8 data=23] | [target=0x00007fbd9939b628]
         @0x00007fbd944826be: 310e
relocInfo@0x00007fbd944826be [type=6(runtime_call) addr=0x00007fbd94482ade offset=14 format=1] | [destination=0x00007fbd98976a60] MacroAssembler::debug64(char*, long, long*)
         @0x00007fbd944826c0: 79384006
relocInfo@0x00007fbd944826c2 [type=8(internal_word) addr=0x00007fbd94482ae4 offset=6 data=312] | [target=0x00007fbd944829ac]
         @0x00007fbd944826c4: 3111
relocInfo@0x00007fbd944826c4 [type=6(runtime_call) addr=0x00007fbd94482af5 offset=17 format=1] | [destination=0x00007fbd943fe760] SafepointBlob
         @0x00007fbd944826c6: 3105
relocInfo@0x00007fbd944826c6 [type=6(runtime_call) addr=0x00007fbd94482afa offset=5 format=1] | [destination=0x00007fbd9435c0a0] Stub::method_entry_barrier
         @0x00007fbd944826c8: 000e
relocInfo@0x00007fbd944826c8 [type=0(none) addr=0x00007fbd94482b08 offset=14]
         @0x00007fbd944826ca: 3100
relocInfo@0x00007fbd944826ca [type=6(runtime_call) addr=0x00007fbd94482b08 offset=0 format=1] | [destination=0x00007fbd943fec60] ExceptionBlob
         @0x00007fbd944826cc: 310f
relocInfo@0x00007fbd944826cc [type=6(runtime_call) addr=0x00007fbd94482b17 offset=15 format=1] | [destination=0x00007fbd943fcea0] DeoptimizationBlob
         @0x00007fbd944826ce: 0000
relocInfo@0x00007fbd944826ce [type=0(none) addr=0x00007fbd94482b17 offset=0]
         @0x00007fbd944826d0: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type evol_method
  method  = *{method} {0x00007fbd4060c5a8} 'micro' '([J[J[J)V' in 'slp_align_micro'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 3 entries, 28 bytes):
{
   < 0x00007fbd944826fa, 0x00007fbd94482ab8 > < 0x00007fbd9448270a, 0x00007fbd944829b7 > < 0x00007fbd94482729, 0x00007fbd944829b7 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 nullptr-oop
#1: 0x000000011f45e148 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f45e148}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 nullptr-oop
#1: 0x00007fbd4060c5a8 {method} {0x00007fbd4060c5a8} 'micro' '([J[J[J)V' in 'slp_align_micro'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[res] [0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 6, 8, 10, 12, 14, 16]
------------------------------------------------------------------------
static slp_align_micro::micro([J[J[J)V
  interpreter_invocation_count:          21
  invocation_counter:                    21
  backedge_counter:                   20480
  decompile_count:                        0
  mdo size: 472 bytes

   0 iconst_0
   1 istore_3
   2 iload_3
   3 fast_aload_0
   4 arraylength
   5 bipush 8
   7 isub
   8 if_icmpge 30
  0    bci: 8    BranchData         taken(15) displacement(56)
                                    not taken(15360)
  11 fast_aload_0
  12 iload_3
  13 bipush 7
  15 iadd
  16 aload_1
  17 iload_3
  18 laload
  19 aload_2
  20 iload_3
  21 laload
  22 ladd
  23 lastore
  24 iinc #3 1
  27 goto 2
  32   bci: 27   JumpData           taken(15360) displacement(-32)
  30 return
------------------------------------------------------------------------
Total MDO size: 472 bytes
