CompileCommand: print loop.doSum bool print = true
CompileCommand: compileonly loop.doSum bool compileonly = true
Counted          Loop: N503/N454  counted [int,1029),+1 (-1 iters) 
Loop: N0/N0  has_sfpt
  Loop: N492/N278  limit_check profile_predicated predicated sfpts={ 278 }
  Loop: N502/N501  limit_check profile_predicated predicated
    Loop: N503/N454  limit_check profile_predicated predicated counted [int,1029),+1 (-1 iters)  has_sfpt strip_mined
Predicate IC   Loop: N492/N278  limit_check profile_predicated predicated sfpts={ 278 }
Predicate IC   Loop: N492/N278  limit_check profile_predicated predicated sfpts={ 278 }
Predicate IC   Loop: N492/N278  limit_check profile_predicated predicated sfpts={ 278 }
Predicate IC     Loop: N503/N454  limit_check profile_predicated predicated counted [int,1029),+1 (6 iters)  has_sfpt strip_mined
Predicate RC     Loop: N503/N454  limit_check profile_predicated predicated counted [int,1029),+1 (6 iters)  has_sfpt strip_mined
Predicate IC     Loop: N503/N454  limit_check profile_predicated predicated counted [int,1029),+1 (6 iters)  has_sfpt strip_mined
Predicate RC     Loop: N503/N454  limit_check profile_predicated predicated counted [int,1029),+1 (6 iters)  has_sfpt strip_mined
Predicate IC     Loop: N503/N454  limit_check profile_predicated predicated counted [int,1029),+1 (6 iters)  has_sfpt strip_mined
Predicate RC     Loop: N503/N454  limit_check profile_predicated predicated counted [int,1029),+1 (6 iters)  has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N492/N278  limit_check profile_predicated predicated sfpts={ 278 }
  Loop: N502/N501  limit_check profile_predicated predicated sfpts={ 504 }
    Loop: N503/N454  limit_check profile_predicated predicated counted [int,1029),+1 (6 iters)  has_sfpt strip_mined
PartialPeel    Loop: N492/N278  limit_check profile_predicated predicated sfpts={ 278 }
Counted          Loop: N769/N166  counted [int,1024),+1 (-1 iters) 
Loop: N0/N0  has_sfpt
  Loop: N768/N767 
    Loop: N769/N166  counted [int,1024),+1 (-1 iters)  has_sfpt strip_mined
  Loop: N502/N501  limit_check profile_predicated predicated sfpts={ 504 }
    Loop: N503/N454  limit_check profile_predicated predicated counted [int,1029),+1 (6 iters)  has_sfpt strip_mined
PreMainPost      Loop: N769/N166  counted [int,1024),+1 (1020 iters)  has_sfpt strip_mined
RangeCheck       Loop: N769/N166  counted [int,1024),+1 (1020 iters)  main has_sfpt strip_mined
Unroll 2         Loop: N769/N166  counted [int,int),+1 (1020 iters)  main has_sfpt strip_mined
PreMainPost      Loop: N503/N454  limit_check profile_predicated predicated counted [int,1029),+1 (6 iters)  has_sfpt strip_mined
Unroll 2         Loop: N503/N454  counted [int,1029),+1 (6 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N866/N880  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N768/N767  sfpts={ 770 }
    Loop: N1167/N166  counted [int,int),+2 (1020 iters)  main has_sfpt strip_mined
  Loop: N794/N808  counted [int,1024),+1 (4 iters)  post has_sfpt
  Loop: N1268/N1270  limit_check profile_predicated predicated counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N502/N501  sfpts={ 504 }
    Loop: N1479/N454  counted [int,1028),+2 (6 iters)  main has_sfpt strip_mined
  Loop: N1228/N1230  counted [int,1029),+1 (4 iters)  post has_sfpt
Unroll 4         Loop: N1167/N166  counted [int,int),+2 (1020 iters)  main has_sfpt strip_mined
Unroll 4         Loop: N1479/N454  counted [int,1028),+2 (6 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N866/N880  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N768/N767  sfpts={ 770 }
    Loop: N1613/N166  counted [int,int),+4 (1020 iters)  main has_sfpt strip_mined
  Loop: N794/N808  counted [int,1024),+1 (4 iters)  post has_sfpt
  Loop: N1268/N1270  limit_check profile_predicated predicated counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N502/N501  sfpts={ 504 }
    Loop: N1709/N454  counted [int,1026),+4 (6 iters)  main has_sfpt strip_mined
  Loop: N1228/N1230  counted [int,1029),+1 (4 iters)  post has_sfpt
Unroll 8         Loop: N1613/N166  counted [int,int),+4 (1020 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N866/N880  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N768/N767  sfpts={ 770 }
    Loop: N1845/N166  counted [int,int),+8 (1020 iters)  main has_sfpt strip_mined
  Loop: N794/N808  counted [int,1024),+1 (4 iters)  post has_sfpt
  Loop: N1268/N1270  limit_check profile_predicated predicated counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N502/N501  sfpts={ 504 }
    Loop: N1709/N454  counted [int,1026),+4 (6 iters)  main has_sfpt strip_mined
  Loop: N1228/N1230  counted [int,1029),+1 (4 iters)  post has_sfpt
Unroll 16         Loop: N1845/N166  counted [int,int),+8 (1020 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N866/N880  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N768/N767  sfpts={ 770 }
    Loop: N2038/N166  counted [int,int),+16 (1020 iters)  main has_sfpt strip_mined
  Loop: N794/N808  counted [int,1024),+1 (4 iters)  post has_sfpt
  Loop: N1268/N1270  limit_check profile_predicated predicated counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N502/N501  sfpts={ 504 }
    Loop: N1709/N454  counted [int,1026),+4 (6 iters)  main has_sfpt strip_mined
  Loop: N1228/N1230  counted [int,1029),+1 (4 iters)  post has_sfpt
PredicatesOff
Loop: N0/N0  has_sfpt
  Loop: N866/N880  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N768/N767  sfpts={ 770 }
    Loop: N2038/N166  counted [int,int),+16 (1020 iters)  main has_sfpt strip_mined
  Loop: N794/N808  counted [int,1024),+1 (4 iters)  post has_sfpt
  Loop: N1268/N1270  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N502/N501  sfpts={ 504 }
    Loop: N1709/N454  counted [int,1026),+4 (6 iters)  main has_sfpt strip_mined
  Loop: N1228/N1230  counted [int,1029),+1 (4 iters)  post has_sfpt
SuperWord::output        Loop: N2038/N166  counted [int,int),+16 (1020 iters)  main has_sfpt strip_mined
PhaseIdealLoop::create_reserve_version_of_loop:
	 iff = 2076,  2076  If  ===  1915  115  [[ 2077  2078 ]] P=0.999999, C=-1.000000
	 iffast = 2077,  2077  IfTrue  ===  2076  [[]] #1
	 ifslow = 2078,  2078  IfFalse  ===  2076  [[]] #0
	 before replace_input_of: head = 2038,  2038  CountedLoop  ===  2038  768  166  [[ 1924  1935  1946  1957  1961  1965  1969  1973  2013  2018  2021  2024  2028  2031  2034  2037  2038  1787  2041  2042  1798  1809  1821  1823  1837  1841  1844  1170  1583  662  1597  1609  1612  764  688  1145 ]] inner stride: 16 main of N2038 strip mined !orig=[1845],[1613],[1167],[769],[702],[659] !jvms: loop::doSum @ bci:17 (line 10)
	 before replace_input_of: slow_head = 2305,  2305  CountedLoop  ===  2305  2311  2307  [[ 2079  2090  2101  2112  2116  2120  2124  2128  2167  2171  2175  2179  2183  2187  2199  2222  2226  2261  2264  2267  2270  2273  2276  2279  2283  2286  2289  2292  2295  2298  2301  2304  2305  2306  2308  2309 ]] inner stride: 16 main of N2305 strip mined !orig=2038,[1845],[1613],[1167],[769],[702],[659] !jvms: loop::doSum @ bci:17 (line 10)
	 after  replace_input_of: head = 2038,  2038  CountedLoop  ===  2038  768  166  [[ 1924  1935  1946  1957  1961  1965  1969  1973  2013  2018  2021  2024  2028  2031  2034  2037  2038  1787  2041  2042  1798  1809  1821  1823  1837  1841  1844  1170  1583  662  1597  1609  1612  764  688  1145 ]] inner stride: 16 main of N2038 strip mined !orig=[1845],[1613],[1167],[769],[702],[659] !jvms: loop::doSum @ bci:17 (line 10)
	 after  replace_input_of: slow_head = 2305,  2305  CountedLoop  ===  2305  2311  2307  [[ 2079  2090  2101  2112  2116  2120  2124  2128  2167  2171  2175  2179  2183  2187  2199  2222  2226  2261  2264  2267  2270  2273  2276  2279  2283  2286  2289  2292  2295  2298  2301  2304  2305  2306  2308  2309 ]] inner stride: 16 main of N2305 strip mined !orig=2038,[1845],[1613],[1167],[769],[702],[659] !jvms: loop::doSum @ bci:17 (line 10)
SuperWord::output        Loop: N1709/N454  counted [int,1026),+4 (6 iters)  main has_sfpt strip_mined
PhaseIdealLoop::create_reserve_version_of_loop:
	 iff = 2335,  2335  If  ===  1673  115  [[ 2336  2337 ]] P=0.999999, C=-1.000000
	 iffast = 2336,  2336  IfTrue  ===  2335  [[]] #1
	 ifslow = 2337,  2337  IfFalse  ===  2335  [[]] #0
	 before replace_input_of: head = 1709,  1709  CountedLoop  ===  1709  502  454  [[ 1679  1693  1709  1457  1712  1713  497  444 ]] inner stride: 4 main of N1709 strip mined !orig=[1479],[503],[493],[335] !jvms: loop::doSum @ bci:38 (line 12)
	 before replace_input_of: slow_head = 2396,  2396  CountedLoop  ===  2396  2402  2398  [[ 2338  2349  2363  2374  2396  2397  2399  2400 ]] inner stride: 4 main of N2396 strip mined !orig=1709,[1479],[503],[493],[335] !jvms: loop::doSum @ bci:38 (line 12)
	 after  replace_input_of: head = 1709,  1709  CountedLoop  ===  1709  502  454  [[ 1679  1693  1709  1457  1712  1713  497  444 ]] inner stride: 4 main of N1709 strip mined !orig=[1479],[503],[493],[335] !jvms: loop::doSum @ bci:38 (line 12)
	 after  replace_input_of: slow_head = 2396,  2396  CountedLoop  ===  2396  2402  2398  [[ 2338  2349  2363  2374  2396  2397  2399  2400 ]] inner stride: 4 main of N2396 strip mined !orig=1709,[1479],[503],[493],[335] !jvms: loop::doSum @ bci:38 (line 12)
Loop: N0/N0  has_sfpt
  Loop: N866/N880  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N768/N767  sfpts={ 770 }
    Loop: N2038/N166  counted [int,int),+16 (1020 iters)  main vector has_sfpt strip_mined
  Loop: N794/N808  counted [int,1024),+1 (4 iters)  post has_sfpt
  Loop: N1268/N1270  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N502/N501  sfpts={ 504 }
    Loop: N1709/N454  counted [int,1026),+4 (6 iters)  main vector has_sfpt strip_mined
  Loop: N1228/N1230  counted [int,1029),+1 (4 iters)  post has_sfpt
PostVector      Loop: N2038/N166  counted [int,int),+16 (1020 iters)  main vector has_sfpt strip_mined
Unroll 32         Loop: N2038/N166  counted [int,int),+16 (1020 iters)  main vector has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N866/N880  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N768/N767  sfpts={ 770 }
    Loop: N2546/N166  counted [int,int),+32 (1020 iters)  main vector has_sfpt strip_mined
  Loop: N2453/N2455  counted [int,int),+16 (16 iters)  post vector has_sfpt
  Loop: N794/N808  counted [int,1024),+1 (4 iters)  post has_sfpt
  Loop: N1268/N1270  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N502/N501  sfpts={ 504 }
    Loop: N1709/N454  counted [int,1026),+4 (6 iters)  main vector has_sfpt strip_mined
  Loop: N1228/N1230  counted [int,1029),+1 (4 iters)  post has_sfpt
Unroll 64         Loop: N2546/N166  counted [int,int),+32 (1020 iters)  main vector has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N866/N880  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N768/N767  sfpts={ 770 }
    Loop: N2656/N166  counted [int,int),+64 (1020 iters)  main vector has_sfpt strip_mined
  Loop: N2453/N2455  counted [int,int),+16 (16 iters)  post vector has_sfpt
  Loop: N794/N808  counted [int,1024),+1 (4 iters)  post has_sfpt
  Loop: N1268/N1270  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N502/N501  sfpts={ 504 }
    Loop: N1709/N454  counted [int,1026),+4 (6 iters)  main vector has_sfpt strip_mined
  Loop: N1228/N1230  counted [int,1029),+1 (4 iters)  post has_sfpt

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 24 ------------------------
{method}
 - this oop:          0x00007fb86740e428
 - method holder:     'loop'
 - constants:         0x00007fb86740e048 constant pool [61]/operands[5] {0x00007fb86740e048} for 'loop' cache=0x00007fb86740e628
 - access:            0xc1000001  public 
 - name:              'doSum'
 - signature:         '([F[F[F)V'
 - max stack:         6
 - max locals:        5
 - size of params:    4
 - method size:       13
 - vtable index:      5
 - i2i entry:         0x00007fb8c100dc00
 - adapters:          AHE@0x00007fb8c4309880: 0xbbbb i2c: 0x00007fb8c10a67e0 c2i: 0x00007fb8c10a68cc c2iUV: 0x00007fb8c10a6896 c2iNCI: 0x00007fb8c10a6909
 - compiled entry     0x00007fb8c10a68cc
 - code size:         58
 - code start:        0x00007fb86740e3d8
 - code end (excl):   0x00007fb86740e412
 - method data:       0x00007fb86740e800
 - checked ex length: 0
 - linenumber start:  0x00007fb86740e412
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 24 -----------------------
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 96 --
#r591 rsp+92: in_preserve
#r590 rsp+88: return address
#r589 rsp+84: in_preserve
#r588 rsp+80: saved fp register
#r587 rsp+76: pad2, stack alignment
#r586 rsp+72: pad2, stack alignment
#r585 rsp+68: Fixed slot 1
#r584 rsp+64: Fixed slot 0
#r607 rsp+60: spill
#r606 rsp+56: spill
#r605 rsp+52: spill
#r604 rsp+48: spill
#r603 rsp+44: spill
#r602 rsp+40: spill
#r601 rsp+36: spill
#r600 rsp+32: spill
#r599 rsp+28: spill
#r598 rsp+24: spill
#r597 rsp+20: spill
#r596 rsp+16: spill
#r595 rsp+12: spill
#r594 rsp+ 8: spill
#r593 rsp+ 4: spill
#r592 rsp+ 0: spill
#
000     N825: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B76 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (176 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

01c     movq    R14, [RSI + #24 (8-bit)]	# ptr
020     movq    RBP, [RSI + #16 (8-bit)]	# ptr
024     movl    RBX, [RSI]	# int
026     movq    R13, [RSI + #8 (8-bit)]	# ptr
02a     movq    RDI, RSI	# spill
02d     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
        nop 	# 3 bytes pad for loops and calls
040     testq   R14, R14	# ptr
043     je     B76  P=0.001000 C=-1.000000

049     B2: #	out( B95 B3 ) <- in( B1 )  Freq: 0.999
049     movl    R10, [R14 + #8 (8-bit)]	# compressed klass ptr
04d     cmpl    R10, narrowklass: precise klass [F: 0x00007fb84400baf8:Constant:exact *	# compressed klass ptr
054     jne,u   B95  P=0.000001 C=-1.000000

05a     B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
05a     movq    R11, R14	# spill
05d     # checkcastPP of R11

05d     B4: #	out( B77 B5 ) <- in( B3 B76 )  Freq: 0.999999
        nop 	# 3 bytes pad for loops and calls
060     testq   RBP, RBP	# ptr
063     je     B77  P=0.001000 C=-1.000000

069     B5: #	out( B95 B6 ) <- in( B4 )  Freq: 0.998999
069     movl    R8, [RBP + #8 (8-bit)]	# compressed klass ptr
06d     cmpl    R8, narrowklass: precise klass [F: 0x00007fb84400baf8:Constant:exact *	# compressed klass ptr
074     jne,u   B95  P=0.000001 C=-1.000000

07a     B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
07a     movq    R9, RBP	# spill
07d     # checkcastPP of R9

07d     B7: #	out( B78 B8 ) <- in( B6 B77 )  Freq: 0.999998
        nop 	# 3 bytes pad for loops and calls
080     testq   R13, R13	# ptr
083     je     B78  P=0.001000 C=-1.000000

089     B8: #	out( B95 B9 ) <- in( B7 )  Freq: 0.998998
089     movl    R10, [R13 + #8 (8-bit)]	# compressed klass ptr
08d     cmpl    R10, narrowklass: precise klass [F: 0x00007fb84400baf8:Constant:exact *	# compressed klass ptr
094     jne,u   B95  P=0.000001 C=-1.000000

09a     B9: #	out( B10 ) <- in( B8 )  Freq: 0.998997
09a     # checkcastPP of R13

09a     B10: #	out( B109 B11 ) <- in( B9 B78 )  Freq: 0.999997
        nop 	# 6 bytes pad for loops and calls
0a0     movl    RAX, [R9 + #12 (8-bit)]	# range
0a4     NullCheck R9

0a4     B11: #	out( B109 B12 ) <- in( B10 )  Freq: 0.999996
0a4     movl    R14, [R13 + #12 (8-bit)]	# range
0a8     NullCheck R13

0a8     B12: #	out( B109 B13 ) <- in( B11 )  Freq: 0.999995
0a8     movl    RDX, [R11 + #12 (8-bit)]	# range
0ac     NullCheck R11

0ac     B13: #	out( B45 B14 ) <- in( B12 )  Freq: 0.999994
0ac     movl    RSI, R11	# ptr -> int
0af     shrl    RSI, #2
0b2     # TLS is in R15
0b2     cmpl    RBX, #1024
0b8     jge     B45  P=0.000980 C=37740.000000

0be     B14: #	out( B15 ) <- in( B13 )  Freq: 0.999014
0be     movl    R10, RSI	# spill
0c1     andl    R10, #15	# int
0c5     movl    R8, RBX	# spill
0c8     incl    R8	# int
0cb     movl    RDI, #1024	# int
0d0     movl    RCX, #12	# int
0d5     xorl    RBP, RBP	# int
0d7     testl   R8, R8
0da     cmovll R8, RBP	# signed, int
0de     testl   R8, R8
0e1     cmovll R8, RBP	# signed, int
0e5     testl   R8, R8
0e8     cmovll R8, RBP	# signed, int
0ec     cmpl    R8, RDI
0ef     cmovlgt R8, RDI	# min
0f3     addl    R10, R8	# int
0f6     subl    RCX, R10	# int
0f9     andl    RCX, #15	# int
0fc     addl    RCX, R8	# int
0ff     cmpl    RCX, RDI
101     cmovlgt RCX, RDI	# min

104     B15: #	out( B79 B16 ) <- in( B14 B18 ) Loop( B15-B18 inner pre of N769) Freq: 1.99802
104     cmpl    RBX, RAX	# unsigned
106     jnb,u   B79  P=0.000001 C=-1.000000

10c     B16: #	out( B80 B17 ) <- in( B15 )  Freq: 1.99802
10c     movss   XMM0, [R9 + #16 + RBX << #2]	# float
113     cmpl    RBX, R14	# unsigned
116     jnb,u   B80  P=0.000001 C=-1.000000

11c     B17: #	out( B83 B18 ) <- in( B16 )  Freq: 1.99802
11c     vaddss  XMM0, XMM0, [R13 + #16 + RBX << #2]
123     cmpl    RBX, RDX	# unsigned
125     jnb,u   B83  P=0.000001 C=-1.000000

12b     B18: #	out( B15 B19 ) <- in( B17 )  Freq: 1.99801
12b     movss   [R11 + #16 + RBX << #2], XMM0	# float
132     incl    RBX	# int
134     cmpl    RBX, RCX
136     jl,s   B15	# loop end  P=0.500000 C=37740.000000

138     B19: #	out( B39 B20 ) <- in( B18 )  Freq: 0.999007
138     movslq  R10, RDX	# i2l
13b     movslq  RCX, R14	# i2l
13e     cmpl    RAX, #1024
144     movl    R8, RAX	# spill
147     cmovlge R8, RDI	# signed, int
14b     movslq  RDI, R8	# i2l
14e     cmpq    RDI, RCX
151     cmovlg R8, R14	# signed, int
155     movslq  RCX, R8	# i2l
158     cmpq    RCX, R10
15b     cmovlg R8, RDX	# signed, int
15f     movl    RDI, R8	# spill
162     addl    RDI, #-63	# int
165     movl    RCX, #-2147483648	# int
16a     cmpl    R8, RDI
16d     cmovll RDI, RCX	# signed, int
170     cmpl    RBX, RDI
172     jge     B39  P=0.000001 C=-1.000000

178     B20: #	out( B86 B21 ) <- in( B19 )  Freq: 0.999006
178     # castII of RBX
178     cmpl    RBX, RAX	# unsigned
        nop 	# 6 bytes pad for loops and calls
180     jnb,u   B86  P=0.000001 C=-1.000000

186     B21: #	out( B87 B22 ) <- in( B20 )  Freq: 0.999005
186     cmpl    RBX, R14	# unsigned
189     jnb,u   B87  P=0.000001 C=-1.000000

18f     B22: #	out( B88 B23 ) <- in( B21 )  Freq: 0.999004
18f     cmpl    RBX, RDX	# unsigned
191     jnb,u   B88  P=0.000001 C=-1.000000

197     B23: #	out( B89 B24 ) <- in( B22 )  Freq: 0.999003
197     movl    R10, RBX	# spill
19a     addl    R10, #63	# int
        nop 	# 2 bytes pad for loops and calls
1a0     cmpl    R10, RDX	# unsigned
1a3     jnb,u   B89  P=0.000001 C=-1.000000

1a9     B24: #	out( B90 B25 ) <- in( B23 )  Freq: 0.999002
1a9     cmpl    RBX, RDX	# unsigned
1ab     jnb,u   B90  P=0.000001 C=-1.000000

1b1     B25: #	out( B91 B26 ) <- in( B24 )  Freq: 0.999001
1b1     cmpl    R10, R14	# unsigned
1b4     jnb,u   B91  P=0.000001 C=-1.000000

1ba     B26: #	out( B92 B27 ) <- in( B25 )  Freq: 0.999
        nop 	# 6 bytes pad for loops and calls
1c0     cmpl    RBX, R14	# unsigned
1c3     jnb,u   B92  P=0.000001 C=-1.000000

1c9     B27: #	out( B93 B28 ) <- in( B26 )  Freq: 0.998999
1c9     cmpl    R10, RAX	# unsigned
1cc     jnb,u   B93  P=0.000001 C=-1.000000

1d2     B28: #	out( B94 B29 ) <- in( B27 )  Freq: 0.998998
1d2     cmpl    RBX, RAX	# unsigned
1d4     jnb,u   B94  P=0.000001 C=-1.000000

1da     B29: #	out( B34 ) <- in( B28 )  Freq: 0.998997
1da     movl    R10, #64000	# int
1e0     movdl   XMM1, RDX	# spill
1e4     movdl   XMM0, RSI	# spill
1e8     jmp     B34
        nop 	# 3 bytes pad for loops and calls

1f0     B30: #	out( B31 ) <- in( B31 ) top-of-loop Freq: 1.03837e+06
1f0     movl    RBX, RSI	# spill

1f2     B31: #	out( B30 B32 ) <- in( B34 B30 ) Loop( B31-B30 inner main of N284 strip mined) Freq: 1.03939e+06
1f2     load_vector XMM2,[R13 + #16 + RBX << #2]
1fd     vaddps  XMM2,XMM2,[R9 + #16 + RBX << #2]	! add packedF
208     store_vector [R11 + #16 + RBX << #2],XMM2
	
213     movslq  RSI, RBX	# i2l
216     load_vector XMM2,[R13 + #80 + RSI << #2]
221     vaddps  XMM2,XMM2,[R9 + #80 + RSI << #2]	! add packedF
22c     store_vector [R11 + #80 + RSI << #2],XMM2
	
237     load_vector XMM2,[R13 + #144 + RSI << #2]
242     vaddps  XMM2,XMM2,[R9 + #144 + RSI << #2]	! add packedF
24d     store_vector [R11 + #144 + RSI << #2],XMM2
	
258     load_vector XMM2,[R13 + #208 + RSI << #2]
263     vaddps  XMM2,XMM2,[R9 + #208 + RSI << #2]	! add packedF
26e     store_vector [R11 + #208 + RSI << #2],XMM2
	
279     movl    RSI, RBX	# spill
27b     addl    RSI, #64	# int
        nop 	# 2 bytes pad for loops and calls
280     cmpl    RSI, RDX
282     jl     B30	# loop end  P=0.999020 C=37740.000000

288     B32: #	out( B35 B33 ) <- in( B31 )  Freq: 1018.99
288     movq    RDX, [R15 + #912 (32-bit)]	# ptr
28f     testl   rax, [RDX]	# Safepoint: poll for GC        # loop::doSum @ bci:27 (line 9) L[0]=_ L[1]=R11 L[2]=R9 L[3]=R13 L[4]=RSI
        # OopMap {r11=Oop r9=Oop r13=Oop off=655/0x28f}
291     cmpl    RSI, RDI
293     jge,s   B35  P=0.000980 C=37740.000000

295     B33: #	out( B34 ) <- in( B32 )  Freq: 1017.99
295     movl    RBX, RSI	# spill

297     B34: #	out( B31 ) <- in( B29 B33 ) Loop( B34-B33 ) Freq: 1018.99
297     movl    RDX, RDI	# spill
299     subl    RDX, RBX	# int
29b     cmpl    RDI, RBX
29d     cmovll RDX, RBP	# signed, int
2a0     cmpl    RDX, #64000	# unsigned
2a6     cmovlnbe RDX, R10	# unsigned, int
2aa     addl    RDX, RBX	# int
2ac     jmp     B31

2b1     B35: #	out( B75 B36 ) <- in( B32 )  Freq: 0.998997
2b1     movl    R10, R8	# spill
2b4     addl    R10, #-15	# int
2b8     cmpl    R8, R10
2bb     cmovll R10, RCX	# signed, int
        nop 	# 1 bytes pad for loops and calls
2c0     cmpl    RSI, R10
2c3     jge     B75  P=0.500000 C=-1.000000

2c9     B36: #	out( B37 ) <- in( B35 )  Freq: 0.499499
2c9     # castII of RBX
2c9     addl    RBX, #64	# int

2cc     B37: #	out( B37 B38 ) <- in( B36 B37 ) Loop( B37-B37 inner post of N2038) Freq: 0.998997
2cc     load_vector XMM2,[R13 + #16 + RBX << #2]
2d7     vaddps  XMM2,XMM2,[R9 + #16 + RBX << #2]	! add packedF
2e2     store_vector [R11 + #16 + RBX << #2],XMM2
	
2ed     addl    RBX, #16	# int
2f0     cmpl    RBX, R10
2f3     jl,s   B37	# loop end  P=0.500000 C=37740.000000

2f5     B38: #	out( B39 ) <- in( B37 B75 )  Freq: 0.998997
2f5     movdl   RDX, XMM1	# spill
2f9     movdl   RSI, XMM0	# spill

2fd     B39: #	out( B45 B40 ) <- in( B19 B38 )  Freq: 0.998998
        nop 	# 3 bytes pad for loops and calls
300     cmpl    RBX, #1024
306     jge     B45  P=0.500000 C=-1.000000

30c     B40: #	out( B41 ) <- in( B39 )  Freq: 0.499499
30c     # castII of RBX

30c     B41: #	out( B79 B42 ) <- in( B40 B44 ) Loop( B41-B44 inner post of N769) Freq: 0.998995
30c     cmpl    RBX, RAX	# unsigned
30e     jnb,u   B79  P=0.000001 C=-1.000000

314     B42: #	out( B81 B43 ) <- in( B41 )  Freq: 0.998994
314     movss   XMM0, [R9 + #16 + RBX << #2]	# float
        nop 	# 5 bytes pad for loops and calls
320     cmpl    RBX, R14	# unsigned
323     jnb,u   B81  P=0.000001 C=-1.000000

329     B43: #	out( B84 B44 ) <- in( B42 )  Freq: 0.998993
329     vaddss  XMM0, XMM0, [R13 + #16 + RBX << #2]
330     cmpl    RBX, RDX	# unsigned
332     jnb,u   B84  P=0.000001 C=-1.000000

338     B44: #	out( B41 B45 ) <- in( B43 )  Freq: 0.998992
338     movss   [R11 + #16 + RBX << #2], XMM0	# float
33f     incl    RBX	# int
341     cmpl    RBX, #1024
347     jl,s   B41	# loop end  P=0.500000 C=37740.000000

349     B45: #	out( B74 B46 ) <- in( B13 B44 B39 )  Freq: 0.999976
349     cmpl    RBX, #1029
34f     jge     B74  P=0.166667 C=222.000000

355     B46: #	out( B96 B47 ) <- in( B45 )  Freq: 0.833313
355     cmpl    RBX, RAX	# unsigned
357     jnb,u   B96  P=0.000001 C=-1.000000

35d     B47: #	out( B96 B48 ) <- in( B46 )  Freq: 0.833312
        nop 	# 3 bytes pad for loops and calls
360     cmpl    RAX, #1028	# unsigned
366     jbe,u   B96  P=0.000001 C=-1.000000

36c     B48: #	out( B96 B49 ) <- in( B47 )  Freq: 0.833311
36c     cmpl    RBX, R14	# unsigned
36f     jnb,u   B96  P=0.000001 C=-1.000000

375     B49: #	out( B96 B50 ) <- in( B48 )  Freq: 0.833311
        nop 	# 11 bytes pad for loops and calls
380     cmpl    R14, #1028	# unsigned
387     jbe,u   B96  P=0.000001 C=-1.000000

38d     B50: #	out( B96 B51 ) <- in( B49 )  Freq: 0.83331
38d     cmpl    RBX, RDX	# unsigned
38f     jnb,u   B96  P=0.000001 C=-1.000000

395     B51: #	out( B96 B52 ) <- in( B50 )  Freq: 0.833309
        nop 	# 11 bytes pad for loops and calls
3a0     cmpl    RDX, #1028	# unsigned
3a6     jbe,u   B96  P=0.000001 C=-1.000000

3ac     B52: #	out( B53 ) <- in( B51 )  Freq: 0.833308
3ac     andl    RSI, #3	# int
3af     addl    RSI, RBX	# int
3b1     movl    R10, #1029	# int
3b7     movl    RCX, #-1	# int
3bc     subl    RCX, RSI	# int
3be     andl    RCX, #3	# int
3c1     addl    RCX, RBX	# int
3c3     incl    RCX	# int
3c5     cmpl    RCX, R10
3c8     cmovlgt RCX, R10	# min

3cc     B53: #	out( B53 B54 ) <- in( B52 B53 ) Loop( B53-B53 inner pre of N503) Freq: 1.66662
3cc     movss   XMM0, [R13 + #16 + RBX << #2]	# float
3d3     vaddss  XMM1, XMM0, [R9 + #16 + RBX << #2]
3da     movss   [R11 + #16 + RBX << #2], XMM1	# float
3e1     incl    RBX	# int
3e3     cmpl    RBX, RCX
3e5     jl,s   B53	# loop end  P=0.500000 C=185.000000

3e7     B54: #	out( B71 B55 ) <- in( B53 )  Freq: 0.833308
3e7     cmpl    RBX, #1026
3ed     jge     B71  P=0.000001 C=-1.000000

3f3     B55: #	out( B97 B56 ) <- in( B54 )  Freq: 0.833307
3f3     # castII of RBX
3f3     cmpl    RBX, RDX	# unsigned
3f5     jnb,u   B97  P=0.000001 C=-1.000000

3fb     B56: #	out( B98 B57 ) <- in( B55 )  Freq: 0.833306
3fb     cmpl    RBX, RDX	# unsigned
        nop 	# 3 bytes pad for loops and calls
400     jnb,u   B98  P=0.000001 C=-1.000000

406     B57: #	out( B99 B58 ) <- in( B56 )  Freq: 0.833305
406     cmpl    RBX, R14	# unsigned
409     jnb,u   B99  P=0.000001 C=-1.000000

40f     B58: #	out( B100 B59 ) <- in( B57 )  Freq: 0.833305
40f     cmpl    RBX, R14	# unsigned
412     jnb,u   B100  P=0.000001 C=-1.000000

418     B59: #	out( B101 B60 ) <- in( B58 )  Freq: 0.833304
418     cmpl    RBX, RAX	# unsigned
        nop 	# 6 bytes pad for loops and calls
420     jnb,u   B101  P=0.000001 C=-1.000000

426     B60: #	out( B102 B61 ) <- in( B59 )  Freq: 0.833303
426     cmpl    RBX, RAX	# unsigned
428     jnb,u   B102  P=0.000001 C=-1.000000

42e     B61: #	out( B103 B62 ) <- in( B60 )  Freq: 0.833302
42e     cmpl    RBX, RAX	# unsigned
430     jnb,u   B103  P=0.000001 C=-1.000000

436     B62: #	out( B104 B63 ) <- in( B61 )  Freq: 0.833301
436     movl    R10, RBX	# spill
439     addl    R10, #3	# int
        nop 	# 3 bytes pad for loops and calls
440     cmpl    R10, RAX	# unsigned
443     jnb,u   B104  P=0.000001 C=-1.000000

449     B63: #	out( B105 B64 ) <- in( B62 )  Freq: 0.8333
449     cmpl    RBX, R14	# unsigned
44c     jnb,u   B105  P=0.000001 C=-1.000000

452     B64: #	out( B106 B65 ) <- in( B63 )  Freq: 0.8333
452     cmpl    R10, R14	# unsigned
455     jnb,u   B106  P=0.000001 C=-1.000000

45b     B65: #	out( B107 B66 ) <- in( B64 )  Freq: 0.833299
45b     cmpl    RBX, RDX	# unsigned
        nop 	# 3 bytes pad for loops and calls
460     jnb,u   B107  P=0.000001 C=-1.000000

466     B66: #	out( B108 B67 ) <- in( B65 )  Freq: 0.833298
466     cmpl    R10, RDX	# unsigned
469     jnb,u   B108  P=0.000001 C=-1.000000

46f     B67: #	out( B68 ) <- in( B66 )  Freq: 0.833297
46f     movl    R8, #4000	# int

475     B68: #	out( B69 ) <- in( B67 B70 ) Loop( B68-B70 ) Freq: 4.99978
475     movl    R10, #1026	# int
47b     subl    R10, RBX	# int
47e     cmpl    R10, #4000	# unsigned
485     cmovlnbe R10, R8	# unsigned, int
489     addl    R10, RBX	# int
        nop 	# 4 bytes pad for loops and calls

490     B69: #	out( B69 B70 ) <- in( B68 B69 ) Loop( B69-B69 inner main of N412 strip mined) Freq: 29.9987
490     load_vector XMM0,[R9 + #16 + RBX << #2]
497     vaddps  XMM0,XMM0,[R13 + #16 + RBX << #2]	! add packedF
49e     store_vector [R11 + #16 + RBX << #2],XMM0
	
4a5     addl    RBX, #4	# int
4a8     cmpl    RBX, R10
4ab     jl,s   B69	# loop end  P=0.833333 C=185.000000

4ad     B70: #	out( B68 B71 ) <- in( B69 )  Freq: 4.99978
4ad     movq    R10, [R15 + #912 (32-bit)]	# ptr
4b4     testl   rax, [R10]	# Safepoint: poll for GC        # loop::doSum @ bci:54 (line 11) L[0]=_ L[1]=R11 L[2]=R9 L[3]=R13 L[4]=RBX
        # OopMap {r11=Oop r9=Oop r13=Oop off=1204/0x4b4}
        nop 	# 9 bytes pad for loops and calls
4c0     cmpl    RBX, #1026
4c6     jl,s   B68  P=0.833333 C=185.000000

4c8     B71: #	out( B74 B72 ) <- in( B54 B70 )  Freq: 0.833298
4c8     cmpl    RBX, #1029
4ce     jge,s   B74  P=0.500000 C=-1.000000

4d0     B72: #	out( B73 ) <- in( B71 )  Freq: 0.416649
4d0     # castII of RBX

4d0     B73: #	out( B73 B74 ) <- in( B72 B73 ) Loop( B73-B73 inner post of N503) Freq: 0.833298
4d0     movss   XMM1, [R13 + #16 + RBX << #2]	# float
4d7     vaddss  XMM0, XMM1, [R9 + #16 + RBX << #2]
4de     movss   [R11 + #16 + RBX << #2], XMM0	# float
4e5     incl    RBX	# int
4e7     cmpl    RBX, #1029
4ed     jl,s   B73	# loop end  P=0.500000 C=185.000000

4ef     B74: #	out( N825 ) <- in( B73 B71 B45 )  Freq: 0.999961
4ef     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

504     ret

505     B75: #	out( B38 ) <- in( B35 )  Freq: 0.499499
505     movl    RBX, RSI	# spill
507     jmp     B38

50c     B76: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
50c     xorl    R11, R11	# ptr
50f     jmp     B4

514     B77: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
514     xorl    R9, R9	# ptr
517     jmp     B7

51c     B78: #	out( B10 ) <- in( B7 )  Freq: 0.000999985
51c     xorl    R13, R13	# ptr
        nop 	# 1 bytes pad for loops and calls
520     jmp     B10

525     B79: #	out( N825 ) <- in( B41 B15 )  Freq: 3.03681e-06
525     movl    RSI, #-28	# int
52a     movq    [rsp + #8], R13	# spill
52f     movq    [rsp + #24], R11	# spill
534     movl    [rsp + #20], RBX	# spill
538     movq    [rsp + #32], R9	# spill
53d     movl    [rsp + #40], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
544     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # loop::doSum @ bci:17 (line 10) L[0]=_ L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #8 L[4]=rsp + #20 STK[0]=rsp + #24 STK[1]=rsp + #40 STK[2]=rsp + #32 STK[3]=rsp + #20
        # OopMap {[8]=Oop [24]=Oop [32]=Oop off=1356/0x54c}
54c     stop	# ShouldNotReachHere

560     B80: #	out( B82 ) <- in( B16 )  Freq: 2.02455e-06
560     movdl   RBP, XMM0	# spill
564     jmp,s   B82

566     B81: #	out( B82 ) <- in( B42 )  Freq: 1.01226e-06
566     movdl   RBP, XMM0	# spill

56a     B82: #	out( N825 ) <- in( B81 B80 )  Freq: 3.03681e-06
56a     movl    RSI, #-28	# int
56f     movq    [rsp + #8], R9	# spill
574     movq    [rsp + #32], R11	# spill
579     movl    [rsp + #28], RBX	# spill
57d     movq    [rsp + #40], R13	# spill
582     movl    [rsp + #48], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
588     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # loop::doSum @ bci:21 (line 10) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #8 L[3]=rsp + #40 L[4]=rsp + #28 STK[0]=rsp + #32 STK[1]=rsp + #48 STK[2]=RBP STK[3]=rsp + #40 STK[4]=rsp + #28
        # OopMap {[8]=Oop [32]=Oop [40]=Oop off=1424/0x590}
590     stop	# ShouldNotReachHere

5a4     B83: #	out( B85 ) <- in( B17 )  Freq: 2.02455e-06
5a4     movdl   RBP, XMM0	# spill
5a8     jmp,s   B85

5aa     B84: #	out( B85 ) <- in( B43 )  Freq: 1.01226e-06
5aa     movdl   RBP, XMM0	# spill

5ae     B85: #	out( N825 ) <- in( B84 B83 )  Freq: 3.03681e-06
5ae     movl    RSI, #-28	# int
5b3     movq    [rsp + #8], R9	# spill
5b8     movq    [rsp + #16], R13	# spill
5bd     movq    [rsp + #32], R11	# spill
5c2     movl    [rsp + #28], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
5c8     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # loop::doSum @ bci:23 (line 10) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #28 STK[0]=rsp + #32 STK[1]=rsp + #28 STK[2]=RBP
        # OopMap {[8]=Oop [16]=Oop [32]=Oop off=1488/0x5d0}
5d0     stop	# ShouldNotReachHere

5e4     B86: #	out( N825 ) <- in( B20 )  Freq: 1.01227e-06
5e4     stop	# ShouldNotReachHere

5f8     B87: #	out( N825 ) <- in( B21 )  Freq: 1.01227e-06
5f8     stop	# ShouldNotReachHere

60c     B88: #	out( N825 ) <- in( B22 )  Freq: 1.01227e-06
60c     stop	# ShouldNotReachHere

620     B89: #	out( N825 ) <- in( B23 )  Freq: 1.01227e-06
620     stop	# ShouldNotReachHere

634     B90: #	out( N825 ) <- in( B24 )  Freq: 1.01227e-06
634     stop	# ShouldNotReachHere

648     B91: #	out( N825 ) <- in( B25 )  Freq: 1.01227e-06
648     stop	# ShouldNotReachHere

65c     B92: #	out( N825 ) <- in( B26 )  Freq: 1.01227e-06
65c     stop	# ShouldNotReachHere

670     B93: #	out( N825 ) <- in( B27 )  Freq: 1.01227e-06
670     stop	# ShouldNotReachHere

684     B94: #	out( N825 ) <- in( B28 )  Freq: 1.01226e-06
684     stop	# ShouldNotReachHere

698     B95: #	out( N825 ) <- in( B2 B5 B8 )  Freq: 2.997e-06
698     movl    RSI, #-115	# int
69d     movq    [rsp + #0], R13	# spill
6a1     movl    [rsp + #8], RBX	# spill
6a5     movq    [rsp + #16], R14	# spill
        nop 	# 2 bytes pad for loops and calls
6ac     call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret' debug_id='0')
        # loop::doSum @ bci:3 (line 9) L[0]=_ L[1]=rsp + #16 L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #8
        # OopMap {rbp=Oop [0]=Oop [16]=Oop off=1716/0x6b4}
6b4     stop	# ShouldNotReachHere

6c8     B96: #	out( N825 ) <- in( B48 B49 B46 B47 B50 B51 )  Freq: 5.03306e-06
6c8     movl    RSI, #-138	# int
6cd     movq    RBP, R11	# spill
6d0     movq    [rsp + #0], R9	# spill
6d4     movq    [rsp + #8], R13	# spill
6d9     movl    [rsp + #20], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
6e0     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # loop::doSum @ bci:35 (line 11) L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #8 L[4]=rsp + #20 STK[0]=rsp + #20 STK[1]=#1029
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=1768/0x6e8}
6e8     stop	# ShouldNotReachHere

6fc     B97: #	out( N825 ) <- in( B55 )  Freq: 8.44373e-07
6fc     stop	# ShouldNotReachHere

710     B98: #	out( N825 ) <- in( B56 )  Freq: 8.44372e-07
710     stop	# ShouldNotReachHere

724     B99: #	out( N825 ) <- in( B57 )  Freq: 8.44371e-07
724     stop	# ShouldNotReachHere

738     B100: #	out( N825 ) <- in( B58 )  Freq: 8.4437e-07
738     stop	# ShouldNotReachHere

74c     B101: #	out( N825 ) <- in( B59 )  Freq: 8.44369e-07
74c     stop	# ShouldNotReachHere

760     B102: #	out( N825 ) <- in( B60 )  Freq: 8.44368e-07
760     stop	# ShouldNotReachHere

774     B103: #	out( N825 ) <- in( B61 )  Freq: 8.44367e-07
774     stop	# ShouldNotReachHere

788     B104: #	out( N825 ) <- in( B62 )  Freq: 8.44367e-07
788     stop	# ShouldNotReachHere

79c     B105: #	out( N825 ) <- in( B63 )  Freq: 8.44366e-07
79c     stop	# ShouldNotReachHere

7b0     B106: #	out( N825 ) <- in( B64 )  Freq: 8.44365e-07
7b0     stop	# ShouldNotReachHere

7c4     B107: #	out( N825 ) <- in( B65 )  Freq: 8.44364e-07
7c4     stop	# ShouldNotReachHere

7d8     B108: #	out( N825 ) <- in( B66 )  Freq: 8.44363e-07
7d8     stop	# ShouldNotReachHere

7ec     B109: #	out( N825 ) <- in( B12 B10 B11 )  Freq: 3.03982e-06
7ec     movl    RSI, #-66	# int
7f1     movq    RBP, R11	# spill
7f4     movq    [rsp + #0], R9	# spill
7f8     movq    [rsp + #8], R13	# spill
7fd     movl    [rsp + #16], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
804     call,static  wrapper for: uncommon_trap(reason='profile_predicate' action='maybe_recompile' debug_id='0')
        # loop::doSum @ bci:3 (line 9) L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #8 L[4]=rsp + #16
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=2060/0x80c}
80c     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    1233   24 %           loop::doSum @ 3 (58 bytes)
 total in heap  [0x00007fb8c105f010,0x00007fb8c1060048] = 4152
 relocation     [0x00007fb8c105f188,0x00007fb8c105f2f8] = 368
 main code      [0x00007fb8c105f300,0x00007fb8c105fb40] = 2112
 stub code      [0x00007fb8c105fb40,0x00007fb8c105fb58] = 24
 oops           [0x00007fb8c105fb58,0x00007fb8c105fb60] = 8
 metadata       [0x00007fb8c105fb60,0x00007fb8c105fb70] = 16
 scopes data    [0x00007fb8c105fb70,0x00007fb8c105fc90] = 288
 scopes pcs     [0x00007fb8c105fc90,0x00007fb8c1060020] = 912
 dependencies   [0x00007fb8c1060020,0x00007fb8c1060028] = 8
 nul chk table  [0x00007fb8c1060028,0x00007fb8c1060048] = 32

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007fb86740e428} 'doSum' '([F[F[F)V' in 'loop'
 ;; N825: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fb8c105f300:   callq  0x00007fb8cb976794           ;   {runtime_call os::breakpoint()}
  0x00007fb8c105f305:   nop
  0x00007fb8c105f306:   nop
  0x00007fb8c105f307:   nop
  0x00007fb8c105f308:   nop
  0x00007fb8c105f309:   nop
  0x00007fb8c105f30a:   nop
  0x00007fb8c105f30b:   nop
  0x00007fb8c105f30c:   nop
  0x00007fb8c105f30d:   nop
  0x00007fb8c105f30e:   nop
  0x00007fb8c105f30f:   nop
 ;; B1: #	out( B76 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fb8c105f310:   mov    %eax,-0x16000(%rsp)
  0x00007fb8c105f317:   push   %rbp
  0x00007fb8c105f318:   sub    $0x50,%rsp
  0x00007fb8c105f31c:   mov    0x18(%rsi),%r14
  0x00007fb8c105f320:   mov    0x10(%rsi),%rbp
  0x00007fb8c105f324:   mov    (%rsi),%ebx
  0x00007fb8c105f326:   mov    0x8(%rsi),%r13
  0x00007fb8c105f32a:   mov    %rsi,%rdi
  0x00007fb8c105f32d:   vzeroupper 
  0x00007fb8c105f330:   movabs $0x7fb8cba761ca,%r10
  0x00007fb8c105f33a:   callq  *%r10
  0x00007fb8c105f33d:   nop
  0x00007fb8c105f33e:   nop
  0x00007fb8c105f33f:   nop
  0x00007fb8c105f340:   test   %r14,%r14
  0x00007fb8c105f343:   je     0x00007fb8c105f80c
 ;; B2: #	out( B95 B3 ) <- in( B1 )  Freq: 0.999
  0x00007fb8c105f349:   mov    0x8(%r14),%r10d
  0x00007fb8c105f34d:   cmp    $0x403e0,%r10d               ;   {metadata({type array float})}
  0x00007fb8c105f354:   jne    0x00007fb8c105f998
 ;; B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
  0x00007fb8c105f35a:   mov    %r14,%r11
 ;; B4: #	out( B77 B5 ) <- in( B3 B76 )  Freq: 0.999999
  0x00007fb8c105f35d:   nop
  0x00007fb8c105f35e:   nop
  0x00007fb8c105f35f:   nop
  0x00007fb8c105f360:   test   %rbp,%rbp
  0x00007fb8c105f363:   je     0x00007fb8c105f814
 ;; B5: #	out( B95 B6 ) <- in( B4 )  Freq: 0.998999
  0x00007fb8c105f369:   mov    0x8(%rbp),%r8d
  0x00007fb8c105f36d:   cmp    $0x403e0,%r8d                ;   {metadata({type array float})}
  0x00007fb8c105f374:   jne    0x00007fb8c105f998
 ;; B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
  0x00007fb8c105f37a:   mov    %rbp,%r9
 ;; B7: #	out( B78 B8 ) <- in( B6 B77 )  Freq: 0.999998
  0x00007fb8c105f37d:   nop
  0x00007fb8c105f37e:   nop
  0x00007fb8c105f37f:   nop
  0x00007fb8c105f380:   test   %r13,%r13
  0x00007fb8c105f383:   je     0x00007fb8c105f81c
 ;; B8: #	out( B95 B9 ) <- in( B7 )  Freq: 0.998998
  0x00007fb8c105f389:   mov    0x8(%r13),%r10d
  0x00007fb8c105f38d:   cmp    $0x403e0,%r10d               ;   {metadata({type array float})}
  0x00007fb8c105f394:   jne    0x00007fb8c105f998           ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@3 (line 9)
 ;; B9: #	out( B10 ) <- in( B8 )  Freq: 0.998997
 ;; B10: #	out( B109 B11 ) <- in( B9 B78 )  Freq: 0.999997
  0x00007fb8c105f39a:   nop
  0x00007fb8c105f39b:   nop
  0x00007fb8c105f39c:   nop
  0x00007fb8c105f39d:   nop
  0x00007fb8c105f39e:   nop
  0x00007fb8c105f39f:   nop
  0x00007fb8c105f3a0:   mov    0xc(%r9),%eax                ; implicit exception: dispatches to 0x00007fb8c105faec
                                                            ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@17 (line 10)
 ;; B11: #	out( B109 B12 ) <- in( B10 )  Freq: 0.999996
  0x00007fb8c105f3a4:   mov    0xc(%r13),%r14d              ; implicit exception: dispatches to 0x00007fb8c105faec
                                                            ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@21 (line 10)
 ;; B12: #	out( B109 B13 ) <- in( B11 )  Freq: 0.999995
  0x00007fb8c105f3a8:   mov    0xc(%r11),%edx               ; implicit exception: dispatches to 0x00007fb8c105faec
                                                            ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
 ;; B13: #	out( B45 B14 ) <- in( B12 )  Freq: 0.999994
  0x00007fb8c105f3ac:   mov    %r11d,%esi
  0x00007fb8c105f3af:   shr    $0x2,%esi                    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@27 (line 9)
  0x00007fb8c105f3b2:   cmp    $0x400,%ebx
  0x00007fb8c105f3b8:   jge    0x00007fb8c105f649           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@8 (line 9)
 ;; B14: #	out( B15 ) <- in( B13 )  Freq: 0.999014
  0x00007fb8c105f3be:   mov    %esi,%r10d
  0x00007fb8c105f3c1:   and    $0xf,%r10d
  0x00007fb8c105f3c5:   mov    %ebx,%r8d
  0x00007fb8c105f3c8:   inc    %r8d
  0x00007fb8c105f3cb:   mov    $0x400,%edi
  0x00007fb8c105f3d0:   mov    $0xc,%ecx
  0x00007fb8c105f3d5:   xor    %ebp,%ebp
  0x00007fb8c105f3d7:   test   %r8d,%r8d
  0x00007fb8c105f3da:   cmovl  %ebp,%r8d
  0x00007fb8c105f3de:   test   %r8d,%r8d
  0x00007fb8c105f3e1:   cmovl  %ebp,%r8d
  0x00007fb8c105f3e5:   test   %r8d,%r8d
  0x00007fb8c105f3e8:   cmovl  %ebp,%r8d
  0x00007fb8c105f3ec:   cmp    %edi,%r8d
  0x00007fb8c105f3ef:   cmovg  %edi,%r8d
  0x00007fb8c105f3f3:   add    %r8d,%r10d
  0x00007fb8c105f3f6:   sub    %r10d,%ecx
  0x00007fb8c105f3f9:   and    $0xf,%ecx
  0x00007fb8c105f3fc:   add    %r8d,%ecx
  0x00007fb8c105f3ff:   cmp    %edi,%ecx
  0x00007fb8c105f401:   cmovg  %edi,%ecx                    ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
 ;; B15: #	out( B79 B16 ) <- in( B14 B18 ) Loop( B15-B18 inner pre of N769) Freq: 1.99802
  0x00007fb8c105f404:   cmp    %eax,%ebx
  0x00007fb8c105f406:   jae    0x00007fb8c105f825
 ;; B16: #	out( B80 B17 ) <- in( B15 )  Freq: 1.99802
  0x00007fb8c105f40c:   vmovss 0x10(%r9,%rbx,4),%xmm0       ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@17 (line 10)
  0x00007fb8c105f413:   cmp    %r14d,%ebx
  0x00007fb8c105f416:   jae    0x00007fb8c105f860
 ;; B17: #	out( B83 B18 ) <- in( B16 )  Freq: 1.99802
  0x00007fb8c105f41c:   vaddss 0x10(%r13,%rbx,4),%xmm0,%xmm0;*fadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@22 (line 10)
  0x00007fb8c105f423:   cmp    %edx,%ebx
  0x00007fb8c105f425:   jae    0x00007fb8c105f8a4
 ;; B18: #	out( B15 B19 ) <- in( B17 )  Freq: 1.99801
  0x00007fb8c105f42b:   vmovss %xmm0,0x10(%r11,%rbx,4)      ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
  0x00007fb8c105f432:   inc    %ebx                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@24 (line 9)
  0x00007fb8c105f434:   cmp    %ecx,%ebx
  0x00007fb8c105f436:   jl     0x00007fb8c105f404           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@8 (line 9)
 ;; B19: #	out( B39 B20 ) <- in( B18 )  Freq: 0.999007
  0x00007fb8c105f438:   movslq %edx,%r10
  0x00007fb8c105f43b:   movslq %r14d,%rcx
  0x00007fb8c105f43e:   cmp    $0x400,%eax
  0x00007fb8c105f444:   mov    %eax,%r8d
  0x00007fb8c105f447:   cmovge %edi,%r8d
  0x00007fb8c105f44b:   movslq %r8d,%rdi
  0x00007fb8c105f44e:   cmp    %rcx,%rdi
  0x00007fb8c105f451:   cmovg  %r14d,%r8d
  0x00007fb8c105f455:   movslq %r8d,%rcx
  0x00007fb8c105f458:   cmp    %r10,%rcx
  0x00007fb8c105f45b:   cmovg  %edx,%r8d
  0x00007fb8c105f45f:   mov    %r8d,%edi
  0x00007fb8c105f462:   add    $0xffffffc1,%edi
  0x00007fb8c105f465:   mov    $0x80000000,%ecx
  0x00007fb8c105f46a:   cmp    %edi,%r8d
  0x00007fb8c105f46d:   cmovl  %ecx,%edi
  0x00007fb8c105f470:   cmp    %edi,%ebx
  0x00007fb8c105f472:   jge    0x00007fb8c105f5fd
 ;; B20: #	out( B86 B21 ) <- in( B19 )  Freq: 0.999006
  0x00007fb8c105f478:   cmp    %eax,%ebx
  0x00007fb8c105f47a:   nop
  0x00007fb8c105f47b:   nop
  0x00007fb8c105f47c:   nop
  0x00007fb8c105f47d:   nop
  0x00007fb8c105f47e:   nop
  0x00007fb8c105f47f:   nop
  0x00007fb8c105f480:   jae    0x00007fb8c105f8e4
 ;; B21: #	out( B87 B22 ) <- in( B20 )  Freq: 0.999005
  0x00007fb8c105f486:   cmp    %r14d,%ebx
  0x00007fb8c105f489:   jae    0x00007fb8c105f8f8
 ;; B22: #	out( B88 B23 ) <- in( B21 )  Freq: 0.999004
  0x00007fb8c105f48f:   cmp    %edx,%ebx
  0x00007fb8c105f491:   jae    0x00007fb8c105f90c
 ;; B23: #	out( B89 B24 ) <- in( B22 )  Freq: 0.999003
  0x00007fb8c105f497:   mov    %ebx,%r10d
  0x00007fb8c105f49a:   add    $0x3f,%r10d
  0x00007fb8c105f49e:   nop
  0x00007fb8c105f49f:   nop
  0x00007fb8c105f4a0:   cmp    %edx,%r10d
  0x00007fb8c105f4a3:   jae    0x00007fb8c105f920
 ;; B24: #	out( B90 B25 ) <- in( B23 )  Freq: 0.999002
  0x00007fb8c105f4a9:   cmp    %edx,%ebx
  0x00007fb8c105f4ab:   jae    0x00007fb8c105f934
 ;; B25: #	out( B91 B26 ) <- in( B24 )  Freq: 0.999001
  0x00007fb8c105f4b1:   cmp    %r14d,%r10d
  0x00007fb8c105f4b4:   jae    0x00007fb8c105f948
 ;; B26: #	out( B92 B27 ) <- in( B25 )  Freq: 0.999
  0x00007fb8c105f4ba:   nop
  0x00007fb8c105f4bb:   nop
  0x00007fb8c105f4bc:   nop
  0x00007fb8c105f4bd:   nop
  0x00007fb8c105f4be:   nop
  0x00007fb8c105f4bf:   nop
  0x00007fb8c105f4c0:   cmp    %r14d,%ebx
  0x00007fb8c105f4c3:   jae    0x00007fb8c105f95c
 ;; B27: #	out( B93 B28 ) <- in( B26 )  Freq: 0.998999
  0x00007fb8c105f4c9:   cmp    %eax,%r10d
  0x00007fb8c105f4cc:   jae    0x00007fb8c105f970
 ;; B28: #	out( B94 B29 ) <- in( B27 )  Freq: 0.998998
  0x00007fb8c105f4d2:   cmp    %eax,%ebx
  0x00007fb8c105f4d4:   jae    0x00007fb8c105f984
 ;; B29: #	out( B34 ) <- in( B28 )  Freq: 0.998997
  0x00007fb8c105f4da:   mov    $0xfa00,%r10d
  0x00007fb8c105f4e0:   vmovd  %edx,%xmm1
  0x00007fb8c105f4e4:   vmovd  %esi,%xmm0
  0x00007fb8c105f4e8:   jmpq   0x00007fb8c105f597
  0x00007fb8c105f4ed:   nop
  0x00007fb8c105f4ee:   nop
  0x00007fb8c105f4ef:   nop
 ;; B30: #	out( B31 ) <- in( B31 ) top-of-loop Freq: 1.03837e+06
  0x00007fb8c105f4f0:   mov    %esi,%ebx                    ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@17 (line 10)
 ;; B31: #	out( B30 B32 ) <- in( B34 B30 ) Loop( B31-B30 inner main of N284 strip mined) Freq: 1.03939e+06
  0x00007fb8c105f4f2:   vmovdqu32 0x10(%r13,%rbx,4),%zmm2
  0x00007fb8c105f4fd:   vaddps 0x10(%r9,%rbx,4),%zmm2,%zmm2
  0x00007fb8c105f508:   vmovdqu32 %zmm2,0x10(%r11,%rbx,4)
  0x00007fb8c105f513:   movslq %ebx,%rsi
  0x00007fb8c105f516:   vmovdqu32 0x50(%r13,%rsi,4),%zmm2
  0x00007fb8c105f521:   vaddps 0x50(%r9,%rsi,4),%zmm2,%zmm2
  0x00007fb8c105f52c:   vmovdqu32 %zmm2,0x50(%r11,%rsi,4)
  0x00007fb8c105f537:   vmovdqu32 0x90(%r13,%rsi,4),%zmm2
  0x00007fb8c105f542:   vaddps 0x90(%r9,%rsi,4),%zmm2,%zmm2
  0x00007fb8c105f54d:   vmovdqu32 %zmm2,0x90(%r11,%rsi,4)
  0x00007fb8c105f558:   vmovdqu32 0xd0(%r13,%rsi,4),%zmm2
  0x00007fb8c105f563:   vaddps 0xd0(%r9,%rsi,4),%zmm2,%zmm2
  0x00007fb8c105f56e:   vmovdqu32 %zmm2,0xd0(%r11,%rsi,4)   ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
  0x00007fb8c105f579:   mov    %ebx,%esi
  0x00007fb8c105f57b:   add    $0x40,%esi                   ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@24 (line 9)
  0x00007fb8c105f57e:   nop
  0x00007fb8c105f57f:   nop
  0x00007fb8c105f580:   cmp    %edx,%esi
  0x00007fb8c105f582:   jl     0x00007fb8c105f4f0           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@27 (line 9)
 ;; B32: #	out( B35 B33 ) <- in( B31 )  Freq: 1018.99
  0x00007fb8c105f588:   mov    0x390(%r15),%rdx             ; ImmutableOopMap {r11=Oop r9=Oop r13=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) loop::doSum@27 (line 9)
  0x00007fb8c105f58f:   test   %eax,(%rdx)                  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@27 (line 9)
                                                            ;   {poll}
  0x00007fb8c105f591:   cmp    %edi,%esi
  0x00007fb8c105f593:   jge    0x00007fb8c105f5b1
 ;; B33: #	out( B34 ) <- in( B32 )  Freq: 1017.99
  0x00007fb8c105f595:   mov    %esi,%ebx
 ;; B34: #	out( B31 ) <- in( B29 B33 ) Loop( B34-B33 ) Freq: 1018.99
  0x00007fb8c105f597:   mov    %edi,%edx
  0x00007fb8c105f599:   sub    %ebx,%edx
  0x00007fb8c105f59b:   cmp    %ebx,%edi
  0x00007fb8c105f59d:   cmovl  %ebp,%edx
  0x00007fb8c105f5a0:   cmp    $0xfa00,%edx
  0x00007fb8c105f5a6:   cmova  %r10d,%edx
  0x00007fb8c105f5aa:   add    %ebx,%edx
  0x00007fb8c105f5ac:   jmpq   0x00007fb8c105f4f2
 ;; B35: #	out( B75 B36 ) <- in( B32 )  Freq: 0.998997
  0x00007fb8c105f5b1:   mov    %r8d,%r10d
  0x00007fb8c105f5b4:   add    $0xfffffff1,%r10d
  0x00007fb8c105f5b8:   cmp    %r10d,%r8d
  0x00007fb8c105f5bb:   cmovl  %ecx,%r10d
  0x00007fb8c105f5bf:   nop
  0x00007fb8c105f5c0:   cmp    %r10d,%esi
  0x00007fb8c105f5c3:   jge    0x00007fb8c105f805
 ;; B36: #	out( B37 ) <- in( B35 )  Freq: 0.499499
  0x00007fb8c105f5c9:   add    $0x40,%ebx                   ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@17 (line 10)
 ;; B37: #	out( B37 B38 ) <- in( B36 B37 ) Loop( B37-B37 inner post of N2038) Freq: 0.998997
  0x00007fb8c105f5cc:   vmovdqu32 0x10(%r13,%rbx,4),%zmm2
  0x00007fb8c105f5d7:   vaddps 0x10(%r9,%rbx,4),%zmm2,%zmm2
  0x00007fb8c105f5e2:   vmovdqu32 %zmm2,0x10(%r11,%rbx,4)   ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
  0x00007fb8c105f5ed:   add    $0x10,%ebx                   ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@24 (line 9)
  0x00007fb8c105f5f0:   cmp    %r10d,%ebx
  0x00007fb8c105f5f3:   jl     0x00007fb8c105f5cc           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@8 (line 9)
 ;; B38: #	out( B39 ) <- in( B37 B75 )  Freq: 0.998997
  0x00007fb8c105f5f5:   vmovd  %xmm1,%edx
  0x00007fb8c105f5f9:   vmovd  %xmm0,%esi
 ;; B39: #	out( B45 B40 ) <- in( B19 B38 )  Freq: 0.998998
  0x00007fb8c105f5fd:   nop
  0x00007fb8c105f5fe:   nop
  0x00007fb8c105f5ff:   nop
  0x00007fb8c105f600:   cmp    $0x400,%ebx
  0x00007fb8c105f606:   jge    0x00007fb8c105f649           ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
 ;; B40: #	out( B41 ) <- in( B39 )  Freq: 0.499499
 ;; B41: #	out( B79 B42 ) <- in( B40 B44 ) Loop( B41-B44 inner post of N769) Freq: 0.998995
  0x00007fb8c105f60c:   cmp    %eax,%ebx
  0x00007fb8c105f60e:   jae    0x00007fb8c105f825
 ;; B42: #	out( B81 B43 ) <- in( B41 )  Freq: 0.998994
  0x00007fb8c105f614:   vmovss 0x10(%r9,%rbx,4),%xmm0       ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@17 (line 10)
  0x00007fb8c105f61b:   nop
  0x00007fb8c105f61c:   nop
  0x00007fb8c105f61d:   nop
  0x00007fb8c105f61e:   nop
  0x00007fb8c105f61f:   nop
  0x00007fb8c105f620:   cmp    %r14d,%ebx
  0x00007fb8c105f623:   jae    0x00007fb8c105f866
 ;; B43: #	out( B84 B44 ) <- in( B42 )  Freq: 0.998993
  0x00007fb8c105f629:   vaddss 0x10(%r13,%rbx,4),%xmm0,%xmm0;*fadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@22 (line 10)
  0x00007fb8c105f630:   cmp    %edx,%ebx
  0x00007fb8c105f632:   jae    0x00007fb8c105f8aa
 ;; B44: #	out( B41 B45 ) <- in( B43 )  Freq: 0.998992
  0x00007fb8c105f638:   vmovss %xmm0,0x10(%r11,%rbx,4)      ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
  0x00007fb8c105f63f:   inc    %ebx                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@24 (line 9)
  0x00007fb8c105f641:   cmp    $0x400,%ebx
  0x00007fb8c105f647:   jl     0x00007fb8c105f60c           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@8 (line 9)
 ;; B45: #	out( B74 B46 ) <- in( B13 B44 B39 )  Freq: 0.999976
  0x00007fb8c105f649:   cmp    $0x405,%ebx
  0x00007fb8c105f64f:   jge    0x00007fb8c105f7ef           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@35 (line 11)
 ;; B46: #	out( B96 B47 ) <- in( B45 )  Freq: 0.833313
  0x00007fb8c105f655:   cmp    %eax,%ebx
  0x00007fb8c105f657:   jae    0x00007fb8c105f9c8
 ;; B47: #	out( B96 B48 ) <- in( B46 )  Freq: 0.833312
  0x00007fb8c105f65d:   nop
  0x00007fb8c105f65e:   nop
  0x00007fb8c105f65f:   nop
  0x00007fb8c105f660:   cmp    $0x404,%eax
  0x00007fb8c105f666:   jbe    0x00007fb8c105f9c8
 ;; B48: #	out( B96 B49 ) <- in( B47 )  Freq: 0.833311
  0x00007fb8c105f66c:   cmp    %r14d,%ebx
  0x00007fb8c105f66f:   jae    0x00007fb8c105f9c8
 ;; B49: #	out( B96 B50 ) <- in( B48 )  Freq: 0.833311
  0x00007fb8c105f675:   nop
  0x00007fb8c105f676:   nop
  0x00007fb8c105f677:   nop
  0x00007fb8c105f678:   nop
  0x00007fb8c105f679:   nop
  0x00007fb8c105f67a:   nop
  0x00007fb8c105f67b:   nop
  0x00007fb8c105f67c:   nop
  0x00007fb8c105f67d:   nop
  0x00007fb8c105f67e:   nop
  0x00007fb8c105f67f:   nop
  0x00007fb8c105f680:   cmp    $0x404,%r14d
  0x00007fb8c105f687:   jbe    0x00007fb8c105f9c8
 ;; B50: #	out( B96 B51 ) <- in( B49 )  Freq: 0.83331
  0x00007fb8c105f68d:   cmp    %edx,%ebx
  0x00007fb8c105f68f:   jae    0x00007fb8c105f9c8
 ;; B51: #	out( B96 B52 ) <- in( B50 )  Freq: 0.833309
  0x00007fb8c105f695:   nop
  0x00007fb8c105f696:   nop
  0x00007fb8c105f697:   nop
  0x00007fb8c105f698:   nop
  0x00007fb8c105f699:   nop
  0x00007fb8c105f69a:   nop
  0x00007fb8c105f69b:   nop
  0x00007fb8c105f69c:   nop
  0x00007fb8c105f69d:   nop
  0x00007fb8c105f69e:   nop
  0x00007fb8c105f69f:   nop
  0x00007fb8c105f6a0:   cmp    $0x404,%edx
  0x00007fb8c105f6a6:   jbe    0x00007fb8c105f9c8
 ;; B52: #	out( B53 ) <- in( B51 )  Freq: 0.833308
  0x00007fb8c105f6ac:   and    $0x3,%esi
  0x00007fb8c105f6af:   add    %ebx,%esi
  0x00007fb8c105f6b1:   mov    $0x405,%r10d
  0x00007fb8c105f6b7:   mov    $0xffffffff,%ecx
  0x00007fb8c105f6bc:   sub    %esi,%ecx
  0x00007fb8c105f6be:   and    $0x3,%ecx
  0x00007fb8c105f6c1:   add    %ebx,%ecx
  0x00007fb8c105f6c3:   inc    %ecx
  0x00007fb8c105f6c5:   cmp    %r10d,%ecx
  0x00007fb8c105f6c8:   cmovg  %r10d,%ecx                   ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@38 (line 12)
 ;; B53: #	out( B53 B54 ) <- in( B52 B53 ) Loop( B53-B53 inner pre of N503) Freq: 1.66662
  0x00007fb8c105f6cc:   vmovss 0x10(%r13,%rbx,4),%xmm0
  0x00007fb8c105f6d3:   vaddss 0x10(%r9,%rbx,4),%xmm0,%xmm1
  0x00007fb8c105f6da:   vmovss %xmm1,0x10(%r11,%rbx,4)      ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@50 (line 12)
  0x00007fb8c105f6e1:   inc    %ebx                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@51 (line 11)
  0x00007fb8c105f6e3:   cmp    %ecx,%ebx
  0x00007fb8c105f6e5:   jl     0x00007fb8c105f6cc           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@35 (line 11)
 ;; B54: #	out( B71 B55 ) <- in( B53 )  Freq: 0.833308
  0x00007fb8c105f6e7:   cmp    $0x402,%ebx
  0x00007fb8c105f6ed:   jge    0x00007fb8c105f7c8
 ;; B55: #	out( B97 B56 ) <- in( B54 )  Freq: 0.833307
  0x00007fb8c105f6f3:   cmp    %edx,%ebx
  0x00007fb8c105f6f5:   jae    0x00007fb8c105f9fc
 ;; B56: #	out( B98 B57 ) <- in( B55 )  Freq: 0.833306
  0x00007fb8c105f6fb:   cmp    %edx,%ebx
  0x00007fb8c105f6fd:   nop
  0x00007fb8c105f6fe:   nop
  0x00007fb8c105f6ff:   nop
  0x00007fb8c105f700:   jae    0x00007fb8c105fa10
 ;; B57: #	out( B99 B58 ) <- in( B56 )  Freq: 0.833305
  0x00007fb8c105f706:   cmp    %r14d,%ebx
  0x00007fb8c105f709:   jae    0x00007fb8c105fa24
 ;; B58: #	out( B100 B59 ) <- in( B57 )  Freq: 0.833305
  0x00007fb8c105f70f:   cmp    %r14d,%ebx
  0x00007fb8c105f712:   jae    0x00007fb8c105fa38
 ;; B59: #	out( B101 B60 ) <- in( B58 )  Freq: 0.833304
  0x00007fb8c105f718:   cmp    %eax,%ebx
  0x00007fb8c105f71a:   nop
  0x00007fb8c105f71b:   nop
  0x00007fb8c105f71c:   nop
  0x00007fb8c105f71d:   nop
  0x00007fb8c105f71e:   nop
  0x00007fb8c105f71f:   nop
  0x00007fb8c105f720:   jae    0x00007fb8c105fa4c
 ;; B60: #	out( B102 B61 ) <- in( B59 )  Freq: 0.833303
  0x00007fb8c105f726:   cmp    %eax,%ebx
  0x00007fb8c105f728:   jae    0x00007fb8c105fa60
 ;; B61: #	out( B103 B62 ) <- in( B60 )  Freq: 0.833302
  0x00007fb8c105f72e:   cmp    %eax,%ebx
  0x00007fb8c105f730:   jae    0x00007fb8c105fa74
 ;; B62: #	out( B104 B63 ) <- in( B61 )  Freq: 0.833301
  0x00007fb8c105f736:   mov    %ebx,%r10d
  0x00007fb8c105f739:   add    $0x3,%r10d
  0x00007fb8c105f73d:   nop
  0x00007fb8c105f73e:   nop
  0x00007fb8c105f73f:   nop
  0x00007fb8c105f740:   cmp    %eax,%r10d
  0x00007fb8c105f743:   jae    0x00007fb8c105fa88
 ;; B63: #	out( B105 B64 ) <- in( B62 )  Freq: 0.8333
  0x00007fb8c105f749:   cmp    %r14d,%ebx
  0x00007fb8c105f74c:   jae    0x00007fb8c105fa9c
 ;; B64: #	out( B106 B65 ) <- in( B63 )  Freq: 0.8333
  0x00007fb8c105f752:   cmp    %r14d,%r10d
  0x00007fb8c105f755:   jae    0x00007fb8c105fab0
 ;; B65: #	out( B107 B66 ) <- in( B64 )  Freq: 0.833299
  0x00007fb8c105f75b:   cmp    %edx,%ebx
  0x00007fb8c105f75d:   nop
  0x00007fb8c105f75e:   nop
  0x00007fb8c105f75f:   nop
  0x00007fb8c105f760:   jae    0x00007fb8c105fac4
 ;; B66: #	out( B108 B67 ) <- in( B65 )  Freq: 0.833298
  0x00007fb8c105f766:   cmp    %edx,%r10d
  0x00007fb8c105f769:   jae    0x00007fb8c105fad8
 ;; B67: #	out( B68 ) <- in( B66 )  Freq: 0.833297
  0x00007fb8c105f76f:   mov    $0xfa0,%r8d
 ;; B68: #	out( B69 ) <- in( B67 B70 ) Loop( B68-B70 ) Freq: 4.99978
  0x00007fb8c105f775:   mov    $0x402,%r10d
  0x00007fb8c105f77b:   sub    %ebx,%r10d
  0x00007fb8c105f77e:   cmp    $0xfa0,%r10d
  0x00007fb8c105f785:   cmova  %r8d,%r10d
  0x00007fb8c105f789:   add    %ebx,%r10d
  0x00007fb8c105f78c:   nop
  0x00007fb8c105f78d:   nop
  0x00007fb8c105f78e:   nop
  0x00007fb8c105f78f:   nop                                 ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@38 (line 12)
 ;; B69: #	out( B69 B70 ) <- in( B68 B69 ) Loop( B69-B69 inner main of N412 strip mined) Freq: 29.9987
  0x00007fb8c105f790:   vmovdqu 0x10(%r9,%rbx,4),%xmm0
  0x00007fb8c105f797:   vaddps 0x10(%r13,%rbx,4),%xmm0,%xmm0
  0x00007fb8c105f79e:   vmovdqu %xmm0,0x10(%r11,%rbx,4)     ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@50 (line 12)
  0x00007fb8c105f7a5:   add    $0x4,%ebx                    ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@51 (line 11)
  0x00007fb8c105f7a8:   cmp    %r10d,%ebx
  0x00007fb8c105f7ab:   jl     0x00007fb8c105f790           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@54 (line 11)
 ;; B70: #	out( B68 B71 ) <- in( B69 )  Freq: 4.99978
  0x00007fb8c105f7ad:   mov    0x390(%r15),%r10             ; ImmutableOopMap {r11=Oop r9=Oop r13=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) loop::doSum@54 (line 11)
  0x00007fb8c105f7b4:   test   %eax,(%r10)                  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@54 (line 11)
                                                            ;   {poll}
  0x00007fb8c105f7b7:   nop
  0x00007fb8c105f7b8:   nop
  0x00007fb8c105f7b9:   nop
  0x00007fb8c105f7ba:   nop
  0x00007fb8c105f7bb:   nop
  0x00007fb8c105f7bc:   nop
  0x00007fb8c105f7bd:   nop
  0x00007fb8c105f7be:   nop
  0x00007fb8c105f7bf:   nop
  0x00007fb8c105f7c0:   cmp    $0x402,%ebx
  0x00007fb8c105f7c6:   jl     0x00007fb8c105f775
 ;; B71: #	out( B74 B72 ) <- in( B54 B70 )  Freq: 0.833298
  0x00007fb8c105f7c8:   cmp    $0x405,%ebx
  0x00007fb8c105f7ce:   jge    0x00007fb8c105f7ef           ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@38 (line 12)
 ;; B72: #	out( B73 ) <- in( B71 )  Freq: 0.416649
 ;; B73: #	out( B73 B74 ) <- in( B72 B73 ) Loop( B73-B73 inner post of N503) Freq: 0.833298
  0x00007fb8c105f7d0:   vmovss 0x10(%r13,%rbx,4),%xmm1
  0x00007fb8c105f7d7:   vaddss 0x10(%r9,%rbx,4),%xmm1,%xmm0
  0x00007fb8c105f7de:   vmovss %xmm0,0x10(%r11,%rbx,4)      ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@50 (line 12)
  0x00007fb8c105f7e5:   inc    %ebx                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@51 (line 11)
  0x00007fb8c105f7e7:   cmp    $0x405,%ebx
  0x00007fb8c105f7ed:   jl     0x00007fb8c105f7d0           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@35 (line 11)
 ;; B74: #	out( N825 ) <- in( B73 B71 B45 )  Freq: 0.999961
  0x00007fb8c105f7ef:   vzeroupper 
  0x00007fb8c105f7f2:   add    $0x50,%rsp
  0x00007fb8c105f7f6:   pop    %rbp
  0x00007fb8c105f7f7:   cmp    0x388(%r15),%rsp             ;   {poll_return}
  0x00007fb8c105f7fe:   ja     0x00007fb8c105fb20
  0x00007fb8c105f804:   retq   
 ;; B75: #	out( B38 ) <- in( B35 )  Freq: 0.499499
  0x00007fb8c105f805:   mov    %esi,%ebx
  0x00007fb8c105f807:   jmpq   0x00007fb8c105f5f5
 ;; B76: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
  0x00007fb8c105f80c:   xor    %r11d,%r11d
  0x00007fb8c105f80f:   jmpq   0x00007fb8c105f35d
 ;; B77: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
  0x00007fb8c105f814:   xor    %r9d,%r9d
  0x00007fb8c105f817:   jmpq   0x00007fb8c105f37d
 ;; B78: #	out( B10 ) <- in( B7 )  Freq: 0.000999985
  0x00007fb8c105f81c:   xor    %r13d,%r13d
  0x00007fb8c105f81f:   nop
  0x00007fb8c105f820:   jmpq   0x00007fb8c105f39a
 ;; B79: #	out( N825 ) <- in( B41 B15 )  Freq: 3.03681e-06
  0x00007fb8c105f825:   mov    $0xffffffe4,%esi
  0x00007fb8c105f82a:   mov    %r13,0x8(%rsp)
  0x00007fb8c105f82f:   mov    %r11,0x18(%rsp)
  0x00007fb8c105f834:   mov    %ebx,0x14(%rsp)
  0x00007fb8c105f838:   mov    %r9,0x20(%rsp)
  0x00007fb8c105f83d:   mov    %ebx,0x28(%rsp)
  0x00007fb8c105f841:   nop
  0x00007fb8c105f842:   nop
  0x00007fb8c105f843:   nop
  0x00007fb8c105f844:   vzeroupper 
  0x00007fb8c105f847:   callq  0x00007fb8c111e940           ; ImmutableOopMap {[8]=Oop [24]=Oop [32]=Oop }
                                                            ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@17 (line 10)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb8c105f84c:   movabs $0x7fb8cc0699c0,%rdi         ;   {external_word}
  0x00007fb8c105f856:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105f85a:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105f85f:   hlt                                 ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@17 (line 10)
 ;; B80: #	out( B82 ) <- in( B16 )  Freq: 2.02455e-06
  0x00007fb8c105f860:   vmovd  %xmm0,%ebp
  0x00007fb8c105f864:   jmp    0x00007fb8c105f86a
 ;; B81: #	out( B82 ) <- in( B42 )  Freq: 1.01226e-06
  0x00007fb8c105f866:   vmovd  %xmm0,%ebp
 ;; B82: #	out( N825 ) <- in( B81 B80 )  Freq: 3.03681e-06
  0x00007fb8c105f86a:   mov    $0xffffffe4,%esi
  0x00007fb8c105f86f:   mov    %r9,0x8(%rsp)
  0x00007fb8c105f874:   mov    %r11,0x20(%rsp)
  0x00007fb8c105f879:   mov    %ebx,0x1c(%rsp)
  0x00007fb8c105f87d:   mov    %r13,0x28(%rsp)
  0x00007fb8c105f882:   mov    %ebx,0x30(%rsp)
  0x00007fb8c105f886:   nop
  0x00007fb8c105f887:   nop
  0x00007fb8c105f888:   vzeroupper 
  0x00007fb8c105f88b:   callq  0x00007fb8c111e940           ; ImmutableOopMap {[8]=Oop [32]=Oop [40]=Oop }
                                                            ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@21 (line 10)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb8c105f890:   movabs $0x7fb8cc0699c0,%rdi         ;   {external_word}
  0x00007fb8c105f89a:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105f89e:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105f8a3:   hlt                                 ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@21 (line 10)
 ;; B83: #	out( B85 ) <- in( B17 )  Freq: 2.02455e-06
  0x00007fb8c105f8a4:   vmovd  %xmm0,%ebp
  0x00007fb8c105f8a8:   jmp    0x00007fb8c105f8ae
 ;; B84: #	out( B85 ) <- in( B43 )  Freq: 1.01226e-06
  0x00007fb8c105f8aa:   vmovd  %xmm0,%ebp
 ;; B85: #	out( N825 ) <- in( B84 B83 )  Freq: 3.03681e-06
  0x00007fb8c105f8ae:   mov    $0xffffffe4,%esi
  0x00007fb8c105f8b3:   mov    %r9,0x8(%rsp)
  0x00007fb8c105f8b8:   mov    %r13,0x10(%rsp)
  0x00007fb8c105f8bd:   mov    %r11,0x20(%rsp)
  0x00007fb8c105f8c2:   mov    %ebx,0x1c(%rsp)
  0x00007fb8c105f8c6:   nop
  0x00007fb8c105f8c7:   nop
  0x00007fb8c105f8c8:   vzeroupper 
  0x00007fb8c105f8cb:   callq  0x00007fb8c111e940           ; ImmutableOopMap {[8]=Oop [16]=Oop [32]=Oop }
                                                            ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb8c105f8d0:   movabs $0x7fb8cc0699c0,%rdi         ;   {external_word}
  0x00007fb8c105f8da:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105f8de:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105f8e3:   hlt                                 ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
 ;; B86: #	out( N825 ) <- in( B20 )  Freq: 1.01227e-06
  0x00007fb8c105f8e4:   movabs $0x7fb8cc1fd448,%rdi         ;   {external_word}
  0x00007fb8c105f8ee:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105f8f2:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105f8f7:   hlt    
 ;; B87: #	out( N825 ) <- in( B21 )  Freq: 1.01227e-06
  0x00007fb8c105f8f8:   movabs $0x7fb8cc1fd448,%rdi         ;   {external_word}
  0x00007fb8c105f902:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105f906:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105f90b:   hlt    
 ;; B88: #	out( N825 ) <- in( B22 )  Freq: 1.01227e-06
  0x00007fb8c105f90c:   movabs $0x7fb8cc1fd448,%rdi         ;   {external_word}
  0x00007fb8c105f916:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105f91a:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105f91f:   hlt    
 ;; B89: #	out( N825 ) <- in( B23 )  Freq: 1.01227e-06
  0x00007fb8c105f920:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105f92a:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105f92e:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105f933:   hlt    
 ;; B90: #	out( N825 ) <- in( B24 )  Freq: 1.01227e-06
  0x00007fb8c105f934:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105f93e:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105f942:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105f947:   hlt    
 ;; B91: #	out( N825 ) <- in( B25 )  Freq: 1.01227e-06
  0x00007fb8c105f948:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105f952:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105f956:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105f95b:   hlt    
 ;; B92: #	out( N825 ) <- in( B26 )  Freq: 1.01227e-06
  0x00007fb8c105f95c:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105f966:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105f96a:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105f96f:   hlt    
 ;; B93: #	out( N825 ) <- in( B27 )  Freq: 1.01227e-06
  0x00007fb8c105f970:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105f97a:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105f97e:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105f983:   hlt    
 ;; B94: #	out( N825 ) <- in( B28 )  Freq: 1.01226e-06
  0x00007fb8c105f984:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105f98e:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105f992:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105f997:   hlt    
 ;; B95: #	out( N825 ) <- in( B2 B5 B8 )  Freq: 2.997e-06
  0x00007fb8c105f998:   mov    $0xffffff8d,%esi
  0x00007fb8c105f99d:   mov    %r13,(%rsp)
  0x00007fb8c105f9a1:   mov    %ebx,0x8(%rsp)
  0x00007fb8c105f9a5:   mov    %r14,0x10(%rsp)
  0x00007fb8c105f9aa:   nop
  0x00007fb8c105f9ab:   nop
  0x00007fb8c105f9ac:   vzeroupper 
  0x00007fb8c105f9af:   callq  0x00007fb8c111e940           ; ImmutableOopMap {rbp=Oop [0]=Oop [16]=Oop }
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@3 (line 9)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb8c105f9b4:   movabs $0x7fb8cc0699c0,%rdi         ;   {external_word}
  0x00007fb8c105f9be:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105f9c2:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105f9c7:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@35 (line 11)
 ;; B96: #	out( N825 ) <- in( B48 B49 B46 B47 B50 B51 )  Freq: 5.03306e-06
  0x00007fb8c105f9c8:   mov    $0xffffff76,%esi
  0x00007fb8c105f9cd:   mov    %r11,%rbp
  0x00007fb8c105f9d0:   mov    %r9,(%rsp)
  0x00007fb8c105f9d4:   mov    %r13,0x8(%rsp)
  0x00007fb8c105f9d9:   mov    %ebx,0x14(%rsp)
  0x00007fb8c105f9dd:   nop
  0x00007fb8c105f9de:   nop
  0x00007fb8c105f9df:   nop
  0x00007fb8c105f9e0:   vzeroupper 
  0x00007fb8c105f9e3:   callq  0x00007fb8c111e940           ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) loop::doSum@35 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb8c105f9e8:   movabs $0x7fb8cc0699c0,%rdi         ;   {external_word}
  0x00007fb8c105f9f2:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105f9f6:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105f9fb:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@35 (line 11)
 ;; B97: #	out( N825 ) <- in( B55 )  Freq: 8.44373e-07
  0x00007fb8c105f9fc:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105fa06:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105fa0a:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105fa0f:   hlt    
 ;; B98: #	out( N825 ) <- in( B56 )  Freq: 8.44372e-07
  0x00007fb8c105fa10:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105fa1a:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105fa1e:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105fa23:   hlt    
 ;; B99: #	out( N825 ) <- in( B57 )  Freq: 8.44371e-07
  0x00007fb8c105fa24:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105fa2e:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105fa32:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105fa37:   hlt    
 ;; B100: #	out( N825 ) <- in( B58 )  Freq: 8.4437e-07
  0x00007fb8c105fa38:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105fa42:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105fa46:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105fa4b:   hlt    
 ;; B101: #	out( N825 ) <- in( B59 )  Freq: 8.44369e-07
  0x00007fb8c105fa4c:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105fa56:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105fa5a:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105fa5f:   hlt    
 ;; B102: #	out( N825 ) <- in( B60 )  Freq: 8.44368e-07
  0x00007fb8c105fa60:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105fa6a:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105fa6e:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105fa73:   hlt    
 ;; B103: #	out( N825 ) <- in( B61 )  Freq: 8.44367e-07
  0x00007fb8c105fa74:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105fa7e:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105fa82:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105fa87:   hlt    
 ;; B104: #	out( N825 ) <- in( B62 )  Freq: 8.44367e-07
  0x00007fb8c105fa88:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105fa92:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105fa96:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105fa9b:   hlt    
 ;; B105: #	out( N825 ) <- in( B63 )  Freq: 8.44366e-07
  0x00007fb8c105fa9c:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105faa6:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105faaa:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105faaf:   hlt    
 ;; B106: #	out( N825 ) <- in( B64 )  Freq: 8.44365e-07
  0x00007fb8c105fab0:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105faba:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105fabe:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105fac3:   hlt    
 ;; B107: #	out( N825 ) <- in( B65 )  Freq: 8.44364e-07
  0x00007fb8c105fac4:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105face:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105fad2:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105fad7:   hlt    
 ;; B108: #	out( N825 ) <- in( B66 )  Freq: 8.44363e-07
  0x00007fb8c105fad8:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105fae2:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105fae6:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105faeb:   hlt    
 ;; B109: #	out( N825 ) <- in( B12 B10 B11 )  Freq: 3.03982e-06
  0x00007fb8c105faec:   mov    $0xffffffbe,%esi
  0x00007fb8c105faf1:   mov    %r11,%rbp
  0x00007fb8c105faf4:   mov    %r9,(%rsp)
  0x00007fb8c105faf8:   mov    %r13,0x8(%rsp)
  0x00007fb8c105fafd:   mov    %ebx,0x10(%rsp)
  0x00007fb8c105fb01:   nop
  0x00007fb8c105fb02:   nop
  0x00007fb8c105fb03:   nop
  0x00007fb8c105fb04:   vzeroupper 
  0x00007fb8c105fb07:   callq  0x00007fb8c111e940           ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@3 (line 9)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb8c105fb0c:   movabs $0x7fb8cc0699c0,%rdi         ;   {external_word}
  0x00007fb8c105fb16:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105fb1a:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105fb1f:   hlt                                 ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@3 (line 9)
  0x00007fb8c105fb20:   movabs $0x7fb8c105f7f7,%r10         ;   {internal_word}
  0x00007fb8c105fb2a:   mov    %r10,0x3a0(%r15)
  0x00007fb8c105fb31:   jmpq   0x00007fb8c111d6a0           ;   {runtime_call SafepointBlob}
  0x00007fb8c105fb36:   hlt    
  0x00007fb8c105fb37:   hlt    
  0x00007fb8c105fb38:   hlt    
  0x00007fb8c105fb39:   hlt    
  0x00007fb8c105fb3a:   hlt    
  0x00007fb8c105fb3b:   hlt    
  0x00007fb8c105fb3c:   hlt    
  0x00007fb8c105fb3d:   hlt    
  0x00007fb8c105fb3e:   hlt    
  0x00007fb8c105fb3f:   hlt    
[Exception Handler]
  0x00007fb8c105fb40:   jmpq   0x00007fb8c1081720           ;   {no_reloc}
[Deopt Handler Code]
  0x00007fb8c105fb45:   callq  0x00007fb8c105fb4a
  0x00007fb8c105fb4a:   subq   $0x5,(%rsp)
  0x00007fb8c105fb4f:   jmpq   0x00007fb8c111ec60           ;   {runtime_call DeoptimizationBlob}
  0x00007fb8c105fb54:   hlt    
  0x00007fb8c105fb55:   hlt    
  0x00007fb8c105fb56:   hlt    
  0x00007fb8c105fb57:   hlt    
--------------------------------------------------------------------------------
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007fb8c105fb58:   0x00000001014b7c68 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000001014b7c68}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007fb8c105fb60:   0x00000008000403e0 {type array float}
  0x00007fb8c105fb68:   0x00007fb86740e428 {method} {0x00007fb86740e428} 'doSum' '([F[F[F)V' in 'loop'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007fb8c105f2ff offset=ffffffff bits=0):
PcDesc(pc=0x00007fb8c105f39a offset=9a bits=0):
   loop::doSum@3 (line 9)
PcDesc(pc=0x00007fb8c105f3a4 offset=a4 bits=0):
   loop::doSum@17 (line 10)
PcDesc(pc=0x00007fb8c105f3a8 offset=a8 bits=0):
   loop::doSum@21 (line 10)
PcDesc(pc=0x00007fb8c105f3ac offset=ac bits=0):
   loop::doSum@23 (line 10)
PcDesc(pc=0x00007fb8c105f3b2 offset=b2 bits=0):
   loop::doSum@27 (line 9)
PcDesc(pc=0x00007fb8c105f3be offset=be bits=0):
   loop::doSum@8 (line 9)
PcDesc(pc=0x00007fb8c105f404 offset=104 bits=0):
   loop::doSum@23 (line 10)
PcDesc(pc=0x00007fb8c105f413 offset=113 bits=0):
   loop::doSum@17 (line 10)
PcDesc(pc=0x00007fb8c105f423 offset=123 bits=0):
   loop::doSum@22 (line 10)
PcDesc(pc=0x00007fb8c105f432 offset=132 bits=0):
   loop::doSum@23 (line 10)
PcDesc(pc=0x00007fb8c105f434 offset=134 bits=0):
   loop::doSum@24 (line 9)
PcDesc(pc=0x00007fb8c105f438 offset=138 bits=0):
   loop::doSum@8 (line 9)
PcDesc(pc=0x00007fb8c105f4f2 offset=1f2 bits=0):
   loop::doSum@17 (line 10)
PcDesc(pc=0x00007fb8c105f579 offset=279 bits=0):
   loop::doSum@23 (line 10)
PcDesc(pc=0x00007fb8c105f57e offset=27e bits=0):
   loop::doSum@24 (line 9)
PcDesc(pc=0x00007fb8c105f588 offset=288 bits=0):
   loop::doSum@27 (line 9)
PcDesc(pc=0x00007fb8c105f58f offset=28f bits=1):
   loop::doSum@27 (line 9)  reexecute=true
   Locals
    - l0: empty
    - l1: reg r11 [22],oop
    - l2: reg r9 [18],oop
    - l3: reg r13 [26],oop
    - l4: reg rsi [12],int
PcDesc(pc=0x00007fb8c105f591 offset=291 bits=0):
   loop::doSum@27 (line 9)
PcDesc(pc=0x00007fb8c105f5cc offset=2cc bits=0):
   loop::doSum@17 (line 10)
PcDesc(pc=0x00007fb8c105f5ed offset=2ed bits=0):
   loop::doSum@23 (line 10)
PcDesc(pc=0x00007fb8c105f5f0 offset=2f0 bits=0):
   loop::doSum@24 (line 9)
PcDesc(pc=0x00007fb8c105f5f5 offset=2f5 bits=0):
   loop::doSum@8 (line 9)
PcDesc(pc=0x00007fb8c105f60c offset=30c bits=0):
   loop::doSum@23 (line 10)
PcDesc(pc=0x00007fb8c105f61b offset=31b bits=0):
   loop::doSum@17 (line 10)
PcDesc(pc=0x00007fb8c105f630 offset=330 bits=0):
   loop::doSum@22 (line 10)
PcDesc(pc=0x00007fb8c105f63f offset=33f bits=0):
   loop::doSum@23 (line 10)
PcDesc(pc=0x00007fb8c105f641 offset=341 bits=0):
   loop::doSum@24 (line 9)
PcDesc(pc=0x00007fb8c105f649 offset=349 bits=0):
   loop::doSum@8 (line 9)
PcDesc(pc=0x00007fb8c105f655 offset=355 bits=0):
   loop::doSum@35 (line 11)
PcDesc(pc=0x00007fb8c105f6cc offset=3cc bits=0):
   loop::doSum@38 (line 12)
PcDesc(pc=0x00007fb8c105f6e1 offset=3e1 bits=0):
   loop::doSum@50 (line 12)
PcDesc(pc=0x00007fb8c105f6e3 offset=3e3 bits=0):
   loop::doSum@51 (line 11)
PcDesc(pc=0x00007fb8c105f6e7 offset=3e7 bits=0):
   loop::doSum@35 (line 11)
PcDesc(pc=0x00007fb8c105f790 offset=490 bits=0):
   loop::doSum@38 (line 12)
PcDesc(pc=0x00007fb8c105f7a5 offset=4a5 bits=0):
   loop::doSum@50 (line 12)
PcDesc(pc=0x00007fb8c105f7a8 offset=4a8 bits=0):
   loop::doSum@51 (line 11)
PcDesc(pc=0x00007fb8c105f7ad offset=4ad bits=0):
   loop::doSum@54 (line 11)
PcDesc(pc=0x00007fb8c105f7b4 offset=4b4 bits=1):
   loop::doSum@54 (line 11)  reexecute=true
   Locals
    - l0: empty
    - l1: reg r11 [22],oop
    - l2: reg r9 [18],oop
    - l3: reg r13 [26],oop
    - l4: reg rbx [6],int
PcDesc(pc=0x00007fb8c105f7b7 offset=4b7 bits=0):
   loop::doSum@54 (line 11)
PcDesc(pc=0x00007fb8c105f7d0 offset=4d0 bits=0):
   loop::doSum@38 (line 12)
PcDesc(pc=0x00007fb8c105f7e5 offset=4e5 bits=0):
   loop::doSum@50 (line 12)
PcDesc(pc=0x00007fb8c105f7e7 offset=4e7 bits=0):
   loop::doSum@51 (line 11)
PcDesc(pc=0x00007fb8c105f7ef offset=4ef bits=0):
   loop::doSum@35 (line 11)
PcDesc(pc=0x00007fb8c105f84c offset=54c bits=0):
   loop::doSum@17 (line 10)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[8],oop
    - l4: stack[20]
   Expression stack
    - @0: stack[24],oop
    - @1: stack[40]
    - @2: stack[32],oop
    - @3: stack[20]
PcDesc(pc=0x00007fb8c105f860 offset=560 bits=0):
   loop::doSum@17 (line 10)
PcDesc(pc=0x00007fb8c105f890 offset=590 bits=0):
   loop::doSum@21 (line 10)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[8],oop
    - l3: stack[40],oop
    - l4: stack[28]
   Expression stack
    - @0: stack[32],oop
    - @1: stack[48]
    - @2: reg rbp [10]
    - @3: stack[40],oop
    - @4: stack[28]
PcDesc(pc=0x00007fb8c105f8a4 offset=5a4 bits=0):
   loop::doSum@21 (line 10)
PcDesc(pc=0x00007fb8c105f8d0 offset=5d0 bits=0):
   loop::doSum@23 (line 10)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[8],oop
    - l3: stack[16],oop
    - l4: stack[28]
   Expression stack
    - @0: stack[32],oop
    - @1: stack[28]
    - @2: reg rbp [10]
PcDesc(pc=0x00007fb8c105f8e4 offset=5e4 bits=0):
   loop::doSum@23 (line 10)
PcDesc(pc=0x00007fb8c105f9b4 offset=6b4 bits=0):
   loop::doSum@3 (line 9)
   Locals
    - l0: empty
    - l1: stack[16],oop
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: stack[8]
PcDesc(pc=0x00007fb8c105f9c8 offset=6c8 bits=0):
   loop::doSum@35 (line 11)
PcDesc(pc=0x00007fb8c105f9e8 offset=6e8 bits=1):
   loop::doSum@35 (line 11)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8],oop
    - l4: stack[20]
   Expression stack
    - @0: stack[20]
    - @1: 1029
PcDesc(pc=0x00007fb8c105f9fc offset=6fc bits=0):
   loop::doSum@35 (line 11)
PcDesc(pc=0x00007fb8c105fb0c offset=80c bits=0):
   loop::doSum@3 (line 9)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8],oop
    - l4: stack[16]
PcDesc(pc=0x00007fb8c105fb20 offset=820 bits=0):
   loop::doSum@3 (line 9)
PcDesc(pc=0x00007fb8c105fb59 offset=859 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 8 OopMaps

ImmutableOopMap {r11=Oop r9=Oop r13=Oop } pc offsets: 655 1204 
ImmutableOopMap {[8]=Oop [24]=Oop [32]=Oop } pc offsets: 1356 
ImmutableOopMap {[8]=Oop [32]=Oop [40]=Oop } pc offsets: 1424 
ImmutableOopMap {[8]=Oop [16]=Oop [32]=Oop } pc offsets: 1488 
ImmutableOopMap {rbp=Oop [0]=Oop [16]=Oop } pc offsets: 1716 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 1768 2060 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007fb8c105f39a offset=9a):
   loop::doSum@3 (line 9)
ScopeDesc(pc=0x00007fb8c105f3a4 offset=a4):
   loop::doSum@17 (line 10)
ScopeDesc(pc=0x00007fb8c105f3a8 offset=a8):
   loop::doSum@21 (line 10)
ScopeDesc(pc=0x00007fb8c105f3ac offset=ac):
   loop::doSum@23 (line 10)
ScopeDesc(pc=0x00007fb8c105f3b2 offset=b2):
   loop::doSum@27 (line 9)
ScopeDesc(pc=0x00007fb8c105f3be offset=be):
   loop::doSum@8 (line 9)
ScopeDesc(pc=0x00007fb8c105f404 offset=104):
   loop::doSum@23 (line 10)
ScopeDesc(pc=0x00007fb8c105f413 offset=113):
   loop::doSum@17 (line 10)
ScopeDesc(pc=0x00007fb8c105f423 offset=123):
   loop::doSum@22 (line 10)
ScopeDesc(pc=0x00007fb8c105f432 offset=132):
   loop::doSum@23 (line 10)
ScopeDesc(pc=0x00007fb8c105f434 offset=134):
   loop::doSum@24 (line 9)
ScopeDesc(pc=0x00007fb8c105f438 offset=138):
   loop::doSum@8 (line 9)
ScopeDesc(pc=0x00007fb8c105f4f2 offset=1f2):
   loop::doSum@17 (line 10)
ScopeDesc(pc=0x00007fb8c105f579 offset=279):
   loop::doSum@23 (line 10)
ScopeDesc(pc=0x00007fb8c105f57e offset=27e):
   loop::doSum@24 (line 9)
ScopeDesc(pc=0x00007fb8c105f588 offset=288):
   loop::doSum@27 (line 9)
ScopeDesc(pc=0x00007fb8c105f58f offset=28f):
   loop::doSum@27 (line 9)  reexecute=true
   Locals
    - l0: empty
    - l1: reg r11 [22],oop
    - l2: reg r9 [18],oop
    - l3: reg r13 [26],oop
    - l4: reg rsi [12],int
ScopeDesc(pc=0x00007fb8c105f591 offset=291):
   loop::doSum@27 (line 9)
ScopeDesc(pc=0x00007fb8c105f5cc offset=2cc):
   loop::doSum@17 (line 10)
ScopeDesc(pc=0x00007fb8c105f5ed offset=2ed):
   loop::doSum@23 (line 10)
ScopeDesc(pc=0x00007fb8c105f5f0 offset=2f0):
   loop::doSum@24 (line 9)
ScopeDesc(pc=0x00007fb8c105f5f5 offset=2f5):
   loop::doSum@8 (line 9)
ScopeDesc(pc=0x00007fb8c105f60c offset=30c):
   loop::doSum@23 (line 10)
ScopeDesc(pc=0x00007fb8c105f61b offset=31b):
   loop::doSum@17 (line 10)
ScopeDesc(pc=0x00007fb8c105f630 offset=330):
   loop::doSum@22 (line 10)
ScopeDesc(pc=0x00007fb8c105f63f offset=33f):
   loop::doSum@23 (line 10)
ScopeDesc(pc=0x00007fb8c105f641 offset=341):
   loop::doSum@24 (line 9)
ScopeDesc(pc=0x00007fb8c105f649 offset=349):
   loop::doSum@8 (line 9)
ScopeDesc(pc=0x00007fb8c105f655 offset=355):
   loop::doSum@35 (line 11)
ScopeDesc(pc=0x00007fb8c105f6cc offset=3cc):
   loop::doSum@38 (line 12)
ScopeDesc(pc=0x00007fb8c105f6e1 offset=3e1):
   loop::doSum@50 (line 12)
ScopeDesc(pc=0x00007fb8c105f6e3 offset=3e3):
   loop::doSum@51 (line 11)
ScopeDesc(pc=0x00007fb8c105f6e7 offset=3e7):
   loop::doSum@35 (line 11)
ScopeDesc(pc=0x00007fb8c105f790 offset=490):
   loop::doSum@38 (line 12)
ScopeDesc(pc=0x00007fb8c105f7a5 offset=4a5):
   loop::doSum@50 (line 12)
ScopeDesc(pc=0x00007fb8c105f7a8 offset=4a8):
   loop::doSum@51 (line 11)
ScopeDesc(pc=0x00007fb8c105f7ad offset=4ad):
   loop::doSum@54 (line 11)
ScopeDesc(pc=0x00007fb8c105f7b4 offset=4b4):
   loop::doSum@54 (line 11)  reexecute=true
   Locals
    - l0: empty
    - l1: reg r11 [22],oop
    - l2: reg r9 [18],oop
    - l3: reg r13 [26],oop
    - l4: reg rbx [6],int
ScopeDesc(pc=0x00007fb8c105f7b7 offset=4b7):
   loop::doSum@54 (line 11)
ScopeDesc(pc=0x00007fb8c105f7d0 offset=4d0):
   loop::doSum@38 (line 12)
ScopeDesc(pc=0x00007fb8c105f7e5 offset=4e5):
   loop::doSum@50 (line 12)
ScopeDesc(pc=0x00007fb8c105f7e7 offset=4e7):
   loop::doSum@51 (line 11)
ScopeDesc(pc=0x00007fb8c105f7ef offset=4ef):
   loop::doSum@35 (line 11)
ScopeDesc(pc=0x00007fb8c105f84c offset=54c):
   loop::doSum@17 (line 10)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[8],oop
    - l4: stack[20]
   Expression stack
    - @0: stack[24],oop
    - @1: stack[40]
    - @2: stack[32],oop
    - @3: stack[20]
ScopeDesc(pc=0x00007fb8c105f860 offset=560):
   loop::doSum@17 (line 10)
ScopeDesc(pc=0x00007fb8c105f890 offset=590):
   loop::doSum@21 (line 10)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[8],oop
    - l3: stack[40],oop
    - l4: stack[28]
   Expression stack
    - @0: stack[32],oop
    - @1: stack[48]
    - @2: reg rbp [10]
    - @3: stack[40],oop
    - @4: stack[28]
ScopeDesc(pc=0x00007fb8c105f8a4 offset=5a4):
   loop::doSum@21 (line 10)
ScopeDesc(pc=0x00007fb8c105f8d0 offset=5d0):
   loop::doSum@23 (line 10)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[8],oop
    - l3: stack[16],oop
    - l4: stack[28]
   Expression stack
    - @0: stack[32],oop
    - @1: stack[28]
    - @2: reg rbp [10]
ScopeDesc(pc=0x00007fb8c105f8e4 offset=5e4):
   loop::doSum@23 (line 10)
ScopeDesc(pc=0x00007fb8c105f9b4 offset=6b4):
   loop::doSum@3 (line 9)
   Locals
    - l0: empty
    - l1: stack[16],oop
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: stack[8]
ScopeDesc(pc=0x00007fb8c105f9c8 offset=6c8):
   loop::doSum@35 (line 11)
ScopeDesc(pc=0x00007fb8c105f9e8 offset=6e8):
   loop::doSum@35 (line 11)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8],oop
    - l4: stack[20]
   Expression stack
    - @0: stack[20]
    - @1: 1029
ScopeDesc(pc=0x00007fb8c105f9fc offset=6fc):
   loop::doSum@35 (line 11)
ScopeDesc(pc=0x00007fb8c105fb0c offset=80c):
   loop::doSum@3 (line 9)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8],oop
    - l4: stack[16]
ScopeDesc(pc=0x00007fb8c105fb20 offset=820):
   loop::doSum@3 (line 9)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007fb8c105f188: 6400
relocInfo@0x00007fb8c105f188 [type=6(runtime_call) addr=0x00007fb8c105f300 offset=0 format=1] | [destination=0x00007fb8cb976794]
         @0x00007fb8c105f18a: f001cc4d
relocInfo@0x00007fb8c105f18c [type=12(metadata) addr=0x00007fb8c105f34d offset=77 format=3 data=1] | [metadata_addr=0x00007fb8c105fb60 *=0x00000008000403e0 offset=0]metadata_value=0x00000008000403e0: {type array float}
         @0x00007fb8c105f18e: f001cc20
relocInfo@0x00007fb8c105f190 [type=12(metadata) addr=0x00007fb8c105f36d offset=32 format=3 data=1] | [metadata_addr=0x00007fb8c105fb60 *=0x00000008000403e0 offset=0]metadata_value=0x00000008000403e0: {type array float}
         @0x00007fb8c105f192: f001cc20
relocInfo@0x00007fb8c105f194 [type=12(metadata) addr=0x00007fb8c105f38d offset=32 format=3 data=1] | [metadata_addr=0x00007fb8c105fb60 *=0x00000008000403e0 offset=0]metadata_value=0x00000008000403e0: {type array float}
         @0x00007fb8c105f196: a202
relocInfo@0x00007fb8c105f196 [type=10(poll) addr=0x00007fb8c105f58f offset=514]
         @0x00007fb8c105f198: a225
relocInfo@0x00007fb8c105f198 [type=10(poll) addr=0x00007fb8c105f7b4 offset=549]
         @0x00007fb8c105f19a: b043
relocInfo@0x00007fb8c105f19a [type=11(poll_return) addr=0x00007fb8c105f7f7 offset=67]
         @0x00007fb8c105f19c: 6450
relocInfo@0x00007fb8c105f19c [type=6(runtime_call) addr=0x00007fb8c105f847 offset=80 format=1] | [destination=0x00007fb8c111e940]
         @0x00007fb8c105f19e: f803cc0699c07fb87005
relocInfo@0x00007fb8c105f1a6 [type=7(external_word) addr=0x00007fb8c105f84c offset=5 data={cc0699c07fb8}] | [target=0x00007fb8cc0699c0]
         @0x00007fb8c105f1a8: 640e
relocInfo@0x00007fb8c105f1a8 [type=6(runtime_call) addr=0x00007fb8c105f85a offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f1aa: 6431
relocInfo@0x00007fb8c105f1aa [type=6(runtime_call) addr=0x00007fb8c105f88b offset=49 format=1] | [destination=0x00007fb8c111e940]
         @0x00007fb8c105f1ac: f803cc0699c07fb87005
relocInfo@0x00007fb8c105f1b4 [type=7(external_word) addr=0x00007fb8c105f890 offset=5 data={cc0699c07fb8}] | [target=0x00007fb8cc0699c0]
         @0x00007fb8c105f1b6: 640e
relocInfo@0x00007fb8c105f1b6 [type=6(runtime_call) addr=0x00007fb8c105f89e offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f1b8: 642d
relocInfo@0x00007fb8c105f1b8 [type=6(runtime_call) addr=0x00007fb8c105f8cb offset=45 format=1] | [destination=0x00007fb8c111e940]
         @0x00007fb8c105f1ba: f803cc0699c07fb87005
relocInfo@0x00007fb8c105f1c2 [type=7(external_word) addr=0x00007fb8c105f8d0 offset=5 data={cc0699c07fb8}] | [target=0x00007fb8cc0699c0]
         @0x00007fb8c105f1c4: 640e
relocInfo@0x00007fb8c105f1c4 [type=6(runtime_call) addr=0x00007fb8c105f8de offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f1c6: f803cc1fd4487fb87006
relocInfo@0x00007fb8c105f1ce [type=7(external_word) addr=0x00007fb8c105f8e4 offset=6 data={cc1fd4487fb8}] | [target=0x00007fb8cc1fd448]
         @0x00007fb8c105f1d0: 640e
relocInfo@0x00007fb8c105f1d0 [type=6(runtime_call) addr=0x00007fb8c105f8f2 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f1d2: f803cc1fd4487fb87006
relocInfo@0x00007fb8c105f1da [type=7(external_word) addr=0x00007fb8c105f8f8 offset=6 data={cc1fd4487fb8}] | [target=0x00007fb8cc1fd448]
         @0x00007fb8c105f1dc: 640e
relocInfo@0x00007fb8c105f1dc [type=6(runtime_call) addr=0x00007fb8c105f906 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f1de: f803cc1fd4487fb87006
relocInfo@0x00007fb8c105f1e6 [type=7(external_word) addr=0x00007fb8c105f90c offset=6 data={cc1fd4487fb8}] | [target=0x00007fb8cc1fd448]
         @0x00007fb8c105f1e8: 640e
relocInfo@0x00007fb8c105f1e8 [type=6(runtime_call) addr=0x00007fb8c105f91a offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f1ea: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f1f2 [type=7(external_word) addr=0x00007fb8c105f920 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f1f4: 640e
relocInfo@0x00007fb8c105f1f4 [type=6(runtime_call) addr=0x00007fb8c105f92e offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f1f6: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f1fe [type=7(external_word) addr=0x00007fb8c105f934 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f200: 640e
relocInfo@0x00007fb8c105f200 [type=6(runtime_call) addr=0x00007fb8c105f942 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f202: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f20a [type=7(external_word) addr=0x00007fb8c105f948 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f20c: 640e
relocInfo@0x00007fb8c105f20c [type=6(runtime_call) addr=0x00007fb8c105f956 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f20e: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f216 [type=7(external_word) addr=0x00007fb8c105f95c offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f218: 640e
relocInfo@0x00007fb8c105f218 [type=6(runtime_call) addr=0x00007fb8c105f96a offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f21a: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f222 [type=7(external_word) addr=0x00007fb8c105f970 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f224: 640e
relocInfo@0x00007fb8c105f224 [type=6(runtime_call) addr=0x00007fb8c105f97e offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f226: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f22e [type=7(external_word) addr=0x00007fb8c105f984 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f230: 640e
relocInfo@0x00007fb8c105f230 [type=6(runtime_call) addr=0x00007fb8c105f992 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f232: 641d
relocInfo@0x00007fb8c105f232 [type=6(runtime_call) addr=0x00007fb8c105f9af offset=29 format=1] | [destination=0x00007fb8c111e940]
         @0x00007fb8c105f234: f803cc0699c07fb87005
relocInfo@0x00007fb8c105f23c [type=7(external_word) addr=0x00007fb8c105f9b4 offset=5 data={cc0699c07fb8}] | [target=0x00007fb8cc0699c0]
         @0x00007fb8c105f23e: 640e
relocInfo@0x00007fb8c105f23e [type=6(runtime_call) addr=0x00007fb8c105f9c2 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f240: 6421
relocInfo@0x00007fb8c105f240 [type=6(runtime_call) addr=0x00007fb8c105f9e3 offset=33 format=1] | [destination=0x00007fb8c111e940]
         @0x00007fb8c105f242: f803cc0699c07fb87005
relocInfo@0x00007fb8c105f24a [type=7(external_word) addr=0x00007fb8c105f9e8 offset=5 data={cc0699c07fb8}] | [target=0x00007fb8cc0699c0]
         @0x00007fb8c105f24c: 640e
relocInfo@0x00007fb8c105f24c [type=6(runtime_call) addr=0x00007fb8c105f9f6 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f24e: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f256 [type=7(external_word) addr=0x00007fb8c105f9fc offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f258: 640e
relocInfo@0x00007fb8c105f258 [type=6(runtime_call) addr=0x00007fb8c105fa0a offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f25a: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f262 [type=7(external_word) addr=0x00007fb8c105fa10 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f264: 640e
relocInfo@0x00007fb8c105f264 [type=6(runtime_call) addr=0x00007fb8c105fa1e offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f266: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f26e [type=7(external_word) addr=0x00007fb8c105fa24 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f270: 640e
relocInfo@0x00007fb8c105f270 [type=6(runtime_call) addr=0x00007fb8c105fa32 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f272: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f27a [type=7(external_word) addr=0x00007fb8c105fa38 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f27c: 640e
relocInfo@0x00007fb8c105f27c [type=6(runtime_call) addr=0x00007fb8c105fa46 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f27e: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f286 [type=7(external_word) addr=0x00007fb8c105fa4c offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f288: 640e
relocInfo@0x00007fb8c105f288 [type=6(runtime_call) addr=0x00007fb8c105fa5a offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f28a: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f292 [type=7(external_word) addr=0x00007fb8c105fa60 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f294: 640e
relocInfo@0x00007fb8c105f294 [type=6(runtime_call) addr=0x00007fb8c105fa6e offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f296: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f29e [type=7(external_word) addr=0x00007fb8c105fa74 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f2a0: 640e
relocInfo@0x00007fb8c105f2a0 [type=6(runtime_call) addr=0x00007fb8c105fa82 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f2a2: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f2aa [type=7(external_word) addr=0x00007fb8c105fa88 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f2ac: 640e
relocInfo@0x00007fb8c105f2ac [type=6(runtime_call) addr=0x00007fb8c105fa96 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f2ae: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f2b6 [type=7(external_word) addr=0x00007fb8c105fa9c offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f2b8: 640e
relocInfo@0x00007fb8c105f2b8 [type=6(runtime_call) addr=0x00007fb8c105faaa offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f2ba: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f2c2 [type=7(external_word) addr=0x00007fb8c105fab0 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f2c4: 640e
relocInfo@0x00007fb8c105f2c4 [type=6(runtime_call) addr=0x00007fb8c105fabe offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f2c6: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f2ce [type=7(external_word) addr=0x00007fb8c105fac4 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f2d0: 640e
relocInfo@0x00007fb8c105f2d0 [type=6(runtime_call) addr=0x00007fb8c105fad2 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f2d2: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105f2da [type=7(external_word) addr=0x00007fb8c105fad8 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105f2dc: 640e
relocInfo@0x00007fb8c105f2dc [type=6(runtime_call) addr=0x00007fb8c105fae6 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f2de: 6421
relocInfo@0x00007fb8c105f2de [type=6(runtime_call) addr=0x00007fb8c105fb07 offset=33 format=1] | [destination=0x00007fb8c111e940]
         @0x00007fb8c105f2e0: f803cc0699c07fb87005
relocInfo@0x00007fb8c105f2e8 [type=7(external_word) addr=0x00007fb8c105fb0c offset=5 data={cc0699c07fb8}] | [target=0x00007fb8cc0699c0]
         @0x00007fb8c105f2ea: 640e
relocInfo@0x00007fb8c105f2ea [type=6(runtime_call) addr=0x00007fb8c105fb1a offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105f2ec: f3298006
relocInfo@0x00007fb8c105f2ee [type=8(internal_word) addr=0x00007fb8c105fb20 offset=6 data=809] | [target=0x00007fb8c105f7f7]
         @0x00007fb8c105f2f0: 6411
relocInfo@0x00007fb8c105f2f0 [type=6(runtime_call) addr=0x00007fb8c105fb31 offset=17 format=1] | [destination=0x00007fb8c111d6a0]
         @0x00007fb8c105f2f2: 000f
relocInfo@0x00007fb8c105f2f2 [type=0(none) addr=0x00007fb8c105fb40 offset=15]
         @0x00007fb8c105f2f4: 6400
relocInfo@0x00007fb8c105f2f4 [type=6(runtime_call) addr=0x00007fb8c105fb40 offset=0 format=1] | [destination=0x00007fb8c1081720]
         @0x00007fb8c105f2f6: 640f
relocInfo@0x00007fb8c105f2f6 [type=6(runtime_call) addr=0x00007fb8c105fb4f offset=15 format=1] | [destination=0x00007fb8c111ec60]
         @0x00007fb8c105f2f8: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 3 entries, 28 bytes):
{
   < 0x00007fb8c105f3a0, 0x00007fb8c105faec > < 0x00007fb8c105f3a4, 0x00007fb8c105faec > < 0x00007fb8c105f3a8, 0x00007fb8c105faec > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x00000001014b7c68 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000001014b7c68}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x00000008000403e0 {type array float}
#2: 0x00007fb86740e428 {method} {0x00007fb86740e428} 'doSum' '([F[F[F)V' in 'loop'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Counted          Loop: N361/N203  counted [0,1024),+1 (-1 iters) 
Counted          Loop: N372/N338  counted [int,1029),+1 (-1 iters) 
Loop: N0/N0  has_sfpt
  Loop: N360/N359  limit_check profile_predicated predicated
    Loop: N361/N203  limit_check profile_predicated predicated counted [0,1024),+1 (-1 iters)  has_sfpt strip_mined
  Loop: N371/N370  limit_check profile_predicated predicated
    Loop: N372/N338  limit_check profile_predicated predicated counted [int,1029),+1 (-1 iters)  has_sfpt strip_mined
Predicate IC     Loop: N361/N203  limit_check profile_predicated predicated counted [0,1024),+1 (2326 iters)  has_sfpt strip_mined
Predicate RC     Loop: N361/N203  limit_check profile_predicated predicated counted [0,1024),+1 (2326 iters)  has_sfpt strip_mined
Predicate IC     Loop: N361/N203  limit_check profile_predicated predicated counted [0,1024),+1 (2326 iters)  has_sfpt strip_mined
Predicate RC     Loop: N361/N203  limit_check profile_predicated predicated counted [0,1024),+1 (2326 iters)  has_sfpt strip_mined
Predicate IC     Loop: N361/N203  limit_check profile_predicated predicated counted [0,1024),+1 (2326 iters)  has_sfpt strip_mined
Predicate RC     Loop: N361/N203  limit_check profile_predicated predicated counted [0,1024),+1 (2326 iters)  has_sfpt strip_mined
Predicate RC     Loop: N372/N338  limit_check profile_predicated predicated counted [int,1029),+1 (6 iters)  has_sfpt rce strip_mined
Predicate RC     Loop: N372/N338  limit_check profile_predicated predicated counted [int,1029),+1 (6 iters)  has_sfpt rce strip_mined
Predicate RC     Loop: N372/N338  limit_check profile_predicated predicated counted [int,1029),+1 (6 iters)  has_sfpt rce strip_mined
Loop: N0/N0  has_sfpt
  Loop: N360/N359  limit_check profile_predicated predicated sfpts={ 362 }
    Loop: N361/N203  limit_check profile_predicated predicated counted [0,1024),+1 (2326 iters)  has_sfpt strip_mined
  Loop: N371/N370  limit_check profile_predicated predicated sfpts={ 373 }
    Loop: N372/N338  limit_check profile_predicated predicated counted [int,1029),+1 (6 iters)  has_sfpt strip_mined
PreMainPost      Loop: N361/N203  limit_check profile_predicated predicated counted [0,1024),+1 (2326 iters)  has_sfpt strip_mined
Unroll 2         Loop: N361/N203  counted [int,1024),+1 (2326 iters)  main has_sfpt strip_mined
PreMainPost      Loop: N372/N338  limit_check profile_predicated predicated counted [int,1029),+1 (6 iters)  has_sfpt strip_mined
Unroll 2         Loop: N372/N338  counted [int,1029),+1 (6 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N693/N698  limit_check profile_predicated predicated counted [0,int),+1 (4 iters)  pre has_sfpt
  Loop: N360/N359  sfpts={ 362 }
    Loop: N897/N203  counted [int,1023),+2 (2326 iters)  main has_sfpt strip_mined
  Loop: N645/N650  counted [int,1024),+1 (4 iters)  post has_sfpt
  Loop: N955/N960  limit_check profile_predicated predicated counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N371/N370  sfpts={ 373 }
    Loop: N1158/N338  counted [int,1028),+2 (6 iters)  main has_sfpt strip_mined
  Loop: N923/N928  counted [int,1029),+1 (4 iters)  post has_sfpt
Unroll 4         Loop: N897/N203  counted [int,1023),+2 (2326 iters)  main has_sfpt strip_mined
Unroll 4         Loop: N1158/N338  counted [int,1028),+2 (6 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N693/N698  limit_check profile_predicated predicated counted [0,int),+1 (4 iters)  pre has_sfpt
  Loop: N360/N359  sfpts={ 362 }
    Loop: N1277/N203  counted [int,1021),+4 (2326 iters)  main has_sfpt strip_mined
  Loop: N645/N650  counted [int,1024),+1 (4 iters)  post has_sfpt
  Loop: N955/N960  limit_check profile_predicated predicated counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N371/N370  sfpts={ 373 }
    Loop: N1372/N338  counted [int,1026),+4 (6 iters)  main has_sfpt strip_mined
  Loop: N923/N928  counted [int,1029),+1 (4 iters)  post has_sfpt
Unroll 8         Loop: N1277/N203  counted [int,1021),+4 (2326 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N693/N698  limit_check profile_predicated predicated counted [0,int),+1 (4 iters)  pre has_sfpt
  Loop: N360/N359  sfpts={ 362 }
    Loop: N1535/N203  counted [int,1017),+8 (2326 iters)  main has_sfpt strip_mined
  Loop: N645/N650  counted [int,1024),+1 (4 iters)  post has_sfpt
  Loop: N955/N960  limit_check profile_predicated predicated counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N371/N370  sfpts={ 373 }
    Loop: N1372/N338  counted [int,1026),+4 (6 iters)  main has_sfpt strip_mined
  Loop: N923/N928  counted [int,1029),+1 (4 iters)  post has_sfpt
Unroll 16         Loop: N1535/N203  counted [int,1017),+8 (2326 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N693/N698  limit_check profile_predicated predicated counted [0,int),+1 (4 iters)  pre has_sfpt
  Loop: N360/N359  sfpts={ 362 }
    Loop: N1737/N203  counted [int,1009),+16 (2326 iters)  main has_sfpt strip_mined
  Loop: N645/N650  counted [int,1024),+1 (4 iters)  post has_sfpt
  Loop: N955/N960  limit_check profile_predicated predicated counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N371/N370  sfpts={ 373 }
    Loop: N1372/N338  counted [int,1026),+4 (6 iters)  main has_sfpt strip_mined
  Loop: N923/N928  counted [int,1029),+1 (4 iters)  post has_sfpt
PredicatesOff
Loop: N0/N0  has_sfpt
  Loop: N693/N698  counted [0,int),+1 (4 iters)  pre has_sfpt
  Loop: N360/N359  sfpts={ 362 }
    Loop: N1737/N203  counted [int,1009),+16 (2326 iters)  main has_sfpt strip_mined
  Loop: N645/N650  counted [int,1024),+1 (4 iters)  post has_sfpt
  Loop: N955/N960  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N371/N370  sfpts={ 373 }
    Loop: N1372/N338  counted [int,1026),+4 (6 iters)  main has_sfpt strip_mined
  Loop: N923/N928  counted [int,1029),+1 (4 iters)  post has_sfpt
SuperWord::output        Loop: N1737/N203  counted [int,1009),+16 (2326 iters)  main has_sfpt strip_mined
PhaseIdealLoop::create_reserve_version_of_loop:
	 iff = 1845,  1845  If  ===  1640  29  [[ 1846  1847 ]] P=0.999999, C=-1.000000
	 iffast = 1846,  1846  IfTrue  ===  1845  [[]] #1
	 ifslow = 1847,  1847  IfFalse  ===  1845  [[]] #0
	 before replace_input_of: head = 1737,  1737  CountedLoop  ===  1737  360  203  [[ 1646  1650  1654  1658  1662  1666  1670  1674  1737  1488  1748  1749  1492  1496  1500  886  1252  356  1256  192 ]] inner stride: 16 main of N1737 strip mined !orig=[1535],[1277],[897],[361],[351],[78] !jvms: loop::doSum @ bci:11 (line 10)
	 before replace_input_of: slow_head = 2027,  2027  CountedLoop  ===  2027  2049  2029  [[ 1848  1852  1856  1860  1864  1868  1872  1876  1880  1884  1888  1892  1896  1900  1904  1908  2027  2028  2030  2047 ]] inner stride: 16 main of N2027 strip mined !orig=1737,[1535],[1277],[897],[361],[351],[78] !jvms: loop::doSum @ bci:11 (line 10)
	 after  replace_input_of: head = 1737,  1737  CountedLoop  ===  1737  360  203  [[ 1646  1650  1654  1658  1662  1666  1670  1674  1737  1488  1748  1749  1492  1496  1500  886  1252  356  1256  192 ]] inner stride: 16 main of N1737 strip mined !orig=[1535],[1277],[897],[361],[351],[78] !jvms: loop::doSum @ bci:11 (line 10)
	 after  replace_input_of: slow_head = 2027,  2027  CountedLoop  ===  2027  2049  2029  [[ 1848  1852  1856  1860  1864  1868  1872  1876  1880  1884  1888  1892  1896  1900  1904  1908  2027  2028  2030  2047 ]] inner stride: 16 main of N2027 strip mined !orig=1737,[1535],[1277],[897],[361],[351],[78] !jvms: loop::doSum @ bci:11 (line 10)
SuperWord::output        Loop: N1372/N338  counted [int,1026),+4 (6 iters)  main has_sfpt strip_mined
PhaseIdealLoop::create_reserve_version_of_loop:
	 iff = 2073,  2073  If  ===  1341  29  [[ 2074  2075 ]] P=0.999999, C=-1.000000
	 iffast = 2074,  2074  IfTrue  ===  2073  [[]] #1
	 ifslow = 2075,  2075  IfFalse  ===  2073  [[]] #0
	 before replace_input_of: head = 1372,  1372  CountedLoop  ===  1372  371  338  [[ 1347  1351  1372  1147  1375  1378  328  367 ]] inner stride: 4 main of N1372 strip mined !orig=[1158],[372],[352],[258] !jvms: loop::doSum @ bci:38 (line 12)
	 before replace_input_of: slow_head = 2123,  2123  CountedLoop  ===  2123  2133  2125  [[ 2076  2080  2084  2088  2123  2124  2130  2131 ]] inner stride: 4 main of N2123 strip mined !orig=1372,[1158],[372],[352],[258] !jvms: loop::doSum @ bci:38 (line 12)
	 after  replace_input_of: head = 1372,  1372  CountedLoop  ===  1372  371  338  [[ 1347  1351  1372  1147  1375  1378  328  367 ]] inner stride: 4 main of N1372 strip mined !orig=[1158],[372],[352],[258] !jvms: loop::doSum @ bci:38 (line 12)
	 after  replace_input_of: slow_head = 2123,  2123  CountedLoop  ===  2123  2133  2125  [[ 2076  2080  2084  2088  2123  2124  2130  2131 ]] inner stride: 4 main of N2123 strip mined !orig=1372,[1158],[372],[352],[258] !jvms: loop::doSum @ bci:38 (line 12)
Loop: N0/N0  has_sfpt
  Loop: N693/N698  counted [0,int),+1 (4 iters)  pre has_sfpt
  Loop: N360/N359  sfpts={ 362 }
    Loop: N1737/N203  counted [int,1009),+16 (2326 iters)  main vector has_sfpt strip_mined
  Loop: N645/N650  counted [int,1024),+1 (4 iters)  post has_sfpt
  Loop: N955/N960  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N371/N370  sfpts={ 373 }
    Loop: N1372/N338  counted [int,1026),+4 (6 iters)  main vector has_sfpt strip_mined
  Loop: N923/N928  counted [int,1029),+1 (4 iters)  post has_sfpt
PostVector      Loop: N1737/N203  counted [int,1009),+16 (2326 iters)  main vector has_sfpt strip_mined
Unroll 32         Loop: N1737/N203  counted [int,1009),+16 (2326 iters)  main vector has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N693/N698  counted [0,int),+1 (4 iters)  pre has_sfpt
  Loop: N360/N359  sfpts={ 362 }
    Loop: N2272/N203  counted [int,993),+32 (2326 iters)  main vector has_sfpt strip_mined
  Loop: N2183/N2185  counted [int,1009),+16 (16 iters)  post vector has_sfpt
  Loop: N645/N650  counted [int,1024),+1 (4 iters)  post has_sfpt
  Loop: N955/N960  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N371/N370  sfpts={ 373 }
    Loop: N1372/N338  counted [int,1026),+4 (6 iters)  main vector has_sfpt strip_mined
  Loop: N923/N928  counted [int,1029),+1 (4 iters)  post has_sfpt
Unroll 64(31)     Loop: N2272/N203  counted [int,993),+32 (2326 iters)  main vector has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N693/N698  counted [0,int),+1 (4 iters)  pre has_sfpt
  Loop: N360/N359  sfpts={ 362 }
    Loop: N2384/N203  counted [int,961),+64 (2326 iters)  main vector has_sfpt strip_mined
  Loop: N2183/N2185  counted [int,1009),+16 (16 iters)  post vector has_sfpt
  Loop: N645/N650  counted [int,1024),+1 (4 iters)  post has_sfpt
  Loop: N955/N960  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N371/N370  sfpts={ 373 }
    Loop: N1372/N338  counted [int,1026),+4 (6 iters)  main vector has_sfpt strip_mined
  Loop: N923/N928  counted [int,1029),+1 (4 iters)  post has_sfpt
Unroll 128(15)     Loop: N2384/N203  counted [int,961),+64 (2326 iters)  main vector has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N693/N698  counted [0,int),+1 (4 iters)  pre has_sfpt
  Loop: N360/N359  sfpts={ 362 }
    Loop: N2527/N203  counted [int,897),+128 (2326 iters)  main vector has_sfpt strip_mined
  Loop: N2183/N2185  counted [int,1009),+16 (16 iters)  post vector has_sfpt
  Loop: N645/N650  counted [int,1024),+1 (4 iters)  post has_sfpt
  Loop: N955/N960  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N371/N370  sfpts={ 373 }
    Loop: N1372/N338  counted [int,1026),+4 (6 iters)  main vector has_sfpt strip_mined
  Loop: N923/N928  counted [int,1029),+1 (4 iters)  post has_sfpt

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 25 ------------------------
{method}
 - this oop:          0x00007fb86740e428
 - method holder:     'loop'
 - constants:         0x00007fb86740e048 constant pool [61]/operands[5] {0x00007fb86740e048} for 'loop' cache=0x00007fb86740e628
 - access:            0xc1000001  public 
 - name:              'doSum'
 - signature:         '([F[F[F)V'
 - max stack:         6
 - max locals:        5
 - size of params:    4
 - method size:       13
 - vtable index:      5
 - i2i entry:         0x00007fb8c100dc00
 - adapters:          AHE@0x00007fb8c4309880: 0xbbbb i2c: 0x00007fb8c10a67e0 c2i: 0x00007fb8c10a68cc c2iUV: 0x00007fb8c10a6896 c2iNCI: 0x00007fb8c10a6909
 - compiled entry     0x00007fb8c10a68cc
 - code size:         58
 - code start:        0x00007fb86740e3d8
 - code end (excl):   0x00007fb86740e412
 - method data:       0x00007fb86740e800
 - checked ex length: 0
 - linenumber start:  0x00007fb86740e412
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 25 -----------------------
#
#  void ( loop:NotNull *, float[int:>=0]:exact *, float[int:>=0]:exact *, float[int:>=0]:exact * )
#
#r018 rsi:rsi   : parm 0: loop:NotNull *
#r016 rdx:rdx   : parm 1: float[int:>=0]:exact *
#r010 rcx:rcx   : parm 2: float[int:>=0]:exact *
#r004 r8:r8   : parm 3: float[int:>=0]:exact *
# -- Old rsp -- Framesize: 64 --
#r591 rsp+60: in_preserve
#r590 rsp+56: return address
#r589 rsp+52: in_preserve
#r588 rsp+48: saved fp register
#r587 rsp+44: pad2, stack alignment
#r586 rsp+40: pad2, stack alignment
#r585 rsp+36: Fixed slot 1
#r584 rsp+32: Fixed slot 0
#r599 rsp+28: spill
#r598 rsp+24: spill
#r597 rsp+20: spill
#r596 rsp+16: spill
#r595 rsp+12: spill
#r594 rsp+ 8: spill
#r593 rsp+ 4: spill
#r592 rsp+ 0: spill
#
000     N566: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

        nop 	# 4 bytes pad for loops and calls

020     B1: #	out( B87 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (176 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movl    R9, [RCX + #12 (8-bit)]	# range
030     NullCheck RCX

030     B2: #	out( B87 B3 ) <- in( B1 )  Freq: 0.999999
030     testl   R9, R9	# unsigned
033     jbe,u   B87  P=0.000001 C=-1.000000

039     B3: #	out( B87 B4 ) <- in( B2 )  Freq: 0.999998
        nop 	# 7 bytes pad for loops and calls
040     cmpl    R9, #1023	# unsigned
047     jbe,u   B87  P=0.000001 C=-1.000000

04d     B4: #	out( B87 B5 ) <- in( B3 )  Freq: 0.999997
04d     movl    RDI, [R8 + #12 (8-bit)]	# range
051     NullCheck R8

051     B5: #	out( B87 B6 ) <- in( B4 )  Freq: 0.999996
051     testl   RDI, RDI	# unsigned
053     jbe,u   B87  P=0.000001 C=-1.000000

059     B6: #	out( B87 B7 ) <- in( B5 )  Freq: 0.999995
        nop 	# 7 bytes pad for loops and calls
060     cmpl    RDI, #1023	# unsigned
066     jbe,u   B87  P=0.000001 C=-1.000000

06c     B7: #	out( B87 B8 ) <- in( B6 )  Freq: 0.999994
06c     movl    RBX, [RDX + #12 (8-bit)]	# range
06f     NullCheck RDX

06f     B8: #	out( B87 B9 ) <- in( B7 )  Freq: 0.999993
06f     testl   RBX, RBX	# unsigned
071     jbe,u   B87  P=0.000001 C=-1.000000

077     B9: #	out( B87 B10 ) <- in( B8 )  Freq: 0.999992
        nop 	# 9 bytes pad for loops and calls
080     cmpl    RBX, #1023	# unsigned
086     jbe,u   B87  P=0.000001 C=-1.000000

08c     B10: #	out( B11 ) <- in( B9 )  Freq: 0.999991
08c     movl    RAX, RDX	# ptr -> int
08e     shrl    RAX, #2
091     movl    R10, RAX	# spill
094     andl    R10, #15	# int
098     movl    RSI, #11	# int
09d     subl    RSI, R10	# int
0a0     andl    RSI, #15	# int
0a3     incl    RSI	# int
0a5     movl    R11, #1024	# int
0ab     cmpl    RSI, R11
0ae     cmovlgt RSI, R11	# min
0b2     xorl    RBP, RBP	# int

0b4     B11: #	out( B13 B12 ) <- in( B10 B12 ) Loop( B11-B12 inner pre of N361) Freq: 1.99998
0b4     movss   XMM0, [R8 + #16 + RBP << #2]	# float
0bb     vaddss  XMM1, XMM0, [RCX + #16 + RBP << #2]
0c1     movss   [RDX + #16 + RBP << #2], XMM1	# float
0c7     movl    R10, RBP	# spill
0ca     incl    R10	# int
0cd     cmpl    R10, RSI
0d0     jge,s   B13	# loop end  P=0.500000 C=15099358.000000

0d2     B12: #	out( B11 ) <- in( B11 )  Freq: 0.999991
0d2     movl    RBP, R10	# spill
0d5     jmp,s   B11

0d7     B13: #	out( B63 B14 ) <- in( B11 )  Freq: 0.999991
0d7     # castII of RBP
0d7     movl    R10, RBP	# spill
0da     incl    R10	# int
        nop 	# 3 bytes pad for loops and calls
0e0     cmpl    R10, RBX	# unsigned
0e3     jnb,u   B63  P=0.000001 C=-1.000000

0e9     B14: #	out( B64 B15 ) <- in( B13 )  Freq: 0.99999
0e9     cmpl    R10, RBX	# unsigned
0ec     jnb,u   B64  P=0.000001 C=-1.000000

0f2     B15: #	out( B65 B16 ) <- in( B14 )  Freq: 0.999989
0f2     cmpl    R10, RDI	# unsigned
0f5     jnb,u   B65  P=0.000001 C=-1.000000

0fb     B16: #	out( B66 B17 ) <- in( B15 )  Freq: 0.999988
        nop 	# 5 bytes pad for loops and calls
100     cmpl    R10, RDI	# unsigned
103     jnb,u   B66  P=0.000001 C=-1.000000

109     B17: #	out( B67 B18 ) <- in( B16 )  Freq: 0.999987
109     cmpl    R10, R9	# unsigned
10c     jnb,u   B67  P=0.000001 C=-1.000000

112     B18: #	out( B68 B19 ) <- in( B17 )  Freq: 0.999986
112     cmpl    R10, R9	# unsigned
115     jnb,u   B68  P=0.000001 C=-1.000000

11b     B19: #	out( B69 B20 ) <- in( B18 )  Freq: 0.999985
        nop 	# 5 bytes pad for loops and calls
120     cmpl    R10, R9	# unsigned
123     jnb,u   B69  P=0.000001 C=-1.000000

129     B20: #	out( B70 B21 ) <- in( B19 )  Freq: 0.999984
129     addl    RBP, #128	# int
12f     cmpl    RBP, R9	# unsigned
132     jnb,u   B70  P=0.000001 C=-1.000000

138     B21: #	out( B71 B22 ) <- in( B20 )  Freq: 0.999983
138     cmpl    R10, RDI	# unsigned
        nop 	# 5 bytes pad for loops and calls
140     jnb,u   B71  P=0.000001 C=-1.000000

146     B22: #	out( B72 B23 ) <- in( B21 )  Freq: 0.999982
146     cmpl    RBP, RDI	# unsigned
148     jnb,u   B72  P=0.000001 C=-1.000000

14e     B23: #	out( B73 B24 ) <- in( B22 )  Freq: 0.999981
14e     cmpl    R10, RBX	# unsigned
151     jnb,u   B73  P=0.000001 C=-1.000000

157     B24: #	out( B27 B25 ) <- in( B23 )  Freq: 0.99998
157     cmpl    RBP, RBX	# unsigned
159     jb,us  B27  P=0.999999 C=-1.000000

15b     B25: #	out( N566 ) <- in( B24 )  Freq: 1.01326e-06
15b     stop	# ShouldNotReachHere
        nop 	# 1 bytes pad for loops and calls

170     B26: #	out( B27 ) <- in( B27 ) top-of-loop Freq: 2324.6
170     movl    R10, RSI	# spill

173     B27: #	out( B26 B28 ) <- in( B24 B26 ) Loop( B27-B26 inner main of N126) Freq: 2325.6
173     load_vector XMM0,[RCX + #16 + R10 << #2]
17e     vaddps  XMM0,XMM0,[R8 + #16 + R10 << #2]	! add packedF
189     store_vector [RDX + #16 + R10 << #2],XMM0
	
194     load_vector XMM0,[RCX + #80 + R10 << #2]
19f     vaddps  XMM0,XMM0,[R8 + #80 + R10 << #2]	! add packedF
1aa     store_vector [RDX + #80 + R10 << #2],XMM0
	
1b5     load_vector XMM0,[RCX + #144 + R10 << #2]
1c0     vaddps  XMM0,XMM0,[R8 + #144 + R10 << #2]	! add packedF
1cb     store_vector [RDX + #144 + R10 << #2],XMM0
	
1d6     load_vector XMM0,[RCX + #208 + R10 << #2]
1e1     vaddps  XMM0,XMM0,[R8 + #208 + R10 << #2]	! add packedF
1ec     store_vector [RDX + #208 + R10 << #2],XMM0
	
1f7     load_vector XMM0,[RCX + #272 + R10 << #2]
202     vaddps  XMM0,XMM0,[R8 + #272 + R10 << #2]	! add packedF
20d     store_vector [RDX + #272 + R10 << #2],XMM0
	
218     load_vector XMM0,[RCX + #336 + R10 << #2]
223     vaddps  XMM0,XMM0,[R8 + #336 + R10 << #2]	! add packedF
22e     store_vector [RDX + #336 + R10 << #2],XMM0
	
239     load_vector XMM0,[RCX + #400 + R10 << #2]
244     vaddps  XMM0,XMM0,[R8 + #400 + R10 << #2]	! add packedF
24f     store_vector [RDX + #400 + R10 << #2],XMM0
	
25a     load_vector XMM0,[RCX + #464 + R10 << #2]
265     vaddps  XMM0,XMM0,[R8 + #464 + R10 << #2]	! add packedF
270     store_vector [RDX + #464 + R10 << #2],XMM0
	
27b     movl    RSI, R10	# spill
27e     addl    RSI, #128	# int
284     cmpl    RSI, #897
28a     jl     B26	# loop end  P=0.999570 C=15099358.000000

290     B28: #	out( B62 B29 ) <- in( B27 )  Freq: 0.999979
290     cmpl    RSI, #1009
296     jge     B62  P=0.500000 C=-1.000000

29c     B29: #	out( B30 ) <- in( B28 )  Freq: 0.499989
29c     # castII of R10
29c     addl    R10, #128	# int

2a3     B30: #	out( B30 B31 ) <- in( B29 B30 ) Loop( B30-B30 inner post of N1737) Freq: 0.999979
2a3     load_vector XMM0,[RCX + #16 + R10 << #2]
2ae     vaddps  XMM0,XMM0,[R8 + #16 + R10 << #2]	! add packedF
2b9     store_vector [RDX + #16 + R10 << #2],XMM0
	
2c4     addl    R10, #16	# int
2c8     cmpl    R10, #1009
2cf     jl,s   B30	# loop end  P=0.500000 C=15099358.000000

2d1     B31: #	out( B34 B32 ) <- in( B30 B62 )  Freq: 0.999979
2d1     cmpl    R10, #1024
2d8     jge,s   B34  P=0.500000 C=-1.000000

2da     B32: #	out( B33 ) <- in( B31 )  Freq: 0.499989
2da     # castII of R10
        nop 	# 2 bytes pad for loops and calls

2dc     B33: #	out( B33 B34 ) <- in( B32 B33 ) Loop( B33-B33 inner post of N361) Freq: 0.999979
2dc     movss   XMM1, [R8 + #16 + R10 << #2]	# float
2e3     vaddss  XMM0, XMM1, [RCX + #16 + R10 << #2]
2ea     movss   [RDX + #16 + R10 << #2], XMM0	# float
2f1     incl    R10	# int
        nop 	# 12 bytes pad for loops and calls
300     cmpl    R10, #1024
307     jl,s   B33	# loop end  P=0.500000 C=15099358.000000

309     B34: #	out( B74 B35 ) <- in( B33 B31 )  Freq: 0.999979
309     cmpl    R10, R9	# unsigned
30c     jnb,u   B74  P=0.000001 C=-1.000000

312     B35: #	out( B74 B36 ) <- in( B34 )  Freq: 0.999978
        nop 	# 14 bytes pad for loops and calls
320     cmpl    R9, #1028	# unsigned
327     jbe,u   B74  P=0.000001 C=-1.000000

32d     B36: #	out( B74 B37 ) <- in( B35 )  Freq: 0.999977
32d     cmpl    R10, RDI	# unsigned
330     jnb,u   B74  P=0.000001 C=-1.000000

336     B37: #	out( B74 B38 ) <- in( B36 )  Freq: 0.999976
        nop 	# 10 bytes pad for loops and calls
340     cmpl    RDI, #1028	# unsigned
346     jbe,u   B74  P=0.000001 C=-1.000000

34c     B38: #	out( B74 B39 ) <- in( B37 )  Freq: 0.999975
34c     cmpl    R10, RBX	# unsigned
34f     jnb,u   B74  P=0.000001 C=-1.000000

355     B39: #	out( B74 B40 ) <- in( B38 )  Freq: 0.999974
        nop 	# 11 bytes pad for loops and calls
360     cmpl    RBX, #1028	# unsigned
366     jbe,u   B74  P=0.000001 C=-1.000000

36c     B40: #	out( B41 ) <- in( B39 )  Freq: 0.999973
36c     andl    RAX, #3	# int
36f     addl    RAX, R10	# int
372     movl    R11, #1029	# int
378     movl    RBP, #-1	# int
37d     subl    RBP, RAX	# int
37f     andl    RBP, #3	# int
382     addl    RBP, R10	# int
385     incl    RBP	# int
387     cmpl    RBP, R11
38a     cmovlgt RBP, R11	# min

38e     B41: #	out( B43 B42 ) <- in( B40 B42 ) Loop( B41-B42 inner pre of N372) Freq: 1.99995
38e     movss   XMM0, [RCX + #16 + R10 << #2]	# float
395     vaddss  XMM1, XMM0, [R8 + #16 + R10 << #2]
39c     movss   [RDX + #16 + R10 << #2], XMM1	# float
3a3     movl    R11, R10	# spill
3a6     incl    R11	# int
3a9     cmpl    R11, RBP
3ac     jge,s   B43	# loop end  P=0.500000 C=32477.000000

3ae     B42: #	out( B41 ) <- in( B41 )  Freq: 0.999973
3ae     movl    R10, R11	# spill
3b1     jmp,s   B41

3b3     B43: #	out( B58 B44 ) <- in( B41 )  Freq: 0.999973
        nop 	# 13 bytes pad for loops and calls
3c0     cmpl    R11, #1026
3c7     jge     B58  P=0.000001 C=-1.000000

3cd     B44: #	out( B75 B45 ) <- in( B43 )  Freq: 0.999972
3cd     # castII of R10
3cd     movl    R11, R10	# spill
3d0     incl    R11	# int
3d3     cmpl    R11, RBX	# unsigned
3d6     jnb,u   B75  P=0.000001 C=-1.000000

3dc     B45: #	out( B76 B46 ) <- in( B44 )  Freq: 0.999971
        nop 	# 4 bytes pad for loops and calls
3e0     cmpl    R11, RBX	# unsigned
3e3     jnb,u   B76  P=0.000001 C=-1.000000

3e9     B46: #	out( B77 B47 ) <- in( B45 )  Freq: 0.99997
3e9     cmpl    R11, RDI	# unsigned
3ec     jnb,u   B77  P=0.000001 C=-1.000000

3f2     B47: #	out( B78 B48 ) <- in( B46 )  Freq: 0.999969
3f2     cmpl    R11, RDI	# unsigned
3f5     jnb,u   B78  P=0.000001 C=-1.000000

3fb     B48: #	out( B79 B49 ) <- in( B47 )  Freq: 0.999968
        nop 	# 5 bytes pad for loops and calls
400     cmpl    R11, R9	# unsigned
403     jnb,u   B79  P=0.000001 C=-1.000000

409     B49: #	out( B80 B50 ) <- in( B48 )  Freq: 0.999967
409     cmpl    R11, R9	# unsigned
40c     jnb,u   B80  P=0.000001 C=-1.000000

412     B50: #	out( B81 B51 ) <- in( B49 )  Freq: 0.999966
412     cmpl    R11, R9	# unsigned
415     jnb,u   B81  P=0.000001 C=-1.000000

41b     B51: #	out( B82 B52 ) <- in( B50 )  Freq: 0.999965
41b     addl    R10, #4	# int
        nop 	# 1 bytes pad for loops and calls
420     cmpl    R10, R9	# unsigned
423     jnb,u   B82  P=0.000001 C=-1.000000

429     B52: #	out( B83 B53 ) <- in( B51 )  Freq: 0.999964
429     cmpl    R11, RDI	# unsigned
42c     jnb,u   B83  P=0.000001 C=-1.000000

432     B53: #	out( B84 B54 ) <- in( B52 )  Freq: 0.999963
432     cmpl    R10, RDI	# unsigned
435     jnb,u   B84  P=0.000001 C=-1.000000

43b     B54: #	out( B85 B55 ) <- in( B53 )  Freq: 0.999961
        nop 	# 5 bytes pad for loops and calls
440     cmpl    R11, RBX	# unsigned
443     jnb,u   B85  P=0.000001 C=-1.000000

449     B55: #	out( B86 B56 ) <- in( B54 )  Freq: 0.99996
449     cmpl    R10, RBX	# unsigned
44c     jnb,u   B86  P=0.000001 C=-1.000000

452     B56: #	out( B56 B57 ) <- in( B55 B56 ) Loop( B56-B56 inner main of N253) Freq: 6.00007
452     load_vector XMM0,[RCX + #16 + R11 << #2]
459     vaddps  XMM0,XMM0,[R8 + #16 + R11 << #2]	! add packedF
460     store_vector [RDX + #16 + R11 << #2],XMM0
	
467     addl    R11, #4	# int
46b     cmpl    R11, #1026
472     jl,s   B56	# loop end  P=0.833342 C=32477.000000

474     B57: #	out( B58 ) <- in( B56 )  Freq: 0.999959
474     # TLS is in R15
474     movq    R9, [R15 + #912 (32-bit)]	# ptr
47b     testl   rax, [R9]	# Safepoint: poll for GC        # loop::doSum @ bci:54 (line 11) L[0]=_ L[1]=RDX L[2]=RCX L[3]=R8 L[4]=R11
        # OopMap {r8=Oop rcx=Oop rdx=Oop off=1147/0x47b}

47e     B58: #	out( B61 B59 ) <- in( B43 B57 )  Freq: 0.99996
        nop 	# 2 bytes pad for loops and calls
480     cmpl    R11, #1029
487     jge,s   B61  P=0.500000 C=-1.000000

489     B59: #	out( B60 ) <- in( B58 )  Freq: 0.49998
489     # castII of R11
        nop 	# 3 bytes pad for loops and calls

48c     B60: #	out( B60 B61 ) <- in( B59 B60 ) Loop( B60-B60 inner post of N372) Freq: 0.99996
48c     movss   XMM1, [RCX + #16 + R11 << #2]	# float
493     vaddss  XMM0, XMM1, [R8 + #16 + R11 << #2]
49a     movss   [RDX + #16 + R11 << #2], XMM0	# float
4a1     incl    R11	# int
4a4     cmpl    R11, #1029
4ab     jl,s   B60	# loop end  P=0.500000 C=32477.000000

4ad     B61: #	out( N566 ) <- in( B60 B58 )  Freq: 0.99996
4ad     vzeroupper
	addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

4c2     ret

4c3     B62: #	out( B31 ) <- in( B28 )  Freq: 0.499989
4c3     movl    R10, RSI	# spill
4c6     jmp     B31

4cb     B63: #	out( N566 ) <- in( B13 )  Freq: 1.01327e-06
4cb     stop	# ShouldNotReachHere

4df     B64: #	out( N566 ) <- in( B14 )  Freq: 1.01327e-06
4df     stop	# ShouldNotReachHere

4f3     B65: #	out( N566 ) <- in( B15 )  Freq: 1.01327e-06
4f3     stop	# ShouldNotReachHere

507     B66: #	out( N566 ) <- in( B16 )  Freq: 1.01327e-06
507     stop	# ShouldNotReachHere

51b     B67: #	out( N566 ) <- in( B17 )  Freq: 1.01327e-06
51b     stop	# ShouldNotReachHere

52f     B68: #	out( N566 ) <- in( B18 )  Freq: 1.01326e-06
52f     stop	# ShouldNotReachHere

543     B69: #	out( N566 ) <- in( B19 )  Freq: 1.01326e-06
543     stop	# ShouldNotReachHere

557     B70: #	out( N566 ) <- in( B20 )  Freq: 1.01326e-06
557     stop	# ShouldNotReachHere

56b     B71: #	out( N566 ) <- in( B21 )  Freq: 1.01326e-06
56b     stop	# ShouldNotReachHere

57f     B72: #	out( N566 ) <- in( B22 )  Freq: 1.01326e-06
57f     stop	# ShouldNotReachHere

593     B73: #	out( N566 ) <- in( B23 )  Freq: 1.01326e-06
593     stop	# ShouldNotReachHere

5a7     B74: #	out( N566 ) <- in( B37 B34 B35 B38 B39 B36 )  Freq: 6.03969e-06
5a7     movl    RSI, #-138	# int
5ac     movq    RBP, RDX	# spill
5af     movq    [rsp + #0], RCX	# spill
5b3     movq    [rsp + #8], R8	# spill
5b8     movl    [rsp + #20], R10	# spill
        nop 	# 3 bytes pad for loops and calls
5c0     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # loop::doSum @ bci:35 (line 11) L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #8 L[4]=rsp + #20 STK[0]=rsp + #20 STK[1]=#1029
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=1480/0x5c8}
5c8     stop	# ShouldNotReachHere

5dc     B75: #	out( N566 ) <- in( B44 )  Freq: 1.01325e-06
5dc     stop	# ShouldNotReachHere

5f0     B76: #	out( N566 ) <- in( B45 )  Freq: 1.01325e-06
5f0     stop	# ShouldNotReachHere

604     B77: #	out( N566 ) <- in( B46 )  Freq: 1.01325e-06
604     stop	# ShouldNotReachHere

618     B78: #	out( N566 ) <- in( B47 )  Freq: 1.01325e-06
618     stop	# ShouldNotReachHere

62c     B79: #	out( N566 ) <- in( B48 )  Freq: 1.01325e-06
62c     stop	# ShouldNotReachHere

640     B80: #	out( N566 ) <- in( B49 )  Freq: 1.01325e-06
640     stop	# ShouldNotReachHere

654     B81: #	out( N566 ) <- in( B50 )  Freq: 1.01324e-06
654     stop	# ShouldNotReachHere

668     B82: #	out( N566 ) <- in( B51 )  Freq: 1.01324e-06
668     stop	# ShouldNotReachHere

67c     B83: #	out( N566 ) <- in( B52 )  Freq: 1.01324e-06
67c     stop	# ShouldNotReachHere

690     B84: #	out( N566 ) <- in( B53 )  Freq: 1.01324e-06
690     stop	# ShouldNotReachHere

6a4     B85: #	out( N566 ) <- in( B54 )  Freq: 1.01324e-06
6a4     stop	# ShouldNotReachHere

6b8     B86: #	out( N566 ) <- in( B55 )  Freq: 1.01324e-06
6b8     stop	# ShouldNotReachHere

6cc     B87: #	out( N566 ) <- in( B7 B1 B2 B3 B9 B8 B4 B5 B6 )  Freq: 9.0398e-06
6cc     movl    RSI, #-138	# int
6d1     movq    RBP, RDX	# spill
6d4     movq    [rsp + #0], RCX	# spill
6d8     movq    [rsp + #8], R8	# spill
        nop 	# 3 bytes pad for loops and calls
6e0     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # loop::doSum @ bci:8 (line 9) L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #8 L[4]=#0 STK[0]=#0 STK[1]=#1024
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=1768/0x6e8}
6e8     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    1511   25             loop::doSum (58 bytes)
 total in heap  [0x00007fb8c105e290,0x00007fb8c105eff8] = 3432
 relocation     [0x00007fb8c105e408,0x00007fb8c105e558] = 336
 main code      [0x00007fb8c105e560,0x00007fb8c105ec80] = 1824
 stub code      [0x00007fb8c105ec80,0x00007fb8c105ec98] = 24
 oops           [0x00007fb8c105ec98,0x00007fb8c105eca0] = 8
 metadata       [0x00007fb8c105eca0,0x00007fb8c105eca8] = 8
 scopes data    [0x00007fb8c105eca8,0x00007fb8c105ed40] = 152
 scopes pcs     [0x00007fb8c105ed40,0x00007fb8c105efd0] = 656
 dependencies   [0x00007fb8c105efd0,0x00007fb8c105efd8] = 8
 nul chk table  [0x00007fb8c105efd8,0x00007fb8c105eff8] = 32

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Entry Point]
  # {method} {0x00007fb86740e428} 'doSum' '([F[F[F)V' in 'loop'
  # this:     rsi:rsi   = 'loop'
  # parm0:    rdx:rdx   = '[F'
  # parm1:    rcx:rcx   = '[F'
  # parm2:    r8:r8     = '[F'
  #           [sp+0x40]  (sp of caller)
 ;; N566: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fb8c105e560:   mov    0x8(%rsi),%r10d
  0x00007fb8c105e564:   movabs $0x800000000,%r11
  0x00007fb8c105e56e:   add    %r11,%r10
  0x00007fb8c105e571:   cmp    %r10,%rax
  0x00007fb8c105e574:   jne    0x00007fb8c1115e20           ;   {runtime_call ic_miss_stub}
  0x00007fb8c105e57a:   nop
  0x00007fb8c105e57b:   nop
  0x00007fb8c105e57c:   nop
  0x00007fb8c105e57d:   nop
  0x00007fb8c105e57e:   nop
  0x00007fb8c105e57f:   nop
[Verified Entry Point]
 ;; B1: #	out( B87 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fb8c105e580:   mov    %eax,-0x16000(%rsp)
  0x00007fb8c105e587:   push   %rbp
  0x00007fb8c105e588:   sub    $0x30,%rsp                   ;*synchronization entry
                                                            ; - loop::doSum@-1 (line 8)
  0x00007fb8c105e58c:   mov    0xc(%rcx),%r9d               ; implicit exception: dispatches to 0x00007fb8c105ec2c
                                                            ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@17 (line 10)
 ;; B2: #	out( B87 B3 ) <- in( B1 )  Freq: 0.999999
  0x00007fb8c105e590:   test   %r9d,%r9d
  0x00007fb8c105e593:   jbe    0x00007fb8c105ec2c
 ;; B3: #	out( B87 B4 ) <- in( B2 )  Freq: 0.999998
  0x00007fb8c105e599:   nop
  0x00007fb8c105e59a:   nop
  0x00007fb8c105e59b:   nop
  0x00007fb8c105e59c:   nop
  0x00007fb8c105e59d:   nop
  0x00007fb8c105e59e:   nop
  0x00007fb8c105e59f:   nop
  0x00007fb8c105e5a0:   cmp    $0x3ff,%r9d
  0x00007fb8c105e5a7:   jbe    0x00007fb8c105ec2c
 ;; B4: #	out( B87 B5 ) <- in( B3 )  Freq: 0.999997
  0x00007fb8c105e5ad:   mov    0xc(%r8),%edi                ; implicit exception: dispatches to 0x00007fb8c105ec2c
                                                            ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@21 (line 10)
 ;; B5: #	out( B87 B6 ) <- in( B4 )  Freq: 0.999996
  0x00007fb8c105e5b1:   test   %edi,%edi
  0x00007fb8c105e5b3:   jbe    0x00007fb8c105ec2c
 ;; B6: #	out( B87 B7 ) <- in( B5 )  Freq: 0.999995
  0x00007fb8c105e5b9:   nop
  0x00007fb8c105e5ba:   nop
  0x00007fb8c105e5bb:   nop
  0x00007fb8c105e5bc:   nop
  0x00007fb8c105e5bd:   nop
  0x00007fb8c105e5be:   nop
  0x00007fb8c105e5bf:   nop
  0x00007fb8c105e5c0:   cmp    $0x3ff,%edi
  0x00007fb8c105e5c6:   jbe    0x00007fb8c105ec2c
 ;; B7: #	out( B87 B8 ) <- in( B6 )  Freq: 0.999994
  0x00007fb8c105e5cc:   mov    0xc(%rdx),%ebx               ; implicit exception: dispatches to 0x00007fb8c105ec2c
                                                            ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
 ;; B8: #	out( B87 B9 ) <- in( B7 )  Freq: 0.999993
  0x00007fb8c105e5cf:   test   %ebx,%ebx
  0x00007fb8c105e5d1:   jbe    0x00007fb8c105ec2c
 ;; B9: #	out( B87 B10 ) <- in( B8 )  Freq: 0.999992
  0x00007fb8c105e5d7:   nop
  0x00007fb8c105e5d8:   nop
  0x00007fb8c105e5d9:   nop
  0x00007fb8c105e5da:   nop
  0x00007fb8c105e5db:   nop
  0x00007fb8c105e5dc:   nop
  0x00007fb8c105e5dd:   nop
  0x00007fb8c105e5de:   nop
  0x00007fb8c105e5df:   nop
  0x00007fb8c105e5e0:   cmp    $0x3ff,%ebx
  0x00007fb8c105e5e6:   jbe    0x00007fb8c105ec2c
 ;; B10: #	out( B11 ) <- in( B9 )  Freq: 0.999991
  0x00007fb8c105e5ec:   mov    %edx,%eax
  0x00007fb8c105e5ee:   shr    $0x2,%eax
  0x00007fb8c105e5f1:   mov    %eax,%r10d
  0x00007fb8c105e5f4:   and    $0xf,%r10d
  0x00007fb8c105e5f8:   mov    $0xb,%esi
  0x00007fb8c105e5fd:   sub    %r10d,%esi
  0x00007fb8c105e600:   and    $0xf,%esi
  0x00007fb8c105e603:   inc    %esi
  0x00007fb8c105e605:   mov    $0x400,%r11d
  0x00007fb8c105e60b:   cmp    %r11d,%esi
  0x00007fb8c105e60e:   cmovg  %r11d,%esi
  0x00007fb8c105e612:   xor    %ebp,%ebp                    ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@11 (line 10)
 ;; B11: #	out( B13 B12 ) <- in( B10 B12 ) Loop( B11-B12 inner pre of N361) Freq: 1.99998
  0x00007fb8c105e614:   vmovss 0x10(%r8,%rbp,4),%xmm0
  0x00007fb8c105e61b:   vaddss 0x10(%rcx,%rbp,4),%xmm0,%xmm1
  0x00007fb8c105e621:   vmovss %xmm1,0x10(%rdx,%rbp,4)      ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
  0x00007fb8c105e627:   mov    %ebp,%r10d
  0x00007fb8c105e62a:   inc    %r10d                        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@24 (line 9)
  0x00007fb8c105e62d:   cmp    %esi,%r10d
  0x00007fb8c105e630:   jge    0x00007fb8c105e637           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@8 (line 9)
 ;; B12: #	out( B11 ) <- in( B11 )  Freq: 0.999991
  0x00007fb8c105e632:   mov    %r10d,%ebp
  0x00007fb8c105e635:   jmp    0x00007fb8c105e614
 ;; B13: #	out( B63 B14 ) <- in( B11 )  Freq: 0.999991
  0x00007fb8c105e637:   mov    %ebp,%r10d
  0x00007fb8c105e63a:   inc    %r10d
  0x00007fb8c105e63d:   nop
  0x00007fb8c105e63e:   nop
  0x00007fb8c105e63f:   nop
  0x00007fb8c105e640:   cmp    %ebx,%r10d
  0x00007fb8c105e643:   jae    0x00007fb8c105ea2b
 ;; B14: #	out( B64 B15 ) <- in( B13 )  Freq: 0.99999
  0x00007fb8c105e649:   cmp    %ebx,%r10d
  0x00007fb8c105e64c:   jae    0x00007fb8c105ea3f
 ;; B15: #	out( B65 B16 ) <- in( B14 )  Freq: 0.999989
  0x00007fb8c105e652:   cmp    %edi,%r10d
  0x00007fb8c105e655:   jae    0x00007fb8c105ea53
 ;; B16: #	out( B66 B17 ) <- in( B15 )  Freq: 0.999988
  0x00007fb8c105e65b:   nop
  0x00007fb8c105e65c:   nop
  0x00007fb8c105e65d:   nop
  0x00007fb8c105e65e:   nop
  0x00007fb8c105e65f:   nop
  0x00007fb8c105e660:   cmp    %edi,%r10d
  0x00007fb8c105e663:   jae    0x00007fb8c105ea67
 ;; B17: #	out( B67 B18 ) <- in( B16 )  Freq: 0.999987
  0x00007fb8c105e669:   cmp    %r9d,%r10d
  0x00007fb8c105e66c:   jae    0x00007fb8c105ea7b
 ;; B18: #	out( B68 B19 ) <- in( B17 )  Freq: 0.999986
  0x00007fb8c105e672:   cmp    %r9d,%r10d
  0x00007fb8c105e675:   jae    0x00007fb8c105ea8f
 ;; B19: #	out( B69 B20 ) <- in( B18 )  Freq: 0.999985
  0x00007fb8c105e67b:   nop
  0x00007fb8c105e67c:   nop
  0x00007fb8c105e67d:   nop
  0x00007fb8c105e67e:   nop
  0x00007fb8c105e67f:   nop
  0x00007fb8c105e680:   cmp    %r9d,%r10d
  0x00007fb8c105e683:   jae    0x00007fb8c105eaa3
 ;; B20: #	out( B70 B21 ) <- in( B19 )  Freq: 0.999984
  0x00007fb8c105e689:   add    $0x80,%ebp
  0x00007fb8c105e68f:   cmp    %r9d,%ebp
  0x00007fb8c105e692:   jae    0x00007fb8c105eab7
 ;; B21: #	out( B71 B22 ) <- in( B20 )  Freq: 0.999983
  0x00007fb8c105e698:   cmp    %edi,%r10d
  0x00007fb8c105e69b:   nop
  0x00007fb8c105e69c:   nop
  0x00007fb8c105e69d:   nop
  0x00007fb8c105e69e:   nop
  0x00007fb8c105e69f:   nop
  0x00007fb8c105e6a0:   jae    0x00007fb8c105eacb
 ;; B22: #	out( B72 B23 ) <- in( B21 )  Freq: 0.999982
  0x00007fb8c105e6a6:   cmp    %edi,%ebp
  0x00007fb8c105e6a8:   jae    0x00007fb8c105eadf
 ;; B23: #	out( B73 B24 ) <- in( B22 )  Freq: 0.999981
  0x00007fb8c105e6ae:   cmp    %ebx,%r10d
  0x00007fb8c105e6b1:   jae    0x00007fb8c105eaf3
 ;; B24: #	out( B27 B25 ) <- in( B23 )  Freq: 0.99998
  0x00007fb8c105e6b7:   cmp    %ebx,%ebp
  0x00007fb8c105e6b9:   jb     0x00007fb8c105e6d3
 ;; B25: #	out( N566 ) <- in( B24 )  Freq: 1.01326e-06
  0x00007fb8c105e6bb:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105e6c5:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105e6c9:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105e6ce:   hlt    
  0x00007fb8c105e6cf:   nop
 ;; B26: #	out( B27 ) <- in( B27 ) top-of-loop Freq: 2324.6
  0x00007fb8c105e6d0:   mov    %esi,%r10d                   ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@11 (line 10)
 ;; B27: #	out( B26 B28 ) <- in( B24 B26 ) Loop( B27-B26 inner main of N126) Freq: 2325.6
  0x00007fb8c105e6d3:   vmovdqu32 0x10(%rcx,%r10,4),%zmm0
  0x00007fb8c105e6de:   vaddps 0x10(%r8,%r10,4),%zmm0,%zmm0
  0x00007fb8c105e6e9:   vmovdqu32 %zmm0,0x10(%rdx,%r10,4)
  0x00007fb8c105e6f4:   vmovdqu32 0x50(%rcx,%r10,4),%zmm0
  0x00007fb8c105e6ff:   vaddps 0x50(%r8,%r10,4),%zmm0,%zmm0
  0x00007fb8c105e70a:   vmovdqu32 %zmm0,0x50(%rdx,%r10,4)
  0x00007fb8c105e715:   vmovdqu32 0x90(%rcx,%r10,4),%zmm0
  0x00007fb8c105e720:   vaddps 0x90(%r8,%r10,4),%zmm0,%zmm0
  0x00007fb8c105e72b:   vmovdqu32 %zmm0,0x90(%rdx,%r10,4)
  0x00007fb8c105e736:   vmovdqu32 0xd0(%rcx,%r10,4),%zmm0
  0x00007fb8c105e741:   vaddps 0xd0(%r8,%r10,4),%zmm0,%zmm0
  0x00007fb8c105e74c:   vmovdqu32 %zmm0,0xd0(%rdx,%r10,4)
  0x00007fb8c105e757:   vmovdqu32 0x110(%rcx,%r10,4),%zmm0
  0x00007fb8c105e762:   vaddps 0x110(%r8,%r10,4),%zmm0,%zmm0
  0x00007fb8c105e76d:   vmovdqu32 %zmm0,0x110(%rdx,%r10,4)
  0x00007fb8c105e778:   vmovdqu32 0x150(%rcx,%r10,4),%zmm0
  0x00007fb8c105e783:   vaddps 0x150(%r8,%r10,4),%zmm0,%zmm0
  0x00007fb8c105e78e:   vmovdqu32 %zmm0,0x150(%rdx,%r10,4)
  0x00007fb8c105e799:   vmovdqu32 0x190(%rcx,%r10,4),%zmm0
  0x00007fb8c105e7a4:   vaddps 0x190(%r8,%r10,4),%zmm0,%zmm0
  0x00007fb8c105e7af:   vmovdqu32 %zmm0,0x190(%rdx,%r10,4)
  0x00007fb8c105e7ba:   vmovdqu32 0x1d0(%rcx,%r10,4),%zmm0
  0x00007fb8c105e7c5:   vaddps 0x1d0(%r8,%r10,4),%zmm0,%zmm0
  0x00007fb8c105e7d0:   vmovdqu32 %zmm0,0x1d0(%rdx,%r10,4)  ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
  0x00007fb8c105e7db:   mov    %r10d,%esi
  0x00007fb8c105e7de:   add    $0x80,%esi                   ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@24 (line 9)
  0x00007fb8c105e7e4:   cmp    $0x381,%esi
  0x00007fb8c105e7ea:   jl     0x00007fb8c105e6d0           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@8 (line 9)
 ;; B28: #	out( B62 B29 ) <- in( B27 )  Freq: 0.999979
  0x00007fb8c105e7f0:   cmp    $0x3f1,%esi
  0x00007fb8c105e7f6:   jge    0x00007fb8c105ea23
 ;; B29: #	out( B30 ) <- in( B28 )  Freq: 0.499989
  0x00007fb8c105e7fc:   add    $0x80,%r10d                  ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@11 (line 10)
 ;; B30: #	out( B30 B31 ) <- in( B29 B30 ) Loop( B30-B30 inner post of N1737) Freq: 0.999979
  0x00007fb8c105e803:   vmovdqu32 0x10(%rcx,%r10,4),%zmm0
  0x00007fb8c105e80e:   vaddps 0x10(%r8,%r10,4),%zmm0,%zmm0
  0x00007fb8c105e819:   vmovdqu32 %zmm0,0x10(%rdx,%r10,4)   ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
  0x00007fb8c105e824:   add    $0x10,%r10d                  ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@24 (line 9)
  0x00007fb8c105e828:   cmp    $0x3f1,%r10d
  0x00007fb8c105e82f:   jl     0x00007fb8c105e803           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@8 (line 9)
 ;; B31: #	out( B34 B32 ) <- in( B30 B62 )  Freq: 0.999979
  0x00007fb8c105e831:   cmp    $0x400,%r10d
  0x00007fb8c105e838:   jge    0x00007fb8c105e869
 ;; B32: #	out( B33 ) <- in( B31 )  Freq: 0.499989
  0x00007fb8c105e83a:   nop
  0x00007fb8c105e83b:   nop                                 ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@11 (line 10)
 ;; B33: #	out( B33 B34 ) <- in( B32 B33 ) Loop( B33-B33 inner post of N361) Freq: 0.999979
  0x00007fb8c105e83c:   vmovss 0x10(%r8,%r10,4),%xmm1
  0x00007fb8c105e843:   vaddss 0x10(%rcx,%r10,4),%xmm1,%xmm0
  0x00007fb8c105e84a:   vmovss %xmm0,0x10(%rdx,%r10,4)      ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
  0x00007fb8c105e851:   inc    %r10d                        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@24 (line 9)
  0x00007fb8c105e854:   nop
  0x00007fb8c105e855:   nop
  0x00007fb8c105e856:   nop
  0x00007fb8c105e857:   nop
  0x00007fb8c105e858:   nop
  0x00007fb8c105e859:   nop
  0x00007fb8c105e85a:   nop
  0x00007fb8c105e85b:   nop
  0x00007fb8c105e85c:   nop
  0x00007fb8c105e85d:   nop
  0x00007fb8c105e85e:   nop
  0x00007fb8c105e85f:   nop
  0x00007fb8c105e860:   cmp    $0x400,%r10d
  0x00007fb8c105e867:   jl     0x00007fb8c105e83c           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@8 (line 9)
 ;; B34: #	out( B74 B35 ) <- in( B33 B31 )  Freq: 0.999979
  0x00007fb8c105e869:   cmp    %r9d,%r10d
  0x00007fb8c105e86c:   jae    0x00007fb8c105eb07
 ;; B35: #	out( B74 B36 ) <- in( B34 )  Freq: 0.999978
  0x00007fb8c105e872:   nop
  0x00007fb8c105e873:   nop
  0x00007fb8c105e874:   nop
  0x00007fb8c105e875:   nop
  0x00007fb8c105e876:   nop
  0x00007fb8c105e877:   nop
  0x00007fb8c105e878:   nop
  0x00007fb8c105e879:   nop
  0x00007fb8c105e87a:   nop
  0x00007fb8c105e87b:   nop
  0x00007fb8c105e87c:   nop
  0x00007fb8c105e87d:   nop
  0x00007fb8c105e87e:   nop
  0x00007fb8c105e87f:   nop
  0x00007fb8c105e880:   cmp    $0x404,%r9d
  0x00007fb8c105e887:   jbe    0x00007fb8c105eb07
 ;; B36: #	out( B74 B37 ) <- in( B35 )  Freq: 0.999977
  0x00007fb8c105e88d:   cmp    %edi,%r10d
  0x00007fb8c105e890:   jae    0x00007fb8c105eb07
 ;; B37: #	out( B74 B38 ) <- in( B36 )  Freq: 0.999976
  0x00007fb8c105e896:   nop
  0x00007fb8c105e897:   nop
  0x00007fb8c105e898:   nop
  0x00007fb8c105e899:   nop
  0x00007fb8c105e89a:   nop
  0x00007fb8c105e89b:   nop
  0x00007fb8c105e89c:   nop
  0x00007fb8c105e89d:   nop
  0x00007fb8c105e89e:   nop
  0x00007fb8c105e89f:   nop
  0x00007fb8c105e8a0:   cmp    $0x404,%edi
  0x00007fb8c105e8a6:   jbe    0x00007fb8c105eb07
 ;; B38: #	out( B74 B39 ) <- in( B37 )  Freq: 0.999975
  0x00007fb8c105e8ac:   cmp    %ebx,%r10d
  0x00007fb8c105e8af:   jae    0x00007fb8c105eb07
 ;; B39: #	out( B74 B40 ) <- in( B38 )  Freq: 0.999974
  0x00007fb8c105e8b5:   nop
  0x00007fb8c105e8b6:   nop
  0x00007fb8c105e8b7:   nop
  0x00007fb8c105e8b8:   nop
  0x00007fb8c105e8b9:   nop
  0x00007fb8c105e8ba:   nop
  0x00007fb8c105e8bb:   nop
  0x00007fb8c105e8bc:   nop
  0x00007fb8c105e8bd:   nop
  0x00007fb8c105e8be:   nop
  0x00007fb8c105e8bf:   nop
  0x00007fb8c105e8c0:   cmp    $0x404,%ebx
  0x00007fb8c105e8c6:   jbe    0x00007fb8c105eb07
 ;; B40: #	out( B41 ) <- in( B39 )  Freq: 0.999973
  0x00007fb8c105e8cc:   and    $0x3,%eax
  0x00007fb8c105e8cf:   add    %r10d,%eax
  0x00007fb8c105e8d2:   mov    $0x405,%r11d
  0x00007fb8c105e8d8:   mov    $0xffffffff,%ebp
  0x00007fb8c105e8dd:   sub    %eax,%ebp
  0x00007fb8c105e8df:   and    $0x3,%ebp
  0x00007fb8c105e8e2:   add    %r10d,%ebp
  0x00007fb8c105e8e5:   inc    %ebp
  0x00007fb8c105e8e7:   cmp    %r11d,%ebp
  0x00007fb8c105e8ea:   cmovg  %r11d,%ebp                   ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@38 (line 12)
 ;; B41: #	out( B43 B42 ) <- in( B40 B42 ) Loop( B41-B42 inner pre of N372) Freq: 1.99995
  0x00007fb8c105e8ee:   vmovss 0x10(%rcx,%r10,4),%xmm0
  0x00007fb8c105e8f5:   vaddss 0x10(%r8,%r10,4),%xmm0,%xmm1
  0x00007fb8c105e8fc:   vmovss %xmm1,0x10(%rdx,%r10,4)      ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@50 (line 12)
  0x00007fb8c105e903:   mov    %r10d,%r11d
  0x00007fb8c105e906:   inc    %r11d                        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@51 (line 11)
  0x00007fb8c105e909:   cmp    %ebp,%r11d
  0x00007fb8c105e90c:   jge    0x00007fb8c105e913           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@35 (line 11)
 ;; B42: #	out( B41 ) <- in( B41 )  Freq: 0.999973
  0x00007fb8c105e90e:   mov    %r11d,%r10d
  0x00007fb8c105e911:   jmp    0x00007fb8c105e8ee
 ;; B43: #	out( B58 B44 ) <- in( B41 )  Freq: 0.999973
  0x00007fb8c105e913:   nop
  0x00007fb8c105e914:   nop
  0x00007fb8c105e915:   nop
  0x00007fb8c105e916:   nop
  0x00007fb8c105e917:   nop
  0x00007fb8c105e918:   nop
  0x00007fb8c105e919:   nop
  0x00007fb8c105e91a:   nop
  0x00007fb8c105e91b:   nop
  0x00007fb8c105e91c:   nop
  0x00007fb8c105e91d:   nop
  0x00007fb8c105e91e:   nop
  0x00007fb8c105e91f:   nop
  0x00007fb8c105e920:   cmp    $0x402,%r11d
  0x00007fb8c105e927:   jge    0x00007fb8c105e9de
 ;; B44: #	out( B75 B45 ) <- in( B43 )  Freq: 0.999972
  0x00007fb8c105e92d:   mov    %r10d,%r11d
  0x00007fb8c105e930:   inc    %r11d
  0x00007fb8c105e933:   cmp    %ebx,%r11d
  0x00007fb8c105e936:   jae    0x00007fb8c105eb3c
 ;; B45: #	out( B76 B46 ) <- in( B44 )  Freq: 0.999971
  0x00007fb8c105e93c:   nop
  0x00007fb8c105e93d:   nop
  0x00007fb8c105e93e:   nop
  0x00007fb8c105e93f:   nop
  0x00007fb8c105e940:   cmp    %ebx,%r11d
  0x00007fb8c105e943:   jae    0x00007fb8c105eb50
 ;; B46: #	out( B77 B47 ) <- in( B45 )  Freq: 0.99997
  0x00007fb8c105e949:   cmp    %edi,%r11d
  0x00007fb8c105e94c:   jae    0x00007fb8c105eb64
 ;; B47: #	out( B78 B48 ) <- in( B46 )  Freq: 0.999969
  0x00007fb8c105e952:   cmp    %edi,%r11d
  0x00007fb8c105e955:   jae    0x00007fb8c105eb78
 ;; B48: #	out( B79 B49 ) <- in( B47 )  Freq: 0.999968
  0x00007fb8c105e95b:   nop
  0x00007fb8c105e95c:   nop
  0x00007fb8c105e95d:   nop
  0x00007fb8c105e95e:   nop
  0x00007fb8c105e95f:   nop
  0x00007fb8c105e960:   cmp    %r9d,%r11d
  0x00007fb8c105e963:   jae    0x00007fb8c105eb8c
 ;; B49: #	out( B80 B50 ) <- in( B48 )  Freq: 0.999967
  0x00007fb8c105e969:   cmp    %r9d,%r11d
  0x00007fb8c105e96c:   jae    0x00007fb8c105eba0
 ;; B50: #	out( B81 B51 ) <- in( B49 )  Freq: 0.999966
  0x00007fb8c105e972:   cmp    %r9d,%r11d
  0x00007fb8c105e975:   jae    0x00007fb8c105ebb4
 ;; B51: #	out( B82 B52 ) <- in( B50 )  Freq: 0.999965
  0x00007fb8c105e97b:   add    $0x4,%r10d
  0x00007fb8c105e97f:   nop
  0x00007fb8c105e980:   cmp    %r9d,%r10d
  0x00007fb8c105e983:   jae    0x00007fb8c105ebc8
 ;; B52: #	out( B83 B53 ) <- in( B51 )  Freq: 0.999964
  0x00007fb8c105e989:   cmp    %edi,%r11d
  0x00007fb8c105e98c:   jae    0x00007fb8c105ebdc
 ;; B53: #	out( B84 B54 ) <- in( B52 )  Freq: 0.999963
  0x00007fb8c105e992:   cmp    %edi,%r10d
  0x00007fb8c105e995:   jae    0x00007fb8c105ebf0
 ;; B54: #	out( B85 B55 ) <- in( B53 )  Freq: 0.999961
  0x00007fb8c105e99b:   nop
  0x00007fb8c105e99c:   nop
  0x00007fb8c105e99d:   nop
  0x00007fb8c105e99e:   nop
  0x00007fb8c105e99f:   nop
  0x00007fb8c105e9a0:   cmp    %ebx,%r11d
  0x00007fb8c105e9a3:   jae    0x00007fb8c105ec04
 ;; B55: #	out( B86 B56 ) <- in( B54 )  Freq: 0.99996
  0x00007fb8c105e9a9:   cmp    %ebx,%r10d
  0x00007fb8c105e9ac:   jae    0x00007fb8c105ec18           ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@38 (line 12)
 ;; B56: #	out( B56 B57 ) <- in( B55 B56 ) Loop( B56-B56 inner main of N253) Freq: 6.00007
  0x00007fb8c105e9b2:   vmovdqu 0x10(%rcx,%r11,4),%xmm0
  0x00007fb8c105e9b9:   vaddps 0x10(%r8,%r11,4),%xmm0,%xmm0
  0x00007fb8c105e9c0:   vmovdqu %xmm0,0x10(%rdx,%r11,4)     ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@50 (line 12)
  0x00007fb8c105e9c7:   add    $0x4,%r11d                   ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@51 (line 11)
  0x00007fb8c105e9cb:   cmp    $0x402,%r11d
  0x00007fb8c105e9d2:   jl     0x00007fb8c105e9b2           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@27 (line 9)
 ;; B57: #	out( B58 ) <- in( B56 )  Freq: 0.999959
  0x00007fb8c105e9d4:   mov    0x390(%r15),%r9              ; ImmutableOopMap {r8=Oop rcx=Oop rdx=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) loop::doSum@54 (line 11)
  0x00007fb8c105e9db:   test   %eax,(%r9)                   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@54 (line 11)
                                                            ;   {poll}
 ;; B58: #	out( B61 B59 ) <- in( B43 B57 )  Freq: 0.99996
  0x00007fb8c105e9de:   nop
  0x00007fb8c105e9df:   nop
  0x00007fb8c105e9e0:   cmp    $0x405,%r11d
  0x00007fb8c105e9e7:   jge    0x00007fb8c105ea0d
 ;; B59: #	out( B60 ) <- in( B58 )  Freq: 0.49998
  0x00007fb8c105e9e9:   nop
  0x00007fb8c105e9ea:   nop
  0x00007fb8c105e9eb:   nop                                 ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@38 (line 12)
 ;; B60: #	out( B60 B61 ) <- in( B59 B60 ) Loop( B60-B60 inner post of N372) Freq: 0.99996
  0x00007fb8c105e9ec:   vmovss 0x10(%rcx,%r11,4),%xmm1
  0x00007fb8c105e9f3:   vaddss 0x10(%r8,%r11,4),%xmm1,%xmm0
  0x00007fb8c105e9fa:   vmovss %xmm0,0x10(%rdx,%r11,4)      ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@50 (line 12)
  0x00007fb8c105ea01:   inc    %r11d                        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@51 (line 11)
  0x00007fb8c105ea04:   cmp    $0x405,%r11d
  0x00007fb8c105ea0b:   jl     0x00007fb8c105e9ec
 ;; B61: #	out( N566 ) <- in( B60 B58 )  Freq: 0.99996
  0x00007fb8c105ea0d:   vzeroupper 
  0x00007fb8c105ea10:   add    $0x30,%rsp
  0x00007fb8c105ea14:   pop    %rbp
  0x00007fb8c105ea15:   cmp    0x388(%r15),%rsp             ;   {poll_return}
  0x00007fb8c105ea1c:   ja     0x00007fb8c105ec5c
  0x00007fb8c105ea22:   retq   
 ;; B62: #	out( B31 ) <- in( B28 )  Freq: 0.499989
  0x00007fb8c105ea23:   mov    %esi,%r10d
  0x00007fb8c105ea26:   jmpq   0x00007fb8c105e831
 ;; B63: #	out( N566 ) <- in( B13 )  Freq: 1.01327e-06
  0x00007fb8c105ea2b:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105ea35:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105ea39:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105ea3e:   hlt    
 ;; B64: #	out( N566 ) <- in( B14 )  Freq: 1.01327e-06
  0x00007fb8c105ea3f:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105ea49:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105ea4d:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105ea52:   hlt    
 ;; B65: #	out( N566 ) <- in( B15 )  Freq: 1.01327e-06
  0x00007fb8c105ea53:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105ea5d:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105ea61:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105ea66:   hlt    
 ;; B66: #	out( N566 ) <- in( B16 )  Freq: 1.01327e-06
  0x00007fb8c105ea67:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105ea71:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105ea75:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105ea7a:   hlt    
 ;; B67: #	out( N566 ) <- in( B17 )  Freq: 1.01327e-06
  0x00007fb8c105ea7b:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105ea85:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105ea89:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105ea8e:   hlt    
 ;; B68: #	out( N566 ) <- in( B18 )  Freq: 1.01326e-06
  0x00007fb8c105ea8f:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105ea99:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105ea9d:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105eaa2:   hlt    
 ;; B69: #	out( N566 ) <- in( B19 )  Freq: 1.01326e-06
  0x00007fb8c105eaa3:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105eaad:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105eab1:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105eab6:   hlt    
 ;; B70: #	out( N566 ) <- in( B20 )  Freq: 1.01326e-06
  0x00007fb8c105eab7:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105eac1:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105eac5:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105eaca:   hlt    
 ;; B71: #	out( N566 ) <- in( B21 )  Freq: 1.01326e-06
  0x00007fb8c105eacb:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105ead5:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105ead9:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105eade:   hlt    
 ;; B72: #	out( N566 ) <- in( B22 )  Freq: 1.01326e-06
  0x00007fb8c105eadf:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105eae9:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105eaed:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105eaf2:   hlt    
 ;; B73: #	out( N566 ) <- in( B23 )  Freq: 1.01326e-06
  0x00007fb8c105eaf3:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105eafd:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105eb01:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105eb06:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@35 (line 11)
 ;; B74: #	out( N566 ) <- in( B37 B34 B35 B38 B39 B36 )  Freq: 6.03969e-06
  0x00007fb8c105eb07:   mov    $0xffffff76,%esi
  0x00007fb8c105eb0c:   mov    %rdx,%rbp
  0x00007fb8c105eb0f:   mov    %rcx,(%rsp)
  0x00007fb8c105eb13:   mov    %r8,0x8(%rsp)
  0x00007fb8c105eb18:   mov    %r10d,0x14(%rsp)
  0x00007fb8c105eb1d:   nop
  0x00007fb8c105eb1e:   nop
  0x00007fb8c105eb1f:   nop
  0x00007fb8c105eb20:   vzeroupper 
  0x00007fb8c105eb23:   callq  0x00007fb8c111e940           ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) loop::doSum@35 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb8c105eb28:   movabs $0x7fb8cc0699c0,%rdi         ;   {external_word}
  0x00007fb8c105eb32:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105eb36:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105eb3b:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@35 (line 11)
 ;; B75: #	out( N566 ) <- in( B44 )  Freq: 1.01325e-06
  0x00007fb8c105eb3c:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105eb46:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105eb4a:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105eb4f:   hlt    
 ;; B76: #	out( N566 ) <- in( B45 )  Freq: 1.01325e-06
  0x00007fb8c105eb50:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105eb5a:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105eb5e:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105eb63:   hlt    
 ;; B77: #	out( N566 ) <- in( B46 )  Freq: 1.01325e-06
  0x00007fb8c105eb64:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105eb6e:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105eb72:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105eb77:   hlt    
 ;; B78: #	out( N566 ) <- in( B47 )  Freq: 1.01325e-06
  0x00007fb8c105eb78:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105eb82:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105eb86:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105eb8b:   hlt    
 ;; B79: #	out( N566 ) <- in( B48 )  Freq: 1.01325e-06
  0x00007fb8c105eb8c:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105eb96:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105eb9a:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105eb9f:   hlt    
 ;; B80: #	out( N566 ) <- in( B49 )  Freq: 1.01325e-06
  0x00007fb8c105eba0:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105ebaa:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105ebae:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105ebb3:   hlt    
 ;; B81: #	out( N566 ) <- in( B50 )  Freq: 1.01324e-06
  0x00007fb8c105ebb4:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105ebbe:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105ebc2:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105ebc7:   hlt    
 ;; B82: #	out( N566 ) <- in( B51 )  Freq: 1.01324e-06
  0x00007fb8c105ebc8:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105ebd2:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105ebd6:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105ebdb:   hlt    
 ;; B83: #	out( N566 ) <- in( B52 )  Freq: 1.01324e-06
  0x00007fb8c105ebdc:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105ebe6:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105ebea:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105ebef:   hlt    
 ;; B84: #	out( N566 ) <- in( B53 )  Freq: 1.01324e-06
  0x00007fb8c105ebf0:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105ebfa:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105ebfe:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105ec03:   hlt    
 ;; B85: #	out( N566 ) <- in( B54 )  Freq: 1.01324e-06
  0x00007fb8c105ec04:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105ec0e:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105ec12:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105ec17:   hlt    
 ;; B86: #	out( N566 ) <- in( B55 )  Freq: 1.01324e-06
  0x00007fb8c105ec18:   movabs $0x7fb8cc1fcb18,%rdi         ;   {external_word}
  0x00007fb8c105ec22:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105ec26:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105ec2b:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@8 (line 9)
 ;; B87: #	out( N566 ) <- in( B7 B1 B2 B3 B9 B8 B4 B5 B6 )  Freq: 9.0398e-06
  0x00007fb8c105ec2c:   mov    $0xffffff76,%esi
  0x00007fb8c105ec31:   mov    %rdx,%rbp
  0x00007fb8c105ec34:   mov    %rcx,(%rsp)
  0x00007fb8c105ec38:   mov    %r8,0x8(%rsp)
  0x00007fb8c105ec3d:   nop
  0x00007fb8c105ec3e:   nop
  0x00007fb8c105ec3f:   nop
  0x00007fb8c105ec40:   vzeroupper 
  0x00007fb8c105ec43:   callq  0x00007fb8c111e940           ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) loop::doSum@8 (line 9)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb8c105ec48:   movabs $0x7fb8cc0699c0,%rdi         ;   {external_word}
  0x00007fb8c105ec52:   and    $0xfffffffffffffff0,%rsp
  0x00007fb8c105ec56:   callq  0x00007fb8cb7f66d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb8c105ec5b:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@8 (line 9)
  0x00007fb8c105ec5c:   movabs $0x7fb8c105ea15,%r10         ;   {internal_word}
  0x00007fb8c105ec66:   mov    %r10,0x3a0(%r15)
  0x00007fb8c105ec6d:   jmpq   0x00007fb8c111d6a0           ;   {runtime_call SafepointBlob}
  0x00007fb8c105ec72:   hlt    
  0x00007fb8c105ec73:   hlt    
  0x00007fb8c105ec74:   hlt    
  0x00007fb8c105ec75:   hlt    
  0x00007fb8c105ec76:   hlt    
  0x00007fb8c105ec77:   hlt    
  0x00007fb8c105ec78:   hlt    
  0x00007fb8c105ec79:   hlt    
  0x00007fb8c105ec7a:   hlt    
  0x00007fb8c105ec7b:   hlt    
  0x00007fb8c105ec7c:   hlt    
  0x00007fb8c105ec7d:   hlt    
  0x00007fb8c105ec7e:   hlt    
  0x00007fb8c105ec7f:   hlt    
[Exception Handler]
  0x00007fb8c105ec80:   jmpq   0x00007fb8c1081720           ;   {no_reloc}
[Deopt Handler Code]
  0x00007fb8c105ec85:   callq  0x00007fb8c105ec8a
  0x00007fb8c105ec8a:   subq   $0x5,(%rsp)
  0x00007fb8c105ec8f:   jmpq   0x00007fb8c111ec60           ;   {runtime_call DeoptimizationBlob}
  0x00007fb8c105ec94:   hlt    
  0x00007fb8c105ec95:   hlt    
  0x00007fb8c105ec96:   hlt    
  0x00007fb8c105ec97:   hlt    
--------------------------------------------------------------------------------
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007fb8c105ec98:   0x00000001014b7c68 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000001014b7c68}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007fb8c105eca0:   0x00007fb86740e428 {method} {0x00007fb86740e428} 'doSum' '([F[F[F)V' in 'loop'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007fb8c105e55f offset=ffffffff bits=0):
PcDesc(pc=0x00007fb8c105e58c offset=2c bits=0):
   loop::doSum@-1 (line 8)
PcDesc(pc=0x00007fb8c105e590 offset=30 bits=0):
   loop::doSum@17 (line 10)
PcDesc(pc=0x00007fb8c105e5b1 offset=51 bits=0):
   loop::doSum@21 (line 10)
PcDesc(pc=0x00007fb8c105e5cf offset=6f bits=0):
   loop::doSum@23 (line 10)
PcDesc(pc=0x00007fb8c105e614 offset=b4 bits=0):
   loop::doSum@11 (line 10)
PcDesc(pc=0x00007fb8c105e627 offset=c7 bits=0):
   loop::doSum@23 (line 10)
PcDesc(pc=0x00007fb8c105e62d offset=cd bits=0):
   loop::doSum@24 (line 9)
PcDesc(pc=0x00007fb8c105e632 offset=d2 bits=0):
   loop::doSum@8 (line 9)
PcDesc(pc=0x00007fb8c105e6d3 offset=173 bits=0):
   loop::doSum@11 (line 10)
PcDesc(pc=0x00007fb8c105e7db offset=27b bits=0):
   loop::doSum@23 (line 10)
PcDesc(pc=0x00007fb8c105e7e4 offset=284 bits=0):
   loop::doSum@24 (line 9)
PcDesc(pc=0x00007fb8c105e7f0 offset=290 bits=0):
   loop::doSum@8 (line 9)
PcDesc(pc=0x00007fb8c105e803 offset=2a3 bits=0):
   loop::doSum@11 (line 10)
PcDesc(pc=0x00007fb8c105e824 offset=2c4 bits=0):
   loop::doSum@23 (line 10)
PcDesc(pc=0x00007fb8c105e828 offset=2c8 bits=0):
   loop::doSum@24 (line 9)
PcDesc(pc=0x00007fb8c105e831 offset=2d1 bits=0):
   loop::doSum@8 (line 9)
PcDesc(pc=0x00007fb8c105e83c offset=2dc bits=0):
   loop::doSum@11 (line 10)
PcDesc(pc=0x00007fb8c105e851 offset=2f1 bits=0):
   loop::doSum@23 (line 10)
PcDesc(pc=0x00007fb8c105e854 offset=2f4 bits=0):
   loop::doSum@24 (line 9)
PcDesc(pc=0x00007fb8c105e869 offset=309 bits=0):
   loop::doSum@8 (line 9)
PcDesc(pc=0x00007fb8c105e8ee offset=38e bits=0):
   loop::doSum@38 (line 12)
PcDesc(pc=0x00007fb8c105e903 offset=3a3 bits=0):
   loop::doSum@50 (line 12)
PcDesc(pc=0x00007fb8c105e909 offset=3a9 bits=0):
   loop::doSum@51 (line 11)
PcDesc(pc=0x00007fb8c105e90e offset=3ae bits=0):
   loop::doSum@35 (line 11)
PcDesc(pc=0x00007fb8c105e9b2 offset=452 bits=0):
   loop::doSum@38 (line 12)
PcDesc(pc=0x00007fb8c105e9c7 offset=467 bits=0):
   loop::doSum@50 (line 12)
PcDesc(pc=0x00007fb8c105e9cb offset=46b bits=0):
   loop::doSum@51 (line 11)
PcDesc(pc=0x00007fb8c105e9d4 offset=474 bits=0):
   loop::doSum@27 (line 9)
PcDesc(pc=0x00007fb8c105e9db offset=47b bits=1):
   loop::doSum@54 (line 11)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: reg r8 [16],oop
    - l4: reg r11 [22],int
PcDesc(pc=0x00007fb8c105e9de offset=47e bits=0):
   loop::doSum@54 (line 11)
PcDesc(pc=0x00007fb8c105e9ec offset=48c bits=0):
   loop::doSum@38 (line 12)
PcDesc(pc=0x00007fb8c105ea01 offset=4a1 bits=0):
   loop::doSum@50 (line 12)
PcDesc(pc=0x00007fb8c105ea04 offset=4a4 bits=0):
   loop::doSum@51 (line 11)
PcDesc(pc=0x00007fb8c105eb07 offset=5a7 bits=0):
   loop::doSum@35 (line 11)
PcDesc(pc=0x00007fb8c105eb28 offset=5c8 bits=1):
   loop::doSum@35 (line 11)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8],oop
    - l4: stack[20]
   Expression stack
    - @0: stack[20]
    - @1: 1029
PcDesc(pc=0x00007fb8c105eb3c offset=5dc bits=0):
   loop::doSum@35 (line 11)
PcDesc(pc=0x00007fb8c105ec2c offset=6cc bits=0):
   loop::doSum@8 (line 9)
PcDesc(pc=0x00007fb8c105ec48 offset=6e8 bits=1):
   loop::doSum@8 (line 9)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8],oop
    - l4: 0
   Expression stack
    - @0: 0
    - @1: 1024
PcDesc(pc=0x00007fb8c105ec5c offset=6fc bits=0):
   loop::doSum@8 (line 9)
PcDesc(pc=0x00007fb8c105ec99 offset=739 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 3 OopMaps

ImmutableOopMap {r8=Oop rcx=Oop rdx=Oop } pc offsets: 1147 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 1480 1768 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007fb8c105e58c offset=2c):
   loop::doSum@-1 (line 8)
ScopeDesc(pc=0x00007fb8c105e590 offset=30):
   loop::doSum@17 (line 10)
ScopeDesc(pc=0x00007fb8c105e5b1 offset=51):
   loop::doSum@21 (line 10)
ScopeDesc(pc=0x00007fb8c105e5cf offset=6f):
   loop::doSum@23 (line 10)
ScopeDesc(pc=0x00007fb8c105e614 offset=b4):
   loop::doSum@11 (line 10)
ScopeDesc(pc=0x00007fb8c105e627 offset=c7):
   loop::doSum@23 (line 10)
ScopeDesc(pc=0x00007fb8c105e62d offset=cd):
   loop::doSum@24 (line 9)
ScopeDesc(pc=0x00007fb8c105e632 offset=d2):
   loop::doSum@8 (line 9)
ScopeDesc(pc=0x00007fb8c105e6d3 offset=173):
   loop::doSum@11 (line 10)
ScopeDesc(pc=0x00007fb8c105e7db offset=27b):
   loop::doSum@23 (line 10)
ScopeDesc(pc=0x00007fb8c105e7e4 offset=284):
   loop::doSum@24 (line 9)
ScopeDesc(pc=0x00007fb8c105e7f0 offset=290):
   loop::doSum@8 (line 9)
ScopeDesc(pc=0x00007fb8c105e803 offset=2a3):
   loop::doSum@11 (line 10)
ScopeDesc(pc=0x00007fb8c105e824 offset=2c4):
   loop::doSum@23 (line 10)
ScopeDesc(pc=0x00007fb8c105e828 offset=2c8):
   loop::doSum@24 (line 9)
ScopeDesc(pc=0x00007fb8c105e831 offset=2d1):
   loop::doSum@8 (line 9)
ScopeDesc(pc=0x00007fb8c105e83c offset=2dc):
   loop::doSum@11 (line 10)
ScopeDesc(pc=0x00007fb8c105e851 offset=2f1):
   loop::doSum@23 (line 10)
ScopeDesc(pc=0x00007fb8c105e854 offset=2f4):
   loop::doSum@24 (line 9)
ScopeDesc(pc=0x00007fb8c105e869 offset=309):
   loop::doSum@8 (line 9)
ScopeDesc(pc=0x00007fb8c105e8ee offset=38e):
   loop::doSum@38 (line 12)
ScopeDesc(pc=0x00007fb8c105e903 offset=3a3):
   loop::doSum@50 (line 12)
ScopeDesc(pc=0x00007fb8c105e909 offset=3a9):
   loop::doSum@51 (line 11)
ScopeDesc(pc=0x00007fb8c105e90e offset=3ae):
   loop::doSum@35 (line 11)
ScopeDesc(pc=0x00007fb8c105e9b2 offset=452):
   loop::doSum@38 (line 12)
ScopeDesc(pc=0x00007fb8c105e9c7 offset=467):
   loop::doSum@50 (line 12)
ScopeDesc(pc=0x00007fb8c105e9cb offset=46b):
   loop::doSum@51 (line 11)
ScopeDesc(pc=0x00007fb8c105e9d4 offset=474):
   loop::doSum@27 (line 9)
ScopeDesc(pc=0x00007fb8c105e9db offset=47b):
   loop::doSum@54 (line 11)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: reg r8 [16],oop
    - l4: reg r11 [22],int
ScopeDesc(pc=0x00007fb8c105e9de offset=47e):
   loop::doSum@54 (line 11)
ScopeDesc(pc=0x00007fb8c105e9ec offset=48c):
   loop::doSum@38 (line 12)
ScopeDesc(pc=0x00007fb8c105ea01 offset=4a1):
   loop::doSum@50 (line 12)
ScopeDesc(pc=0x00007fb8c105ea04 offset=4a4):
   loop::doSum@51 (line 11)
ScopeDesc(pc=0x00007fb8c105eb07 offset=5a7):
   loop::doSum@35 (line 11)
ScopeDesc(pc=0x00007fb8c105eb28 offset=5c8):
   loop::doSum@35 (line 11)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8],oop
    - l4: stack[20]
   Expression stack
    - @0: stack[20]
    - @1: 1029
ScopeDesc(pc=0x00007fb8c105eb3c offset=5dc):
   loop::doSum@35 (line 11)
ScopeDesc(pc=0x00007fb8c105ec2c offset=6cc):
   loop::doSum@8 (line 9)
ScopeDesc(pc=0x00007fb8c105ec48 offset=6e8):
   loop::doSum@8 (line 9)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8],oop
    - l4: 0
   Expression stack
    - @0: 0
    - @1: 1024
ScopeDesc(pc=0x00007fb8c105ec5c offset=6fc):
   loop::doSum@8 (line 9)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007fb8c105e408: 6014
relocInfo@0x00007fb8c105e408 [type=6(runtime_call) addr=0x00007fb8c105e574 offset=20] | [destination=0x00007fb8c1115e20]
         @0x00007fb8c105e40a: f803cc1fcb187fb87147
relocInfo@0x00007fb8c105e412 [type=7(external_word) addr=0x00007fb8c105e6bb offset=327 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e414: 640e
relocInfo@0x00007fb8c105e414 [type=6(runtime_call) addr=0x00007fb8c105e6c9 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e416: a312
relocInfo@0x00007fb8c105e416 [type=10(poll) addr=0x00007fb8c105e9db offset=786]
         @0x00007fb8c105e418: b03a
relocInfo@0x00007fb8c105e418 [type=11(poll_return) addr=0x00007fb8c105ea15 offset=58]
         @0x00007fb8c105e41a: f803cc1fcb187fb87016
relocInfo@0x00007fb8c105e422 [type=7(external_word) addr=0x00007fb8c105ea2b offset=22 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e424: 640e
relocInfo@0x00007fb8c105e424 [type=6(runtime_call) addr=0x00007fb8c105ea39 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e426: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e42e [type=7(external_word) addr=0x00007fb8c105ea3f offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e430: 640e
relocInfo@0x00007fb8c105e430 [type=6(runtime_call) addr=0x00007fb8c105ea4d offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e432: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e43a [type=7(external_word) addr=0x00007fb8c105ea53 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e43c: 640e
relocInfo@0x00007fb8c105e43c [type=6(runtime_call) addr=0x00007fb8c105ea61 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e43e: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e446 [type=7(external_word) addr=0x00007fb8c105ea67 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e448: 640e
relocInfo@0x00007fb8c105e448 [type=6(runtime_call) addr=0x00007fb8c105ea75 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e44a: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e452 [type=7(external_word) addr=0x00007fb8c105ea7b offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e454: 640e
relocInfo@0x00007fb8c105e454 [type=6(runtime_call) addr=0x00007fb8c105ea89 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e456: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e45e [type=7(external_word) addr=0x00007fb8c105ea8f offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e460: 640e
relocInfo@0x00007fb8c105e460 [type=6(runtime_call) addr=0x00007fb8c105ea9d offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e462: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e46a [type=7(external_word) addr=0x00007fb8c105eaa3 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e46c: 640e
relocInfo@0x00007fb8c105e46c [type=6(runtime_call) addr=0x00007fb8c105eab1 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e46e: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e476 [type=7(external_word) addr=0x00007fb8c105eab7 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e478: 640e
relocInfo@0x00007fb8c105e478 [type=6(runtime_call) addr=0x00007fb8c105eac5 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e47a: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e482 [type=7(external_word) addr=0x00007fb8c105eacb offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e484: 640e
relocInfo@0x00007fb8c105e484 [type=6(runtime_call) addr=0x00007fb8c105ead9 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e486: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e48e [type=7(external_word) addr=0x00007fb8c105eadf offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e490: 640e
relocInfo@0x00007fb8c105e490 [type=6(runtime_call) addr=0x00007fb8c105eaed offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e492: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e49a [type=7(external_word) addr=0x00007fb8c105eaf3 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e49c: 640e
relocInfo@0x00007fb8c105e49c [type=6(runtime_call) addr=0x00007fb8c105eb01 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e49e: 6422
relocInfo@0x00007fb8c105e49e [type=6(runtime_call) addr=0x00007fb8c105eb23 offset=34 format=1] | [destination=0x00007fb8c111e940]
         @0x00007fb8c105e4a0: f803cc0699c07fb87005
relocInfo@0x00007fb8c105e4a8 [type=7(external_word) addr=0x00007fb8c105eb28 offset=5 data={cc0699c07fb8}] | [target=0x00007fb8cc0699c0]
         @0x00007fb8c105e4aa: 640e
relocInfo@0x00007fb8c105e4aa [type=6(runtime_call) addr=0x00007fb8c105eb36 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e4ac: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e4b4 [type=7(external_word) addr=0x00007fb8c105eb3c offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e4b6: 640e
relocInfo@0x00007fb8c105e4b6 [type=6(runtime_call) addr=0x00007fb8c105eb4a offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e4b8: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e4c0 [type=7(external_word) addr=0x00007fb8c105eb50 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e4c2: 640e
relocInfo@0x00007fb8c105e4c2 [type=6(runtime_call) addr=0x00007fb8c105eb5e offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e4c4: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e4cc [type=7(external_word) addr=0x00007fb8c105eb64 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e4ce: 640e
relocInfo@0x00007fb8c105e4ce [type=6(runtime_call) addr=0x00007fb8c105eb72 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e4d0: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e4d8 [type=7(external_word) addr=0x00007fb8c105eb78 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e4da: 640e
relocInfo@0x00007fb8c105e4da [type=6(runtime_call) addr=0x00007fb8c105eb86 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e4dc: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e4e4 [type=7(external_word) addr=0x00007fb8c105eb8c offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e4e6: 640e
relocInfo@0x00007fb8c105e4e6 [type=6(runtime_call) addr=0x00007fb8c105eb9a offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e4e8: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e4f0 [type=7(external_word) addr=0x00007fb8c105eba0 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e4f2: 640e
relocInfo@0x00007fb8c105e4f2 [type=6(runtime_call) addr=0x00007fb8c105ebae offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e4f4: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e4fc [type=7(external_word) addr=0x00007fb8c105ebb4 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e4fe: 640e
relocInfo@0x00007fb8c105e4fe [type=6(runtime_call) addr=0x00007fb8c105ebc2 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e500: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e508 [type=7(external_word) addr=0x00007fb8c105ebc8 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e50a: 640e
relocInfo@0x00007fb8c105e50a [type=6(runtime_call) addr=0x00007fb8c105ebd6 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e50c: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e514 [type=7(external_word) addr=0x00007fb8c105ebdc offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e516: 640e
relocInfo@0x00007fb8c105e516 [type=6(runtime_call) addr=0x00007fb8c105ebea offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e518: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e520 [type=7(external_word) addr=0x00007fb8c105ebf0 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e522: 640e
relocInfo@0x00007fb8c105e522 [type=6(runtime_call) addr=0x00007fb8c105ebfe offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e524: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e52c [type=7(external_word) addr=0x00007fb8c105ec04 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e52e: 640e
relocInfo@0x00007fb8c105e52e [type=6(runtime_call) addr=0x00007fb8c105ec12 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e530: f803cc1fcb187fb87006
relocInfo@0x00007fb8c105e538 [type=7(external_word) addr=0x00007fb8c105ec18 offset=6 data={cc1fcb187fb8}] | [target=0x00007fb8cc1fcb18]
         @0x00007fb8c105e53a: 640e
relocInfo@0x00007fb8c105e53a [type=6(runtime_call) addr=0x00007fb8c105ec26 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e53c: 641d
relocInfo@0x00007fb8c105e53c [type=6(runtime_call) addr=0x00007fb8c105ec43 offset=29 format=1] | [destination=0x00007fb8c111e940]
         @0x00007fb8c105e53e: f803cc0699c07fb87005
relocInfo@0x00007fb8c105e546 [type=7(external_word) addr=0x00007fb8c105ec48 offset=5 data={cc0699c07fb8}] | [target=0x00007fb8cc0699c0]
         @0x00007fb8c105e548: 640e
relocInfo@0x00007fb8c105e548 [type=6(runtime_call) addr=0x00007fb8c105ec56 offset=14 format=1] | [destination=0x00007fb8cb7f66d0]
         @0x00007fb8c105e54a: f2478006
relocInfo@0x00007fb8c105e54c [type=8(internal_word) addr=0x00007fb8c105ec5c offset=6 data=583] | [target=0x00007fb8c105ea15]
         @0x00007fb8c105e54e: 6411
relocInfo@0x00007fb8c105e54e [type=6(runtime_call) addr=0x00007fb8c105ec6d offset=17 format=1] | [destination=0x00007fb8c111d6a0]
         @0x00007fb8c105e550: 0013
relocInfo@0x00007fb8c105e550 [type=0(none) addr=0x00007fb8c105ec80 offset=19]
         @0x00007fb8c105e552: 6400
relocInfo@0x00007fb8c105e552 [type=6(runtime_call) addr=0x00007fb8c105ec80 offset=0 format=1] | [destination=0x00007fb8c1081720]
         @0x00007fb8c105e554: 640f
relocInfo@0x00007fb8c105e554 [type=6(runtime_call) addr=0x00007fb8c105ec8f offset=15 format=1] | [destination=0x00007fb8c111ec60]
         @0x00007fb8c105e556: 0000
relocInfo@0x00007fb8c105e556 [type=0(none) addr=0x00007fb8c105ec8f offset=0]
         @0x00007fb8c105e558: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 3 entries, 28 bytes):
{
   < 0x00007fb8c105e58c, 0x00007fb8c105ec2c > < 0x00007fb8c105e5ad, 0x00007fb8c105ec2c > < 0x00007fb8c105e5cc, 0x00007fb8c105ec2c > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x00000001014b7c68 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000001014b7c68}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x00007fb86740e428 {method} {0x00007fb86740e428} 'doSum' '([F[F[F)V' in 'loop'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Res[4] = 6.0
------------------------------------------------------------------------
loop::doSum([F[F[F)V
  interpreter_invocation_count:       17977
  invocation_counter:                 17977
  backedge_counter:                18440192
  decompile_count:                        0
  mdo size: 552 bytes

0 iconst_0
1 istore #4
3 fast_iload #4
5 sipush 1024
8 if_icmpge 30
  0   bci: 8    BranchData          taken(6494) displacement(56)
                                    not taken(18402602)
11 aload_1
12 fast_iload #4
14 aload_2
15 fast_iload #4
17 faload
18 aload_3
19 fast_iload #4
21 faload
22 fadd
23 fastore
24 iinc #4 1
27 goto 3
  32  bci: 27   JumpData            taken(18402602) displacement(-32)
30 fast_iload #4
32 sipush 1029
35 if_icmpge 57
  56  bci: 35   BranchData          taken(6494) displacement(56)
                                    not taken(32470)
38 aload_1
39 fast_iload #4
41 aload_2
42 fast_iload #4
44 faload
45 aload_3
46 fast_iload #4
48 faload
49 fadd
50 fastore
51 iinc #4 1
54 goto 30
  88  bci: 54   JumpData            taken(32470) displacement(-32)
57 return
------------------------------------------------------------------------
Total MDO size: 552 bytes
