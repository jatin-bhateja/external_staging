CompileCommand: print loop.doSum bool print = true
CompileCommand: compileonly loop.doSum bool compileonly = true
Counted          Loop: N513/N464  counted [int,int),+1 (-1 iters) 
Loop: N0/N0  has_sfpt
  Loop: N502/N285  limit_check profile_predicated predicated sfpts={ 285 }
  Loop: N512/N511  limit_check profile_predicated predicated
    Loop: N513/N464  limit_check profile_predicated predicated counted [int,int),+1 (-1 iters)  has_sfpt strip_mined
Predicate IC   Loop: N502/N285  limit_check profile_predicated predicated sfpts={ 285 }
Predicate IC   Loop: N502/N285  limit_check profile_predicated predicated sfpts={ 285 }
Predicate IC   Loop: N502/N285  limit_check profile_predicated predicated sfpts={ 285 }
Predicate IC     Loop: N513/N464  limit_check profile_predicated predicated counted [int,int),+1 (6 iters)  has_sfpt strip_mined
Predicate RC     Loop: N513/N464  limit_check profile_predicated predicated counted [int,int),+1 (6 iters)  has_sfpt strip_mined
Predicate IC     Loop: N513/N464  limit_check profile_predicated predicated counted [int,int),+1 (6 iters)  has_sfpt strip_mined
Predicate RC     Loop: N513/N464  limit_check profile_predicated predicated counted [int,int),+1 (6 iters)  has_sfpt strip_mined
Predicate IC     Loop: N513/N464  limit_check profile_predicated predicated counted [int,int),+1 (6 iters)  has_sfpt strip_mined
Predicate RC     Loop: N513/N464  limit_check profile_predicated predicated counted [int,int),+1 (6 iters)  has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N502/N285  limit_check profile_predicated predicated sfpts={ 285 }
  Loop: N512/N511  limit_check profile_predicated predicated sfpts={ 514 }
    Loop: N513/N464  limit_check profile_predicated predicated counted [int,int),+1 (6 iters)  has_sfpt strip_mined
PartialPeel    Loop: N502/N285  limit_check profile_predicated predicated sfpts={ 285 }
Counted          Loop: N767/N173  counted [int,int),+1 (-1 iters) 
Loop: N0/N0  has_sfpt
  Loop: N766/N765 
    Loop: N767/N173  counted [int,int),+1 (-1 iters)  has_sfpt strip_mined
  Loop: N512/N511  limit_check profile_predicated predicated sfpts={ 514 }
    Loop: N513/N464  limit_check profile_predicated predicated counted [int,int),+1 (6 iters)  has_sfpt strip_mined
PreMainPost      Loop: N767/N173  counted [int,int),+1 (1001 iters)  has_sfpt strip_mined
RangeCheck       Loop: N767/N173  counted [int,int),+1 (1001 iters)  main has_sfpt strip_mined
Unroll 2         Loop: N767/N173  counted [int,int),+1 (1001 iters)  main has_sfpt strip_mined
PreMainPost      Loop: N513/N464  limit_check profile_predicated predicated counted [int,int),+1 (6 iters)  has_sfpt strip_mined
Unroll 2         Loop: N513/N464  counted [int,int),+1 (6 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N864/N878  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N766/N765  sfpts={ 768 }
    Loop: N1164/N173  counted [int,int),+2 (1001 iters)  main has_sfpt strip_mined
  Loop: N792/N806  counted [int,int),+1 (4 iters)  post has_sfpt
  Loop: N1265/N1267  limit_check profile_predicated predicated counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N512/N511  sfpts={ 514 }
    Loop: N1481/N464  counted [int,int),+2 (6 iters)  main has_sfpt strip_mined
  Loop: N1225/N1227  counted [int,int),+1 (4 iters)  post has_sfpt
Unroll 4         Loop: N1164/N173  counted [int,int),+2 (1001 iters)  main has_sfpt strip_mined
Unroll 4         Loop: N1481/N464  counted [int,int),+2 (6 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N864/N878  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N766/N765  sfpts={ 768 }
    Loop: N1610/N173  counted [int,int),+4 (1001 iters)  main has_sfpt strip_mined
  Loop: N792/N806  counted [int,int),+1 (4 iters)  post has_sfpt
  Loop: N1265/N1267  limit_check profile_predicated predicated counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N512/N511  sfpts={ 514 }
    Loop: N1709/N464  counted [int,int),+4 (6 iters)  main has_sfpt strip_mined
  Loop: N1225/N1227  counted [int,int),+1 (4 iters)  post has_sfpt
Unroll 8         Loop: N1610/N173  counted [int,int),+4 (1001 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N864/N878  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N766/N765  sfpts={ 768 }
    Loop: N1846/N173  counted [int,int),+8 (1001 iters)  main has_sfpt strip_mined
  Loop: N792/N806  counted [int,int),+1 (4 iters)  post has_sfpt
  Loop: N1265/N1267  limit_check profile_predicated predicated counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N512/N511  sfpts={ 514 }
    Loop: N1709/N464  counted [int,int),+4 (6 iters)  main has_sfpt strip_mined
  Loop: N1225/N1227  counted [int,int),+1 (4 iters)  post has_sfpt
Unroll 16         Loop: N1846/N173  counted [int,int),+8 (1001 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N864/N878  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N766/N765  sfpts={ 768 }
    Loop: N2039/N173  counted [int,int),+16 (1001 iters)  main has_sfpt strip_mined
  Loop: N792/N806  counted [int,int),+1 (4 iters)  post has_sfpt
  Loop: N1265/N1267  limit_check profile_predicated predicated counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N512/N511  sfpts={ 514 }
    Loop: N1709/N464  counted [int,int),+4 (6 iters)  main has_sfpt strip_mined
  Loop: N1225/N1227  counted [int,int),+1 (4 iters)  post has_sfpt
PredicatesOff
Loop: N0/N0  has_sfpt
  Loop: N864/N878  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N766/N765  sfpts={ 768 }
    Loop: N2039/N173  counted [int,int),+16 (1001 iters)  main has_sfpt strip_mined
  Loop: N792/N806  counted [int,int),+1 (4 iters)  post has_sfpt
  Loop: N1265/N1267  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N512/N511  sfpts={ 514 }
    Loop: N1709/N464  counted [int,int),+4 (6 iters)  main has_sfpt strip_mined
  Loop: N1225/N1227  counted [int,int),+1 (4 iters)  post has_sfpt
SuperWord::output        Loop: N2039/N173  counted [int,int),+16 (1001 iters)  main has_sfpt strip_mined
PhaseIdealLoop::create_reserve_version_of_loop:
	 iff = 2077,  2077  If  ===  1916  115  [[ 2078  2079 ]] P=0.999999, C=-1.000000
	 iffast = 2078,  2078  IfTrue  ===  2077  [[]] #1
	 ifslow = 2079,  2079  IfFalse  ===  2077  [[]] #0
	 before replace_input_of: head = 2039,  2039  CountedLoop  ===  2039  766  173  [[ 1925  1936  1947  1958  1962  1966  1970  1974  2014  2019  2022  2025  2029  2032  2035  2038  2039  1788  2042  2043  1799  1810  1822  1824  1838  1842  1845  1167  1580  661  1594  1606  1609  762  686  1142 ]] inner stride: 16 main of N2039 strip mined !orig=[1846],[1610],[1164],[767],[701],[658] !jvms: loop::doSum @ bci:19 (line 10)
	 before replace_input_of: slow_head = 2306,  2306  CountedLoop  ===  2306  2312  2308  [[ 2080  2091  2102  2113  2117  2121  2125  2129  2168  2172  2176  2180  2184  2188  2200  2223  2227  2262  2265  2268  2271  2274  2277  2280  2284  2287  2290  2293  2296  2299  2302  2305  2306  2307  2309  2310 ]] inner stride: 16 main of N2306 strip mined !orig=2039,[1846],[1610],[1164],[767],[701],[658] !jvms: loop::doSum @ bci:19 (line 10)
	 after  replace_input_of: head = 2039,  2039  CountedLoop  ===  2039  766  173  [[ 1925  1936  1947  1958  1962  1966  1970  1974  2014  2019  2022  2025  2029  2032  2035  2038  2039  1788  2042  2043  1799  1810  1822  1824  1838  1842  1845  1167  1580  661  1594  1606  1609  762  686  1142 ]] inner stride: 16 main of N2039 strip mined !orig=[1846],[1610],[1164],[767],[701],[658] !jvms: loop::doSum @ bci:19 (line 10)
	 after  replace_input_of: slow_head = 2306,  2306  CountedLoop  ===  2306  2312  2308  [[ 2080  2091  2102  2113  2117  2121  2125  2129  2168  2172  2176  2180  2184  2188  2200  2223  2227  2262  2265  2268  2271  2274  2277  2280  2284  2287  2290  2293  2296  2299  2302  2305  2306  2307  2309  2310 ]] inner stride: 16 main of N2306 strip mined !orig=2039,[1846],[1610],[1164],[767],[701],[658] !jvms: loop::doSum @ bci:19 (line 10)
SuperWord::output        Loop: N1709/N464  counted [int,int),+4 (6 iters)  main has_sfpt strip_mined
PhaseIdealLoop::create_reserve_version_of_loop:
	 iff = 2336,  2336  If  ===  1670  115  [[ 2337  2338 ]] P=0.999999, C=-1.000000
	 iffast = 2337,  2337  IfTrue  ===  2336  [[]] #1
	 ifslow = 2338,  2338  IfFalse  ===  2336  [[]] #0
	 before replace_input_of: head = 1709,  1709  CountedLoop  ===  1709  512  464  [[ 1679  1693  1709  1457  1712  1713  507  452 ]] inner stride: 4 main of N1709 strip mined !orig=[1481],[513],[503],[343] !jvms: loop::doSum @ bci:40 (line 12)
	 before replace_input_of: slow_head = 2397,  2397  CountedLoop  ===  2397  2403  2399  [[ 2339  2350  2364  2375  2397  2398  2400  2401 ]] inner stride: 4 main of N2397 strip mined !orig=1709,[1481],[513],[503],[343] !jvms: loop::doSum @ bci:40 (line 12)
	 after  replace_input_of: head = 1709,  1709  CountedLoop  ===  1709  512  464  [[ 1679  1693  1709  1457  1712  1713  507  452 ]] inner stride: 4 main of N1709 strip mined !orig=[1481],[513],[503],[343] !jvms: loop::doSum @ bci:40 (line 12)
	 after  replace_input_of: slow_head = 2397,  2397  CountedLoop  ===  2397  2403  2399  [[ 2339  2350  2364  2375  2397  2398  2400  2401 ]] inner stride: 4 main of N2397 strip mined !orig=1709,[1481],[513],[503],[343] !jvms: loop::doSum @ bci:40 (line 12)
Loop: N0/N0  has_sfpt
  Loop: N864/N878  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N766/N765  sfpts={ 768 }
    Loop: N2039/N173  counted [int,int),+16 (1001 iters)  main vector has_sfpt strip_mined
  Loop: N792/N806  counted [int,int),+1 (4 iters)  post has_sfpt
  Loop: N1265/N1267  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N512/N511  sfpts={ 514 }
    Loop: N1709/N464  counted [int,int),+4 (6 iters)  main vector has_sfpt strip_mined
  Loop: N1225/N1227  counted [int,int),+1 (4 iters)  post has_sfpt
PostVector      Loop: N2039/N173  counted [int,int),+16 (1001 iters)  main vector has_sfpt strip_mined
Unroll 32         Loop: N2039/N173  counted [int,int),+16 (1001 iters)  main vector has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N864/N878  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N766/N765  sfpts={ 768 }
    Loop: N2547/N173  counted [int,int),+32 (1001 iters)  main vector has_sfpt strip_mined
  Loop: N2454/N2456  counted [int,int),+16 (16 iters)  post vector has_sfpt
  Loop: N792/N806  counted [int,int),+1 (4 iters)  post has_sfpt
  Loop: N1265/N1267  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N512/N511  sfpts={ 514 }
    Loop: N1709/N464  counted [int,int),+4 (6 iters)  main vector has_sfpt strip_mined
  Loop: N1225/N1227  counted [int,int),+1 (4 iters)  post has_sfpt
Unroll 64         Loop: N2547/N173  counted [int,int),+32 (1001 iters)  main vector has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N864/N878  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N766/N765  sfpts={ 768 }
    Loop: N2657/N173  counted [int,int),+64 (1001 iters)  main vector has_sfpt strip_mined
  Loop: N2454/N2456  counted [int,int),+16 (16 iters)  post vector has_sfpt
  Loop: N792/N806  counted [int,int),+1 (4 iters)  post has_sfpt
  Loop: N1265/N1267  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N512/N511  sfpts={ 514 }
    Loop: N1709/N464  counted [int,int),+4 (6 iters)  main vector has_sfpt strip_mined
  Loop: N1225/N1227  counted [int,int),+1 (4 iters)  post has_sfpt

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 24 ------------------------
{method}
 - this oop:          0x00007ff8c480e438
 - method holder:     'loop'
 - constants:         0x00007ff8c480e048 constant pool [62]/operands[5] {0x00007ff8c480e048} for 'loop' cache=0x00007ff8c480e6e0
 - access:            0xc1000001  public 
 - name:              'doSum'
 - signature:         '([F[F[F)V'
 - max stack:         6
 - max locals:        5
 - size of params:    4
 - method size:       13
 - vtable index:      5
 - i2i entry:         0x00007ff924c84c00
 - adapters:          AHE@0x00007ff920309880: 0xbbbb i2c: 0x00007ff924d1d7e0 c2i: 0x00007ff924d1d8cc c2iUV: 0x00007ff924d1d896 c2iNCI: 0x00007ff924d1d909
 - compiled entry     0x00007ff924d1d8cc
 - code size:         60
 - code start:        0x00007ff8c480e3e8
 - code end (excl):   0x00007ff8c480e424
 - method data:       0x00007ff8c480e918
 - checked ex length: 0
 - linenumber start:  0x00007ff8c480e424
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 24 -----------------------
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 96 --
#r591 rsp+92: in_preserve
#r590 rsp+88: return address
#r589 rsp+84: in_preserve
#r588 rsp+80: saved fp register
#r587 rsp+76: pad2, stack alignment
#r586 rsp+72: pad2, stack alignment
#r585 rsp+68: Fixed slot 1
#r584 rsp+64: Fixed slot 0
#r607 rsp+60: spill
#r606 rsp+56: spill
#r605 rsp+52: spill
#r604 rsp+48: spill
#r603 rsp+44: spill
#r602 rsp+40: spill
#r601 rsp+36: spill
#r600 rsp+32: spill
#r599 rsp+28: spill
#r598 rsp+24: spill
#r597 rsp+20: spill
#r596 rsp+16: spill
#r595 rsp+12: spill
#r594 rsp+ 8: spill
#r593 rsp+ 4: spill
#r592 rsp+ 0: spill
#
000     N895: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B72 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (176 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

01c     movq    R14, [RSI + #24 (8-bit)]	# ptr
020     movq    RBP, [RSI + #16 (8-bit)]	# ptr
024     movl    RBX, [RSI]	# int
026     movq    R13, [RSI + #8 (8-bit)]	# ptr
02a     movq    RDI, RSI	# spill
02d     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
        nop 	# 3 bytes pad for loops and calls
040     testq   R14, R14	# ptr
043     je     B72  P=0.001000 C=-1.000000

049     B2: #	out( B91 B3 ) <- in( B1 )  Freq: 0.999
049     movl    R10, [R14 + #8 (8-bit)]	# compressed klass ptr
04d     cmpl    R10, narrowklass: precise klass [F: 0x00007ff89800baf8:Constant:exact *	# compressed klass ptr
054     jne,u   B91  P=0.000001 C=-1.000000

05a     B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
05a     movq    R11, R14	# spill
05d     # checkcastPP of R11

05d     B4: #	out( B73 B5 ) <- in( B3 B72 )  Freq: 0.999999
        nop 	# 3 bytes pad for loops and calls
060     testq   RBP, RBP	# ptr
063     je     B73  P=0.001000 C=-1.000000

069     B5: #	out( B91 B6 ) <- in( B4 )  Freq: 0.998999
069     movl    R8, [RBP + #8 (8-bit)]	# compressed klass ptr
06d     cmpl    R8, narrowklass: precise klass [F: 0x00007ff89800baf8:Constant:exact *	# compressed klass ptr
074     jne,u   B91  P=0.000001 C=-1.000000

07a     B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
07a     movq    R9, RBP	# spill
07d     # checkcastPP of R9

07d     B7: #	out( B74 B8 ) <- in( B6 B73 )  Freq: 0.999998
        nop 	# 3 bytes pad for loops and calls
080     testq   R13, R13	# ptr
083     je     B74  P=0.001000 C=-1.000000

089     B8: #	out( B91 B9 ) <- in( B7 )  Freq: 0.998998
089     movl    R10, [R13 + #8 (8-bit)]	# compressed klass ptr
08d     cmpl    R10, narrowklass: precise klass [F: 0x00007ff89800baf8:Constant:exact *	# compressed klass ptr
094     jne,u   B91  P=0.000001 C=-1.000000

09a     B9: #	out( B10 ) <- in( B8 )  Freq: 0.998997
09a     # checkcastPP of R13

09a     B10: #	out( B105 B11 ) <- in( B9 B74 )  Freq: 0.999997
        nop 	# 6 bytes pad for loops and calls
0a0     movl    RBP, [R9 + #12 (8-bit)]	# range
0a4     NullCheck R9

0a4     B11: #	out( B105 B12 ) <- in( B10 )  Freq: 0.999996
0a4     movl    RAX, [R13 + #12 (8-bit)]	# range
0a8     NullCheck R13

0a8     B12: #	out( B105 B13 ) <- in( B11 )  Freq: 0.999995
0a8     movl    RCX, [R11 + #12 (8-bit)]	# range
0ac     NullCheck R11

0ac     B13: #	out( B42 B14 ) <- in( B12 )  Freq: 0.999994
0ac     movl    R10, R11	# ptr -> int
0af     movl    [rsp + #0], RCX	# spill
0b2     movslq  R8, RCX	# i2l
0b5     movq    [rsp + #8], R8	# spill
0ba     shrl    R10, #2
0be     movdl   XMM0, R10	# spill
0c3     movslq  R10, RAX	# i2l
0c6     movq    [rsp + #16], R10	# spill
0cb     movslq  R10, RBP	# i2l
0ce     movq    [rsp + #24], R10	# spill
0d3     movq    R10, java/lang/Class:exact *	# ptr
0dd     movl    R10, [R10 + #112 (8-bit)]	# int ! Field: loop.LEN
0e1     movl    [rsp + #32], R10	# spill
0e6     addl    R10, #-5	# int
0ea     # TLS is in R15
0ea     xorl    R8, R8	# int
0ed     cmpl    RBX, R10
0f0     jge     B42  P=0.000999 C=29036.000000

0f6     B14: #	out( B15 ) <- in( B13 )  Freq: 0.998995
0f6     movdl   RDI, XMM0	# spill
0fa     andl    RDI, #15	# int
0fd     movl    RCX, RBX	# spill
0ff     incl    RCX	# int
101     testl   RCX, RCX
103     cmovll RCX, R8	# signed, int
107     testl   RCX, RCX
109     cmovll RCX, R8	# signed, int
10d     testl   RCX, RCX
10f     cmovll RCX, R8	# signed, int
113     cmpl    RCX, R10
116     cmovlgt RCX, R10	# min
11a     addl    RDI, RCX	# int
11c     movl    RSI, #12	# int
121     subl    RSI, RDI	# int
123     andl    RSI, #15	# int
126     addl    RSI, RCX	# int
128     cmpl    RSI, R10
12b     cmovlgt RSI, R10	# min

12f     B15: #	out( B75 B16 ) <- in( B14 B18 ) Loop( B15-B18 inner pre of N767) Freq: 1.99798
12f     cmpl    RBX, RBP	# unsigned
131     jnb,u   B75  P=0.000001 C=-1.000000

137     B16: #	out( B76 B17 ) <- in( B15 )  Freq: 1.99798
137     movss   XMM2, [R9 + #16 + RBX << #2]	# float
        nop 	# 2 bytes pad for loops and calls
140     cmpl    RBX, RAX	# unsigned
142     jnb,u   B76  P=0.000001 C=-1.000000

148     B17: #	out( B79 B18 ) <- in( B16 )  Freq: 1.99798
148     vaddss  XMM2, XMM2, [R13 + #16 + RBX << #2]
14f     cmpl    RBX, [RSP + #0 (32-bit)]	# unsigned
152     jnb,u   B79  P=0.000001 C=-1.000000

158     B18: #	out( B15 B19 ) <- in( B17 )  Freq: 1.99798
158     movss   [R11 + #16 + RBX << #2], XMM2	# float
15f     incl    RBX	# int
161     cmpl    RBX, RSI
163     jl,s   B15	# loop end  P=0.500000 C=29036.000000

165     B19: #	out( B36 B20 ) <- in( B18 )  Freq: 0.998989
165     movslq  RCX, R10	# i2l
168     cmpq    RCX, [RSP + #24 (32-bit)]
16d     movl    RDI, R10	# spill
170     cmovlg RDI, RBP	# signed, int
173     movslq  RCX, RDI	# i2l
176     cmpq    RCX, [RSP + #16 (32-bit)]
17b     cmovlg RDI, RAX	# signed, int
17e     movslq  RCX, RDI	# i2l
181     cmpq    RCX, [RSP + #8 (32-bit)]
186     cmovlg RDI, [RSP + #0 (32-bit)]	# signed, int
18a     movl    RCX, RDI	# spill
18c     addl    RCX, #-63	# int
18f     cmpl    RDI, RCX
191     movl    RSI, #-2147483648	# int
196     cmovll RCX, RSI	# signed, int
199     cmpl    RBX, RCX
        nop 	# 5 bytes pad for loops and calls
1a0     jge     B36  P=0.000001 C=-1.000000

1a6     B20: #	out( B82 B21 ) <- in( B19 )  Freq: 0.998988
1a6     # castII of RBX
1a6     cmpl    RBX, RBP	# unsigned
1a8     jnb,u   B82  P=0.000001 C=-1.000000

1ae     B21: #	out( B83 B22 ) <- in( B20 )  Freq: 0.998987
1ae     cmpl    RBX, RAX	# unsigned
1b0     jnb,u   B83  P=0.000001 C=-1.000000

1b6     B22: #	out( B84 B23 ) <- in( B21 )  Freq: 0.998986
1b6     cmpl    RBX, [RSP + #0 (32-bit)]	# unsigned
1b9     jnb,u   B84  P=0.000001 C=-1.000000

1bf     B23: #	out( B85 B24 ) <- in( B22 )  Freq: 0.998985
1bf     movl    RSI, RBX	# spill
1c1     addl    RSI, #63	# int
1c4     cmpl    RSI, [RSP + #0 (32-bit)]	# unsigned
1c7     jnb,u   B85  P=0.000001 C=-1.000000

1cd     B24: #	out( B86 B25 ) <- in( B23 )  Freq: 0.998984
1cd     cmpl    RBX, [RSP + #0 (32-bit)]	# unsigned
1d0     jnb,u   B86  P=0.000001 C=-1.000000

1d6     B25: #	out( B87 B26 ) <- in( B24 )  Freq: 0.998983
1d6     cmpl    RSI, RAX	# unsigned
1d8     jnb,u   B87  P=0.000001 C=-1.000000

1de     B26: #	out( B88 B27 ) <- in( B25 )  Freq: 0.998982
        nop 	# 2 bytes pad for loops and calls
1e0     cmpl    RBX, RAX	# unsigned
1e2     jnb,u   B88  P=0.000001 C=-1.000000

1e8     B27: #	out( B89 B28 ) <- in( B26 )  Freq: 0.998981
1e8     cmpl    RSI, RBP	# unsigned
1ea     jnb,u   B89  P=0.000001 C=-1.000000

1f0     B28: #	out( B90 B29 ) <- in( B27 )  Freq: 0.99898
1f0     cmpl    RBX, RBP	# unsigned
1f2     jnb,u   B90  P=0.000001 C=-1.000000

1f8     B29: #	out( B30 ) <- in( B28 )  Freq: 0.998979
1f8     movl    RSI, #64000	# int

1fd     B30: #	out( B31 ) <- in( B29 B32 ) Loop( B30-B32 ) Freq: 1000.24
1fd     movl    RDX, RCX	# spill
1ff     subl    RDX, RBX	# int
201     cmpl    RCX, RBX
203     cmovll RDX, R8	# signed, int
207     cmpl    RDX, #64000	# unsigned
20d     cmovlnbe RDX, RSI	# unsigned, int
210     addl    RDX, RBX	# int

212     B31: #	out( B31 B32 ) <- in( B30 B31 ) Loop( B31-B31 inner main of N271 strip mined) Freq: 1.00151e+06
212     load_vector XMM1,[R13 + #16 + RBX << #2]
21d     vaddps  XMM1,XMM1,[R9 + #16 + RBX << #2]	! add packedF
228     store_vector [R11 + #16 + RBX << #2],XMM1
	
233     movslq  R14, RBX	# i2l
236     load_vector XMM1,[R13 + #80 + R14 << #2]
241     vaddps  XMM1,XMM1,[R9 + #80 + R14 << #2]	! add packedF
24c     store_vector [R11 + #80 + R14 << #2],XMM1
	
257     load_vector XMM1,[R13 + #144 + R14 << #2]
262     vaddps  XMM1,XMM1,[R9 + #144 + R14 << #2]	! add packedF
26d     store_vector [R11 + #144 + R14 << #2],XMM1
	
278     load_vector XMM1,[R13 + #208 + R14 << #2]
283     vaddps  XMM1,XMM1,[R9 + #208 + R14 << #2]	! add packedF
28e     store_vector [R11 + #208 + R14 << #2],XMM1
	
299     addl    RBX, #64	# int
        nop 	# 4 bytes pad for loops and calls
2a0     cmpl    RBX, RDX
2a2     jl     B31	# loop end  P=0.999001 C=29036.000000

2a8     B32: #	out( B30 B33 ) <- in( B31 )  Freq: 1000.24
2a8     movq    RDX, [R15 + #912 (32-bit)]	# ptr
2af     testl   rax, [RDX]	# Safepoint: poll for GC        # loop::doSum @ bci:29 (line 9) L[0]=_ L[1]=R11 L[2]=R9 L[3]=R13 L[4]=RBX
        # OopMap {r11=Oop r9=Oop r13=Oop off=687/0x2af}
2b1     cmpl    RBX, RCX
2b3     jl     B30  P=0.999001 C=29036.000000

2b9     B33: #	out( B36 B34 ) <- in( B32 )  Freq: 0.998979
2b9     movl    RCX, RDI	# spill
2bb     addl    RCX, #-15	# int
2be     cmpl    RDI, RCX
2c0     movl    RDX, #-2147483648	# int
2c5     cmovll RCX, RDX	# signed, int
2c8     cmpl    RBX, RCX
2ca     jge,s   B36  P=0.500000 C=-1.000000

2cc     B34: #	out( B35 ) <- in( B33 )  Freq: 0.499489
2cc     # castII of RBX

2cc     B35: #	out( B35 B36 ) <- in( B34 B35 ) Loop( B35-B35 inner post of N2039) Freq: 0.998979
2cc     load_vector XMM1,[R13 + #16 + RBX << #2]
2d7     vaddps  XMM1,XMM1,[R9 + #16 + RBX << #2]	! add packedF
2e2     store_vector [R11 + #16 + RBX << #2],XMM1
	
2ed     addl    RBX, #16	# int
2f0     cmpl    RBX, RCX
2f2     jl,s   B35	# loop end  P=0.500000 C=29036.000000

2f4     B36: #	out( B42 B37 ) <- in( B19 B35 B33 )  Freq: 0.99898
2f4     cmpl    RBX, R10
2f7     jge     B42  P=0.500000 C=-1.000000

2fd     B37: #	out( B38 ) <- in( B36 )  Freq: 0.49949
2fd     # castII of RBX
        nop 	# 3 bytes pad for loops and calls

300     B38: #	out( B75 B39 ) <- in( B37 B41 ) Loop( B38-B41 inner post of N767) Freq: 0.998977
300     cmpl    RBX, RBP	# unsigned
302     jnb,u   B75  P=0.000001 C=-1.000000

308     B39: #	out( B77 B40 ) <- in( B38 )  Freq: 0.998976
308     movss   XMM1, [R9 + #16 + RBX << #2]	# float
30f     cmpl    RBX, RAX	# unsigned
311     jnb,u   B77  P=0.000001 C=-1.000000

317     B40: #	out( B80 B41 ) <- in( B39 )  Freq: 0.998975
317     vaddss  XMM1, XMM1, [R13 + #16 + RBX << #2]
        nop 	# 2 bytes pad for loops and calls
320     cmpl    RBX, [RSP + #0 (32-bit)]	# unsigned
323     jnb,u   B80  P=0.000001 C=-1.000000

329     B41: #	out( B38 B42 ) <- in( B40 )  Freq: 0.998974
329     movss   [R11 + #16 + RBX << #2], XMM1	# float
330     incl    RBX	# int
332     cmpl    RBX, R10
335     jl,s   B38	# loop end  P=0.500000 C=29036.000000

337     B42: #	out( B71 B43 ) <- in( B13 B41 B36 )  Freq: 0.999976
337     cmpl    RBX, [RSP + #32 (32-bit)]
        nop 	# 5 bytes pad for loops and calls
340     jge     B71  P=0.166667 C=174.000000

346     B43: #	out( B92 B44 ) <- in( B42 )  Freq: 0.833313
346     cmpl    RBX, RBP	# unsigned
348     jnb,u   B92  P=0.000001 C=-1.000000

34e     B44: #	out( B92 B45 ) <- in( B43 )  Freq: 0.833312
34e     movslq  R10, [RSP + #32 (32-bit)]	# int -> long
353     decq    R10	# long
        nop 	# 10 bytes pad for loops and calls
360     cmpq    R10, [RSP + #24 (32-bit)]	# unsigned
365     jnb,u   B92  P=0.000001 C=-1.000000

36b     B45: #	out( B92 B46 ) <- in( B44 )  Freq: 0.833311
36b     cmpl    RBX, RAX	# unsigned
36d     jnb,u   B92  P=0.000001 C=-1.000000

373     B46: #	out( B92 B47 ) <- in( B45 )  Freq: 0.833311
373     cmpq    R10, [RSP + #16 (32-bit)]	# unsigned
378     jnb,u   B92  P=0.000001 C=-1.000000

37e     B47: #	out( B92 B48 ) <- in( B46 )  Freq: 0.83331
        nop 	# 2 bytes pad for loops and calls
380     cmpl    RBX, [RSP + #0 (32-bit)]	# unsigned
383     jnb,u   B92  P=0.000001 C=-1.000000

389     B48: #	out( B92 B49 ) <- in( B47 )  Freq: 0.833309
389     cmpq    R10, [RSP + #8 (32-bit)]	# unsigned
38e     jnb,u   B92  P=0.000001 C=-1.000000

394     B49: #	out( B50 ) <- in( B48 )  Freq: 0.833308
394     movdl   R10, XMM0	# spill
399     andl    R10, #3	# int
39d     addl    R10, RBX	# int
3a0     movl    RCX, #-1	# int
3a5     subl    RCX, R10	# int
3a8     andl    RCX, #3	# int
3ab     addl    RCX, RBX	# int
3ad     incl    RCX	# int
3af     cmpl    RCX, [RSP + #32 (32-bit)]
3b3     movl    RDI, [rsp + #32]	# spill
3b7     cmovlgt RCX, RDI	# min

3ba     B50: #	out( B50 B51 ) <- in( B49 B50 ) Loop( B50-B50 inner pre of N513) Freq: 1.66662
3ba     movss   XMM1, [R13 + #16 + RBX << #2]	# float
3c1     vaddss  XMM0, XMM1, [R9 + #16 + RBX << #2]
3c8     movss   [R11 + #16 + RBX << #2], XMM0	# float
3cf     incl    RBX	# int
3d1     cmpl    RBX, RCX
3d3     jl,s   B50	# loop end  P=0.500000 C=145.000000

3d5     B51: #	out( B68 B52 ) <- in( B50 )  Freq: 0.833308
3d5     movl    R10, RDI	# spill
3d8     addl    R10, #-3	# int
3dc     cmpl    RDI, R10
3df     movl    RCX, #-2147483648	# int
3e4     cmovll R10, RCX	# signed, int
3e8     cmpl    RBX, R10
3eb     jge     B68  P=0.000001 C=-1.000000

3f1     B52: #	out( B93 B53 ) <- in( B51 )  Freq: 0.833307
3f1     # castII of RBX
3f1     cmpl    RBX, [RSP + #0 (32-bit)]	# unsigned
3f4     jnb,u   B93  P=0.000001 C=-1.000000

3fa     B53: #	out( B94 B54 ) <- in( B52 )  Freq: 0.833306
        nop 	# 6 bytes pad for loops and calls
400     cmpl    RBX, [RSP + #0 (32-bit)]	# unsigned
403     jnb,u   B94  P=0.000001 C=-1.000000

409     B54: #	out( B95 B55 ) <- in( B53 )  Freq: 0.833305
409     cmpl    RBX, RAX	# unsigned
40b     jnb,u   B95  P=0.000001 C=-1.000000

411     B55: #	out( B96 B56 ) <- in( B54 )  Freq: 0.833305
411     cmpl    RBX, RAX	# unsigned
413     jnb,u   B96  P=0.000001 C=-1.000000

419     B56: #	out( B97 B57 ) <- in( B55 )  Freq: 0.833304
419     cmpl    RBX, RBP	# unsigned
        nop 	# 5 bytes pad for loops and calls
420     jnb,u   B97  P=0.000001 C=-1.000000

426     B57: #	out( B98 B58 ) <- in( B56 )  Freq: 0.833303
426     cmpl    RBX, RBP	# unsigned
428     jnb,u   B98  P=0.000001 C=-1.000000

42e     B58: #	out( B99 B59 ) <- in( B57 )  Freq: 0.833302
42e     cmpl    RBX, RBP	# unsigned
430     jnb,u   B99  P=0.000001 C=-1.000000

436     B59: #	out( B100 B60 ) <- in( B58 )  Freq: 0.833301
436     movl    RDX, RBX	# spill
438     addl    RDX, #3	# int
43b     cmpl    RDX, RBP	# unsigned
        nop 	# 3 bytes pad for loops and calls
440     jnb,u   B100  P=0.000001 C=-1.000000

446     B60: #	out( B101 B61 ) <- in( B59 )  Freq: 0.8333
446     cmpl    RBX, RAX	# unsigned
448     jnb,u   B101  P=0.000001 C=-1.000000

44e     B61: #	out( B102 B62 ) <- in( B60 )  Freq: 0.8333
44e     cmpl    RDX, RAX	# unsigned
450     jnb,u   B102  P=0.000001 C=-1.000000

456     B62: #	out( B103 B63 ) <- in( B61 )  Freq: 0.833299
456     cmpl    RBX, [RSP + #0 (32-bit)]	# unsigned
459     jnb,u   B103  P=0.000001 C=-1.000000

45f     B63: #	out( B104 B64 ) <- in( B62 )  Freq: 0.833298
        nop 	# 1 bytes pad for loops and calls
460     cmpl    RDX, [RSP + #0 (32-bit)]	# unsigned
463     jnb,u   B104  P=0.000001 C=-1.000000

469     B64: #	out( B65 ) <- in( B63 )  Freq: 0.833297
469     movl    RCX, #4000	# int

46e     B65: #	out( B66 ) <- in( B64 B67 ) Loop( B65-B67 ) Freq: 4.99978
46e     movl    RSI, R10	# spill
471     subl    RSI, RBX	# int
473     cmpl    R10, RBX
476     cmovll RSI, R8	# signed, int
47a     cmpl    RSI, #4000	# unsigned
480     cmovlnbe RSI, RCX	# unsigned, int
483     addl    RSI, RBX	# int
        nop 	# 11 bytes pad for loops and calls

490     B66: #	out( B66 B67 ) <- in( B65 B66 ) Loop( B66-B66 inner main of N407 strip mined) Freq: 29.9987
490     load_vector XMM0,[R9 + #16 + RBX << #2]
497     vaddps  XMM0,XMM0,[R13 + #16 + RBX << #2]	! add packedF
49e     store_vector [R11 + #16 + RBX << #2],XMM0
	
4a5     addl    RBX, #4	# int
4a8     cmpl    RBX, RSI
4aa     jl,s   B66	# loop end  P=0.833333 C=145.000000

4ac     B67: #	out( B65 B68 ) <- in( B66 )  Freq: 4.99978
4ac     movq    RDX, [R15 + #912 (32-bit)]	# ptr
4b3     testl   rax, [RDX]	# Safepoint: poll for GC        # loop::doSum @ bci:56 (line 11) L[0]=_ L[1]=R11 L[2]=R9 L[3]=R13 L[4]=RBX
        # OopMap {r11=Oop r9=Oop r13=Oop off=1203/0x4b3}
4b5     cmpl    RBX, R10
4b8     jl,s   B65  P=0.833333 C=145.000000

4ba     B68: #	out( B71 B69 ) <- in( B51 B67 )  Freq: 0.833298
4ba     cmpl    RBX, RDI
4bc     jge,s   B71  P=0.500000 C=-1.000000

4be     B69: #	out( B70 ) <- in( B68 )  Freq: 0.416649
4be     # castII of RBX
        nop 	# 2 bytes pad for loops and calls

4c0     B70: #	out( B70 B71 ) <- in( B69 B70 ) Loop( B70-B70 inner post of N513) Freq: 0.833298
4c0     movss   XMM1, [R13 + #16 + RBX << #2]	# float
4c7     vaddss  XMM0, XMM1, [R9 + #16 + RBX << #2]
4ce     movss   [R11 + #16 + RBX << #2], XMM0	# float
4d5     incl    RBX	# int
4d7     cmpl    RBX, RDI
4d9     jl,s   B70	# loop end  P=0.500000 C=145.000000

4db     B71: #	out( N895 ) <- in( B70 B68 B42 )  Freq: 0.999961
4db     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

4f0     ret

4f1     B72: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
4f1     xorl    R11, R11	# ptr
4f4     jmp     B4

4f9     B73: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
4f9     xorl    R9, R9	# ptr
        nop 	# 4 bytes pad for loops and calls
500     jmp     B7

505     B74: #	out( B10 ) <- in( B7 )  Freq: 0.000999985
505     xorl    R13, R13	# ptr
508     jmp     B10

50d     B75: #	out( N895 ) <- in( B38 B15 )  Freq: 3.03676e-06
50d     movl    RSI, #-28	# int
512     movq    [rsp + #8], R13	# spill
517     movq    [rsp + #24], R11	# spill
51c     movl    [rsp + #20], RBX	# spill
520     movq    [rsp + #32], R9	# spill
525     movl    [rsp + #40], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
52c     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # loop::doSum @ bci:19 (line 10) L[0]=_ L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #8 L[4]=rsp + #20 STK[0]=rsp + #24 STK[1]=rsp + #40 STK[2]=rsp + #32 STK[3]=rsp + #20
        # OopMap {[8]=Oop [24]=Oop [32]=Oop off=1332/0x534}
534     stop	# ShouldNotReachHere

548     B76: #	out( B78 ) <- in( B16 )  Freq: 2.02451e-06
548     movdl   RBP, XMM2	# spill
54c     jmp,s   B78

54e     B77: #	out( B78 ) <- in( B39 )  Freq: 1.01224e-06
54e     movdl   RBP, XMM1	# spill

552     B78: #	out( N895 ) <- in( B77 B76 )  Freq: 3.03675e-06
552     movl    RSI, #-28	# int
557     movq    [rsp + #8], R9	# spill
55c     movq    [rsp + #32], R11	# spill
561     movl    [rsp + #28], RBX	# spill
565     movq    [rsp + #40], R13	# spill
56a     movl    [rsp + #48], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
570     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # loop::doSum @ bci:23 (line 10) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #8 L[3]=rsp + #40 L[4]=rsp + #28 STK[0]=rsp + #32 STK[1]=rsp + #48 STK[2]=RBP STK[3]=rsp + #40 STK[4]=rsp + #28
        # OopMap {[8]=Oop [32]=Oop [40]=Oop off=1400/0x578}
578     stop	# ShouldNotReachHere

58c     B79: #	out( B81 ) <- in( B17 )  Freq: 2.02451e-06
58c     movdl   RBP, XMM2	# spill
590     jmp,s   B81

592     B80: #	out( B81 ) <- in( B40 )  Freq: 1.01224e-06
592     movdl   RBP, XMM1	# spill

596     B81: #	out( N895 ) <- in( B80 B79 )  Freq: 3.03675e-06
596     movl    RSI, #-28	# int
59b     movq    [rsp + #8], R9	# spill
5a0     movq    [rsp + #16], R13	# spill
5a5     movq    [rsp + #32], R11	# spill
5aa     movl    [rsp + #28], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
5b0     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # loop::doSum @ bci:25 (line 10) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #28 STK[0]=rsp + #32 STK[1]=rsp + #28 STK[2]=RBP
        # OopMap {[8]=Oop [16]=Oop [32]=Oop off=1464/0x5b8}
5b8     stop	# ShouldNotReachHere

5cc     B82: #	out( N895 ) <- in( B20 )  Freq: 1.01225e-06
5cc     stop	# ShouldNotReachHere

5e0     B83: #	out( N895 ) <- in( B21 )  Freq: 1.01225e-06
5e0     stop	# ShouldNotReachHere

5f4     B84: #	out( N895 ) <- in( B22 )  Freq: 1.01225e-06
5f4     stop	# ShouldNotReachHere

608     B85: #	out( N895 ) <- in( B23 )  Freq: 1.01225e-06
608     stop	# ShouldNotReachHere

61c     B86: #	out( N895 ) <- in( B24 )  Freq: 1.01225e-06
61c     stop	# ShouldNotReachHere

630     B87: #	out( N895 ) <- in( B25 )  Freq: 1.01225e-06
630     stop	# ShouldNotReachHere

644     B88: #	out( N895 ) <- in( B26 )  Freq: 1.01225e-06
644     stop	# ShouldNotReachHere

658     B89: #	out( N895 ) <- in( B27 )  Freq: 1.01225e-06
658     stop	# ShouldNotReachHere

66c     B90: #	out( N895 ) <- in( B28 )  Freq: 1.01225e-06
66c     stop	# ShouldNotReachHere

680     B91: #	out( N895 ) <- in( B2 B5 B8 )  Freq: 2.997e-06
680     movl    RSI, #-115	# int
685     movq    [rsp + #0], R13	# spill
689     movl    [rsp + #8], RBX	# spill
68d     movq    [rsp + #16], R14	# spill
        nop 	# 2 bytes pad for loops and calls
694     call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret' debug_id='0')
        # loop::doSum @ bci:3 (line 9) L[0]=_ L[1]=rsp + #16 L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #8
        # OopMap {rbp=Oop [0]=Oop [16]=Oop off=1692/0x69c}
69c     stop	# ShouldNotReachHere

6b0     B92: #	out( N895 ) <- in( B45 B46 B43 B44 B47 B48 )  Freq: 5.06626e-06
6b0     movl    RSI, #-138	# int
6b5     movq    RBP, R11	# spill
6b8     movq    [rsp + #0], R9	# spill
6bc     movq    [rsp + #8], R13	# spill
6c1     movl    [rsp + #20], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
6c8     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # loop::doSum @ bci:37 (line 11) L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #8 L[4]=rsp + #20 STK[0]=rsp + #20 STK[1]=rsp + #32
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=1744/0x6d0}
6d0     stop	# ShouldNotReachHere

6e4     B93: #	out( N895 ) <- in( B52 )  Freq: 8.44373e-07
6e4     stop	# ShouldNotReachHere

6f8     B94: #	out( N895 ) <- in( B53 )  Freq: 8.44372e-07
6f8     stop	# ShouldNotReachHere

70c     B95: #	out( N895 ) <- in( B54 )  Freq: 8.44371e-07
70c     stop	# ShouldNotReachHere

720     B96: #	out( N895 ) <- in( B55 )  Freq: 8.4437e-07
720     stop	# ShouldNotReachHere

734     B97: #	out( N895 ) <- in( B56 )  Freq: 8.44369e-07
734     stop	# ShouldNotReachHere

748     B98: #	out( N895 ) <- in( B57 )  Freq: 8.44368e-07
748     stop	# ShouldNotReachHere

75c     B99: #	out( N895 ) <- in( B58 )  Freq: 8.44367e-07
75c     stop	# ShouldNotReachHere

770     B100: #	out( N895 ) <- in( B59 )  Freq: 8.44367e-07
770     stop	# ShouldNotReachHere

784     B101: #	out( N895 ) <- in( B60 )  Freq: 8.44366e-07
784     stop	# ShouldNotReachHere

798     B102: #	out( N895 ) <- in( B61 )  Freq: 8.44365e-07
798     stop	# ShouldNotReachHere

7ac     B103: #	out( N895 ) <- in( B62 )  Freq: 8.44364e-07
7ac     stop	# ShouldNotReachHere

7c0     B104: #	out( N895 ) <- in( B63 )  Freq: 8.44363e-07
7c0     stop	# ShouldNotReachHere

7d4     B105: #	out( N895 ) <- in( B12 B10 B11 )  Freq: 3.03982e-06
7d4     movl    RSI, #-66	# int
7d9     movq    RBP, R11	# spill
7dc     movq    [rsp + #0], R9	# spill
7e0     movq    [rsp + #8], R13	# spill
7e5     movl    [rsp + #16], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
7ec     call,static  wrapper for: uncommon_trap(reason='profile_predicate' action='maybe_recompile' debug_id='0')
        # loop::doSum @ bci:3 (line 9) L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #8 L[4]=rsp + #16
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=2036/0x7f4}
7f4     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    1207   24 %           loop::doSum @ 3 (60 bytes)
 total in heap  [0x00007ff924cd5d90,0x00007ff924cd6db0] = 4128
 relocation     [0x00007ff924cd5f08,0x00007ff924cd6080] = 376
 main code      [0x00007ff924cd6080,0x00007ff924cd68a0] = 2080
 stub code      [0x00007ff924cd68a0,0x00007ff924cd68b8] = 24
 oops           [0x00007ff924cd68b8,0x00007ff924cd68c0] = 8
 metadata       [0x00007ff924cd68c0,0x00007ff924cd68d0] = 16
 scopes data    [0x00007ff924cd68d0,0x00007ff924cd69e8] = 280
 scopes pcs     [0x00007ff924cd69e8,0x00007ff924cd6d88] = 928
 dependencies   [0x00007ff924cd6d88,0x00007ff924cd6d90] = 8
 nul chk table  [0x00007ff924cd6d90,0x00007ff924cd6db0] = 32

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007ff8c480e438} 'doSum' '([F[F[F)V' in 'loop'
 ;; N895: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007ff924cd6080:   callq  0x00007ff928ffd794           ;   {runtime_call os::breakpoint()}
  0x00007ff924cd6085:   nop
  0x00007ff924cd6086:   nop
  0x00007ff924cd6087:   nop
  0x00007ff924cd6088:   nop
  0x00007ff924cd6089:   nop
  0x00007ff924cd608a:   nop
  0x00007ff924cd608b:   nop
  0x00007ff924cd608c:   nop
  0x00007ff924cd608d:   nop
  0x00007ff924cd608e:   nop
  0x00007ff924cd608f:   nop
 ;; B1: #	out( B72 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007ff924cd6090:   mov    %eax,-0x16000(%rsp)
  0x00007ff924cd6097:   push   %rbp
  0x00007ff924cd6098:   sub    $0x50,%rsp
  0x00007ff924cd609c:   mov    0x18(%rsi),%r14
  0x00007ff924cd60a0:   mov    0x10(%rsi),%rbp
  0x00007ff924cd60a4:   mov    (%rsi),%ebx
  0x00007ff924cd60a6:   mov    0x8(%rsi),%r13
  0x00007ff924cd60aa:   mov    %rsi,%rdi
  0x00007ff924cd60ad:   vzeroupper 
  0x00007ff924cd60b0:   movabs $0x7ff9290fd1ca,%r10
  0x00007ff924cd60ba:   callq  *%r10
  0x00007ff924cd60bd:   nop
  0x00007ff924cd60be:   nop
  0x00007ff924cd60bf:   nop
  0x00007ff924cd60c0:   test   %r14,%r14
  0x00007ff924cd60c3:   je     0x00007ff924cd6571
 ;; B2: #	out( B91 B3 ) <- in( B1 )  Freq: 0.999
  0x00007ff924cd60c9:   mov    0x8(%r14),%r10d
  0x00007ff924cd60cd:   cmp    $0x403e0,%r10d               ;   {metadata({type array float})}
  0x00007ff924cd60d4:   jne    0x00007ff924cd6700
 ;; B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
  0x00007ff924cd60da:   mov    %r14,%r11
 ;; B4: #	out( B73 B5 ) <- in( B3 B72 )  Freq: 0.999999
  0x00007ff924cd60dd:   nop
  0x00007ff924cd60de:   nop
  0x00007ff924cd60df:   nop
  0x00007ff924cd60e0:   test   %rbp,%rbp
  0x00007ff924cd60e3:   je     0x00007ff924cd6579
 ;; B5: #	out( B91 B6 ) <- in( B4 )  Freq: 0.998999
  0x00007ff924cd60e9:   mov    0x8(%rbp),%r8d
  0x00007ff924cd60ed:   cmp    $0x403e0,%r8d                ;   {metadata({type array float})}
  0x00007ff924cd60f4:   jne    0x00007ff924cd6700
 ;; B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
  0x00007ff924cd60fa:   mov    %rbp,%r9
 ;; B7: #	out( B74 B8 ) <- in( B6 B73 )  Freq: 0.999998
  0x00007ff924cd60fd:   nop
  0x00007ff924cd60fe:   nop
  0x00007ff924cd60ff:   nop
  0x00007ff924cd6100:   test   %r13,%r13
  0x00007ff924cd6103:   je     0x00007ff924cd6585
 ;; B8: #	out( B91 B9 ) <- in( B7 )  Freq: 0.998998
  0x00007ff924cd6109:   mov    0x8(%r13),%r10d
  0x00007ff924cd610d:   cmp    $0x403e0,%r10d               ;   {metadata({type array float})}
  0x00007ff924cd6114:   jne    0x00007ff924cd6700           ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@3 (line 9)
 ;; B9: #	out( B10 ) <- in( B8 )  Freq: 0.998997
 ;; B10: #	out( B105 B11 ) <- in( B9 B74 )  Freq: 0.999997
  0x00007ff924cd611a:   nop
  0x00007ff924cd611b:   nop
  0x00007ff924cd611c:   nop
  0x00007ff924cd611d:   nop
  0x00007ff924cd611e:   nop
  0x00007ff924cd611f:   nop
  0x00007ff924cd6120:   mov    0xc(%r9),%ebp                ; implicit exception: dispatches to 0x00007ff924cd6854
                                                            ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@19 (line 10)
 ;; B11: #	out( B105 B12 ) <- in( B10 )  Freq: 0.999996
  0x00007ff924cd6124:   mov    0xc(%r13),%eax               ; implicit exception: dispatches to 0x00007ff924cd6854
                                                            ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
 ;; B12: #	out( B105 B13 ) <- in( B11 )  Freq: 0.999995
  0x00007ff924cd6128:   mov    0xc(%r11),%ecx               ; implicit exception: dispatches to 0x00007ff924cd6854
                                                            ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@25 (line 10)
 ;; B13: #	out( B42 B14 ) <- in( B12 )  Freq: 0.999994
  0x00007ff924cd612c:   mov    %r11d,%r10d
  0x00007ff924cd612f:   mov    %ecx,(%rsp)
  0x00007ff924cd6132:   movslq %ecx,%r8
  0x00007ff924cd6135:   mov    %r8,0x8(%rsp)
  0x00007ff924cd613a:   shr    $0x2,%r10d
  0x00007ff924cd613e:   vmovd  %r10d,%xmm0
  0x00007ff924cd6143:   movslq %eax,%r10
  0x00007ff924cd6146:   mov    %r10,0x10(%rsp)
  0x00007ff924cd614b:   movslq %ebp,%r10
  0x00007ff924cd614e:   mov    %r10,0x18(%rsp)
  0x00007ff924cd6153:   movabs $0x10157c150,%r10            ;   {oop(a 'java/lang/Class'{0x000000010157c150} = 'loop')}
  0x00007ff924cd615d:   mov    0x70(%r10),%r10d             ;*getstatic LEN {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@34 (line 11)
  0x00007ff924cd6161:   mov    %r10d,0x20(%rsp)
  0x00007ff924cd6166:   add    $0xfffffffb,%r10d            ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@29 (line 9)
  0x00007ff924cd616a:   xor    %r8d,%r8d
  0x00007ff924cd616d:   cmp    %r10d,%ebx
  0x00007ff924cd6170:   jge    0x00007ff924cd63b7           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@10 (line 9)
 ;; B14: #	out( B15 ) <- in( B13 )  Freq: 0.998995
  0x00007ff924cd6176:   vmovd  %xmm0,%edi
  0x00007ff924cd617a:   and    $0xf,%edi
  0x00007ff924cd617d:   mov    %ebx,%ecx
  0x00007ff924cd617f:   inc    %ecx
  0x00007ff924cd6181:   test   %ecx,%ecx
  0x00007ff924cd6183:   cmovl  %r8d,%ecx
  0x00007ff924cd6187:   test   %ecx,%ecx
  0x00007ff924cd6189:   cmovl  %r8d,%ecx
  0x00007ff924cd618d:   test   %ecx,%ecx
  0x00007ff924cd618f:   cmovl  %r8d,%ecx
  0x00007ff924cd6193:   cmp    %r10d,%ecx
  0x00007ff924cd6196:   cmovg  %r10d,%ecx
  0x00007ff924cd619a:   add    %ecx,%edi
  0x00007ff924cd619c:   mov    $0xc,%esi
  0x00007ff924cd61a1:   sub    %edi,%esi
  0x00007ff924cd61a3:   and    $0xf,%esi
  0x00007ff924cd61a6:   add    %ecx,%esi
  0x00007ff924cd61a8:   cmp    %r10d,%esi
  0x00007ff924cd61ab:   cmovg  %r10d,%esi                   ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@25 (line 10)
 ;; B15: #	out( B75 B16 ) <- in( B14 B18 ) Loop( B15-B18 inner pre of N767) Freq: 1.99798
  0x00007ff924cd61af:   cmp    %ebp,%ebx
  0x00007ff924cd61b1:   jae    0x00007ff924cd658d
 ;; B16: #	out( B76 B17 ) <- in( B15 )  Freq: 1.99798
  0x00007ff924cd61b7:   vmovss 0x10(%r9,%rbx,4),%xmm2       ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@19 (line 10)
  0x00007ff924cd61be:   nop
  0x00007ff924cd61bf:   nop
  0x00007ff924cd61c0:   cmp    %eax,%ebx
  0x00007ff924cd61c2:   jae    0x00007ff924cd65c8
 ;; B17: #	out( B79 B18 ) <- in( B16 )  Freq: 1.99798
  0x00007ff924cd61c8:   vaddss 0x10(%r13,%rbx,4),%xmm2,%xmm2;*fadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@24 (line 10)
  0x00007ff924cd61cf:   cmp    (%rsp),%ebx
  0x00007ff924cd61d2:   jae    0x00007ff924cd660c
 ;; B18: #	out( B15 B19 ) <- in( B17 )  Freq: 1.99798
  0x00007ff924cd61d8:   vmovss %xmm2,0x10(%r11,%rbx,4)      ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@25 (line 10)
  0x00007ff924cd61df:   inc    %ebx                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@26 (line 9)
  0x00007ff924cd61e1:   cmp    %esi,%ebx
  0x00007ff924cd61e3:   jl     0x00007ff924cd61af           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@10 (line 9)
 ;; B19: #	out( B36 B20 ) <- in( B18 )  Freq: 0.998989
  0x00007ff924cd61e5:   movslq %r10d,%rcx
  0x00007ff924cd61e8:   cmp    0x18(%rsp),%rcx
  0x00007ff924cd61ed:   mov    %r10d,%edi
  0x00007ff924cd61f0:   cmovg  %ebp,%edi
  0x00007ff924cd61f3:   movslq %edi,%rcx
  0x00007ff924cd61f6:   cmp    0x10(%rsp),%rcx
  0x00007ff924cd61fb:   cmovg  %eax,%edi
  0x00007ff924cd61fe:   movslq %edi,%rcx
  0x00007ff924cd6201:   cmp    0x8(%rsp),%rcx
  0x00007ff924cd6206:   cmovg  (%rsp),%edi
  0x00007ff924cd620a:   mov    %edi,%ecx
  0x00007ff924cd620c:   add    $0xffffffc1,%ecx
  0x00007ff924cd620f:   cmp    %ecx,%edi
  0x00007ff924cd6211:   mov    $0x80000000,%esi
  0x00007ff924cd6216:   cmovl  %esi,%ecx
  0x00007ff924cd6219:   cmp    %ecx,%ebx
  0x00007ff924cd621b:   nop
  0x00007ff924cd621c:   nop
  0x00007ff924cd621d:   nop
  0x00007ff924cd621e:   nop
  0x00007ff924cd621f:   nop
  0x00007ff924cd6220:   jge    0x00007ff924cd6374
 ;; B20: #	out( B82 B21 ) <- in( B19 )  Freq: 0.998988
  0x00007ff924cd6226:   cmp    %ebp,%ebx
  0x00007ff924cd6228:   jae    0x00007ff924cd664c
 ;; B21: #	out( B83 B22 ) <- in( B20 )  Freq: 0.998987
  0x00007ff924cd622e:   cmp    %eax,%ebx
  0x00007ff924cd6230:   jae    0x00007ff924cd6660
 ;; B22: #	out( B84 B23 ) <- in( B21 )  Freq: 0.998986
  0x00007ff924cd6236:   cmp    (%rsp),%ebx
  0x00007ff924cd6239:   jae    0x00007ff924cd6674
 ;; B23: #	out( B85 B24 ) <- in( B22 )  Freq: 0.998985
  0x00007ff924cd623f:   mov    %ebx,%esi
  0x00007ff924cd6241:   add    $0x3f,%esi
  0x00007ff924cd6244:   cmp    (%rsp),%esi
  0x00007ff924cd6247:   jae    0x00007ff924cd6688
 ;; B24: #	out( B86 B25 ) <- in( B23 )  Freq: 0.998984
  0x00007ff924cd624d:   cmp    (%rsp),%ebx
  0x00007ff924cd6250:   jae    0x00007ff924cd669c
 ;; B25: #	out( B87 B26 ) <- in( B24 )  Freq: 0.998983
  0x00007ff924cd6256:   cmp    %eax,%esi
  0x00007ff924cd6258:   jae    0x00007ff924cd66b0
 ;; B26: #	out( B88 B27 ) <- in( B25 )  Freq: 0.998982
  0x00007ff924cd625e:   nop
  0x00007ff924cd625f:   nop
  0x00007ff924cd6260:   cmp    %eax,%ebx
  0x00007ff924cd6262:   jae    0x00007ff924cd66c4
 ;; B27: #	out( B89 B28 ) <- in( B26 )  Freq: 0.998981
  0x00007ff924cd6268:   cmp    %ebp,%esi
  0x00007ff924cd626a:   jae    0x00007ff924cd66d8
 ;; B28: #	out( B90 B29 ) <- in( B27 )  Freq: 0.99898
  0x00007ff924cd6270:   cmp    %ebp,%ebx
  0x00007ff924cd6272:   jae    0x00007ff924cd66ec
 ;; B29: #	out( B30 ) <- in( B28 )  Freq: 0.998979
  0x00007ff924cd6278:   mov    $0xfa00,%esi
 ;; B30: #	out( B31 ) <- in( B29 B32 ) Loop( B30-B32 ) Freq: 1000.24
  0x00007ff924cd627d:   mov    %ecx,%edx
  0x00007ff924cd627f:   sub    %ebx,%edx
  0x00007ff924cd6281:   cmp    %ebx,%ecx
  0x00007ff924cd6283:   cmovl  %r8d,%edx
  0x00007ff924cd6287:   cmp    $0xfa00,%edx
  0x00007ff924cd628d:   cmova  %esi,%edx
  0x00007ff924cd6290:   add    %ebx,%edx                    ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@19 (line 10)
 ;; B31: #	out( B31 B32 ) <- in( B30 B31 ) Loop( B31-B31 inner main of N271 strip mined) Freq: 1.00151e+06
  0x00007ff924cd6292:   vmovdqu32 0x10(%r13,%rbx,4),%zmm1
  0x00007ff924cd629d:   vaddps 0x10(%r9,%rbx,4),%zmm1,%zmm1
  0x00007ff924cd62a8:   vmovdqu32 %zmm1,0x10(%r11,%rbx,4)
  0x00007ff924cd62b3:   movslq %ebx,%r14
  0x00007ff924cd62b6:   vmovdqu32 0x50(%r13,%r14,4),%zmm1
  0x00007ff924cd62c1:   vaddps 0x50(%r9,%r14,4),%zmm1,%zmm1
  0x00007ff924cd62cc:   vmovdqu32 %zmm1,0x50(%r11,%r14,4)
  0x00007ff924cd62d7:   vmovdqu32 0x90(%r13,%r14,4),%zmm1
  0x00007ff924cd62e2:   vaddps 0x90(%r9,%r14,4),%zmm1,%zmm1
  0x00007ff924cd62ed:   vmovdqu32 %zmm1,0x90(%r11,%r14,4)
  0x00007ff924cd62f8:   vmovdqu32 0xd0(%r13,%r14,4),%zmm1
  0x00007ff924cd6303:   vaddps 0xd0(%r9,%r14,4),%zmm1,%zmm1
  0x00007ff924cd630e:   vmovdqu32 %zmm1,0xd0(%r11,%r14,4)   ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@25 (line 10)
  0x00007ff924cd6319:   add    $0x40,%ebx                   ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@26 (line 9)
  0x00007ff924cd631c:   nop
  0x00007ff924cd631d:   nop
  0x00007ff924cd631e:   nop
  0x00007ff924cd631f:   nop
  0x00007ff924cd6320:   cmp    %edx,%ebx
  0x00007ff924cd6322:   jl     0x00007ff924cd6292           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@29 (line 9)
 ;; B32: #	out( B30 B33 ) <- in( B31 )  Freq: 1000.24
  0x00007ff924cd6328:   mov    0x390(%r15),%rdx             ; ImmutableOopMap {r11=Oop r9=Oop r13=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) loop::doSum@29 (line 9)
  0x00007ff924cd632f:   test   %eax,(%rdx)                  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@29 (line 9)
                                                            ;   {poll}
  0x00007ff924cd6331:   cmp    %ecx,%ebx
  0x00007ff924cd6333:   jl     0x00007ff924cd627d
 ;; B33: #	out( B36 B34 ) <- in( B32 )  Freq: 0.998979
  0x00007ff924cd6339:   mov    %edi,%ecx
  0x00007ff924cd633b:   add    $0xfffffff1,%ecx
  0x00007ff924cd633e:   cmp    %ecx,%edi
  0x00007ff924cd6340:   mov    $0x80000000,%edx
  0x00007ff924cd6345:   cmovl  %edx,%ecx
  0x00007ff924cd6348:   cmp    %ecx,%ebx
  0x00007ff924cd634a:   jge    0x00007ff924cd6374           ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@19 (line 10)
 ;; B34: #	out( B35 ) <- in( B33 )  Freq: 0.499489
 ;; B35: #	out( B35 B36 ) <- in( B34 B35 ) Loop( B35-B35 inner post of N2039) Freq: 0.998979
  0x00007ff924cd634c:   vmovdqu32 0x10(%r13,%rbx,4),%zmm1
  0x00007ff924cd6357:   vaddps 0x10(%r9,%rbx,4),%zmm1,%zmm1
  0x00007ff924cd6362:   vmovdqu32 %zmm1,0x10(%r11,%rbx,4)   ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@25 (line 10)
  0x00007ff924cd636d:   add    $0x10,%ebx                   ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@26 (line 9)
  0x00007ff924cd6370:   cmp    %ecx,%ebx
  0x00007ff924cd6372:   jl     0x00007ff924cd634c           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@10 (line 9)
 ;; B36: #	out( B42 B37 ) <- in( B19 B35 B33 )  Freq: 0.99898
  0x00007ff924cd6374:   cmp    %r10d,%ebx
  0x00007ff924cd6377:   jge    0x00007ff924cd63b7
 ;; B37: #	out( B38 ) <- in( B36 )  Freq: 0.49949
  0x00007ff924cd637d:   nop
  0x00007ff924cd637e:   nop
  0x00007ff924cd637f:   nop                                 ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@25 (line 10)
 ;; B38: #	out( B75 B39 ) <- in( B37 B41 ) Loop( B38-B41 inner post of N767) Freq: 0.998977
  0x00007ff924cd6380:   cmp    %ebp,%ebx
  0x00007ff924cd6382:   jae    0x00007ff924cd658d
 ;; B39: #	out( B77 B40 ) <- in( B38 )  Freq: 0.998976
  0x00007ff924cd6388:   vmovss 0x10(%r9,%rbx,4),%xmm1       ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@19 (line 10)
  0x00007ff924cd638f:   cmp    %eax,%ebx
  0x00007ff924cd6391:   jae    0x00007ff924cd65ce
 ;; B40: #	out( B80 B41 ) <- in( B39 )  Freq: 0.998975
  0x00007ff924cd6397:   vaddss 0x10(%r13,%rbx,4),%xmm1,%xmm1;*fadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@24 (line 10)
  0x00007ff924cd639e:   nop
  0x00007ff924cd639f:   nop
  0x00007ff924cd63a0:   cmp    (%rsp),%ebx
  0x00007ff924cd63a3:   jae    0x00007ff924cd6612
 ;; B41: #	out( B38 B42 ) <- in( B40 )  Freq: 0.998974
  0x00007ff924cd63a9:   vmovss %xmm1,0x10(%r11,%rbx,4)      ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@25 (line 10)
  0x00007ff924cd63b0:   inc    %ebx                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@26 (line 9)
  0x00007ff924cd63b2:   cmp    %r10d,%ebx
  0x00007ff924cd63b5:   jl     0x00007ff924cd6380           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@10 (line 9)
 ;; B42: #	out( B71 B43 ) <- in( B13 B41 B36 )  Freq: 0.999976
  0x00007ff924cd63b7:   cmp    0x20(%rsp),%ebx
  0x00007ff924cd63bb:   nop
  0x00007ff924cd63bc:   nop
  0x00007ff924cd63bd:   nop
  0x00007ff924cd63be:   nop
  0x00007ff924cd63bf:   nop
  0x00007ff924cd63c0:   jge    0x00007ff924cd655b           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@37 (line 11)
 ;; B43: #	out( B92 B44 ) <- in( B42 )  Freq: 0.833313
  0x00007ff924cd63c6:   cmp    %ebp,%ebx
  0x00007ff924cd63c8:   jae    0x00007ff924cd6730
 ;; B44: #	out( B92 B45 ) <- in( B43 )  Freq: 0.833312
  0x00007ff924cd63ce:   movslq 0x20(%rsp),%r10
  0x00007ff924cd63d3:   dec    %r10
  0x00007ff924cd63d6:   nop
  0x00007ff924cd63d7:   nop
  0x00007ff924cd63d8:   nop
  0x00007ff924cd63d9:   nop
  0x00007ff924cd63da:   nop
  0x00007ff924cd63db:   nop
  0x00007ff924cd63dc:   nop
  0x00007ff924cd63dd:   nop
  0x00007ff924cd63de:   nop
  0x00007ff924cd63df:   nop
  0x00007ff924cd63e0:   cmp    0x18(%rsp),%r10
  0x00007ff924cd63e5:   jae    0x00007ff924cd6730
 ;; B45: #	out( B92 B46 ) <- in( B44 )  Freq: 0.833311
  0x00007ff924cd63eb:   cmp    %eax,%ebx
  0x00007ff924cd63ed:   jae    0x00007ff924cd6730
 ;; B46: #	out( B92 B47 ) <- in( B45 )  Freq: 0.833311
  0x00007ff924cd63f3:   cmp    0x10(%rsp),%r10
  0x00007ff924cd63f8:   jae    0x00007ff924cd6730
 ;; B47: #	out( B92 B48 ) <- in( B46 )  Freq: 0.83331
  0x00007ff924cd63fe:   nop
  0x00007ff924cd63ff:   nop
  0x00007ff924cd6400:   cmp    (%rsp),%ebx
  0x00007ff924cd6403:   jae    0x00007ff924cd6730
 ;; B48: #	out( B92 B49 ) <- in( B47 )  Freq: 0.833309
  0x00007ff924cd6409:   cmp    0x8(%rsp),%r10
  0x00007ff924cd640e:   jae    0x00007ff924cd6730
 ;; B49: #	out( B50 ) <- in( B48 )  Freq: 0.833308
  0x00007ff924cd6414:   vmovd  %xmm0,%r10d
  0x00007ff924cd6419:   and    $0x3,%r10d
  0x00007ff924cd641d:   add    %ebx,%r10d
  0x00007ff924cd6420:   mov    $0xffffffff,%ecx
  0x00007ff924cd6425:   sub    %r10d,%ecx
  0x00007ff924cd6428:   and    $0x3,%ecx
  0x00007ff924cd642b:   add    %ebx,%ecx
  0x00007ff924cd642d:   inc    %ecx
  0x00007ff924cd642f:   cmp    0x20(%rsp),%ecx
  0x00007ff924cd6433:   mov    0x20(%rsp),%edi
  0x00007ff924cd6437:   cmovg  %edi,%ecx                    ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@40 (line 12)
 ;; B50: #	out( B50 B51 ) <- in( B49 B50 ) Loop( B50-B50 inner pre of N513) Freq: 1.66662
  0x00007ff924cd643a:   vmovss 0x10(%r13,%rbx,4),%xmm1
  0x00007ff924cd6441:   vaddss 0x10(%r9,%rbx,4),%xmm1,%xmm0
  0x00007ff924cd6448:   vmovss %xmm0,0x10(%r11,%rbx,4)      ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@52 (line 12)
  0x00007ff924cd644f:   inc    %ebx                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@53 (line 11)
  0x00007ff924cd6451:   cmp    %ecx,%ebx
  0x00007ff924cd6453:   jl     0x00007ff924cd643a           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@37 (line 11)
 ;; B51: #	out( B68 B52 ) <- in( B50 )  Freq: 0.833308
  0x00007ff924cd6455:   mov    %edi,%r10d
  0x00007ff924cd6458:   add    $0xfffffffd,%r10d
  0x00007ff924cd645c:   cmp    %r10d,%edi
  0x00007ff924cd645f:   mov    $0x80000000,%ecx
  0x00007ff924cd6464:   cmovl  %ecx,%r10d
  0x00007ff924cd6468:   cmp    %r10d,%ebx
  0x00007ff924cd646b:   jge    0x00007ff924cd653a
 ;; B52: #	out( B93 B53 ) <- in( B51 )  Freq: 0.833307
  0x00007ff924cd6471:   cmp    (%rsp),%ebx
  0x00007ff924cd6474:   jae    0x00007ff924cd6764
 ;; B53: #	out( B94 B54 ) <- in( B52 )  Freq: 0.833306
  0x00007ff924cd647a:   nop
  0x00007ff924cd647b:   nop
  0x00007ff924cd647c:   nop
  0x00007ff924cd647d:   nop
  0x00007ff924cd647e:   nop
  0x00007ff924cd647f:   nop
  0x00007ff924cd6480:   cmp    (%rsp),%ebx
  0x00007ff924cd6483:   jae    0x00007ff924cd6778
 ;; B54: #	out( B95 B55 ) <- in( B53 )  Freq: 0.833305
  0x00007ff924cd6489:   cmp    %eax,%ebx
  0x00007ff924cd648b:   jae    0x00007ff924cd678c
 ;; B55: #	out( B96 B56 ) <- in( B54 )  Freq: 0.833305
  0x00007ff924cd6491:   cmp    %eax,%ebx
  0x00007ff924cd6493:   jae    0x00007ff924cd67a0
 ;; B56: #	out( B97 B57 ) <- in( B55 )  Freq: 0.833304
  0x00007ff924cd6499:   cmp    %ebp,%ebx
  0x00007ff924cd649b:   nop
  0x00007ff924cd649c:   nop
  0x00007ff924cd649d:   nop
  0x00007ff924cd649e:   nop
  0x00007ff924cd649f:   nop
  0x00007ff924cd64a0:   jae    0x00007ff924cd67b4
 ;; B57: #	out( B98 B58 ) <- in( B56 )  Freq: 0.833303
  0x00007ff924cd64a6:   cmp    %ebp,%ebx
  0x00007ff924cd64a8:   jae    0x00007ff924cd67c8
 ;; B58: #	out( B99 B59 ) <- in( B57 )  Freq: 0.833302
  0x00007ff924cd64ae:   cmp    %ebp,%ebx
  0x00007ff924cd64b0:   jae    0x00007ff924cd67dc
 ;; B59: #	out( B100 B60 ) <- in( B58 )  Freq: 0.833301
  0x00007ff924cd64b6:   mov    %ebx,%edx
  0x00007ff924cd64b8:   add    $0x3,%edx
  0x00007ff924cd64bb:   cmp    %ebp,%edx
  0x00007ff924cd64bd:   nop
  0x00007ff924cd64be:   nop
  0x00007ff924cd64bf:   nop
  0x00007ff924cd64c0:   jae    0x00007ff924cd67f0
 ;; B60: #	out( B101 B61 ) <- in( B59 )  Freq: 0.8333
  0x00007ff924cd64c6:   cmp    %eax,%ebx
  0x00007ff924cd64c8:   jae    0x00007ff924cd6804
 ;; B61: #	out( B102 B62 ) <- in( B60 )  Freq: 0.8333
  0x00007ff924cd64ce:   cmp    %eax,%edx
  0x00007ff924cd64d0:   jae    0x00007ff924cd6818
 ;; B62: #	out( B103 B63 ) <- in( B61 )  Freq: 0.833299
  0x00007ff924cd64d6:   cmp    (%rsp),%ebx
  0x00007ff924cd64d9:   jae    0x00007ff924cd682c
 ;; B63: #	out( B104 B64 ) <- in( B62 )  Freq: 0.833298
  0x00007ff924cd64df:   nop
  0x00007ff924cd64e0:   cmp    (%rsp),%edx
  0x00007ff924cd64e3:   jae    0x00007ff924cd6840
 ;; B64: #	out( B65 ) <- in( B63 )  Freq: 0.833297
  0x00007ff924cd64e9:   mov    $0xfa0,%ecx
 ;; B65: #	out( B66 ) <- in( B64 B67 ) Loop( B65-B67 ) Freq: 4.99978
  0x00007ff924cd64ee:   mov    %r10d,%esi
  0x00007ff924cd64f1:   sub    %ebx,%esi
  0x00007ff924cd64f3:   cmp    %ebx,%r10d
  0x00007ff924cd64f6:   cmovl  %r8d,%esi
  0x00007ff924cd64fa:   cmp    $0xfa0,%esi
  0x00007ff924cd6500:   cmova  %ecx,%esi
  0x00007ff924cd6503:   add    %ebx,%esi
  0x00007ff924cd6505:   nop
  0x00007ff924cd6506:   nop
  0x00007ff924cd6507:   nop
  0x00007ff924cd6508:   nop
  0x00007ff924cd6509:   nop
  0x00007ff924cd650a:   nop
  0x00007ff924cd650b:   nop
  0x00007ff924cd650c:   nop
  0x00007ff924cd650d:   nop
  0x00007ff924cd650e:   nop
  0x00007ff924cd650f:   nop                                 ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@40 (line 12)
 ;; B66: #	out( B66 B67 ) <- in( B65 B66 ) Loop( B66-B66 inner main of N407 strip mined) Freq: 29.9987
  0x00007ff924cd6510:   vmovdqu 0x10(%r9,%rbx,4),%xmm0
  0x00007ff924cd6517:   vaddps 0x10(%r13,%rbx,4),%xmm0,%xmm0
  0x00007ff924cd651e:   vmovdqu %xmm0,0x10(%r11,%rbx,4)     ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@52 (line 12)
  0x00007ff924cd6525:   add    $0x4,%ebx                    ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@53 (line 11)
  0x00007ff924cd6528:   cmp    %esi,%ebx
  0x00007ff924cd652a:   jl     0x00007ff924cd6510           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@56 (line 11)
 ;; B67: #	out( B65 B68 ) <- in( B66 )  Freq: 4.99978
  0x00007ff924cd652c:   mov    0x390(%r15),%rdx             ; ImmutableOopMap {r11=Oop r9=Oop r13=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) loop::doSum@56 (line 11)
  0x00007ff924cd6533:   test   %eax,(%rdx)                  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@56 (line 11)
                                                            ;   {poll}
  0x00007ff924cd6535:   cmp    %r10d,%ebx
  0x00007ff924cd6538:   jl     0x00007ff924cd64ee
 ;; B68: #	out( B71 B69 ) <- in( B51 B67 )  Freq: 0.833298
  0x00007ff924cd653a:   cmp    %edi,%ebx
  0x00007ff924cd653c:   jge    0x00007ff924cd655b
 ;; B69: #	out( B70 ) <- in( B68 )  Freq: 0.416649
  0x00007ff924cd653e:   nop
  0x00007ff924cd653f:   nop                                 ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@40 (line 12)
 ;; B70: #	out( B70 B71 ) <- in( B69 B70 ) Loop( B70-B70 inner post of N513) Freq: 0.833298
  0x00007ff924cd6540:   vmovss 0x10(%r13,%rbx,4),%xmm1
  0x00007ff924cd6547:   vaddss 0x10(%r9,%rbx,4),%xmm1,%xmm0
  0x00007ff924cd654e:   vmovss %xmm0,0x10(%r11,%rbx,4)      ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@52 (line 12)
  0x00007ff924cd6555:   inc    %ebx                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@53 (line 11)
  0x00007ff924cd6557:   cmp    %edi,%ebx
  0x00007ff924cd6559:   jl     0x00007ff924cd6540           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@37 (line 11)
 ;; B71: #	out( N895 ) <- in( B70 B68 B42 )  Freq: 0.999961
  0x00007ff924cd655b:   vzeroupper 
  0x00007ff924cd655e:   add    $0x50,%rsp
  0x00007ff924cd6562:   pop    %rbp
  0x00007ff924cd6563:   cmp    0x388(%r15),%rsp             ;   {poll_return}
  0x00007ff924cd656a:   ja     0x00007ff924cd6888
  0x00007ff924cd6570:   retq   
 ;; B72: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
  0x00007ff924cd6571:   xor    %r11d,%r11d
  0x00007ff924cd6574:   jmpq   0x00007ff924cd60dd
 ;; B73: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
  0x00007ff924cd6579:   xor    %r9d,%r9d
  0x00007ff924cd657c:   nop
  0x00007ff924cd657d:   nop
  0x00007ff924cd657e:   nop
  0x00007ff924cd657f:   nop
  0x00007ff924cd6580:   jmpq   0x00007ff924cd60fd
 ;; B74: #	out( B10 ) <- in( B7 )  Freq: 0.000999985
  0x00007ff924cd6585:   xor    %r13d,%r13d
  0x00007ff924cd6588:   jmpq   0x00007ff924cd611a
 ;; B75: #	out( N895 ) <- in( B38 B15 )  Freq: 3.03676e-06
  0x00007ff924cd658d:   mov    $0xffffffe4,%esi
  0x00007ff924cd6592:   mov    %r13,0x8(%rsp)
  0x00007ff924cd6597:   mov    %r11,0x18(%rsp)
  0x00007ff924cd659c:   mov    %ebx,0x14(%rsp)
  0x00007ff924cd65a0:   mov    %r9,0x20(%rsp)
  0x00007ff924cd65a5:   mov    %ebx,0x28(%rsp)
  0x00007ff924cd65a9:   nop
  0x00007ff924cd65aa:   nop
  0x00007ff924cd65ab:   nop
  0x00007ff924cd65ac:   vzeroupper 
  0x00007ff924cd65af:   callq  0x00007ff924d95940           ; ImmutableOopMap {[8]=Oop [24]=Oop [32]=Oop }
                                                            ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@19 (line 10)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007ff924cd65b4:   movabs $0x7ff9296f09c0,%rdi         ;   {external_word}
  0x00007ff924cd65be:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd65c2:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd65c7:   hlt                                 ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@19 (line 10)
 ;; B76: #	out( B78 ) <- in( B16 )  Freq: 2.02451e-06
  0x00007ff924cd65c8:   vmovd  %xmm2,%ebp
  0x00007ff924cd65cc:   jmp    0x00007ff924cd65d2
 ;; B77: #	out( B78 ) <- in( B39 )  Freq: 1.01224e-06
  0x00007ff924cd65ce:   vmovd  %xmm1,%ebp
 ;; B78: #	out( N895 ) <- in( B77 B76 )  Freq: 3.03675e-06
  0x00007ff924cd65d2:   mov    $0xffffffe4,%esi
  0x00007ff924cd65d7:   mov    %r9,0x8(%rsp)
  0x00007ff924cd65dc:   mov    %r11,0x20(%rsp)
  0x00007ff924cd65e1:   mov    %ebx,0x1c(%rsp)
  0x00007ff924cd65e5:   mov    %r13,0x28(%rsp)
  0x00007ff924cd65ea:   mov    %ebx,0x30(%rsp)
  0x00007ff924cd65ee:   nop
  0x00007ff924cd65ef:   nop
  0x00007ff924cd65f0:   vzeroupper 
  0x00007ff924cd65f3:   callq  0x00007ff924d95940           ; ImmutableOopMap {[8]=Oop [32]=Oop [40]=Oop }
                                                            ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007ff924cd65f8:   movabs $0x7ff9296f09c0,%rdi         ;   {external_word}
  0x00007ff924cd6602:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd6606:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd660b:   hlt                                 ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
 ;; B79: #	out( B81 ) <- in( B17 )  Freq: 2.02451e-06
  0x00007ff924cd660c:   vmovd  %xmm2,%ebp
  0x00007ff924cd6610:   jmp    0x00007ff924cd6616
 ;; B80: #	out( B81 ) <- in( B40 )  Freq: 1.01224e-06
  0x00007ff924cd6612:   vmovd  %xmm1,%ebp
 ;; B81: #	out( N895 ) <- in( B80 B79 )  Freq: 3.03675e-06
  0x00007ff924cd6616:   mov    $0xffffffe4,%esi
  0x00007ff924cd661b:   mov    %r9,0x8(%rsp)
  0x00007ff924cd6620:   mov    %r13,0x10(%rsp)
  0x00007ff924cd6625:   mov    %r11,0x20(%rsp)
  0x00007ff924cd662a:   mov    %ebx,0x1c(%rsp)
  0x00007ff924cd662e:   nop
  0x00007ff924cd662f:   nop
  0x00007ff924cd6630:   vzeroupper 
  0x00007ff924cd6633:   callq  0x00007ff924d95940           ; ImmutableOopMap {[8]=Oop [16]=Oop [32]=Oop }
                                                            ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@25 (line 10)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007ff924cd6638:   movabs $0x7ff9296f09c0,%rdi         ;   {external_word}
  0x00007ff924cd6642:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd6646:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd664b:   hlt                                 ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@25 (line 10)
 ;; B82: #	out( N895 ) <- in( B20 )  Freq: 1.01225e-06
  0x00007ff924cd664c:   movabs $0x7ff929884448,%rdi         ;   {external_word}
  0x00007ff924cd6656:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd665a:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd665f:   hlt    
 ;; B83: #	out( N895 ) <- in( B21 )  Freq: 1.01225e-06
  0x00007ff924cd6660:   movabs $0x7ff929884448,%rdi         ;   {external_word}
  0x00007ff924cd666a:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd666e:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd6673:   hlt    
 ;; B84: #	out( N895 ) <- in( B22 )  Freq: 1.01225e-06
  0x00007ff924cd6674:   movabs $0x7ff929884448,%rdi         ;   {external_word}
  0x00007ff924cd667e:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd6682:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd6687:   hlt    
 ;; B85: #	out( N895 ) <- in( B23 )  Freq: 1.01225e-06
  0x00007ff924cd6688:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd6692:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd6696:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd669b:   hlt    
 ;; B86: #	out( N895 ) <- in( B24 )  Freq: 1.01225e-06
  0x00007ff924cd669c:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd66a6:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd66aa:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd66af:   hlt    
 ;; B87: #	out( N895 ) <- in( B25 )  Freq: 1.01225e-06
  0x00007ff924cd66b0:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd66ba:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd66be:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd66c3:   hlt    
 ;; B88: #	out( N895 ) <- in( B26 )  Freq: 1.01225e-06
  0x00007ff924cd66c4:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd66ce:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd66d2:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd66d7:   hlt    
 ;; B89: #	out( N895 ) <- in( B27 )  Freq: 1.01225e-06
  0x00007ff924cd66d8:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd66e2:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd66e6:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd66eb:   hlt    
 ;; B90: #	out( N895 ) <- in( B28 )  Freq: 1.01225e-06
  0x00007ff924cd66ec:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd66f6:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd66fa:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd66ff:   hlt    
 ;; B91: #	out( N895 ) <- in( B2 B5 B8 )  Freq: 2.997e-06
  0x00007ff924cd6700:   mov    $0xffffff8d,%esi
  0x00007ff924cd6705:   mov    %r13,(%rsp)
  0x00007ff924cd6709:   mov    %ebx,0x8(%rsp)
  0x00007ff924cd670d:   mov    %r14,0x10(%rsp)
  0x00007ff924cd6712:   nop
  0x00007ff924cd6713:   nop
  0x00007ff924cd6714:   vzeroupper 
  0x00007ff924cd6717:   callq  0x00007ff924d95940           ; ImmutableOopMap {rbp=Oop [0]=Oop [16]=Oop }
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@3 (line 9)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007ff924cd671c:   movabs $0x7ff9296f09c0,%rdi         ;   {external_word}
  0x00007ff924cd6726:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd672a:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd672f:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@37 (line 11)
 ;; B92: #	out( N895 ) <- in( B45 B46 B43 B44 B47 B48 )  Freq: 5.06626e-06
  0x00007ff924cd6730:   mov    $0xffffff76,%esi
  0x00007ff924cd6735:   mov    %r11,%rbp
  0x00007ff924cd6738:   mov    %r9,(%rsp)
  0x00007ff924cd673c:   mov    %r13,0x8(%rsp)
  0x00007ff924cd6741:   mov    %ebx,0x14(%rsp)
  0x00007ff924cd6745:   nop
  0x00007ff924cd6746:   nop
  0x00007ff924cd6747:   nop
  0x00007ff924cd6748:   vzeroupper 
  0x00007ff924cd674b:   callq  0x00007ff924d95940           ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) loop::doSum@37 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007ff924cd6750:   movabs $0x7ff9296f09c0,%rdi         ;   {external_word}
  0x00007ff924cd675a:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd675e:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd6763:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@37 (line 11)
 ;; B93: #	out( N895 ) <- in( B52 )  Freq: 8.44373e-07
  0x00007ff924cd6764:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd676e:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd6772:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd6777:   hlt    
 ;; B94: #	out( N895 ) <- in( B53 )  Freq: 8.44372e-07
  0x00007ff924cd6778:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd6782:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd6786:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd678b:   hlt    
 ;; B95: #	out( N895 ) <- in( B54 )  Freq: 8.44371e-07
  0x00007ff924cd678c:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd6796:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd679a:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd679f:   hlt    
 ;; B96: #	out( N895 ) <- in( B55 )  Freq: 8.4437e-07
  0x00007ff924cd67a0:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd67aa:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd67ae:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd67b3:   hlt    
 ;; B97: #	out( N895 ) <- in( B56 )  Freq: 8.44369e-07
  0x00007ff924cd67b4:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd67be:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd67c2:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd67c7:   hlt    
 ;; B98: #	out( N895 ) <- in( B57 )  Freq: 8.44368e-07
  0x00007ff924cd67c8:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd67d2:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd67d6:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd67db:   hlt    
 ;; B99: #	out( N895 ) <- in( B58 )  Freq: 8.44367e-07
  0x00007ff924cd67dc:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd67e6:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd67ea:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd67ef:   hlt    
 ;; B100: #	out( N895 ) <- in( B59 )  Freq: 8.44367e-07
  0x00007ff924cd67f0:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd67fa:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd67fe:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd6803:   hlt    
 ;; B101: #	out( N895 ) <- in( B60 )  Freq: 8.44366e-07
  0x00007ff924cd6804:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd680e:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd6812:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd6817:   hlt    
 ;; B102: #	out( N895 ) <- in( B61 )  Freq: 8.44365e-07
  0x00007ff924cd6818:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd6822:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd6826:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd682b:   hlt    
 ;; B103: #	out( N895 ) <- in( B62 )  Freq: 8.44364e-07
  0x00007ff924cd682c:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd6836:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd683a:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd683f:   hlt    
 ;; B104: #	out( N895 ) <- in( B63 )  Freq: 8.44363e-07
  0x00007ff924cd6840:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd684a:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd684e:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd6853:   hlt    
 ;; B105: #	out( N895 ) <- in( B12 B10 B11 )  Freq: 3.03982e-06
  0x00007ff924cd6854:   mov    $0xffffffbe,%esi
  0x00007ff924cd6859:   mov    %r11,%rbp
  0x00007ff924cd685c:   mov    %r9,(%rsp)
  0x00007ff924cd6860:   mov    %r13,0x8(%rsp)
  0x00007ff924cd6865:   mov    %ebx,0x10(%rsp)
  0x00007ff924cd6869:   nop
  0x00007ff924cd686a:   nop
  0x00007ff924cd686b:   nop
  0x00007ff924cd686c:   vzeroupper 
  0x00007ff924cd686f:   callq  0x00007ff924d95940           ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@3 (line 9)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007ff924cd6874:   movabs $0x7ff9296f09c0,%rdi         ;   {external_word}
  0x00007ff924cd687e:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd6882:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd6887:   hlt                                 ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@3 (line 9)
  0x00007ff924cd6888:   movabs $0x7ff924cd6563,%r10         ;   {internal_word}
  0x00007ff924cd6892:   mov    %r10,0x3a0(%r15)
  0x00007ff924cd6899:   jmpq   0x00007ff924d946a0           ;   {runtime_call SafepointBlob}
  0x00007ff924cd689e:   hlt    
  0x00007ff924cd689f:   hlt    
[Exception Handler]
  0x00007ff924cd68a0:   jmpq   0x00007ff924cf8720           ;   {no_reloc}
[Deopt Handler Code]
  0x00007ff924cd68a5:   callq  0x00007ff924cd68aa
  0x00007ff924cd68aa:   subq   $0x5,(%rsp)
  0x00007ff924cd68af:   jmpq   0x00007ff924d95c60           ;   {runtime_call DeoptimizationBlob}
  0x00007ff924cd68b4:   hlt    
  0x00007ff924cd68b5:   hlt    
  0x00007ff924cd68b6:   hlt    
  0x00007ff924cd68b7:   hlt    
--------------------------------------------------------------------------------
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007ff924cd68b8:   0x00000001014b7c68 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000001014b7c68}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007ff924cd68c0:   0x00000008000403e0 {type array float}
  0x00007ff924cd68c8:   0x00007ff8c480e438 {method} {0x00007ff8c480e438} 'doSum' '([F[F[F)V' in 'loop'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007ff924cd607f offset=ffffffff bits=0):
PcDesc(pc=0x00007ff924cd611a offset=9a bits=0):
   loop::doSum@3 (line 9)
PcDesc(pc=0x00007ff924cd6124 offset=a4 bits=0):
   loop::doSum@19 (line 10)
PcDesc(pc=0x00007ff924cd6128 offset=a8 bits=0):
   loop::doSum@23 (line 10)
PcDesc(pc=0x00007ff924cd612c offset=ac bits=0):
   loop::doSum@25 (line 10)
PcDesc(pc=0x00007ff924cd6161 offset=e1 bits=0):
   loop::doSum@34 (line 11)
PcDesc(pc=0x00007ff924cd616a offset=ea bits=0):
   loop::doSum@29 (line 9)
PcDesc(pc=0x00007ff924cd6176 offset=f6 bits=0):
   loop::doSum@10 (line 9)
PcDesc(pc=0x00007ff924cd61af offset=12f bits=0):
   loop::doSum@25 (line 10)
PcDesc(pc=0x00007ff924cd61be offset=13e bits=0):
   loop::doSum@19 (line 10)
PcDesc(pc=0x00007ff924cd61cf offset=14f bits=0):
   loop::doSum@24 (line 10)
PcDesc(pc=0x00007ff924cd61df offset=15f bits=0):
   loop::doSum@25 (line 10)
PcDesc(pc=0x00007ff924cd61e1 offset=161 bits=0):
   loop::doSum@26 (line 9)
PcDesc(pc=0x00007ff924cd61e5 offset=165 bits=0):
   loop::doSum@10 (line 9)
PcDesc(pc=0x00007ff924cd6292 offset=212 bits=0):
   loop::doSum@19 (line 10)
PcDesc(pc=0x00007ff924cd6319 offset=299 bits=0):
   loop::doSum@25 (line 10)
PcDesc(pc=0x00007ff924cd631c offset=29c bits=0):
   loop::doSum@26 (line 9)
PcDesc(pc=0x00007ff924cd6328 offset=2a8 bits=0):
   loop::doSum@29 (line 9)
PcDesc(pc=0x00007ff924cd632f offset=2af bits=1):
   loop::doSum@29 (line 9)  reexecute=true
   Locals
    - l0: empty
    - l1: reg r11 [22],oop
    - l2: reg r9 [18],oop
    - l3: reg r13 [26],oop
    - l4: reg rbx [6],int
PcDesc(pc=0x00007ff924cd6331 offset=2b1 bits=0):
   loop::doSum@29 (line 9)
PcDesc(pc=0x00007ff924cd634c offset=2cc bits=0):
   loop::doSum@19 (line 10)
PcDesc(pc=0x00007ff924cd636d offset=2ed bits=0):
   loop::doSum@25 (line 10)
PcDesc(pc=0x00007ff924cd6370 offset=2f0 bits=0):
   loop::doSum@26 (line 9)
PcDesc(pc=0x00007ff924cd6374 offset=2f4 bits=0):
   loop::doSum@10 (line 9)
PcDesc(pc=0x00007ff924cd6380 offset=300 bits=0):
   loop::doSum@25 (line 10)
PcDesc(pc=0x00007ff924cd638f offset=30f bits=0):
   loop::doSum@19 (line 10)
PcDesc(pc=0x00007ff924cd639e offset=31e bits=0):
   loop::doSum@24 (line 10)
PcDesc(pc=0x00007ff924cd63b0 offset=330 bits=0):
   loop::doSum@25 (line 10)
PcDesc(pc=0x00007ff924cd63b2 offset=332 bits=0):
   loop::doSum@26 (line 9)
PcDesc(pc=0x00007ff924cd63b7 offset=337 bits=0):
   loop::doSum@10 (line 9)
PcDesc(pc=0x00007ff924cd63c6 offset=346 bits=0):
   loop::doSum@37 (line 11)
PcDesc(pc=0x00007ff924cd643a offset=3ba bits=0):
   loop::doSum@40 (line 12)
PcDesc(pc=0x00007ff924cd644f offset=3cf bits=0):
   loop::doSum@52 (line 12)
PcDesc(pc=0x00007ff924cd6451 offset=3d1 bits=0):
   loop::doSum@53 (line 11)
PcDesc(pc=0x00007ff924cd6455 offset=3d5 bits=0):
   loop::doSum@37 (line 11)
PcDesc(pc=0x00007ff924cd6510 offset=490 bits=0):
   loop::doSum@40 (line 12)
PcDesc(pc=0x00007ff924cd6525 offset=4a5 bits=0):
   loop::doSum@52 (line 12)
PcDesc(pc=0x00007ff924cd6528 offset=4a8 bits=0):
   loop::doSum@53 (line 11)
PcDesc(pc=0x00007ff924cd652c offset=4ac bits=0):
   loop::doSum@56 (line 11)
PcDesc(pc=0x00007ff924cd6533 offset=4b3 bits=1):
   loop::doSum@56 (line 11)  reexecute=true
   Locals
    - l0: empty
    - l1: reg r11 [22],oop
    - l2: reg r9 [18],oop
    - l3: reg r13 [26],oop
    - l4: reg rbx [6],int
PcDesc(pc=0x00007ff924cd6535 offset=4b5 bits=0):
   loop::doSum@56 (line 11)
PcDesc(pc=0x00007ff924cd6540 offset=4c0 bits=0):
   loop::doSum@40 (line 12)
PcDesc(pc=0x00007ff924cd6555 offset=4d5 bits=0):
   loop::doSum@52 (line 12)
PcDesc(pc=0x00007ff924cd6557 offset=4d7 bits=0):
   loop::doSum@53 (line 11)
PcDesc(pc=0x00007ff924cd655b offset=4db bits=0):
   loop::doSum@37 (line 11)
PcDesc(pc=0x00007ff924cd65b4 offset=534 bits=0):
   loop::doSum@19 (line 10)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[8],oop
    - l4: stack[20]
   Expression stack
    - @0: stack[24],oop
    - @1: stack[40]
    - @2: stack[32],oop
    - @3: stack[20]
PcDesc(pc=0x00007ff924cd65c8 offset=548 bits=0):
   loop::doSum@19 (line 10)
PcDesc(pc=0x00007ff924cd65f8 offset=578 bits=0):
   loop::doSum@23 (line 10)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[8],oop
    - l3: stack[40],oop
    - l4: stack[28]
   Expression stack
    - @0: stack[32],oop
    - @1: stack[48]
    - @2: reg rbp [10]
    - @3: stack[40],oop
    - @4: stack[28]
PcDesc(pc=0x00007ff924cd660c offset=58c bits=0):
   loop::doSum@23 (line 10)
PcDesc(pc=0x00007ff924cd6638 offset=5b8 bits=0):
   loop::doSum@25 (line 10)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[8],oop
    - l3: stack[16],oop
    - l4: stack[28]
   Expression stack
    - @0: stack[32],oop
    - @1: stack[28]
    - @2: reg rbp [10]
PcDesc(pc=0x00007ff924cd664c offset=5cc bits=0):
   loop::doSum@25 (line 10)
PcDesc(pc=0x00007ff924cd671c offset=69c bits=0):
   loop::doSum@3 (line 9)
   Locals
    - l0: empty
    - l1: stack[16],oop
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: stack[8]
PcDesc(pc=0x00007ff924cd6730 offset=6b0 bits=0):
   loop::doSum@37 (line 11)
PcDesc(pc=0x00007ff924cd6750 offset=6d0 bits=1):
   loop::doSum@37 (line 11)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8],oop
    - l4: stack[20]
   Expression stack
    - @0: stack[20]
    - @1: stack[32]
PcDesc(pc=0x00007ff924cd6764 offset=6e4 bits=0):
   loop::doSum@37 (line 11)
PcDesc(pc=0x00007ff924cd6874 offset=7f4 bits=0):
   loop::doSum@3 (line 9)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8],oop
    - l4: stack[16]
PcDesc(pc=0x00007ff924cd6888 offset=808 bits=0):
   loop::doSum@3 (line 9)
PcDesc(pc=0x00007ff924cd68b9 offset=839 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 8 OopMaps

ImmutableOopMap {r11=Oop r9=Oop r13=Oop } pc offsets: 687 1203 
ImmutableOopMap {[8]=Oop [24]=Oop [32]=Oop } pc offsets: 1332 
ImmutableOopMap {[8]=Oop [32]=Oop [40]=Oop } pc offsets: 1400 
ImmutableOopMap {[8]=Oop [16]=Oop [32]=Oop } pc offsets: 1464 
ImmutableOopMap {rbp=Oop [0]=Oop [16]=Oop } pc offsets: 1692 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 1744 2036 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007ff924cd611a offset=9a):
   loop::doSum@3 (line 9)
ScopeDesc(pc=0x00007ff924cd6124 offset=a4):
   loop::doSum@19 (line 10)
ScopeDesc(pc=0x00007ff924cd6128 offset=a8):
   loop::doSum@23 (line 10)
ScopeDesc(pc=0x00007ff924cd612c offset=ac):
   loop::doSum@25 (line 10)
ScopeDesc(pc=0x00007ff924cd6161 offset=e1):
   loop::doSum@34 (line 11)
ScopeDesc(pc=0x00007ff924cd616a offset=ea):
   loop::doSum@29 (line 9)
ScopeDesc(pc=0x00007ff924cd6176 offset=f6):
   loop::doSum@10 (line 9)
ScopeDesc(pc=0x00007ff924cd61af offset=12f):
   loop::doSum@25 (line 10)
ScopeDesc(pc=0x00007ff924cd61be offset=13e):
   loop::doSum@19 (line 10)
ScopeDesc(pc=0x00007ff924cd61cf offset=14f):
   loop::doSum@24 (line 10)
ScopeDesc(pc=0x00007ff924cd61df offset=15f):
   loop::doSum@25 (line 10)
ScopeDesc(pc=0x00007ff924cd61e1 offset=161):
   loop::doSum@26 (line 9)
ScopeDesc(pc=0x00007ff924cd61e5 offset=165):
   loop::doSum@10 (line 9)
ScopeDesc(pc=0x00007ff924cd6292 offset=212):
   loop::doSum@19 (line 10)
ScopeDesc(pc=0x00007ff924cd6319 offset=299):
   loop::doSum@25 (line 10)
ScopeDesc(pc=0x00007ff924cd631c offset=29c):
   loop::doSum@26 (line 9)
ScopeDesc(pc=0x00007ff924cd6328 offset=2a8):
   loop::doSum@29 (line 9)
ScopeDesc(pc=0x00007ff924cd632f offset=2af):
   loop::doSum@29 (line 9)  reexecute=true
   Locals
    - l0: empty
    - l1: reg r11 [22],oop
    - l2: reg r9 [18],oop
    - l3: reg r13 [26],oop
    - l4: reg rbx [6],int
ScopeDesc(pc=0x00007ff924cd6331 offset=2b1):
   loop::doSum@29 (line 9)
ScopeDesc(pc=0x00007ff924cd634c offset=2cc):
   loop::doSum@19 (line 10)
ScopeDesc(pc=0x00007ff924cd636d offset=2ed):
   loop::doSum@25 (line 10)
ScopeDesc(pc=0x00007ff924cd6370 offset=2f0):
   loop::doSum@26 (line 9)
ScopeDesc(pc=0x00007ff924cd6374 offset=2f4):
   loop::doSum@10 (line 9)
ScopeDesc(pc=0x00007ff924cd6380 offset=300):
   loop::doSum@25 (line 10)
ScopeDesc(pc=0x00007ff924cd638f offset=30f):
   loop::doSum@19 (line 10)
ScopeDesc(pc=0x00007ff924cd639e offset=31e):
   loop::doSum@24 (line 10)
ScopeDesc(pc=0x00007ff924cd63b0 offset=330):
   loop::doSum@25 (line 10)
ScopeDesc(pc=0x00007ff924cd63b2 offset=332):
   loop::doSum@26 (line 9)
ScopeDesc(pc=0x00007ff924cd63b7 offset=337):
   loop::doSum@10 (line 9)
ScopeDesc(pc=0x00007ff924cd63c6 offset=346):
   loop::doSum@37 (line 11)
ScopeDesc(pc=0x00007ff924cd643a offset=3ba):
   loop::doSum@40 (line 12)
ScopeDesc(pc=0x00007ff924cd644f offset=3cf):
   loop::doSum@52 (line 12)
ScopeDesc(pc=0x00007ff924cd6451 offset=3d1):
   loop::doSum@53 (line 11)
ScopeDesc(pc=0x00007ff924cd6455 offset=3d5):
   loop::doSum@37 (line 11)
ScopeDesc(pc=0x00007ff924cd6510 offset=490):
   loop::doSum@40 (line 12)
ScopeDesc(pc=0x00007ff924cd6525 offset=4a5):
   loop::doSum@52 (line 12)
ScopeDesc(pc=0x00007ff924cd6528 offset=4a8):
   loop::doSum@53 (line 11)
ScopeDesc(pc=0x00007ff924cd652c offset=4ac):
   loop::doSum@56 (line 11)
ScopeDesc(pc=0x00007ff924cd6533 offset=4b3):
   loop::doSum@56 (line 11)  reexecute=true
   Locals
    - l0: empty
    - l1: reg r11 [22],oop
    - l2: reg r9 [18],oop
    - l3: reg r13 [26],oop
    - l4: reg rbx [6],int
ScopeDesc(pc=0x00007ff924cd6535 offset=4b5):
   loop::doSum@56 (line 11)
ScopeDesc(pc=0x00007ff924cd6540 offset=4c0):
   loop::doSum@40 (line 12)
ScopeDesc(pc=0x00007ff924cd6555 offset=4d5):
   loop::doSum@52 (line 12)
ScopeDesc(pc=0x00007ff924cd6557 offset=4d7):
   loop::doSum@53 (line 11)
ScopeDesc(pc=0x00007ff924cd655b offset=4db):
   loop::doSum@37 (line 11)
ScopeDesc(pc=0x00007ff924cd65b4 offset=534):
   loop::doSum@19 (line 10)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[8],oop
    - l4: stack[20]
   Expression stack
    - @0: stack[24],oop
    - @1: stack[40]
    - @2: stack[32],oop
    - @3: stack[20]
ScopeDesc(pc=0x00007ff924cd65c8 offset=548):
   loop::doSum@19 (line 10)
ScopeDesc(pc=0x00007ff924cd65f8 offset=578):
   loop::doSum@23 (line 10)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[8],oop
    - l3: stack[40],oop
    - l4: stack[28]
   Expression stack
    - @0: stack[32],oop
    - @1: stack[48]
    - @2: reg rbp [10]
    - @3: stack[40],oop
    - @4: stack[28]
ScopeDesc(pc=0x00007ff924cd660c offset=58c):
   loop::doSum@23 (line 10)
ScopeDesc(pc=0x00007ff924cd6638 offset=5b8):
   loop::doSum@25 (line 10)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[8],oop
    - l3: stack[16],oop
    - l4: stack[28]
   Expression stack
    - @0: stack[32],oop
    - @1: stack[28]
    - @2: reg rbp [10]
ScopeDesc(pc=0x00007ff924cd664c offset=5cc):
   loop::doSum@25 (line 10)
ScopeDesc(pc=0x00007ff924cd671c offset=69c):
   loop::doSum@3 (line 9)
   Locals
    - l0: empty
    - l1: stack[16],oop
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: stack[8]
ScopeDesc(pc=0x00007ff924cd6730 offset=6b0):
   loop::doSum@37 (line 11)
ScopeDesc(pc=0x00007ff924cd6750 offset=6d0):
   loop::doSum@37 (line 11)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8],oop
    - l4: stack[20]
   Expression stack
    - @0: stack[20]
    - @1: stack[32]
ScopeDesc(pc=0x00007ff924cd6764 offset=6e4):
   loop::doSum@37 (line 11)
ScopeDesc(pc=0x00007ff924cd6874 offset=7f4):
   loop::doSum@3 (line 9)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8],oop
    - l4: stack[16]
ScopeDesc(pc=0x00007ff924cd6888 offset=808):
   loop::doSum@3 (line 9)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007ff924cd5f08: 6400
relocInfo@0x00007ff924cd5f08 [type=6(runtime_call) addr=0x00007ff924cd6080 offset=0 format=1] | [destination=0x00007ff928ffd794]
         @0x00007ff924cd5f0a: f001cc4d
relocInfo@0x00007ff924cd5f0c [type=12(metadata) addr=0x00007ff924cd60cd offset=77 format=3 data=1] | [metadata_addr=0x00007ff924cd68c0 *=0x00000008000403e0 offset=0]metadata_value=0x00000008000403e0: {type array float}
         @0x00007ff924cd5f0e: f001cc20
relocInfo@0x00007ff924cd5f10 [type=12(metadata) addr=0x00007ff924cd60ed offset=32 format=3 data=1] | [metadata_addr=0x00007ff924cd68c0 *=0x00000008000403e0 offset=0]metadata_value=0x00000008000403e0: {type array float}
         @0x00007ff924cd5f12: f001cc20
relocInfo@0x00007ff924cd5f14 [type=12(metadata) addr=0x00007ff924cd610d offset=32 format=3 data=1] | [metadata_addr=0x00007ff924cd68c0 *=0x00000008000403e0 offset=0]metadata_value=0x00000008000403e0: {type array float}
         @0x00007ff924cd5f16: 1046
relocInfo@0x00007ff924cd5f16 [type=1(oop) addr=0x00007ff924cd6153 offset=70] | [oop_addr=0x00007ff924cd6155 *=0x000000010157c150 offset=0]
         @0x00007ff924cd5f18: a1dc
relocInfo@0x00007ff924cd5f18 [type=10(poll) addr=0x00007ff924cd632f offset=476]
         @0x00007ff924cd5f1a: a204
relocInfo@0x00007ff924cd5f1a [type=10(poll) addr=0x00007ff924cd6533 offset=516]
         @0x00007ff924cd5f1c: b030
relocInfo@0x00007ff924cd5f1c [type=11(poll_return) addr=0x00007ff924cd6563 offset=48]
         @0x00007ff924cd5f1e: 644c
relocInfo@0x00007ff924cd5f1e [type=6(runtime_call) addr=0x00007ff924cd65af offset=76 format=1] | [destination=0x00007ff924d95940]
         @0x00007ff924cd5f20: f803296f09c07ff97005
relocInfo@0x00007ff924cd5f28 [type=7(external_word) addr=0x00007ff924cd65b4 offset=5 data={296f09c07ff9}] | [target=0x00007ff9296f09c0]
         @0x00007ff924cd5f2a: 640e
relocInfo@0x00007ff924cd5f2a [type=6(runtime_call) addr=0x00007ff924cd65c2 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5f2c: 6431
relocInfo@0x00007ff924cd5f2c [type=6(runtime_call) addr=0x00007ff924cd65f3 offset=49 format=1] | [destination=0x00007ff924d95940]
         @0x00007ff924cd5f2e: f803296f09c07ff97005
relocInfo@0x00007ff924cd5f36 [type=7(external_word) addr=0x00007ff924cd65f8 offset=5 data={296f09c07ff9}] | [target=0x00007ff9296f09c0]
         @0x00007ff924cd5f38: 640e
relocInfo@0x00007ff924cd5f38 [type=6(runtime_call) addr=0x00007ff924cd6606 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5f3a: 642d
relocInfo@0x00007ff924cd5f3a [type=6(runtime_call) addr=0x00007ff924cd6633 offset=45 format=1] | [destination=0x00007ff924d95940]
         @0x00007ff924cd5f3c: f803296f09c07ff97005
relocInfo@0x00007ff924cd5f44 [type=7(external_word) addr=0x00007ff924cd6638 offset=5 data={296f09c07ff9}] | [target=0x00007ff9296f09c0]
         @0x00007ff924cd5f46: 640e
relocInfo@0x00007ff924cd5f46 [type=6(runtime_call) addr=0x00007ff924cd6646 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5f48: f803298844487ff97006
relocInfo@0x00007ff924cd5f50 [type=7(external_word) addr=0x00007ff924cd664c offset=6 data={298844487ff9}] | [target=0x00007ff929884448]
         @0x00007ff924cd5f52: 640e
relocInfo@0x00007ff924cd5f52 [type=6(runtime_call) addr=0x00007ff924cd665a offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5f54: f803298844487ff97006
relocInfo@0x00007ff924cd5f5c [type=7(external_word) addr=0x00007ff924cd6660 offset=6 data={298844487ff9}] | [target=0x00007ff929884448]
         @0x00007ff924cd5f5e: 640e
relocInfo@0x00007ff924cd5f5e [type=6(runtime_call) addr=0x00007ff924cd666e offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5f60: f803298844487ff97006
relocInfo@0x00007ff924cd5f68 [type=7(external_word) addr=0x00007ff924cd6674 offset=6 data={298844487ff9}] | [target=0x00007ff929884448]
         @0x00007ff924cd5f6a: 640e
relocInfo@0x00007ff924cd5f6a [type=6(runtime_call) addr=0x00007ff924cd6682 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5f6c: f80329883b187ff97006
relocInfo@0x00007ff924cd5f74 [type=7(external_word) addr=0x00007ff924cd6688 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5f76: 640e
relocInfo@0x00007ff924cd5f76 [type=6(runtime_call) addr=0x00007ff924cd6696 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5f78: f80329883b187ff97006
relocInfo@0x00007ff924cd5f80 [type=7(external_word) addr=0x00007ff924cd669c offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5f82: 640e
relocInfo@0x00007ff924cd5f82 [type=6(runtime_call) addr=0x00007ff924cd66aa offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5f84: f80329883b187ff97006
relocInfo@0x00007ff924cd5f8c [type=7(external_word) addr=0x00007ff924cd66b0 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5f8e: 640e
relocInfo@0x00007ff924cd5f8e [type=6(runtime_call) addr=0x00007ff924cd66be offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5f90: f80329883b187ff97006
relocInfo@0x00007ff924cd5f98 [type=7(external_word) addr=0x00007ff924cd66c4 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5f9a: 640e
relocInfo@0x00007ff924cd5f9a [type=6(runtime_call) addr=0x00007ff924cd66d2 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5f9c: f80329883b187ff97006
relocInfo@0x00007ff924cd5fa4 [type=7(external_word) addr=0x00007ff924cd66d8 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5fa6: 640e
relocInfo@0x00007ff924cd5fa6 [type=6(runtime_call) addr=0x00007ff924cd66e6 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5fa8: f80329883b187ff97006
relocInfo@0x00007ff924cd5fb0 [type=7(external_word) addr=0x00007ff924cd66ec offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5fb2: 640e
relocInfo@0x00007ff924cd5fb2 [type=6(runtime_call) addr=0x00007ff924cd66fa offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5fb4: 641d
relocInfo@0x00007ff924cd5fb4 [type=6(runtime_call) addr=0x00007ff924cd6717 offset=29 format=1] | [destination=0x00007ff924d95940]
         @0x00007ff924cd5fb6: f803296f09c07ff97005
relocInfo@0x00007ff924cd5fbe [type=7(external_word) addr=0x00007ff924cd671c offset=5 data={296f09c07ff9}] | [target=0x00007ff9296f09c0]
         @0x00007ff924cd5fc0: 640e
relocInfo@0x00007ff924cd5fc0 [type=6(runtime_call) addr=0x00007ff924cd672a offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5fc2: 6421
relocInfo@0x00007ff924cd5fc2 [type=6(runtime_call) addr=0x00007ff924cd674b offset=33 format=1] | [destination=0x00007ff924d95940]
         @0x00007ff924cd5fc4: f803296f09c07ff97005
relocInfo@0x00007ff924cd5fcc [type=7(external_word) addr=0x00007ff924cd6750 offset=5 data={296f09c07ff9}] | [target=0x00007ff9296f09c0]
         @0x00007ff924cd5fce: 640e
relocInfo@0x00007ff924cd5fce [type=6(runtime_call) addr=0x00007ff924cd675e offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5fd0: f80329883b187ff97006
relocInfo@0x00007ff924cd5fd8 [type=7(external_word) addr=0x00007ff924cd6764 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5fda: 640e
relocInfo@0x00007ff924cd5fda [type=6(runtime_call) addr=0x00007ff924cd6772 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5fdc: f80329883b187ff97006
relocInfo@0x00007ff924cd5fe4 [type=7(external_word) addr=0x00007ff924cd6778 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5fe6: 640e
relocInfo@0x00007ff924cd5fe6 [type=6(runtime_call) addr=0x00007ff924cd6786 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5fe8: f80329883b187ff97006
relocInfo@0x00007ff924cd5ff0 [type=7(external_word) addr=0x00007ff924cd678c offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5ff2: 640e
relocInfo@0x00007ff924cd5ff2 [type=6(runtime_call) addr=0x00007ff924cd679a offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5ff4: f80329883b187ff97006
relocInfo@0x00007ff924cd5ffc [type=7(external_word) addr=0x00007ff924cd67a0 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5ffe: 640e
relocInfo@0x00007ff924cd5ffe [type=6(runtime_call) addr=0x00007ff924cd67ae offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd6000: f80329883b187ff97006
relocInfo@0x00007ff924cd6008 [type=7(external_word) addr=0x00007ff924cd67b4 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd600a: 640e
relocInfo@0x00007ff924cd600a [type=6(runtime_call) addr=0x00007ff924cd67c2 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd600c: f80329883b187ff97006
relocInfo@0x00007ff924cd6014 [type=7(external_word) addr=0x00007ff924cd67c8 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd6016: 640e
relocInfo@0x00007ff924cd6016 [type=6(runtime_call) addr=0x00007ff924cd67d6 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd6018: f80329883b187ff97006
relocInfo@0x00007ff924cd6020 [type=7(external_word) addr=0x00007ff924cd67dc offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd6022: 640e
relocInfo@0x00007ff924cd6022 [type=6(runtime_call) addr=0x00007ff924cd67ea offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd6024: f80329883b187ff97006
relocInfo@0x00007ff924cd602c [type=7(external_word) addr=0x00007ff924cd67f0 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd602e: 640e
relocInfo@0x00007ff924cd602e [type=6(runtime_call) addr=0x00007ff924cd67fe offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd6030: f80329883b187ff97006
relocInfo@0x00007ff924cd6038 [type=7(external_word) addr=0x00007ff924cd6804 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd603a: 640e
relocInfo@0x00007ff924cd603a [type=6(runtime_call) addr=0x00007ff924cd6812 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd603c: f80329883b187ff97006
relocInfo@0x00007ff924cd6044 [type=7(external_word) addr=0x00007ff924cd6818 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd6046: 640e
relocInfo@0x00007ff924cd6046 [type=6(runtime_call) addr=0x00007ff924cd6826 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd6048: f80329883b187ff97006
relocInfo@0x00007ff924cd6050 [type=7(external_word) addr=0x00007ff924cd682c offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd6052: 640e
relocInfo@0x00007ff924cd6052 [type=6(runtime_call) addr=0x00007ff924cd683a offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd6054: f80329883b187ff97006
relocInfo@0x00007ff924cd605c [type=7(external_word) addr=0x00007ff924cd6840 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd605e: 640e
relocInfo@0x00007ff924cd605e [type=6(runtime_call) addr=0x00007ff924cd684e offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd6060: 6421
relocInfo@0x00007ff924cd6060 [type=6(runtime_call) addr=0x00007ff924cd686f offset=33 format=1] | [destination=0x00007ff924d95940]
         @0x00007ff924cd6062: f803296f09c07ff97005
relocInfo@0x00007ff924cd606a [type=7(external_word) addr=0x00007ff924cd6874 offset=5 data={296f09c07ff9}] | [target=0x00007ff9296f09c0]
         @0x00007ff924cd606c: 640e
relocInfo@0x00007ff924cd606c [type=6(runtime_call) addr=0x00007ff924cd6882 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd606e: f3258006
relocInfo@0x00007ff924cd6070 [type=8(internal_word) addr=0x00007ff924cd6888 offset=6 data=805] | [target=0x00007ff924cd6563]
         @0x00007ff924cd6072: 6411
relocInfo@0x00007ff924cd6072 [type=6(runtime_call) addr=0x00007ff924cd6899 offset=17 format=1] | [destination=0x00007ff924d946a0]
         @0x00007ff924cd6074: 0007
relocInfo@0x00007ff924cd6074 [type=0(none) addr=0x00007ff924cd68a0 offset=7]
         @0x00007ff924cd6076: 6400
relocInfo@0x00007ff924cd6076 [type=6(runtime_call) addr=0x00007ff924cd68a0 offset=0 format=1] | [destination=0x00007ff924cf8720]
         @0x00007ff924cd6078: 640f
relocInfo@0x00007ff924cd6078 [type=6(runtime_call) addr=0x00007ff924cd68af offset=15 format=1] | [destination=0x00007ff924d95c60]
         @0x00007ff924cd607a: 0000
relocInfo@0x00007ff924cd607a [type=0(none) addr=0x00007ff924cd68af offset=0]
         @0x00007ff924cd607c: 0000
relocInfo@0x00007ff924cd607c [type=0(none) addr=0x00007ff924cd68af offset=0]
         @0x00007ff924cd607e: 0000
relocInfo@0x00007ff924cd607e [type=0(none) addr=0x00007ff924cd68af offset=0]
         @0x00007ff924cd6080: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 3 entries, 28 bytes):
{
   < 0x00007ff924cd6120, 0x00007ff924cd6854 > < 0x00007ff924cd6124, 0x00007ff924cd6854 > < 0x00007ff924cd6128, 0x00007ff924cd6854 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x00000001014b7c68 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000001014b7c68}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x00000008000403e0 {type array float}
#2: 0x00007ff8c480e438 {method} {0x00007ff8c480e438} 'doSum' '([F[F[F)V' in 'loop'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Counted          Loop: N430/N217  counted [0,int),+1 (-1 iters) 
Counted          Loop: N441/N401  counted [int,int),+1 (-1 iters) 
Loop: N0/N0  has_sfpt
  Loop: N429/N428  limit_check profile_predicated predicated
    Loop: N430/N217  limit_check profile_predicated predicated counted [0,int),+1 (-1 iters)  has_sfpt strip_mined
  Loop: N440/N439  limit_check profile_predicated predicated
    Loop: N441/N401  limit_check profile_predicated predicated counted [int,int),+1 (-1 iters)  has_sfpt strip_mined
Predicate IC     Loop: N430/N217  limit_check profile_predicated predicated counted [0,int),+1 (2749 iters)  has_sfpt strip_mined
Predicate RC     Loop: N430/N217  limit_check profile_predicated predicated counted [0,int),+1 (2749 iters)  has_sfpt strip_mined
Predicate IC     Loop: N430/N217  limit_check profile_predicated predicated counted [0,int),+1 (2749 iters)  has_sfpt strip_mined
Predicate RC     Loop: N430/N217  limit_check profile_predicated predicated counted [0,int),+1 (2749 iters)  has_sfpt strip_mined
Predicate IC     Loop: N430/N217  limit_check profile_predicated predicated counted [0,int),+1 (2749 iters)  has_sfpt strip_mined
Predicate RC     Loop: N430/N217  limit_check profile_predicated predicated counted [0,int),+1 (2749 iters)  has_sfpt strip_mined
Predicate IC     Loop: N441/N401  limit_check profile_predicated predicated counted [int,int),+1 (6 iters)  has_sfpt strip_mined
Predicate RC     Loop: N441/N401  limit_check profile_predicated predicated counted [int,int),+1 (6 iters)  has_sfpt strip_mined
Predicate IC     Loop: N441/N401  limit_check profile_predicated predicated counted [int,int),+1 (6 iters)  has_sfpt strip_mined
Predicate RC     Loop: N441/N401  limit_check profile_predicated predicated counted [int,int),+1 (6 iters)  has_sfpt strip_mined
Predicate IC     Loop: N441/N401  limit_check profile_predicated predicated counted [int,int),+1 (6 iters)  has_sfpt strip_mined
Predicate RC     Loop: N441/N401  limit_check profile_predicated predicated counted [int,int),+1 (6 iters)  has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N429/N428  limit_check profile_predicated predicated sfpts={ 431 }
    Loop: N430/N217  limit_check profile_predicated predicated counted [0,int),+1 (2749 iters)  has_sfpt strip_mined
  Loop: N440/N439  limit_check profile_predicated predicated sfpts={ 442 }
    Loop: N441/N401  limit_check profile_predicated predicated counted [int,int),+1 (6 iters)  has_sfpt strip_mined
PreMainPost      Loop: N430/N217  limit_check profile_predicated predicated counted [0,int),+1 (2749 iters)  has_sfpt strip_mined
Unroll 2         Loop: N430/N217  counted [int,int),+1 (2749 iters)  main has_sfpt strip_mined
PreMainPost      Loop: N441/N401  limit_check profile_predicated predicated counted [int,int),+1 (6 iters)  has_sfpt strip_mined
Unroll 2         Loop: N441/N401  counted [int,int),+1 (6 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N752/N761  limit_check profile_predicated predicated counted [0,int),+1 (4 iters)  pre has_sfpt
  Loop: N429/N428  sfpts={ 431 }
    Loop: N970/N217  counted [int,int),+2 (2749 iters)  main has_sfpt strip_mined
  Loop: N711/N720  counted [int,int),+1 (4 iters)  post has_sfpt
  Loop: N1042/N1052  limit_check profile_predicated predicated counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N440/N439  sfpts={ 442 }
    Loop: N1257/N401  counted [int,int),+2 (6 iters)  main has_sfpt strip_mined
  Loop: N1003/N1013  counted [int,int),+1 (4 iters)  post has_sfpt
Unroll 4         Loop: N970/N217  counted [int,int),+2 (2749 iters)  main has_sfpt strip_mined
Unroll 4         Loop: N1257/N401  counted [int,int),+2 (6 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N752/N761  limit_check profile_predicated predicated counted [0,int),+1 (4 iters)  pre has_sfpt
  Loop: N429/N428  sfpts={ 431 }
    Loop: N1363/N217  counted [int,int),+4 (2749 iters)  main has_sfpt strip_mined
  Loop: N711/N720  counted [int,int),+1 (4 iters)  post has_sfpt
  Loop: N1042/N1052  limit_check profile_predicated predicated counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N440/N439  sfpts={ 442 }
    Loop: N1463/N401  counted [int,int),+4 (6 iters)  main has_sfpt strip_mined
  Loop: N1003/N1013  counted [int,int),+1 (4 iters)  post has_sfpt
Unroll 8         Loop: N1363/N217  counted [int,int),+4 (2749 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N752/N761  limit_check profile_predicated predicated counted [0,int),+1 (4 iters)  pre has_sfpt
  Loop: N429/N428  sfpts={ 431 }
    Loop: N1599/N217  counted [int,int),+8 (2749 iters)  main has_sfpt strip_mined
  Loop: N711/N720  counted [int,int),+1 (4 iters)  post has_sfpt
  Loop: N1042/N1052  limit_check profile_predicated predicated counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N440/N439  sfpts={ 442 }
    Loop: N1463/N401  counted [int,int),+4 (6 iters)  main has_sfpt strip_mined
  Loop: N1003/N1013  counted [int,int),+1 (4 iters)  post has_sfpt
Unroll 16         Loop: N1599/N217  counted [int,int),+8 (2749 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N752/N761  limit_check profile_predicated predicated counted [0,int),+1 (4 iters)  pre has_sfpt
  Loop: N429/N428  sfpts={ 431 }
    Loop: N1794/N217  counted [int,int),+16 (2749 iters)  main has_sfpt strip_mined
  Loop: N711/N720  counted [int,int),+1 (4 iters)  post has_sfpt
  Loop: N1042/N1052  limit_check profile_predicated predicated counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N440/N439  sfpts={ 442 }
    Loop: N1463/N401  counted [int,int),+4 (6 iters)  main has_sfpt strip_mined
  Loop: N1003/N1013  counted [int,int),+1 (4 iters)  post has_sfpt
PredicatesOff
Loop: N0/N0  has_sfpt
  Loop: N752/N761  counted [0,int),+1 (4 iters)  pre has_sfpt
  Loop: N429/N428  sfpts={ 431 }
    Loop: N1794/N217  counted [int,int),+16 (2749 iters)  main has_sfpt strip_mined
  Loop: N711/N720  counted [int,int),+1 (4 iters)  post has_sfpt
  Loop: N1042/N1052  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N440/N439  sfpts={ 442 }
    Loop: N1463/N401  counted [int,int),+4 (6 iters)  main has_sfpt strip_mined
  Loop: N1003/N1013  counted [int,int),+1 (4 iters)  post has_sfpt
SuperWord::output        Loop: N1794/N217  counted [int,int),+16 (2749 iters)  main has_sfpt strip_mined
PhaseIdealLoop::create_reserve_version_of_loop:
	 iff = 1834,  1834  If  ===  1673  44  [[ 1835  1836 ]] P=0.999999, C=-1.000000
	 iffast = 1835,  1835  IfTrue  ===  1834  [[]] #1
	 ifslow = 1836,  1836  IfFalse  ===  1834  [[]] #0
	 before replace_input_of: head = 1794,  1794  CountedLoop  ===  1794  429  217  [[ 1684  1688  1692  1696  1700  1704  1708  1740  1794  1545  1799  1800  1549  1553  1573  956  1337  202  1351  425 ]] inner stride: 16 main of N1794 strip mined !orig=[1599],[1363],[970],[430],[420],[88] !jvms: loop::doSum @ bci:13 (line 10)
	 before replace_input_of: slow_head = 2061,  2061  CountedLoop  ===  2061  2069  2063  [[ 1839  1843  1847  1851  1855  1859  1863  1867  1871  1875  1879  1883  1887  1891  1895  1951  2061  2062  2064  2067 ]] inner stride: 16 main of N2061 strip mined !orig=1794,[1599],[1363],[970],[430],[420],[88] !jvms: loop::doSum @ bci:13 (line 10)
	 after  replace_input_of: head = 1794,  1794  CountedLoop  ===  1794  429  217  [[ 1684  1688  1692  1696  1700  1704  1708  1740  1794  1545  1799  1800  1549  1553  1573  956  1337  202  1351  425 ]] inner stride: 16 main of N1794 strip mined !orig=[1599],[1363],[970],[430],[420],[88] !jvms: loop::doSum @ bci:13 (line 10)
	 after  replace_input_of: slow_head = 2061,  2061  CountedLoop  ===  2061  2069  2063  [[ 1839  1843  1847  1851  1855  1859  1863  1867  1871  1875  1879  1883  1887  1891  1895  1951  2061  2062  2064  2067 ]] inner stride: 16 main of N2061 strip mined !orig=1794,[1599],[1363],[970],[430],[420],[88] !jvms: loop::doSum @ bci:13 (line 10)
SuperWord::output        Loop: N1463/N401  counted [int,int),+4 (6 iters)  main has_sfpt strip_mined
PhaseIdealLoop::create_reserve_version_of_loop:
	 iff = 2094,  2094  If  ===  1426  44  [[ 2095  2096 ]] P=0.999999, C=-1.000000
	 iffast = 2095,  2095  IfTrue  ===  2094  [[]] #1
	 ifslow = 2096,  2096  IfFalse  ===  2094  [[]] #0
	 before replace_input_of: head = 1463,  1463  CountedLoop  ===  1463  440  401  [[ 1437  1451  1463  1244  1466  1469  389  436 ]] inner stride: 4 main of N1463 strip mined !orig=[1257],[441],[421],[280] !jvms: loop::doSum @ bci:40 (line 12)
	 before replace_input_of: slow_head = 2153,  2153  CountedLoop  ===  2153  2161  2155  [[ 2099  2103  2107  2127  2153  2154  2158  2159 ]] inner stride: 4 main of N2153 strip mined !orig=1463,[1257],[441],[421],[280] !jvms: loop::doSum @ bci:40 (line 12)
	 after  replace_input_of: head = 1463,  1463  CountedLoop  ===  1463  440  401  [[ 1437  1451  1463  1244  1466  1469  389  436 ]] inner stride: 4 main of N1463 strip mined !orig=[1257],[441],[421],[280] !jvms: loop::doSum @ bci:40 (line 12)
	 after  replace_input_of: slow_head = 2153,  2153  CountedLoop  ===  2153  2161  2155  [[ 2099  2103  2107  2127  2153  2154  2158  2159 ]] inner stride: 4 main of N2153 strip mined !orig=1463,[1257],[441],[421],[280] !jvms: loop::doSum @ bci:40 (line 12)
Loop: N0/N0  has_sfpt
  Loop: N752/N761  counted [0,int),+1 (4 iters)  pre has_sfpt
  Loop: N429/N428  sfpts={ 431 }
    Loop: N1794/N217  counted [int,int),+16 (2749 iters)  main vector has_sfpt strip_mined
  Loop: N711/N720  counted [int,int),+1 (4 iters)  post has_sfpt
  Loop: N1042/N1052  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N440/N439  sfpts={ 442 }
    Loop: N1463/N401  counted [int,int),+4 (6 iters)  main vector has_sfpt strip_mined
  Loop: N1003/N1013  counted [int,int),+1 (4 iters)  post has_sfpt
PostVector      Loop: N1794/N217  counted [int,int),+16 (2749 iters)  main vector has_sfpt strip_mined
Unroll 32         Loop: N1794/N217  counted [int,int),+16 (2749 iters)  main vector has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N752/N761  counted [0,int),+1 (4 iters)  pre has_sfpt
  Loop: N429/N428  sfpts={ 431 }
    Loop: N2302/N217  counted [int,int),+32 (2749 iters)  main vector has_sfpt strip_mined
  Loop: N2208/N2210  counted [int,int),+16 (16 iters)  post vector has_sfpt
  Loop: N711/N720  counted [int,int),+1 (4 iters)  post has_sfpt
  Loop: N1042/N1052  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N440/N439  sfpts={ 442 }
    Loop: N1463/N401  counted [int,int),+4 (6 iters)  main vector has_sfpt strip_mined
  Loop: N1003/N1013  counted [int,int),+1 (4 iters)  post has_sfpt
Unroll 64         Loop: N2302/N217  counted [int,int),+32 (2749 iters)  main vector has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N752/N761  counted [0,int),+1 (4 iters)  pre has_sfpt
  Loop: N429/N428  sfpts={ 431 }
    Loop: N2412/N217  counted [int,int),+64 (2749 iters)  main vector has_sfpt strip_mined
  Loop: N2208/N2210  counted [int,int),+16 (16 iters)  post vector has_sfpt
  Loop: N711/N720  counted [int,int),+1 (4 iters)  post has_sfpt
  Loop: N1042/N1052  counted [int,int),+1 (4 iters)  pre has_sfpt
  Loop: N440/N439  sfpts={ 442 }
    Loop: N1463/N401  counted [int,int),+4 (6 iters)  main vector has_sfpt strip_mined
  Loop: N1003/N1013  counted [int,int),+1 (4 iters)  post has_sfpt

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 25 ------------------------
{method}
 - this oop:          0x00007ff8c480e438
 - method holder:     'loop'
 - constants:         0x00007ff8c480e048 constant pool [62]/operands[5] {0x00007ff8c480e048} for 'loop' cache=0x00007ff8c480e6e0
 - access:            0xc1000001  public 
 - name:              'doSum'
 - signature:         '([F[F[F)V'
 - max stack:         6
 - max locals:        5
 - size of params:    4
 - method size:       13
 - vtable index:      5
 - i2i entry:         0x00007ff924c84c00
 - adapters:          AHE@0x00007ff920309880: 0xbbbb i2c: 0x00007ff924d1d7e0 c2i: 0x00007ff924d1d8cc c2iUV: 0x00007ff924d1d896 c2iNCI: 0x00007ff924d1d909
 - compiled entry     0x00007ff924d1d8cc
 - code size:         60
 - code start:        0x00007ff8c480e3e8
 - code end (excl):   0x00007ff8c480e424
 - method data:       0x00007ff8c480e918
 - checked ex length: 0
 - linenumber start:  0x00007ff8c480e424
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 25 -----------------------
#
#  void ( loop:NotNull *, float[int:>=0]:exact *, float[int:>=0]:exact *, float[int:>=0]:exact * )
#
#r018 rsi:rsi   : parm 0: loop:NotNull *
#r016 rdx:rdx   : parm 1: float[int:>=0]:exact *
#r010 rcx:rcx   : parm 2: float[int:>=0]:exact *
#r004 r8:r8   : parm 3: float[int:>=0]:exact *
# -- Old rsp -- Framesize: 64 --
#r591 rsp+60: in_preserve
#r590 rsp+56: return address
#r589 rsp+52: in_preserve
#r588 rsp+48: saved fp register
#r587 rsp+44: pad2, stack alignment
#r586 rsp+40: pad2, stack alignment
#r585 rsp+36: Fixed slot 1
#r584 rsp+32: Fixed slot 0
#r599 rsp+28: spill
#r598 rsp+24: spill
#r597 rsp+20: spill
#r596 rsp+16: spill
#r595 rsp+12: spill
#r594 rsp+ 8: spill
#r593 rsp+ 4: spill
#r592 rsp+ 0: spill
#
000     N703: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

        nop 	# 4 bytes pad for loops and calls

020     B1: #	out( B67 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (176 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movq    R10, java/lang/Class:exact *	# ptr
036     movl    RBP, [R10 + #112 (8-bit)]	# int ! Field: loop.LEN
03a     movl    RAX, RBP	# spill
03c     addl    RAX, #-5	# int
03f     xorl    R13, R13	# int
042     # TLS is in R15
042     movl    R14, #-2147483648	# int
048     testl   RAX, RAX
04a     jle     B67  P=0.000364 C=12551717.000000

050     B2: #	out( B68 B3 ) <- in( B1 )  Freq: 0.999636
050     movl    R10, [RCX + #12 (8-bit)]	# range
054     NullCheck RCX

054     B3: #	out( B68 B4 ) <- in( B2 )  Freq: 0.999635
054     testl   R10, R10	# unsigned
057     jbe,u   B68  P=0.000001 C=-1.000000

05d     B4: #	out( B68 B5 ) <- in( B3 )  Freq: 0.999634
05d     movslq  RDI, RAX	# i2l
060     movslq  R11, R10	# i2l
063     decq    RDI	# long
066     cmpq    RDI, R11	# unsigned
069     jnb,u   B68  P=0.000001 C=-1.000000

06f     B5: #	out( B68 B6 ) <- in( B4 )  Freq: 0.999633
06f     movl    R11, [R8 + #12 (8-bit)]	# range
073     NullCheck R8

073     B6: #	out( B68 B7 ) <- in( B5 )  Freq: 0.999632
073     testl   R11, R11	# unsigned
076     jbe,u   B68  P=0.000001 C=-1.000000

07c     B7: #	out( B68 B8 ) <- in( B6 )  Freq: 0.999631
07c     movslq  R9, R11	# i2l
        nop 	# 1 bytes pad for loops and calls
080     cmpq    RDI, R9	# unsigned
083     jnb,u   B68  P=0.000001 C=-1.000000

089     B8: #	out( B68 B9 ) <- in( B7 )  Freq: 0.99963
089     movl    RBX, [RDX + #12 (8-bit)]	# range
08c     NullCheck RDX

08c     B9: #	out( B68 B10 ) <- in( B8 )  Freq: 0.999629
08c     testl   RBX, RBX	# unsigned
08e     jbe,u   B68  P=0.000001 C=-1.000000

094     B10: #	out( B68 B11 ) <- in( B9 )  Freq: 0.999628
094     movslq  R9, RBX	# i2l
097     cmpq    RDI, R9	# unsigned
        nop 	# 6 bytes pad for loops and calls
0a0     jnb,u   B68  P=0.000001 C=-1.000000

0a6     B11: #	out( B12 ) <- in( B10 )  Freq: 0.999627
0a6     movl    RDI, RDX	# ptr -> int
0a8     shrl    RDI, #2
0ab     andl    RDI, #15	# int
0ae     movl    R9, #11	# int
0b4     subl    R9, RDI	# int
0b7     andl    R9, #15	# int
0bb     incl    R9	# int
0be     cmpl    R9, RAX
0c1     cmovlgt R9, RAX	# min
0c5     xorl    RDI, RDI	# int

0c7     B12: #	out( B12 B13 ) <- in( B11 B12 ) Loop( B12-B12 inner pre of N430) Freq: 1.99925
0c7     movss   XMM1, [R8 + #16 + RDI << #2]	# float
0ce     vaddss  XMM0, XMM1, [RCX + #16 + RDI << #2]
0d4     movss   [RDX + #16 + RDI << #2], XMM0	# float
0da     incl    RDI	# int
        nop 	# 4 bytes pad for loops and calls
0e0     cmpl    RDI, R9
0e3     jl,s   B12	# loop end  P=0.500000 C=12547152.000000

0e5     B13: #	out( B31 B14 ) <- in( B12 )  Freq: 0.999627
0e5     movl    R9, RBP	# spill
0e8     addl    R9, #-68	# int
0ec     cmpl    RAX, R9
0ef     cmovll R9, R14	# signed, int
0f3     cmpl    RDI, R9
0f6     jge     B31  P=0.000001 C=-1.000000

0fc     B14: #	out( B69 B15 ) <- in( B13 )  Freq: 0.999626
0fc     # castII of RDI
        nop 	# 4 bytes pad for loops and calls
100     cmpl    RDI, RBX	# unsigned
102     jnb,u   B69  P=0.000001 C=-1.000000

108     B15: #	out( B70 B16 ) <- in( B14 )  Freq: 0.999625
108     cmpl    RDI, R11	# unsigned
10b     jnb,u   B70  P=0.000001 C=-1.000000

111     B16: #	out( B71 B17 ) <- in( B15 )  Freq: 0.999624
111     cmpl    RDI, R10	# unsigned
114     jnb,u   B71  P=0.000001 C=-1.000000

11a     B17: #	out( B72 B18 ) <- in( B16 )  Freq: 0.999623
        nop 	# 6 bytes pad for loops and calls
120     cmpl    RDI, R10	# unsigned
123     jnb,u   B72  P=0.000001 C=-1.000000

129     B18: #	out( B73 B19 ) <- in( B17 )  Freq: 0.999622
129     cmpl    RDI, R10	# unsigned
12c     jnb,u   B73  P=0.000001 C=-1.000000

132     B19: #	out( B74 B20 ) <- in( B18 )  Freq: 0.999621
132     movl    RSI, RDI	# spill
134     addl    RSI, #63	# int
137     cmpl    RSI, R10	# unsigned
        nop 	# 6 bytes pad for loops and calls
140     jnb,u   B74  P=0.000001 C=-1.000000

146     B20: #	out( B75 B21 ) <- in( B19 )  Freq: 0.99962
146     cmpl    RDI, R11	# unsigned
149     jnb,u   B75  P=0.000001 C=-1.000000

14f     B21: #	out( B76 B22 ) <- in( B20 )  Freq: 0.999619
14f     cmpl    RSI, R11	# unsigned
152     jnb,u   B76  P=0.000001 C=-1.000000

158     B22: #	out( B77 B23 ) <- in( B21 )  Freq: 0.999618
158     cmpl    RDI, RBX	# unsigned
        nop 	# 6 bytes pad for loops and calls
160     jnb,u   B77  P=0.000001 C=-1.000000

166     B23: #	out( B78 B24 ) <- in( B22 )  Freq: 0.999617
166     cmpl    RSI, RBX	# unsigned
168     jnb,u   B78  P=0.000001 C=-1.000000

16e     B24: #	out( B25 ) <- in( B23 )  Freq: 0.999616
16e     movl    R10, #64000	# int

174     B25: #	out( B26 ) <- in( B24 B27 ) Loop( B25-B27 ) Freq: 2748.41
174     movl    R11, R9	# spill
177     subl    R11, RDI	# int
17a     cmpl    R9, RDI
17d     cmovll R11, R13	# signed, int
181     cmpl    R11, #64000	# unsigned
188     cmovlnbe R11, R10	# unsigned, int
18c     addl    R11, RDI	# int
        nop 	# 1 bytes pad for loops and calls

190     B26: #	out( B26 B27 ) <- in( B25 B26 ) Loop( B26-B26 inner main of N214 strip mined) Freq: 7.55664e+06
190     load_vector XMM0,[R8 + #16 + RDI << #2]
19b     vaddps  XMM0,XMM0,[RCX + #16 + RDI << #2]	! add packedF
1a6     store_vector [RDX + #16 + RDI << #2],XMM0
	
1b1     load_vector XMM0,[R8 + #80 + RDI << #2]
1bc     vaddps  XMM0,XMM0,[RCX + #80 + RDI << #2]	! add packedF
1c7     store_vector [RDX + #80 + RDI << #2],XMM0
	
1d2     load_vector XMM0,[R8 + #144 + RDI << #2]
1dd     vaddps  XMM0,XMM0,[RCX + #144 + RDI << #2]	! add packedF
1e8     store_vector [RDX + #144 + RDI << #2],XMM0
	
1f3     load_vector XMM0,[R8 + #208 + RDI << #2]
1fe     vaddps  XMM0,XMM0,[RCX + #208 + RDI << #2]	! add packedF
209     store_vector [RDX + #208 + RDI << #2],XMM0
	
214     addl    RDI, #64	# int
217     cmpl    RDI, R11
        nop 	# 6 bytes pad for loops and calls
220     jl     B26	# loop end  P=0.999636 C=12547152.000000

226     B27: #	out( B25 B28 ) <- in( B26 )  Freq: 2748.41
226     movq    R11, [R15 + #912 (32-bit)]	# ptr
22d     testl   rax, [R11]	# Safepoint: poll for GC        # loop::doSum @ bci:29 (line 9) L[0]=_ L[1]=RDX L[2]=RCX L[3]=R8 L[4]=RDI
        # OopMap {r8=Oop rcx=Oop rdx=Oop off=557/0x22d}
230     cmpl    RDI, R9
233     jl     B25  P=0.999636 C=12547152.000000

239     B28: #	out( B31 B29 ) <- in( B27 )  Freq: 0.999616
239     movl    R11, RBP	# spill
23c     addl    R11, #-20	# int
240     cmpl    RAX, R11
243     cmovll R11, R14	# signed, int
247     cmpl    RDI, R11
24a     jge,s   B31  P=0.500000 C=-1.000000

24c     B29: #	out( B30 ) <- in( B28 )  Freq: 0.499808
24c     # castII of RDI

24c     B30: #	out( B30 B31 ) <- in( B29 B30 ) Loop( B30-B30 inner post of N1794) Freq: 0.999616
24c     load_vector XMM0,[R8 + #16 + RDI << #2]
257     vaddps  XMM0,XMM0,[RCX + #16 + RDI << #2]	! add packedF
262     store_vector [RDX + #16 + RDI << #2],XMM0
	
26d     addl    RDI, #16	# int
270     cmpl    RDI, R11
273     jl,s   B30	# loop end  P=0.500000 C=12547152.000000

275     B31: #	out( B34 B32 ) <- in( B13 B30 B28 )  Freq: 0.999617
275     cmpl    RDI, RAX
277     jge,s   B34  P=0.500000 C=-1.000000

279     B32: #	out( B33 ) <- in( B31 )  Freq: 0.499809
279     # castII of RDI
        nop 	# 3 bytes pad for loops and calls

27c     B33: #	out( B33 B34 ) <- in( B32 B33 ) Loop( B33-B33 inner post of N430) Freq: 0.999617
27c     movss   XMM0, [R8 + #16 + RDI << #2]	# float
283     vaddss  XMM1, XMM0, [RCX + #16 + RDI << #2]
289     movss   [RDX + #16 + RDI << #2], XMM1	# float
28f     incl    RDI	# int
291     cmpl    RDI, RAX
293     jl,s   B33	# loop end  P=0.500000 C=12547152.000000

295     B34: #	out( B66 B35 ) <- in( B33 B31 B67 )  Freq: 0.999981
295     cmpl    RDI, RBP
297     jge     B66  P=0.166661 C=27391.000000

29d     B35: #	out( B79 B36 ) <- in( B34 )  Freq: 0.833323
        nop 	# 3 bytes pad for loops and calls
2a0     movl    RBX, [RCX + #12 (8-bit)]	# range
2a3     NullCheck RCX

2a3     B36: #	out( B79 B37 ) <- in( B35 )  Freq: 0.833323
2a3     cmpl    RDI, RBX	# unsigned
2a5     jnb,u   B79  P=0.000001 C=-1.000000

2ab     B37: #	out( B79 B38 ) <- in( B36 )  Freq: 0.833322
2ab     movslq  R10, RBX	# i2l
2ae     movslq  R11, RBP	# i2l
2b1     decq    R11	# long
2b4     cmpq    R11, R10	# unsigned
2b7     jnb,u   B79  P=0.000001 C=-1.000000

2bd     B38: #	out( B79 B39 ) <- in( B37 )  Freq: 0.833321
        nop 	# 3 bytes pad for loops and calls
2c0     movl    R9, [R8 + #12 (8-bit)]	# range
2c4     NullCheck R8

2c4     B39: #	out( B79 B40 ) <- in( B38 )  Freq: 0.83332
2c4     cmpl    RDI, R9	# unsigned
2c7     jnb,u   B79  P=0.000001 C=-1.000000

2cd     B40: #	out( B79 B41 ) <- in( B39 )  Freq: 0.833319
2cd     movslq  R10, R9	# i2l
2d0     cmpq    R11, R10	# unsigned
2d3     jnb,u   B79  P=0.000001 C=-1.000000

2d9     B41: #	out( B79 B42 ) <- in( B40 )  Freq: 0.833318
2d9     movl    RSI, [RDX + #12 (8-bit)]	# range
2dc     NullCheck RDX

2dc     B42: #	out( B79 B43 ) <- in( B41 )  Freq: 0.833317
        nop 	# 4 bytes pad for loops and calls
2e0     cmpl    RDI, RSI	# unsigned
2e2     jnb,u   B79  P=0.000001 C=-1.000000

2e8     B43: #	out( B79 B44 ) <- in( B42 )  Freq: 0.833317
2e8     movslq  R10, RSI	# i2l
2eb     cmpq    R11, R10	# unsigned
2ee     jnb,u   B79  P=0.000001 C=-1.000000

2f4     B44: #	out( B45 ) <- in( B43 )  Freq: 0.833316
2f4     movl    R10, RDX	# ptr -> int
2f7     shrl    R10, #2
2fb     andl    R10, #3	# int
2ff     addl    R10, RDI	# int
302     movl    R11, #-1	# int
308     subl    R11, R10	# int
30b     andl    R11, #3	# int
30f     addl    R11, RDI	# int
312     incl    R11	# int
315     cmpl    R11, RBP
318     cmovlgt R11, RBP	# min

31c     B45: #	out( B45 B46 ) <- in( B44 B45 ) Loop( B45-B45 inner pre of N441) Freq: 1.66663
31c     movss   XMM0, [RCX + #16 + RDI << #2]	# float
322     vaddss  XMM1, XMM0, [R8 + #16 + RDI << #2]
329     movss   [RDX + #16 + RDI << #2], XMM1	# float
32f     incl    RDI	# int
331     cmpl    RDI, R11
334     jl,s   B45	# loop end  P=0.500000 C=22826.000000

336     B46: #	out( B63 B47 ) <- in( B45 )  Freq: 0.833316
336     movl    R10, RBP	# spill
339     addl    R10, #-3	# int
33d     cmpl    RBP, R10
340     cmovll R10, R14	# signed, int
344     cmpl    RDI, R10
347     jge     B63  P=0.000001 C=-1.000000

34d     B47: #	out( B80 B48 ) <- in( B46 )  Freq: 0.833315
34d     # castII of RDI
34d     cmpl    RDI, RSI	# unsigned
34f     jnb,u   B80  P=0.000001 C=-1.000000

355     B48: #	out( B81 B49 ) <- in( B47 )  Freq: 0.833314
355     cmpl    RDI, RSI	# unsigned
357     jnb,u   B81  P=0.000001 C=-1.000000

35d     B49: #	out( B82 B50 ) <- in( B48 )  Freq: 0.833313
        nop 	# 3 bytes pad for loops and calls
360     cmpl    RDI, R9	# unsigned
363     jnb,u   B82  P=0.000001 C=-1.000000

369     B50: #	out( B83 B51 ) <- in( B49 )  Freq: 0.833312
369     cmpl    RDI, R9	# unsigned
36c     jnb,u   B83  P=0.000001 C=-1.000000

372     B51: #	out( B84 B52 ) <- in( B50 )  Freq: 0.833312
372     cmpl    RDI, RBX	# unsigned
374     jnb,u   B84  P=0.000001 C=-1.000000

37a     B52: #	out( B85 B53 ) <- in( B51 )  Freq: 0.833311
37a     cmpl    RDI, RBX	# unsigned
        nop 	# 4 bytes pad for loops and calls
380     jnb,u   B85  P=0.000001 C=-1.000000

386     B53: #	out( B86 B54 ) <- in( B52 )  Freq: 0.83331
386     cmpl    RDI, RBX	# unsigned
388     jnb,u   B86  P=0.000001 C=-1.000000

38e     B54: #	out( B87 B55 ) <- in( B53 )  Freq: 0.833309
38e     movl    R11, RDI	# spill
391     addl    R11, #3	# int
395     cmpl    R11, RBX	# unsigned
398     jnb,u   B87  P=0.000001 C=-1.000000

39e     B55: #	out( B88 B56 ) <- in( B54 )  Freq: 0.833308
        nop 	# 2 bytes pad for loops and calls
3a0     cmpl    RDI, R9	# unsigned
3a3     jnb,u   B88  P=0.000001 C=-1.000000

3a9     B56: #	out( B89 B57 ) <- in( B55 )  Freq: 0.833307
3a9     cmpl    R11, R9	# unsigned
3ac     jnb,u   B89  P=0.000001 C=-1.000000

3b2     B57: #	out( B90 B58 ) <- in( B56 )  Freq: 0.833307
3b2     cmpl    RDI, RSI	# unsigned
3b4     jnb,u   B90  P=0.000001 C=-1.000000

3ba     B58: #	out( B91 B59 ) <- in( B57 )  Freq: 0.833306
        nop 	# 6 bytes pad for loops and calls
3c0     cmpl    R11, RSI	# unsigned
3c3     jnb,u   B91  P=0.000001 C=-1.000000

3c9     B59: #	out( B60 ) <- in( B58 )  Freq: 0.833305
3c9     movl    R11, #4000	# int

3cf     B60: #	out( B61 ) <- in( B59 B62 ) Loop( B60-B62 ) Freq: 5.00001
3cf     movl    R9, R10	# spill
3d2     subl    R9, RDI	# int
3d5     cmpl    R10, RDI
3d8     cmovll R9, R13	# signed, int
3dc     cmpl    R9, #4000	# unsigned
3e3     cmovlnbe R9, R11	# unsigned, int
3e7     addl    R9, RDI	# int
        nop 	# 6 bytes pad for loops and calls

3f0     B61: #	out( B61 B62 ) <- in( B60 B61 ) Loop( B61-B61 inner main of N344 strip mined) Freq: 30.0012
3f0     load_vector XMM0,[RCX + #16 + RDI << #2]
3f6     vaddps  XMM0,XMM0,[R8 + #16 + RDI << #2]	! add packedF
3fd     store_vector [RDX + #16 + RDI << #2],XMM0
	
403     addl    RDI, #4	# int
406     cmpl    RDI, R9
409     jl,s   B61	# loop end  P=0.833339 C=22826.000000

40b     B62: #	out( B60 B63 ) <- in( B61 )  Freq: 5.00001
40b     movq    R9, [R15 + #912 (32-bit)]	# ptr
412     testl   rax, [R9]	# Safepoint: poll for GC        # loop::doSum @ bci:56 (line 11) L[0]=_ L[1]=RDX L[2]=RCX L[3]=R8 L[4]=RDI
        # OopMap {r8=Oop rcx=Oop rdx=Oop off=1042/0x412}
415     cmpl    RDI, R10
418     jl,s   B60  P=0.833339 C=22826.000000

41a     B63: #	out( B66 B64 ) <- in( B46 B62 )  Freq: 0.833306
41a     cmpl    RDI, RBP
41c     jge,s   B66  P=0.500000 C=-1.000000

41e     B64: #	out( B65 ) <- in( B63 )  Freq: 0.416653
41e     # castII of RDI
        nop 	# 2 bytes pad for loops and calls

420     B65: #	out( B65 B66 ) <- in( B64 B65 ) Loop( B65-B65 inner post of N441) Freq: 0.833306
420     movss   XMM0, [RCX + #16 + RDI << #2]	# float
426     vaddss  XMM1, XMM0, [R8 + #16 + RDI << #2]
42d     movss   [RDX + #16 + RDI << #2], XMM1	# float
433     incl    RDI	# int
435     cmpl    RDI, RBP
437     jl,s   B65	# loop end  P=0.500000 C=22826.000000

439     B66: #	out( N703 ) <- in( B65 B63 B34 )  Freq: 0.999963
439     vzeroupper
	addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

44e     ret

44f     B67: #	out( B34 ) <- in( B1 )  Freq: 0.000363695
44f     xorl    RDI, RDI	# int
451     jmp     B34

456     B68: #	out( N703 ) <- in( B8 B2 B3 B4 B10 B9 B5 B6 B7 )  Freq: 9.07633e-06
456     movl    RSI, #-138	# int
45b     movq    RBP, RDX	# spill
45e     movq    [rsp + #0], RCX	# spill
462     movq    [rsp + #8], R8	# spill
467     movl    [rsp + #16], RAX	# spill
        nop 	# 1 bytes pad for loops and calls
46c     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # loop::doSum @ bci:10 (line 9) L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #8 L[4]=#0 STK[0]=#0 STK[1]=rsp + #16
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=1140/0x474}
474     stop	# ShouldNotReachHere

488     B69: #	out( N703 ) <- in( B14 )  Freq: 1.0129e-06
488     stop	# ShouldNotReachHere

49c     B70: #	out( N703 ) <- in( B15 )  Freq: 1.0129e-06
49c     stop	# ShouldNotReachHere

4b0     B71: #	out( N703 ) <- in( B16 )  Freq: 1.0129e-06
4b0     stop	# ShouldNotReachHere

4c4     B72: #	out( N703 ) <- in( B17 )  Freq: 1.0129e-06
4c4     stop	# ShouldNotReachHere

4d8     B73: #	out( N703 ) <- in( B18 )  Freq: 1.0129e-06
4d8     stop	# ShouldNotReachHere

4ec     B74: #	out( N703 ) <- in( B19 )  Freq: 1.0129e-06
4ec     stop	# ShouldNotReachHere

500     B75: #	out( N703 ) <- in( B20 )  Freq: 1.01289e-06
500     stop	# ShouldNotReachHere

514     B76: #	out( N703 ) <- in( B21 )  Freq: 1.01289e-06
514     stop	# ShouldNotReachHere

528     B77: #	out( N703 ) <- in( B22 )  Freq: 1.01289e-06
528     stop	# ShouldNotReachHere

53c     B78: #	out( N703 ) <- in( B23 )  Freq: 1.01289e-06
53c     stop	# ShouldNotReachHere

550     B79: #	out( N703 ) <- in( B43 B35 B36 B37 B41 B42 B38 B39 B40 )  Freq: 7.59947e-06
550     movl    RSI, #-138	# int
555     movq    [rsp + #0], RDX	# spill
559     movq    [rsp + #8], RCX	# spill
55e     movq    [rsp + #16], R8	# spill
563     movl    [rsp + #28], RDI	# spill
        nop 	# 1 bytes pad for loops and calls
568     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # loop::doSum @ bci:37 (line 11) L[0]=_ L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #28 STK[0]=rsp + #28 STK[1]=RBP
        # OopMap {[0]=Oop [8]=Oop [16]=Oop off=1392/0x570}
570     stop	# ShouldNotReachHere

584     B80: #	out( N703 ) <- in( B47 )  Freq: 8.44381e-07
584     stop	# ShouldNotReachHere

598     B81: #	out( N703 ) <- in( B48 )  Freq: 8.4438e-07
598     stop	# ShouldNotReachHere

5ac     B82: #	out( N703 ) <- in( B49 )  Freq: 8.44379e-07
5ac     stop	# ShouldNotReachHere

5c0     B83: #	out( N703 ) <- in( B50 )  Freq: 8.44378e-07
5c0     stop	# ShouldNotReachHere

5d4     B84: #	out( N703 ) <- in( B51 )  Freq: 8.44377e-07
5d4     stop	# ShouldNotReachHere

5e8     B85: #	out( N703 ) <- in( B52 )  Freq: 8.44376e-07
5e8     stop	# ShouldNotReachHere

5fc     B86: #	out( N703 ) <- in( B53 )  Freq: 8.44375e-07
5fc     stop	# ShouldNotReachHere

610     B87: #	out( N703 ) <- in( B54 )  Freq: 8.44375e-07
610     stop	# ShouldNotReachHere

624     B88: #	out( N703 ) <- in( B55 )  Freq: 8.44374e-07
624     stop	# ShouldNotReachHere

638     B89: #	out( N703 ) <- in( B56 )  Freq: 8.44373e-07
638     stop	# ShouldNotReachHere

64c     B90: #	out( N703 ) <- in( B57 )  Freq: 8.44372e-07
64c     stop	# ShouldNotReachHere

660     B91: #	out( N703 ) <- in( B58 )  Freq: 8.44371e-07
660     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    1517   25             loop::doSum (60 bytes)
 total in heap  [0x00007ff924cd4f90,0x00007ff924cd5d68] = 3544
 relocation     [0x00007ff924cd5108,0x00007ff924cd5248] = 320
 main code      [0x00007ff924cd5260,0x00007ff924cd5900] = 1696
 stub code      [0x00007ff924cd5900,0x00007ff924cd5918] = 24
 oops           [0x00007ff924cd5918,0x00007ff924cd5920] = 8
 metadata       [0x00007ff924cd5920,0x00007ff924cd5928] = 8
 scopes data    [0x00007ff924cd5928,0x00007ff924cd59d8] = 176
 scopes pcs     [0x00007ff924cd59d8,0x00007ff924cd5d28] = 848
 dependencies   [0x00007ff924cd5d28,0x00007ff924cd5d30] = 8
 nul chk table  [0x00007ff924cd5d30,0x00007ff924cd5d68] = 56

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Entry Point]
  # {method} {0x00007ff8c480e438} 'doSum' '([F[F[F)V' in 'loop'
  # this:     rsi:rsi   = 'loop'
  # parm0:    rdx:rdx   = '[F'
  # parm1:    rcx:rcx   = '[F'
  # parm2:    r8:r8     = '[F'
  #           [sp+0x40]  (sp of caller)
 ;; N703: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007ff924cd5260:   mov    0x8(%rsi),%r10d
  0x00007ff924cd5264:   movabs $0x800000000,%r11
  0x00007ff924cd526e:   add    %r11,%r10
  0x00007ff924cd5271:   cmp    %r10,%rax
  0x00007ff924cd5274:   jne    0x00007ff924d8ce20           ;   {runtime_call ic_miss_stub}
  0x00007ff924cd527a:   nop
  0x00007ff924cd527b:   nop
  0x00007ff924cd527c:   nop
  0x00007ff924cd527d:   nop
  0x00007ff924cd527e:   nop
  0x00007ff924cd527f:   nop
[Verified Entry Point]
 ;; B1: #	out( B67 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007ff924cd5280:   mov    %eax,-0x16000(%rsp)
  0x00007ff924cd5287:   push   %rbp
  0x00007ff924cd5288:   sub    $0x30,%rsp                   ;*synchronization entry
                                                            ; - loop::doSum@-1 (line 8)
  0x00007ff924cd528c:   movabs $0x10157c150,%r10            ;   {oop(a 'java/lang/Class'{0x000000010157c150} = 'loop')}
  0x00007ff924cd5296:   mov    0x70(%r10),%ebp              ;*getstatic LEN {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@5 (line 9)
  0x00007ff924cd529a:   mov    %ebp,%eax
  0x00007ff924cd529c:   add    $0xfffffffb,%eax             ;*isub {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@9 (line 9)
  0x00007ff924cd529f:   xor    %r13d,%r13d                  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@29 (line 9)
  0x00007ff924cd52a2:   mov    $0x80000000,%r14d
  0x00007ff924cd52a8:   test   %eax,%eax
  0x00007ff924cd52aa:   jle    0x00007ff924cd56af           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@10 (line 9)
 ;; B2: #	out( B68 B3 ) <- in( B1 )  Freq: 0.999636
  0x00007ff924cd52b0:   mov    0xc(%rcx),%r10d              ; implicit exception: dispatches to 0x00007ff924cd56b6
                                                            ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@19 (line 10)
 ;; B3: #	out( B68 B4 ) <- in( B2 )  Freq: 0.999635
  0x00007ff924cd52b4:   test   %r10d,%r10d
  0x00007ff924cd52b7:   jbe    0x00007ff924cd56b6
 ;; B4: #	out( B68 B5 ) <- in( B3 )  Freq: 0.999634
  0x00007ff924cd52bd:   movslq %eax,%rdi
  0x00007ff924cd52c0:   movslq %r10d,%r11
  0x00007ff924cd52c3:   dec    %rdi
  0x00007ff924cd52c6:   cmp    %r11,%rdi
  0x00007ff924cd52c9:   jae    0x00007ff924cd56b6
 ;; B5: #	out( B68 B6 ) <- in( B4 )  Freq: 0.999633
  0x00007ff924cd52cf:   mov    0xc(%r8),%r11d               ; implicit exception: dispatches to 0x00007ff924cd56b6
                                                            ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@23 (line 10)
 ;; B6: #	out( B68 B7 ) <- in( B5 )  Freq: 0.999632
  0x00007ff924cd52d3:   test   %r11d,%r11d
  0x00007ff924cd52d6:   jbe    0x00007ff924cd56b6
 ;; B7: #	out( B68 B8 ) <- in( B6 )  Freq: 0.999631
  0x00007ff924cd52dc:   movslq %r11d,%r9
  0x00007ff924cd52df:   nop
  0x00007ff924cd52e0:   cmp    %r9,%rdi
  0x00007ff924cd52e3:   jae    0x00007ff924cd56b6
 ;; B8: #	out( B68 B9 ) <- in( B7 )  Freq: 0.99963
  0x00007ff924cd52e9:   mov    0xc(%rdx),%ebx               ; implicit exception: dispatches to 0x00007ff924cd56b6
                                                            ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@25 (line 10)
 ;; B9: #	out( B68 B10 ) <- in( B8 )  Freq: 0.999629
  0x00007ff924cd52ec:   test   %ebx,%ebx
  0x00007ff924cd52ee:   jbe    0x00007ff924cd56b6
 ;; B10: #	out( B68 B11 ) <- in( B9 )  Freq: 0.999628
  0x00007ff924cd52f4:   movslq %ebx,%r9
  0x00007ff924cd52f7:   cmp    %r9,%rdi
  0x00007ff924cd52fa:   nop
  0x00007ff924cd52fb:   nop
  0x00007ff924cd52fc:   nop
  0x00007ff924cd52fd:   nop
  0x00007ff924cd52fe:   nop
  0x00007ff924cd52ff:   nop
  0x00007ff924cd5300:   jae    0x00007ff924cd56b6
 ;; B11: #	out( B12 ) <- in( B10 )  Freq: 0.999627
  0x00007ff924cd5306:   mov    %edx,%edi
  0x00007ff924cd5308:   shr    $0x2,%edi
  0x00007ff924cd530b:   and    $0xf,%edi
  0x00007ff924cd530e:   mov    $0xb,%r9d
  0x00007ff924cd5314:   sub    %edi,%r9d
  0x00007ff924cd5317:   and    $0xf,%r9d
  0x00007ff924cd531b:   inc    %r9d
  0x00007ff924cd531e:   cmp    %eax,%r9d
  0x00007ff924cd5321:   cmovg  %eax,%r9d
  0x00007ff924cd5325:   xor    %edi,%edi                    ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@13 (line 10)
 ;; B12: #	out( B12 B13 ) <- in( B11 B12 ) Loop( B12-B12 inner pre of N430) Freq: 1.99925
  0x00007ff924cd5327:   vmovss 0x10(%r8,%rdi,4),%xmm1
  0x00007ff924cd532e:   vaddss 0x10(%rcx,%rdi,4),%xmm1,%xmm0
  0x00007ff924cd5334:   vmovss %xmm0,0x10(%rdx,%rdi,4)      ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@25 (line 10)
  0x00007ff924cd533a:   inc    %edi                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@26 (line 9)
  0x00007ff924cd533c:   nop
  0x00007ff924cd533d:   nop
  0x00007ff924cd533e:   nop
  0x00007ff924cd533f:   nop
  0x00007ff924cd5340:   cmp    %r9d,%edi
  0x00007ff924cd5343:   jl     0x00007ff924cd5327           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@10 (line 9)
 ;; B13: #	out( B31 B14 ) <- in( B12 )  Freq: 0.999627
  0x00007ff924cd5345:   mov    %ebp,%r9d
  0x00007ff924cd5348:   add    $0xffffffbc,%r9d
  0x00007ff924cd534c:   cmp    %r9d,%eax
  0x00007ff924cd534f:   cmovl  %r14d,%r9d
  0x00007ff924cd5353:   cmp    %r9d,%edi
  0x00007ff924cd5356:   jge    0x00007ff924cd54d5
 ;; B14: #	out( B69 B15 ) <- in( B13 )  Freq: 0.999626
  0x00007ff924cd535c:   nop
  0x00007ff924cd535d:   nop
  0x00007ff924cd535e:   nop
  0x00007ff924cd535f:   nop
  0x00007ff924cd5360:   cmp    %ebx,%edi
  0x00007ff924cd5362:   jae    0x00007ff924cd56e8
 ;; B15: #	out( B70 B16 ) <- in( B14 )  Freq: 0.999625
  0x00007ff924cd5368:   cmp    %r11d,%edi
  0x00007ff924cd536b:   jae    0x00007ff924cd56fc
 ;; B16: #	out( B71 B17 ) <- in( B15 )  Freq: 0.999624
  0x00007ff924cd5371:   cmp    %r10d,%edi
  0x00007ff924cd5374:   jae    0x00007ff924cd5710
 ;; B17: #	out( B72 B18 ) <- in( B16 )  Freq: 0.999623
  0x00007ff924cd537a:   nop
  0x00007ff924cd537b:   nop
  0x00007ff924cd537c:   nop
  0x00007ff924cd537d:   nop
  0x00007ff924cd537e:   nop
  0x00007ff924cd537f:   nop
  0x00007ff924cd5380:   cmp    %r10d,%edi
  0x00007ff924cd5383:   jae    0x00007ff924cd5724
 ;; B18: #	out( B73 B19 ) <- in( B17 )  Freq: 0.999622
  0x00007ff924cd5389:   cmp    %r10d,%edi
  0x00007ff924cd538c:   jae    0x00007ff924cd5738
 ;; B19: #	out( B74 B20 ) <- in( B18 )  Freq: 0.999621
  0x00007ff924cd5392:   mov    %edi,%esi
  0x00007ff924cd5394:   add    $0x3f,%esi
  0x00007ff924cd5397:   cmp    %r10d,%esi
  0x00007ff924cd539a:   nop
  0x00007ff924cd539b:   nop
  0x00007ff924cd539c:   nop
  0x00007ff924cd539d:   nop
  0x00007ff924cd539e:   nop
  0x00007ff924cd539f:   nop
  0x00007ff924cd53a0:   jae    0x00007ff924cd574c
 ;; B20: #	out( B75 B21 ) <- in( B19 )  Freq: 0.99962
  0x00007ff924cd53a6:   cmp    %r11d,%edi
  0x00007ff924cd53a9:   jae    0x00007ff924cd5760
 ;; B21: #	out( B76 B22 ) <- in( B20 )  Freq: 0.999619
  0x00007ff924cd53af:   cmp    %r11d,%esi
  0x00007ff924cd53b2:   jae    0x00007ff924cd5774
 ;; B22: #	out( B77 B23 ) <- in( B21 )  Freq: 0.999618
  0x00007ff924cd53b8:   cmp    %ebx,%edi
  0x00007ff924cd53ba:   nop
  0x00007ff924cd53bb:   nop
  0x00007ff924cd53bc:   nop
  0x00007ff924cd53bd:   nop
  0x00007ff924cd53be:   nop
  0x00007ff924cd53bf:   nop
  0x00007ff924cd53c0:   jae    0x00007ff924cd5788
 ;; B23: #	out( B78 B24 ) <- in( B22 )  Freq: 0.999617
  0x00007ff924cd53c6:   cmp    %ebx,%esi
  0x00007ff924cd53c8:   jae    0x00007ff924cd579c
 ;; B24: #	out( B25 ) <- in( B23 )  Freq: 0.999616
  0x00007ff924cd53ce:   mov    $0xfa00,%r10d
 ;; B25: #	out( B26 ) <- in( B24 B27 ) Loop( B25-B27 ) Freq: 2748.41
  0x00007ff924cd53d4:   mov    %r9d,%r11d
  0x00007ff924cd53d7:   sub    %edi,%r11d
  0x00007ff924cd53da:   cmp    %edi,%r9d
  0x00007ff924cd53dd:   cmovl  %r13d,%r11d
  0x00007ff924cd53e1:   cmp    $0xfa00,%r11d
  0x00007ff924cd53e8:   cmova  %r10d,%r11d
  0x00007ff924cd53ec:   add    %edi,%r11d
  0x00007ff924cd53ef:   nop                                 ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@13 (line 10)
 ;; B26: #	out( B26 B27 ) <- in( B25 B26 ) Loop( B26-B26 inner main of N214 strip mined) Freq: 7.55664e+06
  0x00007ff924cd53f0:   vmovdqu32 0x10(%r8,%rdi,4),%zmm0
  0x00007ff924cd53fb:   vaddps 0x10(%rcx,%rdi,4),%zmm0,%zmm0
  0x00007ff924cd5406:   vmovdqu32 %zmm0,0x10(%rdx,%rdi,4)
  0x00007ff924cd5411:   vmovdqu32 0x50(%r8,%rdi,4),%zmm0
  0x00007ff924cd541c:   vaddps 0x50(%rcx,%rdi,4),%zmm0,%zmm0
  0x00007ff924cd5427:   vmovdqu32 %zmm0,0x50(%rdx,%rdi,4)
  0x00007ff924cd5432:   vmovdqu32 0x90(%r8,%rdi,4),%zmm0
  0x00007ff924cd543d:   vaddps 0x90(%rcx,%rdi,4),%zmm0,%zmm0
  0x00007ff924cd5448:   vmovdqu32 %zmm0,0x90(%rdx,%rdi,4)
  0x00007ff924cd5453:   vmovdqu32 0xd0(%r8,%rdi,4),%zmm0
  0x00007ff924cd545e:   vaddps 0xd0(%rcx,%rdi,4),%zmm0,%zmm0
  0x00007ff924cd5469:   vmovdqu32 %zmm0,0xd0(%rdx,%rdi,4)   ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@25 (line 10)
  0x00007ff924cd5474:   add    $0x40,%edi                   ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@26 (line 9)
  0x00007ff924cd5477:   cmp    %r11d,%edi
  0x00007ff924cd547a:   nop
  0x00007ff924cd547b:   nop
  0x00007ff924cd547c:   nop
  0x00007ff924cd547d:   nop
  0x00007ff924cd547e:   nop
  0x00007ff924cd547f:   nop
  0x00007ff924cd5480:   jl     0x00007ff924cd53f0           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@29 (line 9)
 ;; B27: #	out( B25 B28 ) <- in( B26 )  Freq: 2748.41
  0x00007ff924cd5486:   mov    0x390(%r15),%r11             ; ImmutableOopMap {r8=Oop rcx=Oop rdx=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) loop::doSum@29 (line 9)
  0x00007ff924cd548d:   test   %eax,(%r11)                  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@29 (line 9)
                                                            ;   {poll}
  0x00007ff924cd5490:   cmp    %r9d,%edi
  0x00007ff924cd5493:   jl     0x00007ff924cd53d4
 ;; B28: #	out( B31 B29 ) <- in( B27 )  Freq: 0.999616
  0x00007ff924cd5499:   mov    %ebp,%r11d
  0x00007ff924cd549c:   add    $0xffffffec,%r11d
  0x00007ff924cd54a0:   cmp    %r11d,%eax
  0x00007ff924cd54a3:   cmovl  %r14d,%r11d
  0x00007ff924cd54a7:   cmp    %r11d,%edi
  0x00007ff924cd54aa:   jge    0x00007ff924cd54d5           ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@13 (line 10)
 ;; B29: #	out( B30 ) <- in( B28 )  Freq: 0.499808
 ;; B30: #	out( B30 B31 ) <- in( B29 B30 ) Loop( B30-B30 inner post of N1794) Freq: 0.999616
  0x00007ff924cd54ac:   vmovdqu32 0x10(%r8,%rdi,4),%zmm0
  0x00007ff924cd54b7:   vaddps 0x10(%rcx,%rdi,4),%zmm0,%zmm0
  0x00007ff924cd54c2:   vmovdqu32 %zmm0,0x10(%rdx,%rdi,4)   ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@25 (line 10)
  0x00007ff924cd54cd:   add    $0x10,%edi                   ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@26 (line 9)
  0x00007ff924cd54d0:   cmp    %r11d,%edi
  0x00007ff924cd54d3:   jl     0x00007ff924cd54ac           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@10 (line 9)
 ;; B31: #	out( B34 B32 ) <- in( B13 B30 B28 )  Freq: 0.999617
  0x00007ff924cd54d5:   cmp    %eax,%edi
  0x00007ff924cd54d7:   jge    0x00007ff924cd54f5
 ;; B32: #	out( B33 ) <- in( B31 )  Freq: 0.499809
  0x00007ff924cd54d9:   nop
  0x00007ff924cd54da:   nop
  0x00007ff924cd54db:   nop                                 ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@13 (line 10)
 ;; B33: #	out( B33 B34 ) <- in( B32 B33 ) Loop( B33-B33 inner post of N430) Freq: 0.999617
  0x00007ff924cd54dc:   vmovss 0x10(%r8,%rdi,4),%xmm0
  0x00007ff924cd54e3:   vaddss 0x10(%rcx,%rdi,4),%xmm0,%xmm1
  0x00007ff924cd54e9:   vmovss %xmm1,0x10(%rdx,%rdi,4)      ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@25 (line 10)
  0x00007ff924cd54ef:   inc    %edi                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@26 (line 9)
  0x00007ff924cd54f1:   cmp    %eax,%edi
  0x00007ff924cd54f3:   jl     0x00007ff924cd54dc           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@10 (line 9)
 ;; B34: #	out( B66 B35 ) <- in( B33 B31 B67 )  Freq: 0.999981
  0x00007ff924cd54f5:   cmp    %ebp,%edi
  0x00007ff924cd54f7:   jge    0x00007ff924cd5699           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@37 (line 11)
 ;; B35: #	out( B79 B36 ) <- in( B34 )  Freq: 0.833323
  0x00007ff924cd54fd:   nop
  0x00007ff924cd54fe:   nop
  0x00007ff924cd54ff:   nop
  0x00007ff924cd5500:   mov    0xc(%rcx),%ebx               ; implicit exception: dispatches to 0x00007ff924cd57b0
                                                            ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@46 (line 12)
 ;; B36: #	out( B79 B37 ) <- in( B35 )  Freq: 0.833323
  0x00007ff924cd5503:   cmp    %ebx,%edi
  0x00007ff924cd5505:   jae    0x00007ff924cd57b0
 ;; B37: #	out( B79 B38 ) <- in( B36 )  Freq: 0.833322
  0x00007ff924cd550b:   movslq %ebx,%r10
  0x00007ff924cd550e:   movslq %ebp,%r11
  0x00007ff924cd5511:   dec    %r11
  0x00007ff924cd5514:   cmp    %r10,%r11
  0x00007ff924cd5517:   jae    0x00007ff924cd57b0
 ;; B38: #	out( B79 B39 ) <- in( B37 )  Freq: 0.833321
  0x00007ff924cd551d:   nop
  0x00007ff924cd551e:   nop
  0x00007ff924cd551f:   nop
  0x00007ff924cd5520:   mov    0xc(%r8),%r9d                ; implicit exception: dispatches to 0x00007ff924cd57b0
                                                            ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@50 (line 12)
 ;; B39: #	out( B79 B40 ) <- in( B38 )  Freq: 0.83332
  0x00007ff924cd5524:   cmp    %r9d,%edi
  0x00007ff924cd5527:   jae    0x00007ff924cd57b0
 ;; B40: #	out( B79 B41 ) <- in( B39 )  Freq: 0.833319
  0x00007ff924cd552d:   movslq %r9d,%r10
  0x00007ff924cd5530:   cmp    %r10,%r11
  0x00007ff924cd5533:   jae    0x00007ff924cd57b0
 ;; B41: #	out( B79 B42 ) <- in( B40 )  Freq: 0.833318
  0x00007ff924cd5539:   mov    0xc(%rdx),%esi               ; implicit exception: dispatches to 0x00007ff924cd57b0
                                                            ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@52 (line 12)
 ;; B42: #	out( B79 B43 ) <- in( B41 )  Freq: 0.833317
  0x00007ff924cd553c:   nop
  0x00007ff924cd553d:   nop
  0x00007ff924cd553e:   nop
  0x00007ff924cd553f:   nop
  0x00007ff924cd5540:   cmp    %esi,%edi
  0x00007ff924cd5542:   jae    0x00007ff924cd57b0
 ;; B43: #	out( B79 B44 ) <- in( B42 )  Freq: 0.833317
  0x00007ff924cd5548:   movslq %esi,%r10
  0x00007ff924cd554b:   cmp    %r10,%r11
  0x00007ff924cd554e:   jae    0x00007ff924cd57b0
 ;; B44: #	out( B45 ) <- in( B43 )  Freq: 0.833316
  0x00007ff924cd5554:   mov    %edx,%r10d
  0x00007ff924cd5557:   shr    $0x2,%r10d
  0x00007ff924cd555b:   and    $0x3,%r10d
  0x00007ff924cd555f:   add    %edi,%r10d
  0x00007ff924cd5562:   mov    $0xffffffff,%r11d
  0x00007ff924cd5568:   sub    %r10d,%r11d
  0x00007ff924cd556b:   and    $0x3,%r11d
  0x00007ff924cd556f:   add    %edi,%r11d
  0x00007ff924cd5572:   inc    %r11d
  0x00007ff924cd5575:   cmp    %ebp,%r11d
  0x00007ff924cd5578:   cmovg  %ebp,%r11d                   ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@40 (line 12)
 ;; B45: #	out( B45 B46 ) <- in( B44 B45 ) Loop( B45-B45 inner pre of N441) Freq: 1.66663
  0x00007ff924cd557c:   vmovss 0x10(%rcx,%rdi,4),%xmm0
  0x00007ff924cd5582:   vaddss 0x10(%r8,%rdi,4),%xmm0,%xmm1
  0x00007ff924cd5589:   vmovss %xmm1,0x10(%rdx,%rdi,4)      ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@52 (line 12)
  0x00007ff924cd558f:   inc    %edi                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@53 (line 11)
  0x00007ff924cd5591:   cmp    %r11d,%edi
  0x00007ff924cd5594:   jl     0x00007ff924cd557c           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@37 (line 11)
 ;; B46: #	out( B63 B47 ) <- in( B45 )  Freq: 0.833316
  0x00007ff924cd5596:   mov    %ebp,%r10d
  0x00007ff924cd5599:   add    $0xfffffffd,%r10d
  0x00007ff924cd559d:   cmp    %r10d,%ebp
  0x00007ff924cd55a0:   cmovl  %r14d,%r10d
  0x00007ff924cd55a4:   cmp    %r10d,%edi
  0x00007ff924cd55a7:   jge    0x00007ff924cd567a
 ;; B47: #	out( B80 B48 ) <- in( B46 )  Freq: 0.833315
  0x00007ff924cd55ad:   cmp    %esi,%edi
  0x00007ff924cd55af:   jae    0x00007ff924cd57e4
 ;; B48: #	out( B81 B49 ) <- in( B47 )  Freq: 0.833314
  0x00007ff924cd55b5:   cmp    %esi,%edi
  0x00007ff924cd55b7:   jae    0x00007ff924cd57f8
 ;; B49: #	out( B82 B50 ) <- in( B48 )  Freq: 0.833313
  0x00007ff924cd55bd:   nop
  0x00007ff924cd55be:   nop
  0x00007ff924cd55bf:   nop
  0x00007ff924cd55c0:   cmp    %r9d,%edi
  0x00007ff924cd55c3:   jae    0x00007ff924cd580c
 ;; B50: #	out( B83 B51 ) <- in( B49 )  Freq: 0.833312
  0x00007ff924cd55c9:   cmp    %r9d,%edi
  0x00007ff924cd55cc:   jae    0x00007ff924cd5820
 ;; B51: #	out( B84 B52 ) <- in( B50 )  Freq: 0.833312
  0x00007ff924cd55d2:   cmp    %ebx,%edi
  0x00007ff924cd55d4:   jae    0x00007ff924cd5834
 ;; B52: #	out( B85 B53 ) <- in( B51 )  Freq: 0.833311
  0x00007ff924cd55da:   cmp    %ebx,%edi
  0x00007ff924cd55dc:   nop
  0x00007ff924cd55dd:   nop
  0x00007ff924cd55de:   nop
  0x00007ff924cd55df:   nop
  0x00007ff924cd55e0:   jae    0x00007ff924cd5848
 ;; B53: #	out( B86 B54 ) <- in( B52 )  Freq: 0.83331
  0x00007ff924cd55e6:   cmp    %ebx,%edi
  0x00007ff924cd55e8:   jae    0x00007ff924cd585c
 ;; B54: #	out( B87 B55 ) <- in( B53 )  Freq: 0.833309
  0x00007ff924cd55ee:   mov    %edi,%r11d
  0x00007ff924cd55f1:   add    $0x3,%r11d
  0x00007ff924cd55f5:   cmp    %ebx,%r11d
  0x00007ff924cd55f8:   jae    0x00007ff924cd5870
 ;; B55: #	out( B88 B56 ) <- in( B54 )  Freq: 0.833308
  0x00007ff924cd55fe:   nop
  0x00007ff924cd55ff:   nop
  0x00007ff924cd5600:   cmp    %r9d,%edi
  0x00007ff924cd5603:   jae    0x00007ff924cd5884
 ;; B56: #	out( B89 B57 ) <- in( B55 )  Freq: 0.833307
  0x00007ff924cd5609:   cmp    %r9d,%r11d
  0x00007ff924cd560c:   jae    0x00007ff924cd5898
 ;; B57: #	out( B90 B58 ) <- in( B56 )  Freq: 0.833307
  0x00007ff924cd5612:   cmp    %esi,%edi
  0x00007ff924cd5614:   jae    0x00007ff924cd58ac
 ;; B58: #	out( B91 B59 ) <- in( B57 )  Freq: 0.833306
  0x00007ff924cd561a:   nop
  0x00007ff924cd561b:   nop
  0x00007ff924cd561c:   nop
  0x00007ff924cd561d:   nop
  0x00007ff924cd561e:   nop
  0x00007ff924cd561f:   nop
  0x00007ff924cd5620:   cmp    %esi,%r11d
  0x00007ff924cd5623:   jae    0x00007ff924cd58c0
 ;; B59: #	out( B60 ) <- in( B58 )  Freq: 0.833305
  0x00007ff924cd5629:   mov    $0xfa0,%r11d
 ;; B60: #	out( B61 ) <- in( B59 B62 ) Loop( B60-B62 ) Freq: 5.00001
  0x00007ff924cd562f:   mov    %r10d,%r9d
  0x00007ff924cd5632:   sub    %edi,%r9d
  0x00007ff924cd5635:   cmp    %edi,%r10d
  0x00007ff924cd5638:   cmovl  %r13d,%r9d
  0x00007ff924cd563c:   cmp    $0xfa0,%r9d
  0x00007ff924cd5643:   cmova  %r11d,%r9d
  0x00007ff924cd5647:   add    %edi,%r9d
  0x00007ff924cd564a:   nop
  0x00007ff924cd564b:   nop
  0x00007ff924cd564c:   nop
  0x00007ff924cd564d:   nop
  0x00007ff924cd564e:   nop
  0x00007ff924cd564f:   nop                                 ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@40 (line 12)
 ;; B61: #	out( B61 B62 ) <- in( B60 B61 ) Loop( B61-B61 inner main of N344 strip mined) Freq: 30.0012
  0x00007ff924cd5650:   vmovdqu 0x10(%rcx,%rdi,4),%xmm0
  0x00007ff924cd5656:   vaddps 0x10(%r8,%rdi,4),%xmm0,%xmm0
  0x00007ff924cd565d:   vmovdqu %xmm0,0x10(%rdx,%rdi,4)     ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@52 (line 12)
  0x00007ff924cd5663:   add    $0x4,%edi                    ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@53 (line 11)
  0x00007ff924cd5666:   cmp    %r9d,%edi
  0x00007ff924cd5669:   jl     0x00007ff924cd5650           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@56 (line 11)
 ;; B62: #	out( B60 B63 ) <- in( B61 )  Freq: 5.00001
  0x00007ff924cd566b:   mov    0x390(%r15),%r9              ; ImmutableOopMap {r8=Oop rcx=Oop rdx=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) loop::doSum@56 (line 11)
  0x00007ff924cd5672:   test   %eax,(%r9)                   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@56 (line 11)
                                                            ;   {poll}
  0x00007ff924cd5675:   cmp    %r10d,%edi
  0x00007ff924cd5678:   jl     0x00007ff924cd562f
 ;; B63: #	out( B66 B64 ) <- in( B46 B62 )  Freq: 0.833306
  0x00007ff924cd567a:   cmp    %ebp,%edi
  0x00007ff924cd567c:   jge    0x00007ff924cd5699
 ;; B64: #	out( B65 ) <- in( B63 )  Freq: 0.416653
  0x00007ff924cd567e:   nop
  0x00007ff924cd567f:   nop                                 ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@40 (line 12)
 ;; B65: #	out( B65 B66 ) <- in( B64 B65 ) Loop( B65-B65 inner post of N441) Freq: 0.833306
  0x00007ff924cd5680:   vmovss 0x10(%rcx,%rdi,4),%xmm0
  0x00007ff924cd5686:   vaddss 0x10(%r8,%rdi,4),%xmm0,%xmm1
  0x00007ff924cd568d:   vmovss %xmm1,0x10(%rdx,%rdi,4)      ;*fastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@52 (line 12)
  0x00007ff924cd5693:   inc    %edi                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@53 (line 11)
  0x00007ff924cd5695:   cmp    %ebp,%edi
  0x00007ff924cd5697:   jl     0x00007ff924cd5680           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@37 (line 11)
 ;; B66: #	out( N703 ) <- in( B65 B63 B34 )  Freq: 0.999963
  0x00007ff924cd5699:   vzeroupper 
  0x00007ff924cd569c:   add    $0x30,%rsp
  0x00007ff924cd56a0:   pop    %rbp
  0x00007ff924cd56a1:   cmp    0x388(%r15),%rsp             ;   {poll_return}
  0x00007ff924cd56a8:   ja     0x00007ff924cd58d4
  0x00007ff924cd56ae:   retq   
 ;; B67: #	out( B34 ) <- in( B1 )  Freq: 0.000363695
  0x00007ff924cd56af:   xor    %edi,%edi
  0x00007ff924cd56b1:   jmpq   0x00007ff924cd54f5           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@10 (line 9)
 ;; B68: #	out( N703 ) <- in( B8 B2 B3 B4 B10 B9 B5 B6 B7 )  Freq: 9.07633e-06
  0x00007ff924cd56b6:   mov    $0xffffff76,%esi
  0x00007ff924cd56bb:   mov    %rdx,%rbp
  0x00007ff924cd56be:   mov    %rcx,(%rsp)
  0x00007ff924cd56c2:   mov    %r8,0x8(%rsp)
  0x00007ff924cd56c7:   mov    %eax,0x10(%rsp)
  0x00007ff924cd56cb:   nop
  0x00007ff924cd56cc:   vzeroupper 
  0x00007ff924cd56cf:   callq  0x00007ff924d95940           ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) loop::doSum@10 (line 9)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007ff924cd56d4:   movabs $0x7ff9296f09c0,%rdi         ;   {external_word}
  0x00007ff924cd56de:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd56e2:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd56e7:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@10 (line 9)
 ;; B69: #	out( N703 ) <- in( B14 )  Freq: 1.0129e-06
  0x00007ff924cd56e8:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd56f2:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd56f6:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd56fb:   hlt    
 ;; B70: #	out( N703 ) <- in( B15 )  Freq: 1.0129e-06
  0x00007ff924cd56fc:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd5706:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd570a:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd570f:   hlt    
 ;; B71: #	out( N703 ) <- in( B16 )  Freq: 1.0129e-06
  0x00007ff924cd5710:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd571a:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd571e:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd5723:   hlt    
 ;; B72: #	out( N703 ) <- in( B17 )  Freq: 1.0129e-06
  0x00007ff924cd5724:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd572e:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd5732:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd5737:   hlt    
 ;; B73: #	out( N703 ) <- in( B18 )  Freq: 1.0129e-06
  0x00007ff924cd5738:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd5742:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd5746:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd574b:   hlt    
 ;; B74: #	out( N703 ) <- in( B19 )  Freq: 1.0129e-06
  0x00007ff924cd574c:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd5756:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd575a:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd575f:   hlt    
 ;; B75: #	out( N703 ) <- in( B20 )  Freq: 1.01289e-06
  0x00007ff924cd5760:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd576a:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd576e:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd5773:   hlt    
 ;; B76: #	out( N703 ) <- in( B21 )  Freq: 1.01289e-06
  0x00007ff924cd5774:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd577e:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd5782:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd5787:   hlt    
 ;; B77: #	out( N703 ) <- in( B22 )  Freq: 1.01289e-06
  0x00007ff924cd5788:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd5792:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd5796:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd579b:   hlt    
 ;; B78: #	out( N703 ) <- in( B23 )  Freq: 1.01289e-06
  0x00007ff924cd579c:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd57a6:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd57aa:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd57af:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@37 (line 11)
 ;; B79: #	out( N703 ) <- in( B43 B35 B36 B37 B41 B42 B38 B39 B40 )  Freq: 7.59947e-06
  0x00007ff924cd57b0:   mov    $0xffffff76,%esi
  0x00007ff924cd57b5:   mov    %rdx,(%rsp)
  0x00007ff924cd57b9:   mov    %rcx,0x8(%rsp)
  0x00007ff924cd57be:   mov    %r8,0x10(%rsp)
  0x00007ff924cd57c3:   mov    %edi,0x1c(%rsp)
  0x00007ff924cd57c7:   nop
  0x00007ff924cd57c8:   vzeroupper 
  0x00007ff924cd57cb:   callq  0x00007ff924d95940           ; ImmutableOopMap {[0]=Oop [8]=Oop [16]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) loop::doSum@37 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007ff924cd57d0:   movabs $0x7ff9296f09c0,%rdi         ;   {external_word}
  0x00007ff924cd57da:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd57de:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd57e3:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@37 (line 11)
 ;; B80: #	out( N703 ) <- in( B47 )  Freq: 8.44381e-07
  0x00007ff924cd57e4:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd57ee:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd57f2:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd57f7:   hlt    
 ;; B81: #	out( N703 ) <- in( B48 )  Freq: 8.4438e-07
  0x00007ff924cd57f8:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd5802:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd5806:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd580b:   hlt    
 ;; B82: #	out( N703 ) <- in( B49 )  Freq: 8.44379e-07
  0x00007ff924cd580c:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd5816:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd581a:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd581f:   hlt    
 ;; B83: #	out( N703 ) <- in( B50 )  Freq: 8.44378e-07
  0x00007ff924cd5820:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd582a:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd582e:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd5833:   hlt    
 ;; B84: #	out( N703 ) <- in( B51 )  Freq: 8.44377e-07
  0x00007ff924cd5834:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd583e:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd5842:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd5847:   hlt    
 ;; B85: #	out( N703 ) <- in( B52 )  Freq: 8.44376e-07
  0x00007ff924cd5848:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd5852:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd5856:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd585b:   hlt    
 ;; B86: #	out( N703 ) <- in( B53 )  Freq: 8.44375e-07
  0x00007ff924cd585c:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd5866:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd586a:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd586f:   hlt    
 ;; B87: #	out( N703 ) <- in( B54 )  Freq: 8.44375e-07
  0x00007ff924cd5870:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd587a:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd587e:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd5883:   hlt    
 ;; B88: #	out( N703 ) <- in( B55 )  Freq: 8.44374e-07
  0x00007ff924cd5884:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd588e:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd5892:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd5897:   hlt    
 ;; B89: #	out( N703 ) <- in( B56 )  Freq: 8.44373e-07
  0x00007ff924cd5898:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd58a2:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd58a6:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd58ab:   hlt    
 ;; B90: #	out( N703 ) <- in( B57 )  Freq: 8.44372e-07
  0x00007ff924cd58ac:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd58b6:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd58ba:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd58bf:   hlt    
 ;; B91: #	out( N703 ) <- in( B58 )  Freq: 8.44371e-07
  0x00007ff924cd58c0:   movabs $0x7ff929883b18,%rdi         ;   {external_word}
  0x00007ff924cd58ca:   and    $0xfffffffffffffff0,%rsp
  0x00007ff924cd58ce:   callq  0x00007ff928e7d6d0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff924cd58d3:   hlt                                 ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - loop::doSum@13 (line 10)
  0x00007ff924cd58d4:   movabs $0x7ff924cd56a1,%r10         ;   {internal_word}
  0x00007ff924cd58de:   mov    %r10,0x3a0(%r15)
  0x00007ff924cd58e5:   jmpq   0x00007ff924d946a0           ;   {runtime_call SafepointBlob}
  0x00007ff924cd58ea:   hlt    
  0x00007ff924cd58eb:   hlt    
  0x00007ff924cd58ec:   hlt    
  0x00007ff924cd58ed:   hlt    
  0x00007ff924cd58ee:   hlt    
  0x00007ff924cd58ef:   hlt    
  0x00007ff924cd58f0:   hlt    
  0x00007ff924cd58f1:   hlt    
  0x00007ff924cd58f2:   hlt    
  0x00007ff924cd58f3:   hlt    
  0x00007ff924cd58f4:   hlt    
  0x00007ff924cd58f5:   hlt    
  0x00007ff924cd58f6:   hlt    
  0x00007ff924cd58f7:   hlt    
  0x00007ff924cd58f8:   hlt    
  0x00007ff924cd58f9:   hlt    
  0x00007ff924cd58fa:   hlt    
  0x00007ff924cd58fb:   hlt    
  0x00007ff924cd58fc:   hlt    
  0x00007ff924cd58fd:   hlt    
  0x00007ff924cd58fe:   hlt    
  0x00007ff924cd58ff:   hlt    
[Exception Handler]
  0x00007ff924cd5900:   jmpq   0x00007ff924cf8720           ;   {no_reloc}
[Deopt Handler Code]
  0x00007ff924cd5905:   callq  0x00007ff924cd590a
  0x00007ff924cd590a:   subq   $0x5,(%rsp)
  0x00007ff924cd590f:   jmpq   0x00007ff924d95c60           ;   {runtime_call DeoptimizationBlob}
  0x00007ff924cd5914:   hlt    
  0x00007ff924cd5915:   hlt    
  0x00007ff924cd5916:   hlt    
  0x00007ff924cd5917:   hlt    
--------------------------------------------------------------------------------
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007ff924cd5918:   0x00000001014b7c68 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000001014b7c68}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007ff924cd5920:   0x00007ff8c480e438 {method} {0x00007ff8c480e438} 'doSum' '([F[F[F)V' in 'loop'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007ff924cd525f offset=ffffffff bits=0):
PcDesc(pc=0x00007ff924cd528c offset=2c bits=0):
   loop::doSum@-1 (line 8)
PcDesc(pc=0x00007ff924cd529a offset=3a bits=0):
   loop::doSum@5 (line 9)
PcDesc(pc=0x00007ff924cd529f offset=3f bits=0):
   loop::doSum@9 (line 9)
PcDesc(pc=0x00007ff924cd52a2 offset=42 bits=0):
   loop::doSum@29 (line 9)
PcDesc(pc=0x00007ff924cd52b0 offset=50 bits=0):
   loop::doSum@10 (line 9)
PcDesc(pc=0x00007ff924cd52b4 offset=54 bits=0):
   loop::doSum@19 (line 10)
PcDesc(pc=0x00007ff924cd52d3 offset=73 bits=0):
   loop::doSum@23 (line 10)
PcDesc(pc=0x00007ff924cd52ec offset=8c bits=0):
   loop::doSum@25 (line 10)
PcDesc(pc=0x00007ff924cd5327 offset=c7 bits=0):
   loop::doSum@13 (line 10)
PcDesc(pc=0x00007ff924cd533a offset=da bits=0):
   loop::doSum@25 (line 10)
PcDesc(pc=0x00007ff924cd533c offset=dc bits=0):
   loop::doSum@26 (line 9)
PcDesc(pc=0x00007ff924cd5345 offset=e5 bits=0):
   loop::doSum@10 (line 9)
PcDesc(pc=0x00007ff924cd53f0 offset=190 bits=0):
   loop::doSum@13 (line 10)
PcDesc(pc=0x00007ff924cd5474 offset=214 bits=0):
   loop::doSum@25 (line 10)
PcDesc(pc=0x00007ff924cd5477 offset=217 bits=0):
   loop::doSum@26 (line 9)
PcDesc(pc=0x00007ff924cd5486 offset=226 bits=0):
   loop::doSum@29 (line 9)
PcDesc(pc=0x00007ff924cd548d offset=22d bits=1):
   loop::doSum@29 (line 9)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: reg r8 [16],oop
    - l4: reg rdi [14],int
PcDesc(pc=0x00007ff924cd5490 offset=230 bits=0):
   loop::doSum@29 (line 9)
PcDesc(pc=0x00007ff924cd54ac offset=24c bits=0):
   loop::doSum@13 (line 10)
PcDesc(pc=0x00007ff924cd54cd offset=26d bits=0):
   loop::doSum@25 (line 10)
PcDesc(pc=0x00007ff924cd54d0 offset=270 bits=0):
   loop::doSum@26 (line 9)
PcDesc(pc=0x00007ff924cd54d5 offset=275 bits=0):
   loop::doSum@10 (line 9)
PcDesc(pc=0x00007ff924cd54dc offset=27c bits=0):
   loop::doSum@13 (line 10)
PcDesc(pc=0x00007ff924cd54ef offset=28f bits=0):
   loop::doSum@25 (line 10)
PcDesc(pc=0x00007ff924cd54f1 offset=291 bits=0):
   loop::doSum@26 (line 9)
PcDesc(pc=0x00007ff924cd54f5 offset=295 bits=0):
   loop::doSum@10 (line 9)
PcDesc(pc=0x00007ff924cd54fd offset=29d bits=0):
   loop::doSum@37 (line 11)
PcDesc(pc=0x00007ff924cd5503 offset=2a3 bits=0):
   loop::doSum@46 (line 12)
PcDesc(pc=0x00007ff924cd5524 offset=2c4 bits=0):
   loop::doSum@50 (line 12)
PcDesc(pc=0x00007ff924cd553c offset=2dc bits=0):
   loop::doSum@52 (line 12)
PcDesc(pc=0x00007ff924cd557c offset=31c bits=0):
   loop::doSum@40 (line 12)
PcDesc(pc=0x00007ff924cd558f offset=32f bits=0):
   loop::doSum@52 (line 12)
PcDesc(pc=0x00007ff924cd5591 offset=331 bits=0):
   loop::doSum@53 (line 11)
PcDesc(pc=0x00007ff924cd5596 offset=336 bits=0):
   loop::doSum@37 (line 11)
PcDesc(pc=0x00007ff924cd5650 offset=3f0 bits=0):
   loop::doSum@40 (line 12)
PcDesc(pc=0x00007ff924cd5663 offset=403 bits=0):
   loop::doSum@52 (line 12)
PcDesc(pc=0x00007ff924cd5666 offset=406 bits=0):
   loop::doSum@53 (line 11)
PcDesc(pc=0x00007ff924cd566b offset=40b bits=0):
   loop::doSum@56 (line 11)
PcDesc(pc=0x00007ff924cd5672 offset=412 bits=1):
   loop::doSum@56 (line 11)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: reg r8 [16],oop
    - l4: reg rdi [14],int
PcDesc(pc=0x00007ff924cd5675 offset=415 bits=0):
   loop::doSum@56 (line 11)
PcDesc(pc=0x00007ff924cd5680 offset=420 bits=0):
   loop::doSum@40 (line 12)
PcDesc(pc=0x00007ff924cd5693 offset=433 bits=0):
   loop::doSum@52 (line 12)
PcDesc(pc=0x00007ff924cd5695 offset=435 bits=0):
   loop::doSum@53 (line 11)
PcDesc(pc=0x00007ff924cd5699 offset=439 bits=0):
   loop::doSum@37 (line 11)
PcDesc(pc=0x00007ff924cd56b6 offset=456 bits=0):
   loop::doSum@10 (line 9)
PcDesc(pc=0x00007ff924cd56d4 offset=474 bits=1):
   loop::doSum@10 (line 9)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8],oop
    - l4: 0
   Expression stack
    - @0: 0
    - @1: stack[16]
PcDesc(pc=0x00007ff924cd56e8 offset=488 bits=0):
   loop::doSum@10 (line 9)
PcDesc(pc=0x00007ff924cd57b0 offset=550 bits=0):
   loop::doSum@37 (line 11)
PcDesc(pc=0x00007ff924cd57d0 offset=570 bits=1):
   loop::doSum@37 (line 11)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16],oop
    - l4: stack[28]
   Expression stack
    - @0: stack[28]
    - @1: reg rbp [10],int
PcDesc(pc=0x00007ff924cd57e4 offset=584 bits=0):
   loop::doSum@37 (line 11)
PcDesc(pc=0x00007ff924cd58d4 offset=674 bits=0):
   loop::doSum@13 (line 10)
PcDesc(pc=0x00007ff924cd5919 offset=6b9 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 4 OopMaps

ImmutableOopMap {r8=Oop rcx=Oop rdx=Oop } pc offsets: 557 1042 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 1140 
ImmutableOopMap {[0]=Oop [8]=Oop [16]=Oop } pc offsets: 1392 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007ff924cd528c offset=2c):
   loop::doSum@-1 (line 8)
ScopeDesc(pc=0x00007ff924cd529a offset=3a):
   loop::doSum@5 (line 9)
ScopeDesc(pc=0x00007ff924cd529f offset=3f):
   loop::doSum@9 (line 9)
ScopeDesc(pc=0x00007ff924cd52a2 offset=42):
   loop::doSum@29 (line 9)
ScopeDesc(pc=0x00007ff924cd52b0 offset=50):
   loop::doSum@10 (line 9)
ScopeDesc(pc=0x00007ff924cd52b4 offset=54):
   loop::doSum@19 (line 10)
ScopeDesc(pc=0x00007ff924cd52d3 offset=73):
   loop::doSum@23 (line 10)
ScopeDesc(pc=0x00007ff924cd52ec offset=8c):
   loop::doSum@25 (line 10)
ScopeDesc(pc=0x00007ff924cd5327 offset=c7):
   loop::doSum@13 (line 10)
ScopeDesc(pc=0x00007ff924cd533a offset=da):
   loop::doSum@25 (line 10)
ScopeDesc(pc=0x00007ff924cd533c offset=dc):
   loop::doSum@26 (line 9)
ScopeDesc(pc=0x00007ff924cd5345 offset=e5):
   loop::doSum@10 (line 9)
ScopeDesc(pc=0x00007ff924cd53f0 offset=190):
   loop::doSum@13 (line 10)
ScopeDesc(pc=0x00007ff924cd5474 offset=214):
   loop::doSum@25 (line 10)
ScopeDesc(pc=0x00007ff924cd5477 offset=217):
   loop::doSum@26 (line 9)
ScopeDesc(pc=0x00007ff924cd5486 offset=226):
   loop::doSum@29 (line 9)
ScopeDesc(pc=0x00007ff924cd548d offset=22d):
   loop::doSum@29 (line 9)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: reg r8 [16],oop
    - l4: reg rdi [14],int
ScopeDesc(pc=0x00007ff924cd5490 offset=230):
   loop::doSum@29 (line 9)
ScopeDesc(pc=0x00007ff924cd54ac offset=24c):
   loop::doSum@13 (line 10)
ScopeDesc(pc=0x00007ff924cd54cd offset=26d):
   loop::doSum@25 (line 10)
ScopeDesc(pc=0x00007ff924cd54d0 offset=270):
   loop::doSum@26 (line 9)
ScopeDesc(pc=0x00007ff924cd54d5 offset=275):
   loop::doSum@10 (line 9)
ScopeDesc(pc=0x00007ff924cd54dc offset=27c):
   loop::doSum@13 (line 10)
ScopeDesc(pc=0x00007ff924cd54ef offset=28f):
   loop::doSum@25 (line 10)
ScopeDesc(pc=0x00007ff924cd54f1 offset=291):
   loop::doSum@26 (line 9)
ScopeDesc(pc=0x00007ff924cd54f5 offset=295):
   loop::doSum@10 (line 9)
ScopeDesc(pc=0x00007ff924cd54fd offset=29d):
   loop::doSum@37 (line 11)
ScopeDesc(pc=0x00007ff924cd5503 offset=2a3):
   loop::doSum@46 (line 12)
ScopeDesc(pc=0x00007ff924cd5524 offset=2c4):
   loop::doSum@50 (line 12)
ScopeDesc(pc=0x00007ff924cd553c offset=2dc):
   loop::doSum@52 (line 12)
ScopeDesc(pc=0x00007ff924cd557c offset=31c):
   loop::doSum@40 (line 12)
ScopeDesc(pc=0x00007ff924cd558f offset=32f):
   loop::doSum@52 (line 12)
ScopeDesc(pc=0x00007ff924cd5591 offset=331):
   loop::doSum@53 (line 11)
ScopeDesc(pc=0x00007ff924cd5596 offset=336):
   loop::doSum@37 (line 11)
ScopeDesc(pc=0x00007ff924cd5650 offset=3f0):
   loop::doSum@40 (line 12)
ScopeDesc(pc=0x00007ff924cd5663 offset=403):
   loop::doSum@52 (line 12)
ScopeDesc(pc=0x00007ff924cd5666 offset=406):
   loop::doSum@53 (line 11)
ScopeDesc(pc=0x00007ff924cd566b offset=40b):
   loop::doSum@56 (line 11)
ScopeDesc(pc=0x00007ff924cd5672 offset=412):
   loop::doSum@56 (line 11)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: reg r8 [16],oop
    - l4: reg rdi [14],int
ScopeDesc(pc=0x00007ff924cd5675 offset=415):
   loop::doSum@56 (line 11)
ScopeDesc(pc=0x00007ff924cd5680 offset=420):
   loop::doSum@40 (line 12)
ScopeDesc(pc=0x00007ff924cd5693 offset=433):
   loop::doSum@52 (line 12)
ScopeDesc(pc=0x00007ff924cd5695 offset=435):
   loop::doSum@53 (line 11)
ScopeDesc(pc=0x00007ff924cd5699 offset=439):
   loop::doSum@37 (line 11)
ScopeDesc(pc=0x00007ff924cd56b6 offset=456):
   loop::doSum@10 (line 9)
ScopeDesc(pc=0x00007ff924cd56d4 offset=474):
   loop::doSum@10 (line 9)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[0],oop
    - l3: stack[8],oop
    - l4: 0
   Expression stack
    - @0: 0
    - @1: stack[16]
ScopeDesc(pc=0x00007ff924cd56e8 offset=488):
   loop::doSum@10 (line 9)
ScopeDesc(pc=0x00007ff924cd57b0 offset=550):
   loop::doSum@37 (line 11)
ScopeDesc(pc=0x00007ff924cd57d0 offset=570):
   loop::doSum@37 (line 11)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16],oop
    - l4: stack[28]
   Expression stack
    - @0: stack[28]
    - @1: reg rbp [10],int
ScopeDesc(pc=0x00007ff924cd57e4 offset=584):
   loop::doSum@37 (line 11)
ScopeDesc(pc=0x00007ff924cd58d4 offset=674):
   loop::doSum@13 (line 10)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007ff924cd5108: 6014
relocInfo@0x00007ff924cd5108 [type=6(runtime_call) addr=0x00007ff924cd5274 offset=20] | [destination=0x00007ff924d8ce20]
         @0x00007ff924cd510a: 1018
relocInfo@0x00007ff924cd510a [type=1(oop) addr=0x00007ff924cd528c offset=24] | [oop_addr=0x00007ff924cd528e *=0x000000010157c150 offset=0]
         @0x00007ff924cd510c: a201
relocInfo@0x00007ff924cd510c [type=10(poll) addr=0x00007ff924cd548d offset=513]
         @0x00007ff924cd510e: a1e5
relocInfo@0x00007ff924cd510e [type=10(poll) addr=0x00007ff924cd5672 offset=485]
         @0x00007ff924cd5110: b02f
relocInfo@0x00007ff924cd5110 [type=11(poll_return) addr=0x00007ff924cd56a1 offset=47]
         @0x00007ff924cd5112: 642e
relocInfo@0x00007ff924cd5112 [type=6(runtime_call) addr=0x00007ff924cd56cf offset=46 format=1] | [destination=0x00007ff924d95940]
         @0x00007ff924cd5114: f803296f09c07ff97005
relocInfo@0x00007ff924cd511c [type=7(external_word) addr=0x00007ff924cd56d4 offset=5 data={296f09c07ff9}] | [target=0x00007ff9296f09c0]
         @0x00007ff924cd511e: 640e
relocInfo@0x00007ff924cd511e [type=6(runtime_call) addr=0x00007ff924cd56e2 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5120: f80329883b187ff97006
relocInfo@0x00007ff924cd5128 [type=7(external_word) addr=0x00007ff924cd56e8 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd512a: 640e
relocInfo@0x00007ff924cd512a [type=6(runtime_call) addr=0x00007ff924cd56f6 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd512c: f80329883b187ff97006
relocInfo@0x00007ff924cd5134 [type=7(external_word) addr=0x00007ff924cd56fc offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5136: 640e
relocInfo@0x00007ff924cd5136 [type=6(runtime_call) addr=0x00007ff924cd570a offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5138: f80329883b187ff97006
relocInfo@0x00007ff924cd5140 [type=7(external_word) addr=0x00007ff924cd5710 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5142: 640e
relocInfo@0x00007ff924cd5142 [type=6(runtime_call) addr=0x00007ff924cd571e offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5144: f80329883b187ff97006
relocInfo@0x00007ff924cd514c [type=7(external_word) addr=0x00007ff924cd5724 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd514e: 640e
relocInfo@0x00007ff924cd514e [type=6(runtime_call) addr=0x00007ff924cd5732 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5150: f80329883b187ff97006
relocInfo@0x00007ff924cd5158 [type=7(external_word) addr=0x00007ff924cd5738 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd515a: 640e
relocInfo@0x00007ff924cd515a [type=6(runtime_call) addr=0x00007ff924cd5746 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd515c: f80329883b187ff97006
relocInfo@0x00007ff924cd5164 [type=7(external_word) addr=0x00007ff924cd574c offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5166: 640e
relocInfo@0x00007ff924cd5166 [type=6(runtime_call) addr=0x00007ff924cd575a offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5168: f80329883b187ff97006
relocInfo@0x00007ff924cd5170 [type=7(external_word) addr=0x00007ff924cd5760 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5172: 640e
relocInfo@0x00007ff924cd5172 [type=6(runtime_call) addr=0x00007ff924cd576e offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5174: f80329883b187ff97006
relocInfo@0x00007ff924cd517c [type=7(external_word) addr=0x00007ff924cd5774 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd517e: 640e
relocInfo@0x00007ff924cd517e [type=6(runtime_call) addr=0x00007ff924cd5782 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5180: f80329883b187ff97006
relocInfo@0x00007ff924cd5188 [type=7(external_word) addr=0x00007ff924cd5788 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd518a: 640e
relocInfo@0x00007ff924cd518a [type=6(runtime_call) addr=0x00007ff924cd5796 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd518c: f80329883b187ff97006
relocInfo@0x00007ff924cd5194 [type=7(external_word) addr=0x00007ff924cd579c offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5196: 640e
relocInfo@0x00007ff924cd5196 [type=6(runtime_call) addr=0x00007ff924cd57aa offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5198: 6421
relocInfo@0x00007ff924cd5198 [type=6(runtime_call) addr=0x00007ff924cd57cb offset=33 format=1] | [destination=0x00007ff924d95940]
         @0x00007ff924cd519a: f803296f09c07ff97005
relocInfo@0x00007ff924cd51a2 [type=7(external_word) addr=0x00007ff924cd57d0 offset=5 data={296f09c07ff9}] | [target=0x00007ff9296f09c0]
         @0x00007ff924cd51a4: 640e
relocInfo@0x00007ff924cd51a4 [type=6(runtime_call) addr=0x00007ff924cd57de offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd51a6: f80329883b187ff97006
relocInfo@0x00007ff924cd51ae [type=7(external_word) addr=0x00007ff924cd57e4 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd51b0: 640e
relocInfo@0x00007ff924cd51b0 [type=6(runtime_call) addr=0x00007ff924cd57f2 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd51b2: f80329883b187ff97006
relocInfo@0x00007ff924cd51ba [type=7(external_word) addr=0x00007ff924cd57f8 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd51bc: 640e
relocInfo@0x00007ff924cd51bc [type=6(runtime_call) addr=0x00007ff924cd5806 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd51be: f80329883b187ff97006
relocInfo@0x00007ff924cd51c6 [type=7(external_word) addr=0x00007ff924cd580c offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd51c8: 640e
relocInfo@0x00007ff924cd51c8 [type=6(runtime_call) addr=0x00007ff924cd581a offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd51ca: f80329883b187ff97006
relocInfo@0x00007ff924cd51d2 [type=7(external_word) addr=0x00007ff924cd5820 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd51d4: 640e
relocInfo@0x00007ff924cd51d4 [type=6(runtime_call) addr=0x00007ff924cd582e offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd51d6: f80329883b187ff97006
relocInfo@0x00007ff924cd51de [type=7(external_word) addr=0x00007ff924cd5834 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd51e0: 640e
relocInfo@0x00007ff924cd51e0 [type=6(runtime_call) addr=0x00007ff924cd5842 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd51e2: f80329883b187ff97006
relocInfo@0x00007ff924cd51ea [type=7(external_word) addr=0x00007ff924cd5848 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd51ec: 640e
relocInfo@0x00007ff924cd51ec [type=6(runtime_call) addr=0x00007ff924cd5856 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd51ee: f80329883b187ff97006
relocInfo@0x00007ff924cd51f6 [type=7(external_word) addr=0x00007ff924cd585c offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd51f8: 640e
relocInfo@0x00007ff924cd51f8 [type=6(runtime_call) addr=0x00007ff924cd586a offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd51fa: f80329883b187ff97006
relocInfo@0x00007ff924cd5202 [type=7(external_word) addr=0x00007ff924cd5870 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5204: 640e
relocInfo@0x00007ff924cd5204 [type=6(runtime_call) addr=0x00007ff924cd587e offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5206: f80329883b187ff97006
relocInfo@0x00007ff924cd520e [type=7(external_word) addr=0x00007ff924cd5884 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5210: 640e
relocInfo@0x00007ff924cd5210 [type=6(runtime_call) addr=0x00007ff924cd5892 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5212: f80329883b187ff97006
relocInfo@0x00007ff924cd521a [type=7(external_word) addr=0x00007ff924cd5898 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd521c: 640e
relocInfo@0x00007ff924cd521c [type=6(runtime_call) addr=0x00007ff924cd58a6 offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd521e: f80329883b187ff97006
relocInfo@0x00007ff924cd5226 [type=7(external_word) addr=0x00007ff924cd58ac offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5228: 640e
relocInfo@0x00007ff924cd5228 [type=6(runtime_call) addr=0x00007ff924cd58ba offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd522a: f80329883b187ff97006
relocInfo@0x00007ff924cd5232 [type=7(external_word) addr=0x00007ff924cd58c0 offset=6 data={29883b187ff9}] | [target=0x00007ff929883b18]
         @0x00007ff924cd5234: 640e
relocInfo@0x00007ff924cd5234 [type=6(runtime_call) addr=0x00007ff924cd58ce offset=14 format=1] | [destination=0x00007ff928e7d6d0]
         @0x00007ff924cd5236: f2338006
relocInfo@0x00007ff924cd5238 [type=8(internal_word) addr=0x00007ff924cd58d4 offset=6 data=563] | [target=0x00007ff924cd56a1]
         @0x00007ff924cd523a: 6411
relocInfo@0x00007ff924cd523a [type=6(runtime_call) addr=0x00007ff924cd58e5 offset=17 format=1] | [destination=0x00007ff924d946a0]
         @0x00007ff924cd523c: 001b
relocInfo@0x00007ff924cd523c [type=0(none) addr=0x00007ff924cd5900 offset=27]
         @0x00007ff924cd523e: 6400
relocInfo@0x00007ff924cd523e [type=6(runtime_call) addr=0x00007ff924cd5900 offset=0 format=1] | [destination=0x00007ff924cf8720]
         @0x00007ff924cd5240: 640f
relocInfo@0x00007ff924cd5240 [type=6(runtime_call) addr=0x00007ff924cd590f offset=15 format=1] | [destination=0x00007ff924d95c60]
         @0x00007ff924cd5242: 0000
relocInfo@0x00007ff924cd5242 [type=0(none) addr=0x00007ff924cd590f offset=0]
         @0x00007ff924cd5244: 0000
relocInfo@0x00007ff924cd5244 [type=0(none) addr=0x00007ff924cd590f offset=0]
         @0x00007ff924cd5246: 0000
relocInfo@0x00007ff924cd5246 [type=0(none) addr=0x00007ff924cd590f offset=0]
         @0x00007ff924cd5248: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 6 entries, 52 bytes):
{
   < 0x00007ff924cd52b0, 0x00007ff924cd56b6 > < 0x00007ff924cd52cf, 0x00007ff924cd56b6 > < 0x00007ff924cd52e9, 0x00007ff924cd56b6 > 
   < 0x00007ff924cd5500, 0x00007ff924cd57b0 > < 0x00007ff924cd5520, 0x00007ff924cd57b0 > < 0x00007ff924cd5539, 0x00007ff924cd57b0 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x00000001014b7c68 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000001014b7c68}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x00007ff8c480e438 {method} {0x00007ff8c480e438} 'doSum' '([F[F[F)V' in 'loop'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Res[4] = 6.0
------------------------------------------------------------------------
loop::doSum([F[F[F)V
  interpreter_invocation_count:       15360
  invocation_counter:                 15360
  backedge_counter:                15751168
  decompile_count:                        0
  mdo size: 552 bytes

0 iconst_0
1 istore #4
3 fast_iload #4
5 getstatic 7 <loop.LEN/I> 
8 iconst_5
9 isub
10 if_icmpge 32
  0   bci: 10   BranchData          taken(4564) displacement(56)
                                    not taken(15723228)
13 aload_1
14 fast_iload #4
16 aload_2
17 fast_iload #4
19 faload
20 aload_3
21 fast_iload #4
23 faload
24 fadd
25 fastore
26 iinc #4 1
29 goto 3
  32  bci: 29   JumpData            taken(15723228) displacement(-32)
32 fast_iload #4
34 getstatic 7 <loop.LEN/I> 
37 if_icmpge 59
  56  bci: 37   BranchData          taken(4564) displacement(56)
                                    not taken(22820)
40 aload_1
41 fast_iload #4
43 aload_2
44 fast_iload #4
46 faload
47 aload_3
48 fast_iload #4
50 faload
51 fadd
52 fastore
53 iinc #4 1
56 goto 32
  88  bci: 56   JumpData            taken(22820) displacement(-32)
59 return
------------------------------------------------------------------------
Total MDO size: 552 bytes
