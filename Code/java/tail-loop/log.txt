CompileCommand: print test1.micro bool print = true
CompileCommand: compileonly test1.micro bool compileonly = true
Collected loop nodes in reverse postorder
 rpo=0	  382  CountedLoop  === 382 607 387  [[ 371 382 383 385 386 ]] inner stride: 1 post of N233 !orig=[233],[224],[99] !jvms: test1::micro @ bci:8 (line 9)
 rpo=1	  385  Phi  === 382 400 370  [[ 370 384 ]]  #int:0..max-1:www #tripcount !orig=102,[192] !jvms: test1::micro @ bci:8 (line 9)
 rpo=2	  370  AddI  === _ 385 55  [[ 369 385 ]]  !orig=198,... !jvms: test1::micro @ bci:18 (line 8)
 rpo=3	  369  CmpI  === _ 370 41  [[ 368 ]]  !orig=226,[207] !jvms: test1::micro @ bci:5 (line 8)
 rpo=4	  368  Bool  === _ 369  [[ 386 ]] [lt] !orig=227,[208] !jvms: test1::micro @ bci:5 (line 8)
 rpo=5	  384  ConvI2L  === _ 385  [[ 381 ]]  #long:0..maxint-1:www !orig=[193],[136] !jvms: test1::micro @ bci:17 (line 9)
 rpo=6	  381  LShiftL  === _ 384 137  [[ 378 379 380 ]]  !orig=[194],[138] !jvms: test1::micro @ bci:17 (line 9)
 rpo=7	  378  AddP  === _ 38 38 381  [[ 372 ]]  !orig=[196] !jvms: test1::micro @ bci:17 (line 9)
 rpo=8	  372  AddP  === _ 38 378 133  [[ 371 ]]  !orig=[195] !jvms: test1::micro @ bci:17 (line 9)
 rpo=9	  379  AddP  === _ 117 117 381  [[ 375 ]]  !orig=[140] !jvms: test1::micro @ bci:12 (line 9)
 rpo=10	  375  AddP  === _ 117 379 133  [[ 374 ]]  !orig=[139] !jvms: test1::micro @ bci:12 (line 9)
 rpo=11	  374  LoadI  === 399 383 375  [[ 373 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5; #int !orig=[141] !jvms: test1::micro @ bci:12 (line 9)
 rpo=12	  380  AddP  === _ 154 154 381  [[ 377 ]]  !orig=[174] !jvms: test1::micro @ bci:15 (line 9)
 rpo=13	  377  AddP  === _ 154 380 133  [[ 376 ]]  !orig=[173] !jvms: test1::micro @ bci:15 (line 9)
 rpo=14	  376  LoadI  === 399 383 377  [[ 373 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5; #int !orig=[175] !jvms: test1::micro @ bci:15 (line 9)
 rpo=15	  373  MulI  === _ 374 376  [[ 371 ]]  !orig=[176] !jvms: test1::micro @ bci:16 (line 9)
 rpo=16	  371  StoreI  === 382 383 372 373  [[ 383 392 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5;  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=5; !orig=[197],701 !jvms: test1::micro @ bci:17 (line 9)
 rpo=17	  383  Phi  === 382 427 371  [[ 371 374 376 393 ]]  #memory  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5; !orig=223,[221],[101] !jvms: test1::micro @ bci:8 (line 9)
 rpo=18	  386  CountedLoopEnd  === 382 368  [[ 387 388 ]] [lt] P=0.500000, C=1576704.000000 !orig=228,[209] !jvms: test1::micro @ bci:5 (line 8)
 rpo=19	  387  IfTrue  === 386  [[ 382 ]] #1 !orig=210 !jvms: test1::micro @ bci:5 (line 8)

Nodes in statement [0] with element type 'int'
  371  StoreI  === 382 383 372 373  [[ 383 392 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5;  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=5; !orig=[197],701 !jvms: test1::micro @ bci:17 (line 9)
  373  MulI  === _ 374 376  [[ 371 ]]  !orig=[176] !jvms: test1::micro @ bci:16 (line 9)
  374  LoadI  === 399 383 375  [[ 373 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5; #int !orig=[141] !jvms: test1::micro @ bci:12 (line 9)
  376  LoadI  === 399 383 377  [[ 373 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5; #int !orig=[175] !jvms: test1::micro @ bci:15 (line 9)

Element basic types of nodes in the loop
 int	  374  LoadI  === 399 383 375  [[ 373 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5; #int !orig=[141] !jvms: test1::micro @ bci:12 (line 9)
 int	  376  LoadI  === 399 383 377  [[ 373 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5; #int !orig=[175] !jvms: test1::micro @ bci:15 (line 9)
 int	  373  MulI  === _ 374 376  [[ 371 ]]  !orig=[176] !jvms: test1::micro @ bci:16 (line 9)
 int	  371  StoreI  === 382 383 372 373  [[ 383 392 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5;  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=5; !orig=[197],701 !jvms: test1::micro @ bci:17 (line 9)

Generated vector masks in vmask tree
Lane_size = 4
 2076  LoopVectorMask  === _ 385 41  [[ ]]  #vectormask[16]:{int}

Node scalar to vector replacements
 Scalar:	  374  LoadI  === _ _ _  [[ ]]   [10000000374] !orig=[141]
  Vector:	 2077  LoadVectorMasked  === 399 383 375 2076  [[ 2079 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=5; mismatched #vectorz[16]:{int} !orig=[374],[141] !jvms: test1::micro @ bci:12 (line 9)
 Scalar:	  376  LoadI  === _ _ _  [[ ]]   [10000000376] !orig=[175]
  Vector:	 2078  LoadVectorMasked  === 399 383 377 2076  [[ 2079 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=5; mismatched #vectorz[16]:{int} !orig=[376],[175] !jvms: test1::micro @ bci:15 (line 9)
 Scalar:	  373  MulI  === _ _ _  [[ ]]   [10000000373] !orig=[176]
  Vector:	 2079  MulVI  === _ 2077 2078  [[ 2080 ]]  #vectorz[16]:{int} !orig=[373],[176] !jvms: test1::micro @ bci:16 (line 9)
 Scalar:	  371  StoreI  === _ _ _ _  [[ ]]   [10000000371] !orig=[197],701
  Vector:	 2080  StoreVectorMasked  === 382 383 372 2079 2076  [[ 392 383 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=5; mismatched  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=5; !orig=[371],[197],701 !jvms: test1::micro @ bci:17 (line 9)

Loop is vector masked

============================= C2-compiled nmethod ==============================
#r018 rsi:rsi   : parm 0: int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
#r016 rdx:rdx   : parm 1: int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
#r010 rcx:rcx   : parm 2: int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
# -- Old rsp -- Framesize: 64 --
#r591 rsp+60: in_preserve
#r590 rsp+56: return address
#r589 rsp+52: in_preserve
#r588 rsp+48: saved fp register
#r587 rsp+44: pad2, stack alignment
#r586 rsp+40: pad2, stack alignment
#r585 rsp+36: Fixed slot 1
#r584 rsp+32: Fixed slot 0
#r599 rsp+28: spill
#r598 rsp+24: spill
#r597 rsp+20: spill
#r596 rsp+16: spill
#r595 rsp+12: spill
#r594 rsp+ 8: spill
#r593 rsp+ 4: spill
#r592 rsp+ 0: spill
#
----------------------- MetaData before Compile_id = 1 ------------------------
{method}
 - this oop:          0x00007fabf8400510
 - method holder:     'test1'
 - constants:         0x00007fabf8400060 constant pool [88]/operands[5] {0x00007fabf8400060} for 'test1' cache=0x00007fabf8400788
 - access:            0x9  public static 
 - flags:             0x6080   queued_for_compilation  has_loops_flag  has_loops_flag_init 
 - name:              'micro'
 - signature:         '([I[I[I)V'
 - max stack:         6
 - max locals:        4
 - size of params:    3
 - method size:       14
 - vtable index:      -2
 - i2i entry:         0x00007fac3c8f6740
 - adapters:          AHE@0x00007fac4832ea50: 0xbbb i2c: 0x00007fac3c942d80 c2i: 0x00007fac3c942e75 c2iUV: 0x00007fac3c942e43 c2iNCI: 0x00007fac3c942eaf
 - compiled entry     0x00007fac3c942e75
 - code size:         25
 - code start:        0x00007fabf84004e8
 - code end (excl):   0x00007fabf8400501
 - method data:       0x00007fabf84009a0
 - checked ex length: 0
 - linenumber start:  0x00007fabf8400501
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 1 -----------------------
#
#  void ( int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *, int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *, int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact * )
#
000     N1: #	out( B1 ) <- in( B60 B42 B58 B57 B41 B43 B50 B59 B49 B44 B48 B52 B47 B45 B46 B51 B55 B54 B53 B56 )  Freq: 1

000     B1: #	out( B60 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (168 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

01a     movl    R10, [RSI + #12 (8-bit)]	# range
01e     NullCheck RSI

01e     B2: #	out( B41 B3 ) <- in( B1 )  Freq: 0.999999
        nop 	# 2 bytes pad for loops and calls
020     testl   R10, R10	# unsigned
023     jbe,u   B41  P=0.000487 C=1577472.000000

029     B3: #	out( B42 B4 ) <- in( B2 )  Freq: 0.999512
029     movl    R14, [RDX + #12 (8-bit)]	# range
02d     NullCheck RDX

02d     B4: #	out( B42 B5 ) <- in( B3 )  Freq: 0.999511
02d     testl   R14, R14	# unsigned
030     jbe,u   B42  P=0.000001 C=-1.000000

036     B5: #	out( B42 B6 ) <- in( B4 )  Freq: 0.99951
036     leal    R8, [R10 + #-1]
        nop 	# 6 bytes pad for loops and calls
040     cmpl    R8, R14	# unsigned
043     jae,u   B42  P=0.000001 C=-1.000000

049     B6: #	out( B42 B7 ) <- in( B5 )  Freq: 0.999509
049     movl    RAX, [RCX + #12 (8-bit)]	# range
04c     NullCheck RCX

04c     B7: #	out( B42 B8 ) <- in( B6 )  Freq: 0.999508
04c     testl   RAX, RAX	# unsigned
04e     jbe,u   B42  P=0.000001 C=-1.000000

054     B8: #	out( B42 B9 ) <- in( B7 )  Freq: 0.999507
054     cmpl    R8, RAX	# unsigned
057     jae,u   B42  P=0.000001 C=-1.000000

05d     B9: #	out( B42 B10 ) <- in( B8 )  Freq: 0.999506
        nop 	# 3 bytes pad for loops and calls
060     cmpl    R8, R10	# unsigned
063     jae,u   B42  P=0.000001 C=-1.000000

069     B10: #	out( B11 ) <- in( B9 )  Freq: 0.999505
069     movl    R11, RSI	# ptr -> int
06c     shrl    R11, #2
070     andl    R11, #15	# int
074     movl    RDI, #11	# int
079     subl    RDI, R11	# int
07c     andl    RDI, #15	# int
07f     incl    RDI	# int
081     cmpl    RDI, R10
084     cmovlgt RDI, R10	# min
088     xorl    R11, R11	# int
08b     xorl    RBX, RBX	# int

08d     B11: #	out( B13 B12 ) <- in( B10 B12 ) Loop( B11-B12 inner pre of N233) Freq: 1.99901
08d     movl    R8, [RCX + #16 + RBX << #2]	# int
092     imull   R8, [RDX + #16 + RBX << #2]	# int
098     movl    [RSI + #16 + RBX << #2], R8	# int
09d     leal    R9, [RBX + #1]
0a1     cmpl    R9, RDI
0a4     jge,s   B13	# loop end  P=0.500000 C=1576704.000000

0a6     B12: #	out( B11 ) <- in( B11 )  Freq: 0.999505
0a6     movl    RBX, R9	# spill
0a9     jmp,s   B11

0ab     B13: #	out( B36 B14 ) <- in( B11 )  Freq: 0.999505
0ab     leal    R8, [R10 + #-127]
0af     cmpl    R9, R8
0b2     jge     B36  P=0.000001 C=-1.000000

0b8     B14: #	out( B43 B15 ) <- in( B13 )  Freq: 0.999504
0b8     # castII of RBX
0b8     leal    RDI, [RBX + #1]
        nop 	# 5 bytes pad for loops and calls
0c0     cmpl    RDI, R10	# unsigned
0c3     jae,u   B43  P=0.000001 C=-1.000000

0c9     B15: #	out( B44 B16 ) <- in( B14 )  Freq: 0.999503
0c9     cmpl    RDI, RAX	# unsigned
0cb     jae,u   B44  P=0.000001 C=-1.000000

0d1     B16: #	out( B45 B17 ) <- in( B15 )  Freq: 0.999502
0d1     cmpl    RDI, R14	# unsigned
0d4     jae,u   B45  P=0.000001 C=-1.000000

0da     B17: #	out( B46 B18 ) <- in( B16 )  Freq: 0.999501
0da     addl    RBX, #128	# int
0e0     cmpl    RBX, R14	# unsigned
0e3     jae,u   B46  P=0.000001 C=-1.000000

0e9     B18: #	out( B47 B19 ) <- in( B17 )  Freq: 0.9995
0e9     cmpl    RDI, RAX	# unsigned
0eb     jae,u   B47  P=0.000001 C=-1.000000

0f1     B19: #	out( B48 B20 ) <- in( B18 )  Freq: 0.999499
0f1     cmpl    RBX, RAX	# unsigned
0f3     jae,u   B48  P=0.000001 C=-1.000000

0f9     B20: #	out( B49 B21 ) <- in( B19 )  Freq: 0.999498
        nop 	# 7 bytes pad for loops and calls
100     cmpl    RDI, R10	# unsigned
103     jae,u   B49  P=0.000001 C=-1.000000

109     B21: #	out( B50 B22 ) <- in( B20 )  Freq: 0.999497
109     cmpl    RBX, R10	# unsigned
10c     jae,u   B50  P=0.000001 C=-1.000000

112     B22: #	out( B27 ) <- in( B21 )  Freq: 0.999496
112     movl    RBX, #128000	# int
117     # TLS is in R15
117     jmp     B27
        nop 	# 4 bytes pad for loops and calls

120     B23: #	out( B24 ) <- in( B24 ) top-of-loop Freq: 4.21481e+06
120     movl    RDI, R9	# spill

123     B24: #	out( B23 B25 ) <- in( B27 B23 ) Loop( B24-B23 inner main of N149 strip mined) Freq: 4.21686e+06
123     load_vector XMM0,[RCX + #16 + RDI << #2]
12e     vpmulld XMM0,XMM0,[RDX + #16 + RDI << #2]	! mul packedI
139     store_vector [RSI + #16 + RDI << #2],XMM0
	
144     load_vector XMM0,[RCX + #80 + RDI << #2]
14f     vpmulld XMM0,XMM0,[RDX + #80 + RDI << #2]	! mul packedI
15a     store_vector [RSI + #80 + RDI << #2],XMM0
	
165     load_vector XMM0,[RCX + #144 + RDI << #2]
170     vpmulld XMM0,XMM0,[RDX + #144 + RDI << #2]	! mul packedI
17b     store_vector [RSI + #144 + RDI << #2],XMM0
	
186     load_vector XMM0,[RCX + #208 + RDI << #2]
191     vpmulld XMM0,XMM0,[RDX + #208 + RDI << #2]	! mul packedI
19c     store_vector [RSI + #208 + RDI << #2],XMM0
	
1a7     load_vector XMM0,[RCX + #272 + RDI << #2]
1b2     vpmulld XMM0,XMM0,[RDX + #272 + RDI << #2]	! mul packedI
1bd     store_vector [RSI + #272 + RDI << #2],XMM0
	
1c8     load_vector XMM0,[RCX + #336 + RDI << #2]
1d3     vpmulld XMM0,XMM0,[RDX + #336 + RDI << #2]	! mul packedI
1de     store_vector [RSI + #336 + RDI << #2],XMM0
	
1e9     load_vector XMM0,[RCX + #400 + RDI << #2]
1f4     vpmulld XMM0,XMM0,[RDX + #400 + RDI << #2]	! mul packedI
1ff     store_vector [RSI + #400 + RDI << #2],XMM0
	
20a     load_vector XMM0,[RCX + #464 + RDI << #2]
215     vpmulld XMM0,XMM0,[RDX + #464 + RDI << #2]	! mul packedI
220     store_vector [RSI + #464 + RDI << #2],XMM0
	
22b     leal    R9, [RDI + #128]
232     cmpl    R9, RBP
235     jl     B23	# loop end  P=0.999513 C=1576704.000000

23b     B25: #	out( B28 B26 ) <- in( B24 )  Freq: 2052.98
23b     movq    RBP, [R15 + #1176 (32-bit)]	# ptr
242     testl   rax, [RBP]	# Safepoint: poll for GC        # test1::micro @ bci:21 (line 8) L[0]=RSI L[1]=RDX L[2]=RCX L[3]=R9
        # OopMap {rcx=Oop rdx=Oop rsi=Oop off=578/0x242}
245     cmpl    R9, R8
248     jge,s   B28  P=0.000487 C=1576704.000000

24a     B26: #	out( B27 ) <- in( B25 )  Freq: 2051.98
24a     movl    RDI, R9	# spill

24d     B27: #	out( B24 ) <- in( B22 B26 ) Loop( B27-B26 ) Freq: 2052.98
24d     movl    RBP, R10	# spill
250     subl    RBP, RDI	# int
252     addl    RBP, #-127	# int
255     cmpl    R8, RDI
258     cmovll RBP, R11	# signed, int
25c     cmpl    RBP, #128000	# unsigned
262     cmovla RBP, RBX	# unsigned, int
265     addl    RBP, RDI	# int
267     jmp     B24

26c     B28: #	out( B36 B29 ) <- in( B25 )  Freq: 0.999496
26c     leal    R8, [R10 + #-15]
270     cmpl    R9, R8
273     jge     B36  P=0.500000 C=-1.000000

279     B29: #	out( B51 B30 ) <- in( B28 )  Freq: 0.499748
279     # castII of RDI
279     leal    R9, [RDI + #128]
280     cmpl    R9, R14	# unsigned
283     jae,u   B51  P=0.000001 C=-1.000000

289     B30: #	out( B52 B31 ) <- in( B29 )  Freq: 0.499747
289     addl    RDI, #143	# int
28f     cmpl    RDI, R14	# unsigned
292     jae,u   B52  P=0.000001 C=-1.000000

298     B31: #	out( B53 B32 ) <- in( B30 )  Freq: 0.499747
        nop 	# 8 bytes pad for loops and calls
2a0     cmpl    R9, RAX	# unsigned
2a3     jae,u   B53  P=0.000001 C=-1.000000

2a9     B32: #	out( B55 B33 ) <- in( B31 )  Freq: 0.499746
2a9     cmpl    RDI, RAX	# unsigned
2ab     jae,u   B55  P=0.000001 C=-1.000000

2b1     B33: #	out( B57 B34 ) <- in( B32 )  Freq: 0.499746
2b1     cmpl    R9, R10	# unsigned
2b4     jae,u   B57  P=0.000001 C=-1.000000

2ba     B34: #	out( B59 B35 ) <- in( B33 )  Freq: 0.499745
        nop 	# 6 bytes pad for loops and calls
2c0     cmpl    RDI, R10	# unsigned
2c3     jae,u   B59  P=0.000001 C=-1.000000
        nop 	# 3 bytes pad for loops and calls

2cc     B35: #	out( B35 B36 ) <- in( B34 B35 ) Loop( B35-B35 inner post of N1205) Freq: 0.99949
2cc     load_vector XMM0,[RCX + #16 + R9 << #2]
2d7     vpmulld XMM0,XMM0,[RDX + #16 + R9 << #2]	! mul packedI
2e2     store_vector [RSI + #16 + R9 << #2],XMM0
	
2ed     addl    R9, #16	# int
2f1     cmpl    R9, R8
2f4     jl,s   B35	# loop end  P=0.500000 C=1576704.000000

2f6     B36: #	out( B41 B37 ) <- in( B13 B35 B28 )  Freq: 0.999494
2f6     cmpl    R9, R10
2f9     jge     B41  P=0.500000 C=-1.000000

2ff     B37: #	out( B54 B38 ) <- in( B36 )  Freq: 0.499747
2ff     # castII of R9
        nop 	# 1 bytes pad for loops and calls
300     cmpl    R9, R14	# unsigned
303     jae,u   B54  P=0.000001 C=-1.000000

309     B38: #	out( B56 B39 ) <- in( B37 )  Freq: 0.499746
309     cmpl    R9, RAX	# unsigned
30c     jae,u   B56  P=0.000001 C=-1.000000

312     B39: #	out( B58 B40 ) <- in( B38 )  Freq: 0.499746
312     cmpl    R9, R10	# unsigned
315     jae,u   B58  P=0.000001 C=-1.000000
        nop 	# 1 bytes pad for loops and calls

31c     B40: #	out( B40 B41 ) <- in( B39 B40 ) Loop( B40-B40 inner post of N233) Freq: 0.999491
31c     loop_vmask_gen K7, R9, R10	! loop vector mask generator
33e     vector_masked_load XMM0, [RDX + #16 + R9 << #2], K7 	! vector masked copy
349     vector_masked_load XMM1, [RCX + #16 + R9 << #2], K7 	! vector masked copy
354     vector_truecount_evex R11, K7 	! using R8 as TEMP
35e     vpmulld XMM0,XMM0,XMM1	! mul packedI
364     vector_masked_store [RSI + #16 + R9 << #2], XMM0, K7 	! vector masked store
36f     addl    R9, R11	# int
372     cmpl    R9, R10
375     jl,s   B40	# loop end  P=0.500000 C=1576704.000000

377     B41: #	out( N1 ) <- in( B40 B36 B2 )  Freq: 0.999979
377     vzeroupper
	addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

38c     ret

38d     B42: #	out( N1 ) <- in( B7 B3 B4 B5 B9 B8 B6 )  Freq: 7.06293e-06
38d     movq    RBP, RSI	# spill
390     movq    [rsp + #0], RDX	# spill
394     movq    [rsp + #8], RCX	# spill
399     movl    [rsp + #16], R10	# spill
39e     movl    RSI, #-138	# int
        nop 	# 1 bytes pad for loops and calls
3a4     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # test1::micro @ bci:5 (line 8) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=#0 STK[0]=#0 STK[1]=rsp + #16
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=940/0x3ac}
3b4     stop	# ShouldNotReachHere

3c8     B43: #	out( N1 ) <- in( B14 )  Freq: 1.01278e-06
3c8     stop	# ShouldNotReachHere

3dc     B44: #	out( N1 ) <- in( B15 )  Freq: 1.01278e-06
3dc     stop	# ShouldNotReachHere

3f0     B45: #	out( N1 ) <- in( B16 )  Freq: 1.01277e-06
3f0     stop	# ShouldNotReachHere

404     B46: #	out( N1 ) <- in( B17 )  Freq: 1.01277e-06
404     stop	# ShouldNotReachHere

418     B47: #	out( N1 ) <- in( B18 )  Freq: 1.01277e-06
418     stop	# ShouldNotReachHere

42c     B48: #	out( N1 ) <- in( B19 )  Freq: 1.01277e-06
42c     stop	# ShouldNotReachHere

440     B49: #	out( N1 ) <- in( B20 )  Freq: 1.01277e-06
440     stop	# ShouldNotReachHere

454     B50: #	out( N1 ) <- in( B21 )  Freq: 1.01277e-06
454     stop	# ShouldNotReachHere

468     B51: #	out( N1 ) <- in( B29 )  Freq: 5.06384e-07
468     stop	# ShouldNotReachHere

47c     B52: #	out( N1 ) <- in( B30 )  Freq: 5.06384e-07
47c     stop	# ShouldNotReachHere

490     B53: #	out( N1 ) <- in( B31 )  Freq: 5.06383e-07
490     stop	# ShouldNotReachHere

4a4     B54: #	out( N1 ) <- in( B37 )  Freq: 5.06383e-07
4a4     stop	# ShouldNotReachHere

4b8     B55: #	out( N1 ) <- in( B32 )  Freq: 5.06383e-07
4b8     stop	# ShouldNotReachHere

4cc     B56: #	out( N1 ) <- in( B38 )  Freq: 5.06383e-07
4cc     stop	# ShouldNotReachHere

4e0     B57: #	out( N1 ) <- in( B33 )  Freq: 5.06382e-07
4e0     stop	# ShouldNotReachHere

4f4     B58: #	out( N1 ) <- in( B39 )  Freq: 5.06382e-07
4f4     stop	# ShouldNotReachHere

508     B59: #	out( N1 ) <- in( B34 )  Freq: 5.06382e-07
508     stop	# ShouldNotReachHere

51c     B60: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
51c     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
524     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # test1::micro @ bci:4 (line 8) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#null
        # OopMap {off=1324/0x52c}
534     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     203    1             test1::micro (25 bytes)
 total in heap  [0x00007fac3ca41190,0x00007fac3ca41c10] = 2688
 relocation     [0x00007fac3ca41300,0x00007fac3ca41408] = 264
 main code      [0x00007fac3ca41420,0x00007fac3ca41988] = 1384
 stub code      [0x00007fac3ca41988,0x00007fac3ca419a0] = 24
 oops           [0x00007fac3ca419a0,0x00007fac3ca419a8] = 8
 metadata       [0x00007fac3ca419a8,0x00007fac3ca419b0] = 8
 scopes data    [0x00007fac3ca419b0,0x00007fac3ca41a28] = 120
 scopes pcs     [0x00007fac3ca41a28,0x00007fac3ca41be8] = 448
 dependencies   [0x00007fac3ca41be8,0x00007fac3ca41bf0] = 8
 nul chk table  [0x00007fac3ca41bf0,0x00007fac3ca41c10] = 32

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007fabf8400510} 'micro' '([I[I[I)V' in 'test1'
  # parm0:    rsi:rsi   = '[I'
  # parm1:    rdx:rdx   = '[I'
  # parm2:    rcx:rcx   = '[I'
  #           [sp+0x40]  (sp of caller)
 ;; N1: #	out( B1 ) <- in( B60 B42 B58 B57 B41 B43 B50 B59 B49 B44 B48 B52 B47 B45 B46 B51 B55 B54 B53 B56 )  Freq: 1
 ;; B1: #	out( B60 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fac3ca41420:   mov    %eax,-0x18000(%rsp)
  0x00007fac3ca41427:   push   %rbp
  0x00007fac3ca41428:   sub    $0x30,%rsp
  0x00007fac3ca4142c:   cmpl   $0x0,0x20(%r15)
  0x00007fac3ca41434:   jne    0x00007fac3ca4197e           ;*synchronization entry
                                                            ; - test1::micro@-1 (line 8)
  0x00007fac3ca4143a:   mov    0xc(%rsi),%r10d              ; implicit exception: dispatches to 0x00007fac3ca4193c
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@4 (line 8)
 ;; B2: #	out( B41 B3 ) <- in( B1 )  Freq: 0.999999
  0x00007fac3ca4143e:   nop
  0x00007fac3ca4143f:   nop
  0x00007fac3ca41440:   test   %r10d,%r10d
  0x00007fac3ca41443:   jbe    0x00007fac3ca41797           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@5 (line 8)
 ;; B3: #	out( B42 B4 ) <- in( B2 )  Freq: 0.999512
  0x00007fac3ca41449:   mov    0xc(%rdx),%r14d              ; implicit exception: dispatches to 0x00007fac3ca417ad
                                                            ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@12 (line 9)
 ;; B4: #	out( B42 B5 ) <- in( B3 )  Freq: 0.999511
  0x00007fac3ca4144d:   test   %r14d,%r14d
  0x00007fac3ca41450:   jbe    0x00007fac3ca417ad
 ;; B5: #	out( B42 B6 ) <- in( B4 )  Freq: 0.99951
  0x00007fac3ca41456:   lea    -0x1(%r10),%r8d
  0x00007fac3ca4145a:   nop
  0x00007fac3ca4145b:   nop
  0x00007fac3ca4145c:   nop
  0x00007fac3ca4145d:   nop
  0x00007fac3ca4145e:   nop
  0x00007fac3ca4145f:   nop
  0x00007fac3ca41460:   cmp    %r14d,%r8d
  0x00007fac3ca41463:   jae    0x00007fac3ca417ad
 ;; B6: #	out( B42 B7 ) <- in( B5 )  Freq: 0.999509
  0x00007fac3ca41469:   mov    0xc(%rcx),%eax               ; implicit exception: dispatches to 0x00007fac3ca417ad
                                                            ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@15 (line 9)
 ;; B7: #	out( B42 B8 ) <- in( B6 )  Freq: 0.999508
  0x00007fac3ca4146c:   test   %eax,%eax
  0x00007fac3ca4146e:   jbe    0x00007fac3ca417ad
 ;; B8: #	out( B42 B9 ) <- in( B7 )  Freq: 0.999507
  0x00007fac3ca41474:   cmp    %eax,%r8d
  0x00007fac3ca41477:   jae    0x00007fac3ca417ad
 ;; B9: #	out( B42 B10 ) <- in( B8 )  Freq: 0.999506
  0x00007fac3ca4147d:   nop
  0x00007fac3ca4147e:   nop
  0x00007fac3ca4147f:   nop
  0x00007fac3ca41480:   cmp    %r10d,%r8d
  0x00007fac3ca41483:   jae    0x00007fac3ca417ad
 ;; B10: #	out( B11 ) <- in( B9 )  Freq: 0.999505
  0x00007fac3ca41489:   mov    %esi,%r11d
  0x00007fac3ca4148c:   shr    $0x2,%r11d
  0x00007fac3ca41490:   and    $0xf,%r11d
  0x00007fac3ca41494:   mov    $0xb,%edi
  0x00007fac3ca41499:   sub    %r11d,%edi
  0x00007fac3ca4149c:   and    $0xf,%edi
  0x00007fac3ca4149f:   inc    %edi
  0x00007fac3ca414a1:   cmp    %r10d,%edi
  0x00007fac3ca414a4:   cmovg  %r10d,%edi
  0x00007fac3ca414a8:   xor    %r11d,%r11d
  0x00007fac3ca414ab:   xor    %ebx,%ebx                    ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@8 (line 9)
 ;; B11: #	out( B13 B12 ) <- in( B10 B12 ) Loop( B11-B12 inner pre of N233) Freq: 1.99901
  0x00007fac3ca414ad:   mov    0x10(%rcx,%rbx,4),%r8d
  0x00007fac3ca414b2:   imul   0x10(%rdx,%rbx,4),%r8d
  0x00007fac3ca414b8:   mov    %r8d,0x10(%rsi,%rbx,4)       ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@17 (line 9)
  0x00007fac3ca414bd:   lea    0x1(%rbx),%r9d
  0x00007fac3ca414c1:   cmp    %edi,%r9d
  0x00007fac3ca414c4:   jge    0x00007fac3ca414cb           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@5 (line 8)
 ;; B12: #	out( B11 ) <- in( B11 )  Freq: 0.999505
  0x00007fac3ca414c6:   mov    %r9d,%ebx
  0x00007fac3ca414c9:   jmp    0x00007fac3ca414ad
 ;; B13: #	out( B36 B14 ) <- in( B11 )  Freq: 0.999505
  0x00007fac3ca414cb:   lea    -0x7f(%r10),%r8d
  0x00007fac3ca414cf:   cmp    %r8d,%r9d
  0x00007fac3ca414d2:   jge    0x00007fac3ca41716
 ;; B14: #	out( B43 B15 ) <- in( B13 )  Freq: 0.999504
  0x00007fac3ca414d8:   lea    0x1(%rbx),%edi
  0x00007fac3ca414db:   nop
  0x00007fac3ca414dc:   nop
  0x00007fac3ca414dd:   nop
  0x00007fac3ca414de:   nop
  0x00007fac3ca414df:   nop
  0x00007fac3ca414e0:   cmp    %r10d,%edi
  0x00007fac3ca414e3:   jae    0x00007fac3ca417e8
 ;; B15: #	out( B44 B16 ) <- in( B14 )  Freq: 0.999503
  0x00007fac3ca414e9:   cmp    %eax,%edi
  0x00007fac3ca414eb:   jae    0x00007fac3ca417fc
 ;; B16: #	out( B45 B17 ) <- in( B15 )  Freq: 0.999502
  0x00007fac3ca414f1:   cmp    %r14d,%edi
  0x00007fac3ca414f4:   jae    0x00007fac3ca41810
 ;; B17: #	out( B46 B18 ) <- in( B16 )  Freq: 0.999501
  0x00007fac3ca414fa:   add    $0x80,%ebx
  0x00007fac3ca41500:   cmp    %r14d,%ebx
  0x00007fac3ca41503:   jae    0x00007fac3ca41824
 ;; B18: #	out( B47 B19 ) <- in( B17 )  Freq: 0.9995
  0x00007fac3ca41509:   cmp    %eax,%edi
  0x00007fac3ca4150b:   jae    0x00007fac3ca41838
 ;; B19: #	out( B48 B20 ) <- in( B18 )  Freq: 0.999499
  0x00007fac3ca41511:   cmp    %eax,%ebx
  0x00007fac3ca41513:   jae    0x00007fac3ca4184c
 ;; B20: #	out( B49 B21 ) <- in( B19 )  Freq: 0.999498
  0x00007fac3ca41519:   nop
  0x00007fac3ca4151a:   nop
  0x00007fac3ca4151b:   nop
  0x00007fac3ca4151c:   nop
  0x00007fac3ca4151d:   nop
  0x00007fac3ca4151e:   nop
  0x00007fac3ca4151f:   nop                                 ;   {no_reloc}
  0x00007fac3ca41520:   cmp    %r10d,%edi
  0x00007fac3ca41523:   jae    0x00007fac3ca41860
 ;; B21: #	out( B50 B22 ) <- in( B20 )  Freq: 0.999497
  0x00007fac3ca41529:   cmp    %r10d,%ebx
  0x00007fac3ca4152c:   jae    0x00007fac3ca41874
 ;; B22: #	out( B27 ) <- in( B21 )  Freq: 0.999496
  0x00007fac3ca41532:   mov    $0x1f400,%ebx                ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@21 (line 8)
  0x00007fac3ca41537:   jmpq   0x00007fac3ca4166d
  0x00007fac3ca4153c:   nop
  0x00007fac3ca4153d:   nop
  0x00007fac3ca4153e:   nop
  0x00007fac3ca4153f:   nop
 ;; B23: #	out( B24 ) <- in( B24 ) top-of-loop Freq: 4.21481e+06
  0x00007fac3ca41540:   mov    %r9d,%edi                    ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@8 (line 9)
 ;; B24: #	out( B23 B25 ) <- in( B27 B23 ) Loop( B24-B23 inner main of N149 strip mined) Freq: 4.21686e+06
  0x00007fac3ca41543:   vmovdqu32 0x10(%rcx,%rdi,4),%zmm0
  0x00007fac3ca4154e:   vpmulld 0x10(%rdx,%rdi,4),%zmm0,%zmm0
  0x00007fac3ca41559:   vmovdqu32 %zmm0,0x10(%rsi,%rdi,4)
  0x00007fac3ca41564:   vmovdqu32 0x50(%rcx,%rdi,4),%zmm0
  0x00007fac3ca4156f:   vpmulld 0x50(%rdx,%rdi,4),%zmm0,%zmm0
  0x00007fac3ca4157a:   vmovdqu32 %zmm0,0x50(%rsi,%rdi,4)
  0x00007fac3ca41585:   vmovdqu32 0x90(%rcx,%rdi,4),%zmm0
  0x00007fac3ca41590:   vpmulld 0x90(%rdx,%rdi,4),%zmm0,%zmm0
  0x00007fac3ca4159b:   vmovdqu32 %zmm0,0x90(%rsi,%rdi,4)
  0x00007fac3ca415a6:   vmovdqu32 0xd0(%rcx,%rdi,4),%zmm0
  0x00007fac3ca415b1:   vpmulld 0xd0(%rdx,%rdi,4),%zmm0,%zmm0
  0x00007fac3ca415bc:   vmovdqu32 %zmm0,0xd0(%rsi,%rdi,4)
  0x00007fac3ca415c7:   vmovdqu32 0x110(%rcx,%rdi,4),%zmm0
  0x00007fac3ca415d2:   vpmulld 0x110(%rdx,%rdi,4),%zmm0,%zmm0
  0x00007fac3ca415dd:   vmovdqu32 %zmm0,0x110(%rsi,%rdi,4)
  0x00007fac3ca415e8:   vmovdqu32 0x150(%rcx,%rdi,4),%zmm0
  0x00007fac3ca415f3:   vpmulld 0x150(%rdx,%rdi,4),%zmm0,%zmm0
  0x00007fac3ca415fe:   vmovdqu32 %zmm0,0x150(%rsi,%rdi,4)
  0x00007fac3ca41609:   vmovdqu32 0x190(%rcx,%rdi,4),%zmm0
  0x00007fac3ca41614:   vpmulld 0x190(%rdx,%rdi,4),%zmm0,%zmm0;   {no_reloc}
  0x00007fac3ca4161f:   vmovdqu32 %zmm0,0x190(%rsi,%rdi,4)
  0x00007fac3ca4162a:   vmovdqu32 0x1d0(%rcx,%rdi,4),%zmm0
  0x00007fac3ca41635:   vpmulld 0x1d0(%rdx,%rdi,4),%zmm0,%zmm0
  0x00007fac3ca41640:   vmovdqu32 %zmm0,0x1d0(%rsi,%rdi,4)  ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@17 (line 9)
  0x00007fac3ca4164b:   lea    0x80(%rdi),%r9d
  0x00007fac3ca41652:   cmp    %ebp,%r9d
  0x00007fac3ca41655:   jl     0x00007fac3ca41540           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@21 (line 8)
 ;; B25: #	out( B28 B26 ) <- in( B24 )  Freq: 2052.98
  0x00007fac3ca4165b:   mov    0x498(%r15),%rbp             ; ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test1::micro@21 (line 8)
  0x00007fac3ca41662:   test   %eax,0x0(%rbp)               ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@21 (line 8)
                                                            ;   {poll}
  0x00007fac3ca41665:   cmp    %r8d,%r9d
  0x00007fac3ca41668:   jge    0x00007fac3ca4168c
 ;; B26: #	out( B27 ) <- in( B25 )  Freq: 2051.98
  0x00007fac3ca4166a:   mov    %r9d,%edi
 ;; B27: #	out( B24 ) <- in( B22 B26 ) Loop( B27-B26 ) Freq: 2052.98
  0x00007fac3ca4166d:   mov    %r10d,%ebp
  0x00007fac3ca41670:   sub    %edi,%ebp
  0x00007fac3ca41672:   add    $0xffffff81,%ebp
  0x00007fac3ca41675:   cmp    %edi,%r8d
  0x00007fac3ca41678:   cmovl  %r11d,%ebp
  0x00007fac3ca4167c:   cmp    $0x1f400,%ebp
  0x00007fac3ca41682:   cmova  %ebx,%ebp
  0x00007fac3ca41685:   add    %edi,%ebp
  0x00007fac3ca41687:   jmpq   0x00007fac3ca41543
 ;; B28: #	out( B36 B29 ) <- in( B25 )  Freq: 0.999496
  0x00007fac3ca4168c:   lea    -0xf(%r10),%r8d
  0x00007fac3ca41690:   cmp    %r8d,%r9d
  0x00007fac3ca41693:   jge    0x00007fac3ca41716
 ;; B29: #	out( B51 B30 ) <- in( B28 )  Freq: 0.499748
  0x00007fac3ca41699:   lea    0x80(%rdi),%r9d
  0x00007fac3ca416a0:   cmp    %r14d,%r9d
  0x00007fac3ca416a3:   jae    0x00007fac3ca41888
 ;; B30: #	out( B52 B31 ) <- in( B29 )  Freq: 0.499747
  0x00007fac3ca416a9:   add    $0x8f,%edi
  0x00007fac3ca416af:   cmp    %r14d,%edi
  0x00007fac3ca416b2:   jae    0x00007fac3ca4189c
 ;; B31: #	out( B53 B32 ) <- in( B30 )  Freq: 0.499747
  0x00007fac3ca416b8:   nop
  0x00007fac3ca416b9:   nop
  0x00007fac3ca416ba:   nop
  0x00007fac3ca416bb:   nop
  0x00007fac3ca416bc:   nop
  0x00007fac3ca416bd:   nop
  0x00007fac3ca416be:   nop
  0x00007fac3ca416bf:   nop
  0x00007fac3ca416c0:   cmp    %eax,%r9d
  0x00007fac3ca416c3:   jae    0x00007fac3ca418b0
 ;; B32: #	out( B55 B33 ) <- in( B31 )  Freq: 0.499746
  0x00007fac3ca416c9:   cmp    %eax,%edi
  0x00007fac3ca416cb:   jae    0x00007fac3ca418d8
 ;; B33: #	out( B57 B34 ) <- in( B32 )  Freq: 0.499746
  0x00007fac3ca416d1:   cmp    %r10d,%r9d
  0x00007fac3ca416d4:   jae    0x00007fac3ca41900
 ;; B34: #	out( B59 B35 ) <- in( B33 )  Freq: 0.499745
  0x00007fac3ca416da:   nop
  0x00007fac3ca416db:   nop
  0x00007fac3ca416dc:   nop
  0x00007fac3ca416dd:   nop
  0x00007fac3ca416de:   nop
  0x00007fac3ca416df:   nop
  0x00007fac3ca416e0:   cmp    %r10d,%edi
  0x00007fac3ca416e3:   jae    0x00007fac3ca41928
  0x00007fac3ca416e9:   nop
  0x00007fac3ca416ea:   nop
  0x00007fac3ca416eb:   nop                                 ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@8 (line 9)
 ;; B35: #	out( B35 B36 ) <- in( B34 B35 ) Loop( B35-B35 inner post of N1205) Freq: 0.99949
  0x00007fac3ca416ec:   vmovdqu32 0x10(%rcx,%r9,4),%zmm0
  0x00007fac3ca416f7:   vpmulld 0x10(%rdx,%r9,4),%zmm0,%zmm0
  0x00007fac3ca41702:   vmovdqu32 %zmm0,0x10(%rsi,%r9,4)    ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@17 (line 9)
  0x00007fac3ca4170d:   add    $0x10,%r9d                   ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@18 (line 8)
  0x00007fac3ca41711:   cmp    %r8d,%r9d
  0x00007fac3ca41714:   jl     0x00007fac3ca416ec           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@5 (line 8)
 ;; B36: #	out( B41 B37 ) <- in( B13 B35 B28 )  Freq: 0.999494
  0x00007fac3ca41716:   cmp    %r10d,%r9d
  0x00007fac3ca41719:   jge    0x00007fac3ca41797
 ;; B37: #	out( B54 B38 ) <- in( B36 )  Freq: 0.499747
  0x00007fac3ca4171f:   nop
  0x00007fac3ca41720:   cmp    %r14d,%r9d
  0x00007fac3ca41723:   jae    0x00007fac3ca418c4
 ;; B38: #	out( B56 B39 ) <- in( B37 )  Freq: 0.499746
  0x00007fac3ca41729:   cmp    %eax,%r9d
  0x00007fac3ca4172c:   jae    0x00007fac3ca418ec
 ;; B39: #	out( B58 B40 ) <- in( B38 )  Freq: 0.499746
  0x00007fac3ca41732:   cmp    %r10d,%r9d
  0x00007fac3ca41735:   jae    0x00007fac3ca41914
  0x00007fac3ca4173b:   nop                                 ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@8 (line 9)
 ;; B40: #	out( B40 B41 ) <- in( B39 B40 ) Loop( B40-B40 inner post of N233) Freq: 0.999491
  0x00007fac3ca4173c:   mov    %r10d,%ebx
  0x00007fac3ca4173f:   sub    %r9d,%ebx
  0x00007fac3ca41742:   movabs $0xffff,%rdi
  0x00007fac3ca4174c:   cmp    $0xff,%ebx
  0x00007fac3ca41752:   jge    0x00007fac3ca41759
  0x00007fac3ca41754:   bzhi   %rbx,%rdi,%rdi
  0x00007fac3ca41759:   kmovq  %rdi,%k7
  0x00007fac3ca4175e:   vmovdqu32 0x10(%rdx,%r9,4),%zmm0{%k7}{z};   {no_reloc}
  0x00007fac3ca41769:   vmovdqu32 0x10(%rcx,%r9,4),%zmm1{%k7}{z}
  0x00007fac3ca41774:   kmovq  %k7,%r8
  0x00007fac3ca41779:   popcnt %r8,%r11
  0x00007fac3ca4177e:   vpmulld %zmm1,%zmm0,%zmm0
  0x00007fac3ca41784:   vmovdqu32 %zmm0,0x10(%rsi,%r9,4){%k7};*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@17 (line 9)
  0x00007fac3ca4178f:   add    %r11d,%r9d                   ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@18 (line 8)
  0x00007fac3ca41792:   cmp    %r10d,%r9d
  0x00007fac3ca41795:   jl     0x00007fac3ca4173c
 ;; B41: #	out( N1 ) <- in( B40 B36 B2 )  Freq: 0.999979
  0x00007fac3ca41797:   vzeroupper 
  0x00007fac3ca4179a:   add    $0x30,%rsp
  0x00007fac3ca4179e:   pop    %rbp
  0x00007fac3ca4179f:   cmp    0x490(%r15),%rsp             ;   {poll_return}
  0x00007fac3ca417a6:   ja     0x00007fac3ca41968
  0x00007fac3ca417ac:   retq                                ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@5 (line 8)
 ;; B42: #	out( N1 ) <- in( B7 B3 B4 B5 B9 B8 B6 )  Freq: 7.06293e-06
  0x00007fac3ca417ad:   mov    %rsi,%rbp
  0x00007fac3ca417b0:   mov    %rdx,(%rsp)
  0x00007fac3ca417b4:   mov    %rcx,0x8(%rsp)
  0x00007fac3ca417b9:   mov    %r10d,0x10(%rsp)
  0x00007fac3ca417be:   mov    $0xffffff76,%esi
  0x00007fac3ca417c3:   nop
  0x00007fac3ca417c4:   vzeroupper 
  0x00007fac3ca417c7:   callq  0x00007fac3ca0ab20           ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test1::micro@5 (line 8)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fac3ca417cc:   nopl   0x100063c(%rax,%rax,1)       ;   {other}
  0x00007fac3ca417d4:   movabs $0x7fac500d8b48,%rdi         ;   {external_word}
  0x00007fac3ca417de:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca417e2:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca417e7:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@5 (line 8)
 ;; B43: #	out( N1 ) <- in( B14 )  Freq: 1.01278e-06
  0x00007fac3ca417e8:   movabs $0x7fac501523f0,%rdi         ;   {external_word}
  0x00007fac3ca417f2:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca417f6:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca417fb:   hlt    
 ;; B44: #	out( N1 ) <- in( B15 )  Freq: 1.01278e-06
  0x00007fac3ca417fc:   movabs $0x7fac501523f0,%rdi         ;   {external_word}
  0x00007fac3ca41806:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca4180a:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca4180f:   hlt    
 ;; B45: #	out( N1 ) <- in( B16 )  Freq: 1.01277e-06
  0x00007fac3ca41810:   movabs $0x7fac501523f0,%rdi         ;   {external_word}
  0x00007fac3ca4181a:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca4181e:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca41823:   hlt    
 ;; B46: #	out( N1 ) <- in( B17 )  Freq: 1.01277e-06
  0x00007fac3ca41824:   movabs $0x7fac501523f0,%rdi         ;   {external_word}
  0x00007fac3ca4182e:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca41832:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca41837:   hlt    
 ;; B47: #	out( N1 ) <- in( B18 )  Freq: 1.01277e-06
  0x00007fac3ca41838:   movabs $0x7fac501523f0,%rdi         ;   {external_word}
  0x00007fac3ca41842:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca41846:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca4184b:   hlt    
 ;; B48: #	out( N1 ) <- in( B19 )  Freq: 1.01277e-06
  0x00007fac3ca4184c:   movabs $0x7fac501523f0,%rdi         ;   {external_word}
  0x00007fac3ca41856:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca4185a:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca4185f:   hlt    
 ;; B49: #	out( N1 ) <- in( B20 )  Freq: 1.01277e-06
  0x00007fac3ca41860:   movabs $0x7fac501523f0,%rdi         ;   {external_word}
  0x00007fac3ca4186a:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca4186e:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca41873:   hlt    
 ;; B50: #	out( N1 ) <- in( B21 )  Freq: 1.01277e-06
  0x00007fac3ca41874:   movabs $0x7fac501523f0,%rdi         ;   {external_word}
  0x00007fac3ca4187e:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca41882:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca41887:   hlt    
 ;; B51: #	out( N1 ) <- in( B29 )  Freq: 5.06384e-07
  0x00007fac3ca41888:   movabs $0x7fac501523f0,%rdi         ;   {external_word}
  0x00007fac3ca41892:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca41896:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca4189b:   hlt    
 ;; B52: #	out( N1 ) <- in( B30 )  Freq: 5.06384e-07
  0x00007fac3ca4189c:   movabs $0x7fac501523f0,%rdi         ;   {external_word}
  0x00007fac3ca418a6:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca418aa:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca418af:   hlt    
 ;; B53: #	out( N1 ) <- in( B31 )  Freq: 5.06383e-07
  0x00007fac3ca418b0:   movabs $0x7fac501523f0,%rdi         ;   {external_word}
  0x00007fac3ca418ba:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca418be:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca418c3:   hlt    
 ;; B54: #	out( N1 ) <- in( B37 )  Freq: 5.06383e-07
  0x00007fac3ca418c4:   movabs $0x7fac501523f0,%rdi         ;   {external_word}
  0x00007fac3ca418ce:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca418d2:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca418d7:   hlt    
 ;; B55: #	out( N1 ) <- in( B32 )  Freq: 5.06383e-07
  0x00007fac3ca418d8:   movabs $0x7fac501523f0,%rdi         ;   {external_word}
  0x00007fac3ca418e2:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca418e6:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca418eb:   hlt    
 ;; B56: #	out( N1 ) <- in( B38 )  Freq: 5.06383e-07
  0x00007fac3ca418ec:   movabs $0x7fac501523f0,%rdi         ;   {external_word}
  0x00007fac3ca418f6:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca418fa:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca418ff:   hlt    
 ;; B57: #	out( N1 ) <- in( B33 )  Freq: 5.06382e-07
  0x00007fac3ca41900:   movabs $0x7fac501523f0,%rdi         ;   {external_word}
  0x00007fac3ca4190a:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca4190e:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca41913:   hlt    
 ;; B58: #	out( N1 ) <- in( B39 )  Freq: 5.06382e-07
  0x00007fac3ca41914:   movabs $0x7fac501523f0,%rdi         ;   {external_word}
  0x00007fac3ca4191e:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca41922:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca41927:   hlt    
 ;; B59: #	out( N1 ) <- in( B34 )  Freq: 5.06382e-07
  0x00007fac3ca41928:   movabs $0x7fac501523f0,%rdi         ;   {external_word}
  0x00007fac3ca41932:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca41936:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca4193b:   hlt    
 ;; B60: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
  0x00007fac3ca4193c:   mov    $0xfffffff6,%esi
  0x00007fac3ca41941:   nop
  0x00007fac3ca41942:   nop
  0x00007fac3ca41943:   nop
  0x00007fac3ca41944:   vzeroupper 
  0x00007fac3ca41947:   callq  0x00007fac3ca0ab20           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@4 (line 8)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fac3ca4194c:   nopl   0x20007bc(%rax,%rax,1)       ;   {other}
  0x00007fac3ca41954:   movabs $0x7fac500d8b48,%rdi         ;   {external_word}
  0x00007fac3ca4195e:   and    $0xfffffffffffffff0,%rsp
  0x00007fac3ca41962:   callq  0x00007fac4f71fcd0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fac3ca41967:   hlt                                 ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test1::micro@8 (line 9)
  0x00007fac3ca41968:   movabs $0x7fac3ca4179f,%r10         ;   {internal_word}
  0x00007fac3ca41972:   mov    %r10,0x4a8(%r15)
  0x00007fac3ca41979:   jmpq   0x00007fac3ca099a0           ;   {runtime_call SafepointBlob}
  0x00007fac3ca4197e:   callq  Stub::nmethod_entry_barrier  ;   {runtime_call StubRoutines (final stubs)}
  0x00007fac3ca41983:   jmpq   0x00007fac3ca4143a
[Exception Handler]
  0x00007fac3ca41988:   jmpq   0x00007fac3c912a20           ;   {no_reloc}
[Deopt Handler Code]
  0x00007fac3ca4198d:   callq  0x00007fac3ca41992
  0x00007fac3ca41992:   subq   $0x5,(%rsp)
  0x00007fac3ca41997:   jmpq   0x00007fac3ca0ae60           ;   {runtime_call DeoptimizationBlob}
  0x00007fac3ca4199c:   hlt    
  0x00007fac3ca4199d:   hlt    
  0x00007fac3ca4199e:   hlt    
  0x00007fac3ca4199f:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007fac3ca419a0:   0x00000007ff0e6a38 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000007ff0e6a38}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007fac3ca419a8:   0x00007fabf8400510 {method} {0x00007fabf8400510} 'micro' '([I[I[I)V' in 'test1'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007fac3ca4141f offset=ffffffff bits=0):
PcDesc(pc=0x00007fac3ca4143a offset=1a bits=0):
   test1::micro@-1 (line 8)
PcDesc(pc=0x00007fac3ca4143e offset=1e bits=0):
   test1::micro@4 (line 8)
PcDesc(pc=0x00007fac3ca41449 offset=29 bits=0):
   test1::micro@5 (line 8)
PcDesc(pc=0x00007fac3ca4144d offset=2d bits=0):
   test1::micro@12 (line 9)
PcDesc(pc=0x00007fac3ca4146c offset=4c bits=0):
   test1::micro@15 (line 9)
PcDesc(pc=0x00007fac3ca414ad offset=8d bits=0):
   test1::micro@8 (line 9)
PcDesc(pc=0x00007fac3ca414bd offset=9d bits=0):
   test1::micro@17 (line 9)
PcDesc(pc=0x00007fac3ca414c6 offset=a6 bits=0):
   test1::micro@5 (line 8)
PcDesc(pc=0x00007fac3ca41537 offset=117 bits=0):
   test1::micro@21 (line 8)
PcDesc(pc=0x00007fac3ca41543 offset=123 bits=0):
   test1::micro@8 (line 9)
PcDesc(pc=0x00007fac3ca4164b offset=22b bits=0):
   test1::micro@17 (line 9)
PcDesc(pc=0x00007fac3ca4165b offset=23b bits=0):
   test1::micro@21 (line 8)
PcDesc(pc=0x00007fac3ca41662 offset=242 bits=1):
   test1::micro@21 (line 8)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: reg r9 [18],int
PcDesc(pc=0x00007fac3ca41665 offset=245 bits=0):
   test1::micro@21 (line 8)
PcDesc(pc=0x00007fac3ca416ec offset=2cc bits=0):
   test1::micro@8 (line 9)
PcDesc(pc=0x00007fac3ca4170d offset=2ed bits=0):
   test1::micro@17 (line 9)
PcDesc(pc=0x00007fac3ca41711 offset=2f1 bits=0):
   test1::micro@18 (line 8)
PcDesc(pc=0x00007fac3ca41716 offset=2f6 bits=0):
   test1::micro@5 (line 8)
PcDesc(pc=0x00007fac3ca4173c offset=31c bits=0):
   test1::micro@8 (line 9)
PcDesc(pc=0x00007fac3ca4178f offset=36f bits=0):
   test1::micro@17 (line 9)
PcDesc(pc=0x00007fac3ca41792 offset=372 bits=0):
   test1::micro@18 (line 8)
PcDesc(pc=0x00007fac3ca417ad offset=38d bits=0):
   test1::micro@5 (line 8)
PcDesc(pc=0x00007fac3ca417cc offset=3ac bits=1):
   test1::micro@5 (line 8)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: 0
   Expression stack
    - @0: 0
    - @1: stack[16]
PcDesc(pc=0x00007fac3ca417e8 offset=3c8 bits=0):
   test1::micro@5 (line 8)
PcDesc(pc=0x00007fac3ca4194c offset=52c bits=0):
   test1::micro@4 (line 8)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: nullptr
PcDesc(pc=0x00007fac3ca41968 offset=548 bits=0):
   test1::micro@8 (line 9)
PcDesc(pc=0x00007fac3ca419a1 offset=581 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 3 OopMaps

ImmutableOopMap {rcx=Oop rdx=Oop rsi=Oop } pc offsets: 578 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop } pc offsets: 940 
ImmutableOopMap {} pc offsets: 1324 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007fac3ca4143a offset=1a):
   test1::micro@-1 (line 8)
ScopeDesc(pc=0x00007fac3ca4143e offset=1e):
   test1::micro@4 (line 8)
ScopeDesc(pc=0x00007fac3ca41449 offset=29):
   test1::micro@5 (line 8)
ScopeDesc(pc=0x00007fac3ca4144d offset=2d):
   test1::micro@12 (line 9)
ScopeDesc(pc=0x00007fac3ca4146c offset=4c):
   test1::micro@15 (line 9)
ScopeDesc(pc=0x00007fac3ca414ad offset=8d):
   test1::micro@8 (line 9)
ScopeDesc(pc=0x00007fac3ca414bd offset=9d):
   test1::micro@17 (line 9)
ScopeDesc(pc=0x00007fac3ca414c6 offset=a6):
   test1::micro@5 (line 8)
ScopeDesc(pc=0x00007fac3ca41537 offset=117):
   test1::micro@21 (line 8)
ScopeDesc(pc=0x00007fac3ca41543 offset=123):
   test1::micro@8 (line 9)
ScopeDesc(pc=0x00007fac3ca4164b offset=22b):
   test1::micro@17 (line 9)
ScopeDesc(pc=0x00007fac3ca4165b offset=23b):
   test1::micro@21 (line 8)
ScopeDesc(pc=0x00007fac3ca41662 offset=242):
   test1::micro@21 (line 8)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: reg r9 [18],int
ScopeDesc(pc=0x00007fac3ca41665 offset=245):
   test1::micro@21 (line 8)
ScopeDesc(pc=0x00007fac3ca416ec offset=2cc):
   test1::micro@8 (line 9)
ScopeDesc(pc=0x00007fac3ca4170d offset=2ed):
   test1::micro@17 (line 9)
ScopeDesc(pc=0x00007fac3ca41711 offset=2f1):
   test1::micro@18 (line 8)
ScopeDesc(pc=0x00007fac3ca41716 offset=2f6):
   test1::micro@5 (line 8)
ScopeDesc(pc=0x00007fac3ca4173c offset=31c):
   test1::micro@8 (line 9)
ScopeDesc(pc=0x00007fac3ca4178f offset=36f):
   test1::micro@17 (line 9)
ScopeDesc(pc=0x00007fac3ca41792 offset=372):
   test1::micro@18 (line 8)
ScopeDesc(pc=0x00007fac3ca417ad offset=38d):
   test1::micro@5 (line 8)
ScopeDesc(pc=0x00007fac3ca417cc offset=3ac):
   test1::micro@5 (line 8)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: 0
   Expression stack
    - @0: 0
    - @1: stack[16]
ScopeDesc(pc=0x00007fac3ca417e8 offset=3c8):
   test1::micro@5 (line 8)
ScopeDesc(pc=0x00007fac3ca4194c offset=52c):
   test1::micro@4 (line 8)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: nullptr
ScopeDesc(pc=0x00007fac3ca41968 offset=548):
   test1::micro@8 (line 9)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007fac3ca41300: 00ff
relocInfo@0x00007fac3ca41300 [type=0(none) addr=0x00007fac3ca4151f offset=255]
         @0x00007fac3ca41302: 00ff
relocInfo@0x00007fac3ca41302 [type=0(none) addr=0x00007fac3ca4161e offset=255]
         @0x00007fac3ca41304: 5044
relocInfo@0x00007fac3ca41304 [type=10(poll) addr=0x00007fac3ca41662 offset=68]
         @0x00007fac3ca41306: 00ff
relocInfo@0x00007fac3ca41306 [type=0(none) addr=0x00007fac3ca41761 offset=255]
         @0x00007fac3ca41308: 583e
relocInfo@0x00007fac3ca41308 [type=11(poll_return) addr=0x00007fac3ca4179f offset=62]
         @0x00007fac3ca4130a: 3128
relocInfo@0x00007fac3ca4130a [type=6(runtime_call) addr=0x00007fac3ca417c7 offset=40 format=1] | [destination=0x00007fac3ca0ab20]
         @0x00007fac3ca4130c: 8005
relocInfo@0x00007fac3ca4130c [type=16(post_call_nop) addr=0x00007fac3ca417cc offset=5]
         @0x00007fac3ca4130e: 7c03500d8b487fac3808
relocInfo@0x00007fac3ca41316 [type=7(external_word) addr=0x00007fac3ca417d4 offset=8 data={500d8b487fac}] | [target=0x00007fac500d8b48]
         @0x00007fac3ca41318: 310e
relocInfo@0x00007fac3ca41318 [type=6(runtime_call) addr=0x00007fac3ca417e2 offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca4131a: 7c03501523f07fac3806
relocInfo@0x00007fac3ca41322 [type=7(external_word) addr=0x00007fac3ca417e8 offset=6 data={501523f07fac}] | [target=0x00007fac501523f0]
         @0x00007fac3ca41324: 310e
relocInfo@0x00007fac3ca41324 [type=6(runtime_call) addr=0x00007fac3ca417f6 offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca41326: 7c03501523f07fac3806
relocInfo@0x00007fac3ca4132e [type=7(external_word) addr=0x00007fac3ca417fc offset=6 data={501523f07fac}] | [target=0x00007fac501523f0]
         @0x00007fac3ca41330: 310e
relocInfo@0x00007fac3ca41330 [type=6(runtime_call) addr=0x00007fac3ca4180a offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca41332: 7c03501523f07fac3806
relocInfo@0x00007fac3ca4133a [type=7(external_word) addr=0x00007fac3ca41810 offset=6 data={501523f07fac}] | [target=0x00007fac501523f0]
         @0x00007fac3ca4133c: 310e
relocInfo@0x00007fac3ca4133c [type=6(runtime_call) addr=0x00007fac3ca4181e offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca4133e: 7c03501523f07fac3806
relocInfo@0x00007fac3ca41346 [type=7(external_word) addr=0x00007fac3ca41824 offset=6 data={501523f07fac}] | [target=0x00007fac501523f0]
         @0x00007fac3ca41348: 310e
relocInfo@0x00007fac3ca41348 [type=6(runtime_call) addr=0x00007fac3ca41832 offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca4134a: 7c03501523f07fac3806
relocInfo@0x00007fac3ca41352 [type=7(external_word) addr=0x00007fac3ca41838 offset=6 data={501523f07fac}] | [target=0x00007fac501523f0]
         @0x00007fac3ca41354: 310e
relocInfo@0x00007fac3ca41354 [type=6(runtime_call) addr=0x00007fac3ca41846 offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca41356: 7c03501523f07fac3806
relocInfo@0x00007fac3ca4135e [type=7(external_word) addr=0x00007fac3ca4184c offset=6 data={501523f07fac}] | [target=0x00007fac501523f0]
         @0x00007fac3ca41360: 310e
relocInfo@0x00007fac3ca41360 [type=6(runtime_call) addr=0x00007fac3ca4185a offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca41362: 7c03501523f07fac3806
relocInfo@0x00007fac3ca4136a [type=7(external_word) addr=0x00007fac3ca41860 offset=6 data={501523f07fac}] | [target=0x00007fac501523f0]
         @0x00007fac3ca4136c: 310e
relocInfo@0x00007fac3ca4136c [type=6(runtime_call) addr=0x00007fac3ca4186e offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca4136e: 7c03501523f07fac3806
relocInfo@0x00007fac3ca41376 [type=7(external_word) addr=0x00007fac3ca41874 offset=6 data={501523f07fac}] | [target=0x00007fac501523f0]
         @0x00007fac3ca41378: 310e
relocInfo@0x00007fac3ca41378 [type=6(runtime_call) addr=0x00007fac3ca41882 offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca4137a: 7c03501523f07fac3806
relocInfo@0x00007fac3ca41382 [type=7(external_word) addr=0x00007fac3ca41888 offset=6 data={501523f07fac}] | [target=0x00007fac501523f0]
         @0x00007fac3ca41384: 310e
relocInfo@0x00007fac3ca41384 [type=6(runtime_call) addr=0x00007fac3ca41896 offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca41386: 7c03501523f07fac3806
relocInfo@0x00007fac3ca4138e [type=7(external_word) addr=0x00007fac3ca4189c offset=6 data={501523f07fac}] | [target=0x00007fac501523f0]
         @0x00007fac3ca41390: 310e
relocInfo@0x00007fac3ca41390 [type=6(runtime_call) addr=0x00007fac3ca418aa offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca41392: 7c03501523f07fac3806
relocInfo@0x00007fac3ca4139a [type=7(external_word) addr=0x00007fac3ca418b0 offset=6 data={501523f07fac}] | [target=0x00007fac501523f0]
         @0x00007fac3ca4139c: 310e
relocInfo@0x00007fac3ca4139c [type=6(runtime_call) addr=0x00007fac3ca418be offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca4139e: 7c03501523f07fac3806
relocInfo@0x00007fac3ca413a6 [type=7(external_word) addr=0x00007fac3ca418c4 offset=6 data={501523f07fac}] | [target=0x00007fac501523f0]
         @0x00007fac3ca413a8: 310e
relocInfo@0x00007fac3ca413a8 [type=6(runtime_call) addr=0x00007fac3ca418d2 offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca413aa: 7c03501523f07fac3806
relocInfo@0x00007fac3ca413b2 [type=7(external_word) addr=0x00007fac3ca418d8 offset=6 data={501523f07fac}] | [target=0x00007fac501523f0]
         @0x00007fac3ca413b4: 310e
relocInfo@0x00007fac3ca413b4 [type=6(runtime_call) addr=0x00007fac3ca418e6 offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca413b6: 7c03501523f07fac3806
relocInfo@0x00007fac3ca413be [type=7(external_word) addr=0x00007fac3ca418ec offset=6 data={501523f07fac}] | [target=0x00007fac501523f0]
         @0x00007fac3ca413c0: 310e
relocInfo@0x00007fac3ca413c0 [type=6(runtime_call) addr=0x00007fac3ca418fa offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca413c2: 7c03501523f07fac3806
relocInfo@0x00007fac3ca413ca [type=7(external_word) addr=0x00007fac3ca41900 offset=6 data={501523f07fac}] | [target=0x00007fac501523f0]
         @0x00007fac3ca413cc: 310e
relocInfo@0x00007fac3ca413cc [type=6(runtime_call) addr=0x00007fac3ca4190e offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca413ce: 7c03501523f07fac3806
relocInfo@0x00007fac3ca413d6 [type=7(external_word) addr=0x00007fac3ca41914 offset=6 data={501523f07fac}] | [target=0x00007fac501523f0]
         @0x00007fac3ca413d8: 310e
relocInfo@0x00007fac3ca413d8 [type=6(runtime_call) addr=0x00007fac3ca41922 offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca413da: 7c03501523f07fac3806
relocInfo@0x00007fac3ca413e2 [type=7(external_word) addr=0x00007fac3ca41928 offset=6 data={501523f07fac}] | [target=0x00007fac501523f0]
         @0x00007fac3ca413e4: 310e
relocInfo@0x00007fac3ca413e4 [type=6(runtime_call) addr=0x00007fac3ca41936 offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca413e6: 3111
relocInfo@0x00007fac3ca413e6 [type=6(runtime_call) addr=0x00007fac3ca41947 offset=17 format=1] | [destination=0x00007fac3ca0ab20]
         @0x00007fac3ca413e8: 8005
relocInfo@0x00007fac3ca413e8 [type=16(post_call_nop) addr=0x00007fac3ca4194c offset=5]
         @0x00007fac3ca413ea: 7c03500d8b487fac3808
relocInfo@0x00007fac3ca413f2 [type=7(external_word) addr=0x00007fac3ca41954 offset=8 data={500d8b487fac}] | [target=0x00007fac500d8b48]
         @0x00007fac3ca413f4: 310e
relocInfo@0x00007fac3ca413f4 [type=6(runtime_call) addr=0x00007fac3ca41962 offset=14 format=1] | [destination=0x00007fac4f71fcd0]
         @0x00007fac3ca413f6: 79c94006
relocInfo@0x00007fac3ca413f8 [type=8(internal_word) addr=0x00007fac3ca41968 offset=6 data=457] | [target=0x00007fac3ca4179f]
         @0x00007fac3ca413fa: 3111
relocInfo@0x00007fac3ca413fa [type=6(runtime_call) addr=0x00007fac3ca41979 offset=17 format=1] | [destination=0x00007fac3ca099a0]
         @0x00007fac3ca413fc: 3105
relocInfo@0x00007fac3ca413fc [type=6(runtime_call) addr=0x00007fac3ca4197e offset=5 format=1] | [destination=0x00007fac3c94fe80]
         @0x00007fac3ca413fe: 000a
relocInfo@0x00007fac3ca413fe [type=0(none) addr=0x00007fac3ca41988 offset=10]
         @0x00007fac3ca41400: 3100
relocInfo@0x00007fac3ca41400 [type=6(runtime_call) addr=0x00007fac3ca41988 offset=0 format=1] | [destination=0x00007fac3c912a20]
         @0x00007fac3ca41402: 310f
relocInfo@0x00007fac3ca41402 [type=6(runtime_call) addr=0x00007fac3ca41997 offset=15 format=1] | [destination=0x00007fac3ca0ae60]
         @0x00007fac3ca41404: 0000
relocInfo@0x00007fac3ca41404 [type=0(none) addr=0x00007fac3ca41997 offset=0]
         @0x00007fac3ca41406: 0000
relocInfo@0x00007fac3ca41406 [type=0(none) addr=0x00007fac3ca41997 offset=0]
         @0x00007fac3ca41408: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 3 entries, 28 bytes):
{
   < 0x00007fac3ca4143a, 0x00007fac3ca4193c > < 0x00007fac3ca41449, 0x00007fac3ca417ad > < 0x00007fac3ca41469, 0x00007fac3ca417ad > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 nullptr-oop
#1: 0x00000007ff0e6a38 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000007ff0e6a38}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 nullptr-oop
#1: 0x00007fabf8400510 {method} {0x00007fabf8400510} 'micro' '([I[I[I)V' in 'test1'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[time] 13 ms  [res] -619955737
------------------------------------------------------------------------
static test1::micro([I[I[I)V
  interpreter_invocation_count:         768
  invocation_counter:                   768
  backedge_counter:                 1576704
  decompile_count:                        0
  mdo size: 472 bytes

   0 iconst_0
   1 istore_3
   2 iload_3
   3 fast_aload_0
   4 arraylength
   5 if_icmpge 24
  0    bci: 5    BranchData         taken(641) displacement(56)
                                    not taken(1315973)
   8 fast_aload_0
   9 iload_3
  10 aload_1
  11 iload_3
  12 iaload
  13 aload_2
  14 iload_3
  15 iaload
  16 imul
  17 iastore
  18 iinc #3 1
  21 goto 2
  32   bci: 21   JumpData           taken(1315973) displacement(-32)
  24 return
------------------------------------------------------------------------
Total MDO size: 472 bytes
