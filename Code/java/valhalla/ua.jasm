Classfile /home/jatinbha/code/java/valhalla/unsafe_access.class
  Last modified 30 Mar 2025; size 1460 bytes
  SHA-256 checksum 018cab0a7c768918531fda648ff880e9f672269b819c227a5ef687836252a995
  Compiled from "unsafe_access.java"
public value class unsafe_access
  minor version: 65535
  major version: 69
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #9                          // unsafe_access
  super_class: #2                         // java/lang/Object
  interfaces: 0, fields: 2, methods: 4, attributes: 2
Constant pool:
   #1 = Methodref          #2.#3          // java/lang/Object."<init>":()V
   #2 = Class              #4             // java/lang/Object
   #3 = NameAndType        #5:#6          // "<init>":()V
   #4 = Utf8               java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = Integer            100000
   #8 = Methodref          #9.#10         // unsafe_access.micro:(I)LPoint;
   #9 = Class              #11            // unsafe_access
  #10 = NameAndType        #12:#13        // micro:(I)LPoint;
  #11 = Utf8               unsafe_access
  #12 = Utf8               micro
  #13 = Utf8               (I)LPoint;
  #14 = Methodref          #15.#16        // Point.reduce:()I
  #15 = Class              #17            // Point
  #16 = NameAndType        #18:#19        // reduce:()I
  #17 = Utf8               Point
  #18 = Utf8               reduce
  #19 = Utf8               ()I
  #20 = Fieldref           #21.#22        // java/lang/System.out:Ljava/io/PrintStream;
  #21 = Class              #23            // java/lang/System
  #22 = NameAndType        #24:#25        // out:Ljava/io/PrintStream;
  #23 = Utf8               java/lang/System
  #24 = Utf8               out
  #25 = Utf8               Ljava/io/PrintStream;
  #26 = Methodref          #27.#28        // java/io/PrintStream.println:(J)V
  #27 = Class              #29            // java/io/PrintStream
  #28 = NameAndType        #30:#31        // println:(J)V
  #29 = Utf8               java/io/PrintStream
  #30 = Utf8               println
  #31 = Utf8               (J)V
  #32 = Class              #33            // java/lang/Exception
  #33 = Utf8               java/lang/Exception
  #34 = Methodref          #27.#35        // java/io/PrintStream.println:(Ljava/lang/Object;)V
  #35 = NameAndType        #30:#36        // println:(Ljava/lang/Object;)V
  #36 = Utf8               (Ljava/lang/Object;)V
  #37 = Methodref          #15.#38        // Point."<init>":(II)V
  #38 = NameAndType        #5:#39         // "<init>":(II)V
  #39 = Utf8               (II)V
  #40 = Integer            50000
  #41 = Fieldref           #9.#42         // unsafe_access.UNSAFE:Ljdk/internal/misc/Unsafe;
  #42 = NameAndType        #43:#44        // UNSAFE:Ljdk/internal/misc/Unsafe;
  #43 = Utf8               UNSAFE
  #44 = Utf8               Ljdk/internal/misc/Unsafe;
  #45 = Methodref          #46.#47        // jdk/internal/misc/Unsafe.makePrivateBuffer:(Ljava/lang/Object;)Ljava/lang/Object;
  #46 = Class              #48            // jdk/internal/misc/Unsafe
  #47 = NameAndType        #49:#50        // makePrivateBuffer:(Ljava/lang/Object;)Ljava/lang/Object;
  #48 = Utf8               jdk/internal/misc/Unsafe
  #49 = Utf8               makePrivateBuffer
  #50 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
  #51 = String             #52            // f1
  #52 = Utf8               f1
  #53 = Methodref          #54.#55        // java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
  #54 = Class              #56            // java/lang/Class
  #55 = NameAndType        #57:#58        // getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
  #56 = Utf8               java/lang/Class
  #57 = Utf8               getDeclaredField
  #58 = Utf8               (Ljava/lang/String;)Ljava/lang/reflect/Field;
  #59 = Methodref          #46.#60        // jdk/internal/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
  #60 = NameAndType        #61:#62        // objectFieldOffset:(Ljava/lang/reflect/Field;)J
  #61 = Utf8               objectFieldOffset
  #62 = Utf8               (Ljava/lang/reflect/Field;)J
  #63 = Methodref          #46.#64        // jdk/internal/misc/Unsafe.putInt:(Ljava/lang/Object;JI)V
  #64 = NameAndType        #65:#66        // putInt:(Ljava/lang/Object;JI)V
  #65 = Utf8               putInt
  #66 = Utf8               (Ljava/lang/Object;JI)V
  #67 = Methodref          #2.#68         // java/lang/Object.hashCode:()I
  #68 = NameAndType        #69:#19        // hashCode:()I
  #69 = Utf8               hashCode
  #70 = Fieldref           #9.#71         // unsafe_access.last_hash:I
  #71 = NameAndType        #72:#73        // last_hash:I
  #72 = Utf8               last_hash
  #73 = Utf8               I
  #74 = Methodref          #46.#75        // jdk/internal/misc/Unsafe.finishPrivateBuffer:(Ljava/lang/Object;)Ljava/lang/Object;
  #75 = NameAndType        #76:#50        // finishPrivateBuffer:(Ljava/lang/Object;)Ljava/lang/Object;
  #76 = Utf8               finishPrivateBuffer
  #77 = Methodref          #46.#78        // jdk/internal/misc/Unsafe.getUnsafe:()Ljdk/internal/misc/Unsafe;
  #78 = NameAndType        #79:#80        // getUnsafe:()Ljdk/internal/misc/Unsafe;
  #79 = Utf8               getUnsafe
  #80 = Utf8               ()Ljdk/internal/misc/Unsafe;
  #81 = Utf8               Code
  #82 = Utf8               LineNumberTable
  #83 = Utf8               main
  #84 = Utf8               ([Ljava/lang/String;)V
  #85 = Utf8               StackMapTable
  #86 = Utf8               Exceptions
  #87 = Utf8               <clinit>
  #88 = Utf8               SourceFile
  #89 = Utf8               unsafe_access.java
  #90 = Utf8               LoadableDescriptors
  #91 = Utf8               LPoint;
{
  public static final jdk.internal.misc.Unsafe UNSAFE;
    descriptor: Ljdk/internal/misc/Unsafe;
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static int last_hash;
    descriptor: I
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC

  public unsafe_access();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 21: 0

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=4, locals=4, args_size=1
         0: lconst_0
         1: lstore_1
         2: iconst_0
         3: istore_3
         4: iload_3
         5: ldc           #7                  // int 100000
         7: if_icmpge     27
        10: lload_1
        11: iload_3
        12: invokestatic  #8                  // Method micro:(I)LPoint;
        15: invokevirtual #14                 // Method Point.reduce:()I
        18: i2l
        19: ladd
        20: lstore_1
        21: iinc          3, 1
        24: goto          4
        27: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
        30: lload_1
        31: invokevirtual #26                 // Method java/io/PrintStream.println:(J)V
        34: goto          45
        37: astore_3
        38: getstatic     #20                 // Field java/lang/System.out:Ljava/io/PrintStream;
        41: aload_3
        42: invokevirtual #34                 // Method java/io/PrintStream.println:(Ljava/lang/Object;)V
        45: return
      Exception table:
         from    to  target type
             2    34    37   Class java/lang/Exception
      LineNumberTable:
        line 26: 0
        line 28: 2
        line 29: 10
        line 28: 21
        line 31: 27
        line 34: 34
        line 32: 37
        line 33: 38
        line 35: 45
      StackMapTable: number_of_entries = 4
        frame_type = 253 /* append */
          offset_delta = 4
          locals = [ long, int ]
        frame_type = 250 /* chop */
          offset_delta = 22
        frame_type = 73 /* same_locals_1_stack_item */
          stack = [ class java/lang/Exception ]
        frame_type = 7 /* same */

  public static Point micro(int) throws java.lang.Exception;
    descriptor: (I)LPoint;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=6, locals=2, args_size=1
         0: new           #15                 // class Point
         3: dup
         4: iload_0
         5: iload_0
         6: bipush        10
         8: iadd
         9: invokespecial #37                 // Method Point."<init>":(II)V
        12: astore_1
        13: iload_0
        14: ldc           #40                 // int 50000
        16: if_icmple     54
        19: getstatic     #41                 // Field UNSAFE:Ljdk/internal/misc/Unsafe;
        22: aload_1
        23: invokevirtual #45                 // Method jdk/internal/misc/Unsafe.makePrivateBuffer:(Ljava/lang/Object;)Ljava/lang/Object;
        26: checkcast     #15                 // class Point
        29: astore_1
        30: getstatic     #41                 // Field UNSAFE:Ljdk/internal/misc/Unsafe;
        33: aload_1
        34: getstatic     #41                 // Field UNSAFE:Ljdk/internal/misc/Unsafe;
        37: ldc           #15                 // class Point
        39: ldc           #51                 // String f1
        41: invokevirtual #53                 // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
        44: invokevirtual #59                 // Method jdk/internal/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
        47: iload_0
        48: bipush        10
        50: iadd
        51: invokevirtual #63                 // Method jdk/internal/misc/Unsafe.putInt:(Ljava/lang/Object;JI)V
        54: aload_1
        55: invokevirtual #67                 // Method java/lang/Object.hashCode:()I
        58: putstatic     #70                 // Field last_hash:I
        61: iload_0
        62: ldc           #40                 // int 50000
        64: if_icmple     78
        67: getstatic     #41                 // Field UNSAFE:Ljdk/internal/misc/Unsafe;
        70: aload_1
        71: invokevirtual #74                 // Method jdk/internal/misc/Unsafe.finishPrivateBuffer:(Ljava/lang/Object;)Ljava/lang/Object;
        74: checkcast     #15                 // class Point
        77: astore_1
        78: aload_1
        79: areturn
      LineNumberTable:
        line 38: 0
        line 39: 13
        line 40: 19
        line 41: 30
        line 43: 54
        line 44: 61
        line 45: 67
        line 47: 78
      StackMapTable: number_of_entries = 2
        frame_type = 252 /* append */
          offset_delta = 54
          locals = [ class Point ]
        frame_type = 23 /* same */
    Exceptions:
      throws java.lang.Exception

  static {};
    descriptor: ()V
    flags: (0x0008) ACC_STATIC
    Code:
      stack=1, locals=0, args_size=0
         0: invokestatic  #77                 // Method jdk/internal/misc/Unsafe.getUnsafe:()Ljdk/internal/misc/Unsafe;
         3: putstatic     #41                 // Field UNSAFE:Ljdk/internal/misc/Unsafe;
         6: iconst_0
         7: putstatic     #70                 // Field last_hash:I
        10: return
      LineNumberTable:
        line 22: 0
        line 23: 6
}
SourceFile: "unsafe_access.java"
LoadableDescriptors:
  LPoint;
