CompileCommand: print bug1.micro bool print = true

============================= C2-compiled nmethod ==============================
#r018 rsi:rsi   : parm 0: int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
#r016 rdx:rdx   : parm 1: int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
#r010 rcx:rcx   : parm 2: int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
#r004 r8   : parm 3: int
# -- Old rsp -- Framesize: 160 --
#r591 rsp+156: in_preserve
#r590 rsp+152: return address
#r589 rsp+148: in_preserve
#r588 rsp+144: saved fp register
#r587 rsp+140: pad2, stack alignment
#r586 rsp+136: pad2, stack alignment
#r585 rsp+132: Fixed slot 1
#r584 rsp+128: Fixed slot 0
#r623 rsp+124: spill
#r622 rsp+120: spill
#r621 rsp+116: spill
#r620 rsp+112: spill
#r619 rsp+108: spill
#r618 rsp+104: spill
#r617 rsp+100: spill
#r616 rsp+96: spill
#r615 rsp+92: spill
#r614 rsp+88: spill
#r613 rsp+84: spill
#r612 rsp+80: spill
#r611 rsp+76: spill
#r610 rsp+72: spill
#r609 rsp+68: spill
#r608 rsp+64: spill
#r607 rsp+60: spill
#r606 rsp+56: spill
#r605 rsp+52: spill
#r604 rsp+48: spill
#r603 rsp+44: spill
#r602 rsp+40: spill
#r601 rsp+36: spill
#r600 rsp+32: spill
#r599 rsp+28: spill
#r598 rsp+24: spill
#r597 rsp+20: spill
#r596 rsp+16: spill
#r595 rsp+12: spill
#r594 rsp+ 8: spill
#r593 rsp+ 4: spill
#r592 rsp+ 0: spill
#
----------------------- MetaData before Compile_id = 275 ------------------------
{method}
 - this oop:          0x00007f72207024d0
 - method holder:     'bug1'
 - constants:         0x00007f7220702058 constant pool [81] {0x00007f7220702058} for 'bug1' cache=0x00007f7220702778
 - access:            0xc1000009  public static 
 - name:              'micro'
 - signature:         '([I[I[II)I'
 - max stack:         4
 - max locals:        7
 - size of params:    4
 - method size:       14
 - vtable index:      -2
 - i2i entry:         0x00007f726500c740
 - adapters:          AHE@0x00007f72683980d0: 0xbbba i2c: 0x00007f726504d800 c2i: 0x00007f726504d8f9 c2iUV: 0x00007f726504d8c7 c2iNCI: 0x00007f726504d933
 - compiled entry     0x00007f726504d8f9
 - code size:         68
 - code start:        0x00007f7220702480
 - code end (excl):   0x00007f72207024c4
 - method data:       0x00007f7220702a18
 - checked ex length: 0
 - linenumber start:  0x00007f72207024c4
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 275 -----------------------
#
#  int ( int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *, int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *, int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *, int )
#
000     N1: #	out( B1 ) <- in( B27 B22 B28 B23 B19 B30 B26 B20 B21 B24 B25 B18 B17 B29 )  Freq: 1

000     B1: #	out( B27 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (512 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #144	# Create frame

01e     movq    R10, RSI	# spill
021     movq    R11, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
02b     movl    RBP, [R11 + #112 (8-bit)]	# compressed ptr ! Field: bug1.I_SPECIES
02f     movl    R9, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
034     NullCheck RBP

034     B2: #	out( B22 B3 ) <- in( B1 )  Freq: 0.999999
        nop 	# 12 bytes pad for loops and calls
040     cmpl    R9, narrowklass: precise jdk/incubator/vector/IntVector$IntSpecies: 0x00007f71e006fb88 (jdk/incubator/vector/VectorSpecies):Constant:exact *	# compressed klass ptr
047     jne,u   B22  P=0.000001 C=-1.000000

04d     B3: #	out( B28 B4 ) <- in( B2 )  Freq: 0.999998
04d     movq    R9, RSI	# spill
050     movl    R11, [RSI + #12 (8-bit)]	# range
054     NullCheck RSI

054     B4: #	out( B23 B5 ) <- in( B3 )  Freq: 0.999997
054     decode_heap_oop_not_null RBX,RBP
058     # checkcastPP of RBX
058     movl    R10, [RBX + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
05c     subl    R11, R10	# int
05f     leal    RBP, [R11 + #1]
063     testl   RBP, RBP
065     jl     B23  P=0.000001 C=-1.000000

06b     B5: #	out( B19 B6 ) <- in( B4 )  Freq: 0.999996
06b     cmpl    R11, #-1
06f     je     B19  P=0.000001 C=-1.000000

075     B6: #	out( B30 B7 ) <- in( B5 )  Freq: 0.999995
075     movl    RBP, [RBX + #72 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.dummyVector (constant)
        nop 	# 8 bytes pad for loops and calls
080     movl    R11, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
085     NullCheck RBP

085     B7: #	out( B26 B8 ) <- in( B6 )  Freq: 0.999994
085     cmpl    R11, narrowklass: precise jdk/incubator/vector/Int512Vector: 0x00007f71e0074ee0:Constant:exact *	# compressed klass ptr
08c     jne,u   B26  P=0.000000 C=-1.000000

092     B8: #	out( B24 B9 ) <- in( B7 )  Freq: 0.999994
092     load_vector XMM0,[RSI + #16 (8-bit)]
        nop 	# 4 bytes pad for loops and calls
0a0     movl    R11, [RDX + #12 (8-bit)]	# range
0a4     NullCheck RDX

0a4     B9: #	out( B24 B10 ) <- in( B8 )  Freq: 0.999993
0a4     subl    R11, R10	# int
0a7     incl    R11	# int
0aa     testl   R11, R11
0ad     jl     B24  P=0.000001 C=-1.000000

0b3     B10: #	out( B11 ) <- in( B9 )  Freq: 0.999992
0b3     xorl    R9, R9	# int
0b6     # TLS is in R15
        nop 	# 10 bytes pad for loops and calls

0c0     B11: #	out( B18 B12 ) <- in( B10 B12 ) Loop( B11-B12 inner ) Freq: 65.02
0c0     cmpl    R9, R11	# unsigned
0c3     jae,u   B18  P=0.000001 C=-1.000000

0c9     B12: #	out( B11 B13 ) <- in( B11 )  Freq: 65.0199
0c9     movq    RDI, [R15 + #960 (32-bit)]	# ptr
0d0     # castII of R9
0d0     vpand   XMM0,XMM0,[RDX + #16 + R9 << #2]	! and vectors
0db     addl    R9, R10	# int
0de     testl   rax, [RDI]	# Safepoint: poll for GC        # bug1::micro @ bci:54 (line 13) L[0]=_ L[1]=RDX L[2]=RCX L[3]=R8 L[4]=#ScObj0 L[5]=R9 L[6]=_
        # ScObj0 jdk/incubator/vector/Int512Vector={ [payload :0]=XMM0 }
        # OopMap {rcx=Oop rbx=Oop rdx=Oop off=222/0xde}
0e0     cmpl    R9, #1024
0e7     jl,s   B11  P=0.984621 C=59478.000000

0e9     B13: #	out( B29 B14 ) <- in( B12 )  Freq: 0.999927
0e9     movl    R10, [RCX + #12 (8-bit)]	# range
0ed     NullCheck RCX

0ed     B14: #	out( B25 B15 ) <- in( B13 )  Freq: 0.999926
0ed     leal    RBP, [R10 + #-15]
0f1     testl   RBP, RBP
0f3     jl     B25  P=0.000001 C=-1.000000

0f9     B15: #	out( B20 B16 ) <- in( B14 )  Freq: 0.999925
        nop 	# 7 bytes pad for loops and calls
100     cmpl    R10, #15
104     je     B20  P=0.000001 C=-1.000000

10a     B16: #	out( B21 B17 ) <- in( B15 )  Freq: 0.999924
10a     store_vector [RCX + #16 (8-bit)],XMM0
	
114     cmpl    R8, R10	# unsigned
117     jae,u   B21  P=0.000001 C=-1.000000

11d     B17: #	out( N1 ) <- in( B16 )  Freq: 0.999923
11d     movl    RAX, [RCX + #16 + R8 << #2]	# int
122     vzeroupper
	addq    rsp, 144	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

13a     ret

13b     B18: #	out( N1 ) <- in( B11 )  Freq: 6.58834e-05
13b     movl    RSI, #-28	# int
140     movl    [rsp + #0], R9	# spill
144     movl    [rsp + #4], R11	# spill
149     vmovdqu [rsp + 64],XMM0	# spill
151     movq    [rsp + #16], RCX	# spill
156     movl    [rsp + #24], R8	# spill
15b     movq    [rsp + #32], RBX	# spill
160     movq    [rsp + #40], RDX	# spill
        nop 	# 3 bytes pad for loops and calls
168     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 385) L[0]=_ L[1]=_ STK[0]=rsp + #0 STK[1]=rsp + #4 STK[2]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 2941) L[0]=rsp + #32 L[1]=rsp + #40 L[2]=_ L[3]=_
        # bug1::micro @ bci:27 (line 14) L[0]=_ L[1]=rsp + #40 L[2]=rsp + #16 L[3]=rsp + #24 L[4]=#ScObj0 L[5]=rsp + #0 L[6]=_
        # ScObj0 jdk/incubator/vector/Int512Vector={ [payload :0]=rsp + #64 }
        # OopMap {[16]=Oop [32]=Oop [40]=Oop off=368/0x170}
178     stop	# ShouldNotReachHere

18c     B19: #	out( N1 ) <- in( B5 )  Freq: 1.01327e-06
18c     movl    RSI, #-28	# int
191     movq    [rsp + #0], RDX	# spill
195     movq    [rsp + #8], RCX	# spill
19a     movl    [rsp + #16], R8	# spill
19f     movq    [rsp + #24], RBX	# spill
1a4     movq    [rsp + #32], R9	# spill
        nop 	# 3 bytes pad for loops and calls
1ac     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 385) L[0]=_ L[1]=_ STK[0]=#0 STK[1]=RBP STK[2]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 2941) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=_ L[3]=_
        # bug1::micro @ bci:5 (line 12) L[0]=_ L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ L[5]=_ L[6]=_
        # OopMap {[0]=Oop [8]=Oop [24]=Oop [32]=Oop off=436/0x1b4}
1bc     stop	# ShouldNotReachHere

1d0     B20: #	out( N1 ) <- in( B15 )  Freq: 1.0132e-06
1d0     movl    RSI, #-28	# int
1d5     vmovdqu [rsp + 0],XMM0	# spill
1dc     movl    [rsp + #72], R8	# spill
1e1     movq    [rsp + #80], RCX	# spill
        nop 	# 2 bytes pad for loops and calls
1e8     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 385) L[0]=_ L[1]=_ STK[0]=#0 STK[1]=RBP STK[2]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:7 (line 3214) L[0]=#ScObj0 L[1]=rsp + #80 L[2]=_ L[3]=_
        # ScObj0 jdk/incubator/vector/Int512Vector={ [payload :0]=rsp + #0 }
        # bug1::micro @ bci:61 (line 17) L[0]=_ L[1]=_ L[2]=rsp + #80 L[3]=rsp + #72 L[4]=_ L[5]=_ L[6]=_
        # OopMap {[80]=Oop off=496/0x1f0}
1f8     stop	# ShouldNotReachHere

20c     B21: #	out( N1 ) <- in( B16 )  Freq: 1.0132e-06
20c     movl    RSI, #-28	# int
211     movq    RBP, RCX	# spill
214     movl    [rsp + #0], R8	# spill
218     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # bug1::micro @ bci:66 (line 18) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=RBP STK[1]=rsp + #0
        # OopMap {rbp=Oop off=544/0x220}
228     stop	# ShouldNotReachHere

23c     B22: #	out( N1 ) <- in( B2 )  Freq: 9.99999e-07
23c     movl    RSI, #-34	# int
241     movq    [rsp + #0], RDX	# spill
245     movq    [rsp + #8], RCX	# spill
24a     movl    [rsp + #16], R8	# spill
24f     movq    [rsp + #24], R10	# spill
254     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:2 (line 2941) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=_ STK[0]=#0 STK[1]=RBP
        # bug1::micro @ bci:5 (line 12) L[0]=_ L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=NarrowOop [0]=Oop [8]=Oop [24]=Oop off=604/0x25c}
264     stop	# ShouldNotReachHere

278     B23: #	out( N1 ) <- in( B4 )  Freq: 9.99997e-07
278     movl    RSI, #-52	# int
27d     movq    [rsp + #0], RDX	# spill
281     movq    [rsp + #8], RCX	# spill
286     movl    [rsp + #16], R8	# spill
28b     movq    [rsp + #24], RBX	# spill
290     movq    [rsp + #32], R9	# spill
        nop 	# 3 bytes pad for loops and calls
298     call,static  wrapper for: uncommon_trap(reason='intrinsic_or_type_checked_inlining' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 385) L[0]=_ L[1]=_ STK[0]=#0 STK[1]=RBP STK[2]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 2941) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=_ L[3]=_
        # bug1::micro @ bci:5 (line 12) L[0]=_ L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ L[5]=_ L[6]=_
        # OopMap {[0]=Oop [8]=Oop [24]=Oop [32]=Oop off=672/0x2a0}
2a8     stop	# ShouldNotReachHere

2bc     B24: #	out( N1 ) <- in( B8 B9 )  Freq: 2.01327e-06
2bc     movl    RSI, #-138	# int
2c1     vmovdqu [rsp + 0],XMM0	# spill
2c8     movq    RBP, RDX	# spill
2cb     movq    [rsp + #64], RCX	# spill
2d0     movl    [rsp + #72], R8	# spill
        nop 	# 3 bytes pad for loops and calls
2d8     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # bug1::micro @ bci:18 (line 13) L[0]=_ L[1]=RBP L[2]=rsp + #64 L[3]=rsp + #72 L[4]=#ScObj0 L[5]=#0 L[6]=_ STK[0]=#0 STK[1]=#1024
        # ScObj0 jdk/incubator/vector/Int512Vector={ [payload :0]=rsp + #0 }
        # OopMap {rbp=Oop [64]=Oop off=736/0x2e0}
2e8     stop	# ShouldNotReachHere

2fc     B25: #	out( N1 ) <- in( B14 )  Freq: 9.99926e-07
2fc     movl    RSI, #-52	# int
301     vmovdqu [rsp + 0],XMM0	# spill
308     movl    [rsp + #72], R8	# spill
30d     movq    [rsp + #80], RCX	# spill
        nop 	# 2 bytes pad for loops and calls
314     call,static  wrapper for: uncommon_trap(reason='intrinsic_or_type_checked_inlining' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 385) L[0]=_ L[1]=_ STK[0]=#0 STK[1]=RBP STK[2]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:7 (line 3214) L[0]=#ScObj0 L[1]=rsp + #80 L[2]=_ L[3]=_
        # ScObj0 jdk/incubator/vector/Int512Vector={ [payload :0]=rsp + #0 }
        # bug1::micro @ bci:61 (line 17) L[0]=_ L[1]=_ L[2]=rsp + #80 L[3]=rsp + #72 L[4]=_ L[5]=_ L[6]=_
        # OopMap {[80]=Oop off=796/0x31c}
324     stop	# ShouldNotReachHere

338     B26: #	out( N1 ) <- in( B7 )  Freq: 1e-35
338     movl    RSI, #-34	# int
33d     movq    [rsp + #0], RDX	# spill
341     movq    [rsp + #8], RCX	# spill
346     movl    [rsp + #16], R8	# spill
34b     movq    [rsp + #24], R9	# spill
350     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::dummyVector @ bci:4 (line 3907) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::fromArray @ bci:19 (line 2943) L[0]=_ L[1]=rsp + #24 L[2]=#0 L[3]=_
        # bug1::micro @ bci:5 (line 12) L[0]=_ L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=NarrowOop [0]=Oop [8]=Oop [24]=Oop off=856/0x358}
360     stop	# ShouldNotReachHere

374     B27: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
374     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
37c     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:2 (line 2941) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#null
        # bug1::micro @ bci:5 (line 12) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {off=900/0x384}
38c     stop	# ShouldNotReachHere

3a0     B28: #	out( N1 ) <- in( B3 )  Freq: 1.01328e-06
3a0     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
3a8     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:8 (line 2941) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=_ STK[2]=#null
        # bug1::micro @ bci:5 (line 12) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {off=944/0x3b0}
3b8     stop	# ShouldNotReachHere

3cc     B29: #	out( N1 ) <- in( B13 )  Freq: 1.0132e-06
3cc     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
3d4     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::intoArray @ bci:6 (line 3214) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=_ STK[2]=#null
        # bug1::micro @ bci:61 (line 17) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {off=988/0x3dc}
3e4     stop	# ShouldNotReachHere

3f8     B30: #	out( N1 ) <- in( B6 )  Freq: 4.76835e-07
3f8     movl    RSI, #-187	# int
3fd     movq    [rsp + #0], RDX	# spill
401     movq    [rsp + #8], RCX	# spill
406     movl    [rsp + #16], R8	# spill
40b     movq    [rsp + #24], R9	# spill
410     movq    [rsp + #32], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
418     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.AbstractSpecies::dummyVector @ bci:6 (line 318) L[0]=rsp + #32 L[1]=RBP STK[0]=RBP
        # jdk.incubator.vector.IntVector$IntSpecies::dummyVector @ bci:1 (line 3907) L[0]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:19 (line 2943) L[0]=_ L[1]=rsp + #24 L[2]=#0 L[3]=_
        # bug1::micro @ bci:5 (line 12) L[0]=_ L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=NarrowOop [0]=Oop [8]=Oop [24]=Oop [32]=Oop off=1056/0x420}
428     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     625  275             bug1::micro (68 bytes)
 total in heap  [0x00007f7265202210,0x00007f7265202f68] = 3416
 relocation     [0x00007f7265202380,0x00007f7265202470] = 240
 main code      [0x00007f7265202480,0x00007f72652028e0] = 1120
 stub code      [0x00007f72652028e0,0x00007f72652028f8] = 24
 oops           [0x00007f72652028f8,0x00007f7265202908] = 16
 metadata       [0x00007f7265202908,0x00007f72652029c0] = 184
 scopes data    [0x00007f72652029c0,0x00007f7265202c50] = 656
 scopes pcs     [0x00007f7265202c50,0x00007f7265202f20] = 720
 dependencies   [0x00007f7265202f20,0x00007f7265202f38] = 24
 nul chk table  [0x00007f7265202f38,0x00007f7265202f68] = 48

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007f72207024d0} 'micro' '([I[I[II)I' in 'bug1'
  # parm0:    rsi:rsi   = '[I'
  # parm1:    rdx:rdx   = '[I'
  # parm2:    rcx:rcx   = '[I'
  # parm3:    r8        = int
  #           [sp+0xa0]  (sp of caller)
 ;; N1: #	out( B1 ) <- in( B27 B22 B28 B23 B19 B30 B26 B20 B21 B24 B25 B18 B17 B29 )  Freq: 1
 ;; B1: #	out( B27 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007f7265202480:   mov    %eax,-0x18000(%rsp)
  0x00007f7265202487:   push   %rbp
  0x00007f7265202488:   sub    $0x90,%rsp
  0x00007f726520248f:   nop
  0x00007f7265202490:   cmpl   $0x1,0x20(%r15)
  0x00007f7265202498:   jne    0x00007f72652028d2           ;*synchronization entry
                                                            ; - bug1::micro@-1 (line 12)
  0x00007f726520249e:   mov    %rsi,%r10
  0x00007f72652024a1:   movabs $0x11f91f948,%r11            ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
                                                            ;   {oop(a 'java/lang/Class'{0x000000011f91f948} = 'bug1')}
  0x00007f72652024ab:   mov    0x70(%r11),%ebp              ;*getstatic I_SPECIES {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - bug1::micro@0 (line 12)
  0x00007f72652024af:   mov    0x8(%r12,%rbp,8),%r9d        ; implicit exception: dispatches to 0x00007f72652027f4
 ;; B2: #	out( B22 B3 ) <- in( B1 )  Freq: 0.999999
  0x00007f72652024b4:   nop
  0x00007f72652024b5:   nop
  0x00007f72652024b6:   nop
  0x00007f72652024b7:   nop
  0x00007f72652024b8:   nop
  0x00007f72652024b9:   nop
  0x00007f72652024ba:   nop
  0x00007f72652024bb:   nop
  0x00007f72652024bc:   nop
  0x00007f72652024bd:   nop
  0x00007f72652024be:   nop
  0x00007f72652024bf:   nop
  0x00007f72652024c0:   cmp    $0xd8970,%r9d                ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
                                                            ;   {metadata('jdk/incubator/vector/IntVector$IntSpecies')}
  0x00007f72652024c7:   jne    0x00007f72652026bc
 ;; B3: #	out( B28 B4 ) <- in( B2 )  Freq: 0.999998
  0x00007f72652024cd:   mov    %rsi,%r9
  0x00007f72652024d0:   mov    0xc(%rsi),%r11d              ; implicit exception: dispatches to 0x00007f7265202820
 ;; B4: #	out( B23 B5 ) <- in( B3 )  Freq: 0.999997
  0x00007f72652024d4:   lea    (%r12,%rbp,8),%rbx           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2941)
                                                            ; - bug1::micro@5 (line 12)
  0x00007f72652024d8:   mov    0xc(%rbx),%r10d              ;*getfield laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::length@1 (line 121)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2941)
                                                            ; - bug1::micro@5 (line 12)
  0x00007f72652024dc:   sub    %r10d,%r11d
  0x00007f72652024df:   lea    0x1(%r11),%ebp
  0x00007f72652024e3:   test   %ebp,%ebp
  0x00007f72652024e5:   jl     0x00007f72652026f8
 ;; B5: #	out( B19 B6 ) <- in( B4 )  Freq: 0.999996
  0x00007f72652024eb:   cmp    $0xffffffff,%r11d
  0x00007f72652024ef:   je     0x00007f726520260c           ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
 ;; B6: #	out( B30 B7 ) <- in( B5 )  Freq: 0.999995
  0x00007f72652024f5:   mov    0x48(%rbx),%ebp              ;*getfield dummyVector {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::dummyVector@1 (line 317)
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3907)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2943)
                                                            ; - bug1::micro@5 (line 12)
  0x00007f72652024f8:   nop
  0x00007f72652024f9:   nop
  0x00007f72652024fa:   nop
  0x00007f72652024fb:   nop
  0x00007f72652024fc:   nop
  0x00007f72652024fd:   nop
  0x00007f72652024fe:   nop
  0x00007f72652024ff:   nop
  0x00007f7265202500:   mov    0x8(%r12,%rbp,8),%r11d       ; implicit exception: dispatches to 0x00007f7265202878
 ;; B7: #	out( B26 B8 ) <- in( B6 )  Freq: 0.999994
  0x00007f7265202505:   cmp    $0xdd908,%r11d               ;   {metadata('jdk/incubator/vector/Int512Vector')}
  0x00007f726520250c:   jne    0x00007f72652027b8           ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
 ;; B8: #	out( B24 B9 ) <- in( B7 )  Freq: 0.999994
  0x00007f7265202512:   vmovdqu32 0x10(%rsi),%zmm0          ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@32 (line 3430)
                                                            ; - jdk.incubator.vector.Int512Vector::fromArray0@3 (line 896)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2943)
                                                            ; - bug1::micro@5 (line 12)
  0x00007f726520251c:   nop
  0x00007f726520251d:   nop
  0x00007f726520251e:   nop
  0x00007f726520251f:   nop
  0x00007f7265202520:   mov    0xc(%rdx),%r11d              ; implicit exception: dispatches to 0x00007f726520273c
 ;; B9: #	out( B24 B10 ) <- in( B8 )  Freq: 0.999993
  0x00007f7265202524:   sub    %r10d,%r11d                  ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
  0x00007f7265202527:   inc    %r11d
  0x00007f726520252a:   test   %r11d,%r11d
  0x00007f726520252d:   jl     0x00007f726520273c
 ;; B10: #	out( B11 ) <- in( B9 )  Freq: 0.999992
  0x00007f7265202533:   xor    %r9d,%r9d
  0x00007f7265202536:   nop
  0x00007f7265202537:   nop
  0x00007f7265202538:   nop
  0x00007f7265202539:   nop
  0x00007f726520253a:   nop
  0x00007f726520253b:   nop
  0x00007f726520253c:   nop
  0x00007f726520253d:   nop
  0x00007f726520253e:   nop
  0x00007f726520253f:   nop
 ;; B11: #	out( B18 B12 ) <- in( B10 B12 ) Loop( B11-B12 inner ) Freq: 65.02
  0x00007f7265202540:   cmp    %r11d,%r9d
  0x00007f7265202543:   jae    0x00007f72652025bb
 ;; B12: #	out( B11 B13 ) <- in( B11 )  Freq: 65.0199
  0x00007f7265202549:   mov    0x3c0(%r15),%rdi             ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2941)
                                                            ; - bug1::micro@27 (line 14)
  0x00007f7265202550:   vpandd 0x10(%rdx,%r9,4),%zmm0,%zmm0 ;*invokestatic binaryOp {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@154 (line 784)
                                                            ; - jdk.incubator.vector.Int512Vector::lanewise@3 (line 270)
                                                            ; - jdk.incubator.vector.Int512Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::and@5 (line 1755)
                                                            ; - bug1::micro@36 (line 15)
  0x00007f726520255b:   add    %r10d,%r9d                   ; ImmutableOopMap {rcx=Oop rbx=Oop rdx=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) bug1::micro@54 (line 13)
  0x00007f726520255e:   test   %eax,(%rdi)                  ;   {poll}
  0x00007f7265202560:   cmp    $0x400,%r9d
  0x00007f7265202567:   jl     0x00007f7265202540
 ;; B13: #	out( B29 B14 ) <- in( B12 )  Freq: 0.999927
  0x00007f7265202569:   mov    0xc(%rcx),%r10d              ; implicit exception: dispatches to 0x00007f726520284c
 ;; B14: #	out( B25 B15 ) <- in( B13 )  Freq: 0.999926
  0x00007f726520256d:   lea    -0xf(%r10),%ebp
  0x00007f7265202571:   test   %ebp,%ebp
  0x00007f7265202573:   jl     0x00007f726520277c
 ;; B15: #	out( B20 B16 ) <- in( B14 )  Freq: 0.999925
  0x00007f7265202579:   nop
  0x00007f726520257a:   nop
  0x00007f726520257b:   nop
  0x00007f726520257c:   nop
  0x00007f726520257d:   nop
  0x00007f726520257e:   nop
  0x00007f726520257f:   nop
  0x00007f7265202580:   cmp    $0xf,%r10d
  0x00007f7265202584:   je     0x00007f7265202650
 ;; B16: #	out( B21 B17 ) <- in( B15 )  Freq: 0.999924
  0x00007f726520258a:   vmovdqu32 %zmm0,0x10(%rcx)
  0x00007f7265202594:   cmp    %r10d,%r8d
  0x00007f7265202597:   jae    0x00007f726520268c           ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
 ;; B17: #	out( N1 ) <- in( B16 )  Freq: 0.999923
  0x00007f726520259d:   mov    0x10(%rcx,%r8,4),%eax        ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - bug1::micro@66 (line 18)
  0x00007f72652025a2:   vzeroupper 
  0x00007f72652025a5:   add    $0x90,%rsp
  0x00007f72652025ac:   pop    %rbp
  0x00007f72652025ad:   cmp    0x3b8(%r15),%rsp             ;   {poll_return}
  0x00007f72652025b4:   ja     0x00007f72652028bc
  0x00007f72652025ba:   retq   
 ;; B18: #	out( N1 ) <- in( B11 )  Freq: 6.58834e-05
  0x00007f72652025bb:   mov    $0xffffffe4,%esi
  0x00007f72652025c0:   mov    %r9d,(%rsp)
  0x00007f72652025c4:   mov    %r11d,0x4(%rsp)
  0x00007f72652025c9:   vmovdqu64 %zmm0,0x40(%rsp)
  0x00007f72652025d1:   mov    %rcx,0x10(%rsp)
  0x00007f72652025d6:   mov    %r8d,0x18(%rsp)
  0x00007f72652025db:   mov    %rbx,0x20(%rsp)
  0x00007f72652025e0:   mov    %rdx,0x28(%rsp)              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
  0x00007f72652025e5:   nop
  0x00007f72652025e6:   nop
  0x00007f72652025e7:   nop
  0x00007f72652025e8:   vzeroupper 
  0x00007f72652025eb:   callq  0x00007f7265120b20           ; ImmutableOopMap {[16]=Oop [32]=Oop [40]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2941)
                                                            ; - bug1::micro@27 (line 14)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f72652025f0:   nopl   0x10003e0(%rax,%rax,1)       ;   {other}
  0x00007f72652025f8:   movabs $0x7f726fb29870,%rdi         ;   {external_word}
  0x00007f7265202602:   and    $0xfffffffffffffff0,%rsp
  0x00007f7265202606:   callq  0x00007f726f2353f0100000
           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f726520260b:   hlt    
 ;; B19: #	out( N1 ) <- in( B5 )  Freq: 1.01327e-06
  0x00007f726520260c:   mov    $0xffffffe4,%esi
  0x00007f7265202611:   mov    %rdx,(%rsp)
  0x00007f7265202615:   mov    %rcx,0x8(%rsp)
  0x00007f726520261a:   mov    %r8d,0x10(%rsp)
  0x00007f726520261f:   mov    %rbx,0x18(%rsp)
  0x00007f7265202624:   mov    %r9,0x20(%rsp)               ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
  0x00007f7265202629:   nop
  0x00007f726520262a:   nop
  0x00007f726520262b:   nop
  0x00007f726520262c:   vzeroupper 
  0x00007f726520262f:   callq  0x00007f7265120b20           ; ImmutableOopMap {[0]=Oop [8]=Oop [24]=Oop [32]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2941)
                                                            ; - bug1::micro@5 (line 12)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f7265202634:   nopl   0x2000424(%rax,%rax,1)       ;   {other}
  0x00007f726520263c:   movabs $0x7f726fb29870,%rdi         ;   {external_word}
  0x00007f7265202646:   and    $0xfffffffffffffff0,%rsp
  0x00007f726520264a:   callq  0x00007f726f2353f0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f726520264f:   hlt    
 ;; B20: #	out( N1 ) <- in( B15 )  Freq: 1.0132e-06
  0x00007f7265202650:   mov    $0xffffffe4,%esi
  0x00007f7265202655:   vmovdqu64 %zmm0,(%rsp)
  0x00007f726520265c:   mov    %r8d,0x48(%rsp)
  0x00007f7265202661:   mov    %rcx,0x50(%rsp)              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
  0x00007f7265202666:   nop
  0x00007f7265202667:   nop
  0x00007f7265202668:   vzeroupper 
  0x00007f726520266b:   callq  0x00007f7265120b20           ; ImmutableOopMap {[80]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 3214)
                                                            ; - bug1::micro@61 (line 17)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f7265202670:   nopl   0x3000460(%rax,%rax,1)       ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
                                                            ;   {other}
  0x00007f7265202678:   movabs $0x7f726fb29870,%rdi         ;   {external_word}
  0x00007f7265202682:   and    $0xfffffffffffffff0,%rsp
  0x00007f7265202686:   callq  0x00007f726f2353f0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f726520268b:   hlt    
 ;; B21: #	out( N1 ) <- in( B16 )  Freq: 1.0132e-06
  0x00007f726520268c:   mov    $0xffffffe4,%esi
  0x00007f7265202691:   mov    %rcx,%rbp
  0x00007f7265202694:   mov    %r8d,(%rsp)
  0x00007f7265202698:   vzeroupper 
  0x00007f726520269b:   callq  0x00007f7265120b20           ; ImmutableOopMap {rbp=Oop }
                                                            ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - bug1::micro@66 (line 18)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f72652026a0:   nopl   0x4000490(%rax,%rax,1)       ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
                                                            ;   {other}
  0x00007f72652026a8:   movabs $0x7f726fb29870,%rdi         ;   {external_word}
  0x00007f72652026b2:   and    $0xfffffffffffffff0,%rsp
  0x00007f72652026b6:   callq  0x00007f726f2353f0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f72652026bb:   hlt    
 ;; B22: #	out( N1 ) <- in( B2 )  Freq: 9.99999e-07
  0x00007f72652026bc:   mov    $0xffffffde,%esi
  0x00007f72652026c1:   mov    %rdx,(%rsp)
  0x00007f72652026c5:   mov    %rcx,0x8(%rsp)
  0x00007f72652026ca:   mov    %r8d,0x10(%rsp)
  0x00007f72652026cf:   mov    %r10,0x18(%rsp)
  0x00007f72652026d4:   vzeroupper 
  0x00007f72652026d7:   callq  0x00007f7265120b20           ; ImmutableOopMap {rbp=NarrowOop [0]=Oop [8]=Oop [24]=Oop }
                                                            ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2941)
                                                            ; - bug1::micro@5 (line 12)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f72652026dc:   nopl   0x50004cc(%rax,%rax,1)       ;   {other}
  0x00007f72652026e4:   movabs $0x7f726fb29870,%rdi         ;   {external_word}
  0x00007f72652026ee:   and    $0xfffffffffffffff0,%rsp
  0x00007f72652026f2:   callq  0x00007f726f2353f0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f72652026f7:   hlt    
 ;; B23: #	out( N1 ) <- in( B4 )  Freq: 9.99997e-07
  0x00007f72652026f8:   mov    $0xffffffcc,%esi
  0x00007f72652026fd:   mov    %rdx,(%rsp)
  0x00007f7265202701:   mov    %rcx,0x8(%rsp)
  0x00007f7265202706:   mov    %r8d,0x10(%rsp)
  0x00007f726520270b:   mov    %rbx,0x18(%rsp)
  0x00007f7265202710:   mov    %r9,0x20(%rsp)               ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
  0x00007f7265202715:   nop
  0x00007f7265202716:   nop
  0x00007f7265202717:   nop
  0x00007f7265202718:   vzeroupper 
  0x00007f726520271b:   callq  0x00007f7265120b20           ; ImmutableOopMap {[0]=Oop [8]=Oop [24]=Oop [32]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2941)
                                                            ; - bug1::micro@5 (line 12)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f7265202720:   nopl   0x6000510(%rax,%rax,1)       ;   {other}
  0x00007f7265202728:   movabs $0x7f726fb29870,%rdi         ;   {external_word}
  0x00007f7265202732:   and    $0xfffffffffffffff0,%rsp
  0x00007f7265202736:   callq  0x00007f726f2353f0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f726520273b:   hlt    
 ;; B24: #	out( N1 ) <- in( B8 B9 )  Freq: 2.01327e-06
  0x00007f726520273c:   mov    $0xffffff76,%esi
  0x00007f7265202741:   vmovdqu64 %zmm0,(%rsp)
  0x00007f7265202748:   mov    %rdx,%rbp
  0x00007f726520274b:   mov    %rcx,0x40(%rsp)
  0x00007f7265202750:   mov    %r8d,0x48(%rsp)              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
  0x00007f7265202755:   nop
  0x00007f7265202756:   nop
  0x00007f7265202757:   nop
  0x00007f7265202758:   vzeroupper 
  0x00007f726520275b:   callq  0x00007f7265120b20           ; ImmutableOopMap {rbp=Oop [64]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) bug1::micro@18 (line 13)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f7265202760:   nopl   0x7000550(%rax,%rax,1)       ;   {other}
  0x00007f7265202768:   movabs $0x7f726fb29870,%rdi         ;   {external_word}
  0x00007f7265202772:   and    $0xfffffffffffffff0,%rsp
  0x00007f7265202776:   callq  0x00007f726f2353f0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f726520277b:   hlt    
 ;; B25: #	out( N1 ) <- in( B14 )  Freq: 9.99926e-07
  0x00007f726520277c:   mov    $0xffffffcc,%esi
  0x00007f7265202781:   vmovdqu64 %zmm0,(%rsp)
  0x00007f7265202788:   mov    %r8d,0x48(%rsp)
  0x00007f726520278d:   mov    %rcx,0x50(%rsp)              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
  0x00007f7265202792:   nop
  0x00007f7265202793:   nop
  0x00007f7265202794:   vzeroupper 
  0x00007f7265202797:   callq  0x00007f7265120b20           ; ImmutableOopMap {[80]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 3214)
                                                            ; - bug1::micro@61 (line 17)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f726520279c:   nopl   0x800058c(%rax,%rax,1)       ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
                                                            ;   {other}
  0x00007f72652027a4:   movabs $0x7f726fb29870,%rdi         ;   {external_word}
  0x00007f72652027ae:   and    $0xfffffffffffffff0,%rsp
  0x00007f72652027b2:   callq  0x00007f726f2353f0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f72652027b7:   hlt    
 ;; B26: #	out( N1 ) <- in( B7 )  Freq: 1e-35
  0x00007f72652027b8:   mov    $0xffffffde,%esi
  0x00007f72652027bd:   mov    %rdx,(%rsp)
  0x00007f72652027c1:   mov    %rcx,0x8(%rsp)
  0x00007f72652027c6:   mov    %r8d,0x10(%rsp)
  0x00007f72652027cb:   mov    %r9,0x18(%rsp)
  0x00007f72652027d0:   vzeroupper 
  0x00007f72652027d3:   callq  0x00007f7265120b20           ; ImmutableOopMap {rbp=NarrowOop [0]=Oop [8]=Oop [24]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVector@4 (line 3907)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2943)
                                                            ; - bug1::micro@5 (line 12)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f72652027d8:   nopl   0x90005c8(%rax,%rax,1)       ;   {other}
  0x00007f72652027e0:   movabs $0x7f726fb29870,%rdi         ;   {external_word}
  0x00007f72652027ea:   and    $0xfffffffffffffff0,%rsp
  0x00007f72652027ee:   callq  0x00007f726f2353f0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f72652027f3:   hlt    
 ;; B27: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
  0x00007f72652027f4:   mov    $0xfffffff6,%esi             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
  0x00007f72652027f9:   nop
  0x00007f72652027fa:   nop
  0x00007f72652027fb:   nop
  0x00007f72652027fc:   vzeroupper 
  0x00007f72652027ff:   callq  0x00007f7265120b20           ; ImmutableOopMap {}
                                                            ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2941)
                                                            ; - bug1::micro@5 (line 12)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f7265202804:   nopl   0xa0005f4(%rax,%rax,1)       ;   {other}
  0x00007f726520280c:   movabs $0x7f726fb29870,%rdi         ;   {external_word}
  0x00007f7265202816:   and    $0xfffffffffffffff0,%rsp
  0x00007f726520281a:   callq  0x00007f726f2353f0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f726520281f:   hlt    
 ;; B28: #	out( N1 ) <- in( B3 )  Freq: 1.01328e-06
  0x00007f7265202820:   mov    $0xfffffff6,%esi             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
  0x00007f7265202825:   nop
  0x00007f7265202826:   nop
  0x00007f7265202827:   nop
  0x00007f7265202828:   vzeroupper 
  0x00007f726520282b:   callq  0x00007f7265120b20           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@8 (line 2941)
                                                            ; - bug1::micro@5 (line 12)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f7265202830:   nopl   0xb000620(%rax,%rax,1)       ;   {other}
  0x00007f7265202838:   movabs $0x7f726fb29870,%rdi         ;   {external_word}
  0x00007f7265202842:   and    $0xfffffffffffffff0,%rsp
  0x00007f7265202846:   callq  0x00007f726f2353f0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f726520284b:   hlt    
 ;; B29: #	out( N1 ) <- in( B13 )  Freq: 1.0132e-06
  0x00007f726520284c:   mov    $0xfffffff6,%esi             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
  0x00007f7265202851:   nop
  0x00007f7265202852:   nop
  0x00007f7265202853:   nop
  0x00007f7265202854:   vzeroupper 
  0x00007f7265202857:   callq  0x00007f7265120b20           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@6 (line 3214)
                                                            ; - bug1::micro@61 (line 17)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f726520285c:   nopl   0xc00064c(%rax,%rax,1)       ;   {other}
  0x00007f7265202864:   movabs $0x7f726fb29870,%rdi         ;   {external_word}
  0x00007f726520286e:   and    $0xfffffffffffffff0,%rsp
  0x00007f7265202872:   callq  0x00007f726f2353f0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f7265202877:   hlt    
 ;; B30: #	out( N1 ) <- in( B6 )  Freq: 4.76835e-07
  0x00007f7265202878:   mov    $0xffffff45,%esi
  0x00007f726520287d:   mov    %rdx,(%rsp)
  0x00007f7265202881:   mov    %rcx,0x8(%rsp)
  0x00007f7265202886:   mov    %r8d,0x10(%rsp)
  0x00007f726520288b:   mov    %r9,0x18(%rsp)
  0x00007f7265202890:   mov    %rbx,0x20(%rsp)              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
  0x00007f7265202895:   nop
  0x00007f7265202896:   nop
  0x00007f7265202897:   nop
  0x00007f7265202898:   vzeroupper 
  0x00007f726520289b:   callq  0x00007f7265120b20           ; ImmutableOopMap {rbp=NarrowOop [0]=Oop [8]=Oop [24]=Oop [32]=Oop }
                                                            ;*ifnull {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractSpecies::dummyVector@6 (line 318)
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3907)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2943)
                                                            ; - bug1::micro@5 (line 12)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f72652028a0:   nopl   0xd000690(%rax,%rax,1)       ;   {other}
  0x00007f72652028a8:   movabs $0x7f726fb29870,%rdi         ;   {external_word}
  0x00007f72652028b2:   and    $0xfffffffffffffff0,%rsp
  0x00007f72652028b6:   callq  0x00007f726f2353f0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f72652028bb:   hlt                                 ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
                                                            ; - bug1::micro@61 (line 17)
  0x00007f72652028bc:   movabs $0x7f72652025ad,%r10         ;   {internal_word}
  0x00007f72652028c6:   mov    %r10,0x3d0(%r15)
  0x00007f72652028cd:   jmpq   0x00007f726511f9a0           ;   {runtime_call SafepointBlob}
  0x00007f72652028d2:   callq  Stub::nmethod_entry_barrier  ;   {runtime_call StubRoutines (final stubs)}
  0x00007f72652028d7:   jmpq   0x00007f726520249e
  0x00007f72652028dc:   hlt    
  0x00007f72652028dd:   hlt    
  0x00007f72652028de:   hlt    
  0x00007f72652028df:   hlt    
[Exception Handler]
  0x00007f72652028e0:   jmpq   0x00007f726513f120           ;   {no_reloc}
[Deopt Handler Code]
  0x00007f72652028e5:   callq  0x00007f72652028ea
  0x00007f72652028ea:   subq   $0x5,(%rsp)
  0x00007f72652028ef:   jmpq   0x00007f7265120e40           ;   {runtime_call DeoptimizationBlob}
  0x00007f72652028f4:   hlt    
  0x00007f72652028f5:   hlt    
  0x00007f72652028f6:   hlt    
  0x00007f72652028f7:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007f72652028f8:   0x000000011f92e578 a 'java/lang/Class'{0x000000011f92e578} = 'jdk/incubator/vector/Int512Vector'
  0x00007f7265202900:   0x000000011f81da68 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f81da68}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007f7265202908:   0x00007f72207024d0 {method} {0x00007f72207024d0} 'micro' '([I[I[II)I' in 'bug1'
  0x00007f7265202910:   0x00007f722067c630 {method} {0x00007f722067c630} 'intoArray' '([II)V' in 'jdk/incubator/vector/IntVector'
  0x00007f7265202918:   0x00000008000d8970 'jdk/incubator/vector/IntVector$IntSpecies'
  0x00007f7265202920:   0x00007f722067be00 {method} {0x00007f722067be00} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f7265202928:   0x00007f72206c9288 {method} {0x00007f72206c9288} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007f7265202930:   0x00007f72206c38b0 {method} {0x00007f72206c38b0} 'dummyVector' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
  0x00007f7265202938:   0x00007f72206cac48 {method} {0x00007f72206cac48} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007f7265202940:   0x00000008000dd908 'jdk/incubator/vector/Int512Vector'
  0x00007f7265202948:   0x00007f7220799c30 {method} {0x00007f7220799c30} 'fromArray0' '([II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int512Vector'
  0x00007f7265202950:   0x00007f722067cf08 {method} {0x00007f722067cf08} 'fromArray0Template' '([II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f7265202958:   0x00007f72207b81f0 {method} {0x00007f72207b81f0} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
  0x00007f7265202960:   0x00007f722019dd00 {method} {0x00007f722019dd00} 'checkIndex' '(II)I' in 'java/util/Objects'
  0x00007f7265202968:   0x00007f7220677358 {method} {0x00007f7220677358} 'and' '(Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f7265202970:   0x00007f722079bb30 {method} {0x00007f722079bb30} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int512Vector'
  0x00007f7265202978:   0x00007f72207977d0 {method} {0x00007f72207977d0} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/Int512Vector;' in 'jdk/incubator/vector/Int512Vector'
  0x00007f7265202980:   0x00007f7220674418 {method} {0x00007f7220674418} 'lanewiseTemplate' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f7265202988:   0x00000008000e5ca0 'jdk/incubator/vector/VectorOperators$AssociativeImpl'
  0x00007f7265202990:   0x00007f722077f488 {method} {0x00007f722077f488} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007f7265202998:   0x00000008000e5488 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007f72652029a0:   0x00007f722077efc0 {method} {0x00007f722077efc0} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007f72652029a8:   0x00007f722077f0b0 {method} {0x00007f722077f0b0} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007f72652029b0:   0x00007f72206bc6f0 {method} {0x00007f72206bc6f0} 'find' '(Ljdk/incubator/vector/VectorOperators$Operator;ILjava/util/function/IntFunction;)Ljava/lang/Object;' in 'jdk/incubator/vector/VectorOperators$ImplCache'
  0x00007f72652029b8:   0x00000008000d7310 'jdk/incubator/vector/VectorOperators$ImplCache'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007f726520247f offset=ffffffff bits=0):
PcDesc(pc=0x00007f726520249e offset=1e bits=0):
   bug1::micro@-1 (line 12)
PcDesc(pc=0x00007f72652024ab offset=2b bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f72652024af offset=2f bits=0):
   bug1::micro@0 (line 12)
PcDesc(pc=0x00007f72652024c7 offset=47 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f72652024d8 offset=58 bits=0):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2941)
   bug1::micro@5 (line 12)
PcDesc(pc=0x00007f72652024dc offset=5c bits=0):
   jdk.incubator.vector.AbstractSpecies::length@1 (line 121)
   jdk.incubator.vector.IntVector::fromArray@2 (line 2941)
   bug1::micro@5 (line 12)
PcDesc(pc=0x00007f72652024f5 offset=75 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f72652024f8 offset=78 bits=0):
   jdk.incubator.vector.AbstractSpecies::dummyVector@1 (line 317)
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3907)
   jdk.incubator.vector.IntVector::fromArray@19 (line 2943)
   bug1::micro@5 (line 12)
PcDesc(pc=0x00007f7265202512 offset=92 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f726520251c offset=9c bits=0):
   jdk.incubator.vector.IntVector::fromArray0Template@32 (line 3430)
   jdk.incubator.vector.Int512Vector::fromArray0@3 (line 896)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2943)
   bug1::micro@5 (line 12)
PcDesc(pc=0x00007f7265202527 offset=a7 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f7265202550 offset=d0 bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   jdk.incubator.vector.IntVector::fromArray@9 (line 2941)
   bug1::micro@27 (line 14)
PcDesc(pc=0x00007f726520255b offset=db bits=0):
   jdk.incubator.vector.IntVector::lanewiseTemplate@154 (line 784)
   jdk.incubator.vector.Int512Vector::lanewise@3 (line 270)
   jdk.incubator.vector.Int512Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::and@5 (line 1755)
   bug1::micro@36 (line 15)
PcDesc(pc=0x00007f726520255e offset=de bits=1):
   bug1::micro@54 (line 13)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: reg r8 [16],int
    - l4: obj[142]
    - l5: reg r9 [18],int
    - l6: empty
   Objects
    - 142: jdk.incubator.vector.Int512Vector reg xmm0 [48],vector
PcDesc(pc=0x00007f726520259d offset=11d bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f72652025a2 offset=122 bits=0):
   bug1::micro@66 (line 18)
PcDesc(pc=0x00007f72652025e5 offset=165 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f72652025f0 offset=170 bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[0]
    - @1: stack[4]
    - @2: nullptr
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@9 (line 2941)
   Locals
    - l0: stack[32],oop
    - l1: stack[40],oop
    - l2: empty
    - l3: empty
   bug1::micro@27 (line 14)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[16],oop
    - l3: stack[24]
    - l4: obj[190]
    - l5: stack[0]
    - l6: empty
   Objects
    - 190: jdk.incubator.vector.Int512Vector stack[64],vector
PcDesc(pc=0x00007f7265202629 offset=1a9 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f7265202634 offset=1b4 bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: nullptr
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@9 (line 2941)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
   bug1::micro@5 (line 12)
   Locals
    - l0: empty
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: empty
    - l5: empty
    - l6: empty
PcDesc(pc=0x00007f7265202666 offset=1e6 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f7265202670 offset=1f0 bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: nullptr
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::intoArray@7 (line 3214)
   Locals
    - l0: obj[150]
    - l1: stack[80],oop
    - l2: empty
    - l3: empty
   bug1::micro@61 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: stack[80],oop
    - l3: stack[72]
    - l4: empty
    - l5: empty
    - l6: empty
   Objects
    - 150: jdk.incubator.vector.Int512Vector stack[0],vector
PcDesc(pc=0x00007f7265202678 offset=1f8 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f72652026a0 offset=220 bits=0):
   bug1::micro@66 (line 18)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: reg rbp [10],oop
    - @1: stack[0]
PcDesc(pc=0x00007f72652026a8 offset=228 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f72652026dc offset=25c bits=0):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2941)
   Locals
    - l0: reg rbp [10],narrowoop
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],narrowoop
   bug1::micro@5 (line 12)
   Locals
    - l0: empty
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: empty
    - l5: empty
    - l6: empty
PcDesc(pc=0x00007f7265202715 offset=295 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f7265202720 offset=2a0 bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: nullptr
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@9 (line 2941)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
   bug1::micro@5 (line 12)
   Locals
    - l0: empty
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: empty
    - l5: empty
    - l6: empty
PcDesc(pc=0x00007f7265202755 offset=2d5 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f7265202760 offset=2e0 bits=1):
   bug1::micro@18 (line 13)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[64],oop
    - l3: stack[72]
    - l4: obj[173]
    - l5: 0
    - l6: empty
   Expression stack
    - @0: 0
    - @1: 1024
   Objects
    - 173: jdk.incubator.vector.Int512Vector stack[0],vector
PcDesc(pc=0x00007f7265202792 offset=312 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f726520279c offset=31c bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: nullptr
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::intoArray@7 (line 3214)
   Locals
    - l0: obj[182]
    - l1: stack[80],oop
    - l2: empty
    - l3: empty
   bug1::micro@61 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: stack[80],oop
    - l3: stack[72]
    - l4: empty
    - l5: empty
    - l6: empty
   Objects
    - 182: jdk.incubator.vector.Int512Vector stack[0],vector
PcDesc(pc=0x00007f72652027a4 offset=324 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f72652027d8 offset=358 bits=0):
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@4 (line 3907)
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
   jdk.incubator.vector.IntVector::fromArray@19 (line 2943)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: 0
    - l3: empty
   bug1::micro@5 (line 12)
   Locals
    - l0: empty
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: empty
    - l5: empty
    - l6: empty
PcDesc(pc=0x00007f72652027f9 offset=379 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f7265202804 offset=384 bits=0):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2941)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: nullptr
   bug1::micro@5 (line 12)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
PcDesc(pc=0x00007f7265202825 offset=3a5 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f7265202830 offset=3b0 bits=0):
   jdk.incubator.vector.IntVector::fromArray@8 (line 2941)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: nullptr
   bug1::micro@5 (line 12)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
PcDesc(pc=0x00007f7265202851 offset=3d1 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f726520285c offset=3dc bits=0):
   jdk.incubator.vector.IntVector::intoArray@6 (line 3214)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: nullptr
   bug1::micro@61 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
PcDesc(pc=0x00007f7265202895 offset=415 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f72652028a0 offset=420 bits=1):
   jdk.incubator.vector.AbstractSpecies::dummyVector@6 (line 318)  reexecute=true
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],narrowoop
   Expression stack
    - @0: reg rbp [10],narrowoop
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3907)
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::fromArray@19 (line 2943)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: 0
    - l3: empty
   bug1::micro@5 (line 12)
   Locals
    - l0: empty
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: empty
    - l5: empty
    - l6: empty
PcDesc(pc=0x00007f72652028bc offset=43c bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
   bug1::micro@61 (line 17)
PcDesc(pc=0x00007f72652028f9 offset=479 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 14 OopMaps

ImmutableOopMap {rcx=Oop rbx=Oop rdx=Oop } pc offsets: 222 
ImmutableOopMap {[16]=Oop [32]=Oop [40]=Oop } pc offsets: 368 
ImmutableOopMap {[0]=Oop [8]=Oop [24]=Oop [32]=Oop } pc offsets: 436 
ImmutableOopMap {[80]=Oop } pc offsets: 496 
ImmutableOopMap {rbp=Oop } pc offsets: 544 
ImmutableOopMap {rbp=NarrowOop [0]=Oop [8]=Oop [24]=Oop } pc offsets: 604 
ImmutableOopMap {[0]=Oop [8]=Oop [24]=Oop [32]=Oop } pc offsets: 672 
ImmutableOopMap {rbp=Oop [64]=Oop } pc offsets: 736 
ImmutableOopMap {[80]=Oop } pc offsets: 796 
ImmutableOopMap {rbp=NarrowOop [0]=Oop [8]=Oop [24]=Oop } pc offsets: 856 
ImmutableOopMap {} pc offsets: 900 944 988 
ImmutableOopMap {rbp=NarrowOop [0]=Oop [8]=Oop [24]=Oop [32]=Oop } pc offsets: 1056 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007f726520249e offset=1e):
   bug1::micro@-1 (line 12)
ScopeDesc(pc=0x00007f72652024ab offset=2b):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f72652024ab offset=2b):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f72652024af offset=2f):
   bug1::micro@0 (line 12)
ScopeDesc(pc=0x00007f72652024c7 offset=47):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f72652024c7 offset=47):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f72652024d8 offset=58):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2941)
ScopeDesc(pc=0x00007f72652024d8 offset=58):
   bug1::micro@5 (line 12)
ScopeDesc(pc=0x00007f72652024dc offset=5c):
   jdk.incubator.vector.AbstractSpecies::length@1 (line 121)
ScopeDesc(pc=0x00007f72652024dc offset=5c):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2941)
ScopeDesc(pc=0x00007f72652024dc offset=5c):
   bug1::micro@5 (line 12)
ScopeDesc(pc=0x00007f72652024f5 offset=75):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f72652024f5 offset=75):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f72652024f8 offset=78):
   jdk.incubator.vector.AbstractSpecies::dummyVector@1 (line 317)
ScopeDesc(pc=0x00007f72652024f8 offset=78):
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3907)
ScopeDesc(pc=0x00007f72652024f8 offset=78):
   jdk.incubator.vector.IntVector::fromArray@19 (line 2943)
ScopeDesc(pc=0x00007f72652024f8 offset=78):
   bug1::micro@5 (line 12)
ScopeDesc(pc=0x00007f7265202512 offset=92):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f7265202512 offset=92):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f726520251c offset=9c):
   jdk.incubator.vector.IntVector::fromArray0Template@32 (line 3430)
ScopeDesc(pc=0x00007f726520251c offset=9c):
   jdk.incubator.vector.Int512Vector::fromArray0@3 (line 896)
ScopeDesc(pc=0x00007f726520251c offset=9c):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2943)
ScopeDesc(pc=0x00007f726520251c offset=9c):
   bug1::micro@5 (line 12)
ScopeDesc(pc=0x00007f7265202527 offset=a7):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f7265202527 offset=a7):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f7265202550 offset=d0):
   java.util.Objects::checkIndex@3 (line 385)
ScopeDesc(pc=0x00007f7265202550 offset=d0):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
ScopeDesc(pc=0x00007f7265202550 offset=d0):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2941)
ScopeDesc(pc=0x00007f7265202550 offset=d0):
   bug1::micro@27 (line 14)
ScopeDesc(pc=0x00007f726520255b offset=db):
   jdk.incubator.vector.IntVector::lanewiseTemplate@154 (line 784)
ScopeDesc(pc=0x00007f726520255b offset=db):
   jdk.incubator.vector.Int512Vector::lanewise@3 (line 270)
ScopeDesc(pc=0x00007f726520255b offset=db):
   jdk.incubator.vector.Int512Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f726520255b offset=db):
   jdk.incubator.vector.IntVector::and@5 (line 1755)
ScopeDesc(pc=0x00007f726520255b offset=db):
   bug1::micro@36 (line 15)
ScopeDesc(pc=0x00007f726520255e offset=de):
   bug1::micro@54 (line 13)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: reg r8 [16],int
    - l4: obj[142]
    - l5: reg r9 [18],int
    - l6: empty
   Objects
    - 142: jdk.incubator.vector.Int512Vector reg xmm0 [48],vector
ScopeDesc(pc=0x00007f726520259d offset=11d):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f726520259d offset=11d):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f72652025a2 offset=122):
   bug1::micro@66 (line 18)
ScopeDesc(pc=0x00007f72652025e5 offset=165):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f72652025e5 offset=165):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f72652025f0 offset=170):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[0]
    - @1: stack[4]
    - @2: nullptr
ScopeDesc(pc=0x00007f72652025f0 offset=170):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f72652025f0 offset=170):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2941)
   Locals
    - l0: stack[32],oop
    - l1: stack[40],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007f72652025f0 offset=170):
   bug1::micro@27 (line 14)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[16],oop
    - l3: stack[24]
    - l4: obj[190]
    - l5: stack[0]
    - l6: empty
   Objects
    - 190: jdk.incubator.vector.Int512Vector stack[64],vector
ScopeDesc(pc=0x00007f7265202629 offset=1a9):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f7265202629 offset=1a9):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f7265202634 offset=1b4):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: nullptr
ScopeDesc(pc=0x00007f7265202634 offset=1b4):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f7265202634 offset=1b4):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2941)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007f7265202634 offset=1b4):
   bug1::micro@5 (line 12)
   Locals
    - l0: empty
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: empty
    - l5: empty
    - l6: empty
ScopeDesc(pc=0x00007f7265202666 offset=1e6):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f7265202666 offset=1e6):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f7265202670 offset=1f0):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: nullptr
ScopeDesc(pc=0x00007f7265202670 offset=1f0):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f7265202670 offset=1f0):
   jdk.incubator.vector.IntVector::intoArray@7 (line 3214)
   Locals
    - l0: obj[150]
    - l1: stack[80],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007f7265202670 offset=1f0):
   bug1::micro@61 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: stack[80],oop
    - l3: stack[72]
    - l4: empty
    - l5: empty
    - l6: empty
   Objects
    - 150: jdk.incubator.vector.Int512Vector stack[0],vector
ScopeDesc(pc=0x00007f7265202678 offset=1f8):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f7265202678 offset=1f8):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f72652026a0 offset=220):
   bug1::micro@66 (line 18)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: reg rbp [10],oop
    - @1: stack[0]
ScopeDesc(pc=0x00007f72652026a8 offset=228):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f72652026a8 offset=228):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f72652026dc offset=25c):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2941)
   Locals
    - l0: reg rbp [10],narrowoop
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],narrowoop
ScopeDesc(pc=0x00007f72652026dc offset=25c):
   bug1::micro@5 (line 12)
   Locals
    - l0: empty
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: empty
    - l5: empty
    - l6: empty
ScopeDesc(pc=0x00007f7265202715 offset=295):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f7265202715 offset=295):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f7265202720 offset=2a0):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: nullptr
ScopeDesc(pc=0x00007f7265202720 offset=2a0):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f7265202720 offset=2a0):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2941)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007f7265202720 offset=2a0):
   bug1::micro@5 (line 12)
   Locals
    - l0: empty
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: empty
    - l5: empty
    - l6: empty
ScopeDesc(pc=0x00007f7265202755 offset=2d5):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f7265202755 offset=2d5):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f7265202760 offset=2e0):
   bug1::micro@18 (line 13)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[64],oop
    - l3: stack[72]
    - l4: obj[173]
    - l5: 0
    - l6: empty
   Expression stack
    - @0: 0
    - @1: 1024
   Objects
    - 173: jdk.incubator.vector.Int512Vector stack[0],vector
ScopeDesc(pc=0x00007f7265202792 offset=312):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f7265202792 offset=312):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f726520279c offset=31c):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: nullptr
ScopeDesc(pc=0x00007f726520279c offset=31c):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f726520279c offset=31c):
   jdk.incubator.vector.IntVector::intoArray@7 (line 3214)
   Locals
    - l0: obj[182]
    - l1: stack[80],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007f726520279c offset=31c):
   bug1::micro@61 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: stack[80],oop
    - l3: stack[72]
    - l4: empty
    - l5: empty
    - l6: empty
   Objects
    - 182: jdk.incubator.vector.Int512Vector stack[0],vector
ScopeDesc(pc=0x00007f72652027a4 offset=324):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f72652027a4 offset=324):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f72652027d8 offset=358):
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@4 (line 3907)
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
ScopeDesc(pc=0x00007f72652027d8 offset=358):
   jdk.incubator.vector.IntVector::fromArray@19 (line 2943)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: 0
    - l3: empty
ScopeDesc(pc=0x00007f72652027d8 offset=358):
   bug1::micro@5 (line 12)
   Locals
    - l0: empty
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: empty
    - l5: empty
    - l6: empty
ScopeDesc(pc=0x00007f72652027f9 offset=379):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f72652027f9 offset=379):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f7265202804 offset=384):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2941)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: nullptr
ScopeDesc(pc=0x00007f7265202804 offset=384):
   bug1::micro@5 (line 12)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
ScopeDesc(pc=0x00007f7265202825 offset=3a5):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f7265202825 offset=3a5):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f7265202830 offset=3b0):
   jdk.incubator.vector.IntVector::fromArray@8 (line 2941)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: nullptr
ScopeDesc(pc=0x00007f7265202830 offset=3b0):
   bug1::micro@5 (line 12)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
ScopeDesc(pc=0x00007f7265202851 offset=3d1):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f7265202851 offset=3d1):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f726520285c offset=3dc):
   jdk.incubator.vector.IntVector::intoArray@6 (line 3214)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: nullptr
ScopeDesc(pc=0x00007f726520285c offset=3dc):
   bug1::micro@61 (line 17)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
ScopeDesc(pc=0x00007f7265202895 offset=415):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f7265202895 offset=415):
   bug1::micro@61 (line 17)
ScopeDesc(pc=0x00007f72652028a0 offset=420):
   jdk.incubator.vector.AbstractSpecies::dummyVector@6 (line 318)  reexecute=true
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],narrowoop
   Expression stack
    - @0: reg rbp [10],narrowoop
ScopeDesc(pc=0x00007f72652028a0 offset=420):
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3907)
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f72652028a0 offset=420):
   jdk.incubator.vector.IntVector::fromArray@19 (line 2943)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: 0
    - l3: empty
ScopeDesc(pc=0x00007f72652028a0 offset=420):
   bug1::micro@5 (line 12)
   Locals
    - l0: empty
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16]
    - l4: empty
    - l5: empty
    - l6: empty
ScopeDesc(pc=0x00007f72652028bc offset=43c):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3216)
ScopeDesc(pc=0x00007f72652028bc offset=43c):
   bug1::micro@61 (line 17)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007f7265202380: 0821
relocInfo@0x00007f7265202380 [type=1(oop) addr=0x00007f72652024a1 offset=33] | [oop_addr=0x00007f72652024a3 *=0x000000011f91f948 offset=0]
         @0x00007f7265202382: 7803661f
relocInfo@0x00007f7265202384 [type=12(metadata) addr=0x00007f72652024c0 offset=31 format=3 data=3] | [metadata_addr=0x00007f7265202918 *=0x00000008000d8970 offset=0]metadata_value=0x00000008000d8970: 'jdk/incubator/vector/IntVector$IntSpecies'
         @0x00007f7265202386: 78086645
relocInfo@0x00007f7265202388 [type=12(metadata) addr=0x00007f7265202505 offset=69 format=3 data=8] | [metadata_addr=0x00007f7265202940 *=0x00000008000dd908 offset=0]metadata_value=0x00000008000dd908: 'jdk/incubator/vector/Int512Vector'
         @0x00007f726520238a: 5059
relocInfo@0x00007f726520238a [type=10(poll) addr=0x00007f726520255e offset=89]
         @0x00007f726520238c: 584f
relocInfo@0x00007f726520238c [type=11(poll_return) addr=0x00007f72652025ad offset=79]
         @0x00007f726520238e: 323e
relocInfo@0x00007f726520238e [type=6(runtime_call) addr=0x00007f72652025eb offset=62 format=1] | [destination=0x00007f7265120b20]
         @0x00007f7265202390: 8005
relocInfo@0x00007f7265202390 [type=16(post_call_nop) addr=0x00007f72652025f0 offset=5]
         @0x00007f7265202392: 7c036fb298707f723808
relocInfo@0x00007f726520239a [type=7(external_word) addr=0x00007f72652025f8 offset=8 data={6fb298707f72}] | [target=0x00007f726fb29870]
         @0x00007f726520239c: 320e
relocInfo@0x00007f726520239c [type=6(runtime_call) addr=0x00007f7265202606 offset=14 format=1] | [destination=0x00007f726f2353f0]
         @0x00007f726520239e: 3229
relocInfo@0x00007f726520239e [type=6(runtime_call) addr=0x00007f726520262f offset=41 format=1] | [destination=0x00007f7265120b20]
         @0x00007f72652023a0: 8005
relocInfo@0x00007f72652023a0 [type=16(post_call_nop) addr=0x00007f7265202634 offset=5]
         @0x00007f72652023a2: 7c036fb298707f723808
relocInfo@0x00007f72652023aa [type=7(external_word) addr=0x00007f726520263c offset=8 data={6fb298707f72}] | [target=0x00007f726fb29870]
         @0x00007f72652023ac: 320e
relocInfo@0x00007f72652023ac [type=6(runtime_call) addr=0x00007f726520264a offset=14 format=1] | [destination=0x00007f726f2353f0]
         @0x00007f72652023ae: 3221
relocInfo@0x00007f72652023ae [type=6(runtime_call) addr=0x00007f726520266b offset=33 format=1] | [destination=0x00007f7265120b20]
         @0x00007f72652023b0: 8005
relocInfo@0x00007f72652023b0 [type=16(post_call_nop) addr=0x00007f7265202670 offset=5]
         @0x00007f72652023b2: 7c036fb298707f723808
relocInfo@0x00007f72652023ba [type=7(external_word) addr=0x00007f7265202678 offset=8 data={6fb298707f72}] | [target=0x00007f726fb29870]
         @0x00007f72652023bc: 320e
relocInfo@0x00007f72652023bc [type=6(runtime_call) addr=0x00007f7265202686 offset=14 format=1] | [destination=0x00007f726f2353f0]
         @0x00007f72652023be: 3215
relocInfo@0x00007f72652023be [type=6(runtime_call) addr=0x00007f726520269b offset=21 format=1] | [destination=0x00007f7265120b20]
         @0x00007f72652023c0: 8005
relocInfo@0x00007f72652023c0 [type=16(post_call_nop) addr=0x00007f72652026a0 offset=5]
         @0x00007f72652023c2: 7c036fb298707f723808
relocInfo@0x00007f72652023ca [type=7(external_word) addr=0x00007f72652026a8 offset=8 data={6fb298707f72}] | [target=0x00007f726fb29870]
         @0x00007f72652023cc: 320e
relocInfo@0x00007f72652023cc [type=6(runtime_call) addr=0x00007f72652026b6 offset=14 format=1] | [destination=0x00007f726f2353f0]
         @0x00007f72652023ce: 3221
relocInfo@0x00007f72652023ce [type=6(runtime_call) addr=0x00007f72652026d7 offset=33 format=1] | [destination=0x00007f7265120b20]
         @0x00007f72652023d0: 8005
relocInfo@0x00007f72652023d0 [type=16(post_call_nop) addr=0x00007f72652026dc offset=5]
         @0x00007f72652023d2: 7c036fb298707f723808
relocInfo@0x00007f72652023da [type=7(external_word) addr=0x00007f72652026e4 offset=8 data={6fb298707f72}] | [target=0x00007f726fb29870]
         @0x00007f72652023dc: 320e
relocInfo@0x00007f72652023dc [type=6(runtime_call) addr=0x00007f72652026f2 offset=14 format=1] | [destination=0x00007f726f2353f0]
         @0x00007f72652023de: 3229
relocInfo@0x00007f72652023de [type=6(runtime_call) addr=0x00007f726520271b offset=41 format=1] | [destination=0x00007f7265120b20]
         @0x00007f72652023e0: 8005
relocInfo@0x00007f72652023e0 [type=16(post_call_nop) addr=0x00007f7265202720 offset=5]
         @0x00007f72652023e2: 7c036fb298707f723808
relocInfo@0x00007f72652023ea [type=7(external_word) addr=0x00007f7265202728 offset=8 data={6fb298707f72}] | [target=0x00007f726fb29870]
         @0x00007f72652023ec: 320e
relocInfo@0x00007f72652023ec [type=6(runtime_call) addr=0x00007f7265202736 offset=14 format=1] | [destination=0x00007f726f2353f0]
         @0x00007f72652023ee: 3225
relocInfo@0x00007f72652023ee [type=6(runtime_call) addr=0x00007f726520275b offset=37 format=1] | [destination=0x00007f7265120b20]
         @0x00007f72652023f0: 8005
relocInfo@0x00007f72652023f0 [type=16(post_call_nop) addr=0x00007f7265202760 offset=5]
         @0x00007f72652023f2: 7c036fb298707f723808
relocInfo@0x00007f72652023fa [type=7(external_word) addr=0x00007f7265202768 offset=8 data={6fb298707f72}] | [target=0x00007f726fb29870]
         @0x00007f72652023fc: 320e
relocInfo@0x00007f72652023fc [type=6(runtime_call) addr=0x00007f7265202776 offset=14 format=1] | [destination=0x00007f726f2353f0]
         @0x00007f72652023fe: 3221
relocInfo@0x00007f72652023fe [type=6(runtime_call) addr=0x00007f7265202797 offset=33 format=1] | [destination=0x00007f7265120b20]
         @0x00007f7265202400: 8005
relocInfo@0x00007f7265202400 [type=16(post_call_nop) addr=0x00007f726520279c offset=5]
         @0x00007f7265202402: 7c036fb298707f723808
relocInfo@0x00007f726520240a [type=7(external_word) addr=0x00007f72652027a4 offset=8 data={6fb298707f72}] | [target=0x00007f726fb29870]
         @0x00007f726520240c: 320e
relocInfo@0x00007f726520240c [type=6(runtime_call) addr=0x00007f72652027b2 offset=14 format=1] | [destination=0x00007f726f2353f0]
         @0x00007f726520240e: 3221
relocInfo@0x00007f726520240e [type=6(runtime_call) addr=0x00007f72652027d3 offset=33 format=1] | [destination=0x00007f7265120b20]
         @0x00007f7265202410: 8005
relocInfo@0x00007f7265202410 [type=16(post_call_nop) addr=0x00007f72652027d8 offset=5]
         @0x00007f7265202412: 7c036fb298707f723808
relocInfo@0x00007f726520241a [type=7(external_word) addr=0x00007f72652027e0 offset=8 data={6fb298707f72}] | [target=0x00007f726fb29870]
         @0x00007f726520241c: 320e
relocInfo@0x00007f726520241c [type=6(runtime_call) addr=0x00007f72652027ee offset=14 format=1] | [destination=0x00007f726f2353f0]
         @0x00007f726520241e: 3211
relocInfo@0x00007f726520241e [type=6(runtime_call) addr=0x00007f72652027ff offset=17 format=1] | [destination=0x00007f7265120b20]
         @0x00007f7265202420: 8005
relocInfo@0x00007f7265202420 [type=16(post_call_nop) addr=0x00007f7265202804 offset=5]
         @0x00007f7265202422: 7c036fb298707f723808
relocInfo@0x00007f726520242a [type=7(external_word) addr=0x00007f726520280c offset=8 data={6fb298707f72}] | [target=0x00007f726fb29870]
         @0x00007f726520242c: 320e
relocInfo@0x00007f726520242c [type=6(runtime_call) addr=0x00007f726520281a offset=14 format=1] | [destination=0x00007f726f2353f0]
         @0x00007f726520242e: 3211
relocInfo@0x00007f726520242e [type=6(runtime_call) addr=0x00007f726520282b offset=17 format=1] | [destination=0x00007f7265120b20]
         @0x00007f7265202430: 8005
relocInfo@0x00007f7265202430 [type=16(post_call_nop) addr=0x00007f7265202830 offset=5]
         @0x00007f7265202432: 7c036fb298707f723808
relocInfo@0x00007f726520243a [type=7(external_word) addr=0x00007f7265202838 offset=8 data={6fb298707f72}] | [target=0x00007f726fb29870]
         @0x00007f726520243c: 320e
relocInfo@0x00007f726520243c [type=6(runtime_call) addr=0x00007f7265202846 offset=14 format=1] | [destination=0x00007f726f2353f0]
         @0x00007f726520243e: 3211
relocInfo@0x00007f726520243e [type=6(runtime_call) addr=0x00007f7265202857 offset=17 format=1] | [destination=0x00007f7265120b20]
         @0x00007f7265202440: 8005
relocInfo@0x00007f7265202440 [type=16(post_call_nop) addr=0x00007f726520285c offset=5]
         @0x00007f7265202442: 7c036fb298707f723808
relocInfo@0x00007f726520244a [type=7(external_word) addr=0x00007f7265202864 offset=8 data={6fb298707f72}] | [target=0x00007f726fb29870]
         @0x00007f726520244c: 320e
relocInfo@0x00007f726520244c [type=6(runtime_call) addr=0x00007f7265202872 offset=14 format=1] | [destination=0x00007f726f2353f0]
         @0x00007f726520244e: 3229
relocInfo@0x00007f726520244e [type=6(runtime_call) addr=0x00007f726520289b offset=41 format=1] | [destination=0x00007f7265120b20]
         @0x00007f7265202450: 8005
relocInfo@0x00007f7265202450 [type=16(post_call_nop) addr=0x00007f72652028a0 offset=5]
         @0x00007f7265202452: 7c036fb298707f723808
relocInfo@0x00007f726520245a [type=7(external_word) addr=0x00007f72652028a8 offset=8 data={6fb298707f72}] | [target=0x00007f726fb29870]
         @0x00007f726520245c: 320e
relocInfo@0x00007f726520245c [type=6(runtime_call) addr=0x00007f72652028b6 offset=14 format=1] | [destination=0x00007f726f2353f0]
         @0x00007f726520245e: 7b0f4006
relocInfo@0x00007f7265202460 [type=8(internal_word) addr=0x00007f72652028bc offset=6 data=783] | [target=0x00007f72652025ad]
         @0x00007f7265202462: 3211
relocInfo@0x00007f7265202462 [type=6(runtime_call) addr=0x00007f72652028cd offset=17 format=1] | [destination=0x00007f726511f9a0]
         @0x00007f7265202464: 3205
relocInfo@0x00007f7265202464 [type=6(runtime_call) addr=0x00007f72652028d2 offset=5 format=1] | [destination=0x00007f726506ad00]
         @0x00007f7265202466: 000e
relocInfo@0x00007f7265202466 [type=0(none) addr=0x00007f72652028e0 offset=14]
         @0x00007f7265202468: 3200
relocInfo@0x00007f7265202468 [type=6(runtime_call) addr=0x00007f72652028e0 offset=0 format=1] | [destination=0x00007f726513f120]
         @0x00007f726520246a: 320f
relocInfo@0x00007f726520246a [type=6(runtime_call) addr=0x00007f72652028ef offset=15 format=1] | [destination=0x00007f7265120e40]
         @0x00007f726520246c: 0000
relocInfo@0x00007f726520246c [type=0(none) addr=0x00007f72652028ef offset=0]
         @0x00007f726520246e: 0000
relocInfo@0x00007f726520246e [type=0(none) addr=0x00007f72652028ef offset=0]
         @0x00007f7265202470: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.VectorOperators$AssociativeImpl
  method  = {method} {0x00007f722077f488} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  class   = jdk.incubator.vector.VectorOperators$OperatorImpl
  method  = {method} {0x00007f722077f488} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$AssociativeImpl
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.VectorOperators$AssociativeImpl
  method  = {method} {0x00007f722077efc0} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  class   = jdk.incubator.vector.VectorOperators$OperatorImpl
  method  = {method} {0x00007f722077efc0} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$AssociativeImpl
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.VectorOperators$AssociativeImpl
  method  = {method} {0x00007f722077f0b0} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  class   = jdk.incubator.vector.VectorOperators$OperatorImpl
  method  = {method} {0x00007f722077f0b0} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$AssociativeImpl
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.VectorOperators$ImplCache
  method  = {method} {0x00007f72206bc6f0} 'find' '(Ljdk/incubator/vector/VectorOperators$Operator;ILjava/util/function/IntFunction;)Ljava/lang/Object;' in 'jdk/incubator/vector/VectorOperators$ImplCache'
  class   = jdk.incubator.vector.VectorOperators$ImplCache
  method  = {method} {0x00007f72206bc6f0} 'find' '(Ljdk/incubator/vector/VectorOperators$Operator;ILjava/util/function/IntFunction;)Ljava/lang/Object;' in 'jdk/incubator/vector/VectorOperators$ImplCache'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$ImplCache
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 5 entries, 44 bytes):
{
   < 0x00007f72652024af, 0x00007f72652027f4 > < 0x00007f72652024d0, 0x00007f7265202820 > < 0x00007f7265202500, 0x00007f7265202878 > 
   < 0x00007f7265202520, 0x00007f726520273c > < 0x00007f7265202569, 0x00007f726520284c > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 nullptr-oop
#1: 0x000000011f92e578 a 'java/lang/Class'{0x000000011f92e578} = 'jdk/incubator/vector/Int512Vector'
#2: 0x000000011f81da68 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f81da68}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
# 0: 0x0000000000000000 nullptr-oop
# 1: 0x00007f72207024d0 {method} {0x00007f72207024d0} 'micro' '([I[I[II)I' in 'bug1'
# 2: 0x00007f722067c630 {method} {0x00007f722067c630} 'intoArray' '([II)V' in 'jdk/incubator/vector/IntVector'
# 3: 0x00000008000d8970 'jdk/incubator/vector/IntVector$IntSpecies'
# 4: 0x00007f722067be00 {method} {0x00007f722067be00} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
# 5: 0x00007f72206c9288 {method} {0x00007f72206c9288} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
# 6: 0x00007f72206c38b0 {method} {0x00007f72206c38b0} 'dummyVector' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
# 7: 0x00007f72206cac48 {method} {0x00007f72206cac48} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies'
# 8: 0x00000008000dd908 'jdk/incubator/vector/Int512Vector'
# 9: 0x00007f7220799c30 {method} {0x00007f7220799c30} 'fromArray0' '([II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int512Vector'
#10: 0x00007f722067cf08 {method} {0x00007f722067cf08} 'fromArray0Template' '([II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#11: 0x00007f72207b81f0 {method} {0x00007f72207b81f0} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
#12: 0x00007f722019dd00 {method} {0x00007f722019dd00} 'checkIndex' '(II)I' in 'java/util/Objects'
#13: 0x00007f7220677358 {method} {0x00007f7220677358} 'and' '(Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#14: 0x00007f722079bb30 {method} {0x00007f722079bb30} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int512Vector'
#15: 0x00007f72207977d0 {method} {0x00007f72207977d0} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/Int512Vector;' in 'jdk/incubator/vector/Int512Vector'
#16: 0x00007f7220674418 {method} {0x00007f7220674418} 'lanewiseTemplate' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#17: 0x00000008000e5ca0 'jdk/incubator/vector/VectorOperators$AssociativeImpl'
#18: 0x00007f722077f488 {method} {0x00007f722077f488} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#19: 0x00000008000e5488 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#20: 0x00007f722077efc0 {method} {0x00007f722077efc0} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#21: 0x00007f722077f0b0 {method} {0x00007f722077f0b0} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#22: 0x00007f72206bc6f0 {method} {0x00007f72206bc6f0} 'find' '(Ljdk/incubator/vector/VectorOperators$Operator;ILjava/util/function/IntFunction;)Ljava/lang/Object;' in 'jdk/incubator/vector/VectorOperators$ImplCache'
#23: 0x00000008000d7310 'jdk/incubator/vector/VectorOperators$ImplCache'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
------------------------------------------------------------------------
static bug1::micro([I[I[II)I
  interpreter_invocation_count:        1822
  invocation_counter:                  1822
  backedge_counter:                  116608
  decompile_count:                        0
  mdo size: 696 bytes

   0 getstatic 7 <bug1.I_SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
   3 fast_aload_0
   4 iconst_0
   5 invokestatic 13 <jdk/incubator/vector/IntVector.fromArray(Ljdk/incubator/vector/VectorSpecies;[II)Ljdk/incubator/vector/IntVector;> 
  0    bci: 5    CounterData        count(1695)
   8 astore #4
  10 iconst_0
  11 istore #5
  13 fast_iload #5
  15 sipush 1024
  18 if_icmpge 57
  16   bci: 18   BranchData         taken(1695) displacement(184)
                                    not taken(108480)
  21 getstatic 7 <bug1.I_SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
  24 aload_1
  25 fast_iload #5
  27 invokestatic 13 <jdk/incubator/vector/IntVector.fromArray(Ljdk/incubator/vector/VectorSpecies;[II)Ljdk/incubator/vector/IntVector;> 
  48   bci: 27   CounterData        count(108480)
  30 astore #6
  32 aload #4
  34 aload #6
  36 invokevirtual 19 <jdk/incubator/vector/IntVector.and(Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;> 
  64   bci: 36   VirtualCallData    count(108480) nonprofiled_count(0) entries(0)
  39 astore #4
  41 fast_iload #5
  43 getstatic 7 <bug1.I_SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
  46 invokeinterface 23 <jdk/incubator/vector/VectorSpecies.length()I> 
  120  bci: 46   VirtualCallData    count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/IntVector$IntSpecies'(108480 1.00)
  51 iadd
  52 istore #5
  54 goto 13
  176  bci: 54   JumpData           taken(108480) displacement(-160)
  57 aload #4
  59 aload_2
  60 iconst_0
  61 invokevirtual 29 <jdk/incubator/vector/IntVector.intoArray([II)V> 
  200  bci: 61   VirtualCallData    count(1695) nonprofiled_count(0) entries(0)
  64 aload_2
  65 iload_3
  66 iaload
  67 ireturn
------------------------------------------------------------------------
Total MDO size: 696 bytes
