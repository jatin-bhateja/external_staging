CompileCommand: print TestFlatArrayVectorization.test bool print = true
CompileCommand: compileonly TestFlatArrayVectorization.test bool compileonly = true
Flat Type Array: [LSimpleValue; {0x000000002608c000}
 - element klass: 'SimpleValue'
 - element size 4 aligned layout size 4
TraceNewVectors [SuperWord]:  1426  PopulateIndex  === _ 1336 42  [[ ]]  #vectory[8]:{int}
TraceNewVectors [SuperWord]:  1427  StoreVector  === 1337 1340 1321 1426  [[ 1000 1340 460 996 ]]  @flat:narrowoop: SimpleValue:NotNull:exact *[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact:flat():null_free+any * [narrow], idx=11; mismatched  Memory: @flat:narrowoop: SimpleValue:NotNull:exact *[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact:flat():null_free+any * [narrow], idx=11; !orig=[1320],[1224],[1096],[457],1112 !jvms: TestFlatArrayVectorization::test @ bci:31 (line 23)

============================= C2-compiled nmethod ==============================
# -- Old rsp -- Framesize: 64 --
#r591 rsp+60: in_preserve
#r590 rsp+56: return address
#r589 rsp+52: in_preserve
#r588 rsp+48: saved fp register
#r587 rsp+44: Fixed slot 3
#r586 rsp+40: Fixed slot 2
#r585 rsp+36: Fixed slot 1
#r584 rsp+32: Fixed slot 0
#r599 rsp+28: spill
#r598 rsp+24: spill
#r597 rsp+20: spill
#r596 rsp+16: spill
#r595 rsp+12: spill
#r594 rsp+ 8: spill
#r593 rsp+ 4: spill
#r592 rsp+ 0: spill
#
----------------------- MetaData before Compile_id = 64 ------------------------
{method}
 - this oop:          0x00007f5684715d20
 - method holder:     'TestFlatArrayVectorization'
 - constants:         0x00007f5684715860 constant pool [86]/operands[5] {0x00007f5684715860} for 'TestFlatArrayVectorization' cache=0x00007f5684716178
 - access:            0x9  public static value 
 - flags:             0x6080  queued_for_compilation has_loops_flag has_loops_flag_init 
 - name:              'test'
 - signature:         '()I'
 - max stack:         6
 - max locals:        1
 - size of params:    0
 - method size:       16
 - vtable index:      -2
 - i2i entry:         0x00007f56e0697700
 - adapters:          AHE@0x00007f56dc24c250: 0x i2c: 0x00007f56e07acf60 c2i: 0x00007f56e07ad016 c2iVE: 0x00007f56e07ad016 c2iVROE: 0x00007f56e07ad016 c2iUE: 0x00007f56e07acff1 c2iUVE: 0x00007f56e07acff1 c2iNCI: 0x00007f56e07ad050
 - compiled entry           0x00007f56e07ad016
 - compiled inline entry    0x00007f56e07ad016
 - compiled inline ro entry 0x00007f56e07ad016
 - code size:         55
 - code start:        0x00007f5684715cd8
 - code end (excl):   0x00007f5684715d0f
 - method data:       0x00007f56847167e8
 - checked ex length: 0
 - linenumber start:  0x00007f5684715d0f
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 64 -----------------------
#
#  int (  )
#
000     N1: #	out( B1 ) <- in( B58 B51 B53 B55 B63 B50 B59 B49 B54 B52 B56 B34 )  Freq: 1

000     B1: #	out( B47 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (272 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

01a     # TLS is in R15
01a     movq    RBX, [R15 + #456 (32-bit)]	# ptr
021     movq    R10, RBX	# spill
024     addq    R10, #8208	# ptr
02b     # TLS is in R15
02b     cmpq    R10, [R15 + #472 (32-bit)]	# raw ptr
032     jae,u   B47  P=0.000100 C=-1.000000

038     B2: #	out( B3 ) <- in( B1 )  Freq: 0.9999
038     # TLS is in R15
038     movq    [R15 + #456 (32-bit)], R10	# ptr
03f     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
047     movq    RDI, RBX	# spill
04a     addq    RDI, #16	# ptr
04e     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
056     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
05e     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
066     xorl    RAX, RAX	# long
068     movq    R10, precise [SimpleValue: 0x00007f56dc662f90 * (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# ptr
072     movq    R10, [R10 + #184 (32-bit)]	# long
079     movq    [RBX], R10	# long
07c     movl    [RBX + #8 (8-bit)], narrowklass: precise [SimpleValue: 0x00007f56dc662f90 * (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
083     movl    [RBX + #12 (8-bit)], #2048	# int
08a     movl    RCX, #1024	# long (unsigned 32-bit)
08f     mov     rdi,rax	# ClearArray:
	vpxor   ymm0,ymm0,ymm0
	jmpq    L_zero_64_bytes
	# L_loop:	# 64-byte LOOP
	vmovdqu ymm0,(rax)
	vmovdqu ymm0,0x20(rax)
	add     0x40,rax
	# L_zero_64_bytes:
	sub     0x8,rcx
	jge     L_loop
	add     0x4,rcx
	jl      L_tail
	vmovdqu ymm0,(rax)
	add     0x20,rax
	sub     0x4,rcx
	# L_tail:	# Clearing tail bytes
	add     0x4,rcx
	jle     L_end
	dec     rcx
	# L_sloop:	# 8-byte short loop
	vmovq   xmm0,(rax)
	add     0x8,rax
	dec     rcx
	jge     L_sloop
	# L_end:
	

0e5     B3: #	out( B38 B4 ) <- in( B48 B2 )  Freq: 1
0e5     
0e5     MEMBAR-storestore (empty encoding)
0e5     # checkcastPP of RBX
0e5     # TLS is in R15
0e5     cmpb    [R15 + #56 (8-bit)], #0
0ea     jne     B38  P=0.001000 C=-1.000000

0f0     B4: #	out( B6 B5 ) <- in( B57 B40 B38 B3 )  Freq: 1
0f0     movq    R10, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
0fa     movq    R10, R10	# ptr -> long
0fa     encode_heap_oop_not_null R11,RBX
13f     movq    R8, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
149     movl    [R8 + #112 (8-bit)], R11	# compressed ptr ! Field: TestFlatArrayVectorization.varr
14d     movq    R11, RBX	# ptr -> long
150     xorq    R11, R10	# long
153     shrq    R11, #24
157     testq   R11, R11
15a     je,s   B6  P=0.001000 C=-1.000000

15c     B5: #	out( B41 B6 ) <- in( B4 )  Freq: 0.999
15c     shrq    R10, #9
160     movq    RDI, 0x00007f56c7a3e000	# ptr
16a     addq    RDI, R10	# ptr
16d     cmpb    [RDI], #2
170     jne     B41  P=0.001000 C=-1.000000

176     B6: #	out( B29 B7 ) <- in( B46 B5 B4 )  Freq: 1
176     movl    R10, [RBX + #8 (8-bit)]	# compressed klass ptr
17a     movl    R11, [RBX + #12 (8-bit)]	# range
        nop 	# 2 bytes pad for loops and calls
180     testl   R11, R11	# unsigned
183     jbe,u   B29  P=0.000488 C=1573632.000000

189     B7: #	out( B51 B8 ) <- in( B6 )  Freq: 0.999512
189     leal    R9, [R11 + #-1]
18d     cmpl    R9, R11	# unsigned
190     jae,u   B51  P=0.000001 C=-1.000000

196     B8: #	out( B51 B9 ) <- in( B7 )  Freq: 0.999511
        nop 	# 10 bytes pad for loops and calls
1a0     cmpl    R10, narrowklass: precise [precise SimpleValue: 0x00007f56dc662f90:Constant:exact * (java/lang/Cloneable,java/io/Serializable): :Constant:exact:flat:null free *	# compressed klass ptr
1a7     jne,u   B51  P=0.000001 C=-1.000000

1ad     B9: #	out( B10 ) <- in( B8 )  Freq: 0.99951
1ad     movq    RCX, RBX	# spill
1b0     # checkcastPP of RCX
1b0     movl    R9, RCX	# ptr -> int
1b3     movl    RDI, #-16	# int
1b8     subl    RDI, R9	# int
1bb     shrl    RDI, #2
1be     decl    RDI	# int
1c0     andl    RDI, #7	# int
1c3     incl    RDI	# int
1c5     cmpl    RDI, R11
1c8     cmovlgt RDI, R11	# min
1cc     xorl    RSI, RSI	# int

1ce     B10: #	out( B12 B11 ) <- in( B9 B11 ) Loop( B10-B11 inner pre of N806) Freq: 1.99902
1ce     movl    [RCX + #16 + RSI << #2], RSI	# int
1d2     leal    R8, [RSI + #1]
1d6     cmpl    R8, RDI
1d9     jge,s   B12	# loop end  P=0.500000 C=1572864.000000

1db     B11: #	out( B10 ) <- in( B10 )  Freq: 0.99951
1db     movl    RSI, R8	# spill
        nop 	# 2 bytes pad for loops and calls
1e0     jmp,s   B10

1e2     B12: #	out( B26 B13 ) <- in( B10 )  Freq: 0.99951
1e2     leal    RDI, [R11 + #-63]
1e6     cmpl    R8, RDI
1e9     jge     B26  P=0.000001 C=-1.000000

1ef     B13: #	out( B52 B14 ) <- in( B12 )  Freq: 0.999509
1ef     # castII of RSI
1ef     leal    RDX, [RSI + #1]
1f2     cmpl    RDX, R11	# unsigned
1f5     jae,u   B52  P=0.000001 C=-1.000000

1fb     B14: #	out( B53 B15 ) <- in( B13 )  Freq: 0.999508
1fb     addl    RSI, #64	# int
        nop 	# 2 bytes pad for loops and calls
200     cmpl    RSI, R11	# unsigned
203     jae,u   B53  P=0.000001 C=-1.000000

209     B15: #	out( B20 ) <- in( B14 )  Freq: 0.999507
209     movl    RAX, #64000	# int
20e     jmp     B20
        nop 	# 13 bytes pad for loops and calls

220     B16: #	out( B17 ) <- in( B17 ) top-of-loop Freq: 4.19428e+06
220     movl    RDX, R8	# spill

223     B17: #	out( B16 B18 ) <- in( B20 B16 ) Loop( B17-B16 inner main of N278 strip mined) Freq: 4.19633e+06
223     leal    R11, [RDX + #56]
227     leal    R10, [RDX + #48]
22b     leal    R9, [RDX + #8]
22f     leal    R8, [RDX + #16]
233     leal    RBP, [RDX + #24]
236     leal    RBX, [RDX + #32]
239     leal    R14, [RDX + #40]
23d     vector_populate_index XMM2 R11 #1	! using XMM1 as TEMP
24f     vector_populate_index XMM1 RDX #1	! using XMM3 as TEMP
261     store_vector [RCX + #16 + RDX << #2],XMM1
	
267     vector_populate_index XMM1 R9 #1	! using XMM3 as TEMP
279     store_vector [RCX + #48 + RDX << #2],XMM1
	
27f     vector_populate_index XMM1 R8 #1	! using XMM3 as TEMP
291     store_vector [RCX + #80 + RDX << #2],XMM1
	
297     vector_populate_index XMM1 RBP #1	! using XMM3 as TEMP
2a9     store_vector [RCX + #112 + RDX << #2],XMM1
	
2af     vector_populate_index XMM1 RBX #1	! using XMM3 as TEMP
2c1     store_vector [RCX + #144 + RDX << #2],XMM1
	
2ca     vector_populate_index XMM1 R14 #1	! using XMM3 as TEMP
2dc     store_vector [RCX + #176 + RDX << #2],XMM1
	
2e5     vector_populate_index XMM1 R10 #1	! using XMM3 as TEMP
2f7     store_vector [RCX + #208 + RDX << #2],XMM1
	
300     store_vector [RCX + #240 + RDX << #2],XMM2
	
309     leal    R8, [RDX + #64]
30d     cmpl    R8, RSI
310     jl     B16	# loop end  P=0.999512 C=1572864.000000

316     B18: #	out( B21 B19 ) <- in( B17 )  Freq: 2047.99
316     # TLS is in R15
316     movq    R10, [R15 + #1192 (32-bit)]	# ptr
31d     testl   rax, [R10]	# Safepoint: poll for GC        # TestFlatArrayVectorization::test @ bci:35 (line 22) L[0]=R8
        # OopMap {rcx=Oop r13=Oop off=797/0x31d}
320     cmpl    R8, RDI
323     jge,s   B21  P=0.000488 C=1572864.000000

325     B19: #	out( B20 ) <- in( B18 )  Freq: 2046.99
325     movl    RDX, R8	# spill
328     movq    RBX, R13	# spill
32b     movdl   R10, XMM0	# spill
330     movl    R11, [rsp + #0]	# spill

334     B20: #	out( B17 ) <- in( B15 B19 ) Loop( B20-B19 ) Freq: 2047.99
334     movl    RSI, R11	# spill
337     subl    RSI, RDX	# int
339     addl    RSI, #-63	# int
33c     xorl    R9, R9	# int
33f     cmpl    RDI, RDX
341     cmovll RSI, R9	# signed, int
345     cmpl    RSI, #64000	# unsigned
34b     cmovla RSI, RAX	# unsigned, int
34e     addl    RSI, RDX	# int
350     movq    R13, RBX	# spill
353     movdl   XMM0, R10	# spill
358     movl    [rsp + #0], R11	# spill
        nop 	# 4 bytes pad for loops and calls
360     jmp     B17

365     B21: #	out( B25 B22 ) <- in( B18 )  Freq: 0.999507
365     movl    R11, [rsp + #0]	# spill
369     addl    R11, #-7	# int
36d     cmpl    R8, R11
370     jge,s   B25  P=0.500000 C=-1.000000

372     B22: #	out( B54 B23 ) <- in( B21 )  Freq: 0.499753
372     # castII of RDX
372     leal    R8, [RDX + #64]
        nop 	# 10 bytes pad for loops and calls
380     cmpl    R8, [RSP + #0 (32-bit)]	# unsigned
384     jae,u   B54  P=0.000001 C=-1.000000

38a     B23: #	out( B56 B24 ) <- in( B22 )  Freq: 0.499753
38a     addl    RDX, #71	# int
38d     cmpl    RDX, [RSP + #0 (32-bit)]	# unsigned
390     jae,u   B56  P=0.000001 C=-1.000000
        nop 	# 2 bytes pad for loops and calls

398     B24: #	out( B24 B25 ) <- in( B23 B24 ) Loop( B24-B24 inner post of N1337) Freq: 0.999505
398     vector_populate_index XMM2 R8 #1	! using XMM1 as TEMP
3aa     store_vector [RCX + #16 + R8 << #2],XMM2
	
3b1     addl    R8, #8	# int
3b5     cmpl    R8, R11
3b8     jl,s   B24	# loop end  P=0.500000 C=1572864.000000

3ba     B25: #	out( B26 ) <- in( B24 B21 )  Freq: 0.999506
3ba     movq    RBX, R13	# spill
3bd     movdl   R10, XMM0	# spill
3c2     movl    R11, [rsp + #0]	# spill

3c6     B26: #	out( B29 B27 ) <- in( B12 B25 )  Freq: 0.999507
3c6     cmpl    R8, R11
3c9     jge,s   B29  P=0.500000 C=-1.000000

3cb     B27: #	out( B55 B28 ) <- in( B26 )  Freq: 0.499753
3cb     # castII of R8
3cb     cmpl    R8, R11	# unsigned
3ce     jae,u   B55  P=0.000001 C=-1.000000

3d4     B28: #	out( B28 B29 ) <- in( B27 B28 ) Loop( B28-B28 inner post of N806) Freq: 0.999506
3d4     movl    [RCX + #16 + R8 << #2], R8	# int
3d9     incl    R8	# int
        nop 	# 4 bytes pad for loops and calls
3e0     cmpl    R8, R11
3e3     jl,s   B28	# loop end  P=0.500000 C=1572864.000000

3e5     B29: #	out( B49 B30 ) <- in( B28 B26 B6 )  Freq: 0.999994
3e5     movq    R8, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
3ef     movl    RBP, [R8 + #116 (8-bit)]	# compressed ptr ! Field: TestFlatArrayVectorization.rd
3f3     testl   RBP, RBP	# compressed ptr
3f5     je     B49  P=0.000001 C=-1.000000

3fb     B30: #	out( B61 B31 ) <- in( B29 )  Freq: 0.999993
3fb     movl    [rsp + #12], R11	# spill
400     movl    [rsp + #8], R10	# spill
405     movq    [rsp + #0], RBX	# spill
409     decode_heap_oop_not_null R10,RBP
40d     movq    [rsp + #16], R10	# spill
412     movq    RSI, R10	# spill
415     movl    RDX, #31	# int
        nop 	# 2 bytes pad for loops and calls
41c     call,static  java.util.Random::next
        # java.util.Random::nextInt @ bci:17 (line 559) L[0]=RBP L[1]=#2047 L[2]=_ L[3]=_ L[4]=_
        # TestFlatArrayVectorization::test @ bci:47 (line 25) L[0]=_ STK[0]=rsp + #0
        # OopMap {rbp=NarrowOop [0]=Oop [16]=Oop off=1060/0x424}

42c     B31: #	out( B35 B32 ) <- in( B30 )  Freq: 0.999973
        # Block is sole successor of call
42c     movl    R8, RAX	# spill
42f     sarl    R8, #11
433     movl    R10, RAX	# spill
436     andl    R10, #2047	# int
43d     addl    R10, R8	# int
440     movl    R8, R10	# spill
443     sarl    R8, #11
447     andl    R10, #2047	# int
44e     addl    R10, R8	# int
451     leal    R8, [R10 + #-2047]
458     testl   RAX, RAX
45a     movl    R11, #1	# int
460     movl    R9, #2047	# int
466     cmovlge R11, R9	# signed, int
46a     cmpl    R10, R11
46d     cmovlge R10, R8	# signed, int
471     subl    RAX, R10	# int
474     addl    RAX, #2046	# int
479     testl   RAX, RAX
47b     jl,s   B35  P=0.500000 C=-1.000000

47d     B32: #	out( B50 B33 ) <- in( B31 B37 )  Freq: 0.999923
        nop 	# 3 bytes pad for loops and calls
480     cmpl    R10, [RSP + #12 (32-bit)]	# unsigned
485     jae,u   B50  P=0.000001 C=-1.000000

48b     B33: #	out( B59 B34 ) <- in( B32 )  Freq: 0.999922
48b     movl    R11, [rsp + #8]	# spill
490     cmpl    R11, narrowklass: precise [precise SimpleValue: 0x00007f56dc662f90:Constant:exact * (java/lang/Cloneable,java/io/Serializable): :Constant:exact:flat:null free *	# compressed klass ptr
497     jne,u   B59  P=0.000000 C=-1.000000

49d     B34: #	out( N1 ) <- in( B33 )  Freq: 0.999922
49d     movq    R11, [rsp + #0]	# spill
4a1     # checkcastPP of R11
4a1     movl    RAX, [R11 + #16 + R10 << #2]	# int
4a6     vzeroupper
	addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

4bb     ret
        nop 	# 4 bytes pad for loops and calls

4c0     B35: #	out( B62 B36 ) <- in( B31 B36 ) Loop( B35-B36 inner ) Freq: 4.99947
4c0     movq    RSI, [rsp + #16]	# spill
4c5     movl    RDX, #31	# int
        nop 	# 2 bytes pad for loops and calls
4cc     call,static  java.util.Random::next
        # java.util.Random::nextInt @ bci:64 (line 566) L[0]=RBP L[1]=#2047 L[2]=_ L[3]=#2046 L[4]=_
        # TestFlatArrayVectorization::test @ bci:47 (line 25) L[0]=_ STK[0]=rsp + #0
        # OopMap {rbp=NarrowOop [0]=Oop [16]=Oop off=1236/0x4d4}

4dc     B36: #	out( B35 B37 ) <- in( B35 )  Freq: 4.99937
        # Block is sole successor of call
4dc     # TLS is in R15
4dc     movq    R10, [R15 + #1192 (32-bit)]	# ptr
4e3     testl   rax, [R10]	# Safepoint: poll for GC        # java.util.Random::nextInt @ bci:69 (line 566) L[0]=RBP L[1]=#2047 L[2]=_ L[3]=#2046 L[4]=RAX
        # TestFlatArrayVectorization::test @ bci:47 (line 25) L[0]=_ STK[0]=rsp + #0
        # OopMap {rbp=NarrowOop [0]=Oop [16]=Oop off=1251/0x4e3}
4e6     movl    R8, RAX	# spill
4e9     andl    R8, #2047	# int
4f0     movl    R11, RAX	# spill
4f3     sarl    R11, #11
4f7     addl    R8, R11	# int
4fa     testl   RAX, RAX
4fc     movl    R9, #1	# int
502     movl    R11, #2047	# int
508     cmovlge R9, R11	# signed, int
50c     movl    R10, R8	# spill
50f     andl    R10, #2047	# int
516     sarl    R8, #11
51a     addl    R10, R8	# int
51d     leal    R8, [R10 + #-2047]
524     cmpl    R10, R9
527     cmovlge R10, R8	# signed, int
52b     subl    RAX, R10	# int
52e     addl    RAX, #2046	# int
533     testl   RAX, RAX
535     jl,s   B35  P=0.900000 C=-1.000000

537     B37: #	out( B32 ) <- in( B36 )  Freq: 0.499937
537     jmp     B32

53c     B38: #	out( B4 B39 ) <- in( B3 )  Freq: 0.000999987
53c     movq    R10, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
546     movl    R11, [R10 + #112 (8-bit)]	# compressed ptr ! Field: TestFlatArrayVectorization.varr
54a     testl   R11, R11	# compressed ptr
54d     je     B4  P=0.500000 C=-1.000000

553     B39: #	out( B57 B40 ) <- in( B38 )  Freq: 0.000499994
553     # TLS is in R15
553     movq    R10, [R15 + #40 (8-bit)]	# long
557     decode_heap_oop RDI,R11
        nop 	# 1 bytes pad for loops and calls
580     testq   R10, R10
583     je     B57  P=0.001000 C=-1.000000

589     B40: #	out( B4 ) <- in( B39 )  Freq: 0.000499494
589     # TLS is in R15
589     movq    R11, [R15 + #48 (8-bit)]	# ptr
58d     movq    [R11 + #-8 + R10], RDI	# ptr
592     addq    R10, #-8	# long
596     # TLS is in R15
596     movq    [R15 + #40 (8-bit)], R10	# long
59a     jmp     B4

59f     B41: #	out( B45 B42 ) <- in( B5 )  Freq: 0.000999
59f     # TLS is in R15
59f     movq    R10, [R15 + #72 (8-bit)]	# ptr
5a3     # TLS is in R15
5a3     movq    R11, [R15 + #64 (8-bit)]	# long
5a7     lock addl [rsp + #0], 0	! membar_volatile
5ad     cmpb    [RDI], #0
5b0     je,s   B45  P=0.500000 C=-1.000000

5b2     B42: #	out( B44 B43 ) <- in( B41 )  Freq: 0.0004995
5b2     movb    [RDI], R12	# CMS card-mark byte 0 (R12_heapbase==0)
5b5     testq   R11, R11
5b8     je,s   B44  P=0.500000 C=-1.000000

5ba     B43: #	out( B45 ) <- in( B42 )  Freq: 0.00024975
5ba     movq    [R10 + #-8 + R11], RDI	# ptr
5bf     addq    R11, #-8	# long
5c3     # TLS is in R15
5c3     movq    [R15 + #64 (8-bit)], R11	# long
5c7     jmp,s   B45

5c9     B44: #	out( B45 ) <- in( B42 )  Freq: 0.00024975
5c9     # TLS is in R15
5c9     movq    RSI, R15	# spill
5cc     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 

5e4     B45: #	out( B58 B46 ) <- in( B44 B43 B41 )  Freq: 0.000999
5e4     movq    R10, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
5ee     movl    R10, [R10 + #112 (8-bit)]	# compressed ptr ! Field: TestFlatArrayVectorization.varr
5f2     testl   R10, R10	# compressed ptr
5f5     je     B58  P=0.000001 C=-1.000000

5fb     B46: #	out( B6 ) <- in( B45 )  Freq: 0.000998999
5fb     decode_heap_oop R10,R10
620     movq    RBX, R10	# spill
623     jmp     B6

628     B47: #	out( B60 B48 ) <- in( B1 )  Freq: 0.000100017
628     movl    RDX, #2048	# int
62d     movq    RSI, precise [SimpleValue: 0x00007f56dc662f90 * (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# ptr
        nop 	# 1 bytes pad for loops and calls
638     call,static  wrapper for: _new_array_Java
        # TestFlatArrayVectorization::test @ bci:3 (line 21) L[0]=_
        # OopMap {off=1600/0x640}

648     B48: #	out( B3 ) <- in( B47 )  Freq: 0.000100015
        # Block is sole successor of call
648     movq    RBX, RAX	# spill
64b     jmp     B3

650     B49: #	out( N1 ) <- in( B29 )  Freq: 1.01327e-06
650     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
658     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # TestFlatArrayVectorization::test @ bci:47 (line 25) L[0]=_ STK[0]=_ STK[1]=#null STK[2]=#2047
        # OopMap {off=1632/0x660}
668     stop	# ShouldNotReachHere

67c     B50: #	out( N1 ) <- in( B32 )  Freq: 1.0132e-06
67c     movl    RSI, #-28	# int
681     movq    RBP, [rsp + #0]	# spill
685     movl    [rsp + #0], R10	# spill
        nop 	# 3 bytes pad for loops and calls
68c     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # TestFlatArrayVectorization::test @ bci:50 (line 25) L[0]=_ STK[0]=RBP STK[1]=rsp + #0
        # OopMap {rbp=Oop off=1684/0x694}
69c     stop	# ShouldNotReachHere

6b0     B51: #	out( N1 ) <- in( B7 B8 )  Freq: 2.0123e-06
6b0     movl    RSI, #-138	# int
6b5     movl    RBP, R11	# spill
6b8     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # TestFlatArrayVectorization::test @ bci:16 (line 22) L[0]=#0 STK[0]=#0 STK[1]=RBP
        # OopMap {off=1728/0x6c0}
6c8     stop	# ShouldNotReachHere

6dc     B52: #	out( N1 ) <- in( B13 )  Freq: 1.01278e-06
6dc     stop	# ShouldNotReachHere

6f0     B53: #	out( N1 ) <- in( B14 )  Freq: 1.01278e-06
6f0     stop	# ShouldNotReachHere

704     B54: #	out( N1 ) <- in( B22 )  Freq: 5.0639e-07
704     stop	# ShouldNotReachHere

718     B55: #	out( N1 ) <- in( B27 )  Freq: 5.0639e-07
718     stop	# ShouldNotReachHere

72c     B56: #	out( N1 ) <- in( B23 )  Freq: 5.06389e-07
72c     stop	# ShouldNotReachHere

740     B57: #	out( B4 ) <- in( B39 )  Freq: 4.99987e-07
740     # TLS is in R15
740     movq    RSI, R15	# spill
743     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
        nop 	# 5 bytes pad for loops and calls
760     jmp     B4

765     B58: #	out( N1 ) <- in( B45 )  Freq: 1.01227e-09
765     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
76c     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # TestFlatArrayVectorization::test @ bci:15 (line 22) L[0]=_ STK[0]=_ STK[1]=#null
        # OopMap {off=1908/0x774}
77c     stop	# ShouldNotReachHere

790     B59: #	out( N1 ) <- in( B33 )  Freq: 1e-35
790     movl    RSI, #-34	# int
795     movq    RBP, [rsp + #0]	# spill
799     movl    [rsp + #0], R10	# spill
        nop 	# 3 bytes pad for loops and calls
7a0     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # TestFlatArrayVectorization::test @ bci:50 (line 25) L[0]=_ STK[0]=RBP STK[1]=rsp + #0
        # OopMap {rbp=Oop off=1960/0x7a8}
7b0     stop	# ShouldNotReachHere

7c4     B60: #	out( B63 ) <- in( B47 )  Freq: 1.00017e-09
7c4     # exception oop is in rax; no code emitted
7c4     movq    RSI, RAX	# spill
7c7     jmp,s   B63

7c9     B61: #	out( B63 ) <- in( B30 )  Freq: 9.99993e-06
7c9     # exception oop is in rax; no code emitted
7c9     movq    RSI, RAX	# spill
7cc     jmp,s   B63

7ce     B62: #	out( B63 ) <- in( B35 )  Freq: 4.99947e-05
7ce     # exception oop is in rax; no code emitted
7ce     movq    RSI, RAX	# spill

7d1     B63: #	out( N1 ) <- in( B60 B61 B62 )  Freq: 5.99956e-05
7d1     vzeroupper
	addq    rsp, 48	# Destroy frame
	popq    rbp

7d9     jmp     rethrow_stub

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2) 2098   64             TestFlatArrayVectorization::test (55 bytes)
 total in heap  [0x00007f56e0854410,0x00007f56e08554c8] = 4280
 relocation     [0x00007f56e0854590,0x00007f56e0854718] = 392
 main code      [0x00007f56e0854720,0x00007f56e0854f20] = 2048
 stub code      [0x00007f56e0854f20,0x00007f56e0854f58] = 56
 oops           [0x00007f56e0854f58,0x00007f56e0854f60] = 8
 metadata       [0x00007f56e0854f60,0x00007f56e0854fa0] = 64
 scopes data    [0x00007f56e0854fa0,0x00007f56e08550a8] = 264
 scopes pcs     [0x00007f56e08550a8,0x00007f56e0855468] = 960
 dependencies   [0x00007f56e0855468,0x00007f56e0855480] = 24
 handler table  [0x00007f56e0855480,0x00007f56e08554c8] = 72

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Entry Point]
[Inline Entry Point]
[Verified Entry Point]
[Verified Inline Entry Point]
[Verified Inline Entry Point (RO)]
  # {method} {0x00007f5684715d20} 'test' '()I' in 'TestFlatArrayVectorization'
  #           [sp+0x40]  (sp of caller)
 ;; N1: #	out( B1 ) <- in( B58 B51 B53 B55 B63 B50 B59 B49 B54 B52 B56 B34 )  Freq: 1
 ;; B1: #	out( B47 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007f56e0854720:   mov    %eax,-0x18000(%rsp)
  0x00007f56e0854727:   push   %rbp
  0x00007f56e0854728:   sub    $0x30,%rsp
  0x00007f56e085472c:   cmpl   $0x0,0x20(%r15)
  0x00007f56e0854734:   jne    0x00007f56e0854f14
  0x00007f56e085473a:   mov    0x1c8(%r15),%rbx
  0x00007f56e0854741:   mov    %rbx,%r10
  0x00007f56e0854744:   add    $0x2010,%r10
  0x00007f56e085474b:   cmp    0x1d8(%r15),%r10
  0x00007f56e0854752:   jae    0x00007f56e0854d48
 ;; B2: #	out( B3 ) <- in( B1 )  Freq: 0.9999
  0x00007f56e0854758:   mov    %r10,0x1c8(%r15)
  0x00007f56e085475f:   prefetchw 0xc0(%r10)
  0x00007f56e0854767:   mov    %rbx,%rdi
  0x00007f56e085476a:   add    $0x10,%rdi
  0x00007f56e085476e:   prefetchw 0x100(%r10)
  0x00007f56e0854776:   prefetchw 0x140(%r10)
  0x00007f56e085477e:   prefetchw 0x180(%r10)
  0x00007f56e0854786:   xor    %eax,%eax
  0x00007f56e0854788:   movabs $0x2608b400,%r10             ;   {metadata('SimpleValue'[])}
  0x00007f56e0854792:   mov    0xb8(%r10),%r10
  0x00007f56e0854799:   mov    %r10,(%rbx)
  0x00007f56e085479c:   movl   $0x2608b400,0x8(%rbx)        ;   {metadata('SimpleValue'[])}
  0x00007f56e08547a3:   movl   $0x800,0xc(%rbx)
  0x00007f56e08547aa:   mov    $0x400,%ecx
  0x00007f56e08547af:   vmovq  %rax,%xmm0
  0x00007f56e08547b4:   vpunpcklqdq %xmm0,%xmm0,%xmm0
  0x00007f56e08547b8:   vinserti128 $0x1,%xmm0,%ymm0,%ymm0
  0x00007f56e08547be:   jmpq   0x00007f56e08547d0
 ;; L_loop:
  0x00007f56e08547c3:   vmovdqu %ymm0,(%rdi)
  0x00007f56e08547c7:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f56e08547cc:   add    $0x40,%rdi
 ;; L_zero_64_bytes:
  0x00007f56e08547d0:   sub    $0x8,%rcx
  0x00007f56e08547d4:   jge    0x00007f56e08547c3
  0x00007f56e08547d6:   add    $0x4,%rcx
  0x00007f56e08547da:   jl     0x00007f56e08547e8
  0x00007f56e08547dc:   vmovdqu %ymm0,(%rdi)
  0x00007f56e08547e0:   add    $0x20,%rdi
  0x00007f56e08547e4:   sub    $0x4,%rcx
 ;; L_tail:
  0x00007f56e08547e8:   add    $0x4,%rcx
  0x00007f56e08547ec:   jle    0x00007f56e0854805
  0x00007f56e08547ee:   mov    $0xffffffffffffffff,%rax
  0x00007f56e08547f5:   bzhi   %rcx,%rax,%rax
  0x00007f56e08547fa:   kmovq  %rax,%k7
  0x00007f56e08547ff:   vmovdqu64 %ymm0,(%rdi){%k7}
 ;; L_end:
 ;; DONE:
 ;; B3: #	out( B38 B4 ) <- in( B48 B2 )  Freq: 1
  0x00007f56e0854805:   cmpb   $0x0,0x38(%r15)
  0x00007f56e085480a:   jne    0x00007f56e0854c5c
 ;; B4: #	out( B6 B5 ) <- in( B57 B40 B38 B3 )  Freq: 1
  0x00007f56e0854810:   movabs $0x11f7e5538,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f7e5538} = 'TestFlatArrayVectorization')}
  0x00007f56e085481a:   cmp    0x5f5015f(%rip),%r12        # 0x00007f56e67a4980
                                                            ;   {external_word}
  0x00007f56e0854821:   je     0x00007f56e085483b
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007f56e0854827:   movabs $0x7f56e5be9538,%rdi         ;   {external_word}
  0x00007f56e0854831:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0854835:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e085483a:   hlt    
  0x00007f56e085483b:   test   %rbx,%rbx
  0x00007f56e085483e:   jne    0x00007f56e0854858
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007f56e0854844:   movabs $0x7f56e5be9578,%rdi         ;   {external_word}
  0x00007f56e085484e:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0854852:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0854857:   hlt    
  0x00007f56e0854858:   mov    %rbx,%r11
  0x00007f56e085485b:   shr    $0x3,%r11
  0x00007f56e085485f:   movabs $0x11f7e5538,%r8             ;   {oop(a 'java/lang/Class'{0x000000011f7e5538} = 'TestFlatArrayVectorization')}
  0x00007f56e0854869:   mov    %r11d,0x70(%r8)
  0x00007f56e085486d:   mov    %rbx,%r11
  0x00007f56e0854870:   xor    %r10,%r11
  0x00007f56e0854873:   shr    $0x18,%r11
  0x00007f56e0854877:   test   %r11,%r11
  0x00007f56e085487a:   je     0x00007f56e0854896
 ;; B5: #	out( B41 B6 ) <- in( B4 )  Freq: 0.999
  0x00007f56e085487c:   shr    $0x9,%r10
  0x00007f56e0854880:   movabs $0x7f56c7a3e000,%rdi
  0x00007f56e085488a:   add    %r10,%rdi
  0x00007f56e085488d:   cmpb   $0x2,(%rdi)
  0x00007f56e0854890:   jne    0x00007f56e0854cbf           ;*putstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@6 (line 21)
 ;; B6: #	out( B29 B7 ) <- in( B46 B5 B4 )  Freq: 1
  0x00007f56e0854896:   mov    0x8(%rbx),%r10d              ;*aastore {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@31 (line 23)
  0x00007f56e085489a:   mov    0xc(%rbx),%r11d              ;*arraylength {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@15 (line 22)
  0x00007f56e085489e:   nop
  0x00007f56e085489f:   nop
  0x00007f56e08548a0:   test   %r11d,%r11d
  0x00007f56e08548a3:   jbe    0x00007f56e0854b05           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@16 (line 22)
 ;; B7: #	out( B51 B8 ) <- in( B6 )  Freq: 0.999512
  0x00007f56e08548a9:   lea    -0x1(%r11),%r9d
  0x00007f56e08548ad:   cmp    %r11d,%r9d
  0x00007f56e08548b0:   jae    0x00007f56e0854dd0
 ;; B8: #	out( B51 B9 ) <- in( B7 )  Freq: 0.999511
  0x00007f56e08548b6:   nop
  0x00007f56e08548b7:   nop
  0x00007f56e08548b8:   nop
  0x00007f56e08548b9:   nop
  0x00007f56e08548ba:   nop
  0x00007f56e08548bb:   nop
  0x00007f56e08548bc:   nop
  0x00007f56e08548bd:   nop
  0x00007f56e08548be:   nop
  0x00007f56e08548bf:   nop
  0x00007f56e08548c0:   cmp    $0x2608c000,%r10d            ;   {metadata('SimpleValue'[])}
  0x00007f56e08548c7:   jne    0x00007f56e0854dd0
 ;; B9: #	out( B10 ) <- in( B8 )  Freq: 0.99951
  0x00007f56e08548cd:   mov    %rbx,%rcx                    ;*aastore {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@31 (line 23)
  0x00007f56e08548d0:   mov    %ecx,%r9d
  0x00007f56e08548d3:   mov    $0xfffffff0,%edi
  0x00007f56e08548d8:   sub    %r9d,%edi
  0x00007f56e08548db:   shr    $0x2,%edi
  0x00007f56e08548de:   dec    %edi
  0x00007f56e08548e0:   and    $0x7,%edi
  0x00007f56e08548e3:   inc    %edi
  0x00007f56e08548e5:   cmp    %r11d,%edi
  0x00007f56e08548e8:   cmovg  %r11d,%edi
  0x00007f56e08548ec:   xor    %esi,%esi                    ;*getstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@19 (line 23)
 ;; B10: #	out( B12 B11 ) <- in( B9 B11 ) Loop( B10-B11 inner pre of N806) Freq: 1.99902
  0x00007f56e08548ee:   mov    %esi,0x10(%rcx,%rsi,4)       ;*aastore {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@31 (line 23)
  0x00007f56e08548f2:   lea    0x1(%rsi),%r8d
  0x00007f56e08548f6:   cmp    %edi,%r8d
  0x00007f56e08548f9:   jge    0x00007f56e0854902           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@16 (line 22)
 ;; B11: #	out( B10 ) <- in( B10 )  Freq: 0.99951
  0x00007f56e08548fb:   mov    %r8d,%esi
  0x00007f56e08548fe:   nop
  0x00007f56e08548ff:   nop
  0x00007f56e0854900:   jmp    0x00007f56e08548ee
 ;; B12: #	out( B26 B13 ) <- in( B10 )  Freq: 0.99951
  0x00007f56e0854902:   lea    -0x3f(%r11),%edi
  0x00007f56e0854906:   cmp    %edi,%r8d
  0x00007f56e0854909:   jge    0x00007f56e0854ae6
 ;; B13: #	out( B52 B14 ) <- in( B12 )  Freq: 0.999509
  0x00007f56e085490f:   lea    0x1(%rsi),%edx
  0x00007f56e0854912:   cmp    %r11d,%edx
  0x00007f56e0854915:   jae    0x00007f56e0854dfc
 ;; B14: #	out( B53 B15 ) <- in( B13 )  Freq: 0.999508
  0x00007f56e085491b:   add    $0x40,%esi
  0x00007f56e085491e:   nop
  0x00007f56e085491f:   nop
  0x00007f56e0854920:   cmp    %r11d,%esi
  0x00007f56e0854923:   jae    0x00007f56e0854e10
 ;; B15: #	out( B20 ) <- in( B14 )  Freq: 0.999507
  0x00007f56e0854929:   mov    $0xfa00,%eax
  0x00007f56e085492e:   jmpq   0x00007f56e0854a54
  0x00007f56e0854933:   nop
  0x00007f56e0854934:   nop
  0x00007f56e0854935:   nop
  0x00007f56e0854936:   nop
  0x00007f56e0854937:   nop
  0x00007f56e0854938:   nop
  0x00007f56e0854939:   nop
  0x00007f56e085493a:   nop
  0x00007f56e085493b:   nop
  0x00007f56e085493c:   nop
  0x00007f56e085493d:   nop
  0x00007f56e085493e:   nop
  0x00007f56e085493f:   nop
 ;; B16: #	out( B17 ) <- in( B17 ) top-of-loop Freq: 4.19428e+06
  0x00007f56e0854940:   mov    %r8d,%edx                    ;*getstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@19 (line 23)
 ;; B17: #	out( B16 B18 ) <- in( B20 B16 ) Loop( B17-B16 inner main of N278 strip mined) Freq: 4.19633e+06
  0x00007f56e0854943:   lea    0x38(%rdx),%r11d
  0x00007f56e0854947:   lea    0x30(%rdx),%r10d
  0x00007f56e085494b:   lea    0x8(%rdx),%r9d
  0x00007f56e085494f:   lea    0x10(%rdx),%r8d
  0x00007f56e0854953:   lea    0x18(%rdx),%ebp
  0x00007f56e0854956:   lea    0x20(%rdx),%ebx
  0x00007f56e0854959:   lea    0x28(%rdx),%r14d
  0x00007f56e085495d:   vpbroadcastd %r11d,%ymm1
  0x00007f56e0854963:   vmovdqu -0x6fd4b(%rip),%ymm2        # Stub::iota_indices+128 0x00007f56e07e4c20
                                                            ;   {external_word}
  0x00007f56e085496b:   vpaddd %ymm1,%ymm2,%ymm2
  0x00007f56e085496f:   vpbroadcastd %edx,%ymm3
  0x00007f56e0854975:   vmovdqu -0x6fd5d(%rip),%ymm1        # Stub::iota_indices+128 0x00007f56e07e4c20
                                                            ;   {external_word}
  0x00007f56e085497d:   vpaddd %ymm3,%ymm1,%ymm1
  0x00007f56e0854981:   vmovdqu %ymm1,0x10(%rcx,%rdx,4)
  0x00007f56e0854987:   vpbroadcastd %r9d,%ymm3
  0x00007f56e085498d:   vmovdqu -0x6fd75(%rip),%ymm1        # Stub::iota_indices+128 0x00007f56e07e4c20
                                                            ;   {external_word}
  0x00007f56e0854995:   vpaddd %ymm3,%ymm1,%ymm1
  0x00007f56e0854999:   vmovdqu %ymm1,0x30(%rcx,%rdx,4)
  0x00007f56e085499f:   vpbroadcastd %r8d,%ymm3
  0x00007f56e08549a5:   vmovdqu -0x6fd8d(%rip),%ymm1        # Stub::iota_indices+128 0x00007f56e07e4c20
                                                            ;   {external_word}
  0x00007f56e08549ad:   vpaddd %ymm3,%ymm1,%ymm1
  0x00007f56e08549b1:   vmovdqu %ymm1,0x50(%rcx,%rdx,4)
  0x00007f56e08549b7:   vpbroadcastd %ebp,%ymm3
  0x00007f56e08549bd:   vmovdqu -0x6fda5(%rip),%ymm1        # Stub::iota_indices+128 0x00007f56e07e4c20
                                                            ;   {external_word}
  0x00007f56e08549c5:   vpaddd %ymm3,%ymm1,%ymm1
  0x00007f56e08549c9:   vmovdqu %ymm1,0x70(%rcx,%rdx,4)
  0x00007f56e08549cf:   vpbroadcastd %ebx,%ymm3
  0x00007f56e08549d5:   vmovdqu -0x6fdbd(%rip),%ymm1        # Stub::iota_indices+128 0x00007f56e07e4c20
                                                            ;   {external_word}
  0x00007f56e08549dd:   vpaddd %ymm3,%ymm1,%ymm1
  0x00007f56e08549e1:   vmovdqu %ymm1,0x90(%rcx,%rdx,4)
  0x00007f56e08549ea:   vpbroadcastd %r14d,%ymm3
  0x00007f56e08549f0:   vmovdqu -0x6fdd8(%rip),%ymm1        # Stub::iota_indices+128 0x00007f56e07e4c20
                                                            ;   {external_word}
  0x00007f56e08549f8:   vpaddd %ymm3,%ymm1,%ymm1
  0x00007f56e08549fc:   vmovdqu %ymm1,0xb0(%rcx,%rdx,4)
  0x00007f56e0854a05:   vpbroadcastd %r10d,%ymm3
  0x00007f56e0854a0b:   vmovdqu -0x6fdf3(%rip),%ymm1        # Stub::iota_indices+128 0x00007f56e07e4c20
                                                            ;   {external_word}
  0x00007f56e0854a13:   vpaddd %ymm3,%ymm1,%ymm1
  0x00007f56e0854a17:   vmovdqu %ymm1,0xd0(%rcx,%rdx,4)
  0x00007f56e0854a20:   vmovdqu %ymm2,0xf0(%rcx,%rdx,4)     ;*aastore {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@31 (line 23)
  0x00007f56e0854a29:   lea    0x40(%rdx),%r8d
  0x00007f56e0854a2d:   cmp    %esi,%r8d
  0x00007f56e0854a30:   jl     0x00007f56e0854940           ;*putstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@6 (line 21)
 ;; B18: #	out( B21 B19 ) <- in( B17 )  Freq: 2047.99
  0x00007f56e0854a36:   mov    0x4a8(%r15),%r10             ; ImmutableOopMap {rcx=Oop r13=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - (reexecute) TestFlatArrayVectorization::test@35 (line 22)
  0x00007f56e0854a3d:   test   %eax,(%r10)                  ;*goto {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@35 (line 22)
                                                            ;   {poll}
  0x00007f56e0854a40:   cmp    %edi,%r8d
  0x00007f56e0854a43:   jge    0x00007f56e0854a85
 ;; B19: #	out( B20 ) <- in( B18 )  Freq: 2046.99
  0x00007f56e0854a45:   mov    %r8d,%edx
  0x00007f56e0854a48:   mov    %r13,%rbx
  0x00007f56e0854a4b:   vmovd  %xmm0,%r10d
  0x00007f56e0854a50:   mov    (%rsp),%r11d
 ;; B20: #	out( B17 ) <- in( B15 B19 ) Loop( B20-B19 ) Freq: 2047.99
  0x00007f56e0854a54:   mov    %r11d,%esi
  0x00007f56e0854a57:   sub    %edx,%esi
  0x00007f56e0854a59:   add    $0xffffffc1,%esi
  0x00007f56e0854a5c:   xor    %r9d,%r9d
  0x00007f56e0854a5f:   cmp    %edx,%edi
  0x00007f56e0854a61:   cmovl  %r9d,%esi
  0x00007f56e0854a65:   cmp    $0xfa00,%esi
  0x00007f56e0854a6b:   cmova  %eax,%esi
  0x00007f56e0854a6e:   add    %edx,%esi
  0x00007f56e0854a70:   mov    %rbx,%r13
  0x00007f56e0854a73:   vmovd  %r10d,%xmm0
  0x00007f56e0854a78:   mov    %r11d,(%rsp)
  0x00007f56e0854a7c:   nop
  0x00007f56e0854a7d:   nop
  0x00007f56e0854a7e:   nop
  0x00007f56e0854a7f:   nop
  0x00007f56e0854a80:   jmpq   0x00007f56e0854943
 ;; B21: #	out( B25 B22 ) <- in( B18 )  Freq: 0.999507
  0x00007f56e0854a85:   mov    (%rsp),%r11d
  0x00007f56e0854a89:   add    $0xfffffff9,%r11d
  0x00007f56e0854a8d:   cmp    %r11d,%r8d
  0x00007f56e0854a90:   jge    0x00007f56e0854ada
 ;; B22: #	out( B54 B23 ) <- in( B21 )  Freq: 0.499753
  0x00007f56e0854a92:   lea    0x40(%rdx),%r8d
  0x00007f56e0854a96:   nop
  0x00007f56e0854a97:   nop
  0x00007f56e0854a98:   nop
  0x00007f56e0854a99:   nop
  0x00007f56e0854a9a:   nop
  0x00007f56e0854a9b:   nop
  0x00007f56e0854a9c:   nop
  0x00007f56e0854a9d:   nop
  0x00007f56e0854a9e:   nop
  0x00007f56e0854a9f:   nop
  0x00007f56e0854aa0:   cmp    (%rsp),%r8d
  0x00007f56e0854aa4:   jae    0x00007f56e0854e24
 ;; B23: #	out( B56 B24 ) <- in( B22 )  Freq: 0.499753
  0x00007f56e0854aaa:   add    $0x47,%edx
  0x00007f56e0854aad:   cmp    (%rsp),%edx
  0x00007f56e0854ab0:   jae    0x00007f56e0854e4c
  0x00007f56e0854ab6:   nop
  0x00007f56e0854ab7:   nop                                 ;*getstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@19 (line 23)
 ;; B24: #	out( B24 B25 ) <- in( B23 B24 ) Loop( B24-B24 inner post of N1337) Freq: 0.999505
  0x00007f56e0854ab8:   vpbroadcastd %r8d,%ymm1
  0x00007f56e0854abe:   vmovdqu -0x6fea6(%rip),%ymm2        # Stub::iota_indices+128 0x00007f56e07e4c20
                                                            ;   {external_word}
  0x00007f56e0854ac6:   vpaddd %ymm1,%ymm2,%ymm2
  0x00007f56e0854aca:   vmovdqu %ymm2,0x10(%rcx,%r8,4)      ;*aastore {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@31 (line 23)
  0x00007f56e0854ad1:   add    $0x8,%r8d                    ;*iinc {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@32 (line 22)
  0x00007f56e0854ad5:   cmp    %r11d,%r8d
  0x00007f56e0854ad8:   jl     0x00007f56e0854ab8           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@16 (line 22)
 ;; B25: #	out( B26 ) <- in( B24 B21 )  Freq: 0.999506
  0x00007f56e0854ada:   mov    %r13,%rbx
  0x00007f56e0854add:   vmovd  %xmm0,%r10d
  0x00007f56e0854ae2:   mov    (%rsp),%r11d
 ;; B26: #	out( B29 B27 ) <- in( B12 B25 )  Freq: 0.999507
  0x00007f56e0854ae6:   cmp    %r11d,%r8d
  0x00007f56e0854ae9:   jge    0x00007f56e0854b05
 ;; B27: #	out( B55 B28 ) <- in( B26 )  Freq: 0.499753
  0x00007f56e0854aeb:   cmp    %r11d,%r8d
  0x00007f56e0854aee:   jae    0x00007f56e0854e38           ;*getstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@19 (line 23)
 ;; B28: #	out( B28 B29 ) <- in( B27 B28 ) Loop( B28-B28 inner post of N806) Freq: 0.999506
  0x00007f56e0854af4:   mov    %r8d,0x10(%rcx,%r8,4)        ;*aastore {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@31 (line 23)
  0x00007f56e0854af9:   inc    %r8d                         ;*iinc {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@32 (line 22)
  0x00007f56e0854afc:   nop
  0x00007f56e0854afd:   nop
  0x00007f56e0854afe:   nop
  0x00007f56e0854aff:   nop
  0x00007f56e0854b00:   cmp    %r11d,%r8d
  0x00007f56e0854b03:   jl     0x00007f56e0854af4           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@16 (line 22)
 ;; B29: #	out( B49 B30 ) <- in( B28 B26 B6 )  Freq: 0.999994
  0x00007f56e0854b05:   movabs $0x11f7e5538,%r8             ;   {oop(a 'java/lang/Class'{0x000000011f7e5538} = 'TestFlatArrayVectorization')}
  0x00007f56e0854b0f:   mov    0x74(%r8),%ebp               ;*getstatic rd {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@41 (line 25)
  0x00007f56e0854b13:   test   %ebp,%ebp
  0x00007f56e0854b15:   je     0x00007f56e0854d70           ;*invokevirtual nextInt {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
 ;; B30: #	out( B61 B31 ) <- in( B29 )  Freq: 0.999993
  0x00007f56e0854b1b:   mov    %r11d,0xc(%rsp)
  0x00007f56e0854b20:   mov    %r10d,0x8(%rsp)
  0x00007f56e0854b25:   mov    %rbx,(%rsp)                  ;*ifgt {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@1 (line 557)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
  0x00007f56e0854b29:   lea    (%r12,%rbp,8),%r10           ;*getstatic rd {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@41 (line 25)
  0x00007f56e0854b2d:   mov    %r10,0x10(%rsp)
  0x00007f56e0854b32:   mov    %r10,%rsi
  0x00007f56e0854b35:   mov    $0x1f,%edx
  0x00007f56e0854b3a:   nop
  0x00007f56e0854b3b:   nop
  0x00007f56e0854b3c:   vzeroupper 
  0x00007f56e0854b3f:   callq  0x00007f56e07ae020           ; ImmutableOopMap {rbp=NarrowOop [0]=Oop [16]=Oop }
                                                            ;*invokevirtual next {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@17 (line 559)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
                                                            ;   {optimized virtual_call}
  0x00007f56e0854b44:   nopl   0x1000734(%rax,%rax,1)       ;*invokevirtual next {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@17 (line 559)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
                                                            ;   {other}
 ;; B31: #	out( B35 B32 ) <- in( B30 )  Freq: 0.999973
  0x00007f56e0854b4c:   mov    %eax,%r8d
  0x00007f56e0854b4f:   sar    $0xb,%r8d
  0x00007f56e0854b53:   mov    %eax,%r10d
  0x00007f56e0854b56:   and    $0x7ff,%r10d
  0x00007f56e0854b5d:   add    %r8d,%r10d
  0x00007f56e0854b60:   mov    %r10d,%r8d
  0x00007f56e0854b63:   sar    $0xb,%r8d
  0x00007f56e0854b67:   and    $0x7ff,%r10d
  0x00007f56e0854b6e:   add    %r8d,%r10d
  0x00007f56e0854b71:   lea    -0x7ff(%r10),%r8d
  0x00007f56e0854b78:   test   %eax,%eax
  0x00007f56e0854b7a:   mov    $0x1,%r11d
  0x00007f56e0854b80:   mov    $0x7ff,%r9d
  0x00007f56e0854b86:   cmovge %r9d,%r11d
  0x00007f56e0854b8a:   cmp    %r11d,%r10d
  0x00007f56e0854b8d:   cmovge %r8d,%r10d                   ;*irem {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@52 (line 565)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
  0x00007f56e0854b91:   sub    %r10d,%eax
  0x00007f56e0854b94:   add    $0x7fe,%eax
  0x00007f56e0854b99:   test   %eax,%eax
  0x00007f56e0854b9b:   jl     0x00007f56e0854be0           ;*ifge {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@58 (line 565)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
 ;; B32: #	out( B50 B33 ) <- in( B31 B37 )  Freq: 0.999923
  0x00007f56e0854b9d:   nop
  0x00007f56e0854b9e:   nop
  0x00007f56e0854b9f:   nop
  0x00007f56e0854ba0:   cmp    0xc(%rsp),%r10d
  0x00007f56e0854ba5:   jae    0x00007f56e0854d9c
 ;; B33: #	out( B59 B34 ) <- in( B32 )  Freq: 0.999922
  0x00007f56e0854bab:   mov    0x8(%rsp),%r11d
  0x00007f56e0854bb0:   cmp    $0x2608c000,%r11d            ;   {metadata('SimpleValue'[])}
  0x00007f56e0854bb7:   jne    0x00007f56e0854eb0
 ;; B34: #	out( N1 ) <- in( B33 )  Freq: 0.999922
  0x00007f56e0854bbd:   mov    (%rsp),%r11
  0x00007f56e0854bc1:   mov    0x10(%r11,%r10,4),%eax       ;*aaload {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@50 (line 25)
  0x00007f56e0854bc6:   vzeroupper 
  0x00007f56e0854bc9:   add    $0x30,%rsp
  0x00007f56e0854bcd:   pop    %rbp
  0x00007f56e0854bce:   cmp    0x4a0(%r15),%rsp             ;   {poll_return}
  0x00007f56e0854bd5:   ja     0x00007f56e0854efe
  0x00007f56e0854bdb:   retq   
  0x00007f56e0854bdc:   nop
  0x00007f56e0854bdd:   nop
  0x00007f56e0854bde:   nop
  0x00007f56e0854bdf:   nop                                 ;*aload_0 {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@61 (line 566)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
 ;; B35: #	out( B62 B36 ) <- in( B31 B36 ) Loop( B35-B36 inner ) Freq: 4.99947
  0x00007f56e0854be0:   mov    0x10(%rsp),%rsi
  0x00007f56e0854be5:   mov    $0x1f,%edx
  0x00007f56e0854bea:   nop
  0x00007f56e0854beb:   nop
  0x00007f56e0854bec:   vzeroupper 
  0x00007f56e0854bef:   callq  0x00007f56e07ae020           ; ImmutableOopMap {rbp=NarrowOop [0]=Oop [16]=Oop }
                                                            ;*invokevirtual next {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@64 (line 566)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
                                                            ;   {optimized virtual_call}
  0x00007f56e0854bf4:   nopl   0x20007e4(%rax,%rax,1)       ;*putstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@6 (line 21)
                                                            ;   {other}
 ;; B36: #	out( B35 B37 ) <- in( B35 )  Freq: 4.99937
  0x00007f56e0854bfc:   mov    0x4a8(%r15),%r10             ; ImmutableOopMap {rbp=NarrowOop [0]=Oop [16]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - (reexecute) java.util.Random::nextInt@69 (line 566)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
  0x00007f56e0854c03:   test   %eax,(%r10)                  ;*goto {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@69 (line 566)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
                                                            ;   {poll}
  0x00007f56e0854c06:   mov    %eax,%r8d
  0x00007f56e0854c09:   and    $0x7ff,%r8d
  0x00007f56e0854c10:   mov    %eax,%r11d
  0x00007f56e0854c13:   sar    $0xb,%r11d
  0x00007f56e0854c17:   add    %r11d,%r8d
  0x00007f56e0854c1a:   test   %eax,%eax
  0x00007f56e0854c1c:   mov    $0x1,%r9d
  0x00007f56e0854c22:   mov    $0x7ff,%r11d
  0x00007f56e0854c28:   cmovge %r11d,%r9d
  0x00007f56e0854c2c:   mov    %r8d,%r10d
  0x00007f56e0854c2f:   and    $0x7ff,%r10d
  0x00007f56e0854c36:   sar    $0xb,%r8d
  0x00007f56e0854c3a:   add    %r8d,%r10d
  0x00007f56e0854c3d:   lea    -0x7ff(%r10),%r8d
  0x00007f56e0854c44:   cmp    %r9d,%r10d
  0x00007f56e0854c47:   cmovge %r8d,%r10d                   ;*irem {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@52 (line 565)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
  0x00007f56e0854c4b:   sub    %r10d,%eax
  0x00007f56e0854c4e:   add    $0x7fe,%eax
  0x00007f56e0854c53:   test   %eax,%eax
  0x00007f56e0854c55:   jl     0x00007f56e0854be0           ;*ifge {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@58 (line 565)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
 ;; B37: #	out( B32 ) <- in( B36 )  Freq: 0.499937
  0x00007f56e0854c57:   jmpq   0x00007f56e0854b9d
 ;; B38: #	out( B4 B39 ) <- in( B3 )  Freq: 0.000999987
  0x00007f56e0854c5c:   movabs $0x11f7e5538,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f7e5538} = 'TestFlatArrayVectorization')}
  0x00007f56e0854c66:   mov    0x70(%r10),%r11d
  0x00007f56e0854c6a:   test   %r11d,%r11d
  0x00007f56e0854c6d:   je     0x00007f56e0854810
 ;; B39: #	out( B57 B40 ) <- in( B38 )  Freq: 0.000499994
  0x00007f56e0854c73:   mov    0x28(%r15),%r10
  0x00007f56e0854c77:   mov    %r11,%rdi
  0x00007f56e0854c7a:   cmp    0x5f4fcff(%rip),%r12        # 0x00007f56e67a4980
                                                            ;   {external_word}
  0x00007f56e0854c81:   je     0x00007f56e0854c9b
 ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f56e0854c87:   movabs $0x7f56e5be95e8,%rdi         ;   {external_word}
  0x00007f56e0854c91:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0854c95:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0854c9a:   hlt    
  0x00007f56e0854c9b:   shl    $0x3,%rdi
  0x00007f56e0854c9f:   nop
  0x00007f56e0854ca0:   test   %r10,%r10
  0x00007f56e0854ca3:   je     0x00007f56e0854e60
 ;; B40: #	out( B4 ) <- in( B39 )  Freq: 0.000499494
  0x00007f56e0854ca9:   mov    0x30(%r15),%r11
  0x00007f56e0854cad:   mov    %rdi,-0x8(%r11,%r10,1)
  0x00007f56e0854cb2:   add    $0xfffffffffffffff8,%r10
  0x00007f56e0854cb6:   mov    %r10,0x28(%r15)
  0x00007f56e0854cba:   jmpq   0x00007f56e0854810
 ;; B41: #	out( B45 B42 ) <- in( B5 )  Freq: 0.000999
  0x00007f56e0854cbf:   mov    0x48(%r15),%r10
  0x00007f56e0854cc3:   mov    0x40(%r15),%r11
  0x00007f56e0854cc7:   lock addl $0x0,-0x40(%rsp)
  0x00007f56e0854ccd:   cmpb   $0x0,(%rdi)
  0x00007f56e0854cd0:   je     0x00007f56e0854d04
 ;; B42: #	out( B44 B43 ) <- in( B41 )  Freq: 0.0004995
  0x00007f56e0854cd2:   mov    %r12b,(%rdi)
  0x00007f56e0854cd5:   test   %r11,%r11
  0x00007f56e0854cd8:   je     0x00007f56e0854ce9
 ;; B43: #	out( B45 ) <- in( B42 )  Freq: 0.00024975
  0x00007f56e0854cda:   mov    %rdi,-0x8(%r10,%r11,1)
  0x00007f56e0854cdf:   add    $0xfffffffffffffff8,%r11
  0x00007f56e0854ce3:   mov    %r11,0x40(%r15)
  0x00007f56e0854ce7:   jmp    0x00007f56e0854d04
 ;; B44: #	out( B45 ) <- in( B42 )  Freq: 0.00024975
  0x00007f56e0854ce9:   mov    %r15,%rsi
  0x00007f56e0854cec:   vzeroupper 
  0x00007f56e0854cef:   movabs $0x7f56e479563a,%r10
  0x00007f56e0854cf9:   callq  *%r10
  0x00007f56e0854cfc:   nopl   0x0(%rax,%rax,1)             ;*putstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@6 (line 21)
                                                            ;   {other}
 ;; B45: #	out( B58 B46 ) <- in( B44 B43 B41 )  Freq: 0.000999
  0x00007f56e0854d04:   movabs $0x11f7e5538,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f7e5538} = 'TestFlatArrayVectorization')}
  0x00007f56e0854d0e:   mov    0x70(%r10),%r10d             ;*getstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@12 (line 22)
  0x00007f56e0854d12:   test   %r10d,%r10d
  0x00007f56e0854d15:   je     0x00007f56e0854e85           ;*arraylength {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@15 (line 22)
 ;; B46: #	out( B6 ) <- in( B45 )  Freq: 0.000998999
  0x00007f56e0854d1b:   cmp    0x5f4fc5e(%rip),%r12        # 0x00007f56e67a4980
                                                            ;   {external_word}
  0x00007f56e0854d22:   je     0x00007f56e0854d3c
 ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f56e0854d28:   movabs $0x7f56e5be95e8,%rdi         ;   {external_word}
  0x00007f56e0854d32:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0854d36:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0854d3b:   hlt    
  0x00007f56e0854d3c:   shl    $0x3,%r10                    ;*getstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@12 (line 22)
  0x00007f56e0854d40:   mov    %r10,%rbx
  0x00007f56e0854d43:   jmpq   0x00007f56e0854896
 ;; B47: #	out( B60 B48 ) <- in( B1 )  Freq: 0.000100017
  0x00007f56e0854d48:   mov    $0x800,%edx
  0x00007f56e0854d4d:   movabs $0x2608b400,%rsi             ;   {metadata('SimpleValue'[])}
  0x00007f56e0854d57:   nop
  0x00007f56e0854d58:   vzeroupper 
  0x00007f56e0854d5b:   callq  0x00007f56e06b7320           ; ImmutableOopMap {}
                                                            ;*anewarray {reexecute=0 rethrow=0 return_oop=1 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@3 (line 21)
                                                            ;   {runtime_call _new_array_Java}
  0x00007f56e0854d60:   nopl   0x4000950(%rax,%rax,1)       ;*anewarray {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@3 (line 21)
                                                            ;   {other}
 ;; B48: #	out( B3 ) <- in( B47 )  Freq: 0.000100015
  0x00007f56e0854d68:   mov    %rax,%rbx
  0x00007f56e0854d6b:   jmpq   0x00007f56e0854805
 ;; B49: #	out( N1 ) <- in( B29 )  Freq: 1.01327e-06
  0x00007f56e0854d70:   mov    $0xfffffff6,%esi
  0x00007f56e0854d75:   nop
  0x00007f56e0854d76:   nop
  0x00007f56e0854d77:   nop
  0x00007f56e0854d78:   vzeroupper 
  0x00007f56e0854d7b:   callq  0x00007f56e07beea0           ; ImmutableOopMap {}
                                                            ;*invokevirtual nextInt {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f56e0854d80:   nopl   0x5000970(%rax,%rax,1)       ;   {other}
  0x00007f56e0854d88:   movabs $0x7f56e593d750,%rdi         ;   {external_word}
  0x00007f56e0854d92:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0854d96:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0854d9b:   hlt                                 ;*invokevirtual nextInt {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
 ;; B50: #	out( N1 ) <- in( B32 )  Freq: 1.0132e-06
  0x00007f56e0854d9c:   mov    $0xffffffe4,%esi
  0x00007f56e0854da1:   mov    (%rsp),%rbp
  0x00007f56e0854da5:   mov    %r10d,(%rsp)
  0x00007f56e0854da9:   nop
  0x00007f56e0854daa:   nop
  0x00007f56e0854dab:   nop
  0x00007f56e0854dac:   vzeroupper 
  0x00007f56e0854daf:   callq  0x00007f56e07beea0           ; ImmutableOopMap {rbp=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@50 (line 25)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f56e0854db4:   nopl   0x60009a4(%rax,%rax,1)       ;   {other}
  0x00007f56e0854dbc:   movabs $0x7f56e593d750,%rdi         ;   {external_word}
  0x00007f56e0854dc6:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0854dca:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0854dcf:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@16 (line 22)
 ;; B51: #	out( N1 ) <- in( B7 B8 )  Freq: 2.0123e-06
  0x00007f56e0854dd0:   mov    $0xffffff76,%esi
  0x00007f56e0854dd5:   mov    %r11d,%ebp
  0x00007f56e0854dd8:   vzeroupper 
  0x00007f56e0854ddb:   callq  0x00007f56e07beea0           ; ImmutableOopMap {}
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - (reexecute) TestFlatArrayVectorization::test@16 (line 22)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f56e0854de0:   nopl   0x70009d0(%rax,%rax,1)       ;   {other}
  0x00007f56e0854de8:   movabs $0x7f56e593d750,%rdi         ;   {external_word}
  0x00007f56e0854df2:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0854df6:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0854dfb:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@16 (line 22)
 ;; B52: #	out( N1 ) <- in( B13 )  Freq: 1.01278e-06
  0x00007f56e0854dfc:   movabs $0x7f56e5bc4348,%rdi         ;   {external_word}
  0x00007f56e0854e06:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0854e0a:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0854e0f:   hlt    
 ;; B53: #	out( N1 ) <- in( B14 )  Freq: 1.01278e-06
  0x00007f56e0854e10:   movabs $0x7f56e5bc4348,%rdi         ;   {external_word}
  0x00007f56e0854e1a:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0854e1e:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0854e23:   hlt    
 ;; B54: #	out( N1 ) <- in( B22 )  Freq: 5.0639e-07
  0x00007f56e0854e24:   movabs $0x7f56e5bc4348,%rdi         ;   {external_word}
  0x00007f56e0854e2e:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0854e32:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0854e37:   hlt    
 ;; B55: #	out( N1 ) <- in( B27 )  Freq: 5.0639e-07
  0x00007f56e0854e38:   movabs $0x7f56e5bc4348,%rdi         ;   {external_word}
  0x00007f56e0854e42:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0854e46:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0854e4b:   hlt    
 ;; B56: #	out( N1 ) <- in( B23 )  Freq: 5.06389e-07
  0x00007f56e0854e4c:   movabs $0x7f56e5bc4348,%rdi         ;   {external_word}
  0x00007f56e0854e56:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0854e5a:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0854e5f:   hlt    
 ;; B57: #	out( B4 ) <- in( B39 )  Freq: 4.99987e-07
  0x00007f56e0854e60:   mov    %r15,%rsi
  0x00007f56e0854e63:   vzeroupper 
  0x00007f56e0854e66:   movabs $0x7f56e47954b2,%r10
  0x00007f56e0854e70:   callq  *%r10
  0x00007f56e0854e73:   nopl   0x0(%rax,%rax,1)             ;*putstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@6 (line 21)
                                                            ;   {other}
  0x00007f56e0854e7b:   nop
  0x00007f56e0854e7c:   nop
  0x00007f56e0854e7d:   nop
  0x00007f56e0854e7e:   nop
  0x00007f56e0854e7f:   nop
  0x00007f56e0854e80:   jmpq   0x00007f56e0854810
 ;; B58: #	out( N1 ) <- in( B45 )  Freq: 1.01227e-09
  0x00007f56e0854e85:   mov    $0xfffffff6,%esi
  0x00007f56e0854e8a:   nop
  0x00007f56e0854e8b:   nop
  0x00007f56e0854e8c:   vzeroupper 
  0x00007f56e0854e8f:   callq  0x00007f56e07beea0           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@15 (line 22)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f56e0854e94:   nopl   0x8000a84(%rax,%rax,1)       ;   {other}
  0x00007f56e0854e9c:   movabs $0x7f56e593d750,%rdi         ;   {external_word}
  0x00007f56e0854ea6:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0854eaa:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0854eaf:   hlt                                 ;*arraylength {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@15 (line 22)
 ;; B59: #	out( N1 ) <- in( B33 )  Freq: 1e-35
  0x00007f56e0854eb0:   mov    $0xffffffde,%esi
  0x00007f56e0854eb5:   mov    (%rsp),%rbp
  0x00007f56e0854eb9:   mov    %r10d,(%rsp)
  0x00007f56e0854ebd:   nop
  0x00007f56e0854ebe:   nop
  0x00007f56e0854ebf:   nop
  0x00007f56e0854ec0:   vzeroupper 
  0x00007f56e0854ec3:   callq  0x00007f56e07beea0           ; ImmutableOopMap {rbp=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@50 (line 25)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f56e0854ec8:   nopl   0x9000ab8(%rax,%rax,1)       ;   {other}
  0x00007f56e0854ed0:   movabs $0x7f56e593d750,%rdi         ;   {external_word}
  0x00007f56e0854eda:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0854ede:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0854ee3:   hlt                                 ;*anewarray {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@3 (line 21)
 ;; B60: #	out( B63 ) <- in( B47 )  Freq: 1.00017e-09
  0x00007f56e0854ee4:   mov    %rax,%rsi
  0x00007f56e0854ee7:   jmp    0x00007f56e0854ef1           ;*invokevirtual next {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@17 (line 559)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
 ;; B61: #	out( B63 ) <- in( B30 )  Freq: 9.99993e-06
  0x00007f56e0854ee9:   mov    %rax,%rsi
  0x00007f56e0854eec:   jmp    0x00007f56e0854ef1           ;*invokevirtual next {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@64 (line 566)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
 ;; B62: #	out( B63 ) <- in( B35 )  Freq: 4.99947e-05
  0x00007f56e0854eee:   mov    %rax,%rsi                    ;*anewarray {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@3 (line 21)
 ;; B63: #	out( N1 ) <- in( B60 B61 B62 )  Freq: 5.99956e-05
  0x00007f56e0854ef1:   vzeroupper 
  0x00007f56e0854ef4:   add    $0x30,%rsp
  0x00007f56e0854ef8:   pop    %rbp
  0x00007f56e0854ef9:   jmpq   0x00007f56e07fa8a0           ;*getstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@19 (line 23)
                                                            ;   {runtime_call _rethrow_Java}
  0x00007f56e0854efe:   movabs $0x7f56e0854bce,%r10         ;   {internal_word}
  0x00007f56e0854f08:   mov    %r10,0x4b8(%r15)
  0x00007f56e0854f0f:   jmpq   0x00007f56e07bdd20           ;   {runtime_call SafepointBlob}
  0x00007f56e0854f14:   callq  Stub::nmethod_entry_barrier  ;   {runtime_call StubRoutines (final stubs)}
  0x00007f56e0854f19:   jmpq   0x00007f56e085473a
  0x00007f56e0854f1e:   hlt    
  0x00007f56e0854f1f:   hlt    
[Stub Code]
  0x00007f56e0854f20:   movabs $0x0,%rbx                    ;   {no_reloc}
  0x00007f56e0854f2a:   jmpq   0x00007f56e0854f2a           ;   {runtime_call}
  0x00007f56e0854f2f:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00007f56e0854f39:   jmpq   0x00007f56e0854f39           ;   {runtime_call}
[Exception Handler]
  0x00007f56e0854f3e:   jmpq   0x00007f56e0711aa0           ;   {runtime_call ExceptionBlob}
[Deopt Handler Code]
  0x00007f56e0854f43:   callq  0x00007f56e0854f48
  0x00007f56e0854f48:   subq   $0x5,(%rsp)
  0x00007f56e0854f4d:   jmpq   0x00007f56e07bf1e0           ;   {runtime_call DeoptimizationBlob}
  0x00007f56e0854f52:   hlt    
  0x00007f56e0854f53:   hlt    
  0x00007f56e0854f54:   hlt    
  0x00007f56e0854f55:   hlt    
  0x00007f56e0854f56:   hlt    
  0x00007f56e0854f57:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007f56e0854f58:   0x000000011f0a4c40 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f0a4c40}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007f56e0854f60:   0x000000002608b400 'SimpleValue'[]
  0x00007f56e0854f68:   0x00007f5684715d20 {method} {0x00007f5684715d20} 'test' '()I' in 'TestFlatArrayVectorization'
  0x00007f56e0854f70:   0x000000002608c000 'SimpleValue'[]
  0x00007f56e0854f78:   0x00007f56846f4248 {method} {0x00007f56846f4248} 'nextInt' '(I)I' in 'java/util/Random'
  0x00007f56e0854f80:   0x00007f5684716400 {method} {0x00007f5684716400} '<init>' '(I)V' in 'SimpleValue'
  0x00007f56e0854f88:   0x00007f5684000638 {method} {0x00007f5684000638} '<init>' '()V' in 'java/lang/Object'
  0x00007f56e0854f90:   0x00000000260e8f00 'java/util/Random'
  0x00007f56e0854f98:   0x00007f56846f3e98 {method} {0x00007f56846f3e98} 'next' '(I)I' in 'java/util/Random'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007f56e085471f offset=ffffffff bits=0):
PcDesc(pc=0x00007f56e0854896 offset=176 bits=0):
   TestFlatArrayVectorization::test@6 (line 21)
PcDesc(pc=0x00007f56e085489a offset=17a bits=0):
   TestFlatArrayVectorization::test@31 (line 23)
PcDesc(pc=0x00007f56e085489e offset=17e bits=0):
   TestFlatArrayVectorization::test@15 (line 22)
PcDesc(pc=0x00007f56e08548a9 offset=189 bits=0):
   TestFlatArrayVectorization::test@16 (line 22)
PcDesc(pc=0x00007f56e08548d0 offset=1b0 bits=0):
   TestFlatArrayVectorization::test@31 (line 23)
PcDesc(pc=0x00007f56e08548ee offset=1ce bits=0):
   TestFlatArrayVectorization::test@19 (line 23)
PcDesc(pc=0x00007f56e08548f2 offset=1d2 bits=0):
   TestFlatArrayVectorization::test@31 (line 23)
PcDesc(pc=0x00007f56e08548fb offset=1db bits=0):
   TestFlatArrayVectorization::test@16 (line 22)
PcDesc(pc=0x00007f56e0854943 offset=223 bits=0):
   TestFlatArrayVectorization::test@19 (line 23)
PcDesc(pc=0x00007f56e0854a29 offset=309 bits=0):
   TestFlatArrayVectorization::test@31 (line 23)
PcDesc(pc=0x00007f56e0854a36 offset=316 bits=0):
   TestFlatArrayVectorization::test@6 (line 21)
PcDesc(pc=0x00007f56e0854a3d offset=31d bits=1):
   TestFlatArrayVectorization::test@35 (line 22)  reexecute=true
   Locals
    - l0: reg r8 [16],int
PcDesc(pc=0x00007f56e0854a40 offset=320 bits=0):
   TestFlatArrayVectorization::test@35 (line 22)
PcDesc(pc=0x00007f56e0854ab8 offset=398 bits=0):
   TestFlatArrayVectorization::test@19 (line 23)
PcDesc(pc=0x00007f56e0854ad1 offset=3b1 bits=0):
   TestFlatArrayVectorization::test@31 (line 23)
PcDesc(pc=0x00007f56e0854ad5 offset=3b5 bits=0):
   TestFlatArrayVectorization::test@32 (line 22)
PcDesc(pc=0x00007f56e0854ada offset=3ba bits=0):
   TestFlatArrayVectorization::test@16 (line 22)
PcDesc(pc=0x00007f56e0854af4 offset=3d4 bits=0):
   TestFlatArrayVectorization::test@19 (line 23)
PcDesc(pc=0x00007f56e0854af9 offset=3d9 bits=0):
   TestFlatArrayVectorization::test@31 (line 23)
PcDesc(pc=0x00007f56e0854afc offset=3dc bits=0):
   TestFlatArrayVectorization::test@32 (line 22)
PcDesc(pc=0x00007f56e0854b05 offset=3e5 bits=0):
   TestFlatArrayVectorization::test@16 (line 22)
PcDesc(pc=0x00007f56e0854b13 offset=3f3 bits=0):
   TestFlatArrayVectorization::test@41 (line 25)
PcDesc(pc=0x00007f56e0854b1b offset=3fb bits=0):
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0854b29 offset=409 bits=0):
   java.util.Random::nextInt@1 (line 557)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0854b2d offset=40d bits=0):
   TestFlatArrayVectorization::test@41 (line 25)
PcDesc(pc=0x00007f56e0854b44 offset=424 bits=0):
   java.util.Random::nextInt@17 (line 559)
   Locals
    - l0: reg rbp [10],narrowoop
    - l1: 2047
    - l2: empty
    - l3: empty
    - l4: empty
   TestFlatArrayVectorization::test@47 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[0],oop
PcDesc(pc=0x00007f56e0854b4c offset=42c bits=0):
   java.util.Random::nextInt@17 (line 559)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0854b91 offset=471 bits=0):
   java.util.Random::nextInt@52 (line 565)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0854b9d offset=47d bits=0):
   java.util.Random::nextInt@58 (line 565)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0854bc6 offset=4a6 bits=0):
   TestFlatArrayVectorization::test@50 (line 25)
PcDesc(pc=0x00007f56e0854be0 offset=4c0 bits=0):
   java.util.Random::nextInt@61 (line 566)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0854bf4 offset=4d4 bits=0):
   java.util.Random::nextInt@64 (line 566)
   Locals
    - l0: reg rbp [10],narrowoop
    - l1: 2047
    - l2: empty
    - l3: 2046
    - l4: empty
   TestFlatArrayVectorization::test@47 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[0],oop
PcDesc(pc=0x00007f56e0854bfc offset=4dc bits=0):
   TestFlatArrayVectorization::test@6 (line 21)
PcDesc(pc=0x00007f56e0854c03 offset=4e3 bits=1):
   java.util.Random::nextInt@69 (line 566)  reexecute=true
   Locals
    - l0: reg rbp [10],narrowoop
    - l1: 2047
    - l2: empty
    - l3: 2046
    - l4: reg rax [0],int
   TestFlatArrayVectorization::test@47 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[0],oop
PcDesc(pc=0x00007f56e0854c06 offset=4e6 bits=0):
   java.util.Random::nextInt@69 (line 566)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0854c4b offset=52b bits=0):
   java.util.Random::nextInt@52 (line 565)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0854c57 offset=537 bits=0):
   java.util.Random::nextInt@58 (line 565)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0854d04 offset=5e4 bits=0):
   TestFlatArrayVectorization::test@6 (line 21)
PcDesc(pc=0x00007f56e0854d12 offset=5f2 bits=0):
   TestFlatArrayVectorization::test@12 (line 22)
PcDesc(pc=0x00007f56e0854d1b offset=5fb bits=0):
   TestFlatArrayVectorization::test@15 (line 22)
PcDesc(pc=0x00007f56e0854d40 offset=620 bits=0):
   TestFlatArrayVectorization::test@12 (line 22)
PcDesc(pc=0x00007f56e0854d60 offset=640 bits=4):
   TestFlatArrayVectorization::test@3 (line 21)
   Locals
    - l0: empty
PcDesc(pc=0x00007f56e0854d68 offset=648 bits=0):
   TestFlatArrayVectorization::test@3 (line 21)
PcDesc(pc=0x00007f56e0854d80 offset=660 bits=0):
   TestFlatArrayVectorization::test@47 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: empty
    - @1: nullptr
    - @2: 2047
PcDesc(pc=0x00007f56e0854d9c offset=67c bits=0):
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0854db4 offset=694 bits=0):
   TestFlatArrayVectorization::test@50 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],oop
    - @1: stack[0]
PcDesc(pc=0x00007f56e0854dd0 offset=6b0 bits=0):
   TestFlatArrayVectorization::test@16 (line 22)
PcDesc(pc=0x00007f56e0854de0 offset=6c0 bits=1):
   TestFlatArrayVectorization::test@16 (line 22)  reexecute=true
   Locals
    - l0: 0
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
PcDesc(pc=0x00007f56e0854dfc offset=6dc bits=0):
   TestFlatArrayVectorization::test@16 (line 22)
PcDesc(pc=0x00007f56e0854e7b offset=75b bits=0):
   TestFlatArrayVectorization::test@6 (line 21)
PcDesc(pc=0x00007f56e0854e94 offset=774 bits=0):
   TestFlatArrayVectorization::test@15 (line 22)
   Locals
    - l0: empty
   Expression stack
    - @0: empty
    - @1: nullptr
PcDesc(pc=0x00007f56e0854eb0 offset=790 bits=0):
   TestFlatArrayVectorization::test@15 (line 22)
PcDesc(pc=0x00007f56e0854ec8 offset=7a8 bits=0):
   TestFlatArrayVectorization::test@50 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],oop
    - @1: stack[0]
PcDesc(pc=0x00007f56e0854ee4 offset=7c4 bits=0):
   TestFlatArrayVectorization::test@3 (line 21)
PcDesc(pc=0x00007f56e0854ee9 offset=7c9 bits=0):
   java.util.Random::nextInt@17 (line 559)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0854eee offset=7ce bits=0):
   java.util.Random::nextInt@64 (line 566)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0854ef1 offset=7d1 bits=0):
   TestFlatArrayVectorization::test@3 (line 21)
PcDesc(pc=0x00007f56e0854efe offset=7de bits=0):
   TestFlatArrayVectorization::test@19 (line 23)
PcDesc(pc=0x00007f56e0854f59 offset=839 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 10 OopMaps

ImmutableOopMap {rcx=Oop r13=Oop } pc offsets: 797 
ImmutableOopMap {rbp=NarrowOop [0]=Oop [16]=Oop } pc offsets: 1060 1236 1251 
ImmutableOopMap {} pc offsets: 1600 1632 
ImmutableOopMap {rbp=Oop } pc offsets: 1684 
ImmutableOopMap {} pc offsets: 1728 1908 
ImmutableOopMap {rbp=Oop } pc offsets: 1960 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007f56e0854896 offset=176):
   TestFlatArrayVectorization::test@6 (line 21)
ScopeDesc(pc=0x00007f56e085489a offset=17a):
   TestFlatArrayVectorization::test@31 (line 23)
ScopeDesc(pc=0x00007f56e085489e offset=17e):
   TestFlatArrayVectorization::test@15 (line 22)
ScopeDesc(pc=0x00007f56e08548a9 offset=189):
   TestFlatArrayVectorization::test@16 (line 22)
ScopeDesc(pc=0x00007f56e08548d0 offset=1b0):
   TestFlatArrayVectorization::test@31 (line 23)
ScopeDesc(pc=0x00007f56e08548ee offset=1ce):
   TestFlatArrayVectorization::test@19 (line 23)
ScopeDesc(pc=0x00007f56e08548f2 offset=1d2):
   TestFlatArrayVectorization::test@31 (line 23)
ScopeDesc(pc=0x00007f56e08548fb offset=1db):
   TestFlatArrayVectorization::test@16 (line 22)
ScopeDesc(pc=0x00007f56e0854943 offset=223):
   TestFlatArrayVectorization::test@19 (line 23)
ScopeDesc(pc=0x00007f56e0854a29 offset=309):
   TestFlatArrayVectorization::test@31 (line 23)
ScopeDesc(pc=0x00007f56e0854a36 offset=316):
   TestFlatArrayVectorization::test@6 (line 21)
ScopeDesc(pc=0x00007f56e0854a3d offset=31d):
   TestFlatArrayVectorization::test@35 (line 22)  reexecute=true
   Locals
    - l0: reg r8 [16],int
ScopeDesc(pc=0x00007f56e0854a40 offset=320):
   TestFlatArrayVectorization::test@35 (line 22)
ScopeDesc(pc=0x00007f56e0854ab8 offset=398):
   TestFlatArrayVectorization::test@19 (line 23)
ScopeDesc(pc=0x00007f56e0854ad1 offset=3b1):
   TestFlatArrayVectorization::test@31 (line 23)
ScopeDesc(pc=0x00007f56e0854ad5 offset=3b5):
   TestFlatArrayVectorization::test@32 (line 22)
ScopeDesc(pc=0x00007f56e0854ada offset=3ba):
   TestFlatArrayVectorization::test@16 (line 22)
ScopeDesc(pc=0x00007f56e0854af4 offset=3d4):
   TestFlatArrayVectorization::test@19 (line 23)
ScopeDesc(pc=0x00007f56e0854af9 offset=3d9):
   TestFlatArrayVectorization::test@31 (line 23)
ScopeDesc(pc=0x00007f56e0854afc offset=3dc):
   TestFlatArrayVectorization::test@32 (line 22)
ScopeDesc(pc=0x00007f56e0854b05 offset=3e5):
   TestFlatArrayVectorization::test@16 (line 22)
ScopeDesc(pc=0x00007f56e0854b13 offset=3f3):
   TestFlatArrayVectorization::test@41 (line 25)
ScopeDesc(pc=0x00007f56e0854b1b offset=3fb):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0854b29 offset=409):
   java.util.Random::nextInt@1 (line 557)
ScopeDesc(pc=0x00007f56e0854b29 offset=409):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0854b2d offset=40d):
   TestFlatArrayVectorization::test@41 (line 25)
ScopeDesc(pc=0x00007f56e0854b44 offset=424):
   java.util.Random::nextInt@17 (line 559)
   Locals
    - l0: reg rbp [10],narrowoop
    - l1: 2047
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f56e0854b44 offset=424):
   TestFlatArrayVectorization::test@47 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[0],oop
ScopeDesc(pc=0x00007f56e0854b4c offset=42c):
   java.util.Random::nextInt@17 (line 559)
ScopeDesc(pc=0x00007f56e0854b4c offset=42c):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0854b91 offset=471):
   java.util.Random::nextInt@52 (line 565)
ScopeDesc(pc=0x00007f56e0854b91 offset=471):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0854b9d offset=47d):
   java.util.Random::nextInt@58 (line 565)
ScopeDesc(pc=0x00007f56e0854b9d offset=47d):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0854bc6 offset=4a6):
   TestFlatArrayVectorization::test@50 (line 25)
ScopeDesc(pc=0x00007f56e0854be0 offset=4c0):
   java.util.Random::nextInt@61 (line 566)
ScopeDesc(pc=0x00007f56e0854be0 offset=4c0):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0854bf4 offset=4d4):
   java.util.Random::nextInt@64 (line 566)
   Locals
    - l0: reg rbp [10],narrowoop
    - l1: 2047
    - l2: empty
    - l3: 2046
    - l4: empty
ScopeDesc(pc=0x00007f56e0854bf4 offset=4d4):
   TestFlatArrayVectorization::test@47 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[0],oop
ScopeDesc(pc=0x00007f56e0854bfc offset=4dc):
   TestFlatArrayVectorization::test@6 (line 21)
ScopeDesc(pc=0x00007f56e0854c03 offset=4e3):
   java.util.Random::nextInt@69 (line 566)  reexecute=true
   Locals
    - l0: reg rbp [10],narrowoop
    - l1: 2047
    - l2: empty
    - l3: 2046
    - l4: reg rax [0],int
ScopeDesc(pc=0x00007f56e0854c03 offset=4e3):
   TestFlatArrayVectorization::test@47 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[0],oop
ScopeDesc(pc=0x00007f56e0854c06 offset=4e6):
   java.util.Random::nextInt@69 (line 566)
ScopeDesc(pc=0x00007f56e0854c06 offset=4e6):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0854c4b offset=52b):
   java.util.Random::nextInt@52 (line 565)
ScopeDesc(pc=0x00007f56e0854c4b offset=52b):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0854c57 offset=537):
   java.util.Random::nextInt@58 (line 565)
ScopeDesc(pc=0x00007f56e0854c57 offset=537):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0854d04 offset=5e4):
   TestFlatArrayVectorization::test@6 (line 21)
ScopeDesc(pc=0x00007f56e0854d12 offset=5f2):
   TestFlatArrayVectorization::test@12 (line 22)
ScopeDesc(pc=0x00007f56e0854d1b offset=5fb):
   TestFlatArrayVectorization::test@15 (line 22)
ScopeDesc(pc=0x00007f56e0854d40 offset=620):
   TestFlatArrayVectorization::test@12 (line 22)
ScopeDesc(pc=0x00007f56e0854d60 offset=640):
   TestFlatArrayVectorization::test@3 (line 21)
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f56e0854d68 offset=648):
   TestFlatArrayVectorization::test@3 (line 21)
ScopeDesc(pc=0x00007f56e0854d80 offset=660):
   TestFlatArrayVectorization::test@47 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: empty
    - @1: nullptr
    - @2: 2047
ScopeDesc(pc=0x00007f56e0854d9c offset=67c):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0854db4 offset=694):
   TestFlatArrayVectorization::test@50 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],oop
    - @1: stack[0]
ScopeDesc(pc=0x00007f56e0854dd0 offset=6b0):
   TestFlatArrayVectorization::test@16 (line 22)
ScopeDesc(pc=0x00007f56e0854de0 offset=6c0):
   TestFlatArrayVectorization::test@16 (line 22)  reexecute=true
   Locals
    - l0: 0
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
ScopeDesc(pc=0x00007f56e0854dfc offset=6dc):
   TestFlatArrayVectorization::test@16 (line 22)
ScopeDesc(pc=0x00007f56e0854e7b offset=75b):
   TestFlatArrayVectorization::test@6 (line 21)
ScopeDesc(pc=0x00007f56e0854e94 offset=774):
   TestFlatArrayVectorization::test@15 (line 22)
   Locals
    - l0: empty
   Expression stack
    - @0: empty
    - @1: nullptr
ScopeDesc(pc=0x00007f56e0854eb0 offset=790):
   TestFlatArrayVectorization::test@15 (line 22)
ScopeDesc(pc=0x00007f56e0854ec8 offset=7a8):
   TestFlatArrayVectorization::test@50 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],oop
    - @1: stack[0]
ScopeDesc(pc=0x00007f56e0854ee4 offset=7c4):
   TestFlatArrayVectorization::test@3 (line 21)
ScopeDesc(pc=0x00007f56e0854ee9 offset=7c9):
   java.util.Random::nextInt@17 (line 559)
ScopeDesc(pc=0x00007f56e0854ee9 offset=7c9):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0854eee offset=7ce):
   java.util.Random::nextInt@64 (line 566)
ScopeDesc(pc=0x00007f56e0854eee offset=7ce):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0854ef1 offset=7d1):
   TestFlatArrayVectorization::test@3 (line 21)
ScopeDesc(pc=0x00007f56e0854efe offset=7de):
   TestFlatArrayVectorization::test@19 (line 23)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007f56e0854590: 6068
relocInfo@0x00007f56e0854590 [type=12(metadata) addr=0x00007f56e0854788 offset=104] | [metadata_addr=0x00007f56e085478a *=0x000000002608b400 offset=0]metadata_value=0x000000002608b400: 'SimpleValue'[]
         @0x00007f56e0854592: 78016314
relocInfo@0x00007f56e0854594 [type=12(metadata) addr=0x00007f56e085479c offset=20 format=3 data=1] | [metadata_addr=0x00007f56e0854f60 *=0x000000002608b400 offset=0]metadata_value=0x000000002608b400: 'SimpleValue'[]
         @0x00007f56e0854596: 0874
relocInfo@0x00007f56e0854596 [type=1(oop) addr=0x00007f56e0854810 offset=116] | [oop_addr=0x00007f56e0854812 *=0x000000011f7e5538 offset=0]
         @0x00007f56e0854598: 7c03e67a49807f56390a
relocInfo@0x00007f56e08545a0 [type=7(external_word) addr=0x00007f56e085481a offset=10 format=1 data={e67a49807f56}] | [target=0x00007f56e67a4980]
         @0x00007f56e08545a2: 7c03e5be95387f56380d
relocInfo@0x00007f56e08545aa [type=7(external_word) addr=0x00007f56e0854827 offset=13 data={e5be95387f56}] | [target=0x00007f56e5be9538]
         @0x00007f56e08545ac: 310e
relocInfo@0x00007f56e08545ac [type=6(runtime_call) addr=0x00007f56e0854835 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08545ae: 7c03e5be95787f56380f
relocInfo@0x00007f56e08545b6 [type=7(external_word) addr=0x00007f56e0854844 offset=15 data={e5be95787f56}] | [target=0x00007f56e5be9578]
         @0x00007f56e08545b8: 310e
relocInfo@0x00007f56e08545b8 [type=6(runtime_call) addr=0x00007f56e0854852 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08545ba: 080d
relocInfo@0x00007f56e08545ba [type=1(oop) addr=0x00007f56e085485f offset=13] | [oop_addr=0x00007f56e0854861 *=0x000000011f7e5538 offset=0]
         @0x00007f56e08545bc: 78036361
relocInfo@0x00007f56e08545be [type=12(metadata) addr=0x00007f56e08548c0 offset=97 format=3 data=3] | [metadata_addr=0x00007f56e0854f70 *=0x000000002608c000 offset=0]metadata_value=0x000000002608c000: 'SimpleValue'[]
         @0x00007f56e08545c0: 7c03e07e4c207f5639a3
relocInfo@0x00007f56e08545c8 [type=7(external_word) addr=0x00007f56e0854963 offset=163 format=1 data={e07e4c207f56}] | [target=0x00007f56e07e4c20]
         @0x00007f56e08545ca: 7c03e07e4c207f563912
relocInfo@0x00007f56e08545d2 [type=7(external_word) addr=0x00007f56e0854975 offset=18 format=1 data={e07e4c207f56}] | [target=0x00007f56e07e4c20]
         @0x00007f56e08545d4: 7c03e07e4c207f563918
relocInfo@0x00007f56e08545dc [type=7(external_word) addr=0x00007f56e085498d offset=24 format=1 data={e07e4c207f56}] | [target=0x00007f56e07e4c20]
         @0x00007f56e08545de: 7c03e07e4c207f563918
relocInfo@0x00007f56e08545e6 [type=7(external_word) addr=0x00007f56e08549a5 offset=24 format=1 data={e07e4c207f56}] | [target=0x00007f56e07e4c20]
         @0x00007f56e08545e8: 7c03e07e4c207f563918
relocInfo@0x00007f56e08545f0 [type=7(external_word) addr=0x00007f56e08549bd offset=24 format=1 data={e07e4c207f56}] | [target=0x00007f56e07e4c20]
         @0x00007f56e08545f2: 7c03e07e4c207f563918
relocInfo@0x00007f56e08545fa [type=7(external_word) addr=0x00007f56e08549d5 offset=24 format=1 data={e07e4c207f56}] | [target=0x00007f56e07e4c20]
         @0x00007f56e08545fc: 7c03e07e4c207f56391b
relocInfo@0x00007f56e0854604 [type=7(external_word) addr=0x00007f56e08549f0 offset=27 format=1 data={e07e4c207f56}] | [target=0x00007f56e07e4c20]
         @0x00007f56e0854606: 7c03e07e4c207f56391b
relocInfo@0x00007f56e085460e [type=7(external_word) addr=0x00007f56e0854a0b offset=27 format=1 data={e07e4c207f56}] | [target=0x00007f56e07e4c20]
         @0x00007f56e0854610: 5032
relocInfo@0x00007f56e0854610 [type=10(poll) addr=0x00007f56e0854a3d offset=50]
         @0x00007f56e0854612: 7c03e07e4c207f563981
relocInfo@0x00007f56e085461a [type=7(external_word) addr=0x00007f56e0854abe offset=129 format=1 data={e07e4c207f56}] | [target=0x00007f56e07e4c20]
         @0x00007f56e085461c: 0847
relocInfo@0x00007f56e085461c [type=1(oop) addr=0x00007f56e0854b05 offset=71] | [oop_addr=0x00007f56e0854b07 *=0x000000011f7e5538 offset=0]
         @0x00007f56e085461e: 193a
relocInfo@0x00007f56e085461e [type=3(opt_virtual_call) addr=0x00007f56e0854b3f offset=58 format=1] | [destination=0x00007f56e07ae020 metadata=0x0000000000000000]
         @0x00007f56e0854620: 8005
relocInfo@0x00007f56e0854620 [type=16(post_call_nop) addr=0x00007f56e0854b44 offset=5]
         @0x00007f56e0854622: 7803636c
relocInfo@0x00007f56e0854624 [type=12(metadata) addr=0x00007f56e0854bb0 offset=108 format=3 data=3] | [metadata_addr=0x00007f56e0854f70 *=0x000000002608c000 offset=0]metadata_value=0x000000002608c000: 'SimpleValue'[]
         @0x00007f56e0854626: 581e
relocInfo@0x00007f56e0854626 [type=11(poll_return) addr=0x00007f56e0854bce offset=30]
         @0x00007f56e0854628: 1921
relocInfo@0x00007f56e0854628 [type=3(opt_virtual_call) addr=0x00007f56e0854bef offset=33 format=1] | [destination=0x00007f56e07ae020 metadata=0x0000000000000000]
         @0x00007f56e085462a: 8005
relocInfo@0x00007f56e085462a [type=16(post_call_nop) addr=0x00007f56e0854bf4 offset=5]
         @0x00007f56e085462c: 500f
relocInfo@0x00007f56e085462c [type=10(poll) addr=0x00007f56e0854c03 offset=15]
         @0x00007f56e085462e: 0859
relocInfo@0x00007f56e085462e [type=1(oop) addr=0x00007f56e0854c5c offset=89] | [oop_addr=0x00007f56e0854c5e *=0x000000011f7e5538 offset=0]
         @0x00007f56e0854630: 7c03e67a49807f56391e
relocInfo@0x00007f56e0854638 [type=7(external_word) addr=0x00007f56e0854c7a offset=30 format=1 data={e67a49807f56}] | [target=0x00007f56e67a4980]
         @0x00007f56e085463a: 7c03e5be95e87f56380d
relocInfo@0x00007f56e0854642 [type=7(external_word) addr=0x00007f56e0854c87 offset=13 data={e5be95e87f56}] | [target=0x00007f56e5be95e8]
         @0x00007f56e0854644: 310e
relocInfo@0x00007f56e0854644 [type=6(runtime_call) addr=0x00007f56e0854c95 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e0854646: 8067
relocInfo@0x00007f56e0854646 [type=16(post_call_nop) addr=0x00007f56e0854cfc offset=103]
         @0x00007f56e0854648: 0808
relocInfo@0x00007f56e0854648 [type=1(oop) addr=0x00007f56e0854d04 offset=8] | [oop_addr=0x00007f56e0854d06 *=0x000000011f7e5538 offset=0]
         @0x00007f56e085464a: 7c03e67a49807f563917
relocInfo@0x00007f56e0854652 [type=7(external_word) addr=0x00007f56e0854d1b offset=23 format=1 data={e67a49807f56}] | [target=0x00007f56e67a4980]
         @0x00007f56e0854654: 7c03e5be95e87f56380d
relocInfo@0x00007f56e085465c [type=7(external_word) addr=0x00007f56e0854d28 offset=13 data={e5be95e87f56}] | [target=0x00007f56e5be95e8]
         @0x00007f56e085465e: 310e
relocInfo@0x00007f56e085465e [type=6(runtime_call) addr=0x00007f56e0854d36 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e0854660: 6017
relocInfo@0x00007f56e0854660 [type=12(metadata) addr=0x00007f56e0854d4d offset=23] | [metadata_addr=0x00007f56e0854d4f *=0x000000002608b400 offset=0]metadata_value=0x000000002608b400: 'SimpleValue'[]
         @0x00007f56e0854662: 310e
relocInfo@0x00007f56e0854662 [type=6(runtime_call) addr=0x00007f56e0854d5b offset=14 format=1] | [destination=0x00007f56e06b7320]
         @0x00007f56e0854664: 8005
relocInfo@0x00007f56e0854664 [type=16(post_call_nop) addr=0x00007f56e0854d60 offset=5]
         @0x00007f56e0854666: 311b
relocInfo@0x00007f56e0854666 [type=6(runtime_call) addr=0x00007f56e0854d7b offset=27 format=1] | [destination=0x00007f56e07beea0]
         @0x00007f56e0854668: 8005
relocInfo@0x00007f56e0854668 [type=16(post_call_nop) addr=0x00007f56e0854d80 offset=5]
         @0x00007f56e085466a: 7c03e593d7507f563808
relocInfo@0x00007f56e0854672 [type=7(external_word) addr=0x00007f56e0854d88 offset=8 data={e593d7507f56}] | [target=0x00007f56e593d750]
         @0x00007f56e0854674: 310e
relocInfo@0x00007f56e0854674 [type=6(runtime_call) addr=0x00007f56e0854d96 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e0854676: 3119
relocInfo@0x00007f56e0854676 [type=6(runtime_call) addr=0x00007f56e0854daf offset=25 format=1] | [destination=0x00007f56e07beea0]
         @0x00007f56e0854678: 8005
relocInfo@0x00007f56e0854678 [type=16(post_call_nop) addr=0x00007f56e0854db4 offset=5]
         @0x00007f56e085467a: 7c03e593d7507f563808
relocInfo@0x00007f56e0854682 [type=7(external_word) addr=0x00007f56e0854dbc offset=8 data={e593d7507f56}] | [target=0x00007f56e593d750]
         @0x00007f56e0854684: 310e
relocInfo@0x00007f56e0854684 [type=6(runtime_call) addr=0x00007f56e0854dca offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e0854686: 3111
relocInfo@0x00007f56e0854686 [type=6(runtime_call) addr=0x00007f56e0854ddb offset=17 format=1] | [destination=0x00007f56e07beea0]
         @0x00007f56e0854688: 8005
relocInfo@0x00007f56e0854688 [type=16(post_call_nop) addr=0x00007f56e0854de0 offset=5]
         @0x00007f56e085468a: 7c03e593d7507f563808
relocInfo@0x00007f56e0854692 [type=7(external_word) addr=0x00007f56e0854de8 offset=8 data={e593d7507f56}] | [target=0x00007f56e593d750]
         @0x00007f56e0854694: 310e
relocInfo@0x00007f56e0854694 [type=6(runtime_call) addr=0x00007f56e0854df6 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e0854696: 7c03e5bc43487f563806
relocInfo@0x00007f56e085469e [type=7(external_word) addr=0x00007f56e0854dfc offset=6 data={e5bc43487f56}] | [target=0x00007f56e5bc4348]
         @0x00007f56e08546a0: 310e
relocInfo@0x00007f56e08546a0 [type=6(runtime_call) addr=0x00007f56e0854e0a offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08546a2: 7c03e5bc43487f563806
relocInfo@0x00007f56e08546aa [type=7(external_word) addr=0x00007f56e0854e10 offset=6 data={e5bc43487f56}] | [target=0x00007f56e5bc4348]
         @0x00007f56e08546ac: 310e
relocInfo@0x00007f56e08546ac [type=6(runtime_call) addr=0x00007f56e0854e1e offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08546ae: 7c03e5bc43487f563806
relocInfo@0x00007f56e08546b6 [type=7(external_word) addr=0x00007f56e0854e24 offset=6 data={e5bc43487f56}] | [target=0x00007f56e5bc4348]
         @0x00007f56e08546b8: 310e
relocInfo@0x00007f56e08546b8 [type=6(runtime_call) addr=0x00007f56e0854e32 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08546ba: 7c03e5bc43487f563806
relocInfo@0x00007f56e08546c2 [type=7(external_word) addr=0x00007f56e0854e38 offset=6 data={e5bc43487f56}] | [target=0x00007f56e5bc4348]
         @0x00007f56e08546c4: 310e
relocInfo@0x00007f56e08546c4 [type=6(runtime_call) addr=0x00007f56e0854e46 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08546c6: 7c03e5bc43487f563806
relocInfo@0x00007f56e08546ce [type=7(external_word) addr=0x00007f56e0854e4c offset=6 data={e5bc43487f56}] | [target=0x00007f56e5bc4348]
         @0x00007f56e08546d0: 310e
relocInfo@0x00007f56e08546d0 [type=6(runtime_call) addr=0x00007f56e0854e5a offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08546d2: 8019
relocInfo@0x00007f56e08546d2 [type=16(post_call_nop) addr=0x00007f56e0854e73 offset=25]
         @0x00007f56e08546d4: 311c
relocInfo@0x00007f56e08546d4 [type=6(runtime_call) addr=0x00007f56e0854e8f offset=28 format=1] | [destination=0x00007f56e07beea0]
         @0x00007f56e08546d6: 8005
relocInfo@0x00007f56e08546d6 [type=16(post_call_nop) addr=0x00007f56e0854e94 offset=5]
         @0x00007f56e08546d8: 7c03e593d7507f563808
relocInfo@0x00007f56e08546e0 [type=7(external_word) addr=0x00007f56e0854e9c offset=8 data={e593d7507f56}] | [target=0x00007f56e593d750]
         @0x00007f56e08546e2: 310e
relocInfo@0x00007f56e08546e2 [type=6(runtime_call) addr=0x00007f56e0854eaa offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08546e4: 3119
relocInfo@0x00007f56e08546e4 [type=6(runtime_call) addr=0x00007f56e0854ec3 offset=25 format=1] | [destination=0x00007f56e07beea0]
         @0x00007f56e08546e6: 8005
relocInfo@0x00007f56e08546e6 [type=16(post_call_nop) addr=0x00007f56e0854ec8 offset=5]
         @0x00007f56e08546e8: 7c03e593d7507f563808
relocInfo@0x00007f56e08546f0 [type=7(external_word) addr=0x00007f56e0854ed0 offset=8 data={e593d7507f56}] | [target=0x00007f56e593d750]
         @0x00007f56e08546f2: 310e
relocInfo@0x00007f56e08546f2 [type=6(runtime_call) addr=0x00007f56e0854ede offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08546f4: 311b
relocInfo@0x00007f56e08546f4 [type=6(runtime_call) addr=0x00007f56e0854ef9 offset=27 format=1] | [destination=0x00007f56e07fa8a0]
         @0x00007f56e08546f6: 7b304005
relocInfo@0x00007f56e08546f8 [type=8(internal_word) addr=0x00007f56e0854efe offset=5 data=816] | [target=0x00007f56e0854bce]
         @0x00007f56e08546fa: 3111
relocInfo@0x00007f56e08546fa [type=6(runtime_call) addr=0x00007f56e0854f0f offset=17 format=1] | [destination=0x00007f56e07bdd20]
         @0x00007f56e08546fc: 3105
relocInfo@0x00007f56e08546fc [type=6(runtime_call) addr=0x00007f56e0854f14 offset=5 format=1] | [destination=0x00007f56e0718ee0]
         @0x00007f56e08546fe: 000c
relocInfo@0x00007f56e08546fe [type=0(none) addr=0x00007f56e0854f20 offset=12]
         @0x00007f56e0854700: 7c01fbe12800
relocInfo@0x00007f56e0854704 [type=5(static_stub) addr=0x00007f56e0854f20 offset=0 data=-1055] | [static_call=0x00007f56e0854b3f]
         @0x00007f56e0854706: 6000
relocInfo@0x00007f56e0854706 [type=12(metadata) addr=0x00007f56e0854f20 offset=0] | [metadata_addr=0x00007f56e0854f22 *=0x0000000000000000 offset=0]
         @0x00007f56e0854708: 310a
relocInfo@0x00007f56e0854708 [type=6(runtime_call) addr=0x00007f56e0854f2a offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007f56e085470a: 7c01fb312805
relocInfo@0x00007f56e085470e [type=5(static_stub) addr=0x00007f56e0854f2f offset=5 data=-1231] | [static_call=0x00007f56e0854bef]
         @0x00007f56e0854710: 6000
relocInfo@0x00007f56e0854710 [type=12(metadata) addr=0x00007f56e0854f2f offset=0] | [metadata_addr=0x00007f56e0854f31 *=0x0000000000000000 offset=0]
         @0x00007f56e0854712: 310a
relocInfo@0x00007f56e0854712 [type=6(runtime_call) addr=0x00007f56e0854f39 offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007f56e0854714: 3105
relocInfo@0x00007f56e0854714 [type=6(runtime_call) addr=0x00007f56e0854f3e offset=5 format=1] | [destination=0x00007f56e0711aa0]
         @0x00007f56e0854716: 310f
relocInfo@0x00007f56e0854716 [type=6(runtime_call) addr=0x00007f56e0854f4d offset=15 format=1] | [destination=0x00007f56e07bf1e0]
         @0x00007f56e0854718: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type evol_method
  method  = *{method} {0x00007f5684715d20} 'test' '()I' in 'TestFlatArrayVectorization'
Dependency of type evol_method
  method  = {method} {0x00007f56846f4248} 'nextInt' '(I)I' in 'java/util/Random'
Dependency of type evol_method
  method  = {method} {0x00007f5684716400} '<init>' '(I)V' in 'SimpleValue'
Dependency of type evol_method
  method  = {method} {0x00007f5684000638} '<init>' '()V' in 'java/lang/Object'
Dependency of type unique_concrete_method_4
  context = java.util.Random
  method  = {method} {0x00007f56846f4248} 'nextInt' '(I)I' in 'java/util/Random'
  class   = java.util.Random
  method  = {method} {0x00007f56846f4248} 'nextInt' '(I)I' in 'java/util/Random'
   [nmethod<=klass]java.util.Random
Dependency of type unique_concrete_method_4
  context = java.util.Random
  method  = {method} {0x00007f56846f3e98} 'next' '(I)I' in 'java/util/Random'
  class   = java.util.Random
  method  = {method} {0x00007f56846f3e98} 'next' '(I)I' in 'java/util/Random'
   [nmethod<=klass]java.util.Random
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 72 bytes)
catch_pco = 1060 (pc=0x00007f56e0854b44, 1 entries)
  bci -1 at scope depth 0 -> pco 1993 (pc=0x00007f56e0854ee9)
catch_pco = 1236 (pc=0x00007f56e0854bf4, 1 entries)
  bci -1 at scope depth 0 -> pco 1998 (pc=0x00007f56e0854eee)
catch_pco = 1600 (pc=0x00007f56e0854d60, 1 entries)
  bci -1 at scope depth 0 -> pco 1988 (pc=0x00007f56e0854ee4)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable is empty
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 nullptr-oop
#1: 0x000000011f0a4c40 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f0a4c40}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 nullptr-oop
#1: 0x000000002608b400 'SimpleValue'[]
#2: 0x00007f5684715d20 {method} {0x00007f5684715d20} 'test' '()I' in 'TestFlatArrayVectorization'
#3: 0x000000002608c000 'SimpleValue'[]
#4: 0x00007f56846f4248 {method} {0x00007f56846f4248} 'nextInt' '(I)I' in 'java/util/Random'
#5: 0x00007f5684716400 {method} {0x00007f5684716400} '<init>' '(I)V' in 'SimpleValue'
#6: 0x00007f5684000638 {method} {0x00007f5684000638} '<init>' '()V' in 'java/lang/Object'
#7: 0x00000000260e8f00 'java/util/Random'
#8: 0x00007f56846f3e98 {method} {0x00007f56846f3e98} 'next' '(I)I' in 'java/util/Random'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
UNCOMMON TRAP method=TestFlatArrayVectorization.test()I  bci=16 pc=0x00007f56e0854de0, relative_pc=0x00000000000006c0, debug_id=0 compiler=c2 compile_id=64 (@0x00007f56e0854de0) thread=715018 reason=predicate action=maybe_recompile unloaded_class_index=-1 debug_id=0
DEOPT PACKING thread=0x00007f56dc02a6c0 vframeArray=0x00007f56dc6702e0
   Compiled frame (sp=0x00007f56e37e5800 unextended sp=0x00007f56e37e5800, fp=0x0000000000000800, real_fp=0x00007f56e37e5840, pc=0x00007f56e0854de0)
     nmethod2196   64             TestFlatArrayVectorization::test (55 bytes)
   Virtual frames (innermost/newest first):
      VFrame 0 (0x00007f566419f430) - TestFlatArrayVectorization.test()I - if_icmpge @ bci=16 

DEOPT UNPACKING thread=0x00007f56dc02a6c0 vframeArray=0x00007f56dc6702e0 mode=2
   Virtual frames (outermost/oldest first):
      VFrame 0 (0x00007f56dc6715c0) - TestFlatArrayVectorization.test()I - if_icmpge @ bci=16 sp=0x00007f56e37e57d0


============================= C2-compiled nmethod ==============================
# -- Old rsp -- Framesize: 64 --
#r591 rsp+60: in_preserve
#r590 rsp+56: return address
#r589 rsp+52: in_preserve
#r588 rsp+48: saved fp register
#r587 rsp+44: Fixed slot 3
#r586 rsp+40: Fixed slot 2
#r585 rsp+36: Fixed slot 1
#r584 rsp+32: Fixed slot 0
#r599 rsp+28: spill
#r598 rsp+24: spill
#r597 rsp+20: spill
#r596 rsp+16: spill
#r595 rsp+12: spill
#r594 rsp+ 8: spill
#r593 rsp+ 4: spill
#r592 rsp+ 0: spill
#
----------------------- MetaData before Compile_id = 65 ------------------------
{method}
 - this oop:          0x00007f5684715d20
 - method holder:     'TestFlatArrayVectorization'
 - constants:         0x00007f5684715860 constant pool [86]/operands[5] {0x00007f5684715860} for 'TestFlatArrayVectorization' cache=0x00007f5684716178
 - access:            0x9  public static value 
 - flags:             0x6080  queued_for_compilation has_loops_flag has_loops_flag_init 
 - name:              'test'
 - signature:         '()I'
 - max stack:         6
 - max locals:        1
 - size of params:    0
 - method size:       16
 - highest level:     4
 - vtable index:      -2
 - i2i entry:         0x00007f56e0697700
 - adapters:          AHE@0x00007f56dc24c250: 0x i2c: 0x00007f56e07acf60 c2i: 0x00007f56e07ad016 c2iVE: 0x00007f56e07ad016 c2iVROE: 0x00007f56e07ad016 c2iUE: 0x00007f56e07acff1 c2iUVE: 0x00007f56e07acff1 c2iNCI: 0x00007f56e07ad050
 - compiled entry           0x00007f56e07ad016
 - compiled inline entry    0x00007f56e07ad016
 - compiled inline ro entry 0x00007f56e07ad016
 - code size:         55
 - code start:        0x00007f5684715cd8
 - code end (excl):   0x00007f5684715d0f
 - method data:       0x00007f56847167e8
 - checked ex length: 0
 - linenumber start:  0x00007f5684715d0f
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 65 -----------------------
#
#  int (  )
#
000     N1: #	out( B1 ) <- in( B61 B65 B57 B62 B41 B64 B63 B56 B66 B70 B35 )  Freq: 1

000     B1: #	out( B54 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (272 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

01a     # TLS is in R15
01a     movq    RBX, [R15 + #456 (32-bit)]	# ptr
021     movq    R10, RBX	# spill
024     addq    R10, #8208	# ptr
02b     # TLS is in R15
02b     cmpq    R10, [R15 + #472 (32-bit)]	# raw ptr
032     jae,u   B54  P=0.000100 C=-1.000000

038     B2: #	out( B3 ) <- in( B1 )  Freq: 0.9999
038     # TLS is in R15
038     movq    [R15 + #456 (32-bit)], R10	# ptr
03f     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
047     movq    RDI, RBX	# spill
04a     addq    RDI, #16	# ptr
04e     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
056     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
05e     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
066     movl    RCX, #1024	# long (unsigned 32-bit)
06b     movq    R10, precise [SimpleValue: 0x00007f56641a0940 * (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# ptr
075     movq    R10, [R10 + #184 (32-bit)]	# long
07c     movq    [RBX], R10	# long
07f     movl    [RBX + #8 (8-bit)], narrowklass: precise [SimpleValue: 0x00007f56641a0940 * (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
086     movl    [RBX + #12 (8-bit)], #2048	# int
08d     xorl    RAX, RAX	# long
08f     mov     rdi,rax	# ClearArray:
	vpxor   ymm0,ymm0,ymm0
	jmpq    L_zero_64_bytes
	# L_loop:	# 64-byte LOOP
	vmovdqu ymm0,(rax)
	vmovdqu ymm0,0x20(rax)
	add     0x40,rax
	# L_zero_64_bytes:
	sub     0x8,rcx
	jge     L_loop
	add     0x4,rcx
	jl      L_tail
	vmovdqu ymm0,(rax)
	add     0x20,rax
	sub     0x4,rcx
	# L_tail:	# Clearing tail bytes
	add     0x4,rcx
	jle     L_end
	dec     rcx
	# L_sloop:	# 8-byte short loop
	vmovq   xmm0,(rax)
	add     0x8,rax
	dec     rcx
	jge     L_sloop
	# L_end:
	

0e5     B3: #	out( B45 B4 ) <- in( B55 B2 )  Freq: 1
0e5     
0e5     MEMBAR-storestore (empty encoding)
0e5     # checkcastPP of RBX
0e5     # TLS is in R15
0e5     cmpb    [R15 + #56 (8-bit)], #0
0ea     jne     B45  P=0.001000 C=-1.000000

0f0     B4: #	out( B6 B5 ) <- in( B60 B47 B45 B3 )  Freq: 1
0f0     movq    R10, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
0fa     movq    R10, R10	# ptr -> long
0fa     movq    R11, RBX	# ptr -> long
0fd     xorq    R11, R10	# long
100     encode_heap_oop_not_null R8,RBX
145     movq    R9, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
14f     movl    [R9 + #112 (8-bit)], R8	# compressed ptr ! Field: TestFlatArrayVectorization.varr
153     shrq    R11, #24
157     testq   R11, R11
15a     je,s   B6  P=0.001000 C=-1.000000

15c     B5: #	out( B48 B6 ) <- in( B4 )  Freq: 0.999
15c     shrq    R10, #9
160     movq    RDI, 0x00007f56c7a3e000	# ptr
16a     addq    RDI, R10	# ptr
16d     cmpb    [RDI], #2
170     jne     B48  P=0.001000 C=-1.000000

176     B6: #	out( B27 B7 ) <- in( B53 B5 B4 )  Freq: 1
176     movl    R11, [RBX + #12 (8-bit)]	# range
        nop 	# 6 bytes pad for loops and calls
180     testl   R11, R11	# unsigned
183     jbe,u   B27  P=0.000488 C=1838294.000000

189     B7: #	out( B12 ) <- in( B6 )  Freq: 0.999512
189     encode_heap_oop R10,RBX
1b1     xorl    R11, R11	# int
1b4     jmp     B12

1b9     B8: #	out( B9 ) <- in( B22 )  Freq: 0.508444
1b9     # TLS is in R15
1b9     movq    RSI, R15	# spill
1bc     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 

1d1     B9: #	out( B63 B10 ) <- in( B42 B8 B23 B21 B20 B19 ) top-of-loop Freq: 2035.82
1d1     # TLS is in R15
1d1     movq    R10, [R15 + #1192 (32-bit)]	# ptr
1d8     testl   rax, [R10]	# Safepoint: poll for GC        # TestFlatArrayVectorization::test @ bci:35 (line 22) L[0]=RBX
        # OopMap {off=472/0x1d8}
1db     movq    R10, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
1e5     movl    R10, [R10 + #112 (8-bit)]	# compressed ptr ! Field: TestFlatArrayVectorization.varr
1e9     movl    R8, [R12 + R10 << 3 + #12] (compressed oop addressing)	# range
1ee     NullCheck R10

1ee     B10: #	out( B27 B11 ) <- in( B9 )  Freq: 2035.81
1ee     cmpl    RBX, R8
1f1     jge     B27  P=0.000488 C=1837397.000000

1f7     B11: #	out( B12 ) <- in( B10 )  Freq: 2034.82
1f7     movl    R11, RBX	# spill

1fa     B12: #	out( B62 B13 ) <- in( B7 B11 ) Loop( B12-B11 inner ) Freq: 2035.82
1fa     movl    R8, [R12 + R10 << 3 + #12] (compressed oop addressing)	# range
1ff     NullCheck R10

1ff     B13: #	out( B41 B14 ) <- in( B12 )  Freq: 2035.82
        nop 	# 1 bytes pad for loops and calls
200     cmpl    R11, R8	# unsigned
203     jae,u   B41  P=0.000001 C=-1.000000

209     B14: #	out( B43 B15 ) <- in( B13 )  Freq: 2035.82
209     movq    R8, [R12 + R10 << 3] (compressed oop addressing)	# long
20d     testq   R8, #1	# long
211     je     B43  P=0.000001 C=-1.000000

217     B15: #	out( B42 B16 ) <- in( B14 B43 )  Freq: 2035.82
217     decode_heap_oop_not_null RBP,R10
21b     leal    RBX, [R11 + #1]
21f     movslq  R9, R11	# i2l
222     salq    R9, #2
226     testq   R8, #16	# long
22a     jne     B42  P=0.000001 C=-1.000000

230     B16: #	out( B39 B17 ) <- in( B15 )  Freq: 2035.81
230     # TLS is in R15
230     movq    RAX, [R15 + #456 (32-bit)]	# ptr
237     movq    R8, RAX	# spill
23a     addq    R8, #16	# ptr
23e     # TLS is in R15
        nop 	# 2 bytes pad for loops and calls
240     cmpq    R8, [R15 + #472 (32-bit)]	# raw ptr
247     jae,u   B39  P=0.000100 C=-1.000000

24d     B17: #	out( B18 ) <- in( B16 )  Freq: 2035.61
24d     # TLS is in R15
24d     movq    [R15 + #456 (32-bit)], R8	# ptr
254     PREFETCHW [R8 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
25c     movq    R10, precise SimpleValue: 0x00007f56641a0940:Constant:exact *	# ptr
266     movq    R10, [R10 + #184 (32-bit)]	# long
26d     movq    [RAX], R10	# long
270     movl    [RAX + #8 (8-bit)], narrowklass: precise SimpleValue: 0x00007f56641a0940:Constant:exact *	# compressed klass ptr

277     B18: #	out( B24 B19 ) <- in( B40 B17 )  Freq: 2035.81
277     movl    [RAX + #12 (8-bit)], R11	# int
27b     
27b     MEMBAR-storestore (empty encoding)
27b     # checkcastPP of RAX
27b     MEMBAR-storestore (empty encoding)
27b     leaq    R13, [RBP + #16 + R9]	# ptr idxoff
280     # TLS is in R15
280     cmpb    [R15 + #56 (8-bit)], #0
285     jne     B24  P=0.001000 C=-1.000000

28b     B19: #	out( B9 B20 ) <- in( B44 B26 B24 B18 )  Freq: 2035.81
28b     movq    R10, RAX	# ptr -> long
28e     encode_heap_oop_not_null R8,RAX
2d3     movl    [R13], R8	# compressed ptr
2d7     movq    R11, R13	# ptr -> long
2da     xorq    R10, R11	# long
2dd     shrq    R10, #24
2e1     testq   R10, R10
2e4     je     B9  P=0.001000 C=-1.000000

2ea     B20: #	out( B9 B21 ) <- in( B19 )  Freq: 2033.78
2ea     shrq    R11, #9
2ee     movq    RDI, 0x00007f56c7a3e000	# ptr
2f8     addq    RDI, R11	# ptr
        nop 	# 5 bytes pad for loops and calls
300     cmpb    [RDI], #2
303     je     B9  P=0.999000 C=-1.000000

309     B21: #	out( B9 B22 ) <- in( B20 )  Freq: 2.03378
309     # TLS is in R15
309     movq    R10, [R15 + #72 (8-bit)]	# ptr
30d     # TLS is in R15
30d     movq    R11, [R15 + #64 (8-bit)]	# long
311     lock addl [rsp + #0], 0	! membar_volatile
        nop 	# 9 bytes pad for loops and calls
320     cmpb    [RDI], #0
323     je     B9  P=0.500000 C=-1.000000

329     B22: #	out( B8 B23 ) <- in( B21 )  Freq: 1.01689
329     movb    [RDI], R12	# CMS card-mark byte 0 (R12_heapbase==0)
32c     testq   R11, R11
32f     je     B8  P=0.500000 C=-1.000000

335     B23: #	out( B9 ) <- in( B22 )  Freq: 0.508444
335     movq    [R10 + #-8 + R11], RDI	# ptr
33a     addq    R11, #-8	# long
33e     # TLS is in R15
33e     movq    [R15 + #64 (8-bit)], R11	# long
342     jmp     B9

347     B24: #	out( B19 B25 ) <- in( B18 )  Freq: 2.03579
347     movl    R10, [R13]	# compressed ptr
34b     testl   R10, R10	# compressed ptr
34e     je     B19  P=0.500000 C=-1.000000

354     B25: #	out( B44 B26 ) <- in( B24 )  Freq: 1.01789
354     # TLS is in R15
354     movq    R11, [R15 + #40 (8-bit)]	# long
358     decode_heap_oop RDI,R10
380     testq   R11, R11
383     je     B44  P=0.001000 C=-1.000000

389     B26: #	out( B19 ) <- in( B25 )  Freq: 1.01688
389     # TLS is in R15
389     movq    R10, [R15 + #48 (8-bit)]	# ptr
38d     movq    [R10 + #-8 + R11], RDI	# ptr
392     addq    R11, #-8	# long
396     # TLS is in R15
396     movq    [R15 + #40 (8-bit)], R11	# long
39a     jmp     B19

39f     B27: #	out( B56 B28 ) <- in( B10 B6 )  Freq: 0.993809
39f     movq    R10, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
3a9     movl    R11, [R10 + #116 (8-bit)]	# compressed ptr ! Field: TestFlatArrayVectorization.rd
3ad     testl   R11, R11	# compressed ptr
3b0     je     B56  P=0.000001 C=-1.000000

3b6     B28: #	out( B68 B29 ) <- in( B27 )  Freq: 0.993808
3b6     movl    R8, [R10 + #112 (8-bit)]	# compressed ptr ! Field: TestFlatArrayVectorization.varr
3ba     movl    [rsp + #4], R8	# spill
3bf     decode_heap_oop_not_null R10,R11
3c3     movq    [rsp + #8], R10	# spill
3c8     movl    [rsp + #0], R11	# spill
3cc     movq    RSI, R10	# spill
3cf     movl    RDX, #31	# int
        nop 	# 3 bytes pad for loops and calls
3d7     call,static  java.util.Random::next
        # java.util.Random::nextInt @ bci:17 (line 559) L[0]=rsp + #0 L[1]=#2047 L[2]=_ L[3]=_ L[4]=_
        # TestFlatArrayVectorization::test @ bci:47 (line 25) L[0]=_ STK[0]=rsp + #4
        # OopMap {[0]=NarrowOop [4]=NarrowOop [8]=Oop off=988/0x3dc}

3e4     B29: #	out( B36 B30 ) <- in( B28 )  Freq: 0.993789
        # Block is sole successor of call
3e4     movl    R11, RAX	# spill
3e7     sarl    R11, #11
3eb     movl    RBP, RAX	# spill
3ed     andl    RBP, #2047	# int
3f3     addl    RBP, R11	# int
3f6     movl    R11, RBP	# spill
3f9     sarl    R11, #11
3fd     andl    RBP, #2047	# int
403     addl    RBP, R11	# int
406     leal    R11, [RBP + #-2047]
40d     testl   RAX, RAX
40f     movl    R10, #1	# int
415     movl    R8, #2047	# int
41b     cmovlge R10, R8	# signed, int
41f     cmpl    RBP, R10
422     cmovlge RBP, R11	# signed, int
426     subl    RAX, RBP	# int
428     addl    RAX, #2046	# int
42d     testl   RAX, RAX
42f     jl     B36  P=0.500000 C=-1.000000

435     B30: #	out( B65 B31 ) <- in( B29 B38 )  Freq: 0.993739
435     movl    R8, [rsp + #4]	# spill
43a     movl    R11, [R12 + R8 << 3 + #12] (compressed oop addressing)	# range
43f     NullCheck R8

43f     B31: #	out( B57 B32 ) <- in( B30 )  Freq: 0.993738
        nop 	# 1 bytes pad for loops and calls
440     cmpl    RBP, R11	# unsigned
443     jae,u   B57  P=0.000001 C=-1.000000

449     B32: #	out( B59 B33 ) <- in( B31 )  Freq: 0.993737
449     movq    R10, [R12 + R8 << 3] (compressed oop addressing)	# long
44d     testq   R10, #1	# long
451     je     B59  P=0.000001 C=-1.000000

457     B33: #	out( B58 B34 ) <- in( B32 B59 )  Freq: 0.993737
457     decode_heap_oop_not_null R11,R8
        nop 	# 5 bytes pad for loops and calls
460     testq   R10, #16	# long
464     jne     B58  P=0.000001 C=-1.000000

46a     B34: #	out( B66 B35 ) <- in( B33 )  Freq: 0.993736
46a     movl    R11, [R11 + #16 + RBP << #2]	# compressed ptr
46f     movl    RAX, [R12 + R11 << 3 + #12] (compressed oop addressing)	# int ! Field: SimpleValue.field (constant)
474     NullCheck R11

474     B35: #	out( N1 ) <- in( B58 B34 )  Freq: 0.993736
474     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

486     ret
        nop 	# 9 bytes pad for loops and calls

490     B36: #	out( B69 B37 ) <- in( B29 B37 ) Loop( B36-B37 inner ) Freq: 4.96854
490     movq    RSI, [rsp + #8]	# spill
495     movl    RDX, #31	# int
        nop 	# 1 bytes pad for loops and calls
49b     call,static  java.util.Random::next
        # java.util.Random::nextInt @ bci:64 (line 566) L[0]=rsp + #0 L[1]=#2047 L[2]=_ L[3]=#2046 L[4]=_
        # TestFlatArrayVectorization::test @ bci:47 (line 25) L[0]=_ STK[0]=rsp + #4
        # OopMap {[0]=NarrowOop [4]=NarrowOop [8]=Oop off=1184/0x4a0}

4a8     B37: #	out( B36 B38 ) <- in( B36 )  Freq: 4.96844
        # Block is sole successor of call
4a8     # TLS is in R15
4a8     movq    R10, [R15 + #1192 (32-bit)]	# ptr
4af     testl   rax, [R10]	# Safepoint: poll for GC        # java.util.Random::nextInt @ bci:69 (line 566) L[0]=rsp + #0 L[1]=#2047 L[2]=_ L[3]=#2046 L[4]=RAX
        # TestFlatArrayVectorization::test @ bci:47 (line 25) L[0]=_ STK[0]=rsp + #4
        # OopMap {[0]=NarrowOop [4]=NarrowOop [8]=Oop off=1199/0x4af}
4b2     testl   RAX, RAX
4b4     movl    R10, #1	# int
4ba     movl    R11, #2047	# int
4c0     cmovlge R10, R11	# signed, int
4c4     movl    RBP, RAX	# spill
4c6     andl    RBP, #2047	# int
4cc     movl    R11, RAX	# spill
4cf     sarl    R11, #11
4d3     addl    RBP, R11	# int
4d6     movl    R8, RBP	# spill
4d9     sarl    R8, #11
4dd     andl    RBP, #2047	# int
4e3     addl    RBP, R8	# int
4e6     leal    R8, [RBP + #-2047]
4ed     cmpl    RBP, R10
4f0     cmovlge RBP, R8	# signed, int
4f4     subl    RAX, RBP	# int
4f6     addl    RAX, #2046	# int
        nop 	# 5 bytes pad for loops and calls
500     testl   RAX, RAX
502     jl,s   B36  P=0.900000 C=-1.000000

504     B38: #	out( B30 ) <- in( B37 )  Freq: 0.496845
504     jmp     B30

509     B39: #	out( B64 B40 ) <- in( B16 )  Freq: 0.203615
509     movq    [rsp + #16], R9	# spill
50e     movl    [rsp + #8], RBX	# spill
512     movl    [rsp + #4], R11	# spill
517     movl    [rsp + #0], R10	# spill
51b     movq    RSI, precise SimpleValue: 0x00007f56641a0940:Constant:exact *	# ptr
525     xorl    RDX, RDX	# int
527     call,static  wrapper for: _new_instance_Java
        # TestFlatArrayVectorization::test @ bci:31 (line 23) L[0]=rsp + #4 STK[0]=RBP STK[1]=rsp + #4 STK[2]=#ScObj0
        # ScObj0 SimpleValue={ [field :0]=rsp + #4 }
        # OopMap {rbp=Oop [0]=NarrowOop off=1324/0x52c}

534     B40: #	out( B18 ) <- in( B39 )  Freq: 0.203611
        # Block is sole successor of call
534     movl    R11, [rsp + #4]	# spill
539     movl    RBX, [rsp + #8]	# spill
53d     movq    R9, [rsp + #16]	# spill
542     jmp     B18

547     B41: #	out( N1 ) <- in( B13 )  Freq: 0.00206285
547     movl    RSI, #-28	# int
54c     movl    [rsp + #0], R10	# spill
550     movl    [rsp + #4], R11	# spill
555     movl    [rsp + #8], R11	# spill
        nop 	# 1 bytes pad for loops and calls
55b     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # TestFlatArrayVectorization::test @ bci:31 (line 23) L[0]=rsp + #4 STK[0]=rsp + #0 STK[1]=rsp + #8 STK[2]=#ScObj0
        # ScObj0 SimpleValue={ [field :0]=rsp + #4 }
        # OopMap {[0]=NarrowOop off=1376/0x560}
568     stop	# ShouldNotReachHere

57c     B42: #	out( B9 ) <- in( B15 )  Freq: 0.00206285
57c     # checkcastPP of RBP
57c     movl    [RBP + #16 + R9], R11	# int
581     jmp     B9

586     B43: #	out( B15 ) <- in( B14 )  Freq: 0.00206285
586     movl    R9, [R12 + R10 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
58b     decode_and_move_klass_not_null R8,R9
58e     movq    R8, [R8 + #184 (32-bit)]	# long
595     jmp     B15

59a     B44: #	out( B19 ) <- in( B25 )  Freq: 0.00101788
59a     movq    RBP, RAX	# spill
59d     # TLS is in R15
59d     movq    RSI, R15	# spill
5a0     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
5b5     movq    RAX, RBP	# spill
5b8     jmp     B19

5bd     B45: #	out( B4 B46 ) <- in( B3 )  Freq: 0.000999987
5bd     movq    R10, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
5c7     movl    R10, [R10 + #112 (8-bit)]	# compressed ptr ! Field: TestFlatArrayVectorization.varr
5cb     testl   R10, R10	# compressed ptr
5ce     je     B4  P=0.500000 C=-1.000000

5d4     B46: #	out( B60 B47 ) <- in( B45 )  Freq: 0.000499994
5d4     # TLS is in R15
5d4     movq    R11, [R15 + #40 (8-bit)]	# long
5d8     decode_heap_oop RDI,R10
600     testq   R11, R11
603     je     B60  P=0.001000 C=-1.000000

609     B47: #	out( B4 ) <- in( B46 )  Freq: 0.000499494
609     # TLS is in R15
609     movq    R10, [R15 + #48 (8-bit)]	# ptr
60d     movq    [R10 + #-8 + R11], RDI	# ptr
612     addq    R11, #-8	# long
616     # TLS is in R15
616     movq    [R15 + #40 (8-bit)], R11	# long
61a     jmp     B4

61f     B48: #	out( B52 B49 ) <- in( B5 )  Freq: 0.000999
61f     # TLS is in R15
61f     movq    R10, [R15 + #64 (8-bit)]	# long
623     # TLS is in R15
623     movq    R11, [R15 + #72 (8-bit)]	# ptr
627     lock addl [rsp + #0], 0	! membar_volatile
62d     cmpb    [RDI], #0
630     je,s   B52  P=0.500000 C=-1.000000

632     B49: #	out( B51 B50 ) <- in( B48 )  Freq: 0.0004995
632     movb    [RDI], R12	# CMS card-mark byte 0 (R12_heapbase==0)
635     testq   R10, R10
638     je,s   B51  P=0.500000 C=-1.000000

63a     B50: #	out( B52 ) <- in( B49 )  Freq: 0.00024975
63a     movq    [R11 + #-8 + R10], RDI	# ptr
63f     addq    R10, #-8	# long
643     # TLS is in R15
643     movq    [R15 + #64 (8-bit)], R10	# long
647     jmp,s   B52

649     B51: #	out( B52 ) <- in( B49 )  Freq: 0.00024975
649     # TLS is in R15
649     movq    RSI, R15	# spill
64c     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 

661     B52: #	out( B61 B53 ) <- in( B51 B50 B48 )  Freq: 0.000999
661     movq    R10, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
66b     movl    R11, [R10 + #112 (8-bit)]	# compressed ptr ! Field: TestFlatArrayVectorization.varr
66f     testl   R11, R11	# compressed ptr
672     je     B61  P=0.000001 C=-1.000000

678     B53: #	out( B6 ) <- in( B52 )  Freq: 0.000998999
678     decode_heap_oop R10,R11
6a0     movq    RBX, R10	# spill
6a3     jmp     B6

6a8     B54: #	out( B67 B55 ) <- in( B1 )  Freq: 0.000100017
6a8     movl    RDX, #2048	# int
6ad     movq    RSI, precise [SimpleValue: 0x00007f56641a0940 * (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# ptr
6b7     call,static  wrapper for: _new_array_Java
        # TestFlatArrayVectorization::test @ bci:3 (line 21) L[0]=_
        # OopMap {off=1724/0x6bc}

6c4     B55: #	out( B3 ) <- in( B54 )  Freq: 0.000100015
        # Block is sole successor of call
6c4     movq    RBX, RAX	# spill
6c7     jmp     B3

6cc     B56: #	out( N1 ) <- in( B27 )  Freq: 1.00701e-06
6cc     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
6d3     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # TestFlatArrayVectorization::test @ bci:47 (line 25) L[0]=_ STK[0]=_ STK[1]=#null STK[2]=#2047
        # OopMap {off=1752/0x6d8}
6e0     stop	# ShouldNotReachHere

6f4     B57: #	out( N1 ) <- in( B31 )  Freq: 1.00693e-06
6f4     movl    RSI, #-28	# int
        nop 	# 2 bytes pad for loops and calls
6fb     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # TestFlatArrayVectorization::test @ bci:50 (line 25) L[0]=_ STK[0]=rsp + #4 STK[1]=RBP
        # OopMap {[4]=NarrowOop off=1792/0x700}
708     stop	# ShouldNotReachHere

71c     B58: #	out( B35 ) <- in( B33 )  Freq: 1.00693e-06
71c     # checkcastPP of R11
71c     movl    RAX, [R11 + #16 + RBP << #2]	# int
721     jmp     B35

726     B59: #	out( B33 ) <- in( B32 )  Freq: 1.00693e-06
726     movl    R10, [R12 + R8 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
72b     decode_and_move_klass_not_null R11,R10
72e     movq    R10, [R11 + #184 (32-bit)]	# long
735     jmp     B33

73a     B60: #	out( B4 ) <- in( B46 )  Freq: 4.99987e-07
73a     # TLS is in R15
73a     movq    RSI, R15	# spill
73d     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
752     jmp     B4

757     B61: #	out( N1 ) <- in( B52 )  Freq: 1.01227e-09
757     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
75f     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # TestFlatArrayVectorization::test @ bci:15 (line 22) L[0]=_ STK[0]=_ STK[1]=#null
        # OopMap {off=1892/0x764}
76c     stop	# ShouldNotReachHere

780     B62: #	out( N1 ) <- in( B12 )  Freq: 0.00206285
780     movl    RSI, #-10	# int
785     movl    [rsp + #0], R11	# spill
        nop 	# 2 bytes pad for loops and calls
78b     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # TestFlatArrayVectorization::test @ bci:31 (line 23) L[0]=_ STK[0]=#null STK[1]=rsp + #0 STK[2]=#ScObj0
        # ScObj0 SimpleValue={ [field :0]=rsp + #0 }
        # OopMap {off=1936/0x790}
798     stop	# ShouldNotReachHere

7ac     B63: #	out( N1 ) <- in( B9 )  Freq: 0.00206285
7ac     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
7b3     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # TestFlatArrayVectorization::test @ bci:15 (line 22) L[0]=_ STK[0]=_ STK[1]=#null
        # OopMap {off=1976/0x7b8}
7c0     stop	# ShouldNotReachHere

7d4     B64: #	out( N1 ) <- in( B39 )  Freq: 2.03615e-06
7d4     movl    RSI, #-105	# int
7d9     movl    RBP, [rsp + #4]	# spill
        nop 	# 2 bytes pad for loops and calls
7df     call,static  wrapper for: uncommon_trap(reason='unhandled' action='none' debug_id='0')
        # TestFlatArrayVectorization::test @ bci:31 (line 23) L[0]=RBP STK[0]=rsp + #0 STK[1]=RBP STK[2]=#ScObj0
        # ScObj0 SimpleValue={ [field :0]=RBP }
        # OopMap {[0]=NarrowOop off=2020/0x7e4}
7ec     stop	# ShouldNotReachHere

800     B65: #	out( N1 ) <- in( B30 )  Freq: 1.00693e-06
800     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
807     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # TestFlatArrayVectorization::test @ bci:50 (line 25) L[0]=_ STK[0]=#null STK[1]=RBP
        # OopMap {off=2060/0x80c}
814     stop	# ShouldNotReachHere

828     B66: #	out( N1 ) <- in( B34 )  Freq: 1.00693e-06
828     xorl    RBP, RBP	# int
82a     testl   R11, R11	# compressed ptr
82d     setbne RBP	# signed, int
831     movl    RSI, #-162	# int
        nop 	# 1 bytes pad for loops and calls
837     call,static  wrapper for: uncommon_trap(reason='speculate_null_check' action='maybe_recompile' debug_id='0')
        # TestFlatArrayVectorization::test @ bci:51 (line 25) L[0]=_ STK[0]=#ScObj0
        # ScObj0 SimpleValue={ [is_init :-1]=RBP [field :0]=#0 }
        # OopMap {off=2108/0x83c}
844     stop	# ShouldNotReachHere

858     B67: #	out( B70 ) <- in( B54 )  Freq: 1.00017e-09
858     # exception oop is in rax; no code emitted
858     movq    RSI, RAX	# spill
85b     jmp,s   B70

85d     B68: #	out( B70 ) <- in( B28 )  Freq: 9.93808e-06
85d     # exception oop is in rax; no code emitted
85d     movq    RSI, RAX	# spill
860     jmp,s   B70

862     B69: #	out( B70 ) <- in( B36 )  Freq: 4.96854e-05
862     # exception oop is in rax; no code emitted
862     movq    RSI, RAX	# spill

865     B70: #	out( N1 ) <- in( B67 B68 B69 )  Freq: 5.96245e-05
865     addq    rsp, 48	# Destroy frame
	popq    rbp

86a     jmp     rethrow_stub

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2) 2396   65             TestFlatArrayVectorization::test (55 bytes)
 total in heap  [0x00007f56e0851710,0x00007f56e0852970] = 4704
 relocation     [0x00007f56e0851890,0x00007f56e0851a20] = 400
 main code      [0x00007f56e0851a20,0x00007f56e08522b0] = 2192
 stub code      [0x00007f56e08522b0,0x00007f56e08522e8] = 56
 oops           [0x00007f56e08522e8,0x00007f56e08522f8] = 16
 metadata       [0x00007f56e08522f8,0x00007f56e0852338] = 64
 scopes data    [0x00007f56e0852338,0x00007f56e08524c0] = 392
 scopes pcs     [0x00007f56e08524c0,0x00007f56e08528d0] = 1040
 dependencies   [0x00007f56e08528d0,0x00007f56e08528e8] = 24
 handler table  [0x00007f56e08528e8,0x00007f56e0852948] = 96
 nul chk table  [0x00007f56e0852948,0x00007f56e0852970] = 40

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Entry Point]
[Inline Entry Point]
[Verified Entry Point]
[Verified Inline Entry Point]
[Verified Inline Entry Point (RO)]
  # {method} {0x00007f5684715d20} 'test' '()I' in 'TestFlatArrayVectorization'
  #           [sp+0x40]  (sp of caller)
 ;; N1: #	out( B1 ) <- in( B61 B65 B57 B62 B41 B64 B63 B56 B66 B70 B35 )  Freq: 1
 ;; B1: #	out( B54 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007f56e0851a20:   mov    %eax,-0x18000(%rsp)
  0x00007f56e0851a27:   push   %rbp
  0x00007f56e0851a28:   sub    $0x30,%rsp
  0x00007f56e0851a2c:   cmpl   $0x0,0x20(%r15)
  0x00007f56e0851a34:   jne    0x00007f56e08522a5
  0x00007f56e0851a3a:   mov    0x1c8(%r15),%rbx
  0x00007f56e0851a41:   mov    %rbx,%r10
  0x00007f56e0851a44:   add    $0x2010,%r10
  0x00007f56e0851a4b:   cmp    0x1d8(%r15),%r10
  0x00007f56e0851a52:   jae    0x00007f56e08520c8
 ;; B2: #	out( B3 ) <- in( B1 )  Freq: 0.9999
  0x00007f56e0851a58:   mov    %r10,0x1c8(%r15)
  0x00007f56e0851a5f:   prefetchw 0xc0(%r10)
  0x00007f56e0851a67:   mov    %rbx,%rdi
  0x00007f56e0851a6a:   add    $0x10,%rdi
  0x00007f56e0851a6e:   prefetchw 0x100(%r10)
  0x00007f56e0851a76:   prefetchw 0x140(%r10)
  0x00007f56e0851a7e:   prefetchw 0x180(%r10)
  0x00007f56e0851a86:   mov    $0x400,%ecx
  0x00007f56e0851a8b:   movabs $0x2608b400,%r10             ;   {metadata('SimpleValue'[])}
  0x00007f56e0851a95:   mov    0xb8(%r10),%r10
  0x00007f56e0851a9c:   mov    %r10,(%rbx)
  0x00007f56e0851a9f:   movl   $0x2608b400,0x8(%rbx)        ;   {metadata('SimpleValue'[])}
  0x00007f56e0851aa6:   movl   $0x800,0xc(%rbx)
  0x00007f56e0851aad:   xor    %eax,%eax
  0x00007f56e0851aaf:   vmovq  %rax,%xmm0
  0x00007f56e0851ab4:   vpunpcklqdq %xmm0,%xmm0,%xmm0
  0x00007f56e0851ab8:   vinserti128 $0x1,%xmm0,%ymm0,%ymm0
  0x00007f56e0851abe:   jmpq   0x00007f56e0851ad0
 ;; L_loop:
  0x00007f56e0851ac3:   vmovdqu %ymm0,(%rdi)
  0x00007f56e0851ac7:   vmovdqu %ymm0,0x20(%rdi)
  0x00007f56e0851acc:   add    $0x40,%rdi
 ;; L_zero_64_bytes:
  0x00007f56e0851ad0:   sub    $0x8,%rcx
  0x00007f56e0851ad4:   jge    0x00007f56e0851ac3
  0x00007f56e0851ad6:   add    $0x4,%rcx
  0x00007f56e0851ada:   jl     0x00007f56e0851ae8
  0x00007f56e0851adc:   vmovdqu %ymm0,(%rdi)
  0x00007f56e0851ae0:   add    $0x20,%rdi
  0x00007f56e0851ae4:   sub    $0x4,%rcx
 ;; L_tail:
  0x00007f56e0851ae8:   add    $0x4,%rcx
  0x00007f56e0851aec:   jle    0x00007f56e0851b05
  0x00007f56e0851aee:   mov    $0xffffffffffffffff,%rax
  0x00007f56e0851af5:   bzhi   %rcx,%rax,%rax
  0x00007f56e0851afa:   kmovq  %rax,%k7
  0x00007f56e0851aff:   vmovdqu64 %ymm0,(%rdi){%k7}
 ;; L_end:
 ;; DONE:
 ;; B3: #	out( B45 B4 ) <- in( B55 B2 )  Freq: 1
  0x00007f56e0851b05:   cmpb   $0x0,0x38(%r15)
  0x00007f56e0851b0a:   jne    0x00007f56e0851fdd
 ;; B4: #	out( B6 B5 ) <- in( B60 B47 B45 B3 )  Freq: 1
  0x00007f56e0851b10:   movabs $0x11f7e5538,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f7e5538} = 'TestFlatArrayVectorization')}
  0x00007f56e0851b1a:   mov    %rbx,%r11
  0x00007f56e0851b1d:   xor    %r10,%r11
  0x00007f56e0851b20:   cmp    0x5f52e59(%rip),%r12        # 0x00007f56e67a4980
                                                            ;   {external_word}
  0x00007f56e0851b27:   je     0x00007f56e0851b41
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007f56e0851b2d:   movabs $0x7f56e5be9538,%rdi         ;   {external_word}
  0x00007f56e0851b37:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0851b3b:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0851b40:   hlt    
  0x00007f56e0851b41:   test   %rbx,%rbx
  0x00007f56e0851b44:   jne    0x00007f56e0851b5e
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007f56e0851b4a:   movabs $0x7f56e5be9578,%rdi         ;   {external_word}
  0x00007f56e0851b54:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0851b58:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0851b5d:   hlt    
  0x00007f56e0851b5e:   mov    %rbx,%r8
  0x00007f56e0851b61:   shr    $0x3,%r8
  0x00007f56e0851b65:   movabs $0x11f7e5538,%r9             ;   {oop(a 'java/lang/Class'{0x000000011f7e5538} = 'TestFlatArrayVectorization')}
  0x00007f56e0851b6f:   mov    %r8d,0x70(%r9)
  0x00007f56e0851b73:   shr    $0x18,%r11
  0x00007f56e0851b77:   test   %r11,%r11
  0x00007f56e0851b7a:   je     0x00007f56e0851b96
 ;; B5: #	out( B48 B6 ) <- in( B4 )  Freq: 0.999
  0x00007f56e0851b7c:   shr    $0x9,%r10
  0x00007f56e0851b80:   movabs $0x7f56c7a3e000,%rdi
  0x00007f56e0851b8a:   add    %r10,%rdi
  0x00007f56e0851b8d:   cmpb   $0x2,(%rdi)
  0x00007f56e0851b90:   jne    0x00007f56e085203f           ;*putstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@6 (line 21)
 ;; B6: #	out( B27 B7 ) <- in( B53 B5 B4 )  Freq: 1
  0x00007f56e0851b96:   mov    0xc(%rbx),%r11d
  0x00007f56e0851b9a:   nop
  0x00007f56e0851b9b:   nop
  0x00007f56e0851b9c:   nop
  0x00007f56e0851b9d:   nop
  0x00007f56e0851b9e:   nop
  0x00007f56e0851b9f:   nop
  0x00007f56e0851ba0:   test   %r11d,%r11d
  0x00007f56e0851ba3:   jbe    0x00007f56e0851dbf           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@16 (line 22)
 ;; B7: #	out( B12 ) <- in( B6 )  Freq: 0.999512
  0x00007f56e0851ba9:   mov    %rbx,%r10
  0x00007f56e0851bac:   cmp    0x5f52dcd(%rip),%r12        # 0x00007f56e67a4980
                                                            ;   {external_word}
  0x00007f56e0851bb3:   je     0x00007f56e0851bcd
 ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x00007f56e0851bb9:   movabs $0x7f56e5be93d0,%rdi         ;   {external_word}
  0x00007f56e0851bc3:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0851bc7:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0851bcc:   hlt    
  0x00007f56e0851bcd:   shr    $0x3,%r10
  0x00007f56e0851bd1:   xor    %r11d,%r11d
  0x00007f56e0851bd4:   jmpq   0x00007f56e0851c1a
 ;; B8: #	out( B9 ) <- in( B22 )  Freq: 0.508444
  0x00007f56e0851bd9:   mov    %r15,%rsi
  0x00007f56e0851bdc:   movabs $0x7f56e479563a,%r10
  0x00007f56e0851be6:   callq  *%r10
  0x00007f56e0851be9:   nopl   0x0(%rax,%rax,1)             ;*putstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@6 (line 21)
                                                            ;   {other}
 ;; B9: #	out( B63 B10 ) <- in( B42 B8 B23 B21 B20 B19 ) top-of-loop Freq: 2035.82
  0x00007f56e0851bf1:   mov    0x4a8(%r15),%r10             ; ImmutableOopMap {}
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - (reexecute) TestFlatArrayVectorization::test@35 (line 22)
  0x00007f56e0851bf8:   test   %eax,(%r10)                  ;*goto {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@35 (line 22)
                                                            ;   {poll}
  0x00007f56e0851bfb:   movabs $0x11f7e5538,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f7e5538} = 'TestFlatArrayVectorization')}
  0x00007f56e0851c05:   mov    0x70(%r10),%r10d             ;*getstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@12 (line 22)
  0x00007f56e0851c09:   mov    0xc(%r12,%r10,8),%r8d        ; implicit exception: dispatches to 0x00007f56e08521cc
 ;; B10: #	out( B27 B11 ) <- in( B9 )  Freq: 2035.81
  0x00007f56e0851c0e:   cmp    %r8d,%ebx
  0x00007f56e0851c11:   jge    0x00007f56e0851dbf
 ;; B11: #	out( B12 ) <- in( B10 )  Freq: 2034.82
  0x00007f56e0851c17:   mov    %ebx,%r11d
 ;; B12: #	out( B62 B13 ) <- in( B7 B11 ) Loop( B12-B11 inner ) Freq: 2035.82
  0x00007f56e0851c1a:   mov    0xc(%r12,%r10,8),%r8d        ; implicit exception: dispatches to 0x00007f56e08521a0
 ;; B13: #	out( B41 B14 ) <- in( B12 )  Freq: 2035.82
  0x00007f56e0851c1f:   nop
  0x00007f56e0851c20:   cmp    %r8d,%r11d
  0x00007f56e0851c23:   jae    0x00007f56e0851f67
 ;; B14: #	out( B43 B15 ) <- in( B13 )  Freq: 2035.82
  0x00007f56e0851c29:   mov    (%r12,%r10,8),%r8
  0x00007f56e0851c2d:   test   $0x1,%r8b
  0x00007f56e0851c31:   je     0x00007f56e0851fa6
 ;; B15: #	out( B42 B16 ) <- in( B14 B43 )  Freq: 2035.82
  0x00007f56e0851c37:   lea    (%r12,%r10,8),%rbp           ;*getstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@19 (line 23)
  0x00007f56e0851c3b:   lea    0x1(%r11),%ebx
  0x00007f56e0851c3f:   movslq %r11d,%r9
  0x00007f56e0851c42:   shl    $0x2,%r9
  0x00007f56e0851c46:   test   $0x10,%r8b
  0x00007f56e0851c4a:   jne    0x00007f56e0851f9c
 ;; B16: #	out( B39 B17 ) <- in( B15 )  Freq: 2035.81
  0x00007f56e0851c50:   mov    0x1c8(%r15),%rax
  0x00007f56e0851c57:   mov    %rax,%r8
  0x00007f56e0851c5a:   add    $0x10,%r8
  0x00007f56e0851c5e:   nop
  0x00007f56e0851c5f:   nop
  0x00007f56e0851c60:   cmp    0x1d8(%r15),%r8
  0x00007f56e0851c67:   jae    0x00007f56e0851f29
 ;; B17: #	out( B18 ) <- in( B16 )  Freq: 2035.61
  0x00007f56e0851c6d:   mov    %r8,0x1c8(%r15)
  0x00007f56e0851c74:   prefetchw 0xc0(%r8)
  0x00007f56e0851c7c:   movabs $0x2608ba40,%r10             ;   {metadata('SimpleValue')}
  0x00007f56e0851c86:   mov    0xb8(%r10),%r10
  0x00007f56e0851c8d:   mov    %r10,(%rax)
  0x00007f56e0851c90:   movl   $0x2608ba40,0x8(%rax)        ;   {metadata('SimpleValue')}
 ;; B18: #	out( B24 B19 ) <- in( B40 B17 )  Freq: 2035.81
  0x00007f56e0851c97:   mov    %r11d,0xc(%rax)
  0x00007f56e0851c9b:   lea    0x10(%rbp,%r9,1),%r13
  0x00007f56e0851ca0:   cmpb   $0x0,0x38(%r15)
  0x00007f56e0851ca5:   jne    0x00007f56e0851d67
 ;; B19: #	out( B9 B20 ) <- in( B44 B26 B24 B18 )  Freq: 2035.81
  0x00007f56e0851cab:   mov    %rax,%r10
  0x00007f56e0851cae:   cmp    0x5f52ccb(%rip),%r12        # 0x00007f56e67a4980
                                                            ;   {external_word}
  0x00007f56e0851cb5:   je     0x00007f56e0851ccf
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007f56e0851cbb:   movabs $0x7f56e5be9538,%rdi         ;   {external_word}
  0x00007f56e0851cc5:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0851cc9:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0851cce:   hlt    
  0x00007f56e0851ccf:   test   %rax,%rax
  0x00007f56e0851cd2:   jne    0x00007f56e0851cec
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007f56e0851cd8:   movabs $0x7f56e5be9578,%rdi         ;   {external_word}
  0x00007f56e0851ce2:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0851ce6:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0851ceb:   hlt    
  0x00007f56e0851cec:   mov    %rax,%r8
  0x00007f56e0851cef:   shr    $0x3,%r8
  0x00007f56e0851cf3:   mov    %r8d,0x0(%r13)
  0x00007f56e0851cf7:   mov    %r13,%r11
  0x00007f56e0851cfa:   xor    %r11,%r10
  0x00007f56e0851cfd:   shr    $0x18,%r10
  0x00007f56e0851d01:   test   %r10,%r10
  0x00007f56e0851d04:   je     0x00007f56e0851bf1
 ;; B20: #	out( B9 B21 ) <- in( B19 )  Freq: 2033.78
  0x00007f56e0851d0a:   shr    $0x9,%r11
  0x00007f56e0851d0e:   movabs $0x7f56c7a3e000,%rdi
  0x00007f56e0851d18:   add    %r11,%rdi
  0x00007f56e0851d1b:   nop
  0x00007f56e0851d1c:   nop
  0x00007f56e0851d1d:   nop
  0x00007f56e0851d1e:   nop
  0x00007f56e0851d1f:   nop
  0x00007f56e0851d20:   cmpb   $0x2,(%rdi)
  0x00007f56e0851d23:   je     0x00007f56e0851bf1
 ;; B21: #	out( B9 B22 ) <- in( B20 )  Freq: 2.03378
  0x00007f56e0851d29:   mov    0x48(%r15),%r10              ;*putstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@6 (line 21)
  0x00007f56e0851d2d:   mov    0x40(%r15),%r11
  0x00007f56e0851d31:   lock addl $0x0,-0x40(%rsp)
  0x00007f56e0851d37:   nop
  0x00007f56e0851d38:   nop
  0x00007f56e0851d39:   nop
  0x00007f56e0851d3a:   nop
  0x00007f56e0851d3b:   nop
  0x00007f56e0851d3c:   nop
  0x00007f56e0851d3d:   nop
  0x00007f56e0851d3e:   nop
  0x00007f56e0851d3f:   nop
  0x00007f56e0851d40:   cmpb   $0x0,(%rdi)
  0x00007f56e0851d43:   je     0x00007f56e0851bf1
 ;; B22: #	out( B8 B23 ) <- in( B21 )  Freq: 1.01689
  0x00007f56e0851d49:   mov    %r12b,(%rdi)
  0x00007f56e0851d4c:   test   %r11,%r11
  0x00007f56e0851d4f:   je     0x00007f56e0851bd9
 ;; B23: #	out( B9 ) <- in( B22 )  Freq: 0.508444
  0x00007f56e0851d55:   mov    %rdi,-0x8(%r10,%r11,1)       ;*aastore {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@31 (line 23)
  0x00007f56e0851d5a:   add    $0xfffffffffffffff8,%r11
  0x00007f56e0851d5e:   mov    %r11,0x40(%r15)
  0x00007f56e0851d62:   jmpq   0x00007f56e0851bf1
 ;; B24: #	out( B19 B25 ) <- in( B18 )  Freq: 2.03579
  0x00007f56e0851d67:   mov    0x0(%r13),%r10d
  0x00007f56e0851d6b:   test   %r10d,%r10d
  0x00007f56e0851d6e:   je     0x00007f56e0851cab
 ;; B25: #	out( B44 B26 ) <- in( B24 )  Freq: 1.01789
  0x00007f56e0851d74:   mov    0x28(%r15),%r11
  0x00007f56e0851d78:   mov    %r10,%rdi
  0x00007f56e0851d7b:   cmp    0x5f52bfe(%rip),%r12        # 0x00007f56e67a4980
                                                            ;   {external_word}
  0x00007f56e0851d82:   je     0x00007f56e0851d9c
 ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f56e0851d88:   movabs $0x7f56e5be95e8,%rdi         ;   {external_word}
  0x00007f56e0851d92:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0851d96:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0851d9b:   hlt    
  0x00007f56e0851d9c:   shl    $0x3,%rdi
  0x00007f56e0851da0:   test   %r11,%r11
  0x00007f56e0851da3:   je     0x00007f56e0851fba           ;*putstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@6 (line 21)
 ;; B26: #	out( B19 ) <- in( B25 )  Freq: 1.01688
  0x00007f56e0851da9:   mov    0x30(%r15),%r10
  0x00007f56e0851dad:   mov    %rdi,-0x8(%r10,%r11,1)       ;*aastore {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@31 (line 23)
  0x00007f56e0851db2:   add    $0xfffffffffffffff8,%r11     ;*putstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@6 (line 21)
  0x00007f56e0851db6:   mov    %r11,0x28(%r15)              ;*aastore {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@31 (line 23)
  0x00007f56e0851dba:   jmpq   0x00007f56e0851cab           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@16 (line 22)
 ;; B27: #	out( B56 B28 ) <- in( B10 B6 )  Freq: 0.993809
  0x00007f56e0851dbf:   movabs $0x11f7e5538,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f7e5538} = 'TestFlatArrayVectorization')}
  0x00007f56e0851dc9:   mov    0x74(%r10),%r11d             ;*getstatic rd {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@41 (line 25)
  0x00007f56e0851dcd:   test   %r11d,%r11d
  0x00007f56e0851dd0:   je     0x00007f56e08520ec           ;*ifgt {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@1 (line 557)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
 ;; B28: #	out( B68 B29 ) <- in( B27 )  Freq: 0.993808
  0x00007f56e0851dd6:   mov    0x70(%r10),%r8d              ;*getstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@38 (line 25)
  0x00007f56e0851dda:   mov    %r8d,0x4(%rsp)
  0x00007f56e0851ddf:   lea    (%r12,%r11,8),%r10           ;*getstatic rd {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@41 (line 25)
  0x00007f56e0851de3:   mov    %r10,0x8(%rsp)
  0x00007f56e0851de8:   mov    %r11d,(%rsp)
  0x00007f56e0851dec:   mov    %r10,%rsi
  0x00007f56e0851def:   mov    $0x1f,%edx
  0x00007f56e0851df4:   nop
  0x00007f56e0851df5:   nop
  0x00007f56e0851df6:   nop
  0x00007f56e0851df7:   callq  0x00007f56e07ae020           ; ImmutableOopMap {[0]=NarrowOop [4]=NarrowOop [8]=Oop }
                                                            ;*invokevirtual next {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@17 (line 559)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
                                                            ;   {optimized virtual_call}
  0x00007f56e0851dfc:   nopl   0x10006ec(%rax,%rax,1)       ;*invokevirtual next {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@17 (line 559)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
                                                            ;   {other}
 ;; B29: #	out( B36 B30 ) <- in( B28 )  Freq: 0.993789
  0x00007f56e0851e04:   mov    %eax,%r11d
  0x00007f56e0851e07:   sar    $0xb,%r11d
  0x00007f56e0851e0b:   mov    %eax,%ebp
  0x00007f56e0851e0d:   and    $0x7ff,%ebp
  0x00007f56e0851e13:   add    %r11d,%ebp
  0x00007f56e0851e16:   mov    %ebp,%r11d
  0x00007f56e0851e19:   sar    $0xb,%r11d
  0x00007f56e0851e1d:   and    $0x7ff,%ebp
  0x00007f56e0851e23:   add    %r11d,%ebp
  0x00007f56e0851e26:   lea    -0x7ff(%rbp),%r11d
  0x00007f56e0851e2d:   test   %eax,%eax
  0x00007f56e0851e2f:   mov    $0x1,%r10d
  0x00007f56e0851e35:   mov    $0x7ff,%r8d
  0x00007f56e0851e3b:   cmovge %r8d,%r10d
  0x00007f56e0851e3f:   cmp    %r10d,%ebp
  0x00007f56e0851e42:   cmovge %r11d,%ebp                   ;*irem {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@52 (line 565)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
  0x00007f56e0851e46:   sub    %ebp,%eax
  0x00007f56e0851e48:   add    $0x7fe,%eax
  0x00007f56e0851e4d:   test   %eax,%eax
  0x00007f56e0851e4f:   jl     0x00007f56e0851eb0           ;*ifge {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@58 (line 565)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
 ;; B30: #	out( B65 B31 ) <- in( B29 B38 )  Freq: 0.993739
  0x00007f56e0851e55:   mov    0x4(%rsp),%r8d
  0x00007f56e0851e5a:   mov    0xc(%r12,%r8,8),%r11d        ; implicit exception: dispatches to 0x00007f56e0852220
 ;; B31: #	out( B57 B32 ) <- in( B30 )  Freq: 0.993738
  0x00007f56e0851e5f:   nop
  0x00007f56e0851e60:   cmp    %r11d,%ebp
  0x00007f56e0851e63:   jae    0x00007f56e0852114
 ;; B32: #	out( B59 B33 ) <- in( B31 )  Freq: 0.993737
  0x00007f56e0851e69:   mov    (%r12,%r8,8),%r10
  0x00007f56e0851e6d:   test   $0x1,%r10b
  0x00007f56e0851e71:   je     0x00007f56e0852146
 ;; B33: #	out( B58 B34 ) <- in( B32 B59 )  Freq: 0.993737
  0x00007f56e0851e77:   lea    (%r12,%r8,8),%r11
  0x00007f56e0851e7b:   nop
  0x00007f56e0851e7c:   nop
  0x00007f56e0851e7d:   nop
  0x00007f56e0851e7e:   nop
  0x00007f56e0851e7f:   nop
  0x00007f56e0851e80:   test   $0x10,%r10b
  0x00007f56e0851e84:   jne    0x00007f56e085213c
 ;; B34: #	out( B66 B35 ) <- in( B33 )  Freq: 0.993736
  0x00007f56e0851e8a:   mov    0x10(%r11,%rbp,4),%r11d
  0x00007f56e0851e8f:   mov    0xc(%r12,%r11,8),%eax        ; implicit exception: dispatches to 0x00007f56e0852248
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@50 (line 25)
 ;; B35: #	out( N1 ) <- in( B58 B34 )  Freq: 0.993736
  0x00007f56e0851e94:   add    $0x30,%rsp
  0x00007f56e0851e98:   pop    %rbp
  0x00007f56e0851e99:   cmp    0x4a0(%r15),%rsp             ;   {poll_return}
  0x00007f56e0851ea0:   ja     0x00007f56e085228f
  0x00007f56e0851ea6:   retq   
  0x00007f56e0851ea7:   nop
  0x00007f56e0851ea8:   nop
  0x00007f56e0851ea9:   nop
  0x00007f56e0851eaa:   nop
  0x00007f56e0851eab:   nop
  0x00007f56e0851eac:   nop
  0x00007f56e0851ead:   nop
  0x00007f56e0851eae:   nop
  0x00007f56e0851eaf:   nop                                 ;*aload_0 {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@61 (line 566)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
 ;; B36: #	out( B69 B37 ) <- in( B29 B37 ) Loop( B36-B37 inner ) Freq: 4.96854
  0x00007f56e0851eb0:   mov    0x8(%rsp),%rsi
  0x00007f56e0851eb5:   mov    $0x1f,%edx
  0x00007f56e0851eba:   nop
  0x00007f56e0851ebb:   callq  0x00007f56e07ae020           ; ImmutableOopMap {[0]=NarrowOop [4]=NarrowOop [8]=Oop }
                                                            ;*invokevirtual next {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@64 (line 566)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
                                                            ;   {optimized virtual_call}
  0x00007f56e0851ec0:   nopl   0x20007b0(%rax,%rax,1)       ;*putstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@6 (line 21)
                                                            ;   {other}
 ;; B37: #	out( B36 B38 ) <- in( B36 )  Freq: 4.96844
  0x00007f56e0851ec8:   mov    0x4a8(%r15),%r10             ; ImmutableOopMap {[0]=NarrowOop [4]=NarrowOop [8]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - (reexecute) java.util.Random::nextInt@69 (line 566)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
  0x00007f56e0851ecf:   test   %eax,(%r10)                  ;*goto {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@69 (line 566)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
                                                            ;   {poll}
  0x00007f56e0851ed2:   test   %eax,%eax
  0x00007f56e0851ed4:   mov    $0x1,%r10d
  0x00007f56e0851eda:   mov    $0x7ff,%r11d
  0x00007f56e0851ee0:   cmovge %r11d,%r10d
  0x00007f56e0851ee4:   mov    %eax,%ebp
  0x00007f56e0851ee6:   and    $0x7ff,%ebp
  0x00007f56e0851eec:   mov    %eax,%r11d
  0x00007f56e0851eef:   sar    $0xb,%r11d
  0x00007f56e0851ef3:   add    %r11d,%ebp
  0x00007f56e0851ef6:   mov    %ebp,%r8d
  0x00007f56e0851ef9:   sar    $0xb,%r8d
  0x00007f56e0851efd:   and    $0x7ff,%ebp
  0x00007f56e0851f03:   add    %r8d,%ebp
  0x00007f56e0851f06:   lea    -0x7ff(%rbp),%r8d
  0x00007f56e0851f0d:   cmp    %r10d,%ebp
  0x00007f56e0851f10:   cmovge %r8d,%ebp                    ;*irem {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@52 (line 565)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
  0x00007f56e0851f14:   sub    %ebp,%eax
  0x00007f56e0851f16:   add    $0x7fe,%eax
  0x00007f56e0851f1b:   nop
  0x00007f56e0851f1c:   nop
  0x00007f56e0851f1d:   nop
  0x00007f56e0851f1e:   nop
  0x00007f56e0851f1f:   nop
  0x00007f56e0851f20:   test   %eax,%eax
  0x00007f56e0851f22:   jl     0x00007f56e0851eb0           ;*ifge {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@58 (line 565)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
 ;; B38: #	out( B30 ) <- in( B37 )  Freq: 0.496845
  0x00007f56e0851f24:   jmpq   0x00007f56e0851e55
 ;; B39: #	out( B64 B40 ) <- in( B16 )  Freq: 0.203615
  0x00007f56e0851f29:   mov    %r9,0x10(%rsp)
  0x00007f56e0851f2e:   mov    %ebx,0x8(%rsp)
  0x00007f56e0851f32:   mov    %r11d,0x4(%rsp)
  0x00007f56e0851f37:   mov    %r10d,(%rsp)                 ;*aastore {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@31 (line 23)
  0x00007f56e0851f3b:   movabs $0x2608ba40,%rsi             ;   {metadata('SimpleValue')}
  0x00007f56e0851f45:   xor    %edx,%edx
  0x00007f56e0851f47:   callq  0x00007f56e06b7da0           ; ImmutableOopMap {rbp=Oop [0]=NarrowOop }
                                                            ;*aastore {reexecute=1 rethrow=0 return_oop=1 return_scalarized=0}
                                                            ; - (reexecute) TestFlatArrayVectorization::test@31 (line 23)
                                                            ;   {runtime_call _new_instance_Java}
  0x00007f56e0851f4c:   nopl   0x400083c(%rax,%rax,1)       ;   {other}
 ;; B40: #	out( B18 ) <- in( B39 )  Freq: 0.203611
  0x00007f56e0851f54:   mov    0x4(%rsp),%r11d
  0x00007f56e0851f59:   mov    0x8(%rsp),%ebx
  0x00007f56e0851f5d:   mov    0x10(%rsp),%r9
  0x00007f56e0851f62:   jmpq   0x00007f56e0851c97           ;*aastore {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@31 (line 23)
 ;; B41: #	out( N1 ) <- in( B13 )  Freq: 0.00206285
  0x00007f56e0851f67:   mov    $0xffffffe4,%esi
  0x00007f56e0851f6c:   mov    %r10d,(%rsp)
  0x00007f56e0851f70:   mov    %r11d,0x4(%rsp)
  0x00007f56e0851f75:   mov    %r11d,0x8(%rsp)
  0x00007f56e0851f7a:   nop
  0x00007f56e0851f7b:   callq  0x00007f56e07beea0           ; ImmutableOopMap {[0]=NarrowOop }
                                                            ;*aastore {reexecute=1 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - (reexecute) TestFlatArrayVectorization::test@31 (line 23)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f56e0851f80:   nopl   0x5000870(%rax,%rax,1)       ;   {other}
  0x00007f56e0851f88:   movabs $0x7f56e593d750,%rdi         ;   {external_word}
  0x00007f56e0851f92:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0851f96:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0851f9b:   hlt    
 ;; B42: #	out( B9 ) <- in( B15 )  Freq: 0.00206285
  0x00007f56e0851f9c:   mov    %r11d,0x10(%rbp,%r9,1)       ;*aastore {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@31 (line 23)
  0x00007f56e0851fa1:   jmpq   0x00007f56e0851bf1
 ;; B43: #	out( B15 ) <- in( B14 )  Freq: 0.00206285
  0x00007f56e0851fa6:   mov    0x8(%r12,%r10,8),%r9d
  0x00007f56e0851fab:   mov    %r9d,%r8d
  0x00007f56e0851fae:   mov    0xb8(%r8),%r8
  0x00007f56e0851fb5:   jmpq   0x00007f56e0851c37
 ;; B44: #	out( B19 ) <- in( B25 )  Freq: 0.00101788
  0x00007f56e0851fba:   mov    %rax,%rbp                    ;*putstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@6 (line 21)
  0x00007f56e0851fbd:   mov    %r15,%rsi
  0x00007f56e0851fc0:   movabs $0x7f56e47954b2,%r10
  0x00007f56e0851fca:   callq  *%r10
  0x00007f56e0851fcd:   nopl   0x0(%rax,%rax,1)             ;*aastore {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@31 (line 23)
                                                            ;   {other}
  0x00007f56e0851fd5:   mov    %rbp,%rax
  0x00007f56e0851fd8:   jmpq   0x00007f56e0851cab
 ;; B45: #	out( B4 B46 ) <- in( B3 )  Freq: 0.000999987
  0x00007f56e0851fdd:   movabs $0x11f7e5538,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f7e5538} = 'TestFlatArrayVectorization')}
  0x00007f56e0851fe7:   mov    0x70(%r10),%r10d
  0x00007f56e0851feb:   test   %r10d,%r10d
  0x00007f56e0851fee:   je     0x00007f56e0851b10
 ;; B46: #	out( B60 B47 ) <- in( B45 )  Freq: 0.000499994
  0x00007f56e0851ff4:   mov    0x28(%r15),%r11
  0x00007f56e0851ff8:   mov    %r10,%rdi
  0x00007f56e0851ffb:   cmp    0x5f5297e(%rip),%r12        # 0x00007f56e67a4980
                                                            ;   {external_word}
  0x00007f56e0852002:   je     0x00007f56e085201c
 ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f56e0852008:   movabs $0x7f56e5be95e8,%rdi         ;   {external_word}
  0x00007f56e0852012:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0852016:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e085201b:   hlt    
  0x00007f56e085201c:   shl    $0x3,%rdi
  0x00007f56e0852020:   test   %r11,%r11
  0x00007f56e0852023:   je     0x00007f56e085215a
 ;; B47: #	out( B4 ) <- in( B46 )  Freq: 0.000499494
  0x00007f56e0852029:   mov    0x30(%r15),%r10
  0x00007f56e085202d:   mov    %rdi,-0x8(%r10,%r11,1)
  0x00007f56e0852032:   add    $0xfffffffffffffff8,%r11
  0x00007f56e0852036:   mov    %r11,0x28(%r15)
  0x00007f56e085203a:   jmpq   0x00007f56e0851b10
 ;; B48: #	out( B52 B49 ) <- in( B5 )  Freq: 0.000999
  0x00007f56e085203f:   mov    0x40(%r15),%r10
  0x00007f56e0852043:   mov    0x48(%r15),%r11
  0x00007f56e0852047:   lock addl $0x0,-0x40(%rsp)
  0x00007f56e085204d:   cmpb   $0x0,(%rdi)
  0x00007f56e0852050:   je     0x00007f56e0852081
 ;; B49: #	out( B51 B50 ) <- in( B48 )  Freq: 0.0004995
  0x00007f56e0852052:   mov    %r12b,(%rdi)
  0x00007f56e0852055:   test   %r10,%r10
  0x00007f56e0852058:   je     0x00007f56e0852069
 ;; B50: #	out( B52 ) <- in( B49 )  Freq: 0.00024975
  0x00007f56e085205a:   mov    %rdi,-0x8(%r11,%r10,1)
  0x00007f56e085205f:   add    $0xfffffffffffffff8,%r10
  0x00007f56e0852063:   mov    %r10,0x40(%r15)
  0x00007f56e0852067:   jmp    0x00007f56e0852081
 ;; B51: #	out( B52 ) <- in( B49 )  Freq: 0.00024975
  0x00007f56e0852069:   mov    %r15,%rsi
  0x00007f56e085206c:   movabs $0x7f56e479563a,%r10
  0x00007f56e0852076:   callq  *%r10
  0x00007f56e0852079:   nopl   0x0(%rax,%rax,1)             ;*putstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@6 (line 21)
                                                            ;   {other}
 ;; B52: #	out( B61 B53 ) <- in( B51 B50 B48 )  Freq: 0.000999
  0x00007f56e0852081:   movabs $0x11f7e5538,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f7e5538} = 'TestFlatArrayVectorization')}
  0x00007f56e085208b:   mov    0x70(%r10),%r11d             ;*getstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@12 (line 22)
  0x00007f56e085208f:   test   %r11d,%r11d
  0x00007f56e0852092:   je     0x00007f56e0852177           ;*arraylength {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@15 (line 22)
 ;; B53: #	out( B6 ) <- in( B52 )  Freq: 0.000998999
  0x00007f56e0852098:   mov    %r11,%r10
  0x00007f56e085209b:   cmp    0x5f528de(%rip),%r12        # 0x00007f56e67a4980
                                                            ;   {external_word}
  0x00007f56e08520a2:   je     0x00007f56e08520bc
 ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f56e08520a8:   movabs $0x7f56e5be95e8,%rdi         ;   {external_word}
  0x00007f56e08520b2:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e08520b6:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e08520bb:   hlt    
  0x00007f56e08520bc:   shl    $0x3,%r10                    ;*getstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@12 (line 22)
  0x00007f56e08520c0:   mov    %r10,%rbx
  0x00007f56e08520c3:   jmpq   0x00007f56e0851b96
 ;; B54: #	out( B67 B55 ) <- in( B1 )  Freq: 0.000100017
  0x00007f56e08520c8:   mov    $0x800,%edx
  0x00007f56e08520cd:   movabs $0x2608b400,%rsi             ;   {metadata('SimpleValue'[])}
  0x00007f56e08520d7:   callq  0x00007f56e06b7320           ; ImmutableOopMap {}
                                                            ;*anewarray {reexecute=0 rethrow=0 return_oop=1 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@3 (line 21)
                                                            ;   {runtime_call _new_array_Java}
  0x00007f56e08520dc:   nopl   0x60009cc(%rax,%rax,1)       ;*anewarray {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@3 (line 21)
                                                            ;   {other}
 ;; B55: #	out( B3 ) <- in( B54 )  Freq: 0.000100015
  0x00007f56e08520e4:   mov    %rax,%rbx
  0x00007f56e08520e7:   jmpq   0x00007f56e0851b05
 ;; B56: #	out( N1 ) <- in( B27 )  Freq: 1.00701e-06
  0x00007f56e08520ec:   mov    $0xfffffff6,%esi
  0x00007f56e08520f1:   nop
  0x00007f56e08520f2:   nop
  0x00007f56e08520f3:   callq  0x00007f56e07beea0           ; ImmutableOopMap {}
                                                            ;*invokevirtual nextInt {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f56e08520f8:   nopl   0x70009e8(%rax,%rax,1)       ;   {other}
  0x00007f56e0852100:   movabs $0x7f56e593d750,%rdi         ;   {external_word}
  0x00007f56e085210a:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e085210e:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0852113:   hlt                                 ;*invokevirtual nextInt {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
 ;; B57: #	out( N1 ) <- in( B31 )  Freq: 1.00693e-06
  0x00007f56e0852114:   mov    $0xffffffe4,%esi
  0x00007f56e0852119:   nop
  0x00007f56e085211a:   nop
  0x00007f56e085211b:   callq  0x00007f56e07beea0           ; ImmutableOopMap {[4]=NarrowOop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@50 (line 25)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f56e0852120:   nopl   0x8000a10(%rax,%rax,1)       ;   {other}
  0x00007f56e0852128:   movabs $0x7f56e593d750,%rdi         ;   {external_word}
  0x00007f56e0852132:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0852136:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e085213b:   hlt    
 ;; B58: #	out( B35 ) <- in( B33 )  Freq: 1.00693e-06
  0x00007f56e085213c:   mov    0x10(%r11,%rbp,4),%eax       ;*aaload {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@50 (line 25)
  0x00007f56e0852141:   jmpq   0x00007f56e0851e94
 ;; B59: #	out( B33 ) <- in( B32 )  Freq: 1.00693e-06
  0x00007f56e0852146:   mov    0x8(%r12,%r8,8),%r10d
  0x00007f56e085214b:   mov    %r10d,%r11d
  0x00007f56e085214e:   mov    0xb8(%r11),%r10
  0x00007f56e0852155:   jmpq   0x00007f56e0851e77
 ;; B60: #	out( B4 ) <- in( B46 )  Freq: 4.99987e-07
  0x00007f56e085215a:   mov    %r15,%rsi
  0x00007f56e085215d:   movabs $0x7f56e47954b2,%r10
  0x00007f56e0852167:   callq  *%r10
  0x00007f56e085216a:   nopl   0x0(%rax,%rax,1)             ;*putstatic varr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@6 (line 21)
                                                            ;   {other}
  0x00007f56e0852172:   jmpq   0x00007f56e0851b10
 ;; B61: #	out( N1 ) <- in( B52 )  Freq: 1.01227e-09
  0x00007f56e0852177:   mov    $0xfffffff6,%esi
  0x00007f56e085217c:   nop
  0x00007f56e085217d:   nop
  0x00007f56e085217e:   nop
  0x00007f56e085217f:   callq  0x00007f56e07beea0           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@15 (line 22)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f56e0852184:   nopl   0x9000a74(%rax,%rax,1)       ;   {other}
  0x00007f56e085218c:   movabs $0x7f56e593d750,%rdi         ;   {external_word}
  0x00007f56e0852196:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e085219a:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e085219f:   hlt                                 ;*aastore {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@31 (line 23)
 ;; B62: #	out( N1 ) <- in( B12 )  Freq: 0.00206285
  0x00007f56e08521a0:   mov    $0xfffffff6,%esi
  0x00007f56e08521a5:   mov    %r11d,(%rsp)
  0x00007f56e08521a9:   nop
  0x00007f56e08521aa:   nop
  0x00007f56e08521ab:   callq  0x00007f56e07beea0           ; ImmutableOopMap {}
                                                            ;*aastore {reexecute=1 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - (reexecute) TestFlatArrayVectorization::test@31 (line 23)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f56e08521b0:   nopl   0xa000aa0(%rax,%rax,1)       ;   {other}
  0x00007f56e08521b8:   movabs $0x7f56e593d750,%rdi         ;   {external_word}
  0x00007f56e08521c2:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e08521c6:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e08521cb:   hlt    
 ;; B63: #	out( N1 ) <- in( B9 )  Freq: 0.00206285
  0x00007f56e08521cc:   mov    $0xfffffff6,%esi
  0x00007f56e08521d1:   nop
  0x00007f56e08521d2:   nop
  0x00007f56e08521d3:   callq  0x00007f56e07beea0           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@15 (line 22)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f56e08521d8:   nopl   0xb000ac8(%rax,%rax,1)       ;   {other}
  0x00007f56e08521e0:   movabs $0x7f56e593d750,%rdi         ;   {external_word}
  0x00007f56e08521ea:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e08521ee:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e08521f3:   hlt                                 ;*aastore {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@31 (line 23)
 ;; B64: #	out( N1 ) <- in( B39 )  Freq: 2.03615e-06
  0x00007f56e08521f4:   mov    $0xffffff97,%esi
  0x00007f56e08521f9:   mov    0x4(%rsp),%ebp
  0x00007f56e08521fd:   nop
  0x00007f56e08521fe:   nop
  0x00007f56e08521ff:   callq  0x00007f56e07beea0           ; ImmutableOopMap {[0]=NarrowOop }
                                                            ;*aastore {reexecute=1 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - (reexecute) TestFlatArrayVectorization::test@31 (line 23)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f56e0852204:   nopl   0xc000af4(%rax,%rax,1)       ;   {other}
  0x00007f56e085220c:   movabs $0x7f56e593d750,%rdi         ;   {external_word}
  0x00007f56e0852216:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e085221a:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e085221f:   hlt                                 ;*aastore {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@31 (line 23)
 ;; B65: #	out( N1 ) <- in( B30 )  Freq: 1.00693e-06
  0x00007f56e0852220:   mov    $0xfffffff6,%esi
  0x00007f56e0852225:   nop
  0x00007f56e0852226:   nop
  0x00007f56e0852227:   callq  0x00007f56e07beea0           ; ImmutableOopMap {}
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@50 (line 25)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f56e085222c:   nopl   0xd000b1c(%rax,%rax,1)       ;   {other}
  0x00007f56e0852234:   movabs $0x7f56e593d750,%rdi         ;   {external_word}
  0x00007f56e085223e:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0852242:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0852247:   hlt    
 ;; B66: #	out( N1 ) <- in( B34 )  Freq: 1.00693e-06
  0x00007f56e0852248:   xor    %ebp,%ebp
  0x00007f56e085224a:   test   %r11d,%r11d
  0x00007f56e085224d:   setne  %bpl                         ;*aaload {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@50 (line 25)
  0x00007f56e0852251:   mov    $0xffffff5e,%esi
  0x00007f56e0852256:   nop
  0x00007f56e0852257:   callq  0x00007f56e07beea0           ; ImmutableOopMap {}
                                                            ;*getfield field {reexecute=1 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - (reexecute) TestFlatArrayVectorization::test@51 (line 25)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f56e085225c:   nopl   0xe000b4c(%rax,%rax,1)       ;   {other}
  0x00007f56e0852264:   movabs $0x7f56e593d750,%rdi         ;   {external_word}
  0x00007f56e085226e:   and    $0xfffffffffffffff0,%rsp
  0x00007f56e0852272:   callq  0x00007f56e4d5a704           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f56e0852277:   hlt                                 ;*anewarray {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@3 (line 21)
 ;; B67: #	out( B70 ) <- in( B54 )  Freq: 1.00017e-09
  0x00007f56e0852278:   mov    %rax,%rsi
  0x00007f56e085227b:   jmp    0x00007f56e0852285           ;*invokevirtual next {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@17 (line 559)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
 ;; B68: #	out( B70 ) <- in( B28 )  Freq: 9.93808e-06
  0x00007f56e085227d:   mov    %rax,%rsi
  0x00007f56e0852280:   jmp    0x00007f56e0852285           ;*invokevirtual next {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Random::nextInt@64 (line 566)
                                                            ; - TestFlatArrayVectorization::test@47 (line 25)
 ;; B69: #	out( B70 ) <- in( B36 )  Freq: 4.96854e-05
  0x00007f56e0852282:   mov    %rax,%rsi                    ;*anewarray {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@3 (line 21)
 ;; B70: #	out( N1 ) <- in( B67 B68 B69 )  Freq: 5.96245e-05
  0x00007f56e0852285:   add    $0x30,%rsp
  0x00007f56e0852289:   pop    %rbp
  0x00007f56e085228a:   jmpq   0x00007f56e07fa8a0           ;*aastore {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - TestFlatArrayVectorization::test@31 (line 23)
                                                            ;   {runtime_call _rethrow_Java}
  0x00007f56e085228f:   movabs $0x7f56e0851e99,%r10         ;   {internal_word}
  0x00007f56e0852299:   mov    %r10,0x4b8(%r15)
  0x00007f56e08522a0:   jmpq   0x00007f56e07bdd20           ;   {runtime_call SafepointBlob}
  0x00007f56e08522a5:   callq  Stub::nmethod_entry_barrier  ;   {runtime_call StubRoutines (final stubs)}
  0x00007f56e08522aa:   jmpq   0x00007f56e0851a3a
  0x00007f56e08522af:   hlt    
[Stub Code]
  0x00007f56e08522b0:   movabs $0x0,%rbx                    ;   {no_reloc}
  0x00007f56e08522ba:   jmpq   0x00007f56e08522ba           ;   {runtime_call}
  0x00007f56e08522bf:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00007f56e08522c9:   jmpq   0x00007f56e08522c9           ;   {runtime_call}
[Exception Handler]
  0x00007f56e08522ce:   jmpq   0x00007f56e0711aa0           ;   {runtime_call ExceptionBlob}
[Deopt Handler Code]
  0x00007f56e08522d3:   callq  0x00007f56e08522d8
  0x00007f56e08522d8:   subq   $0x5,(%rsp)
  0x00007f56e08522dd:   jmpq   0x00007f56e07bf1e0           ;   {runtime_call DeoptimizationBlob}
  0x00007f56e08522e2:   hlt    
  0x00007f56e08522e3:   hlt    
  0x00007f56e08522e4:   hlt    
  0x00007f56e08522e5:   hlt    
  0x00007f56e08522e6:   hlt    
  0x00007f56e08522e7:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007f56e08522e8:   0x000000011f7e6c08 a 'java/lang/Class'{0x000000011f7e6c08} = 'SimpleValue'
  0x00007f56e08522f0:   0x000000011f0a4c40 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f0a4c40}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007f56e08522f8:   0x000000002608b400 'SimpleValue'[]
  0x00007f56e0852300:   0x00007f5684715d20 {method} {0x00007f5684715d20} 'test' '()I' in 'TestFlatArrayVectorization'
  0x00007f56e0852308:   0x000000002608ba40 'SimpleValue'
  0x00007f56e0852310:   0x00007f56846f4248 {method} {0x00007f56846f4248} 'nextInt' '(I)I' in 'java/util/Random'
  0x00007f56e0852318:   0x00007f5684716400 {method} {0x00007f5684716400} '<init>' '(I)V' in 'SimpleValue'
  0x00007f56e0852320:   0x00007f5684000638 {method} {0x00007f5684000638} '<init>' '()V' in 'java/lang/Object'
  0x00007f56e0852328:   0x00000000260e8f00 'java/util/Random'
  0x00007f56e0852330:   0x00007f56846f3e98 {method} {0x00007f56846f3e98} 'next' '(I)I' in 'java/util/Random'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007f56e0851a1f offset=ffffffff bits=0):
PcDesc(pc=0x00007f56e0851b96 offset=176 bits=0):
   TestFlatArrayVectorization::test@6 (line 21)
PcDesc(pc=0x00007f56e0851ba9 offset=189 bits=0):
   TestFlatArrayVectorization::test@16 (line 22)
PcDesc(pc=0x00007f56e0851bf1 offset=1d1 bits=0):
   TestFlatArrayVectorization::test@6 (line 21)
PcDesc(pc=0x00007f56e0851bf8 offset=1d8 bits=1):
   TestFlatArrayVectorization::test@35 (line 22)  reexecute=true
   Locals
    - l0: reg rbx [6],int
PcDesc(pc=0x00007f56e0851bfb offset=1db bits=0):
   TestFlatArrayVectorization::test@35 (line 22)
PcDesc(pc=0x00007f56e0851c09 offset=1e9 bits=0):
   TestFlatArrayVectorization::test@12 (line 22)
PcDesc(pc=0x00007f56e0851c3b offset=21b bits=0):
   TestFlatArrayVectorization::test@19 (line 23)
PcDesc(pc=0x00007f56e0851d2d offset=30d bits=0):
   TestFlatArrayVectorization::test@6 (line 21)
PcDesc(pc=0x00007f56e0851d5a offset=33a bits=0):
   TestFlatArrayVectorization::test@31 (line 23)
PcDesc(pc=0x00007f56e0851da9 offset=389 bits=0):
   TestFlatArrayVectorization::test@6 (line 21)
PcDesc(pc=0x00007f56e0851db2 offset=392 bits=0):
   TestFlatArrayVectorization::test@31 (line 23)
PcDesc(pc=0x00007f56e0851db6 offset=396 bits=0):
   TestFlatArrayVectorization::test@6 (line 21)
PcDesc(pc=0x00007f56e0851dba offset=39a bits=0):
   TestFlatArrayVectorization::test@31 (line 23)
PcDesc(pc=0x00007f56e0851dbf offset=39f bits=0):
   TestFlatArrayVectorization::test@16 (line 22)
PcDesc(pc=0x00007f56e0851dcd offset=3ad bits=0):
   TestFlatArrayVectorization::test@41 (line 25)
PcDesc(pc=0x00007f56e0851dd6 offset=3b6 bits=0):
   java.util.Random::nextInt@1 (line 557)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0851dda offset=3ba bits=0):
   TestFlatArrayVectorization::test@38 (line 25)
PcDesc(pc=0x00007f56e0851de3 offset=3c3 bits=0):
   TestFlatArrayVectorization::test@41 (line 25)
PcDesc(pc=0x00007f56e0851dfc offset=3dc bits=0):
   java.util.Random::nextInt@17 (line 559)
   Locals
    - l0: stack[0],narrowoop
    - l1: 2047
    - l2: empty
    - l3: empty
    - l4: empty
   TestFlatArrayVectorization::test@47 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[4],narrowoop
PcDesc(pc=0x00007f56e0851e04 offset=3e4 bits=0):
   java.util.Random::nextInt@17 (line 559)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0851e46 offset=426 bits=0):
   java.util.Random::nextInt@52 (line 565)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0851e55 offset=435 bits=0):
   java.util.Random::nextInt@58 (line 565)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0851e94 offset=474 bits=0):
   TestFlatArrayVectorization::test@50 (line 25)
PcDesc(pc=0x00007f56e0851eb0 offset=490 bits=0):
   java.util.Random::nextInt@61 (line 566)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0851ec0 offset=4a0 bits=0):
   java.util.Random::nextInt@64 (line 566)
   Locals
    - l0: stack[0],narrowoop
    - l1: 2047
    - l2: empty
    - l3: 2046
    - l4: empty
   TestFlatArrayVectorization::test@47 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[4],narrowoop
PcDesc(pc=0x00007f56e0851ec8 offset=4a8 bits=0):
   TestFlatArrayVectorization::test@6 (line 21)
PcDesc(pc=0x00007f56e0851ecf offset=4af bits=1):
   java.util.Random::nextInt@69 (line 566)  reexecute=true
   Locals
    - l0: stack[0],narrowoop
    - l1: 2047
    - l2: empty
    - l3: 2046
    - l4: reg rax [0],int
   TestFlatArrayVectorization::test@47 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[4],narrowoop
PcDesc(pc=0x00007f56e0851ed2 offset=4b2 bits=0):
   java.util.Random::nextInt@69 (line 566)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0851f14 offset=4f4 bits=0):
   java.util.Random::nextInt@52 (line 565)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0851f24 offset=504 bits=0):
   java.util.Random::nextInt@58 (line 565)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0851f3b offset=51b bits=0):
   TestFlatArrayVectorization::test@31 (line 23)
PcDesc(pc=0x00007f56e0851f4c offset=52c bits=5):
   TestFlatArrayVectorization::test@31 (line 23)  reexecute=true
   Locals
    - l0: stack[4]
   Expression stack
    - @0: reg rbp [10],oop
    - @1: stack[4]
    - @2: obj[366]
   Objects
    - 0: R obj[366], SimpleValue
        Fields: stack[4]
PcDesc(pc=0x00007f56e0851f67 offset=547 bits=0):
   TestFlatArrayVectorization::test@31 (line 23)
PcDesc(pc=0x00007f56e0851f80 offset=560 bits=1):
   TestFlatArrayVectorization::test@31 (line 23)  reexecute=true
   Locals
    - l0: stack[4]
   Expression stack
    - @0: stack[0],narrowoop
    - @1: stack[8]
    - @2: obj[514]
   Objects
    - 0: R obj[514], SimpleValue
        Fields: stack[4]
PcDesc(pc=0x00007f56e0851fa1 offset=581 bits=0):
   TestFlatArrayVectorization::test@31 (line 23)
PcDesc(pc=0x00007f56e0851fbd offset=59d bits=0):
   TestFlatArrayVectorization::test@6 (line 21)
PcDesc(pc=0x00007f56e0851fd5 offset=5b5 bits=0):
   TestFlatArrayVectorization::test@31 (line 23)
PcDesc(pc=0x00007f56e0852081 offset=661 bits=0):
   TestFlatArrayVectorization::test@6 (line 21)
PcDesc(pc=0x00007f56e085208f offset=66f bits=0):
   TestFlatArrayVectorization::test@12 (line 22)
PcDesc(pc=0x00007f56e0852098 offset=678 bits=0):
   TestFlatArrayVectorization::test@15 (line 22)
PcDesc(pc=0x00007f56e08520c0 offset=6a0 bits=0):
   TestFlatArrayVectorization::test@12 (line 22)
PcDesc(pc=0x00007f56e08520dc offset=6bc bits=4):
   TestFlatArrayVectorization::test@3 (line 21)
   Locals
    - l0: empty
PcDesc(pc=0x00007f56e08520e4 offset=6c4 bits=0):
   TestFlatArrayVectorization::test@3 (line 21)
PcDesc(pc=0x00007f56e08520f8 offset=6d8 bits=0):
   TestFlatArrayVectorization::test@47 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: empty
    - @1: nullptr
    - @2: 2047
PcDesc(pc=0x00007f56e0852114 offset=6f4 bits=0):
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0852120 offset=700 bits=0):
   TestFlatArrayVectorization::test@50 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[4],narrowoop
    - @1: reg rbp [10],int
PcDesc(pc=0x00007f56e0852141 offset=721 bits=0):
   TestFlatArrayVectorization::test@50 (line 25)
PcDesc(pc=0x00007f56e0852172 offset=752 bits=0):
   TestFlatArrayVectorization::test@6 (line 21)
PcDesc(pc=0x00007f56e0852184 offset=764 bits=0):
   TestFlatArrayVectorization::test@15 (line 22)
   Locals
    - l0: empty
   Expression stack
    - @0: empty
    - @1: nullptr
PcDesc(pc=0x00007f56e08521a0 offset=780 bits=0):
   TestFlatArrayVectorization::test@31 (line 23)
PcDesc(pc=0x00007f56e08521b0 offset=790 bits=1):
   TestFlatArrayVectorization::test@31 (line 23)  reexecute=true
   Locals
    - l0: empty
   Expression stack
    - @0: nullptr
    - @1: stack[0]
    - @2: obj[506]
   Objects
    - 0: R obj[506], SimpleValue
        Fields: stack[0]
PcDesc(pc=0x00007f56e08521d8 offset=7b8 bits=0):
   TestFlatArrayVectorization::test@15 (line 22)
   Locals
    - l0: empty
   Expression stack
    - @0: empty
    - @1: nullptr
PcDesc(pc=0x00007f56e08521f4 offset=7d4 bits=0):
   TestFlatArrayVectorization::test@31 (line 23)
PcDesc(pc=0x00007f56e0852204 offset=7e4 bits=1):
   TestFlatArrayVectorization::test@31 (line 23)  reexecute=true
   Locals
    - l0: reg rbp [10],int
   Expression stack
    - @0: stack[0],narrowoop
    - @1: reg rbp [10],int
    - @2: obj[522]
   Objects
    - 0: R obj[522], SimpleValue
        Fields: reg rbp [10],int
PcDesc(pc=0x00007f56e0852220 offset=800 bits=0):
   TestFlatArrayVectorization::test@31 (line 23)
PcDesc(pc=0x00007f56e085222c offset=80c bits=0):
   TestFlatArrayVectorization::test@50 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: nullptr
    - @1: reg rbp [10],int
PcDesc(pc=0x00007f56e0852251 offset=831 bits=0):
   TestFlatArrayVectorization::test@50 (line 25)
PcDesc(pc=0x00007f56e085225c offset=83c bits=1):
   TestFlatArrayVectorization::test@51 (line 25)  reexecute=true
   Locals
    - l0: empty
   Expression stack
    - @0: obj[568]
   Objects
    - 0: R obj[568], SimpleValue
        Fields: 0
PcDesc(pc=0x00007f56e0852278 offset=858 bits=0):
   TestFlatArrayVectorization::test@3 (line 21)
PcDesc(pc=0x00007f56e085227d offset=85d bits=0):
   java.util.Random::nextInt@17 (line 559)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0852282 offset=862 bits=0):
   java.util.Random::nextInt@64 (line 566)
   TestFlatArrayVectorization::test@47 (line 25)
PcDesc(pc=0x00007f56e0852285 offset=865 bits=0):
   TestFlatArrayVectorization::test@3 (line 21)
PcDesc(pc=0x00007f56e085228f offset=86f bits=0):
   TestFlatArrayVectorization::test@31 (line 23)
PcDesc(pc=0x00007f56e08522e9 offset=8c9 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 15 OopMaps

ImmutableOopMap {} pc offsets: 472 
ImmutableOopMap {[0]=NarrowOop [4]=NarrowOop [8]=Oop } pc offsets: 988 1184 1199 
ImmutableOopMap {rbp=Oop [0]=NarrowOop } pc offsets: 1324 
ImmutableOopMap {[0]=NarrowOop } pc offsets: 1376 
ImmutableOopMap {} pc offsets: 1724 1752 
ImmutableOopMap {[4]=NarrowOop } pc offsets: 1792 
ImmutableOopMap {} pc offsets: 1892 1936 1976 
ImmutableOopMap {[0]=NarrowOop } pc offsets: 2020 
ImmutableOopMap {} pc offsets: 2060 2108 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007f56e0851b96 offset=176):
   TestFlatArrayVectorization::test@6 (line 21)
ScopeDesc(pc=0x00007f56e0851ba9 offset=189):
   TestFlatArrayVectorization::test@16 (line 22)
ScopeDesc(pc=0x00007f56e0851bf1 offset=1d1):
   TestFlatArrayVectorization::test@6 (line 21)
ScopeDesc(pc=0x00007f56e0851bf8 offset=1d8):
   TestFlatArrayVectorization::test@35 (line 22)  reexecute=true
   Locals
    - l0: reg rbx [6],int
ScopeDesc(pc=0x00007f56e0851bfb offset=1db):
   TestFlatArrayVectorization::test@35 (line 22)
ScopeDesc(pc=0x00007f56e0851c09 offset=1e9):
   TestFlatArrayVectorization::test@12 (line 22)
ScopeDesc(pc=0x00007f56e0851c3b offset=21b):
   TestFlatArrayVectorization::test@19 (line 23)
ScopeDesc(pc=0x00007f56e0851d2d offset=30d):
   TestFlatArrayVectorization::test@6 (line 21)
ScopeDesc(pc=0x00007f56e0851d5a offset=33a):
   TestFlatArrayVectorization::test@31 (line 23)
ScopeDesc(pc=0x00007f56e0851da9 offset=389):
   TestFlatArrayVectorization::test@6 (line 21)
ScopeDesc(pc=0x00007f56e0851db2 offset=392):
   TestFlatArrayVectorization::test@31 (line 23)
ScopeDesc(pc=0x00007f56e0851db6 offset=396):
   TestFlatArrayVectorization::test@6 (line 21)
ScopeDesc(pc=0x00007f56e0851dba offset=39a):
   TestFlatArrayVectorization::test@31 (line 23)
ScopeDesc(pc=0x00007f56e0851dbf offset=39f):
   TestFlatArrayVectorization::test@16 (line 22)
ScopeDesc(pc=0x00007f56e0851dcd offset=3ad):
   TestFlatArrayVectorization::test@41 (line 25)
ScopeDesc(pc=0x00007f56e0851dd6 offset=3b6):
   java.util.Random::nextInt@1 (line 557)
ScopeDesc(pc=0x00007f56e0851dd6 offset=3b6):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0851dda offset=3ba):
   TestFlatArrayVectorization::test@38 (line 25)
ScopeDesc(pc=0x00007f56e0851de3 offset=3c3):
   TestFlatArrayVectorization::test@41 (line 25)
ScopeDesc(pc=0x00007f56e0851dfc offset=3dc):
   java.util.Random::nextInt@17 (line 559)
   Locals
    - l0: stack[0],narrowoop
    - l1: 2047
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f56e0851dfc offset=3dc):
   TestFlatArrayVectorization::test@47 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[4],narrowoop
ScopeDesc(pc=0x00007f56e0851e04 offset=3e4):
   java.util.Random::nextInt@17 (line 559)
ScopeDesc(pc=0x00007f56e0851e04 offset=3e4):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0851e46 offset=426):
   java.util.Random::nextInt@52 (line 565)
ScopeDesc(pc=0x00007f56e0851e46 offset=426):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0851e55 offset=435):
   java.util.Random::nextInt@58 (line 565)
ScopeDesc(pc=0x00007f56e0851e55 offset=435):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0851e94 offset=474):
   TestFlatArrayVectorization::test@50 (line 25)
ScopeDesc(pc=0x00007f56e0851eb0 offset=490):
   java.util.Random::nextInt@61 (line 566)
ScopeDesc(pc=0x00007f56e0851eb0 offset=490):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0851ec0 offset=4a0):
   java.util.Random::nextInt@64 (line 566)
   Locals
    - l0: stack[0],narrowoop
    - l1: 2047
    - l2: empty
    - l3: 2046
    - l4: empty
ScopeDesc(pc=0x00007f56e0851ec0 offset=4a0):
   TestFlatArrayVectorization::test@47 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[4],narrowoop
ScopeDesc(pc=0x00007f56e0851ec8 offset=4a8):
   TestFlatArrayVectorization::test@6 (line 21)
ScopeDesc(pc=0x00007f56e0851ecf offset=4af):
   java.util.Random::nextInt@69 (line 566)  reexecute=true
   Locals
    - l0: stack[0],narrowoop
    - l1: 2047
    - l2: empty
    - l3: 2046
    - l4: reg rax [0],int
ScopeDesc(pc=0x00007f56e0851ecf offset=4af):
   TestFlatArrayVectorization::test@47 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[4],narrowoop
ScopeDesc(pc=0x00007f56e0851ed2 offset=4b2):
   java.util.Random::nextInt@69 (line 566)
ScopeDesc(pc=0x00007f56e0851ed2 offset=4b2):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0851f14 offset=4f4):
   java.util.Random::nextInt@52 (line 565)
ScopeDesc(pc=0x00007f56e0851f14 offset=4f4):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0851f24 offset=504):
   java.util.Random::nextInt@58 (line 565)
ScopeDesc(pc=0x00007f56e0851f24 offset=504):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0851f3b offset=51b):
   TestFlatArrayVectorization::test@31 (line 23)
ScopeDesc(pc=0x00007f56e0851f4c offset=52c):
   TestFlatArrayVectorization::test@31 (line 23)  reexecute=true
   Locals
    - l0: stack[4]
   Expression stack
    - @0: reg rbp [10],oop
    - @1: stack[4]
    - @2: obj[366]
   Objects
    - 0: R obj[366], SimpleValue
        Fields: stack[4]
ScopeDesc(pc=0x00007f56e0851f67 offset=547):
   TestFlatArrayVectorization::test@31 (line 23)
ScopeDesc(pc=0x00007f56e0851f80 offset=560):
   TestFlatArrayVectorization::test@31 (line 23)  reexecute=true
   Locals
    - l0: stack[4]
   Expression stack
    - @0: stack[0],narrowoop
    - @1: stack[8]
    - @2: obj[514]
   Objects
    - 0: R obj[514], SimpleValue
        Fields: stack[4]
ScopeDesc(pc=0x00007f56e0851fa1 offset=581):
   TestFlatArrayVectorization::test@31 (line 23)
ScopeDesc(pc=0x00007f56e0851fbd offset=59d):
   TestFlatArrayVectorization::test@6 (line 21)
ScopeDesc(pc=0x00007f56e0851fd5 offset=5b5):
   TestFlatArrayVectorization::test@31 (line 23)
ScopeDesc(pc=0x00007f56e0852081 offset=661):
   TestFlatArrayVectorization::test@6 (line 21)
ScopeDesc(pc=0x00007f56e085208f offset=66f):
   TestFlatArrayVectorization::test@12 (line 22)
ScopeDesc(pc=0x00007f56e0852098 offset=678):
   TestFlatArrayVectorization::test@15 (line 22)
ScopeDesc(pc=0x00007f56e08520c0 offset=6a0):
   TestFlatArrayVectorization::test@12 (line 22)
ScopeDesc(pc=0x00007f56e08520dc offset=6bc):
   TestFlatArrayVectorization::test@3 (line 21)
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f56e08520e4 offset=6c4):
   TestFlatArrayVectorization::test@3 (line 21)
ScopeDesc(pc=0x00007f56e08520f8 offset=6d8):
   TestFlatArrayVectorization::test@47 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: empty
    - @1: nullptr
    - @2: 2047
ScopeDesc(pc=0x00007f56e0852114 offset=6f4):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0852120 offset=700):
   TestFlatArrayVectorization::test@50 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[4],narrowoop
    - @1: reg rbp [10],int
ScopeDesc(pc=0x00007f56e0852141 offset=721):
   TestFlatArrayVectorization::test@50 (line 25)
ScopeDesc(pc=0x00007f56e0852172 offset=752):
   TestFlatArrayVectorization::test@6 (line 21)
ScopeDesc(pc=0x00007f56e0852184 offset=764):
   TestFlatArrayVectorization::test@15 (line 22)
   Locals
    - l0: empty
   Expression stack
    - @0: empty
    - @1: nullptr
ScopeDesc(pc=0x00007f56e08521a0 offset=780):
   TestFlatArrayVectorization::test@31 (line 23)
ScopeDesc(pc=0x00007f56e08521b0 offset=790):
   TestFlatArrayVectorization::test@31 (line 23)  reexecute=true
   Locals
    - l0: empty
   Expression stack
    - @0: nullptr
    - @1: stack[0]
    - @2: obj[506]
   Objects
    - 0: R obj[506], SimpleValue
        Fields: stack[0]
ScopeDesc(pc=0x00007f56e08521d8 offset=7b8):
   TestFlatArrayVectorization::test@15 (line 22)
   Locals
    - l0: empty
   Expression stack
    - @0: empty
    - @1: nullptr
ScopeDesc(pc=0x00007f56e08521f4 offset=7d4):
   TestFlatArrayVectorization::test@31 (line 23)
ScopeDesc(pc=0x00007f56e0852204 offset=7e4):
   TestFlatArrayVectorization::test@31 (line 23)  reexecute=true
   Locals
    - l0: reg rbp [10],int
   Expression stack
    - @0: stack[0],narrowoop
    - @1: reg rbp [10],int
    - @2: obj[522]
   Objects
    - 0: R obj[522], SimpleValue
        Fields: reg rbp [10],int
ScopeDesc(pc=0x00007f56e0852220 offset=800):
   TestFlatArrayVectorization::test@31 (line 23)
ScopeDesc(pc=0x00007f56e085222c offset=80c):
   TestFlatArrayVectorization::test@50 (line 25)
   Locals
    - l0: empty
   Expression stack
    - @0: nullptr
    - @1: reg rbp [10],int
ScopeDesc(pc=0x00007f56e0852251 offset=831):
   TestFlatArrayVectorization::test@50 (line 25)
ScopeDesc(pc=0x00007f56e085225c offset=83c):
   TestFlatArrayVectorization::test@51 (line 25)  reexecute=true
   Locals
    - l0: empty
   Expression stack
    - @0: obj[568]
   Objects
    - 0: R obj[568], SimpleValue
        Fields: 0
ScopeDesc(pc=0x00007f56e0852278 offset=858):
   TestFlatArrayVectorization::test@3 (line 21)
ScopeDesc(pc=0x00007f56e085227d offset=85d):
   java.util.Random::nextInt@17 (line 559)
ScopeDesc(pc=0x00007f56e085227d offset=85d):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0852282 offset=862):
   java.util.Random::nextInt@64 (line 566)
ScopeDesc(pc=0x00007f56e0852282 offset=862):
   TestFlatArrayVectorization::test@47 (line 25)
ScopeDesc(pc=0x00007f56e0852285 offset=865):
   TestFlatArrayVectorization::test@3 (line 21)
ScopeDesc(pc=0x00007f56e085228f offset=86f):
   TestFlatArrayVectorization::test@31 (line 23)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007f56e0851890: 606b
relocInfo@0x00007f56e0851890 [type=12(metadata) addr=0x00007f56e0851a8b offset=107] | [metadata_addr=0x00007f56e0851a8d *=0x000000002608b400 offset=0]metadata_value=0x000000002608b400: 'SimpleValue'[]
         @0x00007f56e0851892: 78016314
relocInfo@0x00007f56e0851894 [type=12(metadata) addr=0x00007f56e0851a9f offset=20 format=3 data=1] | [metadata_addr=0x00007f56e08522f8 *=0x000000002608b400 offset=0]metadata_value=0x000000002608b400: 'SimpleValue'[]
         @0x00007f56e0851896: 0871
relocInfo@0x00007f56e0851896 [type=1(oop) addr=0x00007f56e0851b10 offset=113] | [oop_addr=0x00007f56e0851b12 *=0x000000011f7e5538 offset=0]
         @0x00007f56e0851898: 7c03e67a49807f563910
relocInfo@0x00007f56e08518a0 [type=7(external_word) addr=0x00007f56e0851b20 offset=16 format=1 data={e67a49807f56}] | [target=0x00007f56e67a4980]
         @0x00007f56e08518a2: 7c03e5be95387f56380d
relocInfo@0x00007f56e08518aa [type=7(external_word) addr=0x00007f56e0851b2d offset=13 data={e5be95387f56}] | [target=0x00007f56e5be9538]
         @0x00007f56e08518ac: 310e
relocInfo@0x00007f56e08518ac [type=6(runtime_call) addr=0x00007f56e0851b3b offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08518ae: 7c03e5be95787f56380f
relocInfo@0x00007f56e08518b6 [type=7(external_word) addr=0x00007f56e0851b4a offset=15 data={e5be95787f56}] | [target=0x00007f56e5be9578]
         @0x00007f56e08518b8: 310e
relocInfo@0x00007f56e08518b8 [type=6(runtime_call) addr=0x00007f56e0851b58 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08518ba: 080d
relocInfo@0x00007f56e08518ba [type=1(oop) addr=0x00007f56e0851b65 offset=13] | [oop_addr=0x00007f56e0851b67 *=0x000000011f7e5538 offset=0]
         @0x00007f56e08518bc: 7c03e67a49807f563947
relocInfo@0x00007f56e08518c4 [type=7(external_word) addr=0x00007f56e0851bac offset=71 format=1 data={e67a49807f56}] | [target=0x00007f56e67a4980]
         @0x00007f56e08518c6: 7c03e5be93d07f56380d
relocInfo@0x00007f56e08518ce [type=7(external_word) addr=0x00007f56e0851bb9 offset=13 data={e5be93d07f56}] | [target=0x00007f56e5be93d0]
         @0x00007f56e08518d0: 310e
relocInfo@0x00007f56e08518d0 [type=6(runtime_call) addr=0x00007f56e0851bc7 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08518d2: 8022
relocInfo@0x00007f56e08518d2 [type=16(post_call_nop) addr=0x00007f56e0851be9 offset=34]
         @0x00007f56e08518d4: 500f
relocInfo@0x00007f56e08518d4 [type=10(poll) addr=0x00007f56e0851bf8 offset=15]
         @0x00007f56e08518d6: 0803
relocInfo@0x00007f56e08518d6 [type=1(oop) addr=0x00007f56e0851bfb offset=3] | [oop_addr=0x00007f56e0851bfd *=0x000000011f7e5538 offset=0]
         @0x00007f56e08518d8: 6081
relocInfo@0x00007f56e08518d8 [type=12(metadata) addr=0x00007f56e0851c7c offset=129] | [metadata_addr=0x00007f56e0851c7e *=0x000000002608ba40 offset=0]metadata_value=0x000000002608ba40: 'SimpleValue'
         @0x00007f56e08518da: 78036314
relocInfo@0x00007f56e08518dc [type=12(metadata) addr=0x00007f56e0851c90 offset=20 format=3 data=3] | [metadata_addr=0x00007f56e0852308 *=0x000000002608ba40 offset=0]metadata_value=0x000000002608ba40: 'SimpleValue'
         @0x00007f56e08518de: 7c03e67a49807f56391e
relocInfo@0x00007f56e08518e6 [type=7(external_word) addr=0x00007f56e0851cae offset=30 format=1 data={e67a49807f56}] | [target=0x00007f56e67a4980]
         @0x00007f56e08518e8: 7c03e5be95387f56380d
relocInfo@0x00007f56e08518f0 [type=7(external_word) addr=0x00007f56e0851cbb offset=13 data={e5be95387f56}] | [target=0x00007f56e5be9538]
         @0x00007f56e08518f2: 310e
relocInfo@0x00007f56e08518f2 [type=6(runtime_call) addr=0x00007f56e0851cc9 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08518f4: 7c03e5be95787f56380f
relocInfo@0x00007f56e08518fc [type=7(external_word) addr=0x00007f56e0851cd8 offset=15 data={e5be95787f56}] | [target=0x00007f56e5be9578]
         @0x00007f56e08518fe: 310e
relocInfo@0x00007f56e08518fe [type=6(runtime_call) addr=0x00007f56e0851ce6 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e0851900: 7c03e67a49807f563995
relocInfo@0x00007f56e0851908 [type=7(external_word) addr=0x00007f56e0851d7b offset=149 format=1 data={e67a49807f56}] | [target=0x00007f56e67a4980]
         @0x00007f56e085190a: 7c03e5be95e87f56380d
relocInfo@0x00007f56e0851912 [type=7(external_word) addr=0x00007f56e0851d88 offset=13 data={e5be95e87f56}] | [target=0x00007f56e5be95e8]
         @0x00007f56e0851914: 310e
relocInfo@0x00007f56e0851914 [type=6(runtime_call) addr=0x00007f56e0851d96 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e0851916: 0829
relocInfo@0x00007f56e0851916 [type=1(oop) addr=0x00007f56e0851dbf offset=41] | [oop_addr=0x00007f56e0851dc1 *=0x000000011f7e5538 offset=0]
         @0x00007f56e0851918: 1938
relocInfo@0x00007f56e0851918 [type=3(opt_virtual_call) addr=0x00007f56e0851df7 offset=56 format=1] | [destination=0x00007f56e07ae020 metadata=0x0000000000000000]
         @0x00007f56e085191a: 8005
relocInfo@0x00007f56e085191a [type=16(post_call_nop) addr=0x00007f56e0851dfc offset=5]
         @0x00007f56e085191c: 589d
relocInfo@0x00007f56e085191c [type=11(poll_return) addr=0x00007f56e0851e99 offset=157]
         @0x00007f56e085191e: 1922
relocInfo@0x00007f56e085191e [type=3(opt_virtual_call) addr=0x00007f56e0851ebb offset=34 format=1] | [destination=0x00007f56e07ae020 metadata=0x0000000000000000]
         @0x00007f56e0851920: 8005
relocInfo@0x00007f56e0851920 [type=16(post_call_nop) addr=0x00007f56e0851ec0 offset=5]
         @0x00007f56e0851922: 500f
relocInfo@0x00007f56e0851922 [type=10(poll) addr=0x00007f56e0851ecf offset=15]
         @0x00007f56e0851924: 606c
relocInfo@0x00007f56e0851924 [type=12(metadata) addr=0x00007f56e0851f3b offset=108] | [metadata_addr=0x00007f56e0851f3d *=0x000000002608ba40 offset=0]metadata_value=0x000000002608ba40: 'SimpleValue'
         @0x00007f56e0851926: 310c
relocInfo@0x00007f56e0851926 [type=6(runtime_call) addr=0x00007f56e0851f47 offset=12 format=1] | [destination=0x00007f56e06b7da0]
         @0x00007f56e0851928: 8005
relocInfo@0x00007f56e0851928 [type=16(post_call_nop) addr=0x00007f56e0851f4c offset=5]
         @0x00007f56e085192a: 312f
relocInfo@0x00007f56e085192a [type=6(runtime_call) addr=0x00007f56e0851f7b offset=47 format=1] | [destination=0x00007f56e07beea0]
         @0x00007f56e085192c: 8005
relocInfo@0x00007f56e085192c [type=16(post_call_nop) addr=0x00007f56e0851f80 offset=5]
         @0x00007f56e085192e: 7c03e593d7507f563808
relocInfo@0x00007f56e0851936 [type=7(external_word) addr=0x00007f56e0851f88 offset=8 data={e593d7507f56}] | [target=0x00007f56e593d750]
         @0x00007f56e0851938: 310e
relocInfo@0x00007f56e0851938 [type=6(runtime_call) addr=0x00007f56e0851f96 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e085193a: 8037
relocInfo@0x00007f56e085193a [type=16(post_call_nop) addr=0x00007f56e0851fcd offset=55]
         @0x00007f56e085193c: 0810
relocInfo@0x00007f56e085193c [type=1(oop) addr=0x00007f56e0851fdd offset=16] | [oop_addr=0x00007f56e0851fdf *=0x000000011f7e5538 offset=0]
         @0x00007f56e085193e: 7c03e67a49807f56391e
relocInfo@0x00007f56e0851946 [type=7(external_word) addr=0x00007f56e0851ffb offset=30 format=1 data={e67a49807f56}] | [target=0x00007f56e67a4980]
         @0x00007f56e0851948: 7c03e5be95e87f56380d
relocInfo@0x00007f56e0851950 [type=7(external_word) addr=0x00007f56e0852008 offset=13 data={e5be95e87f56}] | [target=0x00007f56e5be95e8]
         @0x00007f56e0851952: 310e
relocInfo@0x00007f56e0851952 [type=6(runtime_call) addr=0x00007f56e0852016 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e0851954: 8063
relocInfo@0x00007f56e0851954 [type=16(post_call_nop) addr=0x00007f56e0852079 offset=99]
         @0x00007f56e0851956: 0808
relocInfo@0x00007f56e0851956 [type=1(oop) addr=0x00007f56e0852081 offset=8] | [oop_addr=0x00007f56e0852083 *=0x000000011f7e5538 offset=0]
         @0x00007f56e0851958: 7c03e67a49807f56391a
relocInfo@0x00007f56e0851960 [type=7(external_word) addr=0x00007f56e085209b offset=26 format=1 data={e67a49807f56}] | [target=0x00007f56e67a4980]
         @0x00007f56e0851962: 7c03e5be95e87f56380d
relocInfo@0x00007f56e085196a [type=7(external_word) addr=0x00007f56e08520a8 offset=13 data={e5be95e87f56}] | [target=0x00007f56e5be95e8]
         @0x00007f56e085196c: 310e
relocInfo@0x00007f56e085196c [type=6(runtime_call) addr=0x00007f56e08520b6 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e085196e: 6017
relocInfo@0x00007f56e085196e [type=12(metadata) addr=0x00007f56e08520cd offset=23] | [metadata_addr=0x00007f56e08520cf *=0x000000002608b400 offset=0]metadata_value=0x000000002608b400: 'SimpleValue'[]
         @0x00007f56e0851970: 310a
relocInfo@0x00007f56e0851970 [type=6(runtime_call) addr=0x00007f56e08520d7 offset=10 format=1] | [destination=0x00007f56e06b7320]
         @0x00007f56e0851972: 8005
relocInfo@0x00007f56e0851972 [type=16(post_call_nop) addr=0x00007f56e08520dc offset=5]
         @0x00007f56e0851974: 3117
relocInfo@0x00007f56e0851974 [type=6(runtime_call) addr=0x00007f56e08520f3 offset=23 format=1] | [destination=0x00007f56e07beea0]
         @0x00007f56e0851976: 8005
relocInfo@0x00007f56e0851976 [type=16(post_call_nop) addr=0x00007f56e08520f8 offset=5]
         @0x00007f56e0851978: 7c03e593d7507f563808
relocInfo@0x00007f56e0851980 [type=7(external_word) addr=0x00007f56e0852100 offset=8 data={e593d7507f56}] | [target=0x00007f56e593d750]
         @0x00007f56e0851982: 310e
relocInfo@0x00007f56e0851982 [type=6(runtime_call) addr=0x00007f56e085210e offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e0851984: 310d
relocInfo@0x00007f56e0851984 [type=6(runtime_call) addr=0x00007f56e085211b offset=13 format=1] | [destination=0x00007f56e07beea0]
         @0x00007f56e0851986: 8005
relocInfo@0x00007f56e0851986 [type=16(post_call_nop) addr=0x00007f56e0852120 offset=5]
         @0x00007f56e0851988: 7c03e593d7507f563808
relocInfo@0x00007f56e0851990 [type=7(external_word) addr=0x00007f56e0852128 offset=8 data={e593d7507f56}] | [target=0x00007f56e593d750]
         @0x00007f56e0851992: 310e
relocInfo@0x00007f56e0851992 [type=6(runtime_call) addr=0x00007f56e0852136 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e0851994: 8034
relocInfo@0x00007f56e0851994 [type=16(post_call_nop) addr=0x00007f56e085216a offset=52]
         @0x00007f56e0851996: 3115
relocInfo@0x00007f56e0851996 [type=6(runtime_call) addr=0x00007f56e085217f offset=21 format=1] | [destination=0x00007f56e07beea0]
         @0x00007f56e0851998: 8005
relocInfo@0x00007f56e0851998 [type=16(post_call_nop) addr=0x00007f56e0852184 offset=5]
         @0x00007f56e085199a: 7c03e593d7507f563808
relocInfo@0x00007f56e08519a2 [type=7(external_word) addr=0x00007f56e085218c offset=8 data={e593d7507f56}] | [target=0x00007f56e593d750]
         @0x00007f56e08519a4: 310e
relocInfo@0x00007f56e08519a4 [type=6(runtime_call) addr=0x00007f56e085219a offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08519a6: 3111
relocInfo@0x00007f56e08519a6 [type=6(runtime_call) addr=0x00007f56e08521ab offset=17 format=1] | [destination=0x00007f56e07beea0]
         @0x00007f56e08519a8: 8005
relocInfo@0x00007f56e08519a8 [type=16(post_call_nop) addr=0x00007f56e08521b0 offset=5]
         @0x00007f56e08519aa: 7c03e593d7507f563808
relocInfo@0x00007f56e08519b2 [type=7(external_word) addr=0x00007f56e08521b8 offset=8 data={e593d7507f56}] | [target=0x00007f56e593d750]
         @0x00007f56e08519b4: 310e
relocInfo@0x00007f56e08519b4 [type=6(runtime_call) addr=0x00007f56e08521c6 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08519b6: 310d
relocInfo@0x00007f56e08519b6 [type=6(runtime_call) addr=0x00007f56e08521d3 offset=13 format=1] | [destination=0x00007f56e07beea0]
         @0x00007f56e08519b8: 8005
relocInfo@0x00007f56e08519b8 [type=16(post_call_nop) addr=0x00007f56e08521d8 offset=5]
         @0x00007f56e08519ba: 7c03e593d7507f563808
relocInfo@0x00007f56e08519c2 [type=7(external_word) addr=0x00007f56e08521e0 offset=8 data={e593d7507f56}] | [target=0x00007f56e593d750]
         @0x00007f56e08519c4: 310e
relocInfo@0x00007f56e08519c4 [type=6(runtime_call) addr=0x00007f56e08521ee offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08519c6: 3111
relocInfo@0x00007f56e08519c6 [type=6(runtime_call) addr=0x00007f56e08521ff offset=17 format=1] | [destination=0x00007f56e07beea0]
         @0x00007f56e08519c8: 8005
relocInfo@0x00007f56e08519c8 [type=16(post_call_nop) addr=0x00007f56e0852204 offset=5]
         @0x00007f56e08519ca: 7c03e593d7507f563808
relocInfo@0x00007f56e08519d2 [type=7(external_word) addr=0x00007f56e085220c offset=8 data={e593d7507f56}] | [target=0x00007f56e593d750]
         @0x00007f56e08519d4: 310e
relocInfo@0x00007f56e08519d4 [type=6(runtime_call) addr=0x00007f56e085221a offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08519d6: 310d
relocInfo@0x00007f56e08519d6 [type=6(runtime_call) addr=0x00007f56e0852227 offset=13 format=1] | [destination=0x00007f56e07beea0]
         @0x00007f56e08519d8: 8005
relocInfo@0x00007f56e08519d8 [type=16(post_call_nop) addr=0x00007f56e085222c offset=5]
         @0x00007f56e08519da: 7c03e593d7507f563808
relocInfo@0x00007f56e08519e2 [type=7(external_word) addr=0x00007f56e0852234 offset=8 data={e593d7507f56}] | [target=0x00007f56e593d750]
         @0x00007f56e08519e4: 310e
relocInfo@0x00007f56e08519e4 [type=6(runtime_call) addr=0x00007f56e0852242 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08519e6: 3115
relocInfo@0x00007f56e08519e6 [type=6(runtime_call) addr=0x00007f56e0852257 offset=21 format=1] | [destination=0x00007f56e07beea0]
         @0x00007f56e08519e8: 8005
relocInfo@0x00007f56e08519e8 [type=16(post_call_nop) addr=0x00007f56e085225c offset=5]
         @0x00007f56e08519ea: 7c03e593d7507f563808
relocInfo@0x00007f56e08519f2 [type=7(external_word) addr=0x00007f56e0852264 offset=8 data={e593d7507f56}] | [target=0x00007f56e593d750]
         @0x00007f56e08519f4: 310e
relocInfo@0x00007f56e08519f4 [type=6(runtime_call) addr=0x00007f56e0852272 offset=14 format=1] | [destination=0x00007f56e4d5a704]
         @0x00007f56e08519f6: 3118
relocInfo@0x00007f56e08519f6 [type=6(runtime_call) addr=0x00007f56e085228a offset=24 format=1] | [destination=0x00007f56e07fa8a0]
         @0x00007f56e08519f8: 7bf64005
relocInfo@0x00007f56e08519fa [type=8(internal_word) addr=0x00007f56e085228f offset=5 data=1014] | [target=0x00007f56e0851e99]
         @0x00007f56e08519fc: 3111
relocInfo@0x00007f56e08519fc [type=6(runtime_call) addr=0x00007f56e08522a0 offset=17 format=1] | [destination=0x00007f56e07bdd20]
         @0x00007f56e08519fe: 3105
relocInfo@0x00007f56e08519fe [type=6(runtime_call) addr=0x00007f56e08522a5 offset=5 format=1] | [destination=0x00007f56e0718ee0]
         @0x00007f56e0851a00: 000b
relocInfo@0x00007f56e0851a00 [type=0(none) addr=0x00007f56e08522b0 offset=11]
         @0x00007f56e0851a02: 7c01fc292800
relocInfo@0x00007f56e0851a06 [type=5(static_stub) addr=0x00007f56e08522b0 offset=0 data=-983] | [static_call=0x00007f56e0851df7]
         @0x00007f56e0851a08: 6000
relocInfo@0x00007f56e0851a08 [type=12(metadata) addr=0x00007f56e08522b0 offset=0] | [metadata_addr=0x00007f56e08522b2 *=0x0000000000000000 offset=0]
         @0x00007f56e0851a0a: 310a
relocInfo@0x00007f56e0851a0a [type=6(runtime_call) addr=0x00007f56e08522ba offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007f56e0851a0c: 7c01fb652805
relocInfo@0x00007f56e0851a10 [type=5(static_stub) addr=0x00007f56e08522bf offset=5 data=-1179] | [static_call=0x00007f56e0851ebb]
         @0x00007f56e0851a12: 6000
relocInfo@0x00007f56e0851a12 [type=12(metadata) addr=0x00007f56e08522bf offset=0] | [metadata_addr=0x00007f56e08522c1 *=0x0000000000000000 offset=0]
         @0x00007f56e0851a14: 310a
relocInfo@0x00007f56e0851a14 [type=6(runtime_call) addr=0x00007f56e08522c9 offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007f56e0851a16: 3105
relocInfo@0x00007f56e0851a16 [type=6(runtime_call) addr=0x00007f56e08522ce offset=5 format=1] | [destination=0x00007f56e0711aa0]
         @0x00007f56e0851a18: 310f
relocInfo@0x00007f56e0851a18 [type=6(runtime_call) addr=0x00007f56e08522dd offset=15 format=1] | [destination=0x00007f56e07bf1e0]
         @0x00007f56e0851a1a: 0000
relocInfo@0x00007f56e0851a1a [type=0(none) addr=0x00007f56e08522dd offset=0]
         @0x00007f56e0851a1c: 0000
relocInfo@0x00007f56e0851a1c [type=0(none) addr=0x00007f56e08522dd offset=0]
         @0x00007f56e0851a1e: 0000
relocInfo@0x00007f56e0851a1e [type=0(none) addr=0x00007f56e08522dd offset=0]
         @0x00007f56e0851a20: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type evol_method
  method  = *{method} {0x00007f5684715d20} 'test' '()I' in 'TestFlatArrayVectorization'
Dependency of type evol_method
  method  = {method} {0x00007f56846f4248} 'nextInt' '(I)I' in 'java/util/Random'
Dependency of type evol_method
  method  = {method} {0x00007f5684716400} '<init>' '(I)V' in 'SimpleValue'
Dependency of type evol_method
  method  = {method} {0x00007f5684000638} '<init>' '()V' in 'java/lang/Object'
Dependency of type unique_concrete_method_4
  context = java.util.Random
  method  = {method} {0x00007f56846f4248} 'nextInt' '(I)I' in 'java/util/Random'
  class   = java.util.Random
  method  = {method} {0x00007f56846f4248} 'nextInt' '(I)I' in 'java/util/Random'
   [nmethod<=klass]java.util.Random
Dependency of type unique_concrete_method_4
  context = java.util.Random
  method  = {method} {0x00007f56846f3e98} 'next' '(I)I' in 'java/util/Random'
  class   = java.util.Random
  method  = {method} {0x00007f56846f3e98} 'next' '(I)I' in 'java/util/Random'
   [nmethod<=klass]java.util.Random
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 96 bytes)
catch_pco = 988 (pc=0x00007f56e0851dfc, 1 entries)
  bci -1 at scope depth 0 -> pco 2141 (pc=0x00007f56e085227d)
catch_pco = 1184 (pc=0x00007f56e0851ec0, 1 entries)
  bci -1 at scope depth 0 -> pco 2146 (pc=0x00007f56e0852282)
catch_pco = 1324 (pc=0x00007f56e0851f4c, 1 entries)
  bci -1 at scope depth 0 -> pco 2004 (pc=0x00007f56e08521f4)
catch_pco = 1724 (pc=0x00007f56e08520dc, 1 entries)
  bci -1 at scope depth 0 -> pco 2136 (pc=0x00007f56e0852278)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 4 entries, 36 bytes):
{
   < 0x00007f56e0851c09, 0x00007f56e08521cc > < 0x00007f56e0851c1a, 0x00007f56e08521a0 > < 0x00007f56e0851e5a, 0x00007f56e0852220 > 
   < 0x00007f56e0851e8f, 0x00007f56e0852248 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 nullptr-oop
#1: 0x000000011f7e6c08 a 'java/lang/Class'{0x000000011f7e6c08} = 'SimpleValue'
#2: 0x000000011f0a4c40 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f0a4c40}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 nullptr-oop
#1: 0x000000002608b400 'SimpleValue'[]
#2: 0x00007f5684715d20 {method} {0x00007f5684715d20} 'test' '()I' in 'TestFlatArrayVectorization'
#3: 0x000000002608ba40 'SimpleValue'
#4: 0x00007f56846f4248 {method} {0x00007f56846f4248} 'nextInt' '(I)I' in 'java/util/Random'
#5: 0x00007f5684716400 {method} {0x00007f5684716400} '<init>' '(I)V' in 'SimpleValue'
#6: 0x00007f5684000638 {method} {0x00007f5684000638} '<init>' '()V' in 'java/lang/Object'
#7: 0x00000000260e8f00 'java/util/Random'
#8: 0x00007f56846f3e98 {method} {0x00007f56846f3e98} 'next' '(I)I' in 'java/util/Random'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[res] 102270466
------------------------------------------------------------------------
static TestFlatArrayVectorization::test()I
  interpreter_invocation_count:         896
  invocation_counter:                   896
  backedge_counter:                 1837056
  decompile_count:                        1
  mdo size: 616 bytes

   0 sipush 2048
   3 anewarray SimpleValue 
   6 putstatic 11 <TestFlatArrayVectorization.varr:[LSimpleValue;> 
   9 iconst_0
  10 istore_0
  11 iload_0
  12 getstatic 11 <TestFlatArrayVectorization.varr:[LSimpleValue;> 
  15 arraylength
  16 if_icmpge 38
  0    bci: 16   BranchData         taken(770) displacement(128)
                                    not taken(1576960)
  19 getstatic 11 <TestFlatArrayVectorization.varr:[LSimpleValue;> 
  22 iload_0
  23 new 9 <SimpleValue>
  26 dup
  27 iload_0
  28 invokespecial 15 <SimpleValue.<init>(I)V> 
  32   bci: 28   CounterData        count(1576960)
  31 aastore
  48   bci: 31   ArrayStore         flags(48) 0x7f5684716978/1
                array               unknown
                element             count(0) entries(1)
                                    'SimpleValue'(1576960 1.00)
  32 iinc #0 1
  35 goto 11
  104  bci: 35   JumpData           taken(1576960) displacement(-104)
  38 getstatic 11 <TestFlatArrayVectorization.varr:[LSimpleValue;> 
  41 getstatic 18 <TestFlatArrayVectorization.rd:Ljava/util/Random;> 
  44 sipush 2047
  47 invokevirtual 22 <java/util/Random.nextInt(I)I> 
  128  bci: 47   VirtualCallData    count(0) entries(1)
                                    'java/util/Random'(770 1.00)
  50 aaload
  176  bci: 50   ArrayLoad          flags(3) 0x7f56847169f8/1
                array               unknown
                element             'SimpleValue'
  51 fast_igetfield 28 <SimpleValue.field:I> 
  54 ireturn
------------------------------------------------------------------------
Total MDO size: 616 bytes
