
----------------------------------------------------------------------
Interpreter

code size        =     94K bytes
total space      =     94K bytes
wasted space     =      0K bytes

# of codelets    =    277
avg codelet size =    348 bytes


----------------------------------------------------------------------
slow signature handler  [0xee06a780, 0xee06a834]  180 bytes

--------------------------------------------------------------------------------
  0xee06a780:   mov    %esp,%ecx                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;   40:   address entry = __ pc();
                                                    ;;   45:   __ mov(rcx, rsp);
  0xee06a782:   call   0xee06a78c                   ;;   46:   __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::slow_signature_handler), rbx, rdi, rcx);
  0xee06a787:   jmp    0xee06a830
  0xee06a78c:   push   %ecx
  0xee06a78d:   push   %edi
  0xee06a78e:   push   %ebx
  0xee06a78f:   lea    0x10(%esp),%eax
  0xee06a793:   mov    %esi,-0x20(%ebp)
  0xee06a796:   cmpl   $0x0,-0x8(%ebp)
  0xee06a79a:   je     0xee06a7b1
  0xee06a7a0:   push   $0xf78569d8
  0xee06a7a5:   call   0xee06a7aa
  0xee06a7aa:   pusha  
  0xee06a7ab:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06a7b0:   hlt    
  0xee06a7b1:   push   %eax
  0xee06a7b2:   push   %edx
  0xee06a7b3:   push   %ecx
  0xee06a7b4:   call   0xf704a910 = Thread::current()
  0xee06a7b9:   pop    %ecx
  0xee06a7ba:   pop    %edx
  0xee06a7bb:   mov    %eax,%edi
  0xee06a7bd:   pop    %eax
  0xee06a7be:   push   %edi
  0xee06a7bf:   vzeroupper 
  0xee06a7c2:   mov    %ebp,0x230(%edi)
  0xee06a7c8:   mov    %eax,0x228(%edi)
  0xee06a7ce:   call   0xf6c08a70 = InterpreterRuntime::slow_signature_handler(JavaThread*, Method*, int*, int*)
  0xee06a7d3:   add    $0x10,%esp
  0xee06a7d6:   push   %eax
  0xee06a7d7:   push   %edx
  0xee06a7d8:   push   %ecx
  0xee06a7d9:   call   0xf704a910 = Thread::current()
  0xee06a7de:   pop    %ecx
  0xee06a7df:   pop    %edx
  0xee06a7e0:   cmp    %eax,%edi
  0xee06a7e2:   je     0xee06a7f9
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06a7e8:   push   $0xf78b5a48
  0xee06a7ed:   call   0xee06a7f2
  0xee06a7f2:   pusha  
  0xee06a7f3:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06a7f8:   hlt    
  0xee06a7f9:   pop    %eax
  0xee06a7fa:   movl   $0x0,0x228(%edi)
  0xee06a804:   movl   $0x0,0x230(%edi)
  0xee06a80e:   movl   $0x0,0x22c(%edi)
  0xee06a818:   vzeroupper 
  0xee06a81b:   cmpl   $0x0,0x4(%edi)
  0xee06a81f:   jne    0xee05bbe0
  0xee06a825:   mov    -0x20(%ebp),%esi
  0xee06a828:   mov    -0x1c(%ebp),%edi
  0xee06a82b:   lea    0x0(%ebp,%edi,4),%edi
  0xee06a82f:   ret    
  0xee06a830:   ret                                 ;;   47:   __ ret(0);
  0xee06a831:   nop
  0xee06a832:   nop
  0xee06a833:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
error exits  [0xee06a860, 0xee06a884]  36 bytes

--------------------------------------------------------------------------------
  0xee06a860:   push   $0xf7923e25                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  262:   address entry = __ pc();
                                                    ;;  263:   __ stop(msg);
  0xee06a865:   call   0xee06a86a
  0xee06a86a:   pusha  
  0xee06a86b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06a870:   hlt    
  0xee06a871:   push   $0xf79235c8                  ;;  262:   address entry = __ pc();
                                                    ;;  263:   __ stop(msg);
  0xee06a876:   call   0xee06a87b
  0xee06a87b:   pusha  
  0xee06a87c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06a881:   hlt    
  0xee06a882:   nop
  0xee06a883:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
return entry points  [0xee06a8a0, 0xee06b15c]  2236 bytes

--------------------------------------------------------------------------------
  0xee06a8a0:   mov    -0x8(%ebp),%esp              ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06a8a3:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06a8aa:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06a8ad:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06a8b0:   lea    0x0(%ebp,%edi,4),%edi
  0xee06a8b4:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06a8b8:   mov    -0x18(%ebp),%ebx
  0xee06a8bb:   shl    $0x2,%ecx
  0xee06a8be:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06a8c2:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06a8c8:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06a8cb:   movzbl 0x1(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06a8cf:   inc    %esi
  0xee06a8d0:   jmp    *-0x833caa0(,%ebx,4)
  0xee06a8d7:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  203:     __ MacroAssembler::verify_FPU(UseSSE >= 2 ? 0 : 1, "generate_return_entry_for in interpreter");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06a8da:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06a8e1:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06a8e4:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06a8e7:   lea    0x0(%ebp,%edi,4),%edi
  0xee06a8eb:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06a8ef:   mov    -0x18(%ebp),%ebx
  0xee06a8f2:   shl    $0x2,%ecx
  0xee06a8f5:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06a8f9:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06a8ff:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06a902:   movzbl 0x1(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06a906:   inc    %esi
  0xee06a907:   jmp    *-0x833d2a0(,%ebx,4)
  0xee06a90e:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  201:     __ MacroAssembler::verify_FPU(UseSSE >= 1 ? 0 : 1, "generate_return_entry_for in interpreter");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06a911:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06a918:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06a91b:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06a91e:   lea    0x0(%ebp,%edi,4),%edi
  0xee06a922:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06a926:   mov    -0x18(%ebp),%ebx
  0xee06a929:   shl    $0x2,%ecx
  0xee06a92c:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06a930:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06a936:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06a939:   movzbl 0x1(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06a93d:   inc    %esi
  0xee06a93e:   jmp    *-0x833d6a0(,%ebx,4)
  0xee06a945:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06a948:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06a94f:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06a952:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06a955:   lea    0x0(%ebp,%edi,4),%edi
  0xee06a959:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06a95d:   mov    -0x18(%ebp),%ebx
  0xee06a960:   shl    $0x2,%ecx
  0xee06a963:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06a967:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06a96d:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06a970:   movzbl 0x1(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06a974:   inc    %esi
  0xee06a975:   jmp    *-0x833daa0(,%ebx,4)
  0xee06a97c:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06a97f:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06a986:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06a989:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06a98c:   lea    0x0(%ebp,%edi,4),%edi
  0xee06a990:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06a994:   mov    -0x18(%ebp),%ebx
  0xee06a997:   shl    $0x2,%ecx
  0xee06a99a:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06a99e:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06a9a4:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06a9a7:   movzbl 0x1(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06a9ab:   inc    %esi
  0xee06a9ac:   jmp    *-0x833dea0(,%ebx,4)
  0xee06a9b3:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06a9b6:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06a9bd:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06a9c0:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06a9c3:   lea    0x0(%ebp,%edi,4),%edi
  0xee06a9c7:   mov    -0x14(%ebp),%ebx             ;;  218:     __ profile_return_type(mdp, rax, tmp);
  0xee06a9ca:   test   %ebx,%ebx
  0xee06a9cc:   je     0xee06aa32
  0xee06a9d2:   cmpb   $0xba,(%esi)
  0xee06a9d5:   je     0xee06a9f3
  0xee06a9db:   cmpb   $0xe9,(%esi)
  0xee06a9de:   je     0xee06a9f3
  0xee06a9e4:   mov    -0xc(%ebp),%ecx
  0xee06a9e7:   cmpw   $0x188,0x20(%ecx)
  0xee06a9ed:   jne    0xee06aa32
  0xee06a9f3:   mov    %eax,%ecx
  0xee06a9f5:   test   %ecx,%ecx
  0xee06a9f7:   jne    0xee06a9ff
  0xee06a9f9:   orl    $0x1,-0x4(%ebx)
  0xee06a9fd:   jmp    0xee06aa32
  0xee06a9ff:   mov    0x4(%ecx),%ecx
  0xee06aa02:   xor    -0x4(%ebx),%ecx
  0xee06aa05:   test   $0xfffffffc,%ecx
  0xee06aa0b:   je     0xee06aa32
  0xee06aa0d:   test   $0x2,%cl
  0xee06aa10:   jne    0xee06aa32
  0xee06aa12:   cmpl   $0x0,-0x4(%ebx)
  0xee06aa16:   je     0xee06aa2f
  0xee06aa18:   cmpl   $0x1,-0x4(%ebx)
  0xee06aa1c:   je     0xee06aa2f
  0xee06aa1e:   xor    -0x4(%ebx),%ecx
  0xee06aa21:   test   $0xfffffffc,%ecx
  0xee06aa27:   je     0xee06aa32
  0xee06aa29:   orl    $0x2,-0x4(%ebx)
  0xee06aa2d:   jmp    0xee06aa32
  0xee06aa2f:   mov    %ecx,-0x4(%ebx)
  0xee06aa32:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06aa36:   mov    -0x18(%ebp),%ebx
  0xee06aa39:   shl    $0x2,%ecx
  0xee06aa3c:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06aa40:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06aa46:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06aa49:   movzbl 0x1(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06aa4d:   inc    %esi
  0xee06aa4e:   jmp    *-0x833cea0(,%ebx,4)
  0xee06aa55:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06aa58:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06aa5f:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06aa62:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06aa65:   lea    0x0(%ebp,%edi,4),%edi
  0xee06aa69:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06aa6d:   mov    -0x18(%ebp),%ebx
  0xee06aa70:   shl    $0x2,%ecx
  0xee06aa73:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06aa77:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06aa7d:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06aa80:   movzbl 0x2(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06aa84:   add    $0x2,%esi
  0xee06aa87:   jmp    *-0x833caa0(,%ebx,4)
  0xee06aa8e:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  203:     __ MacroAssembler::verify_FPU(UseSSE >= 2 ? 0 : 1, "generate_return_entry_for in interpreter");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06aa91:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06aa98:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06aa9b:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06aa9e:   lea    0x0(%ebp,%edi,4),%edi
  0xee06aaa2:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06aaa6:   mov    -0x18(%ebp),%ebx
  0xee06aaa9:   shl    $0x2,%ecx
  0xee06aaac:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06aab0:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06aab6:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06aab9:   movzbl 0x2(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06aabd:   add    $0x2,%esi
  0xee06aac0:   jmp    *-0x833d2a0(,%ebx,4)
  0xee06aac7:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  201:     __ MacroAssembler::verify_FPU(UseSSE >= 1 ? 0 : 1, "generate_return_entry_for in interpreter");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06aaca:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06aad1:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06aad4:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06aad7:   lea    0x0(%ebp,%edi,4),%edi
  0xee06aadb:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06aadf:   mov    -0x18(%ebp),%ebx
  0xee06aae2:   shl    $0x2,%ecx
  0xee06aae5:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06aae9:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06aaef:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06aaf2:   movzbl 0x2(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06aaf6:   add    $0x2,%esi
  0xee06aaf9:   jmp    *-0x833d6a0(,%ebx,4)
  0xee06ab00:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06ab03:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06ab0a:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06ab0d:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06ab10:   lea    0x0(%ebp,%edi,4),%edi
  0xee06ab14:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06ab18:   mov    -0x18(%ebp),%ebx
  0xee06ab1b:   shl    $0x2,%ecx
  0xee06ab1e:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06ab22:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06ab28:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06ab2b:   movzbl 0x2(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06ab2f:   add    $0x2,%esi
  0xee06ab32:   jmp    *-0x833daa0(,%ebx,4)
  0xee06ab39:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06ab3c:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06ab43:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06ab46:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06ab49:   lea    0x0(%ebp,%edi,4),%edi
  0xee06ab4d:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06ab51:   mov    -0x18(%ebp),%ebx
  0xee06ab54:   shl    $0x2,%ecx
  0xee06ab57:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06ab5b:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06ab61:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06ab64:   movzbl 0x2(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06ab68:   add    $0x2,%esi
  0xee06ab6b:   jmp    *-0x833dea0(,%ebx,4)
  0xee06ab72:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06ab75:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06ab7c:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06ab7f:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06ab82:   lea    0x0(%ebp,%edi,4),%edi
  0xee06ab86:   mov    -0x14(%ebp),%ebx             ;;  218:     __ profile_return_type(mdp, rax, tmp);
  0xee06ab89:   test   %ebx,%ebx
  0xee06ab8b:   je     0xee06abf1
  0xee06ab91:   cmpb   $0xba,(%esi)
  0xee06ab94:   je     0xee06abb2
  0xee06ab9a:   cmpb   $0xe9,(%esi)
  0xee06ab9d:   je     0xee06abb2
  0xee06aba3:   mov    -0xc(%ebp),%ecx
  0xee06aba6:   cmpw   $0x188,0x20(%ecx)
  0xee06abac:   jne    0xee06abf1
  0xee06abb2:   mov    %eax,%ecx
  0xee06abb4:   test   %ecx,%ecx
  0xee06abb6:   jne    0xee06abbe
  0xee06abb8:   orl    $0x1,-0x4(%ebx)
  0xee06abbc:   jmp    0xee06abf1
  0xee06abbe:   mov    0x4(%ecx),%ecx
  0xee06abc1:   xor    -0x4(%ebx),%ecx
  0xee06abc4:   test   $0xfffffffc,%ecx
  0xee06abca:   je     0xee06abf1
  0xee06abcc:   test   $0x2,%cl
  0xee06abcf:   jne    0xee06abf1
  0xee06abd1:   cmpl   $0x0,-0x4(%ebx)
  0xee06abd5:   je     0xee06abee
  0xee06abd7:   cmpl   $0x1,-0x4(%ebx)
  0xee06abdb:   je     0xee06abee
  0xee06abdd:   xor    -0x4(%ebx),%ecx
  0xee06abe0:   test   $0xfffffffc,%ecx
  0xee06abe6:   je     0xee06abf1
  0xee06abe8:   orl    $0x2,-0x4(%ebx)
  0xee06abec:   jmp    0xee06abf1
  0xee06abee:   mov    %ecx,-0x4(%ebx)
  0xee06abf1:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06abf5:   mov    -0x18(%ebp),%ebx
  0xee06abf8:   shl    $0x2,%ecx
  0xee06abfb:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06abff:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06ac05:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06ac08:   movzbl 0x2(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06ac0c:   add    $0x2,%esi
  0xee06ac0f:   jmp    *-0x833cea0(,%ebx,4)
  0xee06ac16:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06ac19:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06ac20:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06ac23:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06ac26:   lea    0x0(%ebp,%edi,4),%edi
  0xee06ac2a:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06ac2e:   mov    -0x18(%ebp),%ebx
  0xee06ac31:   shl    $0x2,%ecx
  0xee06ac34:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06ac38:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06ac3e:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06ac41:   movzbl 0x3(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06ac45:   add    $0x3,%esi
  0xee06ac48:   jmp    *-0x833caa0(,%ebx,4)
  0xee06ac4f:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  203:     __ MacroAssembler::verify_FPU(UseSSE >= 2 ? 0 : 1, "generate_return_entry_for in interpreter");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06ac52:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06ac59:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06ac5c:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06ac5f:   lea    0x0(%ebp,%edi,4),%edi
  0xee06ac63:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06ac67:   mov    -0x18(%ebp),%ebx
  0xee06ac6a:   shl    $0x2,%ecx
  0xee06ac6d:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06ac71:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06ac77:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06ac7a:   movzbl 0x3(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06ac7e:   add    $0x3,%esi
  0xee06ac81:   jmp    *-0x833d2a0(,%ebx,4)
  0xee06ac88:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  201:     __ MacroAssembler::verify_FPU(UseSSE >= 1 ? 0 : 1, "generate_return_entry_for in interpreter");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06ac8b:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06ac92:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06ac95:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06ac98:   lea    0x0(%ebp,%edi,4),%edi
  0xee06ac9c:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06aca0:   mov    -0x18(%ebp),%ebx
  0xee06aca3:   shl    $0x2,%ecx
  0xee06aca6:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06acaa:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06acb0:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06acb3:   movzbl 0x3(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06acb7:   add    $0x3,%esi
  0xee06acba:   jmp    *-0x833d6a0(,%ebx,4)
  0xee06acc1:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06acc4:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06accb:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06acce:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06acd1:   lea    0x0(%ebp,%edi,4),%edi
  0xee06acd5:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06acd9:   mov    -0x18(%ebp),%ebx
  0xee06acdc:   shl    $0x2,%ecx
  0xee06acdf:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06ace3:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06ace9:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06acec:   movzbl 0x3(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06acf0:   add    $0x3,%esi
  0xee06acf3:   jmp    *-0x833daa0(,%ebx,4)
  0xee06acfa:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06acfd:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06ad04:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06ad07:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06ad0a:   lea    0x0(%ebp,%edi,4),%edi
  0xee06ad0e:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06ad12:   mov    -0x18(%ebp),%ebx
  0xee06ad15:   shl    $0x2,%ecx
  0xee06ad18:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06ad1c:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06ad22:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06ad25:   movzbl 0x3(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06ad29:   add    $0x3,%esi
  0xee06ad2c:   jmp    *-0x833dea0(,%ebx,4)
  0xee06ad33:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06ad36:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06ad3d:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06ad40:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06ad43:   lea    0x0(%ebp,%edi,4),%edi
  0xee06ad47:   mov    -0x14(%ebp),%ebx             ;;  218:     __ profile_return_type(mdp, rax, tmp);
  0xee06ad4a:   test   %ebx,%ebx
  0xee06ad4c:   je     0xee06adb2
  0xee06ad52:   cmpb   $0xba,(%esi)
  0xee06ad55:   je     0xee06ad73
  0xee06ad5b:   cmpb   $0xe9,(%esi)
  0xee06ad5e:   je     0xee06ad73
  0xee06ad64:   mov    -0xc(%ebp),%ecx
  0xee06ad67:   cmpw   $0x188,0x20(%ecx)
  0xee06ad6d:   jne    0xee06adb2
  0xee06ad73:   mov    %eax,%ecx
  0xee06ad75:   test   %ecx,%ecx
  0xee06ad77:   jne    0xee06ad7f
  0xee06ad79:   orl    $0x1,-0x4(%ebx)
  0xee06ad7d:   jmp    0xee06adb2
  0xee06ad7f:   mov    0x4(%ecx),%ecx
  0xee06ad82:   xor    -0x4(%ebx),%ecx
  0xee06ad85:   test   $0xfffffffc,%ecx
  0xee06ad8b:   je     0xee06adb2
  0xee06ad8d:   test   $0x2,%cl
  0xee06ad90:   jne    0xee06adb2
  0xee06ad92:   cmpl   $0x0,-0x4(%ebx)
  0xee06ad96:   je     0xee06adaf
  0xee06ad98:   cmpl   $0x1,-0x4(%ebx)
  0xee06ad9c:   je     0xee06adaf
  0xee06ad9e:   xor    -0x4(%ebx),%ecx
  0xee06ada1:   test   $0xfffffffc,%ecx
  0xee06ada7:   je     0xee06adb2
  0xee06ada9:   orl    $0x2,-0x4(%ebx)
  0xee06adad:   jmp    0xee06adb2
  0xee06adaf:   mov    %ecx,-0x4(%ebx)
  0xee06adb2:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06adb6:   mov    -0x18(%ebp),%ebx
  0xee06adb9:   shl    $0x2,%ecx
  0xee06adbc:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06adc0:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06adc6:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06adc9:   movzbl 0x3(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06adcd:   add    $0x3,%esi
  0xee06add0:   jmp    *-0x833cea0(,%ebx,4)
  0xee06add7:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06adda:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06ade1:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06ade4:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06ade7:   lea    0x0(%ebp,%edi,4),%edi
  0xee06adeb:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06adef:   mov    -0x18(%ebp),%ebx
  0xee06adf2:   shl    $0x2,%ecx
  0xee06adf5:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06adf9:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06adff:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06ae02:   movzbl 0x4(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06ae06:   add    $0x4,%esi
  0xee06ae09:   jmp    *-0x833caa0(,%ebx,4)
  0xee06ae10:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  203:     __ MacroAssembler::verify_FPU(UseSSE >= 2 ? 0 : 1, "generate_return_entry_for in interpreter");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06ae13:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06ae1a:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06ae1d:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06ae20:   lea    0x0(%ebp,%edi,4),%edi
  0xee06ae24:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06ae28:   mov    -0x18(%ebp),%ebx
  0xee06ae2b:   shl    $0x2,%ecx
  0xee06ae2e:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06ae32:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06ae38:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06ae3b:   movzbl 0x4(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06ae3f:   add    $0x4,%esi
  0xee06ae42:   jmp    *-0x833d2a0(,%ebx,4)
  0xee06ae49:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  201:     __ MacroAssembler::verify_FPU(UseSSE >= 1 ? 0 : 1, "generate_return_entry_for in interpreter");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06ae4c:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06ae53:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06ae56:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06ae59:   lea    0x0(%ebp,%edi,4),%edi
  0xee06ae5d:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06ae61:   mov    -0x18(%ebp),%ebx
  0xee06ae64:   shl    $0x2,%ecx
  0xee06ae67:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06ae6b:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06ae71:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06ae74:   movzbl 0x4(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06ae78:   add    $0x4,%esi
  0xee06ae7b:   jmp    *-0x833d6a0(,%ebx,4)
  0xee06ae82:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06ae85:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06ae8c:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06ae8f:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06ae92:   lea    0x0(%ebp,%edi,4),%edi
  0xee06ae96:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06ae9a:   mov    -0x18(%ebp),%ebx
  0xee06ae9d:   shl    $0x2,%ecx
  0xee06aea0:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06aea4:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06aeaa:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06aead:   movzbl 0x4(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06aeb1:   add    $0x4,%esi
  0xee06aeb4:   jmp    *-0x833daa0(,%ebx,4)
  0xee06aebb:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06aebe:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06aec5:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06aec8:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06aecb:   lea    0x0(%ebp,%edi,4),%edi
  0xee06aecf:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06aed3:   mov    -0x18(%ebp),%ebx
  0xee06aed6:   shl    $0x2,%ecx
  0xee06aed9:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06aedd:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06aee3:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06aee6:   movzbl 0x4(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06aeea:   add    $0x4,%esi
  0xee06aeed:   jmp    *-0x833dea0(,%ebx,4)
  0xee06aef4:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06aef7:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06aefe:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06af01:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06af04:   lea    0x0(%ebp,%edi,4),%edi
  0xee06af08:   mov    -0x14(%ebp),%ebx             ;;  218:     __ profile_return_type(mdp, rax, tmp);
  0xee06af0b:   test   %ebx,%ebx
  0xee06af0d:   je     0xee06af73
  0xee06af13:   cmpb   $0xba,(%esi)
  0xee06af16:   je     0xee06af34
  0xee06af1c:   cmpb   $0xe9,(%esi)
  0xee06af1f:   je     0xee06af34
  0xee06af25:   mov    -0xc(%ebp),%ecx
  0xee06af28:   cmpw   $0x188,0x20(%ecx)
  0xee06af2e:   jne    0xee06af73
  0xee06af34:   mov    %eax,%ecx
  0xee06af36:   test   %ecx,%ecx
  0xee06af38:   jne    0xee06af40
  0xee06af3a:   orl    $0x1,-0x4(%ebx)
  0xee06af3e:   jmp    0xee06af73
  0xee06af40:   mov    0x4(%ecx),%ecx
  0xee06af43:   xor    -0x4(%ebx),%ecx
  0xee06af46:   test   $0xfffffffc,%ecx
  0xee06af4c:   je     0xee06af73
  0xee06af4e:   test   $0x2,%cl
  0xee06af51:   jne    0xee06af73
  0xee06af53:   cmpl   $0x0,-0x4(%ebx)
  0xee06af57:   je     0xee06af70
  0xee06af59:   cmpl   $0x1,-0x4(%ebx)
  0xee06af5d:   je     0xee06af70
  0xee06af5f:   xor    -0x4(%ebx),%ecx
  0xee06af62:   test   $0xfffffffc,%ecx
  0xee06af68:   je     0xee06af73
  0xee06af6a:   orl    $0x2,-0x4(%ebx)
  0xee06af6e:   jmp    0xee06af73
  0xee06af70:   mov    %ecx,-0x4(%ebx)
  0xee06af73:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06af77:   mov    -0x18(%ebp),%ebx
  0xee06af7a:   shl    $0x2,%ecx
  0xee06af7d:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06af81:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06af87:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06af8a:   movzbl 0x4(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06af8e:   add    $0x4,%esi
  0xee06af91:   jmp    *-0x833cea0(,%ebx,4)
  0xee06af98:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06af9b:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06afa2:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06afa5:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06afa8:   lea    0x0(%ebp,%edi,4),%edi
  0xee06afac:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06afb0:   mov    -0x18(%ebp),%ebx
  0xee06afb3:   shl    $0x2,%ecx
  0xee06afb6:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06afba:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06afc0:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06afc3:   movzbl 0x5(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06afc7:   add    $0x5,%esi
  0xee06afca:   jmp    *-0x833caa0(,%ebx,4)
  0xee06afd1:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  203:     __ MacroAssembler::verify_FPU(UseSSE >= 2 ? 0 : 1, "generate_return_entry_for in interpreter");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06afd4:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06afdb:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06afde:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06afe1:   lea    0x0(%ebp,%edi,4),%edi
  0xee06afe5:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06afe9:   mov    -0x18(%ebp),%ebx
  0xee06afec:   shl    $0x2,%ecx
  0xee06afef:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06aff3:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06aff9:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06affc:   movzbl 0x5(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06b000:   add    $0x5,%esi
  0xee06b003:   jmp    *-0x833d2a0(,%ebx,4)
  0xee06b00a:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  201:     __ MacroAssembler::verify_FPU(UseSSE >= 1 ? 0 : 1, "generate_return_entry_for in interpreter");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06b00d:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06b014:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06b017:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06b01a:   lea    0x0(%ebp,%edi,4),%edi
  0xee06b01e:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06b022:   mov    -0x18(%ebp),%ebx
  0xee06b025:   shl    $0x2,%ecx
  0xee06b028:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06b02c:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06b032:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06b035:   movzbl 0x5(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06b039:   add    $0x5,%esi
  0xee06b03c:   jmp    *-0x833d6a0(,%ebx,4)
  0xee06b043:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06b046:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06b04d:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06b050:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06b053:   lea    0x0(%ebp,%edi,4),%edi
  0xee06b057:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06b05b:   mov    -0x18(%ebp),%ebx
  0xee06b05e:   shl    $0x2,%ecx
  0xee06b061:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06b065:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06b06b:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06b06e:   movzbl 0x5(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06b072:   add    $0x5,%esi
  0xee06b075:   jmp    *-0x833daa0(,%ebx,4)
  0xee06b07c:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06b07f:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06b086:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06b089:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06b08c:   lea    0x0(%ebp,%edi,4),%edi
  0xee06b090:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06b094:   mov    -0x18(%ebp),%ebx
  0xee06b097:   shl    $0x2,%ecx
  0xee06b09a:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06b09e:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06b0a4:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06b0a7:   movzbl 0x5(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06b0ab:   add    $0x5,%esi
  0xee06b0ae:   jmp    *-0x833dea0(,%ebx,4)
  0xee06b0b5:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06b0b8:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06b0bf:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06b0c2:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06b0c5:   lea    0x0(%ebp,%edi,4),%edi
  0xee06b0c9:   mov    -0x14(%ebp),%ebx             ;;  218:     __ profile_return_type(mdp, rax, tmp);
  0xee06b0cc:   test   %ebx,%ebx
  0xee06b0ce:   je     0xee06b134
  0xee06b0d4:   cmpb   $0xba,(%esi)
  0xee06b0d7:   je     0xee06b0f5
  0xee06b0dd:   cmpb   $0xe9,(%esi)
  0xee06b0e0:   je     0xee06b0f5
  0xee06b0e6:   mov    -0xc(%ebp),%ecx
  0xee06b0e9:   cmpw   $0x188,0x20(%ecx)
  0xee06b0ef:   jne    0xee06b134
  0xee06b0f5:   mov    %eax,%ecx
  0xee06b0f7:   test   %ecx,%ecx
  0xee06b0f9:   jne    0xee06b101
  0xee06b0fb:   orl    $0x1,-0x4(%ebx)
  0xee06b0ff:   jmp    0xee06b134
  0xee06b101:   mov    0x4(%ecx),%ecx
  0xee06b104:   xor    -0x4(%ebx),%ecx
  0xee06b107:   test   $0xfffffffc,%ecx
  0xee06b10d:   je     0xee06b134
  0xee06b10f:   test   $0x2,%cl
  0xee06b112:   jne    0xee06b134
  0xee06b114:   cmpl   $0x0,-0x4(%ebx)
  0xee06b118:   je     0xee06b131
  0xee06b11a:   cmpl   $0x1,-0x4(%ebx)
  0xee06b11e:   je     0xee06b131
  0xee06b120:   xor    -0x4(%ebx),%ecx
  0xee06b123:   test   $0xfffffffc,%ecx
  0xee06b129:   je     0xee06b134
  0xee06b12b:   orl    $0x2,-0x4(%ebx)
  0xee06b12f:   jmp    0xee06b134
  0xee06b131:   mov    %ecx,-0x4(%ebx)
  0xee06b134:   movzwl 0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06b138:   mov    -0x18(%ebp),%ebx
  0xee06b13b:   shl    $0x2,%ecx
  0xee06b13e:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06b142:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06b148:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06b14b:   movzbl 0x5(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06b14f:   add    $0x5,%esi
  0xee06b152:   jmp    *-0x833cea0(,%ebx,4)
  0xee06b159:   nop
  0xee06b15a:   nop
  0xee06b15b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
invoke return entry points  [0xee06b180, 0xee06b348]  456 bytes

--------------------------------------------------------------------------------
  0xee06b180:   mov    -0x8(%ebp),%esp              ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06b183:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06b18a:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06b18d:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06b190:   lea    0x0(%ebp,%edi,4),%edi
  0xee06b194:   mov    0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06b197:   not    %ecx
  0xee06b199:   mov    -0x18(%ebp),%ebx
  0xee06b19c:   shl    $0x2,%ecx
  0xee06b19f:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06b1a3:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06b1a9:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06b1ac:   movzbl 0x5(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06b1b0:   add    $0x5,%esi
  0xee06b1b3:   jmp    *-0x833dea0(,%ebx,4)
  0xee06b1ba:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06b1bd:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06b1c4:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06b1c7:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06b1ca:   lea    0x0(%ebp,%edi,4),%edi
  0xee06b1ce:   mov    0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06b1d1:   not    %ecx
  0xee06b1d3:   mov    -0x18(%ebp),%ebx
  0xee06b1d6:   shl    $0x2,%ecx
  0xee06b1d9:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06b1dd:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06b1e3:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06b1e6:   movzbl 0x5(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06b1ea:   add    $0x5,%esi
  0xee06b1ed:   jmp    *-0x833daa0(,%ebx,4)
  0xee06b1f4:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  201:     __ MacroAssembler::verify_FPU(UseSSE >= 1 ? 0 : 1, "generate_return_entry_for in interpreter");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06b1f7:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06b1fe:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06b201:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06b204:   lea    0x0(%ebp,%edi,4),%edi
  0xee06b208:   mov    0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06b20b:   not    %ecx
  0xee06b20d:   mov    -0x18(%ebp),%ebx
  0xee06b210:   shl    $0x2,%ecx
  0xee06b213:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06b217:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06b21d:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06b220:   movzbl 0x5(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06b224:   add    $0x5,%esi
  0xee06b227:   jmp    *-0x833d6a0(,%ebx,4)
  0xee06b22e:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  203:     __ MacroAssembler::verify_FPU(UseSSE >= 2 ? 0 : 1, "generate_return_entry_for in interpreter");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06b231:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06b238:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06b23b:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06b23e:   lea    0x0(%ebp,%edi,4),%edi
  0xee06b242:   mov    0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06b245:   not    %ecx
  0xee06b247:   mov    -0x18(%ebp),%ebx
  0xee06b24a:   shl    $0x2,%ecx
  0xee06b24d:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06b251:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06b257:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06b25a:   movzbl 0x5(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06b25e:   add    $0x5,%esi
  0xee06b261:   jmp    *-0x833d2a0(,%ebx,4)
  0xee06b268:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06b26b:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06b272:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06b275:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06b278:   lea    0x0(%ebp,%edi,4),%edi
  0xee06b27c:   mov    -0x14(%ebp),%ebx             ;;  218:     __ profile_return_type(mdp, rax, tmp);
  0xee06b27f:   test   %ebx,%ebx
  0xee06b281:   je     0xee06b2e7
  0xee06b287:   cmpb   $0xba,(%esi)
  0xee06b28a:   je     0xee06b2a8
  0xee06b290:   cmpb   $0xe9,(%esi)
  0xee06b293:   je     0xee06b2a8
  0xee06b299:   mov    -0xc(%ebp),%ecx
  0xee06b29c:   cmpw   $0x188,0x20(%ecx)
  0xee06b2a2:   jne    0xee06b2e7
  0xee06b2a8:   mov    %eax,%ecx
  0xee06b2aa:   test   %ecx,%ecx
  0xee06b2ac:   jne    0xee06b2b4
  0xee06b2ae:   orl    $0x1,-0x4(%ebx)
  0xee06b2b2:   jmp    0xee06b2e7
  0xee06b2b4:   mov    0x4(%ecx),%ecx
  0xee06b2b7:   xor    -0x4(%ebx),%ecx
  0xee06b2ba:   test   $0xfffffffc,%ecx
  0xee06b2c0:   je     0xee06b2e7
  0xee06b2c2:   test   $0x2,%cl
  0xee06b2c5:   jne    0xee06b2e7
  0xee06b2c7:   cmpl   $0x0,-0x4(%ebx)
  0xee06b2cb:   je     0xee06b2e4
  0xee06b2cd:   cmpl   $0x1,-0x4(%ebx)
  0xee06b2d1:   je     0xee06b2e4
  0xee06b2d3:   xor    -0x4(%ebx),%ecx
  0xee06b2d6:   test   $0xfffffffc,%ecx
  0xee06b2dc:   je     0xee06b2e7
  0xee06b2de:   orl    $0x2,-0x4(%ebx)
  0xee06b2e2:   jmp    0xee06b2e7
  0xee06b2e4:   mov    %ecx,-0x4(%ebx)
  0xee06b2e7:   mov    0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06b2ea:   not    %ecx
  0xee06b2ec:   mov    -0x18(%ebp),%ebx
  0xee06b2ef:   shl    $0x2,%ecx
  0xee06b2f2:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06b2f6:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06b2fc:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06b2ff:   movzbl 0x5(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06b303:   add    $0x5,%esi
  0xee06b306:   jmp    *-0x833cea0(,%ebx,4)
  0xee06b30d:   mov    -0x8(%ebp),%esp              ;;  181:   address entry = __ pc();
                                                    ;;  197:     __ MacroAssembler::verify_FPU(0, "generate_return_entry_for compiled");
                                                    ;;  208:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06b310:   movl   $0x0,-0x8(%ebp)              ;;  210:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06b317:   mov    -0x20(%ebp),%esi             ;;  212:   __ restore_bcp();
  0xee06b31a:   mov    -0x1c(%ebp),%edi             ;;  213:   __ restore_locals();
  0xee06b31d:   lea    0x0(%ebp,%edi,4),%edi
  0xee06b321:   mov    0x1(%esi),%ecx               ;;  223:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee06b324:   not    %ecx
  0xee06b326:   mov    -0x18(%ebp),%ebx
  0xee06b329:   shl    $0x2,%ecx
  0xee06b32c:   mov    0x28(%ebx,%ecx,4),%ebx       ;;  226:   __ movl(flags, Address(cache, index, Address::times_ptr, ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset()));
  0xee06b330:   and    $0xff,%ebx                   ;;  227:   __ andl(flags, ConstantPoolCacheEntry::parameter_size_mask);
  0xee06b336:   lea    (%esp,%ebx,4),%esp           ;;  228:   __ lea(rsp, Address(rsp, flags, Interpreter::stackElementScale()));
  0xee06b339:   movzbl 0x5(%esi),%ebx               ;;  240:   __ dispatch_next(state, step);
  0xee06b33d:   add    $0x5,%esi
  0xee06b340:   jmp    *-0x833caa0(,%ebx,4)
  0xee06b347:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
earlyret entry points  [0xee06b360, 0xee06c76c]  5132 bytes

--------------------------------------------------------------------------------
  0xee06b360:   mov    -0x20(%ebp),%esi             ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1708:   address entry = __ pc();
                                                    ;; 1710:   __ restore_bcp();
  0xee06b363:   mov    -0x1c(%ebp),%edi             ;; 1711:   __ restore_locals();
  0xee06b366:   lea    0x0(%ebp,%edi,4),%edi
  0xee06b36a:   mov    -0x24(%ebp),%esp             ;; 1712:   __ empty_expression_stack();
  0xee06b36d:   movl   $0x0,-0x8(%ebp)
  0xee06b374:   emms   
  0xee06b376:   push   %eax                         ;; 1713:   __ load_earlyret_value(state);  // 32 bits returns value in rdx, so don't reuse
  0xee06b377:   push   %edx
  0xee06b378:   push   %ecx
  0xee06b379:   call   0xf704a910 = Thread::current()
  0xee06b37e:   pop    %ecx
  0xee06b37f:   pop    %edx
  0xee06b380:   mov    %eax,%ecx
  0xee06b382:   pop    %eax
  0xee06b383:   mov    0x390(%ecx),%ecx
  0xee06b389:   movl   $0xb,0x68(%ecx)
  0xee06b390:   movl   $0x0,0x6c(%ecx)
  0xee06b397:   movl   $0x0,0x70(%ecx)
  0xee06b39e:   push   %eax                         ;; 1716:   NOT_LP64(__ get_thread(thread));
  0xee06b39f:   push   %edx
  0xee06b3a0:   push   %ecx
  0xee06b3a1:   call   0xf704a910 = Thread::current()
  0xee06b3a6:   pop    %ecx
  0xee06b3a7:   pop    %edx
  0xee06b3a8:   mov    %eax,%ecx
  0xee06b3aa:   pop    %eax
  0xee06b3ab:   mov    0x390(%ecx),%ecx             ;; 1717:   __ movptr(rcx, Address(thread, JavaThread::jvmti_thread_state_offset()));
  0xee06b3b1:   movl   $0x0,0x64(%ecx)              ;; 1721:   __ movl(cond_addr, JvmtiThreadState::earlyret_inactive);
  0xee06b3b8:   push   %eax                         ;; 1723:   __ remove_activation(state, rsi,
  0xee06b3b9:   push   %edx
  0xee06b3ba:   push   %ecx
  0xee06b3bb:   call   0xf704a910 = Thread::current()
  0xee06b3c0:   pop    %ecx
  0xee06b3c1:   pop    %edx
  0xee06b3c2:   mov    %eax,%ecx
  0xee06b3c4:   pop    %eax
  0xee06b3c5:   cmp    0x288(%ecx),%ebp
  0xee06b3cb:   ja     0xee06b3d6
  0xee06b3d1:   jmp    0xee06b426
  0xee06b3d6:   vzeroupper 
  0xee06b3d9:   mov    %ebp,0x230(%ecx)
  0xee06b3df:   movl   $0xee06b3d6,0x22c(%ecx)
  0xee06b3e9:   mov    %esp,0x228(%ecx)
  0xee06b3ef:   push   %ecx
  0xee06b3f0:   call   0xf6c0e120 = InterpreterRuntime::at_unwind(JavaThread*)
  0xee06b3f5:   add    $0x4,%esp
  0xee06b3f8:   push   %eax
  0xee06b3f9:   push   %edx
  0xee06b3fa:   push   %ecx
  0xee06b3fb:   call   0xf704a910 = Thread::current()
  0xee06b400:   pop    %ecx
  0xee06b401:   pop    %edx
  0xee06b402:   mov    %eax,%ecx
  0xee06b404:   pop    %eax
  0xee06b405:   movl   $0x0,0x228(%ecx)
  0xee06b40f:   movl   $0x0,0x230(%ecx)
  0xee06b419:   movl   $0x0,0x22c(%ecx)
  0xee06b423:   vzeroupper 
  0xee06b426:   mov    0x2b1(%ecx),%bl
  0xee06b42c:   movb   $0x0,0x2b1(%ecx)
  0xee06b433:   mov    -0xc(%ebp),%ecx
  0xee06b436:   mov    0x18(%ecx),%ecx
  0xee06b439:   test   $0x20,%cl
  0xee06b43c:   je     0xee06b4c1
  0xee06b442:   test   $0xff,%bl
  0xee06b445:   jne    0xee06b540
  0xee06b44b:   lea    -0x2c(%ebp),%edx
  0xee06b44e:   mov    0x4(%edx),%eax
  0xee06b451:   test   %eax,%eax
  0xee06b453:   jne    0xee06b45e
  0xee06b459:   jmp    0xee06b4c1
  0xee06b45e:   mov    %esi,-0x20(%ebp)
  0xee06b461:   lea    (%edx),%eax
  0xee06b463:   mov    0x4(%edx),%ecx
  0xee06b466:   movl   $0x0,0x4(%edx)
  0xee06b46d:   mov    (%eax),%ebx
  0xee06b46f:   test   %ebx,%ebx
  0xee06b471:   je     0xee06b481
  0xee06b477:   lock cmpxchg %ebx,(%ecx)
  0xee06b47b:   jne    0xee06b497
  0xee06b481:   push   %eax
  0xee06b482:   push   %edx
  0xee06b483:   push   %ecx
  0xee06b484:   call   0xf704a910 = Thread::current()
  0xee06b489:   pop    %ecx
  0xee06b48a:   pop    %edx
  0xee06b48b:   decl   0x308(%eax)
  0xee06b491:   pop    %eax
  0xee06b492:   jmp    0xee06b4be
  0xee06b497:   mov    %ecx,0x4(%edx)
  0xee06b49a:   push   %edx
  0xee06b49b:   cmpl   $0x0,-0x8(%ebp)
  0xee06b49f:   je     0xee06b4b6
  0xee06b4a5:   push   $0xf785694c
  0xee06b4aa:   call   0xee06b4af
  0xee06b4af:   pusha  
  0xee06b4b0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06b4b5:   hlt    
  0xee06b4b6:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06b4bb:   add    $0x4,%esp
  0xee06b4be:   mov    -0x20(%ebp),%esi
  0xee06b4c1:   mov    -0x24(%ebp),%ecx
  0xee06b4c4:   lea    -0x24(%ebp),%ebx
  0xee06b4c7:   jmp    0xee06b53c
  0xee06b4cc:   mov    %ecx,%edx
  0xee06b4ce:   mov    %esi,-0x20(%ebp)
  0xee06b4d1:   lea    (%edx),%eax
  0xee06b4d3:   mov    0x4(%edx),%ecx
  0xee06b4d6:   movl   $0x0,0x4(%edx)
  0xee06b4dd:   mov    (%eax),%ebx
  0xee06b4df:   test   %ebx,%ebx
  0xee06b4e1:   je     0xee06b4f1
  0xee06b4e7:   lock cmpxchg %ebx,(%ecx)
  0xee06b4eb:   jne    0xee06b507
  0xee06b4f1:   push   %eax
  0xee06b4f2:   push   %edx
  0xee06b4f3:   push   %ecx
  0xee06b4f4:   call   0xf704a910 = Thread::current()
  0xee06b4f9:   pop    %ecx
  0xee06b4fa:   pop    %edx
  0xee06b4fb:   decl   0x308(%eax)
  0xee06b501:   pop    %eax
  0xee06b502:   jmp    0xee06b52e
  0xee06b507:   mov    %ecx,0x4(%edx)
  0xee06b50a:   push   %edx
  0xee06b50b:   cmpl   $0x0,-0x8(%ebp)
  0xee06b50f:   je     0xee06b526
  0xee06b515:   push   $0xf785694c
  0xee06b51a:   call   0xee06b51f
  0xee06b51f:   pusha  
  0xee06b520:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06b525:   hlt    
  0xee06b526:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06b52b:   add    $0x4,%esp
  0xee06b52e:   mov    -0x20(%ebp),%esi
  0xee06b531:   jmp    0xee06b4c1
  0xee06b533:   cmpl   $0x0,0x4(%ecx)
  0xee06b537:   jne    0xee06b4cc
  0xee06b539:   add    $0x8,%ecx
  0xee06b53c:   cmp    %ebx,%ecx
  0xee06b53e:   jne    0xee06b533
  0xee06b540:   cmpb   $0x0,0xf7ca3a0d
  0xee06b547:   je     0xee06b582
  0xee06b54d:   push   %eax
  0xee06b54e:   push   %edx
  0xee06b54f:   push   %ecx
  0xee06b550:   call   0xf704a910 = Thread::current()
  0xee06b555:   pop    %ecx
  0xee06b556:   pop    %edx
  0xee06b557:   mov    %eax,%ecx
  0xee06b559:   pop    %eax
  0xee06b55a:   mov    -0xc(%ebp),%ebx
  0xee06b55d:   push   %ebx
  0xee06b55e:   push   %ecx
  0xee06b55f:   cmpl   $0x0,-0x8(%ebp)
  0xee06b563:   je     0xee06b57a
  0xee06b569:   push   $0xf785694c
  0xee06b56e:   call   0xee06b573
  0xee06b573:   pusha  
  0xee06b574:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06b579:   hlt    
  0xee06b57a:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee06b57f:   add    $0x8,%esp
  0xee06b582:   mov    -0x4(%ebp),%ebx
  0xee06b585:   push   %eax
  0xee06b586:   push   %edx
  0xee06b587:   push   %ecx
  0xee06b588:   call   0xf704a910 = Thread::current()
  0xee06b58d:   pop    %ecx
  0xee06b58e:   pop    %edx
  0xee06b58f:   mov    %eax,%ecx
  0xee06b591:   pop    %eax
  0xee06b592:   cmpl   $0x3,0x2bc(%ecx)
  0xee06b599:   je     0xee06b68b
  0xee06b59f:   cmp    0x2c4(%ecx),%ebx
  0xee06b5a5:   jle    0xee06b68b
  0xee06b5ab:   push   %ecx
  0xee06b5ac:   cmpl   $0x0,-0x8(%ebp)
  0xee06b5b0:   je     0xee06b5c7
  0xee06b5b6:   push   $0xf785694c
  0xee06b5bb:   call   0xee06b5c0
  0xee06b5c0:   pusha  
  0xee06b5c1:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06b5c6:   hlt    
  0xee06b5c7:   call   0xf739fd80 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0xee06b5cc:   add    $0x4,%esp
  0xee06b5cf:   call   0xee06b5d9
  0xee06b5d4:   jmp    0xee06b67a
  0xee06b5d9:   lea    0x4(%esp),%eax
  0xee06b5dd:   mov    %esi,-0x20(%ebp)
  0xee06b5e0:   cmpl   $0x0,-0x8(%ebp)
  0xee06b5e4:   je     0xee06b5fb
  0xee06b5ea:   push   $0xf78569d8
  0xee06b5ef:   call   0xee06b5f4
  0xee06b5f4:   pusha  
  0xee06b5f5:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06b5fa:   hlt    
  0xee06b5fb:   push   %eax
  0xee06b5fc:   push   %edx
  0xee06b5fd:   push   %ecx
  0xee06b5fe:   call   0xf704a910 = Thread::current()
  0xee06b603:   pop    %ecx
  0xee06b604:   pop    %edx
  0xee06b605:   mov    %eax,%edi
  0xee06b607:   pop    %eax
  0xee06b608:   push   %edi
  0xee06b609:   vzeroupper 
  0xee06b60c:   mov    %ebp,0x230(%edi)
  0xee06b612:   mov    %eax,0x228(%edi)
  0xee06b618:   call   0xf6c0b0b0 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0xee06b61d:   add    $0x4,%esp
  0xee06b620:   push   %eax
  0xee06b621:   push   %edx
  0xee06b622:   push   %ecx
  0xee06b623:   call   0xf704a910 = Thread::current()
  0xee06b628:   pop    %ecx
  0xee06b629:   pop    %edx
  0xee06b62a:   cmp    %eax,%edi
  0xee06b62c:   je     0xee06b643
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06b632:   push   $0xf78b5a48
  0xee06b637:   call   0xee06b63c
  0xee06b63c:   pusha  
  0xee06b63d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06b642:   hlt    
  0xee06b643:   pop    %eax
  0xee06b644:   movl   $0x0,0x228(%edi)
  0xee06b64e:   movl   $0x0,0x230(%edi)
  0xee06b658:   movl   $0x0,0x22c(%edi)
  0xee06b662:   vzeroupper 
  0xee06b665:   cmpl   $0x0,0x4(%edi)
  0xee06b669:   jne    0xee05bbe0
  0xee06b66f:   mov    -0x20(%ebp),%esi
  0xee06b672:   mov    -0x1c(%ebp),%edi
  0xee06b675:   lea    0x0(%ebp,%edi,4),%edi
  0xee06b679:   ret    
  0xee06b67a:   push   $0xf77a6b02
  0xee06b67f:   call   0xee06b684
  0xee06b684:   pusha  
  0xee06b685:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06b68a:   hlt    
  0xee06b68b:   mov    %ebp,%esp
  0xee06b68d:   pop    %ebp
  0xee06b68e:   pop    %esi
  0xee06b68f:   mov    %ebx,%esp
  0xee06b691:   jmp    *%esi                        ;; 1727:   __ jmp(rsi);
  0xee06b693:   mov    -0x20(%ebp),%esi             ;; 1708:   address entry = __ pc();
                                                    ;; 1710:   __ restore_bcp();
  0xee06b696:   mov    -0x1c(%ebp),%edi             ;; 1711:   __ restore_locals();
  0xee06b699:   lea    0x0(%ebp,%edi,4),%edi
  0xee06b69d:   mov    -0x24(%ebp),%esp             ;; 1712:   __ empty_expression_stack();
  0xee06b6a0:   movl   $0x0,-0x8(%ebp)
  0xee06b6a7:   emms   
  0xee06b6a9:   push   %eax                         ;; 1713:   __ load_earlyret_value(state);  // 32 bits returns value in rdx, so don't reuse
  0xee06b6aa:   push   %edx
  0xee06b6ab:   push   %ecx
  0xee06b6ac:   call   0xf704a910 = Thread::current()
  0xee06b6b1:   pop    %ecx
  0xee06b6b2:   pop    %edx
  0xee06b6b3:   mov    %eax,%ecx
  0xee06b6b5:   pop    %eax
  0xee06b6b6:   mov    0x390(%ecx),%ecx
  0xee06b6bc:   vmovsd 0x6c(%ecx),%xmm0
  0xee06b6c1:   movl   $0xb,0x68(%ecx)
  0xee06b6c8:   movl   $0x0,0x6c(%ecx)
  0xee06b6cf:   movl   $0x0,0x70(%ecx)
  0xee06b6d6:   push   %eax                         ;; 1716:   NOT_LP64(__ get_thread(thread));
  0xee06b6d7:   push   %edx
  0xee06b6d8:   push   %ecx
  0xee06b6d9:   call   0xf704a910 = Thread::current()
  0xee06b6de:   pop    %ecx
  0xee06b6df:   pop    %edx
  0xee06b6e0:   mov    %eax,%ecx
  0xee06b6e2:   pop    %eax
  0xee06b6e3:   mov    0x390(%ecx),%ecx             ;; 1717:   __ movptr(rcx, Address(thread, JavaThread::jvmti_thread_state_offset()));
  0xee06b6e9:   movl   $0x0,0x64(%ecx)              ;; 1721:   __ movl(cond_addr, JvmtiThreadState::earlyret_inactive);
  0xee06b6f0:   push   %eax                         ;; 1723:   __ remove_activation(state, rsi,
  0xee06b6f1:   push   %edx
  0xee06b6f2:   push   %ecx
  0xee06b6f3:   call   0xf704a910 = Thread::current()
  0xee06b6f8:   pop    %ecx
  0xee06b6f9:   pop    %edx
  0xee06b6fa:   mov    %eax,%ecx
  0xee06b6fc:   pop    %eax
  0xee06b6fd:   cmp    0x288(%ecx),%ebp
  0xee06b703:   ja     0xee06b70e
  0xee06b709:   jmp    0xee06b76e
  0xee06b70e:   sub    $0x8,%esp
  0xee06b711:   vmovsd %xmm0,(%esp)
  0xee06b716:   vzeroupper 
  0xee06b719:   mov    %ebp,0x230(%ecx)
  0xee06b71f:   movl   $0xee06b716,0x22c(%ecx)
  0xee06b729:   mov    %esp,0x228(%ecx)
  0xee06b72f:   push   %ecx
  0xee06b730:   call   0xf6c0e120 = InterpreterRuntime::at_unwind(JavaThread*)
  0xee06b735:   add    $0x4,%esp
  0xee06b738:   push   %eax
  0xee06b739:   push   %edx
  0xee06b73a:   push   %ecx
  0xee06b73b:   call   0xf704a910 = Thread::current()
  0xee06b740:   pop    %ecx
  0xee06b741:   pop    %edx
  0xee06b742:   mov    %eax,%ecx
  0xee06b744:   pop    %eax
  0xee06b745:   movl   $0x0,0x228(%ecx)
  0xee06b74f:   movl   $0x0,0x230(%ecx)
  0xee06b759:   movl   $0x0,0x22c(%ecx)
  0xee06b763:   vzeroupper 
  0xee06b766:   vmovsd (%esp),%xmm0
  0xee06b76b:   add    $0x8,%esp
  0xee06b76e:   mov    0x2b1(%ecx),%bl
  0xee06b774:   movb   $0x0,0x2b1(%ecx)
  0xee06b77b:   mov    -0xc(%ebp),%ecx
  0xee06b77e:   mov    0x18(%ecx),%ecx
  0xee06b781:   test   $0x20,%cl
  0xee06b784:   je     0xee06b821
  0xee06b78a:   test   $0xff,%bl
  0xee06b78d:   jne    0xee06b8b3
  0xee06b793:   sub    $0x8,%esp
  0xee06b796:   vmovsd %xmm0,(%esp)
  0xee06b79b:   lea    -0x2c(%ebp),%edx
  0xee06b79e:   mov    0x4(%edx),%eax
  0xee06b7a1:   test   %eax,%eax
  0xee06b7a3:   jne    0xee06b7b6
  0xee06b7a9:   vmovsd (%esp),%xmm0
  0xee06b7ae:   add    $0x8,%esp
  0xee06b7b1:   jmp    0xee06b821
  0xee06b7b6:   mov    %esi,-0x20(%ebp)
  0xee06b7b9:   lea    (%edx),%eax
  0xee06b7bb:   mov    0x4(%edx),%ecx
  0xee06b7be:   movl   $0x0,0x4(%edx)
  0xee06b7c5:   mov    (%eax),%ebx
  0xee06b7c7:   test   %ebx,%ebx
  0xee06b7c9:   je     0xee06b7d9
  0xee06b7cf:   lock cmpxchg %ebx,(%ecx)
  0xee06b7d3:   jne    0xee06b7ef
  0xee06b7d9:   push   %eax
  0xee06b7da:   push   %edx
  0xee06b7db:   push   %ecx
  0xee06b7dc:   call   0xf704a910 = Thread::current()
  0xee06b7e1:   pop    %ecx
  0xee06b7e2:   pop    %edx
  0xee06b7e3:   decl   0x308(%eax)
  0xee06b7e9:   pop    %eax
  0xee06b7ea:   jmp    0xee06b816
  0xee06b7ef:   mov    %ecx,0x4(%edx)
  0xee06b7f2:   push   %edx
  0xee06b7f3:   cmpl   $0x0,-0x8(%ebp)
  0xee06b7f7:   je     0xee06b80e
  0xee06b7fd:   push   $0xf785694c
  0xee06b802:   call   0xee06b807
  0xee06b807:   pusha  
  0xee06b808:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06b80d:   hlt    
  0xee06b80e:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06b813:   add    $0x4,%esp
  0xee06b816:   mov    -0x20(%ebp),%esi
  0xee06b819:   vmovsd (%esp),%xmm0
  0xee06b81e:   add    $0x8,%esp
  0xee06b821:   mov    -0x24(%ebp),%ecx
  0xee06b824:   lea    -0x24(%ebp),%ebx
  0xee06b827:   jmp    0xee06b8af
  0xee06b82c:   sub    $0x8,%esp
  0xee06b82f:   vmovsd %xmm0,(%esp)
  0xee06b834:   mov    %ecx,%edx
  0xee06b836:   mov    %esi,-0x20(%ebp)
  0xee06b839:   lea    (%edx),%eax
  0xee06b83b:   mov    0x4(%edx),%ecx
  0xee06b83e:   movl   $0x0,0x4(%edx)
  0xee06b845:   mov    (%eax),%ebx
  0xee06b847:   test   %ebx,%ebx
  0xee06b849:   je     0xee06b859
  0xee06b84f:   lock cmpxchg %ebx,(%ecx)
  0xee06b853:   jne    0xee06b86f
  0xee06b859:   push   %eax
  0xee06b85a:   push   %edx
  0xee06b85b:   push   %ecx
  0xee06b85c:   call   0xf704a910 = Thread::current()
  0xee06b861:   pop    %ecx
  0xee06b862:   pop    %edx
  0xee06b863:   decl   0x308(%eax)
  0xee06b869:   pop    %eax
  0xee06b86a:   jmp    0xee06b896
  0xee06b86f:   mov    %ecx,0x4(%edx)
  0xee06b872:   push   %edx
  0xee06b873:   cmpl   $0x0,-0x8(%ebp)
  0xee06b877:   je     0xee06b88e
  0xee06b87d:   push   $0xf785694c
  0xee06b882:   call   0xee06b887
  0xee06b887:   pusha  
  0xee06b888:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06b88d:   hlt    
  0xee06b88e:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06b893:   add    $0x4,%esp
  0xee06b896:   mov    -0x20(%ebp),%esi
  0xee06b899:   vmovsd (%esp),%xmm0
  0xee06b89e:   add    $0x8,%esp
  0xee06b8a1:   jmp    0xee06b821
  0xee06b8a6:   cmpl   $0x0,0x4(%ecx)
  0xee06b8aa:   jne    0xee06b82c
  0xee06b8ac:   add    $0x8,%ecx
  0xee06b8af:   cmp    %ebx,%ecx
  0xee06b8b1:   jne    0xee06b8a6
  0xee06b8b3:   cmpb   $0x0,0xf7ca3a0d
  0xee06b8ba:   je     0xee06b905
  0xee06b8c0:   sub    $0x8,%esp
  0xee06b8c3:   vmovsd %xmm0,(%esp)
  0xee06b8c8:   push   %eax
  0xee06b8c9:   push   %edx
  0xee06b8ca:   push   %ecx
  0xee06b8cb:   call   0xf704a910 = Thread::current()
  0xee06b8d0:   pop    %ecx
  0xee06b8d1:   pop    %edx
  0xee06b8d2:   mov    %eax,%ecx
  0xee06b8d4:   pop    %eax
  0xee06b8d5:   mov    -0xc(%ebp),%ebx
  0xee06b8d8:   push   %ebx
  0xee06b8d9:   push   %ecx
  0xee06b8da:   cmpl   $0x0,-0x8(%ebp)
  0xee06b8de:   je     0xee06b8f5
  0xee06b8e4:   push   $0xf785694c
  0xee06b8e9:   call   0xee06b8ee
  0xee06b8ee:   pusha  
  0xee06b8ef:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06b8f4:   hlt    
  0xee06b8f5:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee06b8fa:   add    $0x8,%esp
  0xee06b8fd:   vmovsd (%esp),%xmm0
  0xee06b902:   add    $0x8,%esp
  0xee06b905:   mov    -0x4(%ebp),%ebx
  0xee06b908:   push   %eax
  0xee06b909:   push   %edx
  0xee06b90a:   push   %ecx
  0xee06b90b:   call   0xf704a910 = Thread::current()
  0xee06b910:   pop    %ecx
  0xee06b911:   pop    %edx
  0xee06b912:   mov    %eax,%ecx
  0xee06b914:   pop    %eax
  0xee06b915:   cmpl   $0x3,0x2bc(%ecx)
  0xee06b91c:   je     0xee06ba0e
  0xee06b922:   cmp    0x2c4(%ecx),%ebx
  0xee06b928:   jle    0xee06ba0e
  0xee06b92e:   push   %ecx
  0xee06b92f:   cmpl   $0x0,-0x8(%ebp)
  0xee06b933:   je     0xee06b94a
  0xee06b939:   push   $0xf785694c
  0xee06b93e:   call   0xee06b943
  0xee06b943:   pusha  
  0xee06b944:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06b949:   hlt    
  0xee06b94a:   call   0xf739fd80 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0xee06b94f:   add    $0x4,%esp
  0xee06b952:   call   0xee06b95c
  0xee06b957:   jmp    0xee06b9fd
  0xee06b95c:   lea    0x4(%esp),%eax
  0xee06b960:   mov    %esi,-0x20(%ebp)
  0xee06b963:   cmpl   $0x0,-0x8(%ebp)
  0xee06b967:   je     0xee06b97e
  0xee06b96d:   push   $0xf78569d8
  0xee06b972:   call   0xee06b977
  0xee06b977:   pusha  
  0xee06b978:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06b97d:   hlt    
  0xee06b97e:   push   %eax
  0xee06b97f:   push   %edx
  0xee06b980:   push   %ecx
  0xee06b981:   call   0xf704a910 = Thread::current()
  0xee06b986:   pop    %ecx
  0xee06b987:   pop    %edx
  0xee06b988:   mov    %eax,%edi
  0xee06b98a:   pop    %eax
  0xee06b98b:   push   %edi
  0xee06b98c:   vzeroupper 
  0xee06b98f:   mov    %ebp,0x230(%edi)
  0xee06b995:   mov    %eax,0x228(%edi)
  0xee06b99b:   call   0xf6c0b0b0 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0xee06b9a0:   add    $0x4,%esp
  0xee06b9a3:   push   %eax
  0xee06b9a4:   push   %edx
  0xee06b9a5:   push   %ecx
  0xee06b9a6:   call   0xf704a910 = Thread::current()
  0xee06b9ab:   pop    %ecx
  0xee06b9ac:   pop    %edx
  0xee06b9ad:   cmp    %eax,%edi
  0xee06b9af:   je     0xee06b9c6
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06b9b5:   push   $0xf78b5a48
  0xee06b9ba:   call   0xee06b9bf
  0xee06b9bf:   pusha  
  0xee06b9c0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06b9c5:   hlt    
  0xee06b9c6:   pop    %eax
  0xee06b9c7:   movl   $0x0,0x228(%edi)
  0xee06b9d1:   movl   $0x0,0x230(%edi)
  0xee06b9db:   movl   $0x0,0x22c(%edi)
  0xee06b9e5:   vzeroupper 
  0xee06b9e8:   cmpl   $0x0,0x4(%edi)
  0xee06b9ec:   jne    0xee05bbe0
  0xee06b9f2:   mov    -0x20(%ebp),%esi
  0xee06b9f5:   mov    -0x1c(%ebp),%edi
  0xee06b9f8:   lea    0x0(%ebp,%edi,4),%edi
  0xee06b9fc:   ret    
  0xee06b9fd:   push   $0xf77a6b02
  0xee06ba02:   call   0xee06ba07
  0xee06ba07:   pusha  
  0xee06ba08:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06ba0d:   hlt    
  0xee06ba0e:   mov    %ebp,%esp
  0xee06ba10:   pop    %ebp
  0xee06ba11:   pop    %esi
  0xee06ba12:   mov    %ebx,%esp
  0xee06ba14:   jmp    *%esi                        ;; 1727:   __ jmp(rsi);
  0xee06ba16:   mov    -0x20(%ebp),%esi             ;; 1708:   address entry = __ pc();
                                                    ;; 1710:   __ restore_bcp();
  0xee06ba19:   mov    -0x1c(%ebp),%edi             ;; 1711:   __ restore_locals();
  0xee06ba1c:   lea    0x0(%ebp,%edi,4),%edi
  0xee06ba20:   mov    -0x24(%ebp),%esp             ;; 1712:   __ empty_expression_stack();
  0xee06ba23:   movl   $0x0,-0x8(%ebp)
  0xee06ba2a:   emms   
  0xee06ba2c:   push   %eax                         ;; 1713:   __ load_earlyret_value(state);  // 32 bits returns value in rdx, so don't reuse
  0xee06ba2d:   push   %edx
  0xee06ba2e:   push   %ecx
  0xee06ba2f:   call   0xf704a910 = Thread::current()
  0xee06ba34:   pop    %ecx
  0xee06ba35:   pop    %edx
  0xee06ba36:   mov    %eax,%ecx
  0xee06ba38:   pop    %eax
  0xee06ba39:   mov    0x390(%ecx),%ecx
  0xee06ba3f:   vmovss 0x6c(%ecx),%xmm0
  0xee06ba44:   movl   $0xb,0x68(%ecx)
  0xee06ba4b:   movl   $0x0,0x6c(%ecx)
  0xee06ba52:   movl   $0x0,0x70(%ecx)
  0xee06ba59:   push   %eax                         ;; 1716:   NOT_LP64(__ get_thread(thread));
  0xee06ba5a:   push   %edx
  0xee06ba5b:   push   %ecx
  0xee06ba5c:   call   0xf704a910 = Thread::current()
  0xee06ba61:   pop    %ecx
  0xee06ba62:   pop    %edx
  0xee06ba63:   mov    %eax,%ecx
  0xee06ba65:   pop    %eax
  0xee06ba66:   mov    0x390(%ecx),%ecx             ;; 1717:   __ movptr(rcx, Address(thread, JavaThread::jvmti_thread_state_offset()));
  0xee06ba6c:   movl   $0x0,0x64(%ecx)              ;; 1721:   __ movl(cond_addr, JvmtiThreadState::earlyret_inactive);
  0xee06ba73:   push   %eax                         ;; 1723:   __ remove_activation(state, rsi,
  0xee06ba74:   push   %edx
  0xee06ba75:   push   %ecx
  0xee06ba76:   call   0xf704a910 = Thread::current()
  0xee06ba7b:   pop    %ecx
  0xee06ba7c:   pop    %edx
  0xee06ba7d:   mov    %eax,%ecx
  0xee06ba7f:   pop    %eax
  0xee06ba80:   cmp    0x288(%ecx),%ebp
  0xee06ba86:   ja     0xee06ba91
  0xee06ba8c:   jmp    0xee06baf1
  0xee06ba91:   sub    $0x4,%esp
  0xee06ba94:   vmovss %xmm0,(%esp)
  0xee06ba99:   vzeroupper 
  0xee06ba9c:   mov    %ebp,0x230(%ecx)
  0xee06baa2:   movl   $0xee06ba99,0x22c(%ecx)
  0xee06baac:   mov    %esp,0x228(%ecx)
  0xee06bab2:   push   %ecx
  0xee06bab3:   call   0xf6c0e120 = InterpreterRuntime::at_unwind(JavaThread*)
  0xee06bab8:   add    $0x4,%esp
  0xee06babb:   push   %eax
  0xee06babc:   push   %edx
  0xee06babd:   push   %ecx
  0xee06babe:   call   0xf704a910 = Thread::current()
  0xee06bac3:   pop    %ecx
  0xee06bac4:   pop    %edx
  0xee06bac5:   mov    %eax,%ecx
  0xee06bac7:   pop    %eax
  0xee06bac8:   movl   $0x0,0x228(%ecx)
  0xee06bad2:   movl   $0x0,0x230(%ecx)
  0xee06badc:   movl   $0x0,0x22c(%ecx)
  0xee06bae6:   vzeroupper 
  0xee06bae9:   vmovss (%esp),%xmm0
  0xee06baee:   add    $0x4,%esp
  0xee06baf1:   mov    0x2b1(%ecx),%bl
  0xee06baf7:   movb   $0x0,0x2b1(%ecx)
  0xee06bafe:   mov    -0xc(%ebp),%ecx
  0xee06bb01:   mov    0x18(%ecx),%ecx
  0xee06bb04:   test   $0x20,%cl
  0xee06bb07:   je     0xee06bba4
  0xee06bb0d:   test   $0xff,%bl
  0xee06bb10:   jne    0xee06bc36
  0xee06bb16:   sub    $0x4,%esp
  0xee06bb19:   vmovss %xmm0,(%esp)
  0xee06bb1e:   lea    -0x2c(%ebp),%edx
  0xee06bb21:   mov    0x4(%edx),%eax
  0xee06bb24:   test   %eax,%eax
  0xee06bb26:   jne    0xee06bb39
  0xee06bb2c:   vmovss (%esp),%xmm0
  0xee06bb31:   add    $0x4,%esp
  0xee06bb34:   jmp    0xee06bba4
  0xee06bb39:   mov    %esi,-0x20(%ebp)
  0xee06bb3c:   lea    (%edx),%eax
  0xee06bb3e:   mov    0x4(%edx),%ecx
  0xee06bb41:   movl   $0x0,0x4(%edx)
  0xee06bb48:   mov    (%eax),%ebx
  0xee06bb4a:   test   %ebx,%ebx
  0xee06bb4c:   je     0xee06bb5c
  0xee06bb52:   lock cmpxchg %ebx,(%ecx)
  0xee06bb56:   jne    0xee06bb72
  0xee06bb5c:   push   %eax
  0xee06bb5d:   push   %edx
  0xee06bb5e:   push   %ecx
  0xee06bb5f:   call   0xf704a910 = Thread::current()
  0xee06bb64:   pop    %ecx
  0xee06bb65:   pop    %edx
  0xee06bb66:   decl   0x308(%eax)
  0xee06bb6c:   pop    %eax
  0xee06bb6d:   jmp    0xee06bb99
  0xee06bb72:   mov    %ecx,0x4(%edx)
  0xee06bb75:   push   %edx
  0xee06bb76:   cmpl   $0x0,-0x8(%ebp)
  0xee06bb7a:   je     0xee06bb91
  0xee06bb80:   push   $0xf785694c
  0xee06bb85:   call   0xee06bb8a
  0xee06bb8a:   pusha  
  0xee06bb8b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06bb90:   hlt    
  0xee06bb91:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06bb96:   add    $0x4,%esp
  0xee06bb99:   mov    -0x20(%ebp),%esi
  0xee06bb9c:   vmovss (%esp),%xmm0
  0xee06bba1:   add    $0x4,%esp
  0xee06bba4:   mov    -0x24(%ebp),%ecx
  0xee06bba7:   lea    -0x24(%ebp),%ebx
  0xee06bbaa:   jmp    0xee06bc32
  0xee06bbaf:   sub    $0x4,%esp
  0xee06bbb2:   vmovss %xmm0,(%esp)
  0xee06bbb7:   mov    %ecx,%edx
  0xee06bbb9:   mov    %esi,-0x20(%ebp)
  0xee06bbbc:   lea    (%edx),%eax
  0xee06bbbe:   mov    0x4(%edx),%ecx
  0xee06bbc1:   movl   $0x0,0x4(%edx)
  0xee06bbc8:   mov    (%eax),%ebx
  0xee06bbca:   test   %ebx,%ebx
  0xee06bbcc:   je     0xee06bbdc
  0xee06bbd2:   lock cmpxchg %ebx,(%ecx)
  0xee06bbd6:   jne    0xee06bbf2
  0xee06bbdc:   push   %eax
  0xee06bbdd:   push   %edx
  0xee06bbde:   push   %ecx
  0xee06bbdf:   call   0xf704a910 = Thread::current()
  0xee06bbe4:   pop    %ecx
  0xee06bbe5:   pop    %edx
  0xee06bbe6:   decl   0x308(%eax)
  0xee06bbec:   pop    %eax
  0xee06bbed:   jmp    0xee06bc19
  0xee06bbf2:   mov    %ecx,0x4(%edx)
  0xee06bbf5:   push   %edx
  0xee06bbf6:   cmpl   $0x0,-0x8(%ebp)
  0xee06bbfa:   je     0xee06bc11
  0xee06bc00:   push   $0xf785694c
  0xee06bc05:   call   0xee06bc0a
  0xee06bc0a:   pusha  
  0xee06bc0b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06bc10:   hlt    
  0xee06bc11:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06bc16:   add    $0x4,%esp
  0xee06bc19:   mov    -0x20(%ebp),%esi
  0xee06bc1c:   vmovss (%esp),%xmm0
  0xee06bc21:   add    $0x4,%esp
  0xee06bc24:   jmp    0xee06bba4
  0xee06bc29:   cmpl   $0x0,0x4(%ecx)
  0xee06bc2d:   jne    0xee06bbaf
  0xee06bc2f:   add    $0x8,%ecx
  0xee06bc32:   cmp    %ebx,%ecx
  0xee06bc34:   jne    0xee06bc29
  0xee06bc36:   cmpb   $0x0,0xf7ca3a0d
  0xee06bc3d:   je     0xee06bc88
  0xee06bc43:   sub    $0x4,%esp
  0xee06bc46:   vmovss %xmm0,(%esp)
  0xee06bc4b:   push   %eax
  0xee06bc4c:   push   %edx
  0xee06bc4d:   push   %ecx
  0xee06bc4e:   call   0xf704a910 = Thread::current()
  0xee06bc53:   pop    %ecx
  0xee06bc54:   pop    %edx
  0xee06bc55:   mov    %eax,%ecx
  0xee06bc57:   pop    %eax
  0xee06bc58:   mov    -0xc(%ebp),%ebx
  0xee06bc5b:   push   %ebx
  0xee06bc5c:   push   %ecx
  0xee06bc5d:   cmpl   $0x0,-0x8(%ebp)
  0xee06bc61:   je     0xee06bc78
  0xee06bc67:   push   $0xf785694c
  0xee06bc6c:   call   0xee06bc71
  0xee06bc71:   pusha  
  0xee06bc72:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06bc77:   hlt    
  0xee06bc78:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee06bc7d:   add    $0x8,%esp
  0xee06bc80:   vmovss (%esp),%xmm0
  0xee06bc85:   add    $0x4,%esp
  0xee06bc88:   mov    -0x4(%ebp),%ebx
  0xee06bc8b:   push   %eax
  0xee06bc8c:   push   %edx
  0xee06bc8d:   push   %ecx
  0xee06bc8e:   call   0xf704a910 = Thread::current()
  0xee06bc93:   pop    %ecx
  0xee06bc94:   pop    %edx
  0xee06bc95:   mov    %eax,%ecx
  0xee06bc97:   pop    %eax
  0xee06bc98:   cmpl   $0x3,0x2bc(%ecx)
  0xee06bc9f:   je     0xee06bd91
  0xee06bca5:   cmp    0x2c4(%ecx),%ebx
  0xee06bcab:   jle    0xee06bd91
  0xee06bcb1:   push   %ecx
  0xee06bcb2:   cmpl   $0x0,-0x8(%ebp)
  0xee06bcb6:   je     0xee06bccd
  0xee06bcbc:   push   $0xf785694c
  0xee06bcc1:   call   0xee06bcc6
  0xee06bcc6:   pusha  
  0xee06bcc7:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06bccc:   hlt    
  0xee06bccd:   call   0xf739fd80 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0xee06bcd2:   add    $0x4,%esp
  0xee06bcd5:   call   0xee06bcdf
  0xee06bcda:   jmp    0xee06bd80
  0xee06bcdf:   lea    0x4(%esp),%eax
  0xee06bce3:   mov    %esi,-0x20(%ebp)
  0xee06bce6:   cmpl   $0x0,-0x8(%ebp)
  0xee06bcea:   je     0xee06bd01
  0xee06bcf0:   push   $0xf78569d8
  0xee06bcf5:   call   0xee06bcfa
  0xee06bcfa:   pusha  
  0xee06bcfb:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06bd00:   hlt    
  0xee06bd01:   push   %eax
  0xee06bd02:   push   %edx
  0xee06bd03:   push   %ecx
  0xee06bd04:   call   0xf704a910 = Thread::current()
  0xee06bd09:   pop    %ecx
  0xee06bd0a:   pop    %edx
  0xee06bd0b:   mov    %eax,%edi
  0xee06bd0d:   pop    %eax
  0xee06bd0e:   push   %edi
  0xee06bd0f:   vzeroupper 
  0xee06bd12:   mov    %ebp,0x230(%edi)
  0xee06bd18:   mov    %eax,0x228(%edi)
  0xee06bd1e:   call   0xf6c0b0b0 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0xee06bd23:   add    $0x4,%esp
  0xee06bd26:   push   %eax
  0xee06bd27:   push   %edx
  0xee06bd28:   push   %ecx
  0xee06bd29:   call   0xf704a910 = Thread::current()
  0xee06bd2e:   pop    %ecx
  0xee06bd2f:   pop    %edx
  0xee06bd30:   cmp    %eax,%edi
  0xee06bd32:   je     0xee06bd49
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06bd38:   push   $0xf78b5a48
  0xee06bd3d:   call   0xee06bd42
  0xee06bd42:   pusha  
  0xee06bd43:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06bd48:   hlt    
  0xee06bd49:   pop    %eax
  0xee06bd4a:   movl   $0x0,0x228(%edi)
  0xee06bd54:   movl   $0x0,0x230(%edi)
  0xee06bd5e:   movl   $0x0,0x22c(%edi)
  0xee06bd68:   vzeroupper 
  0xee06bd6b:   cmpl   $0x0,0x4(%edi)
  0xee06bd6f:   jne    0xee05bbe0
  0xee06bd75:   mov    -0x20(%ebp),%esi
  0xee06bd78:   mov    -0x1c(%ebp),%edi
  0xee06bd7b:   lea    0x0(%ebp,%edi,4),%edi
  0xee06bd7f:   ret    
  0xee06bd80:   push   $0xf77a6b02
  0xee06bd85:   call   0xee06bd8a
  0xee06bd8a:   pusha  
  0xee06bd8b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06bd90:   hlt    
  0xee06bd91:   mov    %ebp,%esp
  0xee06bd93:   pop    %ebp
  0xee06bd94:   pop    %esi
  0xee06bd95:   mov    %ebx,%esp
  0xee06bd97:   jmp    *%esi                        ;; 1727:   __ jmp(rsi);
  0xee06bd99:   mov    -0x20(%ebp),%esi             ;; 1708:   address entry = __ pc();
                                                    ;; 1710:   __ restore_bcp();
  0xee06bd9c:   mov    -0x1c(%ebp),%edi             ;; 1711:   __ restore_locals();
  0xee06bd9f:   lea    0x0(%ebp,%edi,4),%edi
  0xee06bda3:   mov    -0x24(%ebp),%esp             ;; 1712:   __ empty_expression_stack();
  0xee06bda6:   movl   $0x0,-0x8(%ebp)
  0xee06bdad:   emms   
  0xee06bdaf:   push   %eax                         ;; 1713:   __ load_earlyret_value(state);  // 32 bits returns value in rdx, so don't reuse
  0xee06bdb0:   push   %edx
  0xee06bdb1:   push   %ecx
  0xee06bdb2:   call   0xf704a910 = Thread::current()
  0xee06bdb7:   pop    %ecx
  0xee06bdb8:   pop    %edx
  0xee06bdb9:   mov    %eax,%ecx
  0xee06bdbb:   pop    %eax
  0xee06bdbc:   mov    0x390(%ecx),%ecx
  0xee06bdc2:   mov    0x70(%ecx),%edx
  0xee06bdc5:   mov    0x6c(%ecx),%eax
  0xee06bdc8:   movl   $0xb,0x68(%ecx)
  0xee06bdcf:   movl   $0x0,0x6c(%ecx)
  0xee06bdd6:   movl   $0x0,0x70(%ecx)
  0xee06bddd:   push   %eax                         ;; 1716:   NOT_LP64(__ get_thread(thread));
  0xee06bdde:   push   %edx
  0xee06bddf:   push   %ecx
  0xee06bde0:   call   0xf704a910 = Thread::current()
  0xee06bde5:   pop    %ecx
  0xee06bde6:   pop    %edx
  0xee06bde7:   mov    %eax,%ecx
  0xee06bde9:   pop    %eax
  0xee06bdea:   mov    0x390(%ecx),%ecx             ;; 1717:   __ movptr(rcx, Address(thread, JavaThread::jvmti_thread_state_offset()));
  0xee06bdf0:   movl   $0x0,0x64(%ecx)              ;; 1721:   __ movl(cond_addr, JvmtiThreadState::earlyret_inactive);
  0xee06bdf7:   push   %eax                         ;; 1723:   __ remove_activation(state, rsi,
  0xee06bdf8:   push   %edx
  0xee06bdf9:   push   %ecx
  0xee06bdfa:   call   0xf704a910 = Thread::current()
  0xee06bdff:   pop    %ecx
  0xee06be00:   pop    %edx
  0xee06be01:   mov    %eax,%ecx
  0xee06be03:   pop    %eax
  0xee06be04:   cmp    0x288(%ecx),%ebp
  0xee06be0a:   ja     0xee06be15
  0xee06be10:   jmp    0xee06be69
  0xee06be15:   push   %edx
  0xee06be16:   push   %eax
  0xee06be17:   vzeroupper 
  0xee06be1a:   mov    %ebp,0x230(%ecx)
  0xee06be20:   movl   $0xee06be17,0x22c(%ecx)
  0xee06be2a:   mov    %esp,0x228(%ecx)
  0xee06be30:   push   %ecx
  0xee06be31:   call   0xf6c0e120 = InterpreterRuntime::at_unwind(JavaThread*)
  0xee06be36:   add    $0x4,%esp
  0xee06be39:   push   %eax
  0xee06be3a:   push   %edx
  0xee06be3b:   push   %ecx
  0xee06be3c:   call   0xf704a910 = Thread::current()
  0xee06be41:   pop    %ecx
  0xee06be42:   pop    %edx
  0xee06be43:   mov    %eax,%ecx
  0xee06be45:   pop    %eax
  0xee06be46:   movl   $0x0,0x228(%ecx)
  0xee06be50:   movl   $0x0,0x230(%ecx)
  0xee06be5a:   movl   $0x0,0x22c(%ecx)
  0xee06be64:   vzeroupper 
  0xee06be67:   pop    %eax
  0xee06be68:   pop    %edx
  0xee06be69:   mov    0x2b1(%ecx),%bl
  0xee06be6f:   movb   $0x0,0x2b1(%ecx)
  0xee06be76:   mov    -0xc(%ebp),%ecx
  0xee06be79:   mov    0x18(%ecx),%ecx
  0xee06be7c:   test   $0x20,%cl
  0xee06be7f:   je     0xee06bf0a
  0xee06be85:   test   $0xff,%bl
  0xee06be88:   jne    0xee06bf8d
  0xee06be8e:   push   %edx
  0xee06be8f:   push   %eax
  0xee06be90:   lea    -0x2c(%ebp),%edx
  0xee06be93:   mov    0x4(%edx),%eax
  0xee06be96:   test   %eax,%eax
  0xee06be98:   jne    0xee06bea5
  0xee06be9e:   pop    %eax
  0xee06be9f:   pop    %edx
  0xee06bea0:   jmp    0xee06bf0a
  0xee06bea5:   mov    %esi,-0x20(%ebp)
  0xee06bea8:   lea    (%edx),%eax
  0xee06beaa:   mov    0x4(%edx),%ecx
  0xee06bead:   movl   $0x0,0x4(%edx)
  0xee06beb4:   mov    (%eax),%ebx
  0xee06beb6:   test   %ebx,%ebx
  0xee06beb8:   je     0xee06bec8
  0xee06bebe:   lock cmpxchg %ebx,(%ecx)
  0xee06bec2:   jne    0xee06bede
  0xee06bec8:   push   %eax
  0xee06bec9:   push   %edx
  0xee06beca:   push   %ecx
  0xee06becb:   call   0xf704a910 = Thread::current()
  0xee06bed0:   pop    %ecx
  0xee06bed1:   pop    %edx
  0xee06bed2:   decl   0x308(%eax)
  0xee06bed8:   pop    %eax
  0xee06bed9:   jmp    0xee06bf05
  0xee06bede:   mov    %ecx,0x4(%edx)
  0xee06bee1:   push   %edx
  0xee06bee2:   cmpl   $0x0,-0x8(%ebp)
  0xee06bee6:   je     0xee06befd
  0xee06beec:   push   $0xf785694c
  0xee06bef1:   call   0xee06bef6
  0xee06bef6:   pusha  
  0xee06bef7:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06befc:   hlt    
  0xee06befd:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06bf02:   add    $0x4,%esp
  0xee06bf05:   mov    -0x20(%ebp),%esi
  0xee06bf08:   pop    %eax
  0xee06bf09:   pop    %edx
  0xee06bf0a:   mov    -0x24(%ebp),%ecx
  0xee06bf0d:   lea    -0x24(%ebp),%ebx
  0xee06bf10:   jmp    0xee06bf89
  0xee06bf15:   push   %edx
  0xee06bf16:   push   %eax
  0xee06bf17:   mov    %ecx,%edx
  0xee06bf19:   mov    %esi,-0x20(%ebp)
  0xee06bf1c:   lea    (%edx),%eax
  0xee06bf1e:   mov    0x4(%edx),%ecx
  0xee06bf21:   movl   $0x0,0x4(%edx)
  0xee06bf28:   mov    (%eax),%ebx
  0xee06bf2a:   test   %ebx,%ebx
  0xee06bf2c:   je     0xee06bf3c
  0xee06bf32:   lock cmpxchg %ebx,(%ecx)
  0xee06bf36:   jne    0xee06bf52
  0xee06bf3c:   push   %eax
  0xee06bf3d:   push   %edx
  0xee06bf3e:   push   %ecx
  0xee06bf3f:   call   0xf704a910 = Thread::current()
  0xee06bf44:   pop    %ecx
  0xee06bf45:   pop    %edx
  0xee06bf46:   decl   0x308(%eax)
  0xee06bf4c:   pop    %eax
  0xee06bf4d:   jmp    0xee06bf79
  0xee06bf52:   mov    %ecx,0x4(%edx)
  0xee06bf55:   push   %edx
  0xee06bf56:   cmpl   $0x0,-0x8(%ebp)
  0xee06bf5a:   je     0xee06bf71
  0xee06bf60:   push   $0xf785694c
  0xee06bf65:   call   0xee06bf6a
  0xee06bf6a:   pusha  
  0xee06bf6b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06bf70:   hlt    
  0xee06bf71:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06bf76:   add    $0x4,%esp
  0xee06bf79:   mov    -0x20(%ebp),%esi
  0xee06bf7c:   pop    %eax
  0xee06bf7d:   pop    %edx
  0xee06bf7e:   jmp    0xee06bf0a
  0xee06bf80:   cmpl   $0x0,0x4(%ecx)
  0xee06bf84:   jne    0xee06bf15
  0xee06bf86:   add    $0x8,%ecx
  0xee06bf89:   cmp    %ebx,%ecx
  0xee06bf8b:   jne    0xee06bf80
  0xee06bf8d:   cmpb   $0x0,0xf7ca3a0d
  0xee06bf94:   je     0xee06bfd3
  0xee06bf9a:   push   %edx
  0xee06bf9b:   push   %eax
  0xee06bf9c:   push   %eax
  0xee06bf9d:   push   %edx
  0xee06bf9e:   push   %ecx
  0xee06bf9f:   call   0xf704a910 = Thread::current()
  0xee06bfa4:   pop    %ecx
  0xee06bfa5:   pop    %edx
  0xee06bfa6:   mov    %eax,%ecx
  0xee06bfa8:   pop    %eax
  0xee06bfa9:   mov    -0xc(%ebp),%ebx
  0xee06bfac:   push   %ebx
  0xee06bfad:   push   %ecx
  0xee06bfae:   cmpl   $0x0,-0x8(%ebp)
  0xee06bfb2:   je     0xee06bfc9
  0xee06bfb8:   push   $0xf785694c
  0xee06bfbd:   call   0xee06bfc2
  0xee06bfc2:   pusha  
  0xee06bfc3:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06bfc8:   hlt    
  0xee06bfc9:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee06bfce:   add    $0x8,%esp
  0xee06bfd1:   pop    %eax
  0xee06bfd2:   pop    %edx
  0xee06bfd3:   mov    -0x4(%ebp),%ebx
  0xee06bfd6:   push   %eax
  0xee06bfd7:   push   %edx
  0xee06bfd8:   push   %ecx
  0xee06bfd9:   call   0xf704a910 = Thread::current()
  0xee06bfde:   pop    %ecx
  0xee06bfdf:   pop    %edx
  0xee06bfe0:   mov    %eax,%ecx
  0xee06bfe2:   pop    %eax
  0xee06bfe3:   cmpl   $0x3,0x2bc(%ecx)
  0xee06bfea:   je     0xee06c0dc
  0xee06bff0:   cmp    0x2c4(%ecx),%ebx
  0xee06bff6:   jle    0xee06c0dc
  0xee06bffc:   push   %ecx
  0xee06bffd:   cmpl   $0x0,-0x8(%ebp)
  0xee06c001:   je     0xee06c018
  0xee06c007:   push   $0xf785694c
  0xee06c00c:   call   0xee06c011
  0xee06c011:   pusha  
  0xee06c012:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c017:   hlt    
  0xee06c018:   call   0xf739fd80 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0xee06c01d:   add    $0x4,%esp
  0xee06c020:   call   0xee06c02a
  0xee06c025:   jmp    0xee06c0cb
  0xee06c02a:   lea    0x4(%esp),%eax
  0xee06c02e:   mov    %esi,-0x20(%ebp)
  0xee06c031:   cmpl   $0x0,-0x8(%ebp)
  0xee06c035:   je     0xee06c04c
  0xee06c03b:   push   $0xf78569d8
  0xee06c040:   call   0xee06c045
  0xee06c045:   pusha  
  0xee06c046:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c04b:   hlt    
  0xee06c04c:   push   %eax
  0xee06c04d:   push   %edx
  0xee06c04e:   push   %ecx
  0xee06c04f:   call   0xf704a910 = Thread::current()
  0xee06c054:   pop    %ecx
  0xee06c055:   pop    %edx
  0xee06c056:   mov    %eax,%edi
  0xee06c058:   pop    %eax
  0xee06c059:   push   %edi
  0xee06c05a:   vzeroupper 
  0xee06c05d:   mov    %ebp,0x230(%edi)
  0xee06c063:   mov    %eax,0x228(%edi)
  0xee06c069:   call   0xf6c0b0b0 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0xee06c06e:   add    $0x4,%esp
  0xee06c071:   push   %eax
  0xee06c072:   push   %edx
  0xee06c073:   push   %ecx
  0xee06c074:   call   0xf704a910 = Thread::current()
  0xee06c079:   pop    %ecx
  0xee06c07a:   pop    %edx
  0xee06c07b:   cmp    %eax,%edi
  0xee06c07d:   je     0xee06c094
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06c083:   push   $0xf78b5a48
  0xee06c088:   call   0xee06c08d
  0xee06c08d:   pusha  
  0xee06c08e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c093:   hlt    
  0xee06c094:   pop    %eax
  0xee06c095:   movl   $0x0,0x228(%edi)
  0xee06c09f:   movl   $0x0,0x230(%edi)
  0xee06c0a9:   movl   $0x0,0x22c(%edi)
  0xee06c0b3:   vzeroupper 
  0xee06c0b6:   cmpl   $0x0,0x4(%edi)
  0xee06c0ba:   jne    0xee05bbe0
  0xee06c0c0:   mov    -0x20(%ebp),%esi
  0xee06c0c3:   mov    -0x1c(%ebp),%edi
  0xee06c0c6:   lea    0x0(%ebp,%edi,4),%edi
  0xee06c0ca:   ret    
  0xee06c0cb:   push   $0xf77a6b02
  0xee06c0d0:   call   0xee06c0d5
  0xee06c0d5:   pusha  
  0xee06c0d6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c0db:   hlt    
  0xee06c0dc:   mov    %ebp,%esp
  0xee06c0de:   pop    %ebp
  0xee06c0df:   pop    %esi
  0xee06c0e0:   mov    %ebx,%esp
  0xee06c0e2:   jmp    *%esi                        ;; 1727:   __ jmp(rsi);
  0xee06c0e4:   mov    -0x20(%ebp),%esi             ;; 1708:   address entry = __ pc();
                                                    ;; 1710:   __ restore_bcp();
  0xee06c0e7:   mov    -0x1c(%ebp),%edi             ;; 1711:   __ restore_locals();
  0xee06c0ea:   lea    0x0(%ebp,%edi,4),%edi
  0xee06c0ee:   mov    -0x24(%ebp),%esp             ;; 1712:   __ empty_expression_stack();
  0xee06c0f1:   movl   $0x0,-0x8(%ebp)
  0xee06c0f8:   emms   
  0xee06c0fa:   push   %eax                         ;; 1713:   __ load_earlyret_value(state);  // 32 bits returns value in rdx, so don't reuse
  0xee06c0fb:   push   %edx
  0xee06c0fc:   push   %ecx
  0xee06c0fd:   call   0xf704a910 = Thread::current()
  0xee06c102:   pop    %ecx
  0xee06c103:   pop    %edx
  0xee06c104:   mov    %eax,%ecx
  0xee06c106:   pop    %eax
  0xee06c107:   mov    0x390(%ecx),%ecx
  0xee06c10d:   mov    0x6c(%ecx),%eax
  0xee06c110:   movl   $0xb,0x68(%ecx)
  0xee06c117:   movl   $0x0,0x6c(%ecx)
  0xee06c11e:   movl   $0x0,0x70(%ecx)
  0xee06c125:   push   %eax                         ;; 1716:   NOT_LP64(__ get_thread(thread));
  0xee06c126:   push   %edx
  0xee06c127:   push   %ecx
  0xee06c128:   call   0xf704a910 = Thread::current()
  0xee06c12d:   pop    %ecx
  0xee06c12e:   pop    %edx
  0xee06c12f:   mov    %eax,%ecx
  0xee06c131:   pop    %eax
  0xee06c132:   mov    0x390(%ecx),%ecx             ;; 1717:   __ movptr(rcx, Address(thread, JavaThread::jvmti_thread_state_offset()));
  0xee06c138:   movl   $0x0,0x64(%ecx)              ;; 1721:   __ movl(cond_addr, JvmtiThreadState::earlyret_inactive);
  0xee06c13f:   push   %eax                         ;; 1723:   __ remove_activation(state, rsi,
  0xee06c140:   push   %edx
  0xee06c141:   push   %ecx
  0xee06c142:   call   0xf704a910 = Thread::current()
  0xee06c147:   pop    %ecx
  0xee06c148:   pop    %edx
  0xee06c149:   mov    %eax,%ecx
  0xee06c14b:   pop    %eax
  0xee06c14c:   cmp    0x288(%ecx),%ebp
  0xee06c152:   ja     0xee06c15d
  0xee06c158:   jmp    0xee06c1af
  0xee06c15d:   push   %eax
  0xee06c15e:   vzeroupper 
  0xee06c161:   mov    %ebp,0x230(%ecx)
  0xee06c167:   movl   $0xee06c15e,0x22c(%ecx)
  0xee06c171:   mov    %esp,0x228(%ecx)
  0xee06c177:   push   %ecx
  0xee06c178:   call   0xf6c0e120 = InterpreterRuntime::at_unwind(JavaThread*)
  0xee06c17d:   add    $0x4,%esp
  0xee06c180:   push   %eax
  0xee06c181:   push   %edx
  0xee06c182:   push   %ecx
  0xee06c183:   call   0xf704a910 = Thread::current()
  0xee06c188:   pop    %ecx
  0xee06c189:   pop    %edx
  0xee06c18a:   mov    %eax,%ecx
  0xee06c18c:   pop    %eax
  0xee06c18d:   movl   $0x0,0x228(%ecx)
  0xee06c197:   movl   $0x0,0x230(%ecx)
  0xee06c1a1:   movl   $0x0,0x22c(%ecx)
  0xee06c1ab:   vzeroupper 
  0xee06c1ae:   pop    %eax
  0xee06c1af:   mov    0x2b1(%ecx),%bl
  0xee06c1b5:   movb   $0x0,0x2b1(%ecx)
  0xee06c1bc:   mov    -0xc(%ebp),%ecx
  0xee06c1bf:   mov    0x18(%ecx),%ecx
  0xee06c1c2:   test   $0x20,%cl
  0xee06c1c5:   je     0xee06c24d
  0xee06c1cb:   test   $0xff,%bl
  0xee06c1ce:   jne    0xee06c2ce
  0xee06c1d4:   push   %eax
  0xee06c1d5:   lea    -0x2c(%ebp),%edx
  0xee06c1d8:   mov    0x4(%edx),%eax
  0xee06c1db:   test   %eax,%eax
  0xee06c1dd:   jne    0xee06c1e9
  0xee06c1e3:   pop    %eax
  0xee06c1e4:   jmp    0xee06c24d
  0xee06c1e9:   mov    %esi,-0x20(%ebp)
  0xee06c1ec:   lea    (%edx),%eax
  0xee06c1ee:   mov    0x4(%edx),%ecx
  0xee06c1f1:   movl   $0x0,0x4(%edx)
  0xee06c1f8:   mov    (%eax),%ebx
  0xee06c1fa:   test   %ebx,%ebx
  0xee06c1fc:   je     0xee06c20c
  0xee06c202:   lock cmpxchg %ebx,(%ecx)
  0xee06c206:   jne    0xee06c222
  0xee06c20c:   push   %eax
  0xee06c20d:   push   %edx
  0xee06c20e:   push   %ecx
  0xee06c20f:   call   0xf704a910 = Thread::current()
  0xee06c214:   pop    %ecx
  0xee06c215:   pop    %edx
  0xee06c216:   decl   0x308(%eax)
  0xee06c21c:   pop    %eax
  0xee06c21d:   jmp    0xee06c249
  0xee06c222:   mov    %ecx,0x4(%edx)
  0xee06c225:   push   %edx
  0xee06c226:   cmpl   $0x0,-0x8(%ebp)
  0xee06c22a:   je     0xee06c241
  0xee06c230:   push   $0xf785694c
  0xee06c235:   call   0xee06c23a
  0xee06c23a:   pusha  
  0xee06c23b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c240:   hlt    
  0xee06c241:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06c246:   add    $0x4,%esp
  0xee06c249:   mov    -0x20(%ebp),%esi
  0xee06c24c:   pop    %eax
  0xee06c24d:   mov    -0x24(%ebp),%ecx
  0xee06c250:   lea    -0x24(%ebp),%ebx
  0xee06c253:   jmp    0xee06c2ca
  0xee06c258:   push   %eax
  0xee06c259:   mov    %ecx,%edx
  0xee06c25b:   mov    %esi,-0x20(%ebp)
  0xee06c25e:   lea    (%edx),%eax
  0xee06c260:   mov    0x4(%edx),%ecx
  0xee06c263:   movl   $0x0,0x4(%edx)
  0xee06c26a:   mov    (%eax),%ebx
  0xee06c26c:   test   %ebx,%ebx
  0xee06c26e:   je     0xee06c27e
  0xee06c274:   lock cmpxchg %ebx,(%ecx)
  0xee06c278:   jne    0xee06c294
  0xee06c27e:   push   %eax
  0xee06c27f:   push   %edx
  0xee06c280:   push   %ecx
  0xee06c281:   call   0xf704a910 = Thread::current()
  0xee06c286:   pop    %ecx
  0xee06c287:   pop    %edx
  0xee06c288:   decl   0x308(%eax)
  0xee06c28e:   pop    %eax
  0xee06c28f:   jmp    0xee06c2bb
  0xee06c294:   mov    %ecx,0x4(%edx)
  0xee06c297:   push   %edx
  0xee06c298:   cmpl   $0x0,-0x8(%ebp)
  0xee06c29c:   je     0xee06c2b3
  0xee06c2a2:   push   $0xf785694c
  0xee06c2a7:   call   0xee06c2ac
  0xee06c2ac:   pusha  
  0xee06c2ad:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c2b2:   hlt    
  0xee06c2b3:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06c2b8:   add    $0x4,%esp
  0xee06c2bb:   mov    -0x20(%ebp),%esi
  0xee06c2be:   pop    %eax
  0xee06c2bf:   jmp    0xee06c24d
  0xee06c2c1:   cmpl   $0x0,0x4(%ecx)
  0xee06c2c5:   jne    0xee06c258
  0xee06c2c7:   add    $0x8,%ecx
  0xee06c2ca:   cmp    %ebx,%ecx
  0xee06c2cc:   jne    0xee06c2c1
  0xee06c2ce:   cmpb   $0x0,0xf7ca3a0d
  0xee06c2d5:   je     0xee06c312
  0xee06c2db:   push   %eax
  0xee06c2dc:   push   %eax
  0xee06c2dd:   push   %edx
  0xee06c2de:   push   %ecx
  0xee06c2df:   call   0xf704a910 = Thread::current()
  0xee06c2e4:   pop    %ecx
  0xee06c2e5:   pop    %edx
  0xee06c2e6:   mov    %eax,%ecx
  0xee06c2e8:   pop    %eax
  0xee06c2e9:   mov    -0xc(%ebp),%ebx
  0xee06c2ec:   push   %ebx
  0xee06c2ed:   push   %ecx
  0xee06c2ee:   cmpl   $0x0,-0x8(%ebp)
  0xee06c2f2:   je     0xee06c309
  0xee06c2f8:   push   $0xf785694c
  0xee06c2fd:   call   0xee06c302
  0xee06c302:   pusha  
  0xee06c303:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c308:   hlt    
  0xee06c309:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee06c30e:   add    $0x8,%esp
  0xee06c311:   pop    %eax
  0xee06c312:   mov    -0x4(%ebp),%ebx
  0xee06c315:   push   %eax
  0xee06c316:   push   %edx
  0xee06c317:   push   %ecx
  0xee06c318:   call   0xf704a910 = Thread::current()
  0xee06c31d:   pop    %ecx
  0xee06c31e:   pop    %edx
  0xee06c31f:   mov    %eax,%ecx
  0xee06c321:   pop    %eax
  0xee06c322:   cmpl   $0x3,0x2bc(%ecx)
  0xee06c329:   je     0xee06c41b
  0xee06c32f:   cmp    0x2c4(%ecx),%ebx
  0xee06c335:   jle    0xee06c41b
  0xee06c33b:   push   %ecx
  0xee06c33c:   cmpl   $0x0,-0x8(%ebp)
  0xee06c340:   je     0xee06c357
  0xee06c346:   push   $0xf785694c
  0xee06c34b:   call   0xee06c350
  0xee06c350:   pusha  
  0xee06c351:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c356:   hlt    
  0xee06c357:   call   0xf739fd80 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0xee06c35c:   add    $0x4,%esp
  0xee06c35f:   call   0xee06c369
  0xee06c364:   jmp    0xee06c40a
  0xee06c369:   lea    0x4(%esp),%eax
  0xee06c36d:   mov    %esi,-0x20(%ebp)
  0xee06c370:   cmpl   $0x0,-0x8(%ebp)
  0xee06c374:   je     0xee06c38b
  0xee06c37a:   push   $0xf78569d8
  0xee06c37f:   call   0xee06c384
  0xee06c384:   pusha  
  0xee06c385:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c38a:   hlt    
  0xee06c38b:   push   %eax
  0xee06c38c:   push   %edx
  0xee06c38d:   push   %ecx
  0xee06c38e:   call   0xf704a910 = Thread::current()
  0xee06c393:   pop    %ecx
  0xee06c394:   pop    %edx
  0xee06c395:   mov    %eax,%edi
  0xee06c397:   pop    %eax
  0xee06c398:   push   %edi
  0xee06c399:   vzeroupper 
  0xee06c39c:   mov    %ebp,0x230(%edi)
  0xee06c3a2:   mov    %eax,0x228(%edi)
  0xee06c3a8:   call   0xf6c0b0b0 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0xee06c3ad:   add    $0x4,%esp
  0xee06c3b0:   push   %eax
  0xee06c3b1:   push   %edx
  0xee06c3b2:   push   %ecx
  0xee06c3b3:   call   0xf704a910 = Thread::current()
  0xee06c3b8:   pop    %ecx
  0xee06c3b9:   pop    %edx
  0xee06c3ba:   cmp    %eax,%edi
  0xee06c3bc:   je     0xee06c3d3
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06c3c2:   push   $0xf78b5a48
  0xee06c3c7:   call   0xee06c3cc
  0xee06c3cc:   pusha  
  0xee06c3cd:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c3d2:   hlt    
  0xee06c3d3:   pop    %eax
  0xee06c3d4:   movl   $0x0,0x228(%edi)
  0xee06c3de:   movl   $0x0,0x230(%edi)
  0xee06c3e8:   movl   $0x0,0x22c(%edi)
  0xee06c3f2:   vzeroupper 
  0xee06c3f5:   cmpl   $0x0,0x4(%edi)
  0xee06c3f9:   jne    0xee05bbe0
  0xee06c3ff:   mov    -0x20(%ebp),%esi
  0xee06c402:   mov    -0x1c(%ebp),%edi
  0xee06c405:   lea    0x0(%ebp,%edi,4),%edi
  0xee06c409:   ret    
  0xee06c40a:   push   $0xf77a6b02
  0xee06c40f:   call   0xee06c414
  0xee06c414:   pusha  
  0xee06c415:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c41a:   hlt    
  0xee06c41b:   mov    %ebp,%esp
  0xee06c41d:   pop    %ebp
  0xee06c41e:   pop    %esi
  0xee06c41f:   mov    %ebx,%esp
  0xee06c421:   jmp    *%esi                        ;; 1727:   __ jmp(rsi);
  0xee06c423:   mov    -0x20(%ebp),%esi             ;; 1708:   address entry = __ pc();
                                                    ;; 1710:   __ restore_bcp();
  0xee06c426:   mov    -0x1c(%ebp),%edi             ;; 1711:   __ restore_locals();
  0xee06c429:   lea    0x0(%ebp,%edi,4),%edi
  0xee06c42d:   mov    -0x24(%ebp),%esp             ;; 1712:   __ empty_expression_stack();
  0xee06c430:   movl   $0x0,-0x8(%ebp)
  0xee06c437:   emms   
  0xee06c439:   push   %eax                         ;; 1713:   __ load_earlyret_value(state);  // 32 bits returns value in rdx, so don't reuse
  0xee06c43a:   push   %edx
  0xee06c43b:   push   %ecx
  0xee06c43c:   call   0xf704a910 = Thread::current()
  0xee06c441:   pop    %ecx
  0xee06c442:   pop    %edx
  0xee06c443:   mov    %eax,%ecx
  0xee06c445:   pop    %eax
  0xee06c446:   mov    0x390(%ecx),%ecx
  0xee06c44c:   mov    0x74(%ecx),%eax
  0xee06c44f:   movl   $0x0,0x74(%ecx)
  0xee06c456:   movl   $0xb,0x68(%ecx)
  0xee06c45d:   movl   $0x0,0x6c(%ecx)
  0xee06c464:   movl   $0x0,0x70(%ecx)
  0xee06c46b:   push   %eax                         ;; 1716:   NOT_LP64(__ get_thread(thread));
  0xee06c46c:   push   %edx
  0xee06c46d:   push   %ecx
  0xee06c46e:   call   0xf704a910 = Thread::current()
  0xee06c473:   pop    %ecx
  0xee06c474:   pop    %edx
  0xee06c475:   mov    %eax,%ecx
  0xee06c477:   pop    %eax
  0xee06c478:   mov    0x390(%ecx),%ecx             ;; 1717:   __ movptr(rcx, Address(thread, JavaThread::jvmti_thread_state_offset()));
  0xee06c47e:   movl   $0x0,0x64(%ecx)              ;; 1721:   __ movl(cond_addr, JvmtiThreadState::earlyret_inactive);
  0xee06c485:   push   %eax                         ;; 1723:   __ remove_activation(state, rsi,
  0xee06c486:   push   %edx
  0xee06c487:   push   %ecx
  0xee06c488:   call   0xf704a910 = Thread::current()
  0xee06c48d:   pop    %ecx
  0xee06c48e:   pop    %edx
  0xee06c48f:   mov    %eax,%ecx
  0xee06c491:   pop    %eax
  0xee06c492:   cmp    0x288(%ecx),%ebp
  0xee06c498:   ja     0xee06c4a3
  0xee06c49e:   jmp    0xee06c4f5
  0xee06c4a3:   push   %eax
  0xee06c4a4:   vzeroupper 
  0xee06c4a7:   mov    %ebp,0x230(%ecx)
  0xee06c4ad:   movl   $0xee06c4a4,0x22c(%ecx)
  0xee06c4b7:   mov    %esp,0x228(%ecx)
  0xee06c4bd:   push   %ecx
  0xee06c4be:   call   0xf6c0e120 = InterpreterRuntime::at_unwind(JavaThread*)
  0xee06c4c3:   add    $0x4,%esp
  0xee06c4c6:   push   %eax
  0xee06c4c7:   push   %edx
  0xee06c4c8:   push   %ecx
  0xee06c4c9:   call   0xf704a910 = Thread::current()
  0xee06c4ce:   pop    %ecx
  0xee06c4cf:   pop    %edx
  0xee06c4d0:   mov    %eax,%ecx
  0xee06c4d2:   pop    %eax
  0xee06c4d3:   movl   $0x0,0x228(%ecx)
  0xee06c4dd:   movl   $0x0,0x230(%ecx)
  0xee06c4e7:   movl   $0x0,0x22c(%ecx)
  0xee06c4f1:   vzeroupper 
  0xee06c4f4:   pop    %eax
  0xee06c4f5:   mov    0x2b1(%ecx),%bl
  0xee06c4fb:   movb   $0x0,0x2b1(%ecx)
  0xee06c502:   mov    -0xc(%ebp),%ecx
  0xee06c505:   mov    0x18(%ecx),%ecx
  0xee06c508:   test   $0x20,%cl
  0xee06c50b:   je     0xee06c593
  0xee06c511:   test   $0xff,%bl
  0xee06c514:   jne    0xee06c614
  0xee06c51a:   push   %eax
  0xee06c51b:   lea    -0x2c(%ebp),%edx
  0xee06c51e:   mov    0x4(%edx),%eax
  0xee06c521:   test   %eax,%eax
  0xee06c523:   jne    0xee06c52f
  0xee06c529:   pop    %eax
  0xee06c52a:   jmp    0xee06c593
  0xee06c52f:   mov    %esi,-0x20(%ebp)
  0xee06c532:   lea    (%edx),%eax
  0xee06c534:   mov    0x4(%edx),%ecx
  0xee06c537:   movl   $0x0,0x4(%edx)
  0xee06c53e:   mov    (%eax),%ebx
  0xee06c540:   test   %ebx,%ebx
  0xee06c542:   je     0xee06c552
  0xee06c548:   lock cmpxchg %ebx,(%ecx)
  0xee06c54c:   jne    0xee06c568
  0xee06c552:   push   %eax
  0xee06c553:   push   %edx
  0xee06c554:   push   %ecx
  0xee06c555:   call   0xf704a910 = Thread::current()
  0xee06c55a:   pop    %ecx
  0xee06c55b:   pop    %edx
  0xee06c55c:   decl   0x308(%eax)
  0xee06c562:   pop    %eax
  0xee06c563:   jmp    0xee06c58f
  0xee06c568:   mov    %ecx,0x4(%edx)
  0xee06c56b:   push   %edx
  0xee06c56c:   cmpl   $0x0,-0x8(%ebp)
  0xee06c570:   je     0xee06c587
  0xee06c576:   push   $0xf785694c
  0xee06c57b:   call   0xee06c580
  0xee06c580:   pusha  
  0xee06c581:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c586:   hlt    
  0xee06c587:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06c58c:   add    $0x4,%esp
  0xee06c58f:   mov    -0x20(%ebp),%esi
  0xee06c592:   pop    %eax
  0xee06c593:   mov    -0x24(%ebp),%ecx
  0xee06c596:   lea    -0x24(%ebp),%ebx
  0xee06c599:   jmp    0xee06c610
  0xee06c59e:   push   %eax
  0xee06c59f:   mov    %ecx,%edx
  0xee06c5a1:   mov    %esi,-0x20(%ebp)
  0xee06c5a4:   lea    (%edx),%eax
  0xee06c5a6:   mov    0x4(%edx),%ecx
  0xee06c5a9:   movl   $0x0,0x4(%edx)
  0xee06c5b0:   mov    (%eax),%ebx
  0xee06c5b2:   test   %ebx,%ebx
  0xee06c5b4:   je     0xee06c5c4
  0xee06c5ba:   lock cmpxchg %ebx,(%ecx)
  0xee06c5be:   jne    0xee06c5da
  0xee06c5c4:   push   %eax
  0xee06c5c5:   push   %edx
  0xee06c5c6:   push   %ecx
  0xee06c5c7:   call   0xf704a910 = Thread::current()
  0xee06c5cc:   pop    %ecx
  0xee06c5cd:   pop    %edx
  0xee06c5ce:   decl   0x308(%eax)
  0xee06c5d4:   pop    %eax
  0xee06c5d5:   jmp    0xee06c601
  0xee06c5da:   mov    %ecx,0x4(%edx)
  0xee06c5dd:   push   %edx
  0xee06c5de:   cmpl   $0x0,-0x8(%ebp)
  0xee06c5e2:   je     0xee06c5f9
  0xee06c5e8:   push   $0xf785694c
  0xee06c5ed:   call   0xee06c5f2
  0xee06c5f2:   pusha  
  0xee06c5f3:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c5f8:   hlt    
  0xee06c5f9:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06c5fe:   add    $0x4,%esp
  0xee06c601:   mov    -0x20(%ebp),%esi
  0xee06c604:   pop    %eax
  0xee06c605:   jmp    0xee06c593
  0xee06c607:   cmpl   $0x0,0x4(%ecx)
  0xee06c60b:   jne    0xee06c59e
  0xee06c60d:   add    $0x8,%ecx
  0xee06c610:   cmp    %ebx,%ecx
  0xee06c612:   jne    0xee06c607
  0xee06c614:   cmpb   $0x0,0xf7ca3a0d
  0xee06c61b:   je     0xee06c658
  0xee06c621:   push   %eax
  0xee06c622:   push   %eax
  0xee06c623:   push   %edx
  0xee06c624:   push   %ecx
  0xee06c625:   call   0xf704a910 = Thread::current()
  0xee06c62a:   pop    %ecx
  0xee06c62b:   pop    %edx
  0xee06c62c:   mov    %eax,%ecx
  0xee06c62e:   pop    %eax
  0xee06c62f:   mov    -0xc(%ebp),%ebx
  0xee06c632:   push   %ebx
  0xee06c633:   push   %ecx
  0xee06c634:   cmpl   $0x0,-0x8(%ebp)
  0xee06c638:   je     0xee06c64f
  0xee06c63e:   push   $0xf785694c
  0xee06c643:   call   0xee06c648
  0xee06c648:   pusha  
  0xee06c649:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c64e:   hlt    
  0xee06c64f:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee06c654:   add    $0x8,%esp
  0xee06c657:   pop    %eax
  0xee06c658:   mov    -0x4(%ebp),%ebx
  0xee06c65b:   push   %eax
  0xee06c65c:   push   %edx
  0xee06c65d:   push   %ecx
  0xee06c65e:   call   0xf704a910 = Thread::current()
  0xee06c663:   pop    %ecx
  0xee06c664:   pop    %edx
  0xee06c665:   mov    %eax,%ecx
  0xee06c667:   pop    %eax
  0xee06c668:   cmpl   $0x3,0x2bc(%ecx)
  0xee06c66f:   je     0xee06c761
  0xee06c675:   cmp    0x2c4(%ecx),%ebx
  0xee06c67b:   jle    0xee06c761
  0xee06c681:   push   %ecx
  0xee06c682:   cmpl   $0x0,-0x8(%ebp)
  0xee06c686:   je     0xee06c69d
  0xee06c68c:   push   $0xf785694c
  0xee06c691:   call   0xee06c696
  0xee06c696:   pusha  
  0xee06c697:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c69c:   hlt    
  0xee06c69d:   call   0xf739fd80 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0xee06c6a2:   add    $0x4,%esp
  0xee06c6a5:   call   0xee06c6af
  0xee06c6aa:   jmp    0xee06c750
  0xee06c6af:   lea    0x4(%esp),%eax
  0xee06c6b3:   mov    %esi,-0x20(%ebp)
  0xee06c6b6:   cmpl   $0x0,-0x8(%ebp)
  0xee06c6ba:   je     0xee06c6d1
  0xee06c6c0:   push   $0xf78569d8
  0xee06c6c5:   call   0xee06c6ca
  0xee06c6ca:   pusha  
  0xee06c6cb:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c6d0:   hlt    
  0xee06c6d1:   push   %eax
  0xee06c6d2:   push   %edx
  0xee06c6d3:   push   %ecx
  0xee06c6d4:   call   0xf704a910 = Thread::current()
  0xee06c6d9:   pop    %ecx
  0xee06c6da:   pop    %edx
  0xee06c6db:   mov    %eax,%edi
  0xee06c6dd:   pop    %eax
  0xee06c6de:   push   %edi
  0xee06c6df:   vzeroupper 
  0xee06c6e2:   mov    %ebp,0x230(%edi)
  0xee06c6e8:   mov    %eax,0x228(%edi)
  0xee06c6ee:   call   0xf6c0b0b0 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0xee06c6f3:   add    $0x4,%esp
  0xee06c6f6:   push   %eax
  0xee06c6f7:   push   %edx
  0xee06c6f8:   push   %ecx
  0xee06c6f9:   call   0xf704a910 = Thread::current()
  0xee06c6fe:   pop    %ecx
  0xee06c6ff:   pop    %edx
  0xee06c700:   cmp    %eax,%edi
  0xee06c702:   je     0xee06c719
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06c708:   push   $0xf78b5a48
  0xee06c70d:   call   0xee06c712
  0xee06c712:   pusha  
  0xee06c713:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c718:   hlt    
  0xee06c719:   pop    %eax
  0xee06c71a:   movl   $0x0,0x228(%edi)
  0xee06c724:   movl   $0x0,0x230(%edi)
  0xee06c72e:   movl   $0x0,0x22c(%edi)
  0xee06c738:   vzeroupper 
  0xee06c73b:   cmpl   $0x0,0x4(%edi)
  0xee06c73f:   jne    0xee05bbe0
  0xee06c745:   mov    -0x20(%ebp),%esi
  0xee06c748:   mov    -0x1c(%ebp),%edi
  0xee06c74b:   lea    0x0(%ebp,%edi,4),%edi
  0xee06c74f:   ret    
  0xee06c750:   push   $0xf77a6b02
  0xee06c755:   call   0xee06c75a
  0xee06c75a:   pusha  
  0xee06c75b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c760:   hlt    
  0xee06c761:   mov    %ebp,%esp
  0xee06c763:   pop    %ebp
  0xee06c764:   pop    %esi
  0xee06c765:   mov    %ebx,%esp
  0xee06c767:   jmp    *%esi                        ;; 1727:   __ jmp(rsi);
  0xee06c769:   nop
  0xee06c76a:   nop
  0xee06c76b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
result handlers for native calls  [0xee06c780, 0xee06c7b8]  56 bytes

--------------------------------------------------------------------------------
  0xee06c780:   and    $0xff,%eax                   ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;;  310:   address entry = __ pc();
                                                    ;;  312:   case T_BOOLEAN: __ c2bool(rax);            break;
  0xee06c785:   setne  %al
  0xee06c788:   ret                                 ;;  362:   __ ret(0);                                   // return from result handler
  0xee06c789:   and    $0xffff,%eax                 ;;  310:   address entry = __ pc();
                                                    ;;  314:   case T_CHAR   : __ andptr(rax, 0xFFFF);    break;
  0xee06c78e:   ret                                 ;;  362:   __ ret(0);                                   // return from result handler
  0xee06c78f:   movsbl %al,%eax                     ;;  310:   address entry = __ pc();
                                                    ;;  318:   case T_BYTE   : __ sign_extend_byte(rax);  break;
  0xee06c792:   ret                                 ;;  362:   __ ret(0);                                   // return from result handler
  0xee06c793:   movswl %ax,%eax                     ;;  310:   address entry = __ pc();
                                                    ;;  319:   case T_SHORT  : __ sign_extend_short(rax); break;
  0xee06c796:   ret                                 ;;  362:   __ ret(0);                                   // return from result handler
  0xee06c797:   ret                                 ;;  310:   address entry = __ pc();
                                                    ;;  362:   __ ret(0);                                   // return from result handler
  0xee06c798:   pop    %ecx                         ;;  310:   address entry = __ pc();
                                                    ;;  327:       __ pop(t);                            // remove return address first
  0xee06c799:   fldl   (%esp)                       ;;  333:         __ fld_d(Address(rsp, 0));
  0xee06c79c:   fstps  (%esp)                       ;;  335:         __ fstp_s(Address(rsp, 0));
  0xee06c79f:   vmovss (%esp),%xmm0                 ;;  337:         __ movflt(xmm0, Address(rsp, 0));
  0xee06c7a4:   add    $0x8,%esp                    ;;  345:       __ addptr(rsp, 2 * wordSize);
  0xee06c7a7:   push   %ecx                         ;;  346:       __ push(t);                           // restore return address
  0xee06c7a8:   ret                                 ;;  362:   __ ret(0);                                   // return from result handler
  0xee06c7a9:   pop    %ecx                         ;;  310:   address entry = __ pc();
                                                    ;;  327:       __ pop(t);                            // remove return address first
  0xee06c7aa:   vmovsd (%esp),%xmm0                 ;;  339:         __ movdbl(xmm0, Address(rsp, 0));
  0xee06c7af:   add    $0x8,%esp                    ;;  345:       __ addptr(rsp, 2 * wordSize);
  0xee06c7b2:   push   %ecx                         ;;  346:       __ push(t);                           // restore return address
  0xee06c7b3:   ret                                 ;;  362:   __ ret(0);                                   // return from result handler
  0xee06c7b4:   mov    0x8(%ebp),%eax               ;;  310:   address entry = __ pc();
                                                    ;;  356:     __ movptr(rax, Address(rbp, frame::interpreter_frame_oop_temp_offset*wordSize));
  0xee06c7b7:   ret                                 ;;  358:     __ verify_oop(rax);
                                                    ;;  362:   __ ret(0);                                   // return from result handler
--------------------------------------------------------------------------------

----------------------------------------------------------------------
safepoint entry points  [0xee06c7e0, 0xee06cc34]  1108 bytes

--------------------------------------------------------------------------------
  0xee06c7e0:   call   0xee06c7ea                   ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;;  369:   address entry = __ pc();
                                                    ;;  371:   __ push(state);
                                                    ;;  372:   __ push_cont_fastpath();
                                                    ;;  373:   __ call_VM(noreg, runtime_entry);
  0xee06c7e5:   jmp    0xee06c88b
  0xee06c7ea:   lea    0x4(%esp),%eax
  0xee06c7ee:   mov    %esi,-0x20(%ebp)
  0xee06c7f1:   cmpl   $0x0,-0x8(%ebp)
  0xee06c7f5:   je     0xee06c80c
  0xee06c7fb:   push   $0xf78569d8
  0xee06c800:   call   0xee06c805
  0xee06c805:   pusha  
  0xee06c806:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c80b:   hlt    
  0xee06c80c:   push   %eax
  0xee06c80d:   push   %edx
  0xee06c80e:   push   %ecx
  0xee06c80f:   call   0xf704a910 = Thread::current()
  0xee06c814:   pop    %ecx
  0xee06c815:   pop    %edx
  0xee06c816:   mov    %eax,%edi
  0xee06c818:   pop    %eax
  0xee06c819:   push   %edi
  0xee06c81a:   vzeroupper 
  0xee06c81d:   mov    %ebp,0x230(%edi)
  0xee06c823:   mov    %eax,0x228(%edi)
  0xee06c829:   call   0xf6c0de90 = InterpreterRuntime::at_safepoint(JavaThread*)
  0xee06c82e:   add    $0x4,%esp
  0xee06c831:   push   %eax
  0xee06c832:   push   %edx
  0xee06c833:   push   %ecx
  0xee06c834:   call   0xf704a910 = Thread::current()
  0xee06c839:   pop    %ecx
  0xee06c83a:   pop    %edx
  0xee06c83b:   cmp    %eax,%edi
  0xee06c83d:   je     0xee06c854
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06c843:   push   $0xf78b5a48
  0xee06c848:   call   0xee06c84d
  0xee06c84d:   pusha  
  0xee06c84e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c853:   hlt    
  0xee06c854:   pop    %eax
  0xee06c855:   movl   $0x0,0x228(%edi)
  0xee06c85f:   movl   $0x0,0x230(%edi)
  0xee06c869:   movl   $0x0,0x22c(%edi)
  0xee06c873:   vzeroupper 
  0xee06c876:   cmpl   $0x0,0x4(%edi)
  0xee06c87a:   jne    0xee05bbe0
  0xee06c880:   mov    -0x20(%ebp),%esi
  0xee06c883:   mov    -0x1c(%ebp),%edi
  0xee06c886:   lea    0x0(%ebp,%edi,4),%edi
  0xee06c88a:   ret    
  0xee06c88b:   movzbl (%esi),%ebx                  ;;  374:   __ pop_cont_fastpath();
                                                    ;;  376:   __ dispatch_via(vtos, Interpreter::_normal_table.table_for(vtos));
  0xee06c88e:   jmp    *-0x833f2a0(,%ebx,4)
  0xee06c895:   sub    $0x8,%esp                    ;;  369:   address entry = __ pc();
                                                    ;;  371:   __ push(state);
  0xee06c898:   vmovsd %xmm0,(%esp)
  0xee06c89d:   call   0xee06c8a7                   ;;  372:   __ push_cont_fastpath();
                                                    ;;  373:   __ call_VM(noreg, runtime_entry);
  0xee06c8a2:   jmp    0xee06c948
  0xee06c8a7:   lea    0x4(%esp),%eax
  0xee06c8ab:   mov    %esi,-0x20(%ebp)
  0xee06c8ae:   cmpl   $0x0,-0x8(%ebp)
  0xee06c8b2:   je     0xee06c8c9
  0xee06c8b8:   push   $0xf78569d8
  0xee06c8bd:   call   0xee06c8c2
  0xee06c8c2:   pusha  
  0xee06c8c3:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c8c8:   hlt    
  0xee06c8c9:   push   %eax
  0xee06c8ca:   push   %edx
  0xee06c8cb:   push   %ecx
  0xee06c8cc:   call   0xf704a910 = Thread::current()
  0xee06c8d1:   pop    %ecx
  0xee06c8d2:   pop    %edx
  0xee06c8d3:   mov    %eax,%edi
  0xee06c8d5:   pop    %eax
  0xee06c8d6:   push   %edi
  0xee06c8d7:   vzeroupper 
  0xee06c8da:   mov    %ebp,0x230(%edi)
  0xee06c8e0:   mov    %eax,0x228(%edi)
  0xee06c8e6:   call   0xf6c0de90 = InterpreterRuntime::at_safepoint(JavaThread*)
  0xee06c8eb:   add    $0x4,%esp
  0xee06c8ee:   push   %eax
  0xee06c8ef:   push   %edx
  0xee06c8f0:   push   %ecx
  0xee06c8f1:   call   0xf704a910 = Thread::current()
  0xee06c8f6:   pop    %ecx
  0xee06c8f7:   pop    %edx
  0xee06c8f8:   cmp    %eax,%edi
  0xee06c8fa:   je     0xee06c911
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06c900:   push   $0xf78b5a48
  0xee06c905:   call   0xee06c90a
  0xee06c90a:   pusha  
  0xee06c90b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c910:   hlt    
  0xee06c911:   pop    %eax
  0xee06c912:   movl   $0x0,0x228(%edi)
  0xee06c91c:   movl   $0x0,0x230(%edi)
  0xee06c926:   movl   $0x0,0x22c(%edi)
  0xee06c930:   vzeroupper 
  0xee06c933:   cmpl   $0x0,0x4(%edi)
  0xee06c937:   jne    0xee05bbe0
  0xee06c93d:   mov    -0x20(%ebp),%esi
  0xee06c940:   mov    -0x1c(%ebp),%edi
  0xee06c943:   lea    0x0(%ebp,%edi,4),%edi
  0xee06c947:   ret    
  0xee06c948:   movzbl (%esi),%ebx                  ;;  374:   __ pop_cont_fastpath();
                                                    ;;  376:   __ dispatch_via(vtos, Interpreter::_normal_table.table_for(vtos));
  0xee06c94b:   jmp    *-0x833f2a0(,%ebx,4)
  0xee06c952:   sub    $0x4,%esp                    ;;  369:   address entry = __ pc();
                                                    ;;  371:   __ push(state);
  0xee06c955:   vmovss %xmm0,(%esp)
  0xee06c95a:   call   0xee06c964                   ;;  372:   __ push_cont_fastpath();
                                                    ;;  373:   __ call_VM(noreg, runtime_entry);
  0xee06c95f:   jmp    0xee06ca05
  0xee06c964:   lea    0x4(%esp),%eax
  0xee06c968:   mov    %esi,-0x20(%ebp)
  0xee06c96b:   cmpl   $0x0,-0x8(%ebp)
  0xee06c96f:   je     0xee06c986
  0xee06c975:   push   $0xf78569d8
  0xee06c97a:   call   0xee06c97f
  0xee06c97f:   pusha  
  0xee06c980:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c985:   hlt    
  0xee06c986:   push   %eax
  0xee06c987:   push   %edx
  0xee06c988:   push   %ecx
  0xee06c989:   call   0xf704a910 = Thread::current()
  0xee06c98e:   pop    %ecx
  0xee06c98f:   pop    %edx
  0xee06c990:   mov    %eax,%edi
  0xee06c992:   pop    %eax
  0xee06c993:   push   %edi
  0xee06c994:   vzeroupper 
  0xee06c997:   mov    %ebp,0x230(%edi)
  0xee06c99d:   mov    %eax,0x228(%edi)
  0xee06c9a3:   call   0xf6c0de90 = InterpreterRuntime::at_safepoint(JavaThread*)
  0xee06c9a8:   add    $0x4,%esp
  0xee06c9ab:   push   %eax
  0xee06c9ac:   push   %edx
  0xee06c9ad:   push   %ecx
  0xee06c9ae:   call   0xf704a910 = Thread::current()
  0xee06c9b3:   pop    %ecx
  0xee06c9b4:   pop    %edx
  0xee06c9b5:   cmp    %eax,%edi
  0xee06c9b7:   je     0xee06c9ce
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06c9bd:   push   $0xf78b5a48
  0xee06c9c2:   call   0xee06c9c7
  0xee06c9c7:   pusha  
  0xee06c9c8:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06c9cd:   hlt    
  0xee06c9ce:   pop    %eax
  0xee06c9cf:   movl   $0x0,0x228(%edi)
  0xee06c9d9:   movl   $0x0,0x230(%edi)
  0xee06c9e3:   movl   $0x0,0x22c(%edi)
  0xee06c9ed:   vzeroupper 
  0xee06c9f0:   cmpl   $0x0,0x4(%edi)
  0xee06c9f4:   jne    0xee05bbe0
  0xee06c9fa:   mov    -0x20(%ebp),%esi
  0xee06c9fd:   mov    -0x1c(%ebp),%edi
  0xee06ca00:   lea    0x0(%ebp,%edi,4),%edi
  0xee06ca04:   ret    
  0xee06ca05:   movzbl (%esi),%ebx                  ;;  374:   __ pop_cont_fastpath();
                                                    ;;  376:   __ dispatch_via(vtos, Interpreter::_normal_table.table_for(vtos));
  0xee06ca08:   jmp    *-0x833f2a0(,%ebx,4)
  0xee06ca0f:   push   %edx                         ;;  369:   address entry = __ pc();
                                                    ;;  371:   __ push(state);
  0xee06ca10:   push   %eax
  0xee06ca11:   call   0xee06ca1b                   ;;  372:   __ push_cont_fastpath();
                                                    ;;  373:   __ call_VM(noreg, runtime_entry);
  0xee06ca16:   jmp    0xee06cabc
  0xee06ca1b:   lea    0x4(%esp),%eax
  0xee06ca1f:   mov    %esi,-0x20(%ebp)
  0xee06ca22:   cmpl   $0x0,-0x8(%ebp)
  0xee06ca26:   je     0xee06ca3d
  0xee06ca2c:   push   $0xf78569d8
  0xee06ca31:   call   0xee06ca36
  0xee06ca36:   pusha  
  0xee06ca37:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06ca3c:   hlt    
  0xee06ca3d:   push   %eax
  0xee06ca3e:   push   %edx
  0xee06ca3f:   push   %ecx
  0xee06ca40:   call   0xf704a910 = Thread::current()
  0xee06ca45:   pop    %ecx
  0xee06ca46:   pop    %edx
  0xee06ca47:   mov    %eax,%edi
  0xee06ca49:   pop    %eax
  0xee06ca4a:   push   %edi
  0xee06ca4b:   vzeroupper 
  0xee06ca4e:   mov    %ebp,0x230(%edi)
  0xee06ca54:   mov    %eax,0x228(%edi)
  0xee06ca5a:   call   0xf6c0de90 = InterpreterRuntime::at_safepoint(JavaThread*)
  0xee06ca5f:   add    $0x4,%esp
  0xee06ca62:   push   %eax
  0xee06ca63:   push   %edx
  0xee06ca64:   push   %ecx
  0xee06ca65:   call   0xf704a910 = Thread::current()
  0xee06ca6a:   pop    %ecx
  0xee06ca6b:   pop    %edx
  0xee06ca6c:   cmp    %eax,%edi
  0xee06ca6e:   je     0xee06ca85
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06ca74:   push   $0xf78b5a48
  0xee06ca79:   call   0xee06ca7e
  0xee06ca7e:   pusha  
  0xee06ca7f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06ca84:   hlt    
  0xee06ca85:   pop    %eax
  0xee06ca86:   movl   $0x0,0x228(%edi)
  0xee06ca90:   movl   $0x0,0x230(%edi)
  0xee06ca9a:   movl   $0x0,0x22c(%edi)
  0xee06caa4:   vzeroupper 
  0xee06caa7:   cmpl   $0x0,0x4(%edi)
  0xee06caab:   jne    0xee05bbe0
  0xee06cab1:   mov    -0x20(%ebp),%esi
  0xee06cab4:   mov    -0x1c(%ebp),%edi
  0xee06cab7:   lea    0x0(%ebp,%edi,4),%edi
  0xee06cabb:   ret    
  0xee06cabc:   movzbl (%esi),%ebx                  ;;  374:   __ pop_cont_fastpath();
                                                    ;;  376:   __ dispatch_via(vtos, Interpreter::_normal_table.table_for(vtos));
  0xee06cabf:   jmp    *-0x833f2a0(,%ebx,4)
  0xee06cac6:   push   %eax                         ;;  369:   address entry = __ pc();
                                                    ;;  371:   __ push(state);
  0xee06cac7:   call   0xee06cad1                   ;;  372:   __ push_cont_fastpath();
                                                    ;;  373:   __ call_VM(noreg, runtime_entry);
  0xee06cacc:   jmp    0xee06cb72
  0xee06cad1:   lea    0x4(%esp),%eax
  0xee06cad5:   mov    %esi,-0x20(%ebp)
  0xee06cad8:   cmpl   $0x0,-0x8(%ebp)
  0xee06cadc:   je     0xee06caf3
  0xee06cae2:   push   $0xf78569d8
  0xee06cae7:   call   0xee06caec
  0xee06caec:   pusha  
  0xee06caed:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06caf2:   hlt    
  0xee06caf3:   push   %eax
  0xee06caf4:   push   %edx
  0xee06caf5:   push   %ecx
  0xee06caf6:   call   0xf704a910 = Thread::current()
  0xee06cafb:   pop    %ecx
  0xee06cafc:   pop    %edx
  0xee06cafd:   mov    %eax,%edi
  0xee06caff:   pop    %eax
  0xee06cb00:   push   %edi
  0xee06cb01:   vzeroupper 
  0xee06cb04:   mov    %ebp,0x230(%edi)
  0xee06cb0a:   mov    %eax,0x228(%edi)
  0xee06cb10:   call   0xf6c0de90 = InterpreterRuntime::at_safepoint(JavaThread*)
  0xee06cb15:   add    $0x4,%esp
  0xee06cb18:   push   %eax
  0xee06cb19:   push   %edx
  0xee06cb1a:   push   %ecx
  0xee06cb1b:   call   0xf704a910 = Thread::current()
  0xee06cb20:   pop    %ecx
  0xee06cb21:   pop    %edx
  0xee06cb22:   cmp    %eax,%edi
  0xee06cb24:   je     0xee06cb3b
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06cb2a:   push   $0xf78b5a48
  0xee06cb2f:   call   0xee06cb34
  0xee06cb34:   pusha  
  0xee06cb35:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06cb3a:   hlt    
  0xee06cb3b:   pop    %eax
  0xee06cb3c:   movl   $0x0,0x228(%edi)
  0xee06cb46:   movl   $0x0,0x230(%edi)
  0xee06cb50:   movl   $0x0,0x22c(%edi)
  0xee06cb5a:   vzeroupper 
  0xee06cb5d:   cmpl   $0x0,0x4(%edi)
  0xee06cb61:   jne    0xee05bbe0
  0xee06cb67:   mov    -0x20(%ebp),%esi
  0xee06cb6a:   mov    -0x1c(%ebp),%edi
  0xee06cb6d:   lea    0x0(%ebp,%edi,4),%edi
  0xee06cb71:   ret    
  0xee06cb72:   movzbl (%esi),%ebx                  ;;  374:   __ pop_cont_fastpath();
                                                    ;;  376:   __ dispatch_via(vtos, Interpreter::_normal_table.table_for(vtos));
  0xee06cb75:   jmp    *-0x833f2a0(,%ebx,4)
  0xee06cb7c:   push   %eax                         ;;  369:   address entry = __ pc();
                                                    ;;  371:   __ push(state);
  0xee06cb7d:   call   0xee06cb87                   ;;  372:   __ push_cont_fastpath();
                                                    ;;  373:   __ call_VM(noreg, runtime_entry);
  0xee06cb82:   jmp    0xee06cc28
  0xee06cb87:   lea    0x4(%esp),%eax
  0xee06cb8b:   mov    %esi,-0x20(%ebp)
  0xee06cb8e:   cmpl   $0x0,-0x8(%ebp)
  0xee06cb92:   je     0xee06cba9
  0xee06cb98:   push   $0xf78569d8
  0xee06cb9d:   call   0xee06cba2
  0xee06cba2:   pusha  
  0xee06cba3:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06cba8:   hlt    
  0xee06cba9:   push   %eax
  0xee06cbaa:   push   %edx
  0xee06cbab:   push   %ecx
  0xee06cbac:   call   0xf704a910 = Thread::current()
  0xee06cbb1:   pop    %ecx
  0xee06cbb2:   pop    %edx
  0xee06cbb3:   mov    %eax,%edi
  0xee06cbb5:   pop    %eax
  0xee06cbb6:   push   %edi
  0xee06cbb7:   vzeroupper 
  0xee06cbba:   mov    %ebp,0x230(%edi)
  0xee06cbc0:   mov    %eax,0x228(%edi)
  0xee06cbc6:   call   0xf6c0de90 = InterpreterRuntime::at_safepoint(JavaThread*)
  0xee06cbcb:   add    $0x4,%esp
  0xee06cbce:   push   %eax
  0xee06cbcf:   push   %edx
  0xee06cbd0:   push   %ecx
  0xee06cbd1:   call   0xf704a910 = Thread::current()
  0xee06cbd6:   pop    %ecx
  0xee06cbd7:   pop    %edx
  0xee06cbd8:   cmp    %eax,%edi
  0xee06cbda:   je     0xee06cbf1
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06cbe0:   push   $0xf78b5a48
  0xee06cbe5:   call   0xee06cbea
  0xee06cbea:   pusha  
  0xee06cbeb:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06cbf0:   hlt    
  0xee06cbf1:   pop    %eax
  0xee06cbf2:   movl   $0x0,0x228(%edi)
  0xee06cbfc:   movl   $0x0,0x230(%edi)
  0xee06cc06:   movl   $0x0,0x22c(%edi)
  0xee06cc10:   vzeroupper 
  0xee06cc13:   cmpl   $0x0,0x4(%edi)
  0xee06cc17:   jne    0xee05bbe0
  0xee06cc1d:   mov    -0x20(%ebp),%esi
  0xee06cc20:   mov    -0x1c(%ebp),%edi
  0xee06cc23:   lea    0x0(%ebp,%edi,4),%edi
  0xee06cc27:   ret    
  0xee06cc28:   movzbl (%esi),%ebx                  ;;  374:   __ pop_cont_fastpath();
                                                    ;;  376:   __ dispatch_via(vtos, Interpreter::_normal_table.table_for(vtos));
  0xee06cc2b:   jmp    *-0x833f2a0(,%ebx,4)
  0xee06cc32:   nop
  0xee06cc33:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
exception handling  [0xee06cc60, 0xee06d9a8]  3400 bytes

--------------------------------------------------------------------------------
  0xee06cc60:   movl   $0x0,-0x8(%ebp)              ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1480:   Interpreter::_rethrow_exception_entry = __ pc();
                                                    ;; 1483:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06cc67:   mov    -0x20(%ebp),%esi             ;; 1486:   __ restore_bcp();    // r13/rsi points to call/send
  0xee06cc6a:   mov    -0x1c(%ebp),%edi             ;; 1487:   __ restore_locals();
  0xee06cc6d:   lea    0x0(%ebp,%edi,4),%edi
  0xee06cc71:   mov    -0x24(%ebp),%esp             ;; 1490:   Interpreter::_throw_exception_entry = __ pc();
                                                    ;; 1494:   __ verify_oop(rax);
                                                    ;; 1500:   __ empty_expression_stack();
  0xee06cc74:   movl   $0x0,-0x8(%ebp)
  0xee06cc7b:   emms   
  0xee06cc7d:   call   0xee06cc87                   ;; 1502:   __ call_VM(rdx,
  0xee06cc82:   jmp    0xee06cd39
  0xee06cc87:   push   %eax
  0xee06cc88:   lea    0x8(%esp),%eax
  0xee06cc8c:   mov    %esi,-0x20(%ebp)
  0xee06cc8f:   cmpl   $0x0,-0x8(%ebp)
  0xee06cc93:   je     0xee06ccaa
  0xee06cc99:   push   $0xf78569d8
  0xee06cc9e:   call   0xee06cca3
  0xee06cca3:   pusha  
  0xee06cca4:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06cca9:   hlt    
  0xee06ccaa:   push   %eax
  0xee06ccab:   push   %edx
  0xee06ccac:   push   %ecx
  0xee06ccad:   call   0xf704a910 = Thread::current()
  0xee06ccb2:   pop    %ecx
  0xee06ccb3:   pop    %edx
  0xee06ccb4:   mov    %eax,%edi
  0xee06ccb6:   pop    %eax
  0xee06ccb7:   push   %edi
  0xee06ccb8:   vzeroupper 
  0xee06ccbb:   mov    %ebp,0x230(%edi)
  0xee06ccc1:   mov    %eax,0x228(%edi)
  0xee06ccc7:   call   0xf6c17910 = InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*)
  0xee06cccc:   add    $0x8,%esp
  0xee06cccf:   push   %eax
  0xee06ccd0:   push   %edx
  0xee06ccd1:   push   %ecx
  0xee06ccd2:   call   0xf704a910 = Thread::current()
  0xee06ccd7:   pop    %ecx
  0xee06ccd8:   pop    %edx
  0xee06ccd9:   cmp    %eax,%edi
  0xee06ccdb:   je     0xee06ccf2
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06cce1:   push   $0xf78b5a48
  0xee06cce6:   call   0xee06cceb
  0xee06cceb:   pusha  
  0xee06ccec:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06ccf1:   hlt    
  0xee06ccf2:   pop    %eax
  0xee06ccf3:   movl   $0x0,0x228(%edi)
  0xee06ccfd:   movl   $0x0,0x230(%edi)
  0xee06cd07:   movl   $0x0,0x22c(%edi)
  0xee06cd11:   vzeroupper 
  0xee06cd14:   cmpl   $0x0,0x4(%edi)
  0xee06cd18:   jne    0xee05bbe0
  0xee06cd1e:   mov    0x254(%edi),%edx
  0xee06cd24:   movl   $0x0,0x254(%edi)
  0xee06cd2e:   mov    -0x20(%ebp),%esi
  0xee06cd31:   mov    -0x1c(%ebp),%edi
  0xee06cd34:   lea    0x0(%ebp,%edi,4),%edi
  0xee06cd38:   ret    
  0xee06cd39:   push   %edx                         ;; 1509:   __ push_ptr(rdx); // push exception which is now the only value on the stack
  0xee06cd3a:   jmp    *%eax                        ;; 1510:   __ jmp(rax); // jump to exception handler (may be _remove_activation_entry!)
  0xee06cd3c:   mov    -0x24(%ebp),%esp             ;; 1529:   Interpreter::_remove_activation_preserving_args_entry = __ pc();
                                                    ;; 1530:   __ empty_expression_stack();
  0xee06cd3f:   movl   $0x0,-0x8(%ebp)
  0xee06cd46:   emms   
  0xee06cd48:   push   %eax                         ;; 1536:   NOT_LP64(__ get_thread(thread));
  0xee06cd49:   push   %edx
  0xee06cd4a:   push   %ecx
  0xee06cd4b:   call   0xf704a910 = Thread::current()
  0xee06cd50:   pop    %ecx
  0xee06cd51:   pop    %edx
  0xee06cd52:   mov    %eax,%ecx
  0xee06cd54:   pop    %eax
  0xee06cd55:   mov    0x2f4(%ecx),%edx             ;; 1537:   __ movl(rdx, Address(thread, JavaThread::popframe_condition_offset()));
  0xee06cd5b:   or     $0x2,%edx                    ;; 1538:   __ orl(rdx, JavaThread::popframe_processing_bit);
  0xee06cd5e:   mov    %edx,0x2f4(%ecx)             ;; 1539:   __ movl(Address(thread, JavaThread::popframe_condition_offset()), rdx);
  0xee06cd64:   mov    0x4(%ebp),%edx               ;; 1554:     __ movptr(rarg, Address(rbp, frame::return_addr_offset * wordSize));
  0xee06cd67:   push   %edx                         ;; 1555:     __ super_call_VM_leaf(CAST_FROM_FN_PTR(address,
  0xee06cd68:   call   0xf6c0f4d0 = InterpreterRuntime::interpreter_contains(unsigned char*)
  0xee06cd6d:   add    $0x4,%esp
  0xee06cd70:   test   %eax,%eax                    ;; 1557:     __ testl(rax, rax);
  0xee06cd72:   jne    0xee06d09b                   ;; 1558:     __ jcc(Assembler::notZero, caller_not_deoptimized);
  0xee06cd78:   mov    -0xc(%ebp),%eax              ;; 1562:     __ get_method(rax);
  0xee06cd7b:   mov    0x8(%eax),%eax               ;; 1563:     __ movptr(rax, Address(rax, Method::const_offset()));
  0xee06cd7e:   movzwl 0x24(%eax),%eax              ;; 1564:     __ load_unsigned_short(rax, Address(rax, in_bytes(ConstMethod::
  0xee06cd82:   shl    $0x2,%eax                    ;; 1566:     __ shll(rax, Interpreter::logStackElementSize);
  0xee06cd85:   mov    -0x1c(%ebp),%edi             ;; 1567:     __ restore_locals();
  0xee06cd88:   lea    0x0(%ebp,%edi,4),%edi
  0xee06cd8c:   sub    %eax,%edi                    ;; 1568:     __ subptr(rlocals, rax);
  0xee06cd8e:   add    $0x4,%edi                    ;; 1569:     __ addptr(rlocals, wordSize);
  0xee06cd91:   push   %eax                         ;; 1571:     NOT_LP64(__ get_thread(thread));
  0xee06cd92:   push   %edx
  0xee06cd93:   push   %ecx
  0xee06cd94:   call   0xf704a910 = Thread::current()
  0xee06cd99:   pop    %ecx
  0xee06cd9a:   pop    %edx
  0xee06cd9b:   mov    %eax,%ecx
  0xee06cd9d:   pop    %eax
  0xee06cd9e:   push   %edi                         ;; 1572:     __ super_call_VM_leaf(CAST_FROM_FN_PTR(address,
  0xee06cd9f:   push   %eax
  0xee06cda0:   push   %ecx
  0xee06cda1:   call   0xf68a45d0 = Deoptimization::popframe_preserve_args(JavaThread*, int, void*)
  0xee06cda6:   add    $0xc,%esp
  0xee06cda9:   push   %eax                         ;; 1577:     __ remove_activation(vtos, rdx,
  0xee06cdaa:   push   %edx
  0xee06cdab:   push   %ecx
  0xee06cdac:   call   0xf704a910 = Thread::current()
  0xee06cdb1:   pop    %ecx
  0xee06cdb2:   pop    %edx
  0xee06cdb3:   mov    %eax,%ecx
  0xee06cdb5:   pop    %eax
  0xee06cdb6:   cmp    0x288(%ecx),%ebp
  0xee06cdbc:   ja     0xee06cdc7
  0xee06cdc2:   jmp    0xee06ce17
  0xee06cdc7:   vzeroupper 
  0xee06cdca:   mov    %ebp,0x230(%ecx)
  0xee06cdd0:   movl   $0xee06cdc7,0x22c(%ecx)
  0xee06cdda:   mov    %esp,0x228(%ecx)
  0xee06cde0:   push   %ecx
  0xee06cde1:   call   0xf6c0e120 = InterpreterRuntime::at_unwind(JavaThread*)
  0xee06cde6:   add    $0x4,%esp
  0xee06cde9:   push   %eax
  0xee06cdea:   push   %edx
  0xee06cdeb:   push   %ecx
  0xee06cdec:   call   0xf704a910 = Thread::current()
  0xee06cdf1:   pop    %ecx
  0xee06cdf2:   pop    %edx
  0xee06cdf3:   mov    %eax,%ecx
  0xee06cdf5:   pop    %eax
  0xee06cdf6:   movl   $0x0,0x228(%ecx)
  0xee06ce00:   movl   $0x0,0x230(%ecx)
  0xee06ce0a:   movl   $0x0,0x22c(%ecx)
  0xee06ce14:   vzeroupper 
  0xee06ce17:   mov    0x2b1(%ecx),%bl
  0xee06ce1d:   movb   $0x0,0x2b1(%ecx)
  0xee06ce24:   mov    -0xc(%ebp),%ecx
  0xee06ce27:   mov    0x18(%ecx),%ecx
  0xee06ce2a:   test   $0x20,%cl
  0xee06ce2d:   je     0xee06ceb2
  0xee06ce33:   test   $0xff,%bl
  0xee06ce36:   jne    0xee06cf31
  0xee06ce3c:   lea    -0x2c(%ebp),%edx
  0xee06ce3f:   mov    0x4(%edx),%eax
  0xee06ce42:   test   %eax,%eax
  0xee06ce44:   jne    0xee06ce4f
  0xee06ce4a:   jmp    0xee06ceb2
  0xee06ce4f:   mov    %esi,-0x20(%ebp)
  0xee06ce52:   lea    (%edx),%eax
  0xee06ce54:   mov    0x4(%edx),%ecx
  0xee06ce57:   movl   $0x0,0x4(%edx)
  0xee06ce5e:   mov    (%eax),%ebx
  0xee06ce60:   test   %ebx,%ebx
  0xee06ce62:   je     0xee06ce72
  0xee06ce68:   lock cmpxchg %ebx,(%ecx)
  0xee06ce6c:   jne    0xee06ce88
  0xee06ce72:   push   %eax
  0xee06ce73:   push   %edx
  0xee06ce74:   push   %ecx
  0xee06ce75:   call   0xf704a910 = Thread::current()
  0xee06ce7a:   pop    %ecx
  0xee06ce7b:   pop    %edx
  0xee06ce7c:   decl   0x308(%eax)
  0xee06ce82:   pop    %eax
  0xee06ce83:   jmp    0xee06ceaf
  0xee06ce88:   mov    %ecx,0x4(%edx)
  0xee06ce8b:   push   %edx
  0xee06ce8c:   cmpl   $0x0,-0x8(%ebp)
  0xee06ce90:   je     0xee06cea7
  0xee06ce96:   push   $0xf785694c
  0xee06ce9b:   call   0xee06cea0
  0xee06cea0:   pusha  
  0xee06cea1:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06cea6:   hlt    
  0xee06cea7:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06ceac:   add    $0x4,%esp
  0xee06ceaf:   mov    -0x20(%ebp),%esi
  0xee06ceb2:   mov    -0x24(%ebp),%ecx
  0xee06ceb5:   lea    -0x24(%ebp),%ebx
  0xee06ceb8:   jmp    0xee06cf2d
  0xee06cebd:   mov    %ecx,%edx
  0xee06cebf:   mov    %esi,-0x20(%ebp)
  0xee06cec2:   lea    (%edx),%eax
  0xee06cec4:   mov    0x4(%edx),%ecx
  0xee06cec7:   movl   $0x0,0x4(%edx)
  0xee06cece:   mov    (%eax),%ebx
  0xee06ced0:   test   %ebx,%ebx
  0xee06ced2:   je     0xee06cee2
  0xee06ced8:   lock cmpxchg %ebx,(%ecx)
  0xee06cedc:   jne    0xee06cef8
  0xee06cee2:   push   %eax
  0xee06cee3:   push   %edx
  0xee06cee4:   push   %ecx
  0xee06cee5:   call   0xf704a910 = Thread::current()
  0xee06ceea:   pop    %ecx
  0xee06ceeb:   pop    %edx
  0xee06ceec:   decl   0x308(%eax)
  0xee06cef2:   pop    %eax
  0xee06cef3:   jmp    0xee06cf1f
  0xee06cef8:   mov    %ecx,0x4(%edx)
  0xee06cefb:   push   %edx
  0xee06cefc:   cmpl   $0x0,-0x8(%ebp)
  0xee06cf00:   je     0xee06cf17
  0xee06cf06:   push   $0xf785694c
  0xee06cf0b:   call   0xee06cf10
  0xee06cf10:   pusha  
  0xee06cf11:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06cf16:   hlt    
  0xee06cf17:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06cf1c:   add    $0x4,%esp
  0xee06cf1f:   mov    -0x20(%ebp),%esi
  0xee06cf22:   jmp    0xee06ceb2
  0xee06cf24:   cmpl   $0x0,0x4(%ecx)
  0xee06cf28:   jne    0xee06cebd
  0xee06cf2a:   add    $0x8,%ecx
  0xee06cf2d:   cmp    %ebx,%ecx
  0xee06cf2f:   jne    0xee06cf24
  0xee06cf31:   cmpb   $0x0,0xf7ca3a0d
  0xee06cf38:   je     0xee06cf73
  0xee06cf3e:   push   %eax
  0xee06cf3f:   push   %edx
  0xee06cf40:   push   %ecx
  0xee06cf41:   call   0xf704a910 = Thread::current()
  0xee06cf46:   pop    %ecx
  0xee06cf47:   pop    %edx
  0xee06cf48:   mov    %eax,%ecx
  0xee06cf4a:   pop    %eax
  0xee06cf4b:   mov    -0xc(%ebp),%ebx
  0xee06cf4e:   push   %ebx
  0xee06cf4f:   push   %ecx
  0xee06cf50:   cmpl   $0x0,-0x8(%ebp)
  0xee06cf54:   je     0xee06cf6b
  0xee06cf5a:   push   $0xf785694c
  0xee06cf5f:   call   0xee06cf64
  0xee06cf64:   pusha  
  0xee06cf65:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06cf6a:   hlt    
  0xee06cf6b:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee06cf70:   add    $0x8,%esp
  0xee06cf73:   mov    -0x4(%ebp),%ebx
  0xee06cf76:   push   %eax
  0xee06cf77:   push   %edx
  0xee06cf78:   push   %ecx
  0xee06cf79:   call   0xf704a910 = Thread::current()
  0xee06cf7e:   pop    %ecx
  0xee06cf7f:   pop    %edx
  0xee06cf80:   mov    %eax,%ecx
  0xee06cf82:   pop    %eax
  0xee06cf83:   cmpl   $0x3,0x2bc(%ecx)
  0xee06cf8a:   je     0xee06d07c
  0xee06cf90:   cmp    0x2c4(%ecx),%ebx
  0xee06cf96:   jle    0xee06d07c
  0xee06cf9c:   push   %ecx
  0xee06cf9d:   cmpl   $0x0,-0x8(%ebp)
  0xee06cfa1:   je     0xee06cfb8
  0xee06cfa7:   push   $0xf785694c
  0xee06cfac:   call   0xee06cfb1
  0xee06cfb1:   pusha  
  0xee06cfb2:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06cfb7:   hlt    
  0xee06cfb8:   call   0xf739fd80 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0xee06cfbd:   add    $0x4,%esp
  0xee06cfc0:   call   0xee06cfca
  0xee06cfc5:   jmp    0xee06d06b
  0xee06cfca:   lea    0x4(%esp),%eax
  0xee06cfce:   mov    %esi,-0x20(%ebp)
  0xee06cfd1:   cmpl   $0x0,-0x8(%ebp)
  0xee06cfd5:   je     0xee06cfec
  0xee06cfdb:   push   $0xf78569d8
  0xee06cfe0:   call   0xee06cfe5
  0xee06cfe5:   pusha  
  0xee06cfe6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06cfeb:   hlt    
  0xee06cfec:   push   %eax
  0xee06cfed:   push   %edx
  0xee06cfee:   push   %ecx
  0xee06cfef:   call   0xf704a910 = Thread::current()
  0xee06cff4:   pop    %ecx
  0xee06cff5:   pop    %edx
  0xee06cff6:   mov    %eax,%edi
  0xee06cff8:   pop    %eax
  0xee06cff9:   push   %edi
  0xee06cffa:   vzeroupper 
  0xee06cffd:   mov    %ebp,0x230(%edi)
  0xee06d003:   mov    %eax,0x228(%edi)
  0xee06d009:   call   0xf6c0b0b0 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0xee06d00e:   add    $0x4,%esp
  0xee06d011:   push   %eax
  0xee06d012:   push   %edx
  0xee06d013:   push   %ecx
  0xee06d014:   call   0xf704a910 = Thread::current()
  0xee06d019:   pop    %ecx
  0xee06d01a:   pop    %edx
  0xee06d01b:   cmp    %eax,%edi
  0xee06d01d:   je     0xee06d034
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06d023:   push   $0xf78b5a48
  0xee06d028:   call   0xee06d02d
  0xee06d02d:   pusha  
  0xee06d02e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d033:   hlt    
  0xee06d034:   pop    %eax
  0xee06d035:   movl   $0x0,0x228(%edi)
  0xee06d03f:   movl   $0x0,0x230(%edi)
  0xee06d049:   movl   $0x0,0x22c(%edi)
  0xee06d053:   vzeroupper 
  0xee06d056:   cmpl   $0x0,0x4(%edi)
  0xee06d05a:   jne    0xee05bbe0
  0xee06d060:   mov    -0x20(%ebp),%esi
  0xee06d063:   mov    -0x1c(%ebp),%edi
  0xee06d066:   lea    0x0(%ebp,%edi,4),%edi
  0xee06d06a:   ret    
  0xee06d06b:   push   $0xf77a6b02
  0xee06d070:   call   0xee06d075
  0xee06d075:   pusha  
  0xee06d076:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d07b:   hlt    
  0xee06d07c:   mov    %ebp,%esp
  0xee06d07e:   pop    %ebp
  0xee06d07f:   pop    %edx
  0xee06d080:   mov    %ebx,%esp
  0xee06d082:   push   %eax                         ;; 1584:     NOT_LP64(__ get_thread(thread));
  0xee06d083:   push   %edx
  0xee06d084:   push   %ecx
  0xee06d085:   call   0xf704a910 = Thread::current()
  0xee06d08a:   pop    %ecx
  0xee06d08b:   pop    %edx
  0xee06d08c:   mov    %eax,%ecx
  0xee06d08e:   pop    %eax
  0xee06d08f:   movl   $0x4,0x2f4(%ecx)             ;; 1585:     __ movl(Address(thread, JavaThread::popframe_condition_offset()),
  0xee06d099:   jmp    *%edx                        ;; 1589:     __ jmp(rdx);
  0xee06d09b:   push   %eax                         ;; 1591:     __ bind(caller_not_deoptimized);
                                                    ;; 1594:   __ remove_activation(vtos, rdx, /* rdx result (retaddr) is not used */
  0xee06d09c:   push   %edx
  0xee06d09d:   push   %ecx
  0xee06d09e:   call   0xf704a910 = Thread::current()
  0xee06d0a3:   pop    %ecx
  0xee06d0a4:   pop    %edx
  0xee06d0a5:   mov    %eax,%ecx
  0xee06d0a7:   pop    %eax
  0xee06d0a8:   cmp    0x288(%ecx),%ebp
  0xee06d0ae:   ja     0xee06d0b9
  0xee06d0b4:   jmp    0xee06d109
  0xee06d0b9:   vzeroupper 
  0xee06d0bc:   mov    %ebp,0x230(%ecx)
  0xee06d0c2:   movl   $0xee06d0b9,0x22c(%ecx)
  0xee06d0cc:   mov    %esp,0x228(%ecx)
  0xee06d0d2:   push   %ecx
  0xee06d0d3:   call   0xf6c0e120 = InterpreterRuntime::at_unwind(JavaThread*)
  0xee06d0d8:   add    $0x4,%esp
  0xee06d0db:   push   %eax
  0xee06d0dc:   push   %edx
  0xee06d0dd:   push   %ecx
  0xee06d0de:   call   0xf704a910 = Thread::current()
  0xee06d0e3:   pop    %ecx
  0xee06d0e4:   pop    %edx
  0xee06d0e5:   mov    %eax,%ecx
  0xee06d0e7:   pop    %eax
  0xee06d0e8:   movl   $0x0,0x228(%ecx)
  0xee06d0f2:   movl   $0x0,0x230(%ecx)
  0xee06d0fc:   movl   $0x0,0x22c(%ecx)
  0xee06d106:   vzeroupper 
  0xee06d109:   mov    0x2b1(%ecx),%bl
  0xee06d10f:   movb   $0x0,0x2b1(%ecx)
  0xee06d116:   mov    -0xc(%ebp),%ecx
  0xee06d119:   mov    0x18(%ecx),%ecx
  0xee06d11c:   test   $0x20,%cl
  0xee06d11f:   je     0xee06d1a4
  0xee06d125:   test   $0xff,%bl
  0xee06d128:   jne    0xee06d223
  0xee06d12e:   lea    -0x2c(%ebp),%edx
  0xee06d131:   mov    0x4(%edx),%eax
  0xee06d134:   test   %eax,%eax
  0xee06d136:   jne    0xee06d141
  0xee06d13c:   jmp    0xee06d1a4
  0xee06d141:   mov    %esi,-0x20(%ebp)
  0xee06d144:   lea    (%edx),%eax
  0xee06d146:   mov    0x4(%edx),%ecx
  0xee06d149:   movl   $0x0,0x4(%edx)
  0xee06d150:   mov    (%eax),%ebx
  0xee06d152:   test   %ebx,%ebx
  0xee06d154:   je     0xee06d164
  0xee06d15a:   lock cmpxchg %ebx,(%ecx)
  0xee06d15e:   jne    0xee06d17a
  0xee06d164:   push   %eax
  0xee06d165:   push   %edx
  0xee06d166:   push   %ecx
  0xee06d167:   call   0xf704a910 = Thread::current()
  0xee06d16c:   pop    %ecx
  0xee06d16d:   pop    %edx
  0xee06d16e:   decl   0x308(%eax)
  0xee06d174:   pop    %eax
  0xee06d175:   jmp    0xee06d1a1
  0xee06d17a:   mov    %ecx,0x4(%edx)
  0xee06d17d:   push   %edx
  0xee06d17e:   cmpl   $0x0,-0x8(%ebp)
  0xee06d182:   je     0xee06d199
  0xee06d188:   push   $0xf785694c
  0xee06d18d:   call   0xee06d192
  0xee06d192:   pusha  
  0xee06d193:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d198:   hlt    
  0xee06d199:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06d19e:   add    $0x4,%esp
  0xee06d1a1:   mov    -0x20(%ebp),%esi
  0xee06d1a4:   mov    -0x24(%ebp),%ecx
  0xee06d1a7:   lea    -0x24(%ebp),%ebx
  0xee06d1aa:   jmp    0xee06d21f
  0xee06d1af:   mov    %ecx,%edx
  0xee06d1b1:   mov    %esi,-0x20(%ebp)
  0xee06d1b4:   lea    (%edx),%eax
  0xee06d1b6:   mov    0x4(%edx),%ecx
  0xee06d1b9:   movl   $0x0,0x4(%edx)
  0xee06d1c0:   mov    (%eax),%ebx
  0xee06d1c2:   test   %ebx,%ebx
  0xee06d1c4:   je     0xee06d1d4
  0xee06d1ca:   lock cmpxchg %ebx,(%ecx)
  0xee06d1ce:   jne    0xee06d1ea
  0xee06d1d4:   push   %eax
  0xee06d1d5:   push   %edx
  0xee06d1d6:   push   %ecx
  0xee06d1d7:   call   0xf704a910 = Thread::current()
  0xee06d1dc:   pop    %ecx
  0xee06d1dd:   pop    %edx
  0xee06d1de:   decl   0x308(%eax)
  0xee06d1e4:   pop    %eax
  0xee06d1e5:   jmp    0xee06d211
  0xee06d1ea:   mov    %ecx,0x4(%edx)
  0xee06d1ed:   push   %edx
  0xee06d1ee:   cmpl   $0x0,-0x8(%ebp)
  0xee06d1f2:   je     0xee06d209
  0xee06d1f8:   push   $0xf785694c
  0xee06d1fd:   call   0xee06d202
  0xee06d202:   pusha  
  0xee06d203:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d208:   hlt    
  0xee06d209:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06d20e:   add    $0x4,%esp
  0xee06d211:   mov    -0x20(%ebp),%esi
  0xee06d214:   jmp    0xee06d1a4
  0xee06d216:   cmpl   $0x0,0x4(%ecx)
  0xee06d21a:   jne    0xee06d1af
  0xee06d21c:   add    $0x8,%ecx
  0xee06d21f:   cmp    %ebx,%ecx
  0xee06d221:   jne    0xee06d216
  0xee06d223:   cmpb   $0x0,0xf7ca3a0d
  0xee06d22a:   je     0xee06d265
  0xee06d230:   push   %eax
  0xee06d231:   push   %edx
  0xee06d232:   push   %ecx
  0xee06d233:   call   0xf704a910 = Thread::current()
  0xee06d238:   pop    %ecx
  0xee06d239:   pop    %edx
  0xee06d23a:   mov    %eax,%ecx
  0xee06d23c:   pop    %eax
  0xee06d23d:   mov    -0xc(%ebp),%ebx
  0xee06d240:   push   %ebx
  0xee06d241:   push   %ecx
  0xee06d242:   cmpl   $0x0,-0x8(%ebp)
  0xee06d246:   je     0xee06d25d
  0xee06d24c:   push   $0xf785694c
  0xee06d251:   call   0xee06d256
  0xee06d256:   pusha  
  0xee06d257:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d25c:   hlt    
  0xee06d25d:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee06d262:   add    $0x8,%esp
  0xee06d265:   mov    -0x4(%ebp),%ebx
  0xee06d268:   push   %eax
  0xee06d269:   push   %edx
  0xee06d26a:   push   %ecx
  0xee06d26b:   call   0xf704a910 = Thread::current()
  0xee06d270:   pop    %ecx
  0xee06d271:   pop    %edx
  0xee06d272:   mov    %eax,%ecx
  0xee06d274:   pop    %eax
  0xee06d275:   cmpl   $0x3,0x2bc(%ecx)
  0xee06d27c:   je     0xee06d36e
  0xee06d282:   cmp    0x2c4(%ecx),%ebx
  0xee06d288:   jle    0xee06d36e
  0xee06d28e:   push   %ecx
  0xee06d28f:   cmpl   $0x0,-0x8(%ebp)
  0xee06d293:   je     0xee06d2aa
  0xee06d299:   push   $0xf785694c
  0xee06d29e:   call   0xee06d2a3
  0xee06d2a3:   pusha  
  0xee06d2a4:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d2a9:   hlt    
  0xee06d2aa:   call   0xf739fd80 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0xee06d2af:   add    $0x4,%esp
  0xee06d2b2:   call   0xee06d2bc
  0xee06d2b7:   jmp    0xee06d35d
  0xee06d2bc:   lea    0x4(%esp),%eax
  0xee06d2c0:   mov    %esi,-0x20(%ebp)
  0xee06d2c3:   cmpl   $0x0,-0x8(%ebp)
  0xee06d2c7:   je     0xee06d2de
  0xee06d2cd:   push   $0xf78569d8
  0xee06d2d2:   call   0xee06d2d7
  0xee06d2d7:   pusha  
  0xee06d2d8:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d2dd:   hlt    
  0xee06d2de:   push   %eax
  0xee06d2df:   push   %edx
  0xee06d2e0:   push   %ecx
  0xee06d2e1:   call   0xf704a910 = Thread::current()
  0xee06d2e6:   pop    %ecx
  0xee06d2e7:   pop    %edx
  0xee06d2e8:   mov    %eax,%edi
  0xee06d2ea:   pop    %eax
  0xee06d2eb:   push   %edi
  0xee06d2ec:   vzeroupper 
  0xee06d2ef:   mov    %ebp,0x230(%edi)
  0xee06d2f5:   mov    %eax,0x228(%edi)
  0xee06d2fb:   call   0xf6c0b0b0 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0xee06d300:   add    $0x4,%esp
  0xee06d303:   push   %eax
  0xee06d304:   push   %edx
  0xee06d305:   push   %ecx
  0xee06d306:   call   0xf704a910 = Thread::current()
  0xee06d30b:   pop    %ecx
  0xee06d30c:   pop    %edx
  0xee06d30d:   cmp    %eax,%edi
  0xee06d30f:   je     0xee06d326
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06d315:   push   $0xf78b5a48
  0xee06d31a:   call   0xee06d31f
  0xee06d31f:   pusha  
  0xee06d320:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d325:   hlt    
  0xee06d326:   pop    %eax
  0xee06d327:   movl   $0x0,0x228(%edi)
  0xee06d331:   movl   $0x0,0x230(%edi)
  0xee06d33b:   movl   $0x0,0x22c(%edi)
  0xee06d345:   vzeroupper 
  0xee06d348:   cmpl   $0x0,0x4(%edi)
  0xee06d34c:   jne    0xee05bbe0
  0xee06d352:   mov    -0x20(%ebp),%esi
  0xee06d355:   mov    -0x1c(%ebp),%edi
  0xee06d358:   lea    0x0(%ebp,%edi,4),%edi
  0xee06d35c:   ret    
  0xee06d35d:   push   $0xf77a6b02
  0xee06d362:   call   0xee06d367
  0xee06d367:   pusha  
  0xee06d368:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d36d:   hlt    
  0xee06d36e:   mov    %ebp,%esp
  0xee06d370:   pop    %ebp
  0xee06d371:   pop    %edx
  0xee06d372:   mov    %ebx,%esp
  0xee06d374:   mov    %esp,%eax                    ;; 1611:   __ mov(rax, rsp);
  0xee06d376:   mov    -0x8(%ebp),%ebx              ;; 1612:   __ movptr(rbx, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06d379:   push   %eax                         ;; 1613:   __ get_thread(thread);
  0xee06d37a:   push   %edx
  0xee06d37b:   push   %ecx
  0xee06d37c:   call   0xf704a910 = Thread::current()
  0xee06d381:   pop    %ecx
  0xee06d382:   pop    %edx
  0xee06d383:   mov    %eax,%ecx
  0xee06d385:   pop    %eax
  0xee06d386:   vzeroupper                          ;; 1615:   __ set_last_Java_frame(thread, noreg, rbp, __ pc(), noreg);
  0xee06d389:   mov    %ebp,0x230(%ecx)
  0xee06d38f:   movl   $0xee06d386,0x22c(%ecx)
  0xee06d399:   mov    %esp,0x228(%ecx)
  0xee06d39f:   push   %ebx                         ;; 1616:   __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, InterpreterRuntime::popframe_move_outgoing_args), thread, rax, rbx);
  0xee06d3a0:   push   %eax
  0xee06d3a1:   push   %ecx
  0xee06d3a2:   call   0xf6c16db0 = InterpreterRuntime::popframe_move_outgoing_args(JavaThread*, void*, void*)
  0xee06d3a7:   add    $0xc,%esp
  0xee06d3aa:   push   %eax                         ;; 1617:   __ get_thread(thread);
  0xee06d3ab:   push   %edx
  0xee06d3ac:   push   %ecx
  0xee06d3ad:   call   0xf704a910 = Thread::current()
  0xee06d3b2:   pop    %ecx
  0xee06d3b3:   pop    %edx
  0xee06d3b4:   mov    %eax,%ecx
  0xee06d3b6:   pop    %eax
  0xee06d3b7:   movl   $0x0,0x228(%ecx)             ;; 1625:   __ reset_last_Java_frame(thread, true);
  0xee06d3c1:   movl   $0x0,0x230(%ecx)
  0xee06d3cb:   movl   $0x0,0x22c(%ecx)
  0xee06d3d5:   vzeroupper 
  0xee06d3d8:   mov    -0x8(%ebp),%esp              ;; 1628:   __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));
  0xee06d3db:   movl   $0x0,-0x8(%ebp)              ;; 1629:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee06d3e2:   mov    -0x20(%ebp),%esi             ;; 1631:   __ restore_bcp();
  0xee06d3e5:   mov    -0x1c(%ebp),%edi             ;; 1632:   __ restore_locals();
  0xee06d3e8:   lea    0x0(%ebp,%edi,4),%edi
  0xee06d3ec:   push   %eax                         ;; 1636:     __ set_method_data_pointer_for_bcp();
  0xee06d3ed:   push   %ebx
  0xee06d3ee:   mov    -0xc(%ebp),%ebx
  0xee06d3f1:   mov    0xc(%ebx),%eax
  0xee06d3f4:   test   %eax,%eax
  0xee06d3f6:   je     0xee06d42c
  0xee06d3fc:   push   %esi
  0xee06d3fd:   push   %ebx
  0xee06d3fe:   cmpl   $0x0,-0x8(%ebp)
  0xee06d402:   je     0xee06d419
  0xee06d408:   push   $0xf785694c
  0xee06d40d:   call   0xee06d412
  0xee06d412:   pusha  
  0xee06d413:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d418:   hlt    
  0xee06d419:   call   0xf6c0d5e0 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0xee06d41e:   add    $0x8,%esp
  0xee06d421:   mov    0xc(%ebx),%ebx
  0xee06d424:   add    $0xe4,%ebx
  0xee06d42a:   add    %ebx,%eax
  0xee06d42c:   mov    %eax,-0x14(%ebp)
  0xee06d42f:   pop    %ebx
  0xee06d430:   pop    %eax
  0xee06d431:   push   %eax                         ;; 1640:   NOT_LP64(__ get_thread(thread));
  0xee06d432:   push   %edx
  0xee06d433:   push   %ecx
  0xee06d434:   call   0xf704a910 = Thread::current()
  0xee06d439:   pop    %ecx
  0xee06d43a:   pop    %edx
  0xee06d43b:   mov    %eax,%ecx
  0xee06d43d:   pop    %eax
  0xee06d43e:   movl   $0x0,0x2f4(%ecx)             ;; 1641:   __ movl(Address(thread, JavaThread::popframe_condition_offset()),
  0xee06d448:   cmpb   $0xb8,(%esi)                 ;; 1649:     __ cmpb(Address(rbcp, 0), Bytecodes::_invokestatic);
  0xee06d44b:   jne    0xee06d51e                   ;; 1650:     __ jcc(Assembler::notEqual, L_done);
  0xee06d451:   mov    -0xc(%ebp),%edx              ;; 1655:     __ get_method(rdx);
  0xee06d454:   mov    (%edi),%eax                  ;; 1656:     __ movptr(rax, Address(local0, 0));
  0xee06d456:   call   0xee06d460                   ;; 1657:     __ call_VM(rax, CAST_FROM_FN_PTR(address, InterpreterRuntime::member_name_arg_or_null), rax, rdx, rbcp);
  0xee06d45b:   jmp    0xee06d514
  0xee06d460:   push   %esi
  0xee06d461:   push   %edx
  0xee06d462:   push   %eax
  0xee06d463:   lea    0x10(%esp),%eax
  0xee06d467:   mov    %esi,-0x20(%ebp)
  0xee06d46a:   cmpl   $0x0,-0x8(%ebp)
  0xee06d46e:   je     0xee06d485
  0xee06d474:   push   $0xf78569d8
  0xee06d479:   call   0xee06d47e
  0xee06d47e:   pusha  
  0xee06d47f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d484:   hlt    
  0xee06d485:   push   %eax
  0xee06d486:   push   %edx
  0xee06d487:   push   %ecx
  0xee06d488:   call   0xf704a910 = Thread::current()
  0xee06d48d:   pop    %ecx
  0xee06d48e:   pop    %edx
  0xee06d48f:   mov    %eax,%edi
  0xee06d491:   pop    %eax
  0xee06d492:   push   %edi
  0xee06d493:   vzeroupper 
  0xee06d496:   mov    %ebp,0x230(%edi)
  0xee06d49c:   mov    %eax,0x228(%edi)
  0xee06d4a2:   call   0xf6c0f800 = InterpreterRuntime::member_name_arg_or_null(JavaThread*, unsigned char*, Method*, unsigned char*)
  0xee06d4a7:   add    $0x10,%esp
  0xee06d4aa:   push   %eax
  0xee06d4ab:   push   %edx
  0xee06d4ac:   push   %ecx
  0xee06d4ad:   call   0xf704a910 = Thread::current()
  0xee06d4b2:   pop    %ecx
  0xee06d4b3:   pop    %edx
  0xee06d4b4:   cmp    %eax,%edi
  0xee06d4b6:   je     0xee06d4cd
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06d4bc:   push   $0xf78b5a48
  0xee06d4c1:   call   0xee06d4c6
  0xee06d4c6:   pusha  
  0xee06d4c7:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d4cc:   hlt    
  0xee06d4cd:   pop    %eax
  0xee06d4ce:   movl   $0x0,0x228(%edi)
  0xee06d4d8:   movl   $0x0,0x230(%edi)
  0xee06d4e2:   movl   $0x0,0x22c(%edi)
  0xee06d4ec:   vzeroupper 
  0xee06d4ef:   cmpl   $0x0,0x4(%edi)
  0xee06d4f3:   jne    0xee05bbe0
  0xee06d4f9:   mov    0x254(%edi),%eax
  0xee06d4ff:   movl   $0x0,0x254(%edi)
  0xee06d509:   mov    -0x20(%ebp),%esi
  0xee06d50c:   mov    -0x1c(%ebp),%edi
  0xee06d50f:   lea    0x0(%ebp,%edi,4),%edi
  0xee06d513:   ret    
  0xee06d514:   test   %eax,%eax                    ;; 1659:     __ testptr(rax, rax);
  0xee06d516:   je     0xee06d51e                   ;; 1660:     __ jcc(Assembler::zero, L_done);
  0xee06d51c:   mov    %eax,(%ebx)                  ;; 1662:     __ movptr(Address(rbx, 0), rax);
  0xee06d51e:   movzbl (%esi),%ebx                  ;; 1663:     __ bind(L_done);
                                                    ;; 1667:   __ dispatch_next(vtos);
  0xee06d521:   jmp    *-0x833caa0(,%ebx,4)
  0xee06d528:   pop    %eax                         ;; 1670:   Interpreter::_remove_activation_entry = __ pc();
                                                    ;; 1673:   __ pop_ptr(rax);
  0xee06d529:   push   %eax                         ;; 1674:   NOT_LP64(__ get_thread(thread));
  0xee06d52a:   push   %edx
  0xee06d52b:   push   %ecx
  0xee06d52c:   call   0xf704a910 = Thread::current()
  0xee06d531:   pop    %ecx
  0xee06d532:   pop    %edx
  0xee06d533:   mov    %eax,%ecx
  0xee06d535:   pop    %eax
  0xee06d536:   mov    %eax,0x254(%ecx)             ;; 1675:   __ movptr(Address(thread, JavaThread::vm_result_offset()), rax);
  0xee06d53c:   push   %eax                         ;; 1677:   __ remove_activation(vtos, rdx, false, true, false);
  0xee06d53d:   push   %edx
  0xee06d53e:   push   %ecx
  0xee06d53f:   call   0xf704a910 = Thread::current()
  0xee06d544:   pop    %ecx
  0xee06d545:   pop    %edx
  0xee06d546:   mov    %eax,%ecx
  0xee06d548:   pop    %eax
  0xee06d549:   cmp    0x288(%ecx),%ebp
  0xee06d54f:   ja     0xee06d55a
  0xee06d555:   jmp    0xee06d5aa
  0xee06d55a:   vzeroupper 
  0xee06d55d:   mov    %ebp,0x230(%ecx)
  0xee06d563:   movl   $0xee06d55a,0x22c(%ecx)
  0xee06d56d:   mov    %esp,0x228(%ecx)
  0xee06d573:   push   %ecx
  0xee06d574:   call   0xf6c0e120 = InterpreterRuntime::at_unwind(JavaThread*)
  0xee06d579:   add    $0x4,%esp
  0xee06d57c:   push   %eax
  0xee06d57d:   push   %edx
  0xee06d57e:   push   %ecx
  0xee06d57f:   call   0xf704a910 = Thread::current()
  0xee06d584:   pop    %ecx
  0xee06d585:   pop    %edx
  0xee06d586:   mov    %eax,%ecx
  0xee06d588:   pop    %eax
  0xee06d589:   movl   $0x0,0x228(%ecx)
  0xee06d593:   movl   $0x0,0x230(%ecx)
  0xee06d59d:   movl   $0x0,0x22c(%ecx)
  0xee06d5a7:   vzeroupper 
  0xee06d5aa:   mov    0x2b1(%ecx),%bl
  0xee06d5b0:   movb   $0x0,0x2b1(%ecx)
  0xee06d5b7:   mov    -0xc(%ebp),%ecx
  0xee06d5ba:   mov    0x18(%ecx),%ecx
  0xee06d5bd:   test   $0x20,%cl
  0xee06d5c0:   je     0xee06d6f2
  0xee06d5c6:   test   $0xff,%bl
  0xee06d5c9:   jne    0xee06d825
  0xee06d5cf:   lea    -0x2c(%ebp),%edx
  0xee06d5d2:   mov    0x4(%edx),%eax
  0xee06d5d5:   test   %eax,%eax
  0xee06d5d7:   jne    0xee06d68f
  0xee06d5dd:   emms   
  0xee06d5df:   call   0xee06d5e9
  0xee06d5e4:   jmp    0xee06d68a
  0xee06d5e9:   lea    0x4(%esp),%eax
  0xee06d5ed:   mov    %esi,-0x20(%ebp)
  0xee06d5f0:   cmpl   $0x0,-0x8(%ebp)
  0xee06d5f4:   je     0xee06d60b
  0xee06d5fa:   push   $0xf78569d8
  0xee06d5ff:   call   0xee06d604
  0xee06d604:   pusha  
  0xee06d605:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d60a:   hlt    
  0xee06d60b:   push   %eax
  0xee06d60c:   push   %edx
  0xee06d60d:   push   %ecx
  0xee06d60e:   call   0xf704a910 = Thread::current()
  0xee06d613:   pop    %ecx
  0xee06d614:   pop    %edx
  0xee06d615:   mov    %eax,%edi
  0xee06d617:   pop    %eax
  0xee06d618:   push   %edi
  0xee06d619:   vzeroupper 
  0xee06d61c:   mov    %ebp,0x230(%edi)
  0xee06d622:   mov    %eax,0x228(%edi)
  0xee06d628:   call   0xf6c0cb60 = InterpreterRuntime::new_illegal_monitor_state_exception(JavaThread*)
  0xee06d62d:   add    $0x4,%esp
  0xee06d630:   push   %eax
  0xee06d631:   push   %edx
  0xee06d632:   push   %ecx
  0xee06d633:   call   0xf704a910 = Thread::current()
  0xee06d638:   pop    %ecx
  0xee06d639:   pop    %edx
  0xee06d63a:   cmp    %eax,%edi
  0xee06d63c:   je     0xee06d653
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06d642:   push   $0xf78b5a48
  0xee06d647:   call   0xee06d64c
  0xee06d64c:   pusha  
  0xee06d64d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d652:   hlt    
  0xee06d653:   pop    %eax
  0xee06d654:   movl   $0x0,0x228(%edi)
  0xee06d65e:   movl   $0x0,0x230(%edi)
  0xee06d668:   movl   $0x0,0x22c(%edi)
  0xee06d672:   vzeroupper 
  0xee06d675:   cmpl   $0x0,0x4(%edi)
  0xee06d679:   jne    0xee05bbe0
  0xee06d67f:   mov    -0x20(%ebp),%esi
  0xee06d682:   mov    -0x1c(%ebp),%edi
  0xee06d685:   lea    0x0(%ebp,%edi,4),%edi
  0xee06d689:   ret    
  0xee06d68a:   jmp    0xee06d6f2
  0xee06d68f:   mov    %esi,-0x20(%ebp)
  0xee06d692:   lea    (%edx),%eax
  0xee06d694:   mov    0x4(%edx),%ecx
  0xee06d697:   movl   $0x0,0x4(%edx)
  0xee06d69e:   mov    (%eax),%ebx
  0xee06d6a0:   test   %ebx,%ebx
  0xee06d6a2:   je     0xee06d6b2
  0xee06d6a8:   lock cmpxchg %ebx,(%ecx)
  0xee06d6ac:   jne    0xee06d6c8
  0xee06d6b2:   push   %eax
  0xee06d6b3:   push   %edx
  0xee06d6b4:   push   %ecx
  0xee06d6b5:   call   0xf704a910 = Thread::current()
  0xee06d6ba:   pop    %ecx
  0xee06d6bb:   pop    %edx
  0xee06d6bc:   decl   0x308(%eax)
  0xee06d6c2:   pop    %eax
  0xee06d6c3:   jmp    0xee06d6ef
  0xee06d6c8:   mov    %ecx,0x4(%edx)
  0xee06d6cb:   push   %edx
  0xee06d6cc:   cmpl   $0x0,-0x8(%ebp)
  0xee06d6d0:   je     0xee06d6e7
  0xee06d6d6:   push   $0xf785694c
  0xee06d6db:   call   0xee06d6e0
  0xee06d6e0:   pusha  
  0xee06d6e1:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d6e6:   hlt    
  0xee06d6e7:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06d6ec:   add    $0x4,%esp
  0xee06d6ef:   mov    -0x20(%ebp),%esi
  0xee06d6f2:   mov    -0x24(%ebp),%ecx
  0xee06d6f5:   lea    -0x24(%ebp),%ebx
  0xee06d6f8:   jmp    0xee06d821
  0xee06d6fd:   mov    %ecx,%edx
  0xee06d6ff:   mov    %esi,-0x20(%ebp)
  0xee06d702:   lea    (%edx),%eax
  0xee06d704:   mov    0x4(%edx),%ecx
  0xee06d707:   movl   $0x0,0x4(%edx)
  0xee06d70e:   mov    (%eax),%ebx
  0xee06d710:   test   %ebx,%ebx
  0xee06d712:   je     0xee06d722
  0xee06d718:   lock cmpxchg %ebx,(%ecx)
  0xee06d71c:   jne    0xee06d738
  0xee06d722:   push   %eax
  0xee06d723:   push   %edx
  0xee06d724:   push   %ecx
  0xee06d725:   call   0xf704a910 = Thread::current()
  0xee06d72a:   pop    %ecx
  0xee06d72b:   pop    %edx
  0xee06d72c:   decl   0x308(%eax)
  0xee06d732:   pop    %eax
  0xee06d733:   jmp    0xee06d75f
  0xee06d738:   mov    %ecx,0x4(%edx)
  0xee06d73b:   push   %edx
  0xee06d73c:   cmpl   $0x0,-0x8(%ebp)
  0xee06d740:   je     0xee06d757
  0xee06d746:   push   $0xf785694c
  0xee06d74b:   call   0xee06d750
  0xee06d750:   pusha  
  0xee06d751:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d756:   hlt    
  0xee06d757:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06d75c:   add    $0x4,%esp
  0xee06d75f:   mov    -0x20(%ebp),%esi
  0xee06d762:   emms   
  0xee06d764:   call   0xee06d76e
  0xee06d769:   jmp    0xee06d80f
  0xee06d76e:   lea    0x4(%esp),%eax
  0xee06d772:   mov    %esi,-0x20(%ebp)
  0xee06d775:   cmpl   $0x0,-0x8(%ebp)
  0xee06d779:   je     0xee06d790
  0xee06d77f:   push   $0xf78569d8
  0xee06d784:   call   0xee06d789
  0xee06d789:   pusha  
  0xee06d78a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d78f:   hlt    
  0xee06d790:   push   %eax
  0xee06d791:   push   %edx
  0xee06d792:   push   %ecx
  0xee06d793:   call   0xf704a910 = Thread::current()
  0xee06d798:   pop    %ecx
  0xee06d799:   pop    %edx
  0xee06d79a:   mov    %eax,%edi
  0xee06d79c:   pop    %eax
  0xee06d79d:   push   %edi
  0xee06d79e:   vzeroupper 
  0xee06d7a1:   mov    %ebp,0x230(%edi)
  0xee06d7a7:   mov    %eax,0x228(%edi)
  0xee06d7ad:   call   0xf6c0cb60 = InterpreterRuntime::new_illegal_monitor_state_exception(JavaThread*)
  0xee06d7b2:   add    $0x4,%esp
  0xee06d7b5:   push   %eax
  0xee06d7b6:   push   %edx
  0xee06d7b7:   push   %ecx
  0xee06d7b8:   call   0xf704a910 = Thread::current()
  0xee06d7bd:   pop    %ecx
  0xee06d7be:   pop    %edx
  0xee06d7bf:   cmp    %eax,%edi
  0xee06d7c1:   je     0xee06d7d8
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06d7c7:   push   $0xf78b5a48
  0xee06d7cc:   call   0xee06d7d1
  0xee06d7d1:   pusha  
  0xee06d7d2:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d7d7:   hlt    
  0xee06d7d8:   pop    %eax
  0xee06d7d9:   movl   $0x0,0x228(%edi)
  0xee06d7e3:   movl   $0x0,0x230(%edi)
  0xee06d7ed:   movl   $0x0,0x22c(%edi)
  0xee06d7f7:   vzeroupper 
  0xee06d7fa:   cmpl   $0x0,0x4(%edi)
  0xee06d7fe:   jne    0xee05bbe0
  0xee06d804:   mov    -0x20(%ebp),%esi
  0xee06d807:   mov    -0x1c(%ebp),%edi
  0xee06d80a:   lea    0x0(%ebp,%edi,4),%edi
  0xee06d80e:   ret    
  0xee06d80f:   jmp    0xee06d6f2
  0xee06d814:   cmpl   $0x0,0x4(%ecx)
  0xee06d818:   jne    0xee06d6fd
  0xee06d81e:   add    $0x8,%ecx
  0xee06d821:   cmp    %ebx,%ecx
  0xee06d823:   jne    0xee06d814
  0xee06d825:   cmpb   $0x0,0xf7ca3a0d
  0xee06d82c:   je     0xee06d867
  0xee06d832:   push   %eax
  0xee06d833:   push   %edx
  0xee06d834:   push   %ecx
  0xee06d835:   call   0xf704a910 = Thread::current()
  0xee06d83a:   pop    %ecx
  0xee06d83b:   pop    %edx
  0xee06d83c:   mov    %eax,%ecx
  0xee06d83e:   pop    %eax
  0xee06d83f:   mov    -0xc(%ebp),%ebx
  0xee06d842:   push   %ebx
  0xee06d843:   push   %ecx
  0xee06d844:   cmpl   $0x0,-0x8(%ebp)
  0xee06d848:   je     0xee06d85f
  0xee06d84e:   push   $0xf785694c
  0xee06d853:   call   0xee06d858
  0xee06d858:   pusha  
  0xee06d859:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d85e:   hlt    
  0xee06d85f:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee06d864:   add    $0x8,%esp
  0xee06d867:   mov    -0x4(%ebp),%ebx
  0xee06d86a:   push   %eax
  0xee06d86b:   push   %edx
  0xee06d86c:   push   %ecx
  0xee06d86d:   call   0xf704a910 = Thread::current()
  0xee06d872:   pop    %ecx
  0xee06d873:   pop    %edx
  0xee06d874:   mov    %eax,%ecx
  0xee06d876:   pop    %eax
  0xee06d877:   cmpl   $0x3,0x2bc(%ecx)
  0xee06d87e:   je     0xee06d970
  0xee06d884:   cmp    0x2c4(%ecx),%ebx
  0xee06d88a:   jle    0xee06d970
  0xee06d890:   push   %ecx
  0xee06d891:   cmpl   $0x0,-0x8(%ebp)
  0xee06d895:   je     0xee06d8ac
  0xee06d89b:   push   $0xf785694c
  0xee06d8a0:   call   0xee06d8a5
  0xee06d8a5:   pusha  
  0xee06d8a6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d8ab:   hlt    
  0xee06d8ac:   call   0xf739fd80 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0xee06d8b1:   add    $0x4,%esp
  0xee06d8b4:   call   0xee06d8be
  0xee06d8b9:   jmp    0xee06d95f
  0xee06d8be:   lea    0x4(%esp),%eax
  0xee06d8c2:   mov    %esi,-0x20(%ebp)
  0xee06d8c5:   cmpl   $0x0,-0x8(%ebp)
  0xee06d8c9:   je     0xee06d8e0
  0xee06d8cf:   push   $0xf78569d8
  0xee06d8d4:   call   0xee06d8d9
  0xee06d8d9:   pusha  
  0xee06d8da:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d8df:   hlt    
  0xee06d8e0:   push   %eax
  0xee06d8e1:   push   %edx
  0xee06d8e2:   push   %ecx
  0xee06d8e3:   call   0xf704a910 = Thread::current()
  0xee06d8e8:   pop    %ecx
  0xee06d8e9:   pop    %edx
  0xee06d8ea:   mov    %eax,%edi
  0xee06d8ec:   pop    %eax
  0xee06d8ed:   push   %edi
  0xee06d8ee:   vzeroupper 
  0xee06d8f1:   mov    %ebp,0x230(%edi)
  0xee06d8f7:   mov    %eax,0x228(%edi)
  0xee06d8fd:   call   0xf6c0b0b0 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0xee06d902:   add    $0x4,%esp
  0xee06d905:   push   %eax
  0xee06d906:   push   %edx
  0xee06d907:   push   %ecx
  0xee06d908:   call   0xf704a910 = Thread::current()
  0xee06d90d:   pop    %ecx
  0xee06d90e:   pop    %edx
  0xee06d90f:   cmp    %eax,%edi
  0xee06d911:   je     0xee06d928
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06d917:   push   $0xf78b5a48
  0xee06d91c:   call   0xee06d921
  0xee06d921:   pusha  
  0xee06d922:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d927:   hlt    
  0xee06d928:   pop    %eax
  0xee06d929:   movl   $0x0,0x228(%edi)
  0xee06d933:   movl   $0x0,0x230(%edi)
  0xee06d93d:   movl   $0x0,0x22c(%edi)
  0xee06d947:   vzeroupper 
  0xee06d94a:   cmpl   $0x0,0x4(%edi)
  0xee06d94e:   jne    0xee05bbe0
  0xee06d954:   mov    -0x20(%ebp),%esi
  0xee06d957:   mov    -0x1c(%ebp),%edi
  0xee06d95a:   lea    0x0(%ebp,%edi,4),%edi
  0xee06d95e:   ret    
  0xee06d95f:   push   $0xf77a6b02
  0xee06d964:   call   0xee06d969
  0xee06d969:   pusha  
  0xee06d96a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d96f:   hlt    
  0xee06d970:   mov    %ebp,%esp
  0xee06d972:   pop    %ebp
  0xee06d973:   pop    %edx
  0xee06d974:   mov    %ebx,%esp
  0xee06d976:   push   %eax                         ;; 1679:   NOT_LP64(__ get_thread(thread));
  0xee06d977:   push   %edx
  0xee06d978:   push   %ecx
  0xee06d979:   call   0xf704a910 = Thread::current()
  0xee06d97e:   pop    %ecx
  0xee06d97f:   pop    %edx
  0xee06d980:   mov    %eax,%ecx
  0xee06d982:   pop    %eax
  0xee06d983:   mov    0x254(%ecx),%eax             ;; 1680:   __ get_vm_result(rax, thread);
  0xee06d989:   movl   $0x0,0x254(%ecx)
  0xee06d993:   push   %eax                         ;; 1690:   __ push(rax);                                  // save exception
  0xee06d994:   push   %edx                         ;; 1691:   __ push(rdx);                                  // save return address
  0xee06d995:   push   %edx                         ;; 1692:   __ super_call_VM_leaf(CAST_FROM_FN_PTR(address,
  0xee06d996:   push   %ecx
  0xee06d997:   call   0xf73999f0 = SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
  0xee06d99c:   add    $0x8,%esp
  0xee06d99f:   mov    %eax,%ebx                    ;; 1695:   __ mov(rbx, rax);                              // save exception handler
  0xee06d9a1:   pop    %edx                         ;; 1696:   __ pop(rdx);                                   // restore return address
  0xee06d9a2:   pop    %eax                         ;; 1697:   __ pop(rax);                                   // restore exception
  0xee06d9a3:   jmp    *%ebx                        ;; 1699:   __ jmp(rbx);                                   // jump to exception
  0xee06d9a5:   nop
  0xee06d9a6:   nop
  0xee06d9a7:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
throw exception entrypoints  [0xee06d9c0, 0xee06de8c]  1228 bytes

--------------------------------------------------------------------------------
  0xee06d9c0:   mov    -0x24(%ebp),%esp             ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;;  111:   address entry = __ pc();
                                                    ;;  114:   __ empty_expression_stack();
  0xee06d9c3:   movl   $0x0,-0x8(%ebp)
  0xee06d9ca:   emms   
  0xee06d9cc:   call   0xee06d9d6                   ;;  120:   __ call_VM(noreg,
  0xee06d9d1:   jmp    0xee06da79
  0xee06d9d6:   push   %ebx
  0xee06d9d7:   push   %eax
  0xee06d9d8:   lea    0xc(%esp),%eax
  0xee06d9dc:   mov    %esi,-0x20(%ebp)
  0xee06d9df:   cmpl   $0x0,-0x8(%ebp)
  0xee06d9e3:   je     0xee06d9fa
  0xee06d9e9:   push   $0xf78569d8
  0xee06d9ee:   call   0xee06d9f3
  0xee06d9f3:   pusha  
  0xee06d9f4:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06d9f9:   hlt    
  0xee06d9fa:   push   %eax
  0xee06d9fb:   push   %edx
  0xee06d9fc:   push   %ecx
  0xee06d9fd:   call   0xf704a910 = Thread::current()
  0xee06da02:   pop    %ecx
  0xee06da03:   pop    %edx
  0xee06da04:   mov    %eax,%edi
  0xee06da06:   pop    %eax
  0xee06da07:   push   %edi
  0xee06da08:   vzeroupper 
  0xee06da0b:   mov    %ebp,0x230(%edi)
  0xee06da11:   mov    %eax,0x228(%edi)
  0xee06da17:   call   0xf6c17680 = InterpreterRuntime::throw_ArrayIndexOutOfBoundsException(JavaThread*, arrayOopDesc*, int)
  0xee06da1c:   add    $0xc,%esp
  0xee06da1f:   push   %eax
  0xee06da20:   push   %edx
  0xee06da21:   push   %ecx
  0xee06da22:   call   0xf704a910 = Thread::current()
  0xee06da27:   pop    %ecx
  0xee06da28:   pop    %edx
  0xee06da29:   cmp    %eax,%edi
  0xee06da2b:   je     0xee06da42
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06da31:   push   $0xf78b5a48
  0xee06da36:   call   0xee06da3b
  0xee06da3b:   pusha  
  0xee06da3c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06da41:   hlt    
  0xee06da42:   pop    %eax
  0xee06da43:   movl   $0x0,0x228(%edi)
  0xee06da4d:   movl   $0x0,0x230(%edi)
  0xee06da57:   movl   $0x0,0x22c(%edi)
  0xee06da61:   vzeroupper 
  0xee06da64:   cmpl   $0x0,0x4(%edi)
  0xee06da68:   jne    0xee05bbe0
  0xee06da6e:   mov    -0x20(%ebp),%esi
  0xee06da71:   mov    -0x1c(%ebp),%edi
  0xee06da74:   lea    0x0(%ebp,%edi,4),%edi
  0xee06da78:   ret    
  0xee06da79:   pop    %ebx                         ;;  150:   address entry = __ pc();
                                                    ;;  157:     __ pop(rarg2);
  0xee06da7a:   mov    -0x24(%ebp),%esp             ;;  161:   __ empty_expression_stack();
  0xee06da7d:   movl   $0x0,-0x8(%ebp)
  0xee06da84:   emms   
  0xee06da86:   mov    $0xf7923f05,%eax             ;;  163:   __ lea(rarg, ExternalAddress((address)name));
  0xee06da8b:   call   0xee06da95                   ;;  165:     __ call_VM(rax, CAST_FROM_FN_PTR(address,
  0xee06da90:   jmp    0xee06db48
  0xee06da95:   push   %ebx
  0xee06da96:   push   %eax
  0xee06da97:   lea    0xc(%esp),%eax
  0xee06da9b:   mov    %esi,-0x20(%ebp)
  0xee06da9e:   cmpl   $0x0,-0x8(%ebp)
  0xee06daa2:   je     0xee06dab9
  0xee06daa8:   push   $0xf78569d8
  0xee06daad:   call   0xee06dab2
  0xee06dab2:   pusha  
  0xee06dab3:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06dab8:   hlt    
  0xee06dab9:   push   %eax
  0xee06daba:   push   %edx
  0xee06dabb:   push   %ecx
  0xee06dabc:   call   0xf704a910 = Thread::current()
  0xee06dac1:   pop    %ecx
  0xee06dac2:   pop    %edx
  0xee06dac3:   mov    %eax,%edi
  0xee06dac5:   pop    %eax
  0xee06dac6:   push   %edi
  0xee06dac7:   vzeroupper 
  0xee06daca:   mov    %ebp,0x230(%edi)
  0xee06dad0:   mov    %eax,0x228(%edi)
  0xee06dad6:   call   0xf6c13b50 = InterpreterRuntime::create_klass_exception(JavaThread*, char*, oopDesc*)
  0xee06dadb:   add    $0xc,%esp
  0xee06dade:   push   %eax
  0xee06dadf:   push   %edx
  0xee06dae0:   push   %ecx
  0xee06dae1:   call   0xf704a910 = Thread::current()
  0xee06dae6:   pop    %ecx
  0xee06dae7:   pop    %edx
  0xee06dae8:   cmp    %eax,%edi
  0xee06daea:   je     0xee06db01
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06daf0:   push   $0xf78b5a48
  0xee06daf5:   call   0xee06dafa
  0xee06dafa:   pusha  
  0xee06dafb:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06db00:   hlt    
  0xee06db01:   pop    %eax
  0xee06db02:   movl   $0x0,0x228(%edi)
  0xee06db0c:   movl   $0x0,0x230(%edi)
  0xee06db16:   movl   $0x0,0x22c(%edi)
  0xee06db20:   vzeroupper 
  0xee06db23:   cmpl   $0x0,0x4(%edi)
  0xee06db27:   jne    0xee05bbe0
  0xee06db2d:   mov    0x254(%edi),%eax
  0xee06db33:   movl   $0x0,0x254(%edi)
  0xee06db3d:   mov    -0x20(%ebp),%esi
  0xee06db40:   mov    -0x1c(%ebp),%edi
  0xee06db43:   lea    0x0(%ebp,%edi,4),%edi
  0xee06db47:   ret    
  0xee06db48:   jmp    0xee06cc71                   ;;  176:   __ jump(ExternalAddress(Interpreter::throw_exception_entry()));
  0xee06db4d:   mov    -0x24(%ebp),%esp             ;;  150:   address entry = __ pc();
                                                    ;;  161:   __ empty_expression_stack();
  0xee06db50:   movl   $0x0,-0x8(%ebp)
  0xee06db57:   emms   
  0xee06db59:   mov    $0xf7923f23,%eax             ;;  163:   __ lea(rarg, ExternalAddress((address)name));
  0xee06db5e:   mov    $0xf77c7c6d,%ebx             ;;  170:     __ lea(rarg2, ExternalAddress((address)message));
  0xee06db63:   call   0xee06db6d                   ;;  171:     __ call_VM(rax,
  0xee06db68:   jmp    0xee06dc20
  0xee06db6d:   push   %ebx
  0xee06db6e:   push   %eax
  0xee06db6f:   lea    0xc(%esp),%eax
  0xee06db73:   mov    %esi,-0x20(%ebp)
  0xee06db76:   cmpl   $0x0,-0x8(%ebp)
  0xee06db7a:   je     0xee06db91
  0xee06db80:   push   $0xf78569d8
  0xee06db85:   call   0xee06db8a
  0xee06db8a:   pusha  
  0xee06db8b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06db90:   hlt    
  0xee06db91:   push   %eax
  0xee06db92:   push   %edx
  0xee06db93:   push   %ecx
  0xee06db94:   call   0xf704a910 = Thread::current()
  0xee06db99:   pop    %ecx
  0xee06db9a:   pop    %edx
  0xee06db9b:   mov    %eax,%edi
  0xee06db9d:   pop    %eax
  0xee06db9e:   push   %edi
  0xee06db9f:   vzeroupper 
  0xee06dba2:   mov    %ebp,0x230(%edi)
  0xee06dba8:   mov    %eax,0x228(%edi)
  0xee06dbae:   call   0xf6c138f0 = InterpreterRuntime::create_exception(JavaThread*, char*, char*)
  0xee06dbb3:   add    $0xc,%esp
  0xee06dbb6:   push   %eax
  0xee06dbb7:   push   %edx
  0xee06dbb8:   push   %ecx
  0xee06dbb9:   call   0xf704a910 = Thread::current()
  0xee06dbbe:   pop    %ecx
  0xee06dbbf:   pop    %edx
  0xee06dbc0:   cmp    %eax,%edi
  0xee06dbc2:   je     0xee06dbd9
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06dbc8:   push   $0xf78b5a48
  0xee06dbcd:   call   0xee06dbd2
  0xee06dbd2:   pusha  
  0xee06dbd3:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06dbd8:   hlt    
  0xee06dbd9:   pop    %eax
  0xee06dbda:   movl   $0x0,0x228(%edi)
  0xee06dbe4:   movl   $0x0,0x230(%edi)
  0xee06dbee:   movl   $0x0,0x22c(%edi)
  0xee06dbf8:   vzeroupper 
  0xee06dbfb:   cmpl   $0x0,0x4(%edi)
  0xee06dbff:   jne    0xee05bbe0
  0xee06dc05:   mov    0x254(%edi),%eax
  0xee06dc0b:   movl   $0x0,0x254(%edi)
  0xee06dc15:   mov    -0x20(%ebp),%esi
  0xee06dc18:   mov    -0x1c(%ebp),%edi
  0xee06dc1b:   lea    0x0(%ebp,%edi,4),%edi
  0xee06dc1f:   ret    
  0xee06dc20:   jmp    0xee06cc71                   ;;  176:   __ jump(ExternalAddress(Interpreter::throw_exception_entry()));
  0xee06dc25:   pop    %eax                         ;;  129:   address entry = __ pc();
                                                    ;;  133:   __ pop(rarg);
  0xee06dc26:   mov    -0x24(%ebp),%esp             ;;  137:   __ empty_expression_stack();
  0xee06dc29:   movl   $0x0,-0x8(%ebp)
  0xee06dc30:   emms   
  0xee06dc32:   call   0xee06dc3c                   ;;  139:   __ call_VM(noreg,
  0xee06dc37:   jmp    0xee06dcde
  0xee06dc3c:   push   %eax
  0xee06dc3d:   lea    0x8(%esp),%eax
  0xee06dc41:   mov    %esi,-0x20(%ebp)
  0xee06dc44:   cmpl   $0x0,-0x8(%ebp)
  0xee06dc48:   je     0xee06dc5f
  0xee06dc4e:   push   $0xf78569d8
  0xee06dc53:   call   0xee06dc58
  0xee06dc58:   pusha  
  0xee06dc59:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06dc5e:   hlt    
  0xee06dc5f:   push   %eax
  0xee06dc60:   push   %edx
  0xee06dc61:   push   %ecx
  0xee06dc62:   call   0xf704a910 = Thread::current()
  0xee06dc67:   pop    %ecx
  0xee06dc68:   pop    %edx
  0xee06dc69:   mov    %eax,%edi
  0xee06dc6b:   pop    %eax
  0xee06dc6c:   push   %edi
  0xee06dc6d:   vzeroupper 
  0xee06dc70:   mov    %ebp,0x230(%edi)
  0xee06dc76:   mov    %eax,0x228(%edi)
  0xee06dc7c:   call   0xf6c13d50 = InterpreterRuntime::throw_ClassCastException(JavaThread*, oopDesc*)
  0xee06dc81:   add    $0x8,%esp
  0xee06dc84:   push   %eax
  0xee06dc85:   push   %edx
  0xee06dc86:   push   %ecx
  0xee06dc87:   call   0xf704a910 = Thread::current()
  0xee06dc8c:   pop    %ecx
  0xee06dc8d:   pop    %edx
  0xee06dc8e:   cmp    %eax,%edi
  0xee06dc90:   je     0xee06dca7
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06dc96:   push   $0xf78b5a48
  0xee06dc9b:   call   0xee06dca0
  0xee06dca0:   pusha  
  0xee06dca1:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06dca6:   hlt    
  0xee06dca7:   pop    %eax
  0xee06dca8:   movl   $0x0,0x228(%edi)
  0xee06dcb2:   movl   $0x0,0x230(%edi)
  0xee06dcbc:   movl   $0x0,0x22c(%edi)
  0xee06dcc6:   vzeroupper 
  0xee06dcc9:   cmpl   $0x0,0x4(%edi)
  0xee06dccd:   jne    0xee05bbe0
  0xee06dcd3:   mov    -0x20(%ebp),%esi
  0xee06dcd6:   mov    -0x1c(%ebp),%edi
  0xee06dcd9:   lea    0x0(%ebp,%edi,4),%edi
  0xee06dcdd:   ret    
  0xee06dcde:   mov    -0x24(%ebp),%esp             ;;  150:   address entry = __ pc();
                                                    ;;  161:   __ empty_expression_stack();
  0xee06dce1:   movl   $0x0,-0x8(%ebp)
  0xee06dce8:   emms   
  0xee06dcea:   mov    $0xf79236e8,%eax             ;;  163:   __ lea(rarg, ExternalAddress((address)name));
  0xee06dcef:   mov    $0x0,%ebx                    ;;  170:     __ lea(rarg2, ExternalAddress((address)message));
  0xee06dcf4:   call   0xee06dcfe                   ;;  171:     __ call_VM(rax,
  0xee06dcf9:   jmp    0xee06ddb1
  0xee06dcfe:   push   %ebx
  0xee06dcff:   push   %eax
  0xee06dd00:   lea    0xc(%esp),%eax
  0xee06dd04:   mov    %esi,-0x20(%ebp)
  0xee06dd07:   cmpl   $0x0,-0x8(%ebp)
  0xee06dd0b:   je     0xee06dd22
  0xee06dd11:   push   $0xf78569d8
  0xee06dd16:   call   0xee06dd1b
  0xee06dd1b:   pusha  
  0xee06dd1c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06dd21:   hlt    
  0xee06dd22:   push   %eax
  0xee06dd23:   push   %edx
  0xee06dd24:   push   %ecx
  0xee06dd25:   call   0xf704a910 = Thread::current()
  0xee06dd2a:   pop    %ecx
  0xee06dd2b:   pop    %edx
  0xee06dd2c:   mov    %eax,%edi
  0xee06dd2e:   pop    %eax
  0xee06dd2f:   push   %edi
  0xee06dd30:   vzeroupper 
  0xee06dd33:   mov    %ebp,0x230(%edi)
  0xee06dd39:   mov    %eax,0x228(%edi)
  0xee06dd3f:   call   0xf6c138f0 = InterpreterRuntime::create_exception(JavaThread*, char*, char*)
  0xee06dd44:   add    $0xc,%esp
  0xee06dd47:   push   %eax
  0xee06dd48:   push   %edx
  0xee06dd49:   push   %ecx
  0xee06dd4a:   call   0xf704a910 = Thread::current()
  0xee06dd4f:   pop    %ecx
  0xee06dd50:   pop    %edx
  0xee06dd51:   cmp    %eax,%edi
  0xee06dd53:   je     0xee06dd6a
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06dd59:   push   $0xf78b5a48
  0xee06dd5e:   call   0xee06dd63
  0xee06dd63:   pusha  
  0xee06dd64:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06dd69:   hlt    
  0xee06dd6a:   pop    %eax
  0xee06dd6b:   movl   $0x0,0x228(%edi)
  0xee06dd75:   movl   $0x0,0x230(%edi)
  0xee06dd7f:   movl   $0x0,0x22c(%edi)
  0xee06dd89:   vzeroupper 
  0xee06dd8c:   cmpl   $0x0,0x4(%edi)
  0xee06dd90:   jne    0xee05bbe0
  0xee06dd96:   mov    0x254(%edi),%eax
  0xee06dd9c:   movl   $0x0,0x254(%edi)
  0xee06dda6:   mov    -0x20(%ebp),%esi
  0xee06dda9:   mov    -0x1c(%ebp),%edi
  0xee06ddac:   lea    0x0(%ebp,%edi,4),%edi
  0xee06ddb0:   ret    
  0xee06ddb1:   jmp    0xee06cc71                   ;;  176:   __ jump(ExternalAddress(Interpreter::throw_exception_entry()));
  0xee06ddb6:   lea    -0x24(%ebp),%eax             ;;   81:   address entry = __ pc();
                                                    ;;   86:     __ lea(rax, Address(rbp,
  0xee06ddb9:   cmp    %esp,%eax                    ;;   89:     __ cmpptr(rax, rsp); // rax = maximal rsp for current rbp (stack
  0xee06ddbb:   jae    0xee06ddd2                   ;;   91:     __ jcc(Assembler::aboveEqual, L); // check if frame is complete
  0xee06ddc1:   push   $0xf792451a                  ;;   92:     __ stop ("interpreter frame not set up");
  0xee06ddc6:   call   0xee06ddcb
  0xee06ddcb:   pusha  
  0xee06ddcc:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06ddd1:   hlt    
  0xee06ddd2:   mov    -0x20(%ebp),%esi             ;;   93:     __ bind(L);
                                                    ;;   98:   __ restore_bcp();
  0xee06ddd5:   mov    -0x24(%ebp),%esp             ;;  102:   __ empty_expression_stack();
  0xee06ddd8:   movl   $0x0,-0x8(%ebp)
  0xee06dddf:   emms   
  0xee06dde1:   call   0xee06ddeb                   ;;  104:   __ call_VM(noreg,
  0xee06dde6:   jmp    0xee06de8c
  0xee06ddeb:   lea    0x4(%esp),%eax
  0xee06ddef:   mov    %esi,-0x20(%ebp)
  0xee06ddf2:   cmpl   $0x0,-0x8(%ebp)
  0xee06ddf6:   je     0xee06de0d
  0xee06ddfc:   push   $0xf78569d8
  0xee06de01:   call   0xee06de06
  0xee06de06:   pusha  
  0xee06de07:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06de0c:   hlt    
  0xee06de0d:   push   %eax
  0xee06de0e:   push   %edx
  0xee06de0f:   push   %ecx
  0xee06de10:   call   0xf704a910 = Thread::current()
  0xee06de15:   pop    %ecx
  0xee06de16:   pop    %edx
  0xee06de17:   mov    %eax,%edi
  0xee06de19:   pop    %eax
  0xee06de1a:   push   %edi
  0xee06de1b:   vzeroupper 
  0xee06de1e:   mov    %ebp,0x230(%edi)
  0xee06de24:   mov    %eax,0x228(%edi)
  0xee06de2a:   call   0xf6c0ade0 = InterpreterRuntime::throw_StackOverflowError(JavaThread*)
  0xee06de2f:   add    $0x4,%esp
  0xee06de32:   push   %eax
  0xee06de33:   push   %edx
  0xee06de34:   push   %ecx
  0xee06de35:   call   0xf704a910 = Thread::current()
  0xee06de3a:   pop    %ecx
  0xee06de3b:   pop    %edx
  0xee06de3c:   cmp    %eax,%edi
  0xee06de3e:   je     0xee06de55
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06de44:   push   $0xf78b5a48
  0xee06de49:   call   0xee06de4e
  0xee06de4e:   pusha  
  0xee06de4f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06de54:   hlt    
  0xee06de55:   pop    %eax
  0xee06de56:   movl   $0x0,0x228(%edi)
  0xee06de60:   movl   $0x0,0x230(%edi)
  0xee06de6a:   movl   $0x0,0x22c(%edi)
  0xee06de74:   vzeroupper 
  0xee06de77:   cmpl   $0x0,0x4(%edi)
  0xee06de7b:   jne    0xee05bbe0
  0xee06de81:   mov    -0x20(%ebp),%esi
  0xee06de84:   mov    -0x1c(%ebp),%edi
  0xee06de87:   lea    0x0(%ebp,%edi,4),%edi
  0xee06de8b:   ret    
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = zerolocals)  [0xee06dea0, 0xee06e310]  1136 bytes

--------------------------------------------------------------------------------
  0xee06dea0:   mov    0x8(%ebx),%edx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1327:   address entry_point = __ pc();
                                                    ;; 1337:   __ movptr(rdx, constMethod);
  0xee06dea3:   movzwl 0x24(%edx),%ecx              ;; 1338:   __ load_unsigned_short(rcx, size_of_parameters);
  0xee06dea7:   movzwl 0x22(%edx),%edx              ;; 1344:   __ load_unsigned_short(rdx, size_of_locals); // get size of locals in words
  0xee06deab:   sub    %ecx,%edx                    ;; 1345:   __ subl(rdx, rcx); // rdx = no. of additional locals
  0xee06dead:   cmp    $0x3f5,%edx                  ;;  490:   __ cmpl(rdx, (page_size - overhead_size) / Interpreter::stackElementSize);
  0xee06deb3:   jbe    0xee06df06                   ;;  491:   __ jcc(Assembler::belowEqual, after_frame_check);
  0xee06deb9:   push   %esi                         ;;  499:   __ push(thread);
  0xee06deba:   push   %eax                         ;;  500:   __ get_thread(thread);
  0xee06debb:   push   %edx
  0xee06debc:   push   %ecx
  0xee06debd:   call   0xf704a910 = Thread::current()
  0xee06dec2:   pop    %ecx
  0xee06dec3:   pop    %edx
  0xee06dec4:   mov    %eax,%esi
  0xee06dec6:   pop    %eax
  0xee06dec7:   mov    %edx,%eax                    ;;  506:   __ mov(rax, rdx);
  0xee06dec9:   shl    $0x2,%eax                    ;;  507:   __ shlptr(rax, Interpreter::logStackElementSize); // Convert parameter count to bytes.
  0xee06decc:   add    $0x2c,%eax                   ;;  508:   __ addptr(rax, overhead_size);
  0xee06decf:   cmpl   $0x0,0x2c0(%esi)             ;;  513:   __ cmpptr(stack_limit, NULL_WORD);
  0xee06ded6:   jne    0xee06deed                   ;;  514:   __ jcc(Assembler::notEqual, limit_okay);
  0xee06dedc:   push   $0xf7924537                  ;;  515:   __ stop("stack overflow limit is zero");
  0xee06dee1:   call   0xee06dee6
  0xee06dee6:   pusha  
  0xee06dee7:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06deec:   hlt    
  0xee06deed:   add    0x2c0(%esi),%eax             ;;  516:   __ bind(limit_okay);
                                                    ;;  520:   __ addptr(rax, stack_limit);
  0xee06def3:   cmp    %eax,%esp                    ;;  523:   __ cmpptr(rsp, rax);
  0xee06def5:   ja     0xee06df05                   ;;  525:   __ jcc(Assembler::above, after_frame_check_pop);
  0xee06defb:   pop    %esi                         ;;  526:   NOT_LP64(__ pop(rsi));  // get saved bcp
  0xee06defc:   pop    %eax                         ;;  532:   __ pop(rax); // return address must be moved if SP is changed
  0xee06defd:   mov    %esi,%esp                    ;;  533:   __ mov(rsp, rbcp);
  0xee06deff:   push   %eax                         ;;  534:   __ push(rax);
  0xee06df00:   jmp    0xee060ee0                   ;;  539:   __ jump(ExternalAddress(StubRoutines::throw_StackOverflowError_entry()));
  0xee06df05:   pop    %esi                         ;;  541:   __ bind(after_frame_check_pop);
                                                    ;;  542:   NOT_LP64(__ pop(rsi));
  0xee06df06:   pop    %eax                         ;;  545:   __ bind(after_frame_check);
                                                    ;; 1355:   __ pop(rax);
  0xee06df07:   lea    -0x4(%esp,%ecx,4),%edi       ;; 1358:   __ lea(rlocals, Address(rsp, rcx, Interpreter::stackElementScale(), -wordSize));
  0xee06df0b:   test   %edx,%edx                    ;; 1365:     __ testl(rdx, rdx);
  0xee06df0d:   jle    0xee06df1b                   ;; 1366:     __ jcc(Assembler::lessEqual, exit); // do nothing if rdx <= 0
  0xee06df13:   push   $0x0                         ;; 1367:     __ bind(loop);
                                                    ;; 1368:     __ push(NULL_WORD); // initialize local variables
  0xee06df18:   dec    %edx                         ;; 1369:     __ decrementl(rdx); // until everything initialized
  0xee06df19:   jg     0xee06df13                   ;; 1370:     __ jcc(Assembler::greater, loop);
  0xee06df1b:   push   %eax                         ;; 1371:     __ bind(exit);
                                                    ;;  621:   __ push(rax);        // save return address
  0xee06df1c:   push   %ebp                         ;;  622:   __ enter();          // save old & set new rbp
  0xee06df1d:   mov    %esp,%ebp
  0xee06df1f:   push   %esi                         ;;  623:   __ push(rbcp);        // set sender sp
  0xee06df20:   push   $0x0                         ;;  624:   __ push(NULL_WORD); // leave last_sp as null
  0xee06df25:   mov    0x8(%ebx),%esi               ;;  625:   __ movptr(rbcp, Address(rbx, Method::const_offset()));      // get ConstMethod*
  0xee06df28:   lea    0x2c(%esi),%esi              ;;  626:   __ lea(rbcp, Address(rbcp, ConstMethod::codes_offset())); // get codebase
  0xee06df2b:   push   %ebx                         ;;  627:   __ push(rbx);        // save Method*
  0xee06df2c:   mov    0x8(%ebx),%edx               ;;  629:   __ load_mirror(rdx, rbx, rscratch2);
  0xee06df2f:   mov    0x8(%edx),%edx
  0xee06df32:   mov    0x10(%edx),%edx
  0xee06df35:   mov    0x44(%edx),%edx
  0xee06df38:   mov    (%edx),%edx
  0xee06df3a:   push   %edx                         ;;  630:   __ push(rdx);
  0xee06df3b:   mov    0xc(%ebx),%edx               ;;  633:     __ movptr(rdx, Address(rbx, in_bytes(Method::method_data_offset())));
  0xee06df3e:   test   %edx,%edx                    ;;  634:     __ testptr(rdx, rdx);
  0xee06df40:   je     0xee06df4c                   ;;  635:     __ jcc(Assembler::zero, method_data_continue);
  0xee06df46:   add    $0xe4,%edx                   ;;  636:     __ addptr(rdx, in_bytes(MethodData::data_offset()));
  0xee06df4c:   push   %edx                         ;;  637:     __ bind(method_data_continue);
                                                    ;;  638:     __ push(rdx);      // set the mdp (method data pointer)
  0xee06df4d:   mov    0x8(%ebx),%edx               ;;  643:   __ movptr(rdx, Address(rbx, Method::const_offset()));
  0xee06df50:   mov    0x8(%edx),%edx               ;;  644:   __ movptr(rdx, Address(rdx, ConstMethod::constants_offset()));
  0xee06df53:   mov    0xc(%edx),%edx               ;;  645:   __ movptr(rdx, Address(rdx, ConstantPool::cache_offset_in_bytes()));
  0xee06df56:   push   %edx                         ;;  646:   __ push(rdx); // set constant pool cache
  0xee06df57:   mov    %edi,%eax                    ;;  648:   __ movptr(rax, rlocals);
  0xee06df59:   sub    %ebp,%eax                    ;;  649:   __ subptr(rax, rbp);
  0xee06df5b:   shr    $0x2,%eax                    ;;  650:   __ shrptr(rax, Interpreter::logStackElementSize);  // rax = rlocals - fp();
  0xee06df5e:   push   %eax                         ;;  651:   __ push(rax); // set relativized rlocals, see frame::interpreter_frame_locals()
  0xee06df5f:   push   %esi                         ;;  656:     __ push(rbcp); // set bcp
  0xee06df60:   push   $0x0                         ;;  658:   __ push(0); // reserve word for pointer to expression stack bottom
  0xee06df65:   mov    %esp,(%esp)                  ;;  659:   __ movptr(Address(rsp, 0), rsp); // set expression stack bottom
  0xee06df68:   mov    0x18(%ebx),%eax              ;; 1379:   __ movl(rax, access_flags);
  0xee06df6b:   test   $0x100,%eax                  ;; 1382:     __ testl(rax, JVM_ACC_NATIVE);
  0xee06df70:   je     0xee06df87                   ;; 1383:     __ jcc(Assembler::zero, L);
  0xee06df76:   push   $0xf792442c                  ;; 1384:     __ stop("tried to execute native method as non-native");
  0xee06df7b:   call   0xee06df80
  0xee06df80:   pusha  
  0xee06df81:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06df86:   hlt    
  0xee06df87:   test   $0x400,%eax                  ;; 1385:     __ bind(L);
                                                    ;; 1389:     __ testl(rax, JVM_ACC_ABSTRACT);
  0xee06df8c:   je     0xee06dfa3                   ;; 1390:     __ jcc(Assembler::zero, L);
  0xee06df92:   push   $0xf79242c4                  ;; 1391:     __ stop("tried to execute abstract method in interpreter");
  0xee06df97:   call   0xee06df9c
  0xee06df9c:   pusha  
  0xee06df9d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06dfa2:   hlt    
  0xee06dfa3:   push   %edx                         ;; 1392:     __ bind(L);
                                                    ;; 1403:   NOT_LP64(__ get_thread(thread));
  0xee06dfa4:   push   %ecx
  0xee06dfa5:   call   0xf704a910 = Thread::current()
  0xee06dfaa:   pop    %ecx
  0xee06dfab:   pop    %edx
  0xee06dfac:   movb   $0x1,0x2b1(%eax)             ;; 1406:   __ movbool(do_not_unlock_if_synchronized, true);
  0xee06dfb3:   mov    -0x14(%ebp),%eax             ;; 1408:   __ profile_parameters_type(rax, rcx, rdx);
  0xee06dfb6:   test   %eax,%eax
  0xee06dfb8:   je     0xee06e023
  0xee06dfbe:   mov    -0x4(%eax),%ecx
  0xee06dfc1:   test   %ecx,%ecx
  0xee06dfc3:   js     0xee06e023
  0xee06dfc9:   add    %ecx,%eax
  0xee06dfcb:   mov    0x8(%eax),%ecx
  0xee06dfce:   sub    $0x2,%ecx
  0xee06dfd1:   mov    0xc(%eax,%ecx,4),%edx
  0xee06dfd5:   neg    %edx
  0xee06dfd7:   mov    (%edi,%edx,4),%edx
  0xee06dfda:   test   %edx,%edx
  0xee06dfdc:   jne    0xee06dfe5
  0xee06dfde:   orl    $0x1,0x10(%eax,%ecx,4)
  0xee06dfe3:   jmp    0xee06e01e
  0xee06dfe5:   mov    0x4(%edx),%edx
  0xee06dfe8:   xor    0x10(%eax,%ecx,4),%edx
  0xee06dfec:   test   $0xfffffffc,%edx
  0xee06dff2:   je     0xee06e01e
  0xee06dff4:   test   $0x2,%dl
  0xee06dff7:   jne    0xee06e01e
  0xee06dff9:   cmpl   $0x0,0x10(%eax,%ecx,4)
  0xee06dffe:   je     0xee06e01a
  0xee06e000:   cmpl   $0x1,0x10(%eax,%ecx,4)
  0xee06e005:   je     0xee06e01a
  0xee06e007:   xor    0x10(%eax,%ecx,4),%edx
  0xee06e00b:   test   $0xfffffffc,%edx
  0xee06e011:   je     0xee06e01e
  0xee06e013:   orl    $0x2,0x10(%eax,%ecx,4)
  0xee06e018:   jmp    0xee06e01e
  0xee06e01a:   mov    %edx,0x10(%eax,%ecx,4)
  0xee06e01e:   sub    $0x2,%ecx
  0xee06e021:   jns    0xee06dfd1
  0xee06e023:   mov    0xc(%ebx),%eax               ;;  400:     __ movptr(rax, Address(rbx, Method::method_data_offset()));
  0xee06e026:   test   %eax,%eax                    ;;  401:     __ testptr(rax, rax);
  0xee06e028:   je     0xee06e04a                   ;;  402:     __ jccb(Assembler::zero, no_mdo);
  0xee06e02a:   mov    0xb4(%eax),%ecx              ;;  407:     __ increment_mask_and_jump(mdo_invocation_counter, mask, rcx, overflow);
  0xee06e030:   add    $0x2,%ecx
  0xee06e033:   mov    %ecx,0xb4(%eax)
  0xee06e039:   and    0xc8(%eax),%ecx
  0xee06e03f:   je     0xee06e256
  0xee06e045:   jmp    0xee06e11e                   ;;  408:     __ jmp(done);
  0xee06e04a:   mov    0x10(%ebx),%eax              ;;  410:   __ bind(no_mdo);
                                                    ;;  415:   __ get_method_counters(rbx, rax, done);
  0xee06e04d:   test   %eax,%eax
  0xee06e04f:   jne    0xee06e10c
  0xee06e055:   call   0xee06e05f
  0xee06e05a:   jmp    0xee06e101
  0xee06e05f:   push   %ebx
  0xee06e060:   lea    0x8(%esp),%eax
  0xee06e064:   mov    %esi,-0x20(%ebp)
  0xee06e067:   cmpl   $0x0,-0x8(%ebp)
  0xee06e06b:   je     0xee06e082
  0xee06e071:   push   $0xf78569d8
  0xee06e076:   call   0xee06e07b
  0xee06e07b:   pusha  
  0xee06e07c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e081:   hlt    
  0xee06e082:   push   %eax
  0xee06e083:   push   %edx
  0xee06e084:   push   %ecx
  0xee06e085:   call   0xf704a910 = Thread::current()
  0xee06e08a:   pop    %ecx
  0xee06e08b:   pop    %edx
  0xee06e08c:   mov    %eax,%edi
  0xee06e08e:   pop    %eax
  0xee06e08f:   push   %edi
  0xee06e090:   vzeroupper 
  0xee06e093:   mov    %ebp,0x230(%edi)
  0xee06e099:   mov    %eax,0x228(%edi)
  0xee06e09f:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee06e0a4:   add    $0x8,%esp
  0xee06e0a7:   push   %eax
  0xee06e0a8:   push   %edx
  0xee06e0a9:   push   %ecx
  0xee06e0aa:   call   0xf704a910 = Thread::current()
  0xee06e0af:   pop    %ecx
  0xee06e0b0:   pop    %edx
  0xee06e0b1:   cmp    %eax,%edi
  0xee06e0b3:   je     0xee06e0ca
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06e0b9:   push   $0xf78b5a48
  0xee06e0be:   call   0xee06e0c3
  0xee06e0c3:   pusha  
  0xee06e0c4:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e0c9:   hlt    
  0xee06e0ca:   pop    %eax
  0xee06e0cb:   movl   $0x0,0x228(%edi)
  0xee06e0d5:   movl   $0x0,0x230(%edi)
  0xee06e0df:   movl   $0x0,0x22c(%edi)
  0xee06e0e9:   vzeroupper 
  0xee06e0ec:   cmpl   $0x0,0x4(%edi)
  0xee06e0f0:   jne    0xee05bbe0
  0xee06e0f6:   mov    -0x20(%ebp),%esi
  0xee06e0f9:   mov    -0x1c(%ebp),%edi
  0xee06e0fc:   lea    0x0(%ebp,%edi,4),%edi
  0xee06e100:   ret    
  0xee06e101:   mov    0x10(%ebx),%eax
  0xee06e104:   test   %eax,%eax
  0xee06e106:   je     0xee06e11e
  0xee06e10c:   mov    0x8(%eax),%ecx               ;;  417:   __ increment_mask_and_jump(invocation_counter, mask, rcx, overflow);
  0xee06e10f:   add    $0x2,%ecx
  0xee06e112:   mov    %ecx,0x8(%eax)
  0xee06e115:   and    0x1c(%eax),%ecx
  0xee06e118:   je     0xee06e256
  0xee06e11e:   push   %esi                         ;;  418:   __ bind(done);
                                                    ;; 1416:   __ bind(continue_after_compile);
                                                    ;;  740:   __ push(thread);
  0xee06e11f:   push   %eax                         ;;  741:   __ get_thread(thread);
  0xee06e120:   push   %edx
  0xee06e121:   push   %ecx
  0xee06e122:   call   0xf704a910 = Thread::current()
  0xee06e127:   pop    %ecx
  0xee06e128:   pop    %edx
  0xee06e129:   mov    %eax,%esi
  0xee06e12b:   pop    %eax
  0xee06e12c:   cmpl   $0x0,0x2c8(%esi)             ;;  746:   __ cmpptr(Address(thread, JavaThread::shadow_zone_safe_limit()), NULL_WORD);
  0xee06e133:   jne    0xee06e14a                   ;;  747:   __ jcc(Assembler::notEqual, L_good_limit);
  0xee06e139:   push   $0xf7924238                  ;;  748:   __ stop("shadow zone safe limit is not initialized");
  0xee06e13e:   call   0xee06e143
  0xee06e143:   pusha  
  0xee06e144:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e149:   hlt    
  0xee06e14a:   cmpl   $0x0,0x2cc(%esi)             ;;  749:   __ bind(L_good_limit);
                                                    ;;  752:   __ cmpptr(Address(thread, JavaThread::shadow_zone_growth_watermark()), NULL_WORD);
  0xee06e151:   jne    0xee06e168                   ;;  753:   __ jcc(Assembler::notEqual, L_good_watermark);
  0xee06e157:   push   $0xf7924264                  ;;  754:   __ stop("shadow zone growth watermark is not initialized");
  0xee06e15c:   call   0xee06e161
  0xee06e161:   pusha  
  0xee06e162:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e167:   hlt    
  0xee06e168:   cmp    0x2cc(%esi),%esp             ;;  755:   __ bind(L_good_watermark);
                                                    ;;  760:   __ cmpptr(rsp, Address(thread, JavaThread::shadow_zone_growth_watermark()));
  0xee06e16e:   ja     0xee06e1c1                   ;;  761:   __ jcc(Assembler::above, L_done);
  0xee06e174:   mov    %eax,-0x1000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e17b:   mov    %eax,-0x2000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e182:   mov    %eax,-0x3000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e189:   mov    %eax,-0x4000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e190:   mov    %eax,-0x5000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e197:   mov    %eax,-0x6000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e19e:   mov    %eax,-0x7000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e1a5:   mov    %eax,-0x8000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e1ac:   mov    %eax,-0x9000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e1b3:   cmp    0x2c8(%esi),%esp             ;;  769:   __ cmpptr(rsp, Address(thread, JavaThread::shadow_zone_safe_limit()));
  0xee06e1b9:   jbe    0xee06e1c1                   ;;  770:   __ jccb(Assembler::belowEqual, L_done);
  0xee06e1bb:   mov    %esp,0x2cc(%esi)             ;;  771:   __ movptr(Address(thread, JavaThread::shadow_zone_growth_watermark()), rsp);
  0xee06e1c1:   pop    %esi                         ;;  773:   __ bind(L_done);
                                                    ;;  776:   __ pop(thread);
  0xee06e1c2:   push   %edx                         ;; 1422:   NOT_LP64(__ get_thread(thread));
  0xee06e1c3:   push   %ecx
  0xee06e1c4:   call   0xf704a910 = Thread::current()
  0xee06e1c9:   pop    %ecx
  0xee06e1ca:   pop    %edx
  0xee06e1cb:   movb   $0x0,0x2b1(%eax)             ;; 1423:   __ movbool(do_not_unlock_if_synchronized, false);
  0xee06e1d2:   mov    0x18(%ebx),%eax              ;; 1436:       __ movl(rax, access_flags);
  0xee06e1d5:   test   $0x20,%al                    ;; 1437:       __ testl(rax, JVM_ACC_SYNCHRONIZED);
  0xee06e1d7:   je     0xee06e1ee                   ;; 1438:       __ jcc(Assembler::zero, L);
  0xee06e1dd:   push   $0xf792456b                  ;; 1439:       __ stop("method needs synchronization");
  0xee06e1e2:   call   0xee06e1e7
  0xee06e1e7:   pusha  
  0xee06e1e8:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e1ed:   hlt    
  0xee06e1ee:   mov    -0x24(%ebp),%eax             ;; 1440:       __ bind(L);
                                                    ;; 1451:     __ movptr(rax, monitor_block_top);
  0xee06e1f1:   cmp    %esp,%eax                    ;; 1452:     __ cmpptr(rax, rsp);
  0xee06e1f3:   je     0xee06e20a                   ;; 1453:     __ jcc(Assembler::equal, L);
  0xee06e1f9:   push   $0xf792445c                  ;; 1454:     __ stop("broken stack frame setup in interpreter 6");
  0xee06e1fe:   call   0xee06e203
  0xee06e203:   pusha  
  0xee06e204:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e209:   hlt    
  0xee06e20a:   cmpb   $0x0,0xf7ca3a0d              ;; 1455:     __ bind(L);
                                                    ;; 1460:   __ notify_method_entry();
  0xee06e211:   je     0xee06e24c
  0xee06e217:   push   %eax
  0xee06e218:   push   %edx
  0xee06e219:   push   %ecx
  0xee06e21a:   call   0xf704a910 = Thread::current()
  0xee06e21f:   pop    %ecx
  0xee06e220:   pop    %edx
  0xee06e221:   mov    %eax,%ecx
  0xee06e223:   pop    %eax
  0xee06e224:   mov    -0xc(%ebp),%ebx
  0xee06e227:   push   %ebx
  0xee06e228:   push   %ecx
  0xee06e229:   cmpl   $0x0,-0x8(%ebp)
  0xee06e22d:   je     0xee06e244
  0xee06e233:   push   $0xf785694c
  0xee06e238:   call   0xee06e23d
  0xee06e23d:   pusha  
  0xee06e23e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e243:   hlt    
  0xee06e244:   call   0xf739a630 = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0xee06e249:   add    $0x8,%esp
  0xee06e24c:   movzbl (%esi),%ebx                  ;; 1462:   __ dispatch_next(vtos);
  0xee06e24f:   jmp    *-0x833caa0(,%ebx,4)
  0xee06e256:   mov    $0x0,%eax                    ;; 1467:     __ bind(invocation_counter_overflow);
                                                    ;;  442:   __ movl(rarg, 0);
  0xee06e25b:   call   0xee06e265                   ;;  443:   __ call_VM(noreg,
  0xee06e260:   jmp    0xee06e307
  0xee06e265:   push   %eax
  0xee06e266:   lea    0x8(%esp),%eax
  0xee06e26a:   mov    %esi,-0x20(%ebp)
  0xee06e26d:   cmpl   $0x0,-0x8(%ebp)
  0xee06e271:   je     0xee06e288
  0xee06e277:   push   $0xf78569d8
  0xee06e27c:   call   0xee06e281
  0xee06e281:   pusha  
  0xee06e282:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e287:   hlt    
  0xee06e288:   push   %eax
  0xee06e289:   push   %edx
  0xee06e28a:   push   %ecx
  0xee06e28b:   call   0xf704a910 = Thread::current()
  0xee06e290:   pop    %ecx
  0xee06e291:   pop    %edx
  0xee06e292:   mov    %eax,%edi
  0xee06e294:   pop    %eax
  0xee06e295:   push   %edi
  0xee06e296:   vzeroupper 
  0xee06e299:   mov    %ebp,0x230(%edi)
  0xee06e29f:   mov    %eax,0x228(%edi)
  0xee06e2a5:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee06e2aa:   add    $0x8,%esp
  0xee06e2ad:   push   %eax
  0xee06e2ae:   push   %edx
  0xee06e2af:   push   %ecx
  0xee06e2b0:   call   0xf704a910 = Thread::current()
  0xee06e2b5:   pop    %ecx
  0xee06e2b6:   pop    %edx
  0xee06e2b7:   cmp    %eax,%edi
  0xee06e2b9:   je     0xee06e2d0
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06e2bf:   push   $0xf78b5a48
  0xee06e2c4:   call   0xee06e2c9
  0xee06e2c9:   pusha  
  0xee06e2ca:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e2cf:   hlt    
  0xee06e2d0:   pop    %eax
  0xee06e2d1:   movl   $0x0,0x228(%edi)
  0xee06e2db:   movl   $0x0,0x230(%edi)
  0xee06e2e5:   movl   $0x0,0x22c(%edi)
  0xee06e2ef:   vzeroupper 
  0xee06e2f2:   cmpl   $0x0,0x4(%edi)
  0xee06e2f6:   jne    0xee05bbe0
  0xee06e2fc:   mov    -0x20(%ebp),%esi
  0xee06e2ff:   mov    -0x1c(%ebp),%edi
  0xee06e302:   lea    0x0(%ebp,%edi,4),%edi
  0xee06e306:   ret    
  0xee06e307:   mov    -0xc(%ebp),%ebx              ;;  448:   __ movptr(rbx, Address(rbp, method_offset));   // restore Method*
  0xee06e30a:   jmp    0xee06e11e                   ;;  451:   __ jmp(do_continue, relocInfo::none);
  0xee06e30f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = zerolocals_synchronized)  [0xee06e340, 0xee06e8d8]  1432 bytes

--------------------------------------------------------------------------------
  0xee06e340:   mov    0x8(%ebx),%edx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1327:   address entry_point = __ pc();
                                                    ;; 1337:   __ movptr(rdx, constMethod);
  0xee06e343:   movzwl 0x24(%edx),%ecx              ;; 1338:   __ load_unsigned_short(rcx, size_of_parameters);
  0xee06e347:   movzwl 0x22(%edx),%edx              ;; 1344:   __ load_unsigned_short(rdx, size_of_locals); // get size of locals in words
  0xee06e34b:   sub    %ecx,%edx                    ;; 1345:   __ subl(rdx, rcx); // rdx = no. of additional locals
  0xee06e34d:   cmp    $0x3f5,%edx                  ;;  490:   __ cmpl(rdx, (page_size - overhead_size) / Interpreter::stackElementSize);
  0xee06e353:   jbe    0xee06e3a6                   ;;  491:   __ jcc(Assembler::belowEqual, after_frame_check);
  0xee06e359:   push   %esi                         ;;  499:   __ push(thread);
  0xee06e35a:   push   %eax                         ;;  500:   __ get_thread(thread);
  0xee06e35b:   push   %edx
  0xee06e35c:   push   %ecx
  0xee06e35d:   call   0xf704a910 = Thread::current()
  0xee06e362:   pop    %ecx
  0xee06e363:   pop    %edx
  0xee06e364:   mov    %eax,%esi
  0xee06e366:   pop    %eax
  0xee06e367:   mov    %edx,%eax                    ;;  506:   __ mov(rax, rdx);
  0xee06e369:   shl    $0x2,%eax                    ;;  507:   __ shlptr(rax, Interpreter::logStackElementSize); // Convert parameter count to bytes.
  0xee06e36c:   add    $0x2c,%eax                   ;;  508:   __ addptr(rax, overhead_size);
  0xee06e36f:   cmpl   $0x0,0x2c0(%esi)             ;;  513:   __ cmpptr(stack_limit, NULL_WORD);
  0xee06e376:   jne    0xee06e38d                   ;;  514:   __ jcc(Assembler::notEqual, limit_okay);
  0xee06e37c:   push   $0xf7924537                  ;;  515:   __ stop("stack overflow limit is zero");
  0xee06e381:   call   0xee06e386
  0xee06e386:   pusha  
  0xee06e387:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e38c:   hlt    
  0xee06e38d:   add    0x2c0(%esi),%eax             ;;  516:   __ bind(limit_okay);
                                                    ;;  520:   __ addptr(rax, stack_limit);
  0xee06e393:   cmp    %eax,%esp                    ;;  523:   __ cmpptr(rsp, rax);
  0xee06e395:   ja     0xee06e3a5                   ;;  525:   __ jcc(Assembler::above, after_frame_check_pop);
  0xee06e39b:   pop    %esi                         ;;  526:   NOT_LP64(__ pop(rsi));  // get saved bcp
  0xee06e39c:   pop    %eax                         ;;  532:   __ pop(rax); // return address must be moved if SP is changed
  0xee06e39d:   mov    %esi,%esp                    ;;  533:   __ mov(rsp, rbcp);
  0xee06e39f:   push   %eax                         ;;  534:   __ push(rax);
  0xee06e3a0:   jmp    0xee060ee0                   ;;  539:   __ jump(ExternalAddress(StubRoutines::throw_StackOverflowError_entry()));
  0xee06e3a5:   pop    %esi                         ;;  541:   __ bind(after_frame_check_pop);
                                                    ;;  542:   NOT_LP64(__ pop(rsi));
  0xee06e3a6:   pop    %eax                         ;;  545:   __ bind(after_frame_check);
                                                    ;; 1355:   __ pop(rax);
  0xee06e3a7:   lea    -0x4(%esp,%ecx,4),%edi       ;; 1358:   __ lea(rlocals, Address(rsp, rcx, Interpreter::stackElementScale(), -wordSize));
  0xee06e3ab:   test   %edx,%edx                    ;; 1365:     __ testl(rdx, rdx);
  0xee06e3ad:   jle    0xee06e3bb                   ;; 1366:     __ jcc(Assembler::lessEqual, exit); // do nothing if rdx <= 0
  0xee06e3b3:   push   $0x0                         ;; 1367:     __ bind(loop);
                                                    ;; 1368:     __ push(NULL_WORD); // initialize local variables
  0xee06e3b8:   dec    %edx                         ;; 1369:     __ decrementl(rdx); // until everything initialized
  0xee06e3b9:   jg     0xee06e3b3                   ;; 1370:     __ jcc(Assembler::greater, loop);
  0xee06e3bb:   push   %eax                         ;; 1371:     __ bind(exit);
                                                    ;;  621:   __ push(rax);        // save return address
  0xee06e3bc:   push   %ebp                         ;;  622:   __ enter();          // save old & set new rbp
  0xee06e3bd:   mov    %esp,%ebp
  0xee06e3bf:   push   %esi                         ;;  623:   __ push(rbcp);        // set sender sp
  0xee06e3c0:   push   $0x0                         ;;  624:   __ push(NULL_WORD); // leave last_sp as null
  0xee06e3c5:   mov    0x8(%ebx),%esi               ;;  625:   __ movptr(rbcp, Address(rbx, Method::const_offset()));      // get ConstMethod*
  0xee06e3c8:   lea    0x2c(%esi),%esi              ;;  626:   __ lea(rbcp, Address(rbcp, ConstMethod::codes_offset())); // get codebase
  0xee06e3cb:   push   %ebx                         ;;  627:   __ push(rbx);        // save Method*
  0xee06e3cc:   mov    0x8(%ebx),%edx               ;;  629:   __ load_mirror(rdx, rbx, rscratch2);
  0xee06e3cf:   mov    0x8(%edx),%edx
  0xee06e3d2:   mov    0x10(%edx),%edx
  0xee06e3d5:   mov    0x44(%edx),%edx
  0xee06e3d8:   mov    (%edx),%edx
  0xee06e3da:   push   %edx                         ;;  630:   __ push(rdx);
  0xee06e3db:   mov    0xc(%ebx),%edx               ;;  633:     __ movptr(rdx, Address(rbx, in_bytes(Method::method_data_offset())));
  0xee06e3de:   test   %edx,%edx                    ;;  634:     __ testptr(rdx, rdx);
  0xee06e3e0:   je     0xee06e3ec                   ;;  635:     __ jcc(Assembler::zero, method_data_continue);
  0xee06e3e6:   add    $0xe4,%edx                   ;;  636:     __ addptr(rdx, in_bytes(MethodData::data_offset()));
  0xee06e3ec:   push   %edx                         ;;  637:     __ bind(method_data_continue);
                                                    ;;  638:     __ push(rdx);      // set the mdp (method data pointer)
  0xee06e3ed:   mov    0x8(%ebx),%edx               ;;  643:   __ movptr(rdx, Address(rbx, Method::const_offset()));
  0xee06e3f0:   mov    0x8(%edx),%edx               ;;  644:   __ movptr(rdx, Address(rdx, ConstMethod::constants_offset()));
  0xee06e3f3:   mov    0xc(%edx),%edx               ;;  645:   __ movptr(rdx, Address(rdx, ConstantPool::cache_offset_in_bytes()));
  0xee06e3f6:   push   %edx                         ;;  646:   __ push(rdx); // set constant pool cache
  0xee06e3f7:   mov    %edi,%eax                    ;;  648:   __ movptr(rax, rlocals);
  0xee06e3f9:   sub    %ebp,%eax                    ;;  649:   __ subptr(rax, rbp);
  0xee06e3fb:   shr    $0x2,%eax                    ;;  650:   __ shrptr(rax, Interpreter::logStackElementSize);  // rax = rlocals - fp();
  0xee06e3fe:   push   %eax                         ;;  651:   __ push(rax); // set relativized rlocals, see frame::interpreter_frame_locals()
  0xee06e3ff:   push   %esi                         ;;  656:     __ push(rbcp); // set bcp
  0xee06e400:   push   $0x0                         ;;  658:   __ push(0); // reserve word for pointer to expression stack bottom
  0xee06e405:   mov    %esp,(%esp)                  ;;  659:   __ movptr(Address(rsp, 0), rsp); // set expression stack bottom
  0xee06e408:   mov    0x18(%ebx),%eax              ;; 1379:   __ movl(rax, access_flags);
  0xee06e40b:   test   $0x100,%eax                  ;; 1382:     __ testl(rax, JVM_ACC_NATIVE);
  0xee06e410:   je     0xee06e427                   ;; 1383:     __ jcc(Assembler::zero, L);
  0xee06e416:   push   $0xf792442c                  ;; 1384:     __ stop("tried to execute native method as non-native");
  0xee06e41b:   call   0xee06e420
  0xee06e420:   pusha  
  0xee06e421:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e426:   hlt    
  0xee06e427:   test   $0x400,%eax                  ;; 1385:     __ bind(L);
                                                    ;; 1389:     __ testl(rax, JVM_ACC_ABSTRACT);
  0xee06e42c:   je     0xee06e443                   ;; 1390:     __ jcc(Assembler::zero, L);
  0xee06e432:   push   $0xf79242c4                  ;; 1391:     __ stop("tried to execute abstract method in interpreter");
  0xee06e437:   call   0xee06e43c
  0xee06e43c:   pusha  
  0xee06e43d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e442:   hlt    
  0xee06e443:   push   %edx                         ;; 1392:     __ bind(L);
                                                    ;; 1403:   NOT_LP64(__ get_thread(thread));
  0xee06e444:   push   %ecx
  0xee06e445:   call   0xf704a910 = Thread::current()
  0xee06e44a:   pop    %ecx
  0xee06e44b:   pop    %edx
  0xee06e44c:   movb   $0x1,0x2b1(%eax)             ;; 1406:   __ movbool(do_not_unlock_if_synchronized, true);
  0xee06e453:   mov    -0x14(%ebp),%eax             ;; 1408:   __ profile_parameters_type(rax, rcx, rdx);
  0xee06e456:   test   %eax,%eax
  0xee06e458:   je     0xee06e4c3
  0xee06e45e:   mov    -0x4(%eax),%ecx
  0xee06e461:   test   %ecx,%ecx
  0xee06e463:   js     0xee06e4c3
  0xee06e469:   add    %ecx,%eax
  0xee06e46b:   mov    0x8(%eax),%ecx
  0xee06e46e:   sub    $0x2,%ecx
  0xee06e471:   mov    0xc(%eax,%ecx,4),%edx
  0xee06e475:   neg    %edx
  0xee06e477:   mov    (%edi,%edx,4),%edx
  0xee06e47a:   test   %edx,%edx
  0xee06e47c:   jne    0xee06e485
  0xee06e47e:   orl    $0x1,0x10(%eax,%ecx,4)
  0xee06e483:   jmp    0xee06e4be
  0xee06e485:   mov    0x4(%edx),%edx
  0xee06e488:   xor    0x10(%eax,%ecx,4),%edx
  0xee06e48c:   test   $0xfffffffc,%edx
  0xee06e492:   je     0xee06e4be
  0xee06e494:   test   $0x2,%dl
  0xee06e497:   jne    0xee06e4be
  0xee06e499:   cmpl   $0x0,0x10(%eax,%ecx,4)
  0xee06e49e:   je     0xee06e4ba
  0xee06e4a0:   cmpl   $0x1,0x10(%eax,%ecx,4)
  0xee06e4a5:   je     0xee06e4ba
  0xee06e4a7:   xor    0x10(%eax,%ecx,4),%edx
  0xee06e4ab:   test   $0xfffffffc,%edx
  0xee06e4b1:   je     0xee06e4be
  0xee06e4b3:   orl    $0x2,0x10(%eax,%ecx,4)
  0xee06e4b8:   jmp    0xee06e4be
  0xee06e4ba:   mov    %edx,0x10(%eax,%ecx,4)
  0xee06e4be:   sub    $0x2,%ecx
  0xee06e4c1:   jns    0xee06e471
  0xee06e4c3:   mov    0xc(%ebx),%eax               ;;  400:     __ movptr(rax, Address(rbx, Method::method_data_offset()));
  0xee06e4c6:   test   %eax,%eax                    ;;  401:     __ testptr(rax, rax);
  0xee06e4c8:   je     0xee06e4ea                   ;;  402:     __ jccb(Assembler::zero, no_mdo);
  0xee06e4ca:   mov    0xb4(%eax),%ecx              ;;  407:     __ increment_mask_and_jump(mdo_invocation_counter, mask, rcx, overflow);
  0xee06e4d0:   add    $0x2,%ecx
  0xee06e4d3:   mov    %ecx,0xb4(%eax)
  0xee06e4d9:   and    0xc8(%eax),%ecx
  0xee06e4df:   je     0xee06e81d
  0xee06e4e5:   jmp    0xee06e5be                   ;;  408:     __ jmp(done);
  0xee06e4ea:   mov    0x10(%ebx),%eax              ;;  410:   __ bind(no_mdo);
                                                    ;;  415:   __ get_method_counters(rbx, rax, done);
  0xee06e4ed:   test   %eax,%eax
  0xee06e4ef:   jne    0xee06e5ac
  0xee06e4f5:   call   0xee06e4ff
  0xee06e4fa:   jmp    0xee06e5a1
  0xee06e4ff:   push   %ebx
  0xee06e500:   lea    0x8(%esp),%eax
  0xee06e504:   mov    %esi,-0x20(%ebp)
  0xee06e507:   cmpl   $0x0,-0x8(%ebp)
  0xee06e50b:   je     0xee06e522
  0xee06e511:   push   $0xf78569d8
  0xee06e516:   call   0xee06e51b
  0xee06e51b:   pusha  
  0xee06e51c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e521:   hlt    
  0xee06e522:   push   %eax
  0xee06e523:   push   %edx
  0xee06e524:   push   %ecx
  0xee06e525:   call   0xf704a910 = Thread::current()
  0xee06e52a:   pop    %ecx
  0xee06e52b:   pop    %edx
  0xee06e52c:   mov    %eax,%edi
  0xee06e52e:   pop    %eax
  0xee06e52f:   push   %edi
  0xee06e530:   vzeroupper 
  0xee06e533:   mov    %ebp,0x230(%edi)
  0xee06e539:   mov    %eax,0x228(%edi)
  0xee06e53f:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee06e544:   add    $0x8,%esp
  0xee06e547:   push   %eax
  0xee06e548:   push   %edx
  0xee06e549:   push   %ecx
  0xee06e54a:   call   0xf704a910 = Thread::current()
  0xee06e54f:   pop    %ecx
  0xee06e550:   pop    %edx
  0xee06e551:   cmp    %eax,%edi
  0xee06e553:   je     0xee06e56a
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06e559:   push   $0xf78b5a48
  0xee06e55e:   call   0xee06e563
  0xee06e563:   pusha  
  0xee06e564:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e569:   hlt    
  0xee06e56a:   pop    %eax
  0xee06e56b:   movl   $0x0,0x228(%edi)
  0xee06e575:   movl   $0x0,0x230(%edi)
  0xee06e57f:   movl   $0x0,0x22c(%edi)
  0xee06e589:   vzeroupper 
  0xee06e58c:   cmpl   $0x0,0x4(%edi)
  0xee06e590:   jne    0xee05bbe0
  0xee06e596:   mov    -0x20(%ebp),%esi
  0xee06e599:   mov    -0x1c(%ebp),%edi
  0xee06e59c:   lea    0x0(%ebp,%edi,4),%edi
  0xee06e5a0:   ret    
  0xee06e5a1:   mov    0x10(%ebx),%eax
  0xee06e5a4:   test   %eax,%eax
  0xee06e5a6:   je     0xee06e5be
  0xee06e5ac:   mov    0x8(%eax),%ecx               ;;  417:   __ increment_mask_and_jump(invocation_counter, mask, rcx, overflow);
  0xee06e5af:   add    $0x2,%ecx
  0xee06e5b2:   mov    %ecx,0x8(%eax)
  0xee06e5b5:   and    0x1c(%eax),%ecx
  0xee06e5b8:   je     0xee06e81d
  0xee06e5be:   push   %esi                         ;;  418:   __ bind(done);
                                                    ;; 1416:   __ bind(continue_after_compile);
                                                    ;;  740:   __ push(thread);
  0xee06e5bf:   push   %eax                         ;;  741:   __ get_thread(thread);
  0xee06e5c0:   push   %edx
  0xee06e5c1:   push   %ecx
  0xee06e5c2:   call   0xf704a910 = Thread::current()
  0xee06e5c7:   pop    %ecx
  0xee06e5c8:   pop    %edx
  0xee06e5c9:   mov    %eax,%esi
  0xee06e5cb:   pop    %eax
  0xee06e5cc:   cmpl   $0x0,0x2c8(%esi)             ;;  746:   __ cmpptr(Address(thread, JavaThread::shadow_zone_safe_limit()), NULL_WORD);
  0xee06e5d3:   jne    0xee06e5ea                   ;;  747:   __ jcc(Assembler::notEqual, L_good_limit);
  0xee06e5d9:   push   $0xf7924238                  ;;  748:   __ stop("shadow zone safe limit is not initialized");
  0xee06e5de:   call   0xee06e5e3
  0xee06e5e3:   pusha  
  0xee06e5e4:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e5e9:   hlt    
  0xee06e5ea:   cmpl   $0x0,0x2cc(%esi)             ;;  749:   __ bind(L_good_limit);
                                                    ;;  752:   __ cmpptr(Address(thread, JavaThread::shadow_zone_growth_watermark()), NULL_WORD);
  0xee06e5f1:   jne    0xee06e608                   ;;  753:   __ jcc(Assembler::notEqual, L_good_watermark);
  0xee06e5f7:   push   $0xf7924264                  ;;  754:   __ stop("shadow zone growth watermark is not initialized");
  0xee06e5fc:   call   0xee06e601
  0xee06e601:   pusha  
  0xee06e602:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e607:   hlt    
  0xee06e608:   cmp    0x2cc(%esi),%esp             ;;  755:   __ bind(L_good_watermark);
                                                    ;;  760:   __ cmpptr(rsp, Address(thread, JavaThread::shadow_zone_growth_watermark()));
  0xee06e60e:   ja     0xee06e661                   ;;  761:   __ jcc(Assembler::above, L_done);
  0xee06e614:   mov    %eax,-0x1000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e61b:   mov    %eax,-0x2000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e622:   mov    %eax,-0x3000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e629:   mov    %eax,-0x4000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e630:   mov    %eax,-0x5000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e637:   mov    %eax,-0x6000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e63e:   mov    %eax,-0x7000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e645:   mov    %eax,-0x8000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e64c:   mov    %eax,-0x9000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06e653:   cmp    0x2c8(%esi),%esp             ;;  769:   __ cmpptr(rsp, Address(thread, JavaThread::shadow_zone_safe_limit()));
  0xee06e659:   jbe    0xee06e661                   ;;  770:   __ jccb(Assembler::belowEqual, L_done);
  0xee06e65b:   mov    %esp,0x2cc(%esi)             ;;  771:   __ movptr(Address(thread, JavaThread::shadow_zone_growth_watermark()), rsp);
  0xee06e661:   pop    %esi                         ;;  773:   __ bind(L_done);
                                                    ;;  776:   __ pop(thread);
  0xee06e662:   push   %edx                         ;; 1422:   NOT_LP64(__ get_thread(thread));
  0xee06e663:   push   %ecx
  0xee06e664:   call   0xf704a910 = Thread::current()
  0xee06e669:   pop    %ecx
  0xee06e66a:   pop    %edx
  0xee06e66b:   movb   $0x0,0x2b1(%eax)             ;; 1423:   __ movbool(do_not_unlock_if_synchronized, false);
  0xee06e672:   mov    0x18(%ebx),%eax              ;;  569:     __ movl(rax, access_flags);
  0xee06e675:   test   $0x20,%al                    ;;  570:     __ testl(rax, JVM_ACC_SYNCHRONIZED);
  0xee06e677:   jne    0xee06e68e                   ;;  571:     __ jcc(Assembler::notZero, L);
  0xee06e67d:   push   $0xf79241f4                  ;;  572:     __ stop("method doesn't need synchronization");
  0xee06e682:   call   0xee06e687
  0xee06e687:   pusha  
  0xee06e688:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e68d:   hlt    
  0xee06e68e:   mov    0x18(%ebx),%eax              ;;  573:     __ bind(L);
                                                    ;;  580:     __ movl(rax, access_flags);
  0xee06e691:   test   $0x8,%al                     ;;  581:     __ testl(rax, JVM_ACC_STATIC);
  0xee06e693:   mov    (%edi),%eax                  ;;  583:     __ movptr(rax, Address(rlocals, Interpreter::local_offset_in_bytes(0)));
  0xee06e695:   je     0xee06e6c2                   ;;  584:     __ jcc(Assembler::zero, done);
  0xee06e69b:   mov    0x8(%ebx),%eax               ;;  585:     __ load_mirror(rax, rbx, rscratch2);
  0xee06e69e:   mov    0x8(%eax),%eax
  0xee06e6a1:   mov    0x10(%eax),%eax
  0xee06e6a4:   mov    0x44(%eax),%eax
  0xee06e6a7:   mov    (%eax),%eax
  0xee06e6a9:   test   %eax,%eax                    ;;  590:       __ testptr(rax, rax);
  0xee06e6ab:   jne    0xee06e6c2                   ;;  591:       __ jcc(Assembler::notZero, L);
  0xee06e6b1:   push   $0xf7924218                  ;;  592:       __ stop("synchronization object is NULL");
  0xee06e6b6:   call   0xee06e6bb
  0xee06e6bb:   pusha  
  0xee06e6bc:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e6c1:   hlt    
  0xee06e6c2:   sub    $0x8,%esp                    ;;  593:       __ bind(L);
                                                    ;;  597:     __ bind(done);
                                                    ;;  601:   __ subptr(rsp, entry_size); // add space for a monitor entry
  0xee06e6c5:   mov    %esp,-0x24(%ebp)             ;;  602:   __ movptr(monitor_block_top, rsp);  // set new monitor block top
  0xee06e6c8:   mov    %eax,0x4(%esp)               ;;  604:   __ movptr(Address(rsp, BasicObjectLock::obj_offset_in_bytes()), rax);
  0xee06e6cc:   mov    %esp,%edx                    ;;  606:   __ movptr(lockreg, rsp); // object address
  0xee06e6ce:   mov    0x4(%edx),%ecx               ;;  607:   __ lock_object(lockreg);
  0xee06e6d1:   mov    $0x1,%eax
  0xee06e6d6:   or     (%ecx),%eax
  0xee06e6d8:   mov    %eax,(%edx)
  0xee06e6da:   lock cmpxchg %edx,(%ecx)
  0xee06e6de:   je     0xee06e6f3
  0xee06e6e4:   sub    %esp,%eax
  0xee06e6e6:   and    $0xfffff003,%eax
  0xee06e6eb:   mov    %eax,(%edx)
  0xee06e6ed:   jne    0xee06e709
  0xee06e6f3:   push   %eax
  0xee06e6f4:   push   %edx
  0xee06e6f5:   push   %ecx
  0xee06e6f6:   call   0xf704a910 = Thread::current()
  0xee06e6fb:   pop    %ecx
  0xee06e6fc:   pop    %edx
  0xee06e6fd:   incl   0x308(%eax)
  0xee06e703:   pop    %eax
  0xee06e704:   jmp    0xee06e7b5
  0xee06e709:   call   0xee06e713
  0xee06e70e:   jmp    0xee06e7b5
  0xee06e713:   push   %edx
  0xee06e714:   lea    0x8(%esp),%eax
  0xee06e718:   mov    %esi,-0x20(%ebp)
  0xee06e71b:   cmpl   $0x0,-0x8(%ebp)
  0xee06e71f:   je     0xee06e736
  0xee06e725:   push   $0xf78569d8
  0xee06e72a:   call   0xee06e72f
  0xee06e72f:   pusha  
  0xee06e730:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e735:   hlt    
  0xee06e736:   push   %eax
  0xee06e737:   push   %edx
  0xee06e738:   push   %ecx
  0xee06e739:   call   0xf704a910 = Thread::current()
  0xee06e73e:   pop    %ecx
  0xee06e73f:   pop    %edx
  0xee06e740:   mov    %eax,%edi
  0xee06e742:   pop    %eax
  0xee06e743:   push   %edi
  0xee06e744:   vzeroupper 
  0xee06e747:   mov    %ebp,0x230(%edi)
  0xee06e74d:   mov    %eax,0x228(%edi)
  0xee06e753:   call   0xf6c0c3c0 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0xee06e758:   add    $0x8,%esp
  0xee06e75b:   push   %eax
  0xee06e75c:   push   %edx
  0xee06e75d:   push   %ecx
  0xee06e75e:   call   0xf704a910 = Thread::current()
  0xee06e763:   pop    %ecx
  0xee06e764:   pop    %edx
  0xee06e765:   cmp    %eax,%edi
  0xee06e767:   je     0xee06e77e
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06e76d:   push   $0xf78b5a48
  0xee06e772:   call   0xee06e777
  0xee06e777:   pusha  
  0xee06e778:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e77d:   hlt    
  0xee06e77e:   pop    %eax
  0xee06e77f:   movl   $0x0,0x228(%edi)
  0xee06e789:   movl   $0x0,0x230(%edi)
  0xee06e793:   movl   $0x0,0x22c(%edi)
  0xee06e79d:   vzeroupper 
  0xee06e7a0:   cmpl   $0x0,0x4(%edi)
  0xee06e7a4:   jne    0xee05bbe0
  0xee06e7aa:   mov    -0x20(%ebp),%esi
  0xee06e7ad:   mov    -0x1c(%ebp),%edi
  0xee06e7b0:   lea    0x0(%ebp,%edi,4),%edi
  0xee06e7b4:   ret    
  0xee06e7b5:   mov    -0x24(%ebp),%eax             ;; 1451:     __ movptr(rax, monitor_block_top);
  0xee06e7b8:   cmp    %esp,%eax                    ;; 1452:     __ cmpptr(rax, rsp);
  0xee06e7ba:   je     0xee06e7d1                   ;; 1453:     __ jcc(Assembler::equal, L);
  0xee06e7c0:   push   $0xf792445c                  ;; 1454:     __ stop("broken stack frame setup in interpreter 6");
  0xee06e7c5:   call   0xee06e7ca
  0xee06e7ca:   pusha  
  0xee06e7cb:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e7d0:   hlt    
  0xee06e7d1:   cmpb   $0x0,0xf7ca3a0d              ;; 1455:     __ bind(L);
                                                    ;; 1460:   __ notify_method_entry();
  0xee06e7d8:   je     0xee06e813
  0xee06e7de:   push   %eax
  0xee06e7df:   push   %edx
  0xee06e7e0:   push   %ecx
  0xee06e7e1:   call   0xf704a910 = Thread::current()
  0xee06e7e6:   pop    %ecx
  0xee06e7e7:   pop    %edx
  0xee06e7e8:   mov    %eax,%ecx
  0xee06e7ea:   pop    %eax
  0xee06e7eb:   mov    -0xc(%ebp),%ebx
  0xee06e7ee:   push   %ebx
  0xee06e7ef:   push   %ecx
  0xee06e7f0:   cmpl   $0x0,-0x8(%ebp)
  0xee06e7f4:   je     0xee06e80b
  0xee06e7fa:   push   $0xf785694c
  0xee06e7ff:   call   0xee06e804
  0xee06e804:   pusha  
  0xee06e805:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e80a:   hlt    
  0xee06e80b:   call   0xf739a630 = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0xee06e810:   add    $0x8,%esp
  0xee06e813:   movzbl (%esi),%ebx                  ;; 1462:   __ dispatch_next(vtos);
  0xee06e816:   jmp    *-0x833caa0(,%ebx,4)
  0xee06e81d:   mov    $0x0,%eax                    ;; 1467:     __ bind(invocation_counter_overflow);
                                                    ;;  442:   __ movl(rarg, 0);
  0xee06e822:   call   0xee06e82c                   ;;  443:   __ call_VM(noreg,
  0xee06e827:   jmp    0xee06e8ce
  0xee06e82c:   push   %eax
  0xee06e82d:   lea    0x8(%esp),%eax
  0xee06e831:   mov    %esi,-0x20(%ebp)
  0xee06e834:   cmpl   $0x0,-0x8(%ebp)
  0xee06e838:   je     0xee06e84f
  0xee06e83e:   push   $0xf78569d8
  0xee06e843:   call   0xee06e848
  0xee06e848:   pusha  
  0xee06e849:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e84e:   hlt    
  0xee06e84f:   push   %eax
  0xee06e850:   push   %edx
  0xee06e851:   push   %ecx
  0xee06e852:   call   0xf704a910 = Thread::current()
  0xee06e857:   pop    %ecx
  0xee06e858:   pop    %edx
  0xee06e859:   mov    %eax,%edi
  0xee06e85b:   pop    %eax
  0xee06e85c:   push   %edi
  0xee06e85d:   vzeroupper 
  0xee06e860:   mov    %ebp,0x230(%edi)
  0xee06e866:   mov    %eax,0x228(%edi)
  0xee06e86c:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee06e871:   add    $0x8,%esp
  0xee06e874:   push   %eax
  0xee06e875:   push   %edx
  0xee06e876:   push   %ecx
  0xee06e877:   call   0xf704a910 = Thread::current()
  0xee06e87c:   pop    %ecx
  0xee06e87d:   pop    %edx
  0xee06e87e:   cmp    %eax,%edi
  0xee06e880:   je     0xee06e897
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06e886:   push   $0xf78b5a48
  0xee06e88b:   call   0xee06e890
  0xee06e890:   pusha  
  0xee06e891:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e896:   hlt    
  0xee06e897:   pop    %eax
  0xee06e898:   movl   $0x0,0x228(%edi)
  0xee06e8a2:   movl   $0x0,0x230(%edi)
  0xee06e8ac:   movl   $0x0,0x22c(%edi)
  0xee06e8b6:   vzeroupper 
  0xee06e8b9:   cmpl   $0x0,0x4(%edi)
  0xee06e8bd:   jne    0xee05bbe0
  0xee06e8c3:   mov    -0x20(%ebp),%esi
  0xee06e8c6:   mov    -0x1c(%ebp),%edi
  0xee06e8c9:   lea    0x0(%ebp,%edi,4),%edi
  0xee06e8cd:   ret    
  0xee06e8ce:   mov    -0xc(%ebp),%ebx              ;;  448:   __ movptr(rbx, Address(rbp, method_offset));   // restore Method*
  0xee06e8d1:   jmp    0xee06e5be                   ;;  451:   __ jmp(do_continue, relocInfo::none);
  0xee06e8d6:   nop
  0xee06e8d7:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = abstract)  [0xee06e900, 0xee06e9d4]  212 bytes

--------------------------------------------------------------------------------
  0xee06e900:   mov    -0x24(%ebp),%esp             ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1301:   address entry_point = __ pc();
                                                    ;; 1306:   __ empty_expression_stack();
  0xee06e903:   movl   $0x0,-0x8(%ebp)
  0xee06e90a:   emms   
  0xee06e90c:   mov    -0x20(%ebp),%esi             ;; 1307:   __ restore_bcp();      // rsi must be correct for exception handler   (was destroyed)
  0xee06e90f:   mov    -0x1c(%ebp),%edi             ;; 1308:   __ restore_locals();   // make sure locals pointer is correct as well (was destroyed)
  0xee06e912:   lea    0x0(%ebp,%edi,4),%edi
  0xee06e916:   call   0xee06e920                   ;; 1311:   __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::throw_AbstractMethodErrorWithMethod), rbx);
  0xee06e91b:   jmp    0xee06e9c2
  0xee06e920:   push   %ebx
  0xee06e921:   lea    0x8(%esp),%eax
  0xee06e925:   mov    %esi,-0x20(%ebp)
  0xee06e928:   cmpl   $0x0,-0x8(%ebp)
  0xee06e92c:   je     0xee06e943
  0xee06e932:   push   $0xf78569d8
  0xee06e937:   call   0xee06e93c
  0xee06e93c:   pusha  
  0xee06e93d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e942:   hlt    
  0xee06e943:   push   %eax
  0xee06e944:   push   %edx
  0xee06e945:   push   %ecx
  0xee06e946:   call   0xf704a910 = Thread::current()
  0xee06e94b:   pop    %ecx
  0xee06e94c:   pop    %edx
  0xee06e94d:   mov    %eax,%edi
  0xee06e94f:   pop    %eax
  0xee06e950:   push   %edi
  0xee06e951:   vzeroupper 
  0xee06e954:   mov    %ebp,0x230(%edi)
  0xee06e95a:   mov    %eax,0x228(%edi)
  0xee06e960:   call   0xf6c14320 = InterpreterRuntime::throw_AbstractMethodErrorWithMethod(JavaThread*, Method*)
  0xee06e965:   add    $0x8,%esp
  0xee06e968:   push   %eax
  0xee06e969:   push   %edx
  0xee06e96a:   push   %ecx
  0xee06e96b:   call   0xf704a910 = Thread::current()
  0xee06e970:   pop    %ecx
  0xee06e971:   pop    %edx
  0xee06e972:   cmp    %eax,%edi
  0xee06e974:   je     0xee06e98b
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06e97a:   push   $0xf78b5a48
  0xee06e97f:   call   0xee06e984
  0xee06e984:   pusha  
  0xee06e985:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e98a:   hlt    
  0xee06e98b:   pop    %eax
  0xee06e98c:   movl   $0x0,0x228(%edi)
  0xee06e996:   movl   $0x0,0x230(%edi)
  0xee06e9a0:   movl   $0x0,0x22c(%edi)
  0xee06e9aa:   vzeroupper 
  0xee06e9ad:   cmpl   $0x0,0x4(%edi)
  0xee06e9b1:   jne    0xee05bbe0
  0xee06e9b7:   mov    -0x20(%ebp),%esi
  0xee06e9ba:   mov    -0x1c(%ebp),%edi
  0xee06e9bd:   lea    0x0(%ebp,%edi,4),%edi
  0xee06e9c1:   ret    
  0xee06e9c2:   push   $0xf77a6b02                  ;; 1313:   __ should_not_reach_here();
  0xee06e9c7:   call   0xee06e9cc
  0xee06e9cc:   pusha  
  0xee06e9cd:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06e9d2:   hlt    
  0xee06e9d3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_math_sin)  [0xee06ea00, 0xee06ea28]  40 bytes

--------------------------------------------------------------------------------
  0xee06ea00:   fldl   0x4(%esp)                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  377:   address entry_point = __ pc();
                                                    ;;  422:   __ fld_d(Address(rsp, 1*wordSize));
  0xee06ea04:   sub    $0x8,%esp                    ;;  425:         __ subptr(rsp, 2 * wordSize);
  0xee06ea07:   fstpl  (%esp)                       ;;  426:         __ fstp_d(Address(rsp, 0));
  0xee06ea0a:   call   0xee05e547                   ;;  428:           __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dsin())));
  0xee06ea0f:   add    $0x8,%esp                    ;;  432:         __ addptr(rsp, 2 * wordSize);
  0xee06ea12:   sub    $0x8,%esp                    ;;  508:     __ subptr(rsp, 2*wordSize);
  0xee06ea15:   fstpl  (%esp)                       ;;  509:     __ fstp_d(Address(rsp, 0));
  0xee06ea18:   vmovsd (%esp),%xmm0                 ;;  510:     __ movdbl(xmm0, Address(rsp, 0));
  0xee06ea1d:   add    $0x8,%esp                    ;;  511:     __ addptr(rsp, 2*wordSize);
  0xee06ea20:   pop    %edi                         ;;  515:   __ pop(rdi);                               // get return address
  0xee06ea21:   mov    %esi,%esp                    ;;  516:   __ mov(rsp, rsi);                          // set sp to sender sp
  0xee06ea23:   jmp    *%edi                        ;;  517:   __ jmp(rdi);
  0xee06ea25:   nop
  0xee06ea26:   nop
  0xee06ea27:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_math_cos)  [0xee06ea40, 0xee06ea68]  40 bytes

--------------------------------------------------------------------------------
  0xee06ea40:   fldl   0x4(%esp)                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  377:   address entry_point = __ pc();
                                                    ;;  422:   __ fld_d(Address(rsp, 1*wordSize));
  0xee06ea44:   sub    $0x8,%esp                    ;;  435:         __ subptr(rsp, 2 * wordSize);
  0xee06ea47:   fstpl  (%esp)                       ;;  436:         __ fstp_d(Address(rsp, 0));
  0xee06ea4a:   call   0xee05e75f                   ;;  438:           __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dcos())));
  0xee06ea4f:   add    $0x8,%esp                    ;;  442:         __ addptr(rsp, 2 * wordSize);
  0xee06ea52:   sub    $0x8,%esp                    ;;  508:     __ subptr(rsp, 2*wordSize);
  0xee06ea55:   fstpl  (%esp)                       ;;  509:     __ fstp_d(Address(rsp, 0));
  0xee06ea58:   vmovsd (%esp),%xmm0                 ;;  510:     __ movdbl(xmm0, Address(rsp, 0));
  0xee06ea5d:   add    $0x8,%esp                    ;;  511:     __ addptr(rsp, 2*wordSize);
  0xee06ea60:   pop    %edi                         ;;  515:   __ pop(rdi);                               // get return address
  0xee06ea61:   mov    %esi,%esp                    ;;  516:   __ mov(rsp, rsi);                          // set sp to sender sp
  0xee06ea63:   jmp    *%edi                        ;;  517:   __ jmp(rdi);
  0xee06ea65:   nop
  0xee06ea66:   nop
  0xee06ea67:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_math_tan)  [0xee06ea80, 0xee06eaa8]  40 bytes

--------------------------------------------------------------------------------
  0xee06ea80:   fldl   0x4(%esp)                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  377:   address entry_point = __ pc();
                                                    ;;  422:   __ fld_d(Address(rsp, 1*wordSize));
  0xee06ea84:   sub    $0x8,%esp                    ;;  445:         __ subptr(rsp, 2 * wordSize);
  0xee06ea87:   fstpl  (%esp)                       ;;  446:         __ fstp_d(Address(rsp, 0));
  0xee06ea8a:   call   0xee05ef94                   ;;  448:           __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dtan())));
  0xee06ea8f:   add    $0x8,%esp                    ;;  452:         __ addptr(rsp, 2 * wordSize);
  0xee06ea92:   sub    $0x8,%esp                    ;;  508:     __ subptr(rsp, 2*wordSize);
  0xee06ea95:   fstpl  (%esp)                       ;;  509:     __ fstp_d(Address(rsp, 0));
  0xee06ea98:   vmovsd (%esp),%xmm0                 ;;  510:     __ movdbl(xmm0, Address(rsp, 0));
  0xee06ea9d:   add    $0x8,%esp                    ;;  511:     __ addptr(rsp, 2*wordSize);
  0xee06eaa0:   pop    %edi                         ;;  515:   __ pop(rdi);                               // get return address
  0xee06eaa1:   mov    %esi,%esp                    ;;  516:   __ mov(rsp, rsi);                          // set sp to sender sp
  0xee06eaa3:   jmp    *%edi                        ;;  517:   __ jmp(rdi);
  0xee06eaa5:   nop
  0xee06eaa6:   nop
  0xee06eaa7:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_math_abs)  [0xee06eac0, 0xee06eadc]  28 bytes

--------------------------------------------------------------------------------
  0xee06eac0:   fldl   0x4(%esp)                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  377:   address entry_point = __ pc();
                                                    ;;  422:   __ fld_d(Address(rsp, 1*wordSize));
  0xee06eac4:   fabs                                ;;  458:         __ fabs();
  0xee06eac6:   sub    $0x8,%esp                    ;;  508:     __ subptr(rsp, 2*wordSize);
  0xee06eac9:   fstpl  (%esp)                       ;;  509:     __ fstp_d(Address(rsp, 0));
  0xee06eacc:   vmovsd (%esp),%xmm0                 ;;  510:     __ movdbl(xmm0, Address(rsp, 0));
  0xee06ead1:   add    $0x8,%esp                    ;;  511:     __ addptr(rsp, 2*wordSize);
  0xee06ead4:   pop    %edi                         ;;  515:   __ pop(rdi);                               // get return address
  0xee06ead5:   mov    %esi,%esp                    ;;  516:   __ mov(rsp, rsi);                          // set sp to sender sp
  0xee06ead7:   jmp    *%edi                        ;;  517:   __ jmp(rdi);
  0xee06ead9:   nop
  0xee06eada:   nop
  0xee06eadb:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_math_sqrt)  [0xee06eb00, 0xee06eb1c]  28 bytes

--------------------------------------------------------------------------------
  0xee06eb00:   fldl   0x4(%esp)                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  377:   address entry_point = __ pc();
                                                    ;;  422:   __ fld_d(Address(rsp, 1*wordSize));
  0xee06eb04:   fsqrt                               ;;  455:         __ fsqrt();
  0xee06eb06:   sub    $0x8,%esp                    ;;  508:     __ subptr(rsp, 2*wordSize);
  0xee06eb09:   fstpl  (%esp)                       ;;  509:     __ fstp_d(Address(rsp, 0));
  0xee06eb0c:   vmovsd (%esp),%xmm0                 ;;  510:     __ movdbl(xmm0, Address(rsp, 0));
  0xee06eb11:   add    $0x8,%esp                    ;;  511:     __ addptr(rsp, 2*wordSize);
  0xee06eb14:   pop    %edi                         ;;  515:   __ pop(rdi);                               // get return address
  0xee06eb15:   mov    %esi,%esp                    ;;  516:   __ mov(rsp, rsi);                          // set sp to sender sp
  0xee06eb17:   jmp    *%edi                        ;;  517:   __ jmp(rdi);
  0xee06eb19:   nop
  0xee06eb1a:   nop
  0xee06eb1b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_math_log)  [0xee06eb40, 0xee06eb68]  40 bytes

--------------------------------------------------------------------------------
  0xee06eb40:   fldl   0x4(%esp)                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  377:   address entry_point = __ pc();
                                                    ;;  422:   __ fld_d(Address(rsp, 1*wordSize));
  0xee06eb44:   sub    $0x8,%esp                    ;;  461:         __ subptr(rsp, 2 * wordSize);
  0xee06eb47:   fstpl  (%esp)                       ;;  462:         __ fstp_d(Address(rsp, 0));
  0xee06eb4a:   call   0xee05c5e9                   ;;  464:           __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dlog())));
  0xee06eb4f:   add    $0x8,%esp                    ;;  468:         __ addptr(rsp, 2 * wordSize);
  0xee06eb52:   sub    $0x8,%esp                    ;;  508:     __ subptr(rsp, 2*wordSize);
  0xee06eb55:   fstpl  (%esp)                       ;;  509:     __ fstp_d(Address(rsp, 0));
  0xee06eb58:   vmovsd (%esp),%xmm0                 ;;  510:     __ movdbl(xmm0, Address(rsp, 0));
  0xee06eb5d:   add    $0x8,%esp                    ;;  511:     __ addptr(rsp, 2*wordSize);
  0xee06eb60:   pop    %edi                         ;;  515:   __ pop(rdi);                               // get return address
  0xee06eb61:   mov    %esi,%esp                    ;;  516:   __ mov(rsp, rsi);                          // set sp to sender sp
  0xee06eb63:   jmp    *%edi                        ;;  517:   __ jmp(rdi);
  0xee06eb65:   nop
  0xee06eb66:   nop
  0xee06eb67:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_math_log10)  [0xee06eb80, 0xee06eba8]  40 bytes

--------------------------------------------------------------------------------
  0xee06eb80:   fldl   0x4(%esp)                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  377:   address entry_point = __ pc();
                                                    ;;  422:   __ fld_d(Address(rsp, 1*wordSize));
  0xee06eb84:   sub    $0x8,%esp                    ;;  471:         __ subptr(rsp, 2 * wordSize);
  0xee06eb87:   fstpl  (%esp)                       ;;  472:         __ fstp_d(Address(rsp, 0));
  0xee06eb8a:   call   0xee05c84f                   ;;  474:           __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dlog10())));
  0xee06eb8f:   add    $0x8,%esp                    ;;  478:         __ addptr(rsp, 2 * wordSize);
  0xee06eb92:   sub    $0x8,%esp                    ;;  508:     __ subptr(rsp, 2*wordSize);
  0xee06eb95:   fstpl  (%esp)                       ;;  509:     __ fstp_d(Address(rsp, 0));
  0xee06eb98:   vmovsd (%esp),%xmm0                 ;;  510:     __ movdbl(xmm0, Address(rsp, 0));
  0xee06eb9d:   add    $0x8,%esp                    ;;  511:     __ addptr(rsp, 2*wordSize);
  0xee06eba0:   pop    %edi                         ;;  515:   __ pop(rdi);                               // get return address
  0xee06eba1:   mov    %esi,%esp                    ;;  516:   __ mov(rsp, rsi);                          // set sp to sender sp
  0xee06eba3:   jmp    *%edi                        ;;  517:   __ jmp(rdi);
  0xee06eba5:   nop
  0xee06eba6:   nop
  0xee06eba7:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_math_exp)  [0xee06ebc0, 0xee06ebe8]  40 bytes

--------------------------------------------------------------------------------
  0xee06ebc0:   fldl   0x4(%esp)                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  377:   address entry_point = __ pc();
                                                    ;;  422:   __ fld_d(Address(rsp, 1*wordSize));
  0xee06ebc4:   sub    $0x8,%esp                    ;;  493:       __ subptr(rsp, 2*wordSize);
  0xee06ebc7:   fstpl  (%esp)                       ;;  494:       __ fstp_d(Address(rsp, 0));
  0xee06ebca:   call   0xee05c2fc                   ;;  496:         __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dexp())));
  0xee06ebcf:   add    $0x8,%esp                    ;;  500:       __ addptr(rsp, 2*wordSize);
  0xee06ebd2:   sub    $0x8,%esp                    ;;  508:     __ subptr(rsp, 2*wordSize);
  0xee06ebd5:   fstpl  (%esp)                       ;;  509:     __ fstp_d(Address(rsp, 0));
  0xee06ebd8:   vmovsd (%esp),%xmm0                 ;;  510:     __ movdbl(xmm0, Address(rsp, 0));
  0xee06ebdd:   add    $0x8,%esp                    ;;  511:     __ addptr(rsp, 2*wordSize);
  0xee06ebe0:   pop    %edi                         ;;  515:   __ pop(rdi);                               // get return address
  0xee06ebe1:   mov    %esi,%esp                    ;;  516:   __ mov(rsp, rsi);                          // set sp to sender sp
  0xee06ebe3:   jmp    *%edi                        ;;  517:   __ jmp(rdi);
  0xee06ebe5:   nop
  0xee06ebe6:   nop
  0xee06ebe7:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_math_pow)  [0xee06ec00, 0xee06ec30]  48 bytes

--------------------------------------------------------------------------------
  0xee06ec00:   fldl   0x4(%esp)                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  377:   address entry_point = __ pc();
                                                    ;;  422:   __ fld_d(Address(rsp, 1*wordSize));
  0xee06ec04:   fldl   0xc(%esp)                    ;;  481:       __ fld_d(Address(rsp, 3*wordSize)); // second argument
  0xee06ec08:   sub    $0x10,%esp                   ;;  482:       __ subptr(rsp, 4 * wordSize);
  0xee06ec0b:   fstpl  (%esp)                       ;;  483:       __ fstp_d(Address(rsp, 0));
  0xee06ec0e:   fstpl  0x8(%esp)                    ;;  484:       __ fstp_d(Address(rsp, 2 * wordSize));
  0xee06ec12:   call   0xee05caf4                   ;;  486:         __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dpow())));
  0xee06ec17:   add    $0x10,%esp                   ;;  490:       __ addptr(rsp, 4 * wordSize);
  0xee06ec1a:   sub    $0x8,%esp                    ;;  508:     __ subptr(rsp, 2*wordSize);
  0xee06ec1d:   fstpl  (%esp)                       ;;  509:     __ fstp_d(Address(rsp, 0));
  0xee06ec20:   vmovsd (%esp),%xmm0                 ;;  510:     __ movdbl(xmm0, Address(rsp, 0));
  0xee06ec25:   add    $0x8,%esp                    ;;  511:     __ addptr(rsp, 2*wordSize);
  0xee06ec28:   pop    %edi                         ;;  515:   __ pop(rdi);                               // get return address
  0xee06ec29:   mov    %esi,%esp                    ;;  516:   __ mov(rsp, rsi);                          // set sp to sender sp
  0xee06ec2b:   jmp    *%edi                        ;;  517:   __ jmp(rdi);
  0xee06ec2d:   nop
  0xee06ec2e:   nop
  0xee06ec2f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_math_fmaF)  [0xee06ec60, 0xee06ec7c]  28 bytes

--------------------------------------------------------------------------------
  0xee06ec60:   vmovss 0xc(%esp),%xmm2              ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  377:   address entry_point = __ pc();
                                                    ;;  411:     __ movflt(xmm2, Address(rsp, 3 * wordSize));
  0xee06ec66:   vmovss 0x8(%esp),%xmm1              ;;  412:     __ movflt(xmm1, Address(rsp, 2 * wordSize));
  0xee06ec6c:   vmovss 0x4(%esp),%xmm0              ;;  413:     __ movflt(xmm0, Address(rsp, 1 * wordSize));
  0xee06ec72:   vfmadd231ss %xmm2,%xmm1,%xmm0       ;;  414:     __ fmaf(xmm0, xmm1, xmm2, xmm0);
  0xee06ec77:   pop    %edi                         ;;  415:     __ pop(rdi);                               // get return address
  0xee06ec78:   mov    %esi,%esp                    ;;  416:     __ mov(rsp, rsi);                          // set sp to sender sp
  0xee06ec7a:   jmp    *%edi                        ;;  417:     __ jmp(rdi);
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_math_fmaD)  [0xee06eca0, 0xee06ecbc]  28 bytes

--------------------------------------------------------------------------------
  0xee06eca0:   vmovsd 0x14(%esp),%xmm2             ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  377:   address entry_point = __ pc();
                                                    ;;  398:     __ movdbl(xmm2, Address(rsp, 5 * wordSize));
  0xee06eca6:   vmovsd 0xc(%esp),%xmm1              ;;  399:     __ movdbl(xmm1, Address(rsp, 3 * wordSize));
  0xee06ecac:   vmovsd 0x4(%esp),%xmm0              ;;  400:     __ movdbl(xmm0, Address(rsp, 1 * wordSize));
  0xee06ecb2:   vfmadd231sd %xmm2,%xmm1,%xmm0       ;;  401:     __ fmad(xmm0, xmm1, xmm2, xmm0);
  0xee06ecb7:   pop    %edi                         ;;  402:     __ pop(rdi);                               // get return address
  0xee06ecb8:   mov    %esi,%esp                    ;;  403:     __ mov(rsp, rsi);                          // set sp to sender sp
  0xee06ecba:   jmp    *%edi                        ;;  404:     __ jmp(rdi);
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_ref_reference_get)  [0xee06ece0, 0xee06edc4]  228 bytes

--------------------------------------------------------------------------------
  0xee06ece0:   mov    0x4(%esp),%eax               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;;  683:   address entry = __ pc();
                                                    ;;  692:   __ movptr(rax, Address(rsp, wordSize));
  0xee06ece4:   test   %eax,%eax                    ;;  694:   __ testptr(rax, rax);
  0xee06ece6:   je     0xee06edbe                   ;;  695:   __ jcc(Assembler::zero, slow_path);
  0xee06ecec:   push   %esi                         ;;  704:   NOT_LP64(__ push(rsi));
  0xee06eced:   mov    0x8(%eax),%eax               ;;  708:   __ load_heap_oop(rax, field_address, /*tmp1*/ rbx, /*tmp_thread*/ rdx, ON_WEAK_OOP_REF);
  0xee06ecf0:   push   %edx
  0xee06ecf1:   push   %eax
  0xee06ecf2:   push   %edx
  0xee06ecf3:   push   %ecx
  0xee06ecf4:   call   0xf704a910 = Thread::current()
  0xee06ecf9:   pop    %ecx
  0xee06ecfa:   pop    %edx
  0xee06ecfb:   mov    %eax,%edx
  0xee06ecfd:   pop    %eax
  0xee06ecfe:   cmpb   $0x0,0x24(%edx)
  0xee06ed02:   je     0xee06edb6
  0xee06ed08:   cmp    $0x0,%eax
  0xee06ed0b:   je     0xee06edb6
  0xee06ed11:   mov    0x18(%edx),%ebx
  0xee06ed14:   cmp    $0x0,%ebx
  0xee06ed17:   je     0xee06ed2d
  0xee06ed1d:   sub    $0x4,%ebx
  0xee06ed20:   mov    %ebx,0x18(%edx)
  0xee06ed23:   add    0x20(%edx),%ebx
  0xee06ed26:   mov    %eax,(%ebx)
  0xee06ed28:   jmp    0xee06edb6
 ;; push_call_clobbered_registers start
  0xee06ed2d:   sub    $0x50,%esp
  0xee06ed30:   mov    %eax,(%esp)
  0xee06ed33:   mov    %ecx,0x4(%esp)
  0xee06ed37:   mov    %edx,0x8(%esp)
  0xee06ed3b:   vmovsd %xmm0,0x10(%esp)
  0xee06ed41:   vmovsd %xmm1,0x18(%esp)
  0xee06ed47:   vmovsd %xmm2,0x20(%esp)
  0xee06ed4d:   vmovsd %xmm3,0x28(%esp)
  0xee06ed53:   vmovsd %xmm4,0x30(%esp)
  0xee06ed59:   vmovsd %xmm5,0x38(%esp)
  0xee06ed5f:   vmovsd %xmm6,0x40(%esp)
  0xee06ed65:   vmovsd %xmm7,0x48(%esp)
 ;; push_call_clobbered_registers end
  0xee06ed6b:   push   %edx
  0xee06ed6c:   push   %eax
  0xee06ed6d:   call   0xf6a17f10 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0xee06ed72:   add    $0x8,%esp
 ;; pop_call_clobbered_registers start
  0xee06ed75:   vmovsd 0x48(%esp),%xmm7
  0xee06ed7b:   vmovsd 0x40(%esp),%xmm6
  0xee06ed81:   vmovsd 0x38(%esp),%xmm5
  0xee06ed87:   vmovsd 0x30(%esp),%xmm4
  0xee06ed8d:   vmovsd 0x28(%esp),%xmm3
  0xee06ed93:   vmovsd 0x20(%esp),%xmm2
  0xee06ed99:   vmovsd 0x18(%esp),%xmm1
  0xee06ed9f:   vmovsd 0x10(%esp),%xmm0
  0xee06eda5:   mov    0x8(%esp),%edx
  0xee06eda9:   mov    0x4(%esp),%ecx
  0xee06edad:   mov    (%esp),%eax
  0xee06edb0:   add    $0x50,%esp
  0xee06edb3:   vzeroupper 
 ;; pop_call_clobbered_registers end
  0xee06edb6:   pop    %edx
  0xee06edb7:   pop    %esi                         ;;  712:   NOT_LP64(__ pop(rsi));      // get sender sp
  0xee06edb8:   pop    %edi                         ;;  713:   __ pop(rdi);                // get return address
  0xee06edb9:   mov    %esi,%esp                    ;;  714:   __ mov(rsp, sender_sp);     // set sp to sender sp
  0xee06edbb:   jmp    *%edi                        ;;  715:   __ jmp(rdi);
  0xee06edbd:   ret                                 ;;  716:   __ ret(0);
  0xee06edbe:   jmp    0xee06dea0                   ;;  719:   __ bind(slow_path);
                                                    ;;  720:   __ jump_to_entry(Interpreter::entry_for_kind(Interpreter::zerolocals));
  0xee06edc3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = native)  [0xee06ede0, 0xee06f7b0]  2512 bytes

--------------------------------------------------------------------------------
  0xee06ede0:   mov    0x8(%ebx),%ecx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;;  790:   address entry_point = __ pc();
                                                    ;;  799:   __ movptr(rcx, constMethod);
  0xee06ede3:   movzwl 0x24(%ecx),%ecx              ;;  800:   __ load_unsigned_short(rcx, size_of_parameters);
  0xee06ede7:   pop    %eax                         ;;  809:   __ pop(rax);                                       // get return address
  0xee06ede8:   lea    -0x4(%esp,%ecx,4),%edi       ;;  814:   __ lea(rlocals, Address(rsp, rcx, Interpreter::stackElementScale(), -wordSize));
  0xee06edec:   push   $0x0                         ;;  818:   __ push(NULL_WORD);
  0xee06edf1:   push   $0x0                         ;;  821:   __ push(NULL_WORD);
  0xee06edf6:   push   %eax                         ;;  621:   __ push(rax);        // save return address
  0xee06edf7:   push   %ebp                         ;;  622:   __ enter();          // save old & set new rbp
  0xee06edf8:   mov    %esp,%ebp
  0xee06edfa:   push   %esi                         ;;  623:   __ push(rbcp);        // set sender sp
  0xee06edfb:   push   $0x0                         ;;  624:   __ push(NULL_WORD); // leave last_sp as null
  0xee06ee00:   mov    0x8(%ebx),%esi               ;;  625:   __ movptr(rbcp, Address(rbx, Method::const_offset()));      // get ConstMethod*
  0xee06ee03:   lea    0x2c(%esi),%esi              ;;  626:   __ lea(rbcp, Address(rbcp, ConstMethod::codes_offset())); // get codebase
  0xee06ee06:   push   %ebx                         ;;  627:   __ push(rbx);        // save Method*
  0xee06ee07:   mov    0x8(%ebx),%edx               ;;  629:   __ load_mirror(rdx, rbx, rscratch2);
  0xee06ee0a:   mov    0x8(%edx),%edx
  0xee06ee0d:   mov    0x10(%edx),%edx
  0xee06ee10:   mov    0x44(%edx),%edx
  0xee06ee13:   mov    (%edx),%edx
  0xee06ee15:   push   %edx                         ;;  630:   __ push(rdx);
  0xee06ee16:   mov    0xc(%ebx),%edx               ;;  633:     __ movptr(rdx, Address(rbx, in_bytes(Method::method_data_offset())));
  0xee06ee19:   test   %edx,%edx                    ;;  634:     __ testptr(rdx, rdx);
  0xee06ee1b:   je     0xee06ee27                   ;;  635:     __ jcc(Assembler::zero, method_data_continue);
  0xee06ee21:   add    $0xe4,%edx                   ;;  636:     __ addptr(rdx, in_bytes(MethodData::data_offset()));
  0xee06ee27:   push   %edx                         ;;  637:     __ bind(method_data_continue);
                                                    ;;  638:     __ push(rdx);      // set the mdp (method data pointer)
  0xee06ee28:   mov    0x8(%ebx),%edx               ;;  643:   __ movptr(rdx, Address(rbx, Method::const_offset()));
  0xee06ee2b:   mov    0x8(%edx),%edx               ;;  644:   __ movptr(rdx, Address(rdx, ConstMethod::constants_offset()));
  0xee06ee2e:   mov    0xc(%edx),%edx               ;;  645:   __ movptr(rdx, Address(rdx, ConstantPool::cache_offset_in_bytes()));
  0xee06ee31:   push   %edx                         ;;  646:   __ push(rdx); // set constant pool cache
  0xee06ee32:   mov    %edi,%eax                    ;;  648:   __ movptr(rax, rlocals);
  0xee06ee34:   sub    %ebp,%eax                    ;;  649:   __ subptr(rax, rbp);
  0xee06ee36:   shr    $0x2,%eax                    ;;  650:   __ shrptr(rax, Interpreter::logStackElementSize);  // rax = rlocals - fp();
  0xee06ee39:   push   %eax                         ;;  651:   __ push(rax); // set relativized rlocals, see frame::interpreter_frame_locals()
  0xee06ee3a:   push   $0x0                         ;;  654:     __ push(0); // no bcp
  0xee06ee3f:   push   $0x0                         ;;  658:   __ push(0); // reserve word for pointer to expression stack bottom
  0xee06ee44:   mov    %esp,(%esp)                  ;;  659:   __ movptr(Address(rsp, 0), rsp); // set expression stack bottom
  0xee06ee47:   mov    0x18(%ebx),%eax              ;;  828:   __ movl(rax, access_flags);
  0xee06ee4a:   test   $0x100,%eax                  ;;  831:     __ testl(rax, JVM_ACC_NATIVE);
  0xee06ee4f:   jne    0xee06ee66                   ;;  832:     __ jcc(Assembler::notZero, L);
  0xee06ee55:   push   $0xf7924294                  ;;  833:     __ stop("tried to execute non-native method as native");
  0xee06ee5a:   call   0xee06ee5f
  0xee06ee5f:   pusha  
  0xee06ee60:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06ee65:   hlt    
  0xee06ee66:   test   $0x400,%eax                  ;;  834:     __ bind(L);
                                                    ;;  838:     __ testl(rax, JVM_ACC_ABSTRACT);
  0xee06ee6b:   je     0xee06ee82                   ;;  839:     __ jcc(Assembler::zero, L);
  0xee06ee71:   push   $0xf79242c4                  ;;  840:     __ stop("tried to execute abstract method in interpreter");
  0xee06ee76:   call   0xee06ee7b
  0xee06ee7b:   pusha  
  0xee06ee7c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06ee81:   hlt    
  0xee06ee82:   push   %edx                         ;;  841:     __ bind(L);
                                                    ;;  852:   NOT_LP64(__ get_thread(thread1));
  0xee06ee83:   push   %ecx
  0xee06ee84:   call   0xf704a910 = Thread::current()
  0xee06ee89:   pop    %ecx
  0xee06ee8a:   pop    %edx
  0xee06ee8b:   movb   $0x1,0x2b1(%eax)             ;;  855:   __ movbool(do_not_unlock_if_synchronized, true);
  0xee06ee92:   mov    0xc(%ebx),%eax               ;;  400:     __ movptr(rax, Address(rbx, Method::method_data_offset()));
  0xee06ee95:   test   %eax,%eax                    ;;  401:     __ testptr(rax, rax);
  0xee06ee97:   je     0xee06eeb9                   ;;  402:     __ jccb(Assembler::zero, no_mdo);
  0xee06ee99:   mov    0xb4(%eax),%ecx              ;;  407:     __ increment_mask_and_jump(mdo_invocation_counter, mask, rcx, overflow);
  0xee06ee9f:   add    $0x2,%ecx
  0xee06eea2:   mov    %ecx,0xb4(%eax)
  0xee06eea8:   and    0xc8(%eax),%ecx
  0xee06eeae:   je     0xee06f6f7
  0xee06eeb4:   jmp    0xee06ef8d                   ;;  408:     __ jmp(done);
  0xee06eeb9:   mov    0x10(%ebx),%eax              ;;  410:   __ bind(no_mdo);
                                                    ;;  415:   __ get_method_counters(rbx, rax, done);
  0xee06eebc:   test   %eax,%eax
  0xee06eebe:   jne    0xee06ef7b
  0xee06eec4:   call   0xee06eece
  0xee06eec9:   jmp    0xee06ef70
  0xee06eece:   push   %ebx
  0xee06eecf:   lea    0x8(%esp),%eax
  0xee06eed3:   mov    %esi,-0x20(%ebp)
  0xee06eed6:   cmpl   $0x0,-0x8(%ebp)
  0xee06eeda:   je     0xee06eef1
  0xee06eee0:   push   $0xf78569d8
  0xee06eee5:   call   0xee06eeea
  0xee06eeea:   pusha  
  0xee06eeeb:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06eef0:   hlt    
  0xee06eef1:   push   %eax
  0xee06eef2:   push   %edx
  0xee06eef3:   push   %ecx
  0xee06eef4:   call   0xf704a910 = Thread::current()
  0xee06eef9:   pop    %ecx
  0xee06eefa:   pop    %edx
  0xee06eefb:   mov    %eax,%edi
  0xee06eefd:   pop    %eax
  0xee06eefe:   push   %edi
  0xee06eeff:   vzeroupper 
  0xee06ef02:   mov    %ebp,0x230(%edi)
  0xee06ef08:   mov    %eax,0x228(%edi)
  0xee06ef0e:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee06ef13:   add    $0x8,%esp
  0xee06ef16:   push   %eax
  0xee06ef17:   push   %edx
  0xee06ef18:   push   %ecx
  0xee06ef19:   call   0xf704a910 = Thread::current()
  0xee06ef1e:   pop    %ecx
  0xee06ef1f:   pop    %edx
  0xee06ef20:   cmp    %eax,%edi
  0xee06ef22:   je     0xee06ef39
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06ef28:   push   $0xf78b5a48
  0xee06ef2d:   call   0xee06ef32
  0xee06ef32:   pusha  
  0xee06ef33:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06ef38:   hlt    
  0xee06ef39:   pop    %eax
  0xee06ef3a:   movl   $0x0,0x228(%edi)
  0xee06ef44:   movl   $0x0,0x230(%edi)
  0xee06ef4e:   movl   $0x0,0x22c(%edi)
  0xee06ef58:   vzeroupper 
  0xee06ef5b:   cmpl   $0x0,0x4(%edi)
  0xee06ef5f:   jne    0xee05bbe0
  0xee06ef65:   mov    -0x20(%ebp),%esi
  0xee06ef68:   mov    -0x1c(%ebp),%edi
  0xee06ef6b:   lea    0x0(%ebp,%edi,4),%edi
  0xee06ef6f:   ret    
  0xee06ef70:   mov    0x10(%ebx),%eax
  0xee06ef73:   test   %eax,%eax
  0xee06ef75:   je     0xee06ef8d
  0xee06ef7b:   mov    0x8(%eax),%ecx               ;;  417:   __ increment_mask_and_jump(invocation_counter, mask, rcx, overflow);
  0xee06ef7e:   add    $0x2,%ecx
  0xee06ef81:   mov    %ecx,0x8(%eax)
  0xee06ef84:   and    0x1c(%eax),%ecx
  0xee06ef87:   je     0xee06f6f7
  0xee06ef8d:   push   %esi                         ;;  418:   __ bind(done);
                                                    ;;  864:   __ bind(continue_after_compile);
                                                    ;;  740:   __ push(thread);
  0xee06ef8e:   push   %eax                         ;;  741:   __ get_thread(thread);
  0xee06ef8f:   push   %edx
  0xee06ef90:   push   %ecx
  0xee06ef91:   call   0xf704a910 = Thread::current()
  0xee06ef96:   pop    %ecx
  0xee06ef97:   pop    %edx
  0xee06ef98:   mov    %eax,%esi
  0xee06ef9a:   pop    %eax
  0xee06ef9b:   cmpl   $0x0,0x2c8(%esi)             ;;  746:   __ cmpptr(Address(thread, JavaThread::shadow_zone_safe_limit()), NULL_WORD);
  0xee06efa2:   jne    0xee06efb9                   ;;  747:   __ jcc(Assembler::notEqual, L_good_limit);
  0xee06efa8:   push   $0xf7924238                  ;;  748:   __ stop("shadow zone safe limit is not initialized");
  0xee06efad:   call   0xee06efb2
  0xee06efb2:   pusha  
  0xee06efb3:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06efb8:   hlt    
  0xee06efb9:   cmpl   $0x0,0x2cc(%esi)             ;;  749:   __ bind(L_good_limit);
                                                    ;;  752:   __ cmpptr(Address(thread, JavaThread::shadow_zone_growth_watermark()), NULL_WORD);
  0xee06efc0:   jne    0xee06efd7                   ;;  753:   __ jcc(Assembler::notEqual, L_good_watermark);
  0xee06efc6:   push   $0xf7924264                  ;;  754:   __ stop("shadow zone growth watermark is not initialized");
  0xee06efcb:   call   0xee06efd0
  0xee06efd0:   pusha  
  0xee06efd1:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06efd6:   hlt    
  0xee06efd7:   cmp    0x2cc(%esi),%esp             ;;  755:   __ bind(L_good_watermark);
                                                    ;;  760:   __ cmpptr(rsp, Address(thread, JavaThread::shadow_zone_growth_watermark()));
  0xee06efdd:   ja     0xee06f030                   ;;  761:   __ jcc(Assembler::above, L_done);
  0xee06efe3:   mov    %eax,-0x1000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06efea:   mov    %eax,-0x2000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06eff1:   mov    %eax,-0x3000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06eff8:   mov    %eax,-0x4000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06efff:   mov    %eax,-0x5000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06f006:   mov    %eax,-0x6000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06f00d:   mov    %eax,-0x7000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06f014:   mov    %eax,-0x8000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06f01b:   mov    %eax,-0x9000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06f022:   cmp    0x2c8(%esi),%esp             ;;  769:   __ cmpptr(rsp, Address(thread, JavaThread::shadow_zone_safe_limit()));
  0xee06f028:   jbe    0xee06f030                   ;;  770:   __ jccb(Assembler::belowEqual, L_done);
  0xee06f02a:   mov    %esp,0x2cc(%esi)             ;;  771:   __ movptr(Address(thread, JavaThread::shadow_zone_growth_watermark()), rsp);
  0xee06f030:   pop    %esi                         ;;  773:   __ bind(L_done);
                                                    ;;  776:   __ pop(thread);
  0xee06f031:   push   %edx                         ;;  869:   NOT_LP64(__ get_thread(thread1));
  0xee06f032:   push   %ecx
  0xee06f033:   call   0xf704a910 = Thread::current()
  0xee06f038:   pop    %ecx
  0xee06f039:   pop    %edx
  0xee06f03a:   movb   $0x0,0x2b1(%eax)             ;;  870:   __ movbool(do_not_unlock_if_synchronized, false);
  0xee06f041:   mov    0x18(%ebx),%eax              ;;  882:       __ movl(rax, access_flags);
  0xee06f044:   test   $0x20,%al                    ;;  883:       __ testl(rax, JVM_ACC_SYNCHRONIZED);
  0xee06f046:   je     0xee06f05d                   ;;  884:       __ jcc(Assembler::zero, L);
  0xee06f04c:   push   $0xf792456b                  ;;  885:       __ stop("method needs synchronization");
  0xee06f051:   call   0xee06f056
  0xee06f056:   pusha  
  0xee06f057:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f05c:   hlt    
  0xee06f05d:   mov    -0x24(%ebp),%eax             ;;  886:       __ bind(L);
                                                    ;;  897:     __ movptr(rax, monitor_block_top);
  0xee06f060:   cmp    %esp,%eax                    ;;  898:     __ cmpptr(rax, rsp);
  0xee06f062:   je     0xee06f079                   ;;  899:     __ jcc(Assembler::equal, L);
  0xee06f068:   push   $0xf79242f4                  ;;  900:     __ stop("broken stack frame setup in interpreter 5");
  0xee06f06d:   call   0xee06f072
  0xee06f072:   pusha  
  0xee06f073:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f078:   hlt    
  0xee06f079:   cmpb   $0x0,0xf7ca3a0d              ;;  901:     __ bind(L);
                                                    ;;  906:   __ notify_method_entry();
  0xee06f080:   je     0xee06f0bb
  0xee06f086:   push   %eax
  0xee06f087:   push   %edx
  0xee06f088:   push   %ecx
  0xee06f089:   call   0xf704a910 = Thread::current()
  0xee06f08e:   pop    %ecx
  0xee06f08f:   pop    %edx
  0xee06f090:   mov    %eax,%ecx
  0xee06f092:   pop    %eax
  0xee06f093:   mov    -0xc(%ebp),%ebx
  0xee06f096:   push   %ebx
  0xee06f097:   push   %ecx
  0xee06f098:   cmpl   $0x0,-0x8(%ebp)
  0xee06f09c:   je     0xee06f0b3
  0xee06f0a2:   push   $0xf785694c
  0xee06f0a7:   call   0xee06f0ac
  0xee06f0ac:   pusha  
  0xee06f0ad:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f0b2:   hlt    
  0xee06f0b3:   call   0xf739a630 = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0xee06f0b8:   add    $0x8,%esp
  0xee06f0bb:   mov    -0xc(%ebp),%ebx              ;;  914:   __ get_method(method);
  0xee06f0be:   mov    0x8(%ebx),%ecx               ;;  915:   __ movptr(t, Address(method, Method::const_offset()));
  0xee06f0c1:   movzwl 0x24(%ecx),%ecx              ;;  916:   __ load_unsigned_short(t, Address(t, ConstMethod::size_of_parameters_offset()));
  0xee06f0c5:   shl    $0x2,%ecx                    ;;  919:   __ shlptr(t, Interpreter::logStackElementSize); // Convert parameter count to bytes.
  0xee06f0c8:   add    $0x8,%ecx                    ;;  920:   __ addptr(t, 2*wordSize);     // allocate two more slots for JNIEnv and possible mirror
  0xee06f0cb:   sub    %ecx,%esp                    ;;  921:   __ subptr(rsp, t);
  0xee06f0cd:   and    $0xfffffff0,%esp             ;;  922:   __ andptr(rsp, -(StackAlignmentInBytes)); // gcc needs 16 byte aligned stacks to do XMM intrinsics
  0xee06f0d0:   mov    0x48(%ebx),%ecx              ;;  934:     __ movptr(t, Address(method, Method::signature_handler_offset()));
  0xee06f0d3:   test   %ecx,%ecx                    ;;  935:     __ testptr(t, t);
  0xee06f0d5:   jne    0xee06f18d                   ;;  936:     __ jcc(Assembler::notZero, L);
  0xee06f0db:   call   0xee06f0e5                   ;;  937:     __ call_VM(noreg,
  0xee06f0e0:   jmp    0xee06f187
  0xee06f0e5:   push   %ebx
  0xee06f0e6:   lea    0x8(%esp),%eax
  0xee06f0ea:   mov    %esi,-0x20(%ebp)
  0xee06f0ed:   cmpl   $0x0,-0x8(%ebp)
  0xee06f0f1:   je     0xee06f108
  0xee06f0f7:   push   $0xf78569d8
  0xee06f0fc:   call   0xee06f101
  0xee06f101:   pusha  
  0xee06f102:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f107:   hlt    
  0xee06f108:   push   %eax
  0xee06f109:   push   %edx
  0xee06f10a:   push   %ecx
  0xee06f10b:   call   0xf704a910 = Thread::current()
  0xee06f110:   pop    %ecx
  0xee06f111:   pop    %edx
  0xee06f112:   mov    %eax,%edi
  0xee06f114:   pop    %eax
  0xee06f115:   push   %edi
  0xee06f116:   vzeroupper 
  0xee06f119:   mov    %ebp,0x230(%edi)
  0xee06f11f:   mov    %eax,0x228(%edi)
  0xee06f125:   call   0xf6c173f0 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0xee06f12a:   add    $0x8,%esp
  0xee06f12d:   push   %eax
  0xee06f12e:   push   %edx
  0xee06f12f:   push   %ecx
  0xee06f130:   call   0xf704a910 = Thread::current()
  0xee06f135:   pop    %ecx
  0xee06f136:   pop    %edx
  0xee06f137:   cmp    %eax,%edi
  0xee06f139:   je     0xee06f150
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06f13f:   push   $0xf78b5a48
  0xee06f144:   call   0xee06f149
  0xee06f149:   pusha  
  0xee06f14a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f14f:   hlt    
  0xee06f150:   pop    %eax
  0xee06f151:   movl   $0x0,0x228(%edi)
  0xee06f15b:   movl   $0x0,0x230(%edi)
  0xee06f165:   movl   $0x0,0x22c(%edi)
  0xee06f16f:   vzeroupper 
  0xee06f172:   cmpl   $0x0,0x4(%edi)
  0xee06f176:   jne    0xee05bbe0
  0xee06f17c:   mov    -0x20(%ebp),%esi
  0xee06f17f:   mov    -0x1c(%ebp),%edi
  0xee06f182:   lea    0x0(%ebp,%edi,4),%edi
  0xee06f186:   ret    
  0xee06f187:   mov    -0xc(%ebp),%ebx              ;;  941:     __ get_method(method);
  0xee06f18a:   mov    0x48(%ebx),%ecx              ;;  942:     __ movptr(t, Address(method, Method::signature_handler_offset()));
  0xee06f18d:   call   *%ecx                        ;;  943:     __ bind(L);
                                                    ;;  958:   __ call(t);
  0xee06f18f:   mov    -0xc(%ebp),%ebx              ;;  959:   __ get_method(method);        // slow path can do a GC, reload RBX
  0xee06f192:   mov    %eax,0xc(%ebp)               ;;  964:   __ movptr(Address(rbp,
  0xee06f195:   mov    0x18(%ebx),%ecx              ;;  971:     __ movl(t, Address(method, Method::access_flags_offset()));
  0xee06f198:   test   $0x8,%cl                     ;;  972:     __ testl(t, JVM_ACC_STATIC);
  0xee06f19b:   je     0xee06f1b9                   ;;  973:     __ jcc(Assembler::zero, L);
  0xee06f1a1:   mov    0x8(%ebx),%ecx               ;;  975:     __ load_mirror(t, method, rax);
  0xee06f1a4:   mov    0x8(%ecx),%ecx
  0xee06f1a7:   mov    0x10(%ecx),%ecx
  0xee06f1aa:   mov    0x44(%ecx),%ecx
  0xee06f1ad:   mov    (%ecx),%ecx
  0xee06f1af:   mov    %ecx,0x8(%ebp)               ;;  977:     __ movptr(Address(rbp, frame::interpreter_frame_oop_temp_offset * wordSize),
  0xee06f1b2:   lea    0x8(%ebp),%ecx               ;;  981:     __ lea(t, Address(rbp, frame::interpreter_frame_oop_temp_offset * wordSize));
  0xee06f1b5:   mov    %ecx,0x4(%esp)               ;;  982:     __ movptr(Address(rsp, wordSize), t);
  0xee06f1b9:   mov    0x44(%ebx),%eax              ;;  987:     __ bind(L);
                                                    ;;  993:     __ movptr(rax, Address(method, Method::native_function_offset()));
  0xee06f1bc:   cmp    $0xf73980b0,%eax             ;;  995:     __ cmpptr(rax, unsatisfied.addr(), rscratch1);
  0xee06f1c2:   jne    0xee06f27a                   ;;  996:     __ jcc(Assembler::notEqual, L);
  0xee06f1c8:   call   0xee06f1d2                   ;;  997:     __ call_VM(noreg,
  0xee06f1cd:   jmp    0xee06f274
  0xee06f1d2:   push   %ebx
  0xee06f1d3:   lea    0x8(%esp),%eax
  0xee06f1d7:   mov    %esi,-0x20(%ebp)
  0xee06f1da:   cmpl   $0x0,-0x8(%ebp)
  0xee06f1de:   je     0xee06f1f5
  0xee06f1e4:   push   $0xf78569d8
  0xee06f1e9:   call   0xee06f1ee
  0xee06f1ee:   pusha  
  0xee06f1ef:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f1f4:   hlt    
  0xee06f1f5:   push   %eax
  0xee06f1f6:   push   %edx
  0xee06f1f7:   push   %ecx
  0xee06f1f8:   call   0xf704a910 = Thread::current()
  0xee06f1fd:   pop    %ecx
  0xee06f1fe:   pop    %edx
  0xee06f1ff:   mov    %eax,%edi
  0xee06f201:   pop    %eax
  0xee06f202:   push   %edi
  0xee06f203:   vzeroupper 
  0xee06f206:   mov    %ebp,0x230(%edi)
  0xee06f20c:   mov    %eax,0x228(%edi)
  0xee06f212:   call   0xf6c173f0 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0xee06f217:   add    $0x8,%esp
  0xee06f21a:   push   %eax
  0xee06f21b:   push   %edx
  0xee06f21c:   push   %ecx
  0xee06f21d:   call   0xf704a910 = Thread::current()
  0xee06f222:   pop    %ecx
  0xee06f223:   pop    %edx
  0xee06f224:   cmp    %eax,%edi
  0xee06f226:   je     0xee06f23d
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06f22c:   push   $0xf78b5a48
  0xee06f231:   call   0xee06f236
  0xee06f236:   pusha  
  0xee06f237:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f23c:   hlt    
  0xee06f23d:   pop    %eax
  0xee06f23e:   movl   $0x0,0x228(%edi)
  0xee06f248:   movl   $0x0,0x230(%edi)
  0xee06f252:   movl   $0x0,0x22c(%edi)
  0xee06f25c:   vzeroupper 
  0xee06f25f:   cmpl   $0x0,0x4(%edi)
  0xee06f263:   jne    0xee05bbe0
  0xee06f269:   mov    -0x20(%ebp),%esi
  0xee06f26c:   mov    -0x1c(%ebp),%edi
  0xee06f26f:   lea    0x0(%ebp,%edi,4),%edi
  0xee06f273:   ret    
  0xee06f274:   mov    -0xc(%ebp),%ebx              ;; 1001:     __ get_method(method);
  0xee06f277:   mov    0x44(%ebx),%eax              ;; 1002:     __ movptr(rax, Address(method, Method::native_function_offset()));
  0xee06f27a:   push   %eax                         ;; 1003:     __ bind(L);
                                                    ;; 1008:    __ get_thread(thread);
  0xee06f27b:   push   %edx
  0xee06f27c:   push   %ecx
  0xee06f27d:   call   0xf704a910 = Thread::current()
  0xee06f282:   pop    %ecx
  0xee06f283:   pop    %edx
  0xee06f284:   mov    %eax,%edi
  0xee06f286:   pop    %eax
  0xee06f287:   lea    0x238(%edi),%ecx             ;; 1009:    __ lea(t, Address(thread, JavaThread::jni_environment_offset()));
  0xee06f28d:   mov    %ecx,(%esp)                  ;; 1010:    __ movptr(Address(rsp, 0), t);
  0xee06f290:   vzeroupper                          ;; 1015:    __ set_last_Java_frame(thread, noreg, rbp, __ pc(), noreg);
  0xee06f293:   mov    %ebp,0x230(%edi)
  0xee06f299:   movl   $0xee06f290,0x22c(%edi)
  0xee06f2a3:   mov    %esp,0x228(%edi)
  0xee06f2a9:   mov    0x284(%edi),%ecx             ;; 1028:     __ movl(t, Address(thread, JavaThread::thread_state_offset()));
  0xee06f2af:   cmp    $0x8,%ecx                    ;; 1029:     __ cmpl(t, _thread_in_Java);
  0xee06f2b2:   je     0xee06f2c9                   ;; 1030:     __ jcc(Assembler::equal, L);
  0xee06f2b8:   push   $0xf7924408                  ;; 1031:     __ stop("Wrong thread state in native stub");
  0xee06f2bd:   call   0xee06f2c2
  0xee06f2c2:   pusha  
  0xee06f2c3:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f2c8:   hlt    
  0xee06f2c9:   movl   $0x4,0x284(%edi)             ;; 1032:     __ bind(L);
                                                    ;; 1038:   __ movl(Address(thread, JavaThread::thread_state_offset()),
  0xee06f2d3:   call   *%eax                        ;; 1042:   __ call(rax);
  0xee06f2d5:   vzeroupper                          ;; 1047:   __ restore_cpu_control_state_after_jni(rscratch1);
  0xee06f2d8:   cmpl   $0xee06c798,0xc(%ebp)        ;; 1069:     __ cmpptr(Address(rbp, (frame::interpreter_frame_oop_temp_offset + 1)*wordSize),
  0xee06f2df:   je     0xee06f2f2                   ;; 1071:     __ jcc(Assembler::equal, push_double);
  0xee06f2e5:   cmpl   $0xee06c7a9,0xc(%ebp)        ;; 1072:     __ cmpptr(Address(rbp, (frame::interpreter_frame_oop_temp_offset + 1)*wordSize),
  0xee06f2ec:   jne    0xee06f2f8                   ;; 1074:     __ jcc(Assembler::notEqual, L);
  0xee06f2f2:   sub    $0x8,%esp                    ;; 1075:     __ bind(push_double);
                                                    ;; 1076:     __ push_d(); // FP values are returned using the FPU, so push FPU contents (even if UseSSE > 0).
  0xee06f2f5:   fstpl  (%esp)
  0xee06f2f8:   push   %edx                         ;; 1077:     __ bind(L);
                                                    ;; 1083:   __ push(ltos);
  0xee06f2f9:   push   %eax
  0xee06f2fa:   push   %eax                         ;; 1086:   NOT_LP64(__ get_thread(thread));
  0xee06f2fb:   push   %edx
  0xee06f2fc:   push   %ecx
  0xee06f2fd:   call   0xf704a910 = Thread::current()
  0xee06f302:   pop    %ecx
  0xee06f303:   pop    %edx
  0xee06f304:   mov    %eax,%edi
  0xee06f306:   pop    %eax
  0xee06f307:   movl   $0x5,0x284(%edi)             ;; 1087:   __ movl(Address(thread, JavaThread::thread_state_offset()),
  0xee06f311:   lock addl $0x0,-0x40(%esp)          ;; 1092:     __ membar(Assembler::Membar_mask_bits(
  0xee06f317:   cmp    0x288(%edi),%ebp             ;; 1108:     __ safepoint_poll(slow_path, thread, true /* at_return */, false /* in_nmethod */);
  0xee06f31d:   ja     0xee06f330
  0xee06f323:   cmpl   $0x0,0x280(%edi)             ;; 1110:     __ cmpl(Address(thread, JavaThread::suspend_flags_offset()), 0);
  0xee06f32a:   je     0xee06f346                   ;; 1111:     __ jcc(Assembler::equal, Continue);
  0xee06f330:   push   %edi                         ;; 1112:     __ bind(slow_path);
                                                    ;; 1122:     __ push(thread);
  0xee06f331:   call   0xf6c6d080 = JavaThread::check_special_condition_for_native_trans(JavaThread*)
                                                    ;; 1123:     __ call(RuntimeAddress(CAST_FROM_FN_PTR(address,
  0xee06f336:   add    $0x4,%esp                    ;; 1125:     __ increment(rsp, wordSize);
  0xee06f339:   push   %eax                         ;; 1126:     __ get_thread(thread);
  0xee06f33a:   push   %edx
  0xee06f33b:   push   %ecx
  0xee06f33c:   call   0xf704a910 = Thread::current()
  0xee06f341:   pop    %ecx
  0xee06f342:   pop    %edx
  0xee06f343:   mov    %eax,%edi
  0xee06f345:   pop    %eax
  0xee06f346:   movl   $0x8,0x284(%edi)             ;; 1136:     __ bind(Continue);
                                                    ;; 1140:   __ movl(Address(thread, JavaThread::thread_state_offset()), _thread_in_Java);
  0xee06f350:   movl   $0x0,0x228(%edi)             ;; 1143:   __ reset_last_Java_frame(thread, true);
  0xee06f35a:   movl   $0x0,0x230(%edi)
  0xee06f364:   movl   $0x0,0x22c(%edi)
  0xee06f36e:   vzeroupper 
  0xee06f371:   mov    0x270(%edi),%ecx             ;; 1151:   __ movptr(t, Address(thread, JavaThread::active_handles_offset()));
  0xee06f377:   movl   $0x0,0x80(%ecx)              ;; 1152:   __ movl(Address(t, JNIHandleBlock::top_offset_in_bytes()), NULL_WORD);
  0xee06f381:   mov    $0xee06c7b4,%ecx             ;; 1159:     __ lea(t, ExternalAddress(AbstractInterpreter::result_handler(T_OBJECT)));
  0xee06f386:   cmp    0xc(%ebp),%ecx               ;; 1160:     __ cmpptr(t, Address(rbp, frame::interpreter_frame_result_handler_offset*wordSize));
  0xee06f389:   jne    0xee06f487                   ;; 1161:     __ jcc(Assembler::notEqual, no_oop);
  0xee06f38f:   pop    %eax                         ;; 1163:     __ pop(ltos);
  0xee06f390:   pop    %edx
  0xee06f391:   test   %eax,%eax                    ;; 1165:     __ resolve_jobject(rax /* value */,
  0xee06f393:   je     0xee06f482
  0xee06f399:   test   $0x3,%al
  0xee06f39b:   jne    0xee06f3a8
  0xee06f3a1:   mov    (%eax),%eax
  0xee06f3a3:   jmp    0xee06f482
  0xee06f3a8:   test   $0x1,%al
  0xee06f3aa:   jne    0xee06f3b8
  0xee06f3b0:   mov    -0x2(%eax),%eax
  0xee06f3b3:   jmp    0xee06f482
  0xee06f3b8:   mov    -0x1(%eax),%eax
  0xee06f3bb:   push   %edi
  0xee06f3bc:   push   %eax
  0xee06f3bd:   push   %edx
  0xee06f3be:   push   %ecx
  0xee06f3bf:   call   0xf704a910 = Thread::current()
  0xee06f3c4:   pop    %ecx
  0xee06f3c5:   pop    %edx
  0xee06f3c6:   mov    %eax,%edi
  0xee06f3c8:   pop    %eax
  0xee06f3c9:   cmpb   $0x0,0x24(%edi)
  0xee06f3cd:   je     0xee06f481
  0xee06f3d3:   cmp    $0x0,%eax
  0xee06f3d6:   je     0xee06f481
  0xee06f3dc:   mov    0x18(%edi),%ecx
  0xee06f3df:   cmp    $0x0,%ecx
  0xee06f3e2:   je     0xee06f3f8
  0xee06f3e8:   sub    $0x4,%ecx
  0xee06f3eb:   mov    %ecx,0x18(%edi)
  0xee06f3ee:   add    0x20(%edi),%ecx
  0xee06f3f1:   mov    %eax,(%ecx)
  0xee06f3f3:   jmp    0xee06f481
 ;; push_call_clobbered_registers start
  0xee06f3f8:   sub    $0x50,%esp
  0xee06f3fb:   mov    %eax,(%esp)
  0xee06f3fe:   mov    %ecx,0x4(%esp)
  0xee06f402:   mov    %edx,0x8(%esp)
  0xee06f406:   vmovsd %xmm0,0x10(%esp)
  0xee06f40c:   vmovsd %xmm1,0x18(%esp)
  0xee06f412:   vmovsd %xmm2,0x20(%esp)
  0xee06f418:   vmovsd %xmm3,0x28(%esp)
  0xee06f41e:   vmovsd %xmm4,0x30(%esp)
  0xee06f424:   vmovsd %xmm5,0x38(%esp)
  0xee06f42a:   vmovsd %xmm6,0x40(%esp)
  0xee06f430:   vmovsd %xmm7,0x48(%esp)
 ;; push_call_clobbered_registers end
  0xee06f436:   push   %edi
  0xee06f437:   push   %eax
  0xee06f438:   call   0xf6a17f10 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0xee06f43d:   add    $0x8,%esp
 ;; pop_call_clobbered_registers start
  0xee06f440:   vmovsd 0x48(%esp),%xmm7
  0xee06f446:   vmovsd 0x40(%esp),%xmm6
  0xee06f44c:   vmovsd 0x38(%esp),%xmm5
  0xee06f452:   vmovsd 0x30(%esp),%xmm4
  0xee06f458:   vmovsd 0x28(%esp),%xmm3
  0xee06f45e:   vmovsd 0x20(%esp),%xmm2
  0xee06f464:   vmovsd 0x18(%esp),%xmm1
  0xee06f46a:   vmovsd 0x10(%esp),%xmm0
  0xee06f470:   mov    0x8(%esp),%edx
  0xee06f474:   mov    0x4(%esp),%ecx
  0xee06f478:   mov    (%esp),%eax
  0xee06f47b:   add    $0x50,%esp
  0xee06f47e:   vzeroupper 
 ;; pop_call_clobbered_registers end
  0xee06f481:   pop    %edi
  0xee06f482:   mov    %eax,0x8(%ebp)               ;; 1168:     __ movptr(Address(rbp, frame::interpreter_frame_oop_temp_offset*wordSize), rax);
  0xee06f485:   push   %edx                         ;; 1170:     __ push(ltos);
  0xee06f486:   push   %eax
  0xee06f487:   cmpl   $0x2,0x2bc(%edi)             ;; 1171:     __ bind(no_oop);
                                                    ;; 1177:     __ cmpl(Address(thread, JavaThread::stack_guard_state_offset()),
  0xee06f48e:   jne    0xee06f49b                   ;; 1179:     __ jcc(Assembler::notEqual, no_reguard);
  0xee06f494:   pusha                               ;; 1181:     __ pusha(); // XXX only save smashed registers
  0xee06f495:   call   0xf739cc70 = SharedRuntime::reguard_yellow_pages()
                                                    ;; 1183:     __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, SharedRuntime::reguard_yellow_pages)));
  0xee06f49a:   popa                                ;; 1184:     __ popa();
  0xee06f49b:   mov    -0xc(%ebp),%ebx              ;; 1195:     __ bind(no_reguard);
                                                    ;; 1202:   __ get_method(method);
  0xee06f49e:   mov    0x8(%ebx),%esi               ;; 1205:   __ movptr(rbcp, Address(method, Method::const_offset()));   // get ConstMethod*
  0xee06f4a1:   lea    0x2c(%esi),%esi              ;; 1206:   __ lea(rbcp, Address(rbcp, ConstMethod::codes_offset()));    // get codebase
  0xee06f4a4:   cmpl   $0x0,0x4(%edi)               ;; 1211:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee06f4a8:   je     0xee06f56a                   ;; 1212:     __ jcc(Assembler::zero, L);
  0xee06f4ae:   call   0xee06f4b8                   ;; 1217:     __ MacroAssembler::call_VM(noreg,
  0xee06f4b3:   jmp    0xee06f559
  0xee06f4b8:   lea    0x4(%esp),%eax
  0xee06f4bc:   mov    %esi,-0x20(%ebp)
  0xee06f4bf:   cmpl   $0x0,-0x8(%ebp)
  0xee06f4c3:   je     0xee06f4da
  0xee06f4c9:   push   $0xf78569d8
  0xee06f4ce:   call   0xee06f4d3
  0xee06f4d3:   pusha  
  0xee06f4d4:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f4d9:   hlt    
  0xee06f4da:   push   %eax
  0xee06f4db:   push   %edx
  0xee06f4dc:   push   %ecx
  0xee06f4dd:   call   0xf704a910 = Thread::current()
  0xee06f4e2:   pop    %ecx
  0xee06f4e3:   pop    %edx
  0xee06f4e4:   mov    %eax,%edi
  0xee06f4e6:   pop    %eax
  0xee06f4e7:   push   %edi
  0xee06f4e8:   vzeroupper 
  0xee06f4eb:   mov    %ebp,0x230(%edi)
  0xee06f4f1:   mov    %eax,0x228(%edi)
  0xee06f4f7:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee06f4fc:   add    $0x4,%esp
  0xee06f4ff:   push   %eax
  0xee06f500:   push   %edx
  0xee06f501:   push   %ecx
  0xee06f502:   call   0xf704a910 = Thread::current()
  0xee06f507:   pop    %ecx
  0xee06f508:   pop    %edx
  0xee06f509:   cmp    %eax,%edi
  0xee06f50b:   je     0xee06f522
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06f511:   push   $0xf78b5a48
  0xee06f516:   call   0xee06f51b
  0xee06f51b:   pusha  
  0xee06f51c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f521:   hlt    
  0xee06f522:   pop    %eax
  0xee06f523:   movl   $0x0,0x228(%edi)
  0xee06f52d:   movl   $0x0,0x230(%edi)
  0xee06f537:   movl   $0x0,0x22c(%edi)
  0xee06f541:   vzeroupper 
  0xee06f544:   cmpl   $0x0,0x4(%edi)
  0xee06f548:   jne    0xee05bbe0
  0xee06f54e:   mov    -0x20(%ebp),%esi
  0xee06f551:   mov    -0x1c(%ebp),%edi
  0xee06f554:   lea    0x0(%ebp,%edi,4),%edi
  0xee06f558:   ret    
  0xee06f559:   push   $0xf77a6b02                  ;; 1220:     __ should_not_reach_here();
  0xee06f55e:   call   0xee06f563
  0xee06f563:   pusha  
  0xee06f564:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f569:   hlt    
  0xee06f56a:   mov    0x18(%ebx),%ecx              ;; 1221:     __ bind(L);
                                                    ;; 1227:     __ movl(t, Address(method, Method::access_flags_offset()));
  0xee06f56d:   test   $0x20,%cl                    ;; 1228:     __ testl(t, JVM_ACC_SYNCHRONIZED);
  0xee06f570:   je     0xee06f6a3                   ;; 1229:     __ jcc(Assembler::zero, L);
  0xee06f576:   lea    -0x2c(%ebp),%edx             ;; 1244:       __ lea(regmon, monitor); // address of first monitor
  0xee06f579:   mov    0x4(%edx),%ecx               ;; 1246:       __ movptr(t, Address(regmon, BasicObjectLock::obj_offset_in_bytes()));
  0xee06f57c:   test   %ecx,%ecx                    ;; 1247:       __ testptr(t, t);
  0xee06f57e:   jne    0xee06f640                   ;; 1248:       __ jcc(Assembler::notZero, unlock);
  0xee06f584:   call   0xee06f58e                   ;; 1251:       __ MacroAssembler::call_VM(noreg,
  0xee06f589:   jmp    0xee06f62f
  0xee06f58e:   lea    0x4(%esp),%eax
  0xee06f592:   mov    %esi,-0x20(%ebp)
  0xee06f595:   cmpl   $0x0,-0x8(%ebp)
  0xee06f599:   je     0xee06f5b0
  0xee06f59f:   push   $0xf78569d8
  0xee06f5a4:   call   0xee06f5a9
  0xee06f5a9:   pusha  
  0xee06f5aa:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f5af:   hlt    
  0xee06f5b0:   push   %eax
  0xee06f5b1:   push   %edx
  0xee06f5b2:   push   %ecx
  0xee06f5b3:   call   0xf704a910 = Thread::current()
  0xee06f5b8:   pop    %ecx
  0xee06f5b9:   pop    %edx
  0xee06f5ba:   mov    %eax,%edi
  0xee06f5bc:   pop    %eax
  0xee06f5bd:   push   %edi
  0xee06f5be:   vzeroupper 
  0xee06f5c1:   mov    %ebp,0x230(%edi)
  0xee06f5c7:   mov    %eax,0x228(%edi)
  0xee06f5cd:   call   0xf6c0c900 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0xee06f5d2:   add    $0x4,%esp
  0xee06f5d5:   push   %eax
  0xee06f5d6:   push   %edx
  0xee06f5d7:   push   %ecx
  0xee06f5d8:   call   0xf704a910 = Thread::current()
  0xee06f5dd:   pop    %ecx
  0xee06f5de:   pop    %edx
  0xee06f5df:   cmp    %eax,%edi
  0xee06f5e1:   je     0xee06f5f8
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06f5e7:   push   $0xf78b5a48
  0xee06f5ec:   call   0xee06f5f1
  0xee06f5f1:   pusha  
  0xee06f5f2:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f5f7:   hlt    
  0xee06f5f8:   pop    %eax
  0xee06f5f9:   movl   $0x0,0x228(%edi)
  0xee06f603:   movl   $0x0,0x230(%edi)
  0xee06f60d:   movl   $0x0,0x22c(%edi)
  0xee06f617:   vzeroupper 
  0xee06f61a:   cmpl   $0x0,0x4(%edi)
  0xee06f61e:   jne    0xee05bbe0
  0xee06f624:   mov    -0x20(%ebp),%esi
  0xee06f627:   mov    -0x1c(%ebp),%edi
  0xee06f62a:   lea    0x0(%ebp,%edi,4),%edi
  0xee06f62e:   ret    
  0xee06f62f:   push   $0xf77a6b02                  ;; 1254:       __ should_not_reach_here();
  0xee06f634:   call   0xee06f639
  0xee06f639:   pusha  
  0xee06f63a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f63f:   hlt    
  0xee06f640:   mov    %esi,-0x20(%ebp)             ;; 1256:       __ bind(unlock);
                                                    ;; 1257:       __ unlock_object(regmon);
  0xee06f643:   lea    (%edx),%eax
  0xee06f645:   mov    0x4(%edx),%ecx
  0xee06f648:   movl   $0x0,0x4(%edx)
  0xee06f64f:   mov    (%eax),%ebx
  0xee06f651:   test   %ebx,%ebx
  0xee06f653:   je     0xee06f663
  0xee06f659:   lock cmpxchg %ebx,(%ecx)
  0xee06f65d:   jne    0xee06f679
  0xee06f663:   push   %eax
  0xee06f664:   push   %edx
  0xee06f665:   push   %ecx
  0xee06f666:   call   0xf704a910 = Thread::current()
  0xee06f66b:   pop    %ecx
  0xee06f66c:   pop    %edx
  0xee06f66d:   decl   0x308(%eax)
  0xee06f673:   pop    %eax
  0xee06f674:   jmp    0xee06f6a0
  0xee06f679:   mov    %ecx,0x4(%edx)
  0xee06f67c:   push   %edx
  0xee06f67d:   cmpl   $0x0,-0x8(%ebp)
  0xee06f681:   je     0xee06f698
  0xee06f687:   push   $0xf785694c
  0xee06f68c:   call   0xee06f691
  0xee06f691:   pusha  
  0xee06f692:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f697:   hlt    
  0xee06f698:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee06f69d:   add    $0x4,%esp
  0xee06f6a0:   mov    -0x20(%ebp),%esi
  0xee06f6a3:   cmpb   $0x0,0xf7ca3a0d              ;; 1259:     __ bind(L);
                                                    ;; 1267:   __ notify_method_exit(vtos, InterpreterMacroAssembler::NotifyJVMTI);
  0xee06f6aa:   je     0xee06f6e5
  0xee06f6b0:   push   %eax
  0xee06f6b1:   push   %edx
  0xee06f6b2:   push   %ecx
  0xee06f6b3:   call   0xf704a910 = Thread::current()
  0xee06f6b8:   pop    %ecx
  0xee06f6b9:   pop    %edx
  0xee06f6ba:   mov    %eax,%ecx
  0xee06f6bc:   pop    %eax
  0xee06f6bd:   mov    -0xc(%ebp),%ebx
  0xee06f6c0:   push   %ebx
  0xee06f6c1:   push   %ecx
  0xee06f6c2:   cmpl   $0x0,-0x8(%ebp)
  0xee06f6c6:   je     0xee06f6dd
  0xee06f6cc:   push   $0xf785694c
  0xee06f6d1:   call   0xee06f6d6
  0xee06f6d6:   pusha  
  0xee06f6d7:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f6dc:   hlt    
  0xee06f6dd:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee06f6e2:   add    $0x8,%esp
  0xee06f6e5:   pop    %eax                         ;; 1272:   __ pop(ltos);
  0xee06f6e6:   pop    %edx
  0xee06f6e7:   mov    0xc(%ebp),%ecx               ;; 1275:   __ movptr(t, Address(rbp,
  0xee06f6ea:   call   *%ecx                        ;; 1277:   __ call(t);
  0xee06f6ec:   mov    -0x4(%ebp),%ecx              ;; 1280:   __ movptr(t, Address(rbp,
  0xee06f6ef:   mov    %ebp,%esp                    ;; 1283:   __ leave();                                // remove frame anchor
  0xee06f6f1:   pop    %ebp
  0xee06f6f2:   pop    %edi                         ;; 1284:   __ pop(rdi);                               // get return address
  0xee06f6f3:   mov    %ecx,%esp                    ;; 1285:   __ mov(rsp, t);                            // set sp to sender sp
  0xee06f6f5:   jmp    *%edi                        ;; 1286:   __ jmp(rdi);
  0xee06f6f7:   mov    $0x0,%eax                    ;; 1290:     __ bind(invocation_counter_overflow);
                                                    ;;  442:   __ movl(rarg, 0);
  0xee06f6fc:   call   0xee06f706                   ;;  443:   __ call_VM(noreg,
  0xee06f701:   jmp    0xee06f7a8
  0xee06f706:   push   %eax
  0xee06f707:   lea    0x8(%esp),%eax
  0xee06f70b:   mov    %esi,-0x20(%ebp)
  0xee06f70e:   cmpl   $0x0,-0x8(%ebp)
  0xee06f712:   je     0xee06f729
  0xee06f718:   push   $0xf78569d8
  0xee06f71d:   call   0xee06f722
  0xee06f722:   pusha  
  0xee06f723:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f728:   hlt    
  0xee06f729:   push   %eax
  0xee06f72a:   push   %edx
  0xee06f72b:   push   %ecx
  0xee06f72c:   call   0xf704a910 = Thread::current()
  0xee06f731:   pop    %ecx
  0xee06f732:   pop    %edx
  0xee06f733:   mov    %eax,%edi
  0xee06f735:   pop    %eax
  0xee06f736:   push   %edi
  0xee06f737:   vzeroupper 
  0xee06f73a:   mov    %ebp,0x230(%edi)
  0xee06f740:   mov    %eax,0x228(%edi)
  0xee06f746:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee06f74b:   add    $0x8,%esp
  0xee06f74e:   push   %eax
  0xee06f74f:   push   %edx
  0xee06f750:   push   %ecx
  0xee06f751:   call   0xf704a910 = Thread::current()
  0xee06f756:   pop    %ecx
  0xee06f757:   pop    %edx
  0xee06f758:   cmp    %eax,%edi
  0xee06f75a:   je     0xee06f771
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06f760:   push   $0xf78b5a48
  0xee06f765:   call   0xee06f76a
  0xee06f76a:   pusha  
  0xee06f76b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f770:   hlt    
  0xee06f771:   pop    %eax
  0xee06f772:   movl   $0x0,0x228(%edi)
  0xee06f77c:   movl   $0x0,0x230(%edi)
  0xee06f786:   movl   $0x0,0x22c(%edi)
  0xee06f790:   vzeroupper 
  0xee06f793:   cmpl   $0x0,0x4(%edi)
  0xee06f797:   jne    0xee05bbe0
  0xee06f79d:   mov    -0x20(%ebp),%esi
  0xee06f7a0:   mov    -0x1c(%ebp),%edi
  0xee06f7a3:   lea    0x0(%ebp,%edi,4),%edi
  0xee06f7a7:   ret    
  0xee06f7a8:   mov    -0xc(%ebp),%ebx              ;;  448:   __ movptr(rbx, Address(rbp, method_offset));   // restore Method*
  0xee06f7ab:   jmp    0xee06ef8d                   ;;  451:   __ jmp(do_continue, relocInfo::none);
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = native_synchronized)  [0xee06f7e0, 0xee0702d8]  2808 bytes

--------------------------------------------------------------------------------
  0xee06f7e0:   mov    0x8(%ebx),%ecx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;;  790:   address entry_point = __ pc();
                                                    ;;  799:   __ movptr(rcx, constMethod);
  0xee06f7e3:   movzwl 0x24(%ecx),%ecx              ;;  800:   __ load_unsigned_short(rcx, size_of_parameters);
  0xee06f7e7:   pop    %eax                         ;;  809:   __ pop(rax);                                       // get return address
  0xee06f7e8:   lea    -0x4(%esp,%ecx,4),%edi       ;;  814:   __ lea(rlocals, Address(rsp, rcx, Interpreter::stackElementScale(), -wordSize));
  0xee06f7ec:   push   $0x0                         ;;  818:   __ push(NULL_WORD);
  0xee06f7f1:   push   $0x0                         ;;  821:   __ push(NULL_WORD);
  0xee06f7f6:   push   %eax                         ;;  621:   __ push(rax);        // save return address
  0xee06f7f7:   push   %ebp                         ;;  622:   __ enter();          // save old & set new rbp
  0xee06f7f8:   mov    %esp,%ebp
  0xee06f7fa:   push   %esi                         ;;  623:   __ push(rbcp);        // set sender sp
  0xee06f7fb:   push   $0x0                         ;;  624:   __ push(NULL_WORD); // leave last_sp as null
  0xee06f800:   mov    0x8(%ebx),%esi               ;;  625:   __ movptr(rbcp, Address(rbx, Method::const_offset()));      // get ConstMethod*
  0xee06f803:   lea    0x2c(%esi),%esi              ;;  626:   __ lea(rbcp, Address(rbcp, ConstMethod::codes_offset())); // get codebase
  0xee06f806:   push   %ebx                         ;;  627:   __ push(rbx);        // save Method*
  0xee06f807:   mov    0x8(%ebx),%edx               ;;  629:   __ load_mirror(rdx, rbx, rscratch2);
  0xee06f80a:   mov    0x8(%edx),%edx
  0xee06f80d:   mov    0x10(%edx),%edx
  0xee06f810:   mov    0x44(%edx),%edx
  0xee06f813:   mov    (%edx),%edx
  0xee06f815:   push   %edx                         ;;  630:   __ push(rdx);
  0xee06f816:   mov    0xc(%ebx),%edx               ;;  633:     __ movptr(rdx, Address(rbx, in_bytes(Method::method_data_offset())));
  0xee06f819:   test   %edx,%edx                    ;;  634:     __ testptr(rdx, rdx);
  0xee06f81b:   je     0xee06f827                   ;;  635:     __ jcc(Assembler::zero, method_data_continue);
  0xee06f821:   add    $0xe4,%edx                   ;;  636:     __ addptr(rdx, in_bytes(MethodData::data_offset()));
  0xee06f827:   push   %edx                         ;;  637:     __ bind(method_data_continue);
                                                    ;;  638:     __ push(rdx);      // set the mdp (method data pointer)
  0xee06f828:   mov    0x8(%ebx),%edx               ;;  643:   __ movptr(rdx, Address(rbx, Method::const_offset()));
  0xee06f82b:   mov    0x8(%edx),%edx               ;;  644:   __ movptr(rdx, Address(rdx, ConstMethod::constants_offset()));
  0xee06f82e:   mov    0xc(%edx),%edx               ;;  645:   __ movptr(rdx, Address(rdx, ConstantPool::cache_offset_in_bytes()));
  0xee06f831:   push   %edx                         ;;  646:   __ push(rdx); // set constant pool cache
  0xee06f832:   mov    %edi,%eax                    ;;  648:   __ movptr(rax, rlocals);
  0xee06f834:   sub    %ebp,%eax                    ;;  649:   __ subptr(rax, rbp);
  0xee06f836:   shr    $0x2,%eax                    ;;  650:   __ shrptr(rax, Interpreter::logStackElementSize);  // rax = rlocals - fp();
  0xee06f839:   push   %eax                         ;;  651:   __ push(rax); // set relativized rlocals, see frame::interpreter_frame_locals()
  0xee06f83a:   push   $0x0                         ;;  654:     __ push(0); // no bcp
  0xee06f83f:   push   $0x0                         ;;  658:   __ push(0); // reserve word for pointer to expression stack bottom
  0xee06f844:   mov    %esp,(%esp)                  ;;  659:   __ movptr(Address(rsp, 0), rsp); // set expression stack bottom
  0xee06f847:   mov    0x18(%ebx),%eax              ;;  828:   __ movl(rax, access_flags);
  0xee06f84a:   test   $0x100,%eax                  ;;  831:     __ testl(rax, JVM_ACC_NATIVE);
  0xee06f84f:   jne    0xee06f866                   ;;  832:     __ jcc(Assembler::notZero, L);
  0xee06f855:   push   $0xf7924294                  ;;  833:     __ stop("tried to execute non-native method as native");
  0xee06f85a:   call   0xee06f85f
  0xee06f85f:   pusha  
  0xee06f860:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f865:   hlt    
  0xee06f866:   test   $0x400,%eax                  ;;  834:     __ bind(L);
                                                    ;;  838:     __ testl(rax, JVM_ACC_ABSTRACT);
  0xee06f86b:   je     0xee06f882                   ;;  839:     __ jcc(Assembler::zero, L);
  0xee06f871:   push   $0xf79242c4                  ;;  840:     __ stop("tried to execute abstract method in interpreter");
  0xee06f876:   call   0xee06f87b
  0xee06f87b:   pusha  
  0xee06f87c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f881:   hlt    
  0xee06f882:   push   %edx                         ;;  841:     __ bind(L);
                                                    ;;  852:   NOT_LP64(__ get_thread(thread1));
  0xee06f883:   push   %ecx
  0xee06f884:   call   0xf704a910 = Thread::current()
  0xee06f889:   pop    %ecx
  0xee06f88a:   pop    %edx
  0xee06f88b:   movb   $0x1,0x2b1(%eax)             ;;  855:   __ movbool(do_not_unlock_if_synchronized, true);
  0xee06f892:   mov    0xc(%ebx),%eax               ;;  400:     __ movptr(rax, Address(rbx, Method::method_data_offset()));
  0xee06f895:   test   %eax,%eax                    ;;  401:     __ testptr(rax, rax);
  0xee06f897:   je     0xee06f8b9                   ;;  402:     __ jccb(Assembler::zero, no_mdo);
  0xee06f899:   mov    0xb4(%eax),%ecx              ;;  407:     __ increment_mask_and_jump(mdo_invocation_counter, mask, rcx, overflow);
  0xee06f89f:   add    $0x2,%ecx
  0xee06f8a2:   mov    %ecx,0xb4(%eax)
  0xee06f8a8:   and    0xc8(%eax),%ecx
  0xee06f8ae:   je     0xee07021e
  0xee06f8b4:   jmp    0xee06f98d                   ;;  408:     __ jmp(done);
  0xee06f8b9:   mov    0x10(%ebx),%eax              ;;  410:   __ bind(no_mdo);
                                                    ;;  415:   __ get_method_counters(rbx, rax, done);
  0xee06f8bc:   test   %eax,%eax
  0xee06f8be:   jne    0xee06f97b
  0xee06f8c4:   call   0xee06f8ce
  0xee06f8c9:   jmp    0xee06f970
  0xee06f8ce:   push   %ebx
  0xee06f8cf:   lea    0x8(%esp),%eax
  0xee06f8d3:   mov    %esi,-0x20(%ebp)
  0xee06f8d6:   cmpl   $0x0,-0x8(%ebp)
  0xee06f8da:   je     0xee06f8f1
  0xee06f8e0:   push   $0xf78569d8
  0xee06f8e5:   call   0xee06f8ea
  0xee06f8ea:   pusha  
  0xee06f8eb:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f8f0:   hlt    
  0xee06f8f1:   push   %eax
  0xee06f8f2:   push   %edx
  0xee06f8f3:   push   %ecx
  0xee06f8f4:   call   0xf704a910 = Thread::current()
  0xee06f8f9:   pop    %ecx
  0xee06f8fa:   pop    %edx
  0xee06f8fb:   mov    %eax,%edi
  0xee06f8fd:   pop    %eax
  0xee06f8fe:   push   %edi
  0xee06f8ff:   vzeroupper 
  0xee06f902:   mov    %ebp,0x230(%edi)
  0xee06f908:   mov    %eax,0x228(%edi)
  0xee06f90e:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee06f913:   add    $0x8,%esp
  0xee06f916:   push   %eax
  0xee06f917:   push   %edx
  0xee06f918:   push   %ecx
  0xee06f919:   call   0xf704a910 = Thread::current()
  0xee06f91e:   pop    %ecx
  0xee06f91f:   pop    %edx
  0xee06f920:   cmp    %eax,%edi
  0xee06f922:   je     0xee06f939
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06f928:   push   $0xf78b5a48
  0xee06f92d:   call   0xee06f932
  0xee06f932:   pusha  
  0xee06f933:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f938:   hlt    
  0xee06f939:   pop    %eax
  0xee06f93a:   movl   $0x0,0x228(%edi)
  0xee06f944:   movl   $0x0,0x230(%edi)
  0xee06f94e:   movl   $0x0,0x22c(%edi)
  0xee06f958:   vzeroupper 
  0xee06f95b:   cmpl   $0x0,0x4(%edi)
  0xee06f95f:   jne    0xee05bbe0
  0xee06f965:   mov    -0x20(%ebp),%esi
  0xee06f968:   mov    -0x1c(%ebp),%edi
  0xee06f96b:   lea    0x0(%ebp,%edi,4),%edi
  0xee06f96f:   ret    
  0xee06f970:   mov    0x10(%ebx),%eax
  0xee06f973:   test   %eax,%eax
  0xee06f975:   je     0xee06f98d
  0xee06f97b:   mov    0x8(%eax),%ecx               ;;  417:   __ increment_mask_and_jump(invocation_counter, mask, rcx, overflow);
  0xee06f97e:   add    $0x2,%ecx
  0xee06f981:   mov    %ecx,0x8(%eax)
  0xee06f984:   and    0x1c(%eax),%ecx
  0xee06f987:   je     0xee07021e
  0xee06f98d:   push   %esi                         ;;  418:   __ bind(done);
                                                    ;;  864:   __ bind(continue_after_compile);
                                                    ;;  740:   __ push(thread);
  0xee06f98e:   push   %eax                         ;;  741:   __ get_thread(thread);
  0xee06f98f:   push   %edx
  0xee06f990:   push   %ecx
  0xee06f991:   call   0xf704a910 = Thread::current()
  0xee06f996:   pop    %ecx
  0xee06f997:   pop    %edx
  0xee06f998:   mov    %eax,%esi
  0xee06f99a:   pop    %eax
  0xee06f99b:   cmpl   $0x0,0x2c8(%esi)             ;;  746:   __ cmpptr(Address(thread, JavaThread::shadow_zone_safe_limit()), NULL_WORD);
  0xee06f9a2:   jne    0xee06f9b9                   ;;  747:   __ jcc(Assembler::notEqual, L_good_limit);
  0xee06f9a8:   push   $0xf7924238                  ;;  748:   __ stop("shadow zone safe limit is not initialized");
  0xee06f9ad:   call   0xee06f9b2
  0xee06f9b2:   pusha  
  0xee06f9b3:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f9b8:   hlt    
  0xee06f9b9:   cmpl   $0x0,0x2cc(%esi)             ;;  749:   __ bind(L_good_limit);
                                                    ;;  752:   __ cmpptr(Address(thread, JavaThread::shadow_zone_growth_watermark()), NULL_WORD);
  0xee06f9c0:   jne    0xee06f9d7                   ;;  753:   __ jcc(Assembler::notEqual, L_good_watermark);
  0xee06f9c6:   push   $0xf7924264                  ;;  754:   __ stop("shadow zone growth watermark is not initialized");
  0xee06f9cb:   call   0xee06f9d0
  0xee06f9d0:   pusha  
  0xee06f9d1:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06f9d6:   hlt    
  0xee06f9d7:   cmp    0x2cc(%esi),%esp             ;;  755:   __ bind(L_good_watermark);
                                                    ;;  760:   __ cmpptr(rsp, Address(thread, JavaThread::shadow_zone_growth_watermark()));
  0xee06f9dd:   ja     0xee06fa30                   ;;  761:   __ jcc(Assembler::above, L_done);
  0xee06f9e3:   mov    %eax,-0x1000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06f9ea:   mov    %eax,-0x2000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06f9f1:   mov    %eax,-0x3000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06f9f8:   mov    %eax,-0x4000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06f9ff:   mov    %eax,-0x5000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06fa06:   mov    %eax,-0x6000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06fa0d:   mov    %eax,-0x7000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06fa14:   mov    %eax,-0x8000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06fa1b:   mov    %eax,-0x9000(%esp)           ;;  764:     __ bang_stack_with_offset(p*page_size);
  0xee06fa22:   cmp    0x2c8(%esi),%esp             ;;  769:   __ cmpptr(rsp, Address(thread, JavaThread::shadow_zone_safe_limit()));
  0xee06fa28:   jbe    0xee06fa30                   ;;  770:   __ jccb(Assembler::belowEqual, L_done);
  0xee06fa2a:   mov    %esp,0x2cc(%esi)             ;;  771:   __ movptr(Address(thread, JavaThread::shadow_zone_growth_watermark()), rsp);
  0xee06fa30:   pop    %esi                         ;;  773:   __ bind(L_done);
                                                    ;;  776:   __ pop(thread);
  0xee06fa31:   push   %edx                         ;;  869:   NOT_LP64(__ get_thread(thread1));
  0xee06fa32:   push   %ecx
  0xee06fa33:   call   0xf704a910 = Thread::current()
  0xee06fa38:   pop    %ecx
  0xee06fa39:   pop    %edx
  0xee06fa3a:   movb   $0x0,0x2b1(%eax)             ;;  870:   __ movbool(do_not_unlock_if_synchronized, false);
  0xee06fa41:   mov    0x18(%ebx),%eax              ;;  569:     __ movl(rax, access_flags);
  0xee06fa44:   test   $0x20,%al                    ;;  570:     __ testl(rax, JVM_ACC_SYNCHRONIZED);
  0xee06fa46:   jne    0xee06fa5d                   ;;  571:     __ jcc(Assembler::notZero, L);
  0xee06fa4c:   push   $0xf79241f4                  ;;  572:     __ stop("method doesn't need synchronization");
  0xee06fa51:   call   0xee06fa56
  0xee06fa56:   pusha  
  0xee06fa57:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06fa5c:   hlt    
  0xee06fa5d:   mov    0x18(%ebx),%eax              ;;  573:     __ bind(L);
                                                    ;;  580:     __ movl(rax, access_flags);
  0xee06fa60:   test   $0x8,%al                     ;;  581:     __ testl(rax, JVM_ACC_STATIC);
  0xee06fa62:   mov    (%edi),%eax                  ;;  583:     __ movptr(rax, Address(rlocals, Interpreter::local_offset_in_bytes(0)));
  0xee06fa64:   je     0xee06fa91                   ;;  584:     __ jcc(Assembler::zero, done);
  0xee06fa6a:   mov    0x8(%ebx),%eax               ;;  585:     __ load_mirror(rax, rbx, rscratch2);
  0xee06fa6d:   mov    0x8(%eax),%eax
  0xee06fa70:   mov    0x10(%eax),%eax
  0xee06fa73:   mov    0x44(%eax),%eax
  0xee06fa76:   mov    (%eax),%eax
  0xee06fa78:   test   %eax,%eax                    ;;  590:       __ testptr(rax, rax);
  0xee06fa7a:   jne    0xee06fa91                   ;;  591:       __ jcc(Assembler::notZero, L);
  0xee06fa80:   push   $0xf7924218                  ;;  592:       __ stop("synchronization object is NULL");
  0xee06fa85:   call   0xee06fa8a
  0xee06fa8a:   pusha  
  0xee06fa8b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06fa90:   hlt    
  0xee06fa91:   sub    $0x8,%esp                    ;;  593:       __ bind(L);
                                                    ;;  597:     __ bind(done);
                                                    ;;  601:   __ subptr(rsp, entry_size); // add space for a monitor entry
  0xee06fa94:   mov    %esp,-0x24(%ebp)             ;;  602:   __ movptr(monitor_block_top, rsp);  // set new monitor block top
  0xee06fa97:   mov    %eax,0x4(%esp)               ;;  604:   __ movptr(Address(rsp, BasicObjectLock::obj_offset_in_bytes()), rax);
  0xee06fa9b:   mov    %esp,%edx                    ;;  606:   __ movptr(lockreg, rsp); // object address
  0xee06fa9d:   mov    0x4(%edx),%ecx               ;;  607:   __ lock_object(lockreg);
  0xee06faa0:   mov    $0x1,%eax
  0xee06faa5:   or     (%ecx),%eax
  0xee06faa7:   mov    %eax,(%edx)
  0xee06faa9:   lock cmpxchg %edx,(%ecx)
  0xee06faad:   je     0xee06fac2
  0xee06fab3:   sub    %esp,%eax
  0xee06fab5:   and    $0xfffff003,%eax
  0xee06faba:   mov    %eax,(%edx)
  0xee06fabc:   jne    0xee06fad8
  0xee06fac2:   push   %eax
  0xee06fac3:   push   %edx
  0xee06fac4:   push   %ecx
  0xee06fac5:   call   0xf704a910 = Thread::current()
  0xee06faca:   pop    %ecx
  0xee06facb:   pop    %edx
  0xee06facc:   incl   0x308(%eax)
  0xee06fad2:   pop    %eax
  0xee06fad3:   jmp    0xee06fb84
  0xee06fad8:   call   0xee06fae2
  0xee06fadd:   jmp    0xee06fb84
  0xee06fae2:   push   %edx
  0xee06fae3:   lea    0x8(%esp),%eax
  0xee06fae7:   mov    %esi,-0x20(%ebp)
  0xee06faea:   cmpl   $0x0,-0x8(%ebp)
  0xee06faee:   je     0xee06fb05
  0xee06faf4:   push   $0xf78569d8
  0xee06faf9:   call   0xee06fafe
  0xee06fafe:   pusha  
  0xee06faff:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06fb04:   hlt    
  0xee06fb05:   push   %eax
  0xee06fb06:   push   %edx
  0xee06fb07:   push   %ecx
  0xee06fb08:   call   0xf704a910 = Thread::current()
  0xee06fb0d:   pop    %ecx
  0xee06fb0e:   pop    %edx
  0xee06fb0f:   mov    %eax,%edi
  0xee06fb11:   pop    %eax
  0xee06fb12:   push   %edi
  0xee06fb13:   vzeroupper 
  0xee06fb16:   mov    %ebp,0x230(%edi)
  0xee06fb1c:   mov    %eax,0x228(%edi)
  0xee06fb22:   call   0xf6c0c3c0 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0xee06fb27:   add    $0x8,%esp
  0xee06fb2a:   push   %eax
  0xee06fb2b:   push   %edx
  0xee06fb2c:   push   %ecx
  0xee06fb2d:   call   0xf704a910 = Thread::current()
  0xee06fb32:   pop    %ecx
  0xee06fb33:   pop    %edx
  0xee06fb34:   cmp    %eax,%edi
  0xee06fb36:   je     0xee06fb4d
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06fb3c:   push   $0xf78b5a48
  0xee06fb41:   call   0xee06fb46
  0xee06fb46:   pusha  
  0xee06fb47:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06fb4c:   hlt    
  0xee06fb4d:   pop    %eax
  0xee06fb4e:   movl   $0x0,0x228(%edi)
  0xee06fb58:   movl   $0x0,0x230(%edi)
  0xee06fb62:   movl   $0x0,0x22c(%edi)
  0xee06fb6c:   vzeroupper 
  0xee06fb6f:   cmpl   $0x0,0x4(%edi)
  0xee06fb73:   jne    0xee05bbe0
  0xee06fb79:   mov    -0x20(%ebp),%esi
  0xee06fb7c:   mov    -0x1c(%ebp),%edi
  0xee06fb7f:   lea    0x0(%ebp,%edi,4),%edi
  0xee06fb83:   ret    
  0xee06fb84:   mov    -0x24(%ebp),%eax             ;;  897:     __ movptr(rax, monitor_block_top);
  0xee06fb87:   cmp    %esp,%eax                    ;;  898:     __ cmpptr(rax, rsp);
  0xee06fb89:   je     0xee06fba0                   ;;  899:     __ jcc(Assembler::equal, L);
  0xee06fb8f:   push   $0xf79242f4                  ;;  900:     __ stop("broken stack frame setup in interpreter 5");
  0xee06fb94:   call   0xee06fb99
  0xee06fb99:   pusha  
  0xee06fb9a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06fb9f:   hlt    
  0xee06fba0:   cmpb   $0x0,0xf7ca3a0d              ;;  901:     __ bind(L);
                                                    ;;  906:   __ notify_method_entry();
  0xee06fba7:   je     0xee06fbe2
  0xee06fbad:   push   %eax
  0xee06fbae:   push   %edx
  0xee06fbaf:   push   %ecx
  0xee06fbb0:   call   0xf704a910 = Thread::current()
  0xee06fbb5:   pop    %ecx
  0xee06fbb6:   pop    %edx
  0xee06fbb7:   mov    %eax,%ecx
  0xee06fbb9:   pop    %eax
  0xee06fbba:   mov    -0xc(%ebp),%ebx
  0xee06fbbd:   push   %ebx
  0xee06fbbe:   push   %ecx
  0xee06fbbf:   cmpl   $0x0,-0x8(%ebp)
  0xee06fbc3:   je     0xee06fbda
  0xee06fbc9:   push   $0xf785694c
  0xee06fbce:   call   0xee06fbd3
  0xee06fbd3:   pusha  
  0xee06fbd4:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06fbd9:   hlt    
  0xee06fbda:   call   0xf739a630 = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0xee06fbdf:   add    $0x8,%esp
  0xee06fbe2:   mov    -0xc(%ebp),%ebx              ;;  914:   __ get_method(method);
  0xee06fbe5:   mov    0x8(%ebx),%ecx               ;;  915:   __ movptr(t, Address(method, Method::const_offset()));
  0xee06fbe8:   movzwl 0x24(%ecx),%ecx              ;;  916:   __ load_unsigned_short(t, Address(t, ConstMethod::size_of_parameters_offset()));
  0xee06fbec:   shl    $0x2,%ecx                    ;;  919:   __ shlptr(t, Interpreter::logStackElementSize); // Convert parameter count to bytes.
  0xee06fbef:   add    $0x8,%ecx                    ;;  920:   __ addptr(t, 2*wordSize);     // allocate two more slots for JNIEnv and possible mirror
  0xee06fbf2:   sub    %ecx,%esp                    ;;  921:   __ subptr(rsp, t);
  0xee06fbf4:   and    $0xfffffff0,%esp             ;;  922:   __ andptr(rsp, -(StackAlignmentInBytes)); // gcc needs 16 byte aligned stacks to do XMM intrinsics
  0xee06fbf7:   mov    0x48(%ebx),%ecx              ;;  934:     __ movptr(t, Address(method, Method::signature_handler_offset()));
  0xee06fbfa:   test   %ecx,%ecx                    ;;  935:     __ testptr(t, t);
  0xee06fbfc:   jne    0xee06fcb4                   ;;  936:     __ jcc(Assembler::notZero, L);
  0xee06fc02:   call   0xee06fc0c                   ;;  937:     __ call_VM(noreg,
  0xee06fc07:   jmp    0xee06fcae
  0xee06fc0c:   push   %ebx
  0xee06fc0d:   lea    0x8(%esp),%eax
  0xee06fc11:   mov    %esi,-0x20(%ebp)
  0xee06fc14:   cmpl   $0x0,-0x8(%ebp)
  0xee06fc18:   je     0xee06fc2f
  0xee06fc1e:   push   $0xf78569d8
  0xee06fc23:   call   0xee06fc28
  0xee06fc28:   pusha  
  0xee06fc29:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06fc2e:   hlt    
  0xee06fc2f:   push   %eax
  0xee06fc30:   push   %edx
  0xee06fc31:   push   %ecx
  0xee06fc32:   call   0xf704a910 = Thread::current()
  0xee06fc37:   pop    %ecx
  0xee06fc38:   pop    %edx
  0xee06fc39:   mov    %eax,%edi
  0xee06fc3b:   pop    %eax
  0xee06fc3c:   push   %edi
  0xee06fc3d:   vzeroupper 
  0xee06fc40:   mov    %ebp,0x230(%edi)
  0xee06fc46:   mov    %eax,0x228(%edi)
  0xee06fc4c:   call   0xf6c173f0 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0xee06fc51:   add    $0x8,%esp
  0xee06fc54:   push   %eax
  0xee06fc55:   push   %edx
  0xee06fc56:   push   %ecx
  0xee06fc57:   call   0xf704a910 = Thread::current()
  0xee06fc5c:   pop    %ecx
  0xee06fc5d:   pop    %edx
  0xee06fc5e:   cmp    %eax,%edi
  0xee06fc60:   je     0xee06fc77
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06fc66:   push   $0xf78b5a48
  0xee06fc6b:   call   0xee06fc70
  0xee06fc70:   pusha  
  0xee06fc71:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06fc76:   hlt    
  0xee06fc77:   pop    %eax
  0xee06fc78:   movl   $0x0,0x228(%edi)
  0xee06fc82:   movl   $0x0,0x230(%edi)
  0xee06fc8c:   movl   $0x0,0x22c(%edi)
  0xee06fc96:   vzeroupper 
  0xee06fc99:   cmpl   $0x0,0x4(%edi)
  0xee06fc9d:   jne    0xee05bbe0
  0xee06fca3:   mov    -0x20(%ebp),%esi
  0xee06fca6:   mov    -0x1c(%ebp),%edi
  0xee06fca9:   lea    0x0(%ebp,%edi,4),%edi
  0xee06fcad:   ret    
  0xee06fcae:   mov    -0xc(%ebp),%ebx              ;;  941:     __ get_method(method);
  0xee06fcb1:   mov    0x48(%ebx),%ecx              ;;  942:     __ movptr(t, Address(method, Method::signature_handler_offset()));
  0xee06fcb4:   call   *%ecx                        ;;  943:     __ bind(L);
                                                    ;;  958:   __ call(t);
  0xee06fcb6:   mov    -0xc(%ebp),%ebx              ;;  959:   __ get_method(method);        // slow path can do a GC, reload RBX
  0xee06fcb9:   mov    %eax,0xc(%ebp)               ;;  964:   __ movptr(Address(rbp,
  0xee06fcbc:   mov    0x18(%ebx),%ecx              ;;  971:     __ movl(t, Address(method, Method::access_flags_offset()));
  0xee06fcbf:   test   $0x8,%cl                     ;;  972:     __ testl(t, JVM_ACC_STATIC);
  0xee06fcc2:   je     0xee06fce0                   ;;  973:     __ jcc(Assembler::zero, L);
  0xee06fcc8:   mov    0x8(%ebx),%ecx               ;;  975:     __ load_mirror(t, method, rax);
  0xee06fccb:   mov    0x8(%ecx),%ecx
  0xee06fcce:   mov    0x10(%ecx),%ecx
  0xee06fcd1:   mov    0x44(%ecx),%ecx
  0xee06fcd4:   mov    (%ecx),%ecx
  0xee06fcd6:   mov    %ecx,0x8(%ebp)               ;;  977:     __ movptr(Address(rbp, frame::interpreter_frame_oop_temp_offset * wordSize),
  0xee06fcd9:   lea    0x8(%ebp),%ecx               ;;  981:     __ lea(t, Address(rbp, frame::interpreter_frame_oop_temp_offset * wordSize));
  0xee06fcdc:   mov    %ecx,0x4(%esp)               ;;  982:     __ movptr(Address(rsp, wordSize), t);
  0xee06fce0:   mov    0x44(%ebx),%eax              ;;  987:     __ bind(L);
                                                    ;;  993:     __ movptr(rax, Address(method, Method::native_function_offset()));
  0xee06fce3:   cmp    $0xf73980b0,%eax             ;;  995:     __ cmpptr(rax, unsatisfied.addr(), rscratch1);
  0xee06fce9:   jne    0xee06fda1                   ;;  996:     __ jcc(Assembler::notEqual, L);
  0xee06fcef:   call   0xee06fcf9                   ;;  997:     __ call_VM(noreg,
  0xee06fcf4:   jmp    0xee06fd9b
  0xee06fcf9:   push   %ebx
  0xee06fcfa:   lea    0x8(%esp),%eax
  0xee06fcfe:   mov    %esi,-0x20(%ebp)
  0xee06fd01:   cmpl   $0x0,-0x8(%ebp)
  0xee06fd05:   je     0xee06fd1c
  0xee06fd0b:   push   $0xf78569d8
  0xee06fd10:   call   0xee06fd15
  0xee06fd15:   pusha  
  0xee06fd16:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06fd1b:   hlt    
  0xee06fd1c:   push   %eax
  0xee06fd1d:   push   %edx
  0xee06fd1e:   push   %ecx
  0xee06fd1f:   call   0xf704a910 = Thread::current()
  0xee06fd24:   pop    %ecx
  0xee06fd25:   pop    %edx
  0xee06fd26:   mov    %eax,%edi
  0xee06fd28:   pop    %eax
  0xee06fd29:   push   %edi
  0xee06fd2a:   vzeroupper 
  0xee06fd2d:   mov    %ebp,0x230(%edi)
  0xee06fd33:   mov    %eax,0x228(%edi)
  0xee06fd39:   call   0xf6c173f0 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0xee06fd3e:   add    $0x8,%esp
  0xee06fd41:   push   %eax
  0xee06fd42:   push   %edx
  0xee06fd43:   push   %ecx
  0xee06fd44:   call   0xf704a910 = Thread::current()
  0xee06fd49:   pop    %ecx
  0xee06fd4a:   pop    %edx
  0xee06fd4b:   cmp    %eax,%edi
  0xee06fd4d:   je     0xee06fd64
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee06fd53:   push   $0xf78b5a48
  0xee06fd58:   call   0xee06fd5d
  0xee06fd5d:   pusha  
  0xee06fd5e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06fd63:   hlt    
  0xee06fd64:   pop    %eax
  0xee06fd65:   movl   $0x0,0x228(%edi)
  0xee06fd6f:   movl   $0x0,0x230(%edi)
  0xee06fd79:   movl   $0x0,0x22c(%edi)
  0xee06fd83:   vzeroupper 
  0xee06fd86:   cmpl   $0x0,0x4(%edi)
  0xee06fd8a:   jne    0xee05bbe0
  0xee06fd90:   mov    -0x20(%ebp),%esi
  0xee06fd93:   mov    -0x1c(%ebp),%edi
  0xee06fd96:   lea    0x0(%ebp,%edi,4),%edi
  0xee06fd9a:   ret    
  0xee06fd9b:   mov    -0xc(%ebp),%ebx              ;; 1001:     __ get_method(method);
  0xee06fd9e:   mov    0x44(%ebx),%eax              ;; 1002:     __ movptr(rax, Address(method, Method::native_function_offset()));
  0xee06fda1:   push   %eax                         ;; 1003:     __ bind(L);
                                                    ;; 1008:    __ get_thread(thread);
  0xee06fda2:   push   %edx
  0xee06fda3:   push   %ecx
  0xee06fda4:   call   0xf704a910 = Thread::current()
  0xee06fda9:   pop    %ecx
  0xee06fdaa:   pop    %edx
  0xee06fdab:   mov    %eax,%edi
  0xee06fdad:   pop    %eax
  0xee06fdae:   lea    0x238(%edi),%ecx             ;; 1009:    __ lea(t, Address(thread, JavaThread::jni_environment_offset()));
  0xee06fdb4:   mov    %ecx,(%esp)                  ;; 1010:    __ movptr(Address(rsp, 0), t);
  0xee06fdb7:   vzeroupper                          ;; 1015:    __ set_last_Java_frame(thread, noreg, rbp, __ pc(), noreg);
  0xee06fdba:   mov    %ebp,0x230(%edi)
  0xee06fdc0:   movl   $0xee06fdb7,0x22c(%edi)
  0xee06fdca:   mov    %esp,0x228(%edi)
  0xee06fdd0:   mov    0x284(%edi),%ecx             ;; 1028:     __ movl(t, Address(thread, JavaThread::thread_state_offset()));
  0xee06fdd6:   cmp    $0x8,%ecx                    ;; 1029:     __ cmpl(t, _thread_in_Java);
  0xee06fdd9:   je     0xee06fdf0                   ;; 1030:     __ jcc(Assembler::equal, L);
  0xee06fddf:   push   $0xf7924408                  ;; 1031:     __ stop("Wrong thread state in native stub");
  0xee06fde4:   call   0xee06fde9
  0xee06fde9:   pusha  
  0xee06fdea:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee06fdef:   hlt    
  0xee06fdf0:   movl   $0x4,0x284(%edi)             ;; 1032:     __ bind(L);
                                                    ;; 1038:   __ movl(Address(thread, JavaThread::thread_state_offset()),
  0xee06fdfa:   call   *%eax                        ;; 1042:   __ call(rax);
  0xee06fdfc:   vzeroupper                          ;; 1047:   __ restore_cpu_control_state_after_jni(rscratch1);
  0xee06fdff:   cmpl   $0xee06c798,0xc(%ebp)        ;; 1069:     __ cmpptr(Address(rbp, (frame::interpreter_frame_oop_temp_offset + 1)*wordSize),
  0xee06fe06:   je     0xee06fe19                   ;; 1071:     __ jcc(Assembler::equal, push_double);
  0xee06fe0c:   cmpl   $0xee06c7a9,0xc(%ebp)        ;; 1072:     __ cmpptr(Address(rbp, (frame::interpreter_frame_oop_temp_offset + 1)*wordSize),
  0xee06fe13:   jne    0xee06fe1f                   ;; 1074:     __ jcc(Assembler::notEqual, L);
  0xee06fe19:   sub    $0x8,%esp                    ;; 1075:     __ bind(push_double);
                                                    ;; 1076:     __ push_d(); // FP values are returned using the FPU, so push FPU contents (even if UseSSE > 0).
  0xee06fe1c:   fstpl  (%esp)
  0xee06fe1f:   push   %edx                         ;; 1077:     __ bind(L);
                                                    ;; 1083:   __ push(ltos);
  0xee06fe20:   push   %eax
  0xee06fe21:   push   %eax                         ;; 1086:   NOT_LP64(__ get_thread(thread));
  0xee06fe22:   push   %edx
  0xee06fe23:   push   %ecx
  0xee06fe24:   call   0xf704a910 = Thread::current()
  0xee06fe29:   pop    %ecx
  0xee06fe2a:   pop    %edx
  0xee06fe2b:   mov    %eax,%edi
  0xee06fe2d:   pop    %eax
  0xee06fe2e:   movl   $0x5,0x284(%edi)             ;; 1087:   __ movl(Address(thread, JavaThread::thread_state_offset()),
  0xee06fe38:   lock addl $0x0,-0x40(%esp)          ;; 1092:     __ membar(Assembler::Membar_mask_bits(
  0xee06fe3e:   cmp    0x288(%edi),%ebp             ;; 1108:     __ safepoint_poll(slow_path, thread, true /* at_return */, false /* in_nmethod */);
  0xee06fe44:   ja     0xee06fe57
  0xee06fe4a:   cmpl   $0x0,0x280(%edi)             ;; 1110:     __ cmpl(Address(thread, JavaThread::suspend_flags_offset()), 0);
  0xee06fe51:   je     0xee06fe6d                   ;; 1111:     __ jcc(Assembler::equal, Continue);
  0xee06fe57:   push   %edi                         ;; 1112:     __ bind(slow_path);
                                                    ;; 1122:     __ push(thread);
  0xee06fe58:   call   0xf6c6d080 = JavaThread::check_special_condition_for_native_trans(JavaThread*)
                                                    ;; 1123:     __ call(RuntimeAddress(CAST_FROM_FN_PTR(address,
  0xee06fe5d:   add    $0x4,%esp                    ;; 1125:     __ increment(rsp, wordSize);
  0xee06fe60:   push   %eax                         ;; 1126:     __ get_thread(thread);
  0xee06fe61:   push   %edx
  0xee06fe62:   push   %ecx
  0xee06fe63:   call   0xf704a910 = Thread::current()
  0xee06fe68:   pop    %ecx
  0xee06fe69:   pop    %edx
  0xee06fe6a:   mov    %eax,%edi
  0xee06fe6c:   pop    %eax
  0xee06fe6d:   movl   $0x8,0x284(%edi)             ;; 1136:     __ bind(Continue);
                                                    ;; 1140:   __ movl(Address(thread, JavaThread::thread_state_offset()), _thread_in_Java);
  0xee06fe77:   movl   $0x0,0x228(%edi)             ;; 1143:   __ reset_last_Java_frame(thread, true);
  0xee06fe81:   movl   $0x0,0x230(%edi)
  0xee06fe8b:   movl   $0x0,0x22c(%edi)
  0xee06fe95:   vzeroupper 
  0xee06fe98:   mov    0x270(%edi),%ecx             ;; 1151:   __ movptr(t, Address(thread, JavaThread::active_handles_offset()));
  0xee06fe9e:   movl   $0x0,0x80(%ecx)              ;; 1152:   __ movl(Address(t, JNIHandleBlock::top_offset_in_bytes()), NULL_WORD);
  0xee06fea8:   mov    $0xee06c7b4,%ecx             ;; 1159:     __ lea(t, ExternalAddress(AbstractInterpreter::result_handler(T_OBJECT)));
  0xee06fead:   cmp    0xc(%ebp),%ecx               ;; 1160:     __ cmpptr(t, Address(rbp, frame::interpreter_frame_result_handler_offset*wordSize));
  0xee06feb0:   jne    0xee06ffae                   ;; 1161:     __ jcc(Assembler::notEqual, no_oop);
  0xee06feb6:   pop    %eax                         ;; 1163:     __ pop(ltos);
  0xee06feb7:   pop    %edx
  0xee06feb8:   test   %eax,%eax                    ;; 1165:     __ resolve_jobject(rax /* value */,
  0xee06feba:   je     0xee06ffa9
  0xee06fec0:   test   $0x3,%al
  0xee06fec2:   jne    0xee06fecf
  0xee06fec8:   mov    (%eax),%eax
  0xee06feca:   jmp    0xee06ffa9
  0xee06fecf:   test   $0x1,%al
  0xee06fed1:   jne    0xee06fedf
  0xee06fed7:   mov    -0x2(%eax),%eax
  0xee06feda:   jmp    0xee06ffa9
  0xee06fedf:   mov    -0x1(%eax),%eax
  0xee06fee2:   push   %edi
  0xee06fee3:   push   %eax
  0xee06fee4:   push   %edx
  0xee06fee5:   push   %ecx
  0xee06fee6:   call   0xf704a910 = Thread::current()
  0xee06feeb:   pop    %ecx
  0xee06feec:   pop    %edx
  0xee06feed:   mov    %eax,%edi
  0xee06feef:   pop    %eax
  0xee06fef0:   cmpb   $0x0,0x24(%edi)
  0xee06fef4:   je     0xee06ffa8
  0xee06fefa:   cmp    $0x0,%eax
  0xee06fefd:   je     0xee06ffa8
  0xee06ff03:   mov    0x18(%edi),%ecx
  0xee06ff06:   cmp    $0x0,%ecx
  0xee06ff09:   je     0xee06ff1f
  0xee06ff0f:   sub    $0x4,%ecx
  0xee06ff12:   mov    %ecx,0x18(%edi)
  0xee06ff15:   add    0x20(%edi),%ecx
  0xee06ff18:   mov    %eax,(%ecx)
  0xee06ff1a:   jmp    0xee06ffa8
 ;; push_call_clobbered_registers start
  0xee06ff1f:   sub    $0x50,%esp
  0xee06ff22:   mov    %eax,(%esp)
  0xee06ff25:   mov    %ecx,0x4(%esp)
  0xee06ff29:   mov    %edx,0x8(%esp)
  0xee06ff2d:   vmovsd %xmm0,0x10(%esp)
  0xee06ff33:   vmovsd %xmm1,0x18(%esp)
  0xee06ff39:   vmovsd %xmm2,0x20(%esp)
  0xee06ff3f:   vmovsd %xmm3,0x28(%esp)
  0xee06ff45:   vmovsd %xmm4,0x30(%esp)
  0xee06ff4b:   vmovsd %xmm5,0x38(%esp)
  0xee06ff51:   vmovsd %xmm6,0x40(%esp)
  0xee06ff57:   vmovsd %xmm7,0x48(%esp)
 ;; push_call_clobbered_registers end
  0xee06ff5d:   push   %edi
  0xee06ff5e:   push   %eax
  0xee06ff5f:   call   0xf6a17f10 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0xee06ff64:   add    $0x8,%esp
 ;; pop_call_clobbered_registers start
  0xee06ff67:   vmovsd 0x48(%esp),%xmm7
  0xee06ff6d:   vmovsd 0x40(%esp),%xmm6
  0xee06ff73:   vmovsd 0x38(%esp),%xmm5
  0xee06ff79:   vmovsd 0x30(%esp),%xmm4
  0xee06ff7f:   vmovsd 0x28(%esp),%xmm3
  0xee06ff85:   vmovsd 0x20(%esp),%xmm2
  0xee06ff8b:   vmovsd 0x18(%esp),%xmm1
  0xee06ff91:   vmovsd 0x10(%esp),%xmm0
  0xee06ff97:   mov    0x8(%esp),%edx
  0xee06ff9b:   mov    0x4(%esp),%ecx
  0xee06ff9f:   mov    (%esp),%eax
  0xee06ffa2:   add    $0x50,%esp
  0xee06ffa5:   vzeroupper 
 ;; pop_call_clobbered_registers end
  0xee06ffa8:   pop    %edi
  0xee06ffa9:   mov    %eax,0x8(%ebp)               ;; 1168:     __ movptr(Address(rbp, frame::interpreter_frame_oop_temp_offset*wordSize), rax);
  0xee06ffac:   push   %edx                         ;; 1170:     __ push(ltos);
  0xee06ffad:   push   %eax
  0xee06ffae:   cmpl   $0x2,0x2bc(%edi)             ;; 1171:     __ bind(no_oop);
                                                    ;; 1177:     __ cmpl(Address(thread, JavaThread::stack_guard_state_offset()),
  0xee06ffb5:   jne    0xee06ffc2                   ;; 1179:     __ jcc(Assembler::notEqual, no_reguard);
  0xee06ffbb:   pusha                               ;; 1181:     __ pusha(); // XXX only save smashed registers
  0xee06ffbc:   call   0xf739cc70 = SharedRuntime::reguard_yellow_pages()
                                                    ;; 1183:     __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, SharedRuntime::reguard_yellow_pages)));
  0xee06ffc1:   popa                                ;; 1184:     __ popa();
  0xee06ffc2:   mov    -0xc(%ebp),%ebx              ;; 1195:     __ bind(no_reguard);
                                                    ;; 1202:   __ get_method(method);
  0xee06ffc5:   mov    0x8(%ebx),%esi               ;; 1205:   __ movptr(rbcp, Address(method, Method::const_offset()));   // get ConstMethod*
  0xee06ffc8:   lea    0x2c(%esi),%esi              ;; 1206:   __ lea(rbcp, Address(rbcp, ConstMethod::codes_offset()));    // get codebase
  0xee06ffcb:   cmpl   $0x0,0x4(%edi)               ;; 1211:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee06ffcf:   je     0xee070091                   ;; 1212:     __ jcc(Assembler::zero, L);
  0xee06ffd5:   call   0xee06ffdf                   ;; 1217:     __ MacroAssembler::call_VM(noreg,
  0xee06ffda:   jmp    0xee070080
  0xee06ffdf:   lea    0x4(%esp),%eax
  0xee06ffe3:   mov    %esi,-0x20(%ebp)
  0xee06ffe6:   cmpl   $0x0,-0x8(%ebp)
  0xee06ffea:   je     0xee070001
  0xee06fff0:   push   $0xf78569d8
  0xee06fff5:   call   0xee06fffa
  0xee06fffa:   pusha  
  0xee06fffb:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee070000:   hlt    
  0xee070001:   push   %eax
  0xee070002:   push   %edx
  0xee070003:   push   %ecx
  0xee070004:   call   0xf704a910 = Thread::current()
  0xee070009:   pop    %ecx
  0xee07000a:   pop    %edx
  0xee07000b:   mov    %eax,%edi
  0xee07000d:   pop    %eax
  0xee07000e:   push   %edi
  0xee07000f:   vzeroupper 
  0xee070012:   mov    %ebp,0x230(%edi)
  0xee070018:   mov    %eax,0x228(%edi)
  0xee07001e:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee070023:   add    $0x4,%esp
  0xee070026:   push   %eax
  0xee070027:   push   %edx
  0xee070028:   push   %ecx
  0xee070029:   call   0xf704a910 = Thread::current()
  0xee07002e:   pop    %ecx
  0xee07002f:   pop    %edx
  0xee070030:   cmp    %eax,%edi
  0xee070032:   je     0xee070049
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee070038:   push   $0xf78b5a48
  0xee07003d:   call   0xee070042
  0xee070042:   pusha  
  0xee070043:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee070048:   hlt    
  0xee070049:   pop    %eax
  0xee07004a:   movl   $0x0,0x228(%edi)
  0xee070054:   movl   $0x0,0x230(%edi)
  0xee07005e:   movl   $0x0,0x22c(%edi)
  0xee070068:   vzeroupper 
  0xee07006b:   cmpl   $0x0,0x4(%edi)
  0xee07006f:   jne    0xee05bbe0
  0xee070075:   mov    -0x20(%ebp),%esi
  0xee070078:   mov    -0x1c(%ebp),%edi
  0xee07007b:   lea    0x0(%ebp,%edi,4),%edi
  0xee07007f:   ret    
  0xee070080:   push   $0xf77a6b02                  ;; 1220:     __ should_not_reach_here();
  0xee070085:   call   0xee07008a
  0xee07008a:   pusha  
  0xee07008b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee070090:   hlt    
  0xee070091:   mov    0x18(%ebx),%ecx              ;; 1221:     __ bind(L);
                                                    ;; 1227:     __ movl(t, Address(method, Method::access_flags_offset()));
  0xee070094:   test   $0x20,%cl                    ;; 1228:     __ testl(t, JVM_ACC_SYNCHRONIZED);
  0xee070097:   je     0xee0701ca                   ;; 1229:     __ jcc(Assembler::zero, L);
  0xee07009d:   lea    -0x2c(%ebp),%edx             ;; 1244:       __ lea(regmon, monitor); // address of first monitor
  0xee0700a0:   mov    0x4(%edx),%ecx               ;; 1246:       __ movptr(t, Address(regmon, BasicObjectLock::obj_offset_in_bytes()));
  0xee0700a3:   test   %ecx,%ecx                    ;; 1247:       __ testptr(t, t);
  0xee0700a5:   jne    0xee070167                   ;; 1248:       __ jcc(Assembler::notZero, unlock);
  0xee0700ab:   call   0xee0700b5                   ;; 1251:       __ MacroAssembler::call_VM(noreg,
  0xee0700b0:   jmp    0xee070156
  0xee0700b5:   lea    0x4(%esp),%eax
  0xee0700b9:   mov    %esi,-0x20(%ebp)
  0xee0700bc:   cmpl   $0x0,-0x8(%ebp)
  0xee0700c0:   je     0xee0700d7
  0xee0700c6:   push   $0xf78569d8
  0xee0700cb:   call   0xee0700d0
  0xee0700d0:   pusha  
  0xee0700d1:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0700d6:   hlt    
  0xee0700d7:   push   %eax
  0xee0700d8:   push   %edx
  0xee0700d9:   push   %ecx
  0xee0700da:   call   0xf704a910 = Thread::current()
  0xee0700df:   pop    %ecx
  0xee0700e0:   pop    %edx
  0xee0700e1:   mov    %eax,%edi
  0xee0700e3:   pop    %eax
  0xee0700e4:   push   %edi
  0xee0700e5:   vzeroupper 
  0xee0700e8:   mov    %ebp,0x230(%edi)
  0xee0700ee:   mov    %eax,0x228(%edi)
  0xee0700f4:   call   0xf6c0c900 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0xee0700f9:   add    $0x4,%esp
  0xee0700fc:   push   %eax
  0xee0700fd:   push   %edx
  0xee0700fe:   push   %ecx
  0xee0700ff:   call   0xf704a910 = Thread::current()
  0xee070104:   pop    %ecx
  0xee070105:   pop    %edx
  0xee070106:   cmp    %eax,%edi
  0xee070108:   je     0xee07011f
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07010e:   push   $0xf78b5a48
  0xee070113:   call   0xee070118
  0xee070118:   pusha  
  0xee070119:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07011e:   hlt    
  0xee07011f:   pop    %eax
  0xee070120:   movl   $0x0,0x228(%edi)
  0xee07012a:   movl   $0x0,0x230(%edi)
  0xee070134:   movl   $0x0,0x22c(%edi)
  0xee07013e:   vzeroupper 
  0xee070141:   cmpl   $0x0,0x4(%edi)
  0xee070145:   jne    0xee05bbe0
  0xee07014b:   mov    -0x20(%ebp),%esi
  0xee07014e:   mov    -0x1c(%ebp),%edi
  0xee070151:   lea    0x0(%ebp,%edi,4),%edi
  0xee070155:   ret    
  0xee070156:   push   $0xf77a6b02                  ;; 1254:       __ should_not_reach_here();
  0xee07015b:   call   0xee070160
  0xee070160:   pusha  
  0xee070161:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee070166:   hlt    
  0xee070167:   mov    %esi,-0x20(%ebp)             ;; 1256:       __ bind(unlock);
                                                    ;; 1257:       __ unlock_object(regmon);
  0xee07016a:   lea    (%edx),%eax
  0xee07016c:   mov    0x4(%edx),%ecx
  0xee07016f:   movl   $0x0,0x4(%edx)
  0xee070176:   mov    (%eax),%ebx
  0xee070178:   test   %ebx,%ebx
  0xee07017a:   je     0xee07018a
  0xee070180:   lock cmpxchg %ebx,(%ecx)
  0xee070184:   jne    0xee0701a0
  0xee07018a:   push   %eax
  0xee07018b:   push   %edx
  0xee07018c:   push   %ecx
  0xee07018d:   call   0xf704a910 = Thread::current()
  0xee070192:   pop    %ecx
  0xee070193:   pop    %edx
  0xee070194:   decl   0x308(%eax)
  0xee07019a:   pop    %eax
  0xee07019b:   jmp    0xee0701c7
  0xee0701a0:   mov    %ecx,0x4(%edx)
  0xee0701a3:   push   %edx
  0xee0701a4:   cmpl   $0x0,-0x8(%ebp)
  0xee0701a8:   je     0xee0701bf
  0xee0701ae:   push   $0xf785694c
  0xee0701b3:   call   0xee0701b8
  0xee0701b8:   pusha  
  0xee0701b9:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0701be:   hlt    
  0xee0701bf:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee0701c4:   add    $0x4,%esp
  0xee0701c7:   mov    -0x20(%ebp),%esi
  0xee0701ca:   cmpb   $0x0,0xf7ca3a0d              ;; 1259:     __ bind(L);
                                                    ;; 1267:   __ notify_method_exit(vtos, InterpreterMacroAssembler::NotifyJVMTI);
  0xee0701d1:   je     0xee07020c
  0xee0701d7:   push   %eax
  0xee0701d8:   push   %edx
  0xee0701d9:   push   %ecx
  0xee0701da:   call   0xf704a910 = Thread::current()
  0xee0701df:   pop    %ecx
  0xee0701e0:   pop    %edx
  0xee0701e1:   mov    %eax,%ecx
  0xee0701e3:   pop    %eax
  0xee0701e4:   mov    -0xc(%ebp),%ebx
  0xee0701e7:   push   %ebx
  0xee0701e8:   push   %ecx
  0xee0701e9:   cmpl   $0x0,-0x8(%ebp)
  0xee0701ed:   je     0xee070204
  0xee0701f3:   push   $0xf785694c
  0xee0701f8:   call   0xee0701fd
  0xee0701fd:   pusha  
  0xee0701fe:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee070203:   hlt    
  0xee070204:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee070209:   add    $0x8,%esp
  0xee07020c:   pop    %eax                         ;; 1272:   __ pop(ltos);
  0xee07020d:   pop    %edx
  0xee07020e:   mov    0xc(%ebp),%ecx               ;; 1275:   __ movptr(t, Address(rbp,
  0xee070211:   call   *%ecx                        ;; 1277:   __ call(t);
  0xee070213:   mov    -0x4(%ebp),%ecx              ;; 1280:   __ movptr(t, Address(rbp,
  0xee070216:   mov    %ebp,%esp                    ;; 1283:   __ leave();                                // remove frame anchor
  0xee070218:   pop    %ebp
  0xee070219:   pop    %edi                         ;; 1284:   __ pop(rdi);                               // get return address
  0xee07021a:   mov    %ecx,%esp                    ;; 1285:   __ mov(rsp, t);                            // set sp to sender sp
  0xee07021c:   jmp    *%edi                        ;; 1286:   __ jmp(rdi);
  0xee07021e:   mov    $0x0,%eax                    ;; 1290:     __ bind(invocation_counter_overflow);
                                                    ;;  442:   __ movl(rarg, 0);
  0xee070223:   call   0xee07022d                   ;;  443:   __ call_VM(noreg,
  0xee070228:   jmp    0xee0702cf
  0xee07022d:   push   %eax
  0xee07022e:   lea    0x8(%esp),%eax
  0xee070232:   mov    %esi,-0x20(%ebp)
  0xee070235:   cmpl   $0x0,-0x8(%ebp)
  0xee070239:   je     0xee070250
  0xee07023f:   push   $0xf78569d8
  0xee070244:   call   0xee070249
  0xee070249:   pusha  
  0xee07024a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07024f:   hlt    
  0xee070250:   push   %eax
  0xee070251:   push   %edx
  0xee070252:   push   %ecx
  0xee070253:   call   0xf704a910 = Thread::current()
  0xee070258:   pop    %ecx
  0xee070259:   pop    %edx
  0xee07025a:   mov    %eax,%edi
  0xee07025c:   pop    %eax
  0xee07025d:   push   %edi
  0xee07025e:   vzeroupper 
  0xee070261:   mov    %ebp,0x230(%edi)
  0xee070267:   mov    %eax,0x228(%edi)
  0xee07026d:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee070272:   add    $0x8,%esp
  0xee070275:   push   %eax
  0xee070276:   push   %edx
  0xee070277:   push   %ecx
  0xee070278:   call   0xf704a910 = Thread::current()
  0xee07027d:   pop    %ecx
  0xee07027e:   pop    %edx
  0xee07027f:   cmp    %eax,%edi
  0xee070281:   je     0xee070298
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee070287:   push   $0xf78b5a48
  0xee07028c:   call   0xee070291
  0xee070291:   pusha  
  0xee070292:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee070297:   hlt    
  0xee070298:   pop    %eax
  0xee070299:   movl   $0x0,0x228(%edi)
  0xee0702a3:   movl   $0x0,0x230(%edi)
  0xee0702ad:   movl   $0x0,0x22c(%edi)
  0xee0702b7:   vzeroupper 
  0xee0702ba:   cmpl   $0x0,0x4(%edi)
  0xee0702be:   jne    0xee05bbe0
  0xee0702c4:   mov    -0x20(%ebp),%esi
  0xee0702c7:   mov    -0x1c(%ebp),%edi
  0xee0702ca:   lea    0x0(%ebp,%edi,4),%edi
  0xee0702ce:   ret    
  0xee0702cf:   mov    -0xc(%ebp),%ebx              ;;  448:   __ movptr(rbx, Address(rbp, method_offset));   // restore Method*
  0xee0702d2:   jmp    0xee06f98d                   ;;  451:   __ jmp(do_continue, relocInfo::none);
  0xee0702d7:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_update)  [0xee070300, 0xee070344]  68 bytes

--------------------------------------------------------------------------------
  0xee070300:   push   %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;   57:     address entry = __ pc();
                                                    ;;   66:     __ get_thread(rdi);
  0xee070301:   push   %edx
  0xee070302:   push   %ecx
  0xee070303:   call   0xf704a910 = Thread::current()
  0xee070308:   pop    %ecx
  0xee070309:   pop    %edx
  0xee07030a:   mov    %eax,%edi
  0xee07030c:   pop    %eax
  0xee07030d:   testb  $0x1,0x288(%edi)             ;;   67:     __ safepoint_poll(slow_path, rdi, false /* at_return */, false /* in_nmethod */);
  0xee070314:   jne    0xee07033e
  0xee07031a:   mov    0x4(%esp),%edx               ;;   78:     __ movl(val, Address(rsp,   wordSize)); // byte value
  0xee07031e:   mov    0x8(%esp),%eax               ;;   79:     __ movl(crc, Address(rsp, 2*wordSize)); // Initial CRC
  0xee070322:   mov    $0xf7c460e0,%edi             ;;   81:     __ lea(tbl, ExternalAddress(StubRoutines::crc_table_addr()));
  0xee070327:   not    %eax                         ;;   82:     __ notl(crc); // ~crc
  0xee070329:   xor    %eax,%edx                    ;;   83:     __ update_byte_crc32(crc, val, tbl);
  0xee07032b:   and    $0xff,%edx
  0xee070331:   shr    $0x8,%eax
  0xee070334:   xor    (%edi,%edx,4),%eax
  0xee070337:   not    %eax                         ;;   84:     __ notl(crc); // ~crc
  0xee070339:   pop    %edi                         ;;   88:     __ pop(rdi);                // get return address
  0xee07033a:   mov    %esi,%esp                    ;;   89:     __ mov(rsp, rsi);           // set sp to sender sp
  0xee07033c:   jmp    *%edi                        ;;   90:     __ jmp(rdi);
  0xee07033e:   jmp    0xee06ede0                   ;;   93:     __ bind(slow_path);
                                                    ;;   94:     __ jump_to_entry(Interpreter::entry_for_kind(Interpreter::native));
  0xee070343:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_updateBytes)  [0xee070360, 0xee0703a4]  68 bytes

--------------------------------------------------------------------------------
  0xee070360:   push   %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  107:     address entry = __ pc();
                                                    ;;  116:     __ get_thread(rdi);
  0xee070361:   push   %edx
  0xee070362:   push   %ecx
  0xee070363:   call   0xf704a910 = Thread::current()
  0xee070368:   pop    %ecx
  0xee070369:   pop    %edx
  0xee07036a:   mov    %eax,%edi
  0xee07036c:   pop    %eax
  0xee07036d:   testb  $0x1,0x288(%edi)             ;;  117:     __ safepoint_poll(slow_path, rdi, false /* at_return */, false /* in_nmethod */);
  0xee070374:   jne    0xee07039d
  0xee07037a:   mov    0x4(%esp),%edi               ;;  135:     __ movl(len,   Address(rsp,   4 + 0)); // Length
  0xee07037e:   mov    0xc(%esp),%edx               ;;  142:       __ movptr(buf, Address(rsp, 4 + 2 * wordSize)); // byte[] array
  0xee070382:   add    $0xc,%edx                    ;;  143:       __ addptr(buf, arrayOopDesc::base_offset_in_bytes(T_BYTE)); // + header size
  0xee070385:   add    0x8(%esp),%edx               ;;  144:       __ addptr(buf, Address(rsp, 4 + 1 * wordSize)); // + offset
  0xee070389:   mov    0x10(%esp),%eax              ;;  145:       __ movl(crc,   Address(rsp, 4 + 3 * wordSize)); // Initial CRC
  0xee07038d:   push   %edi                         ;;  148:     __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, StubRoutines::updateBytesCRC32()), crc, buf, len);
  0xee07038e:   push   %edx
  0xee07038f:   push   %eax
  0xee070390:   call   0xee05bde0
  0xee070395:   add    $0xc,%esp
  0xee070398:   pop    %edi                         ;;  152:     __ pop(rdi);                // get return address
  0xee070399:   mov    %esi,%esp                    ;;  153:     __ mov(rsp, rsi);           // set sp to sender sp
  0xee07039b:   jmp    *%edi                        ;;  154:     __ jmp(rdi);
  0xee07039d:   jmp    0xee06ede0                   ;;  157:     __ bind(slow_path);
                                                    ;;  158:     __ jump_to_entry(Interpreter::entry_for_kind(Interpreter::native));
  0xee0703a2:   nop
  0xee0703a3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_updateByteBuffer)  [0xee0703c0, 0xee070400]  64 bytes

--------------------------------------------------------------------------------
  0xee0703c0:   push   %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  107:     address entry = __ pc();
                                                    ;;  116:     __ get_thread(rdi);
  0xee0703c1:   push   %edx
  0xee0703c2:   push   %ecx
  0xee0703c3:   call   0xf704a910 = Thread::current()
  0xee0703c8:   pop    %ecx
  0xee0703c9:   pop    %edx
  0xee0703ca:   mov    %eax,%edi
  0xee0703cc:   pop    %eax
  0xee0703cd:   testb  $0x1,0x288(%edi)             ;;  117:     __ safepoint_poll(slow_path, rdi, false /* at_return */, false /* in_nmethod */);
  0xee0703d4:   jne    0xee0703fa
  0xee0703da:   mov    0x4(%esp),%edi               ;;  135:     __ movl(len,   Address(rsp,   4 + 0)); // Length
  0xee0703de:   mov    0xc(%esp),%edx               ;;  138:       __ movptr(buf, Address(rsp, 4 + 2 * wordSize)); // long buf
  0xee0703e2:   add    0x8(%esp),%edx               ;;  139:       __ addptr(buf, Address(rsp, 4 + 1 * wordSize)); // + offset
  0xee0703e6:   mov    0x14(%esp),%eax              ;;  140:       __ movl(crc,   Address(rsp, 4 + 4 * wordSize)); // Initial CRC
  0xee0703ea:   push   %edi                         ;;  148:     __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, StubRoutines::updateBytesCRC32()), crc, buf, len);
  0xee0703eb:   push   %edx
  0xee0703ec:   push   %eax
  0xee0703ed:   call   0xee05bde0
  0xee0703f2:   add    $0xc,%esp
  0xee0703f5:   pop    %edi                         ;;  152:     __ pop(rdi);                // get return address
  0xee0703f6:   mov    %esi,%esp                    ;;  153:     __ mov(rsp, rsi);           // set sp to sender sp
  0xee0703f8:   jmp    *%edi                        ;;  154:     __ jmp(rdi);
  0xee0703fa:   jmp    0xee06ede0                   ;;  157:     __ bind(slow_path);
                                                    ;;  158:     __ jump_to_entry(Interpreter::entry_for_kind(Interpreter::native));
  0xee0703ff:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32C_updateBytes)  [0xee070420, 0xee070448]  40 bytes

--------------------------------------------------------------------------------
  0xee070420:   mov    0x4(%esp),%edx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  171:     address entry = __ pc();
                                                    ;;  186:     __ movl(end, Address(rsp, 4 + 0)); // end
  0xee070424:   sub    0x8(%esp),%edx               ;;  187:     __ subl(len, Address(rsp, 4 + 1 * wordSize));  // end - offset == length
  0xee070428:   mov    0xc(%esp),%ecx               ;;  194:       __ movptr(buf, Address(rsp, 4 + 2 * wordSize)); // byte[] array
  0xee07042c:   add    $0xc,%ecx                    ;;  195:       __ addptr(buf, arrayOopDesc::base_offset_in_bytes(T_BYTE)); // + header size
  0xee07042f:   add    0x8(%esp),%ecx               ;;  196:       __ addptr(buf, Address(rsp, 4 + 1 * wordSize)); // + offset
  0xee070433:   mov    0x10(%esp),%eax              ;;  197:       __ movl(crc, Address(rsp, 4 + 3 * wordSize)); // Initial CRC
  0xee070437:   push   %edx                         ;;  199:     __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, StubRoutines::updateBytesCRC32C()), crc, buf, len);
  0xee070438:   push   %ecx
  0xee070439:   push   %eax
  0xee07043a:   call   0xee05c060
  0xee07043f:   add    $0xc,%esp
  0xee070442:   pop    %edi                         ;;  202:     __ pop(rdi);                // get return address
  0xee070443:   mov    %esi,%esp                    ;;  203:     __ mov(rsp, rsi);           // set sp to sender sp
  0xee070445:   jmp    *%edi                        ;;  204:     __ jmp(rdi);
  0xee070447:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32C_updateDirectByteBuffer)  [0xee070460, 0xee070484]  36 bytes

--------------------------------------------------------------------------------
  0xee070460:   mov    0x4(%esp),%edx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  171:     address entry = __ pc();
                                                    ;;  186:     __ movl(end, Address(rsp, 4 + 0)); // end
  0xee070464:   sub    0x8(%esp),%edx               ;;  187:     __ subl(len, Address(rsp, 4 + 1 * wordSize));  // end - offset == length
  0xee070468:   mov    0xc(%esp),%ecx               ;;  190:       __ movptr(buf, Address(rsp, 4 + 2 * wordSize)); // long address
  0xee07046c:   add    0x8(%esp),%ecx               ;;  191:       __ addptr(buf, Address(rsp, 4 + 1 * wordSize)); // + offset
  0xee070470:   mov    0x14(%esp),%eax              ;;  192:       __ movl(crc, Address(rsp, 4 + 4 * wordSize)); // Initial CRC
  0xee070474:   push   %edx                         ;;  199:     __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, StubRoutines::updateBytesCRC32C()), crc, buf, len);
  0xee070475:   push   %ecx
  0xee070476:   push   %eax
  0xee070477:   call   0xee05c060
  0xee07047c:   add    $0xc,%esp
  0xee07047f:   pop    %edi                         ;;  202:     __ pop(rdi);                // get return address
  0xee070480:   mov    %esi,%esp                    ;;  203:     __ mov(rsp, rsi);           // set sp to sender sp
  0xee070482:   jmp    *%edi                        ;;  204:     __ jmp(rdi);
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_Float_intBitsToFloat)  [0xee0704a0, 0xee0704ac]  12 bytes

--------------------------------------------------------------------------------
  0xee0704a0:   vmovss 0x4(%esp),%xmm0              ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  217:     address entry = __ pc();
                                                    ;;  225:     __ movflt(xmm0, Address(rsp, wordSize));
  0xee0704a6:   pop    %edi                         ;;  228:     __ pop(rdi); // get return address
  0xee0704a7:   mov    %esi,%esp                    ;;  229:     __ mov(rsp, rsi); // set rsp to the sender's SP
  0xee0704a9:   jmp    *%edi                        ;;  230:     __ jmp(rdi);
  0xee0704ab:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_Float_floatToRawIntBits)  [0xee0704c0, 0xee0704cc]  12 bytes

--------------------------------------------------------------------------------
  0xee0704c0:   mov    0x4(%esp),%eax               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  243:     address entry = __ pc();
                                                    ;;  251:     __ movl(rax, Address(rsp, wordSize));
  0xee0704c4:   pop    %edi                         ;;  254:     __ pop(rdi); // get return address
  0xee0704c5:   mov    %esi,%esp                    ;;  255:     __ mov(rsp, rsi); // set rsp to the sender's SP
  0xee0704c7:   jmp    *%edi                        ;;  256:     __ jmp(rdi);
  0xee0704c9:   nop
  0xee0704ca:   nop
  0xee0704cb:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_Double_longBitsToDouble)  [0xee0704e0, 0xee0704ec]  12 bytes

--------------------------------------------------------------------------------
  0xee0704e0:   vmovsd 0x4(%esp),%xmm0              ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  270:      address entry = __ pc();
                                                    ;;  278:      __ movdbl(xmm0, Address(rsp, wordSize));
  0xee0704e6:   pop    %edi                         ;;  281:      __ pop(rdi); // get return address
  0xee0704e7:   mov    %esi,%esp                    ;;  282:      __ mov(rsp, rsi); // set rsp to the sender's SP
  0xee0704e9:   jmp    *%edi                        ;;  283:      __ jmp(rdi);
  0xee0704eb:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_Double_doubleToRawLongBits)  [0xee070500, 0xee070510]  16 bytes

--------------------------------------------------------------------------------
  0xee070500:   mov    0x8(%esp),%edx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  296:     address entry = __ pc();
                                                    ;;  304:     __ movl(rdx, Address(rsp, 2*wordSize));
  0xee070504:   mov    0x4(%esp),%eax               ;;  305:     __ movl(rax, Address(rsp, wordSize));
  0xee070508:   pop    %edi                         ;;  308:     __ pop(rdi); // get return address
  0xee070509:   mov    %esi,%esp                    ;;  309:     __ mov(rsp, rsi); // set rsp to the sender's SP
  0xee07050b:   jmp    *%edi                        ;;  310:     __ jmp(rdi);
  0xee07050d:   nop
  0xee07050e:   nop
  0xee07050f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_Float_float16ToFloat)  [0xee070540, 0xee070554]  20 bytes

--------------------------------------------------------------------------------
  0xee070540:   movswl 0x4(%esp),%eax               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  328:   address entry = __ pc();
                                                    ;;  333:   __ movswl(rax, Address(rsp, wordSize));
  0xee070545:   vmovd  %eax,%xmm0                   ;;  334:   __ flt16_to_flt(xmm0, rax);
  0xee070549:   vcvtph2ps %xmm0,%xmm0
  0xee07054e:   pop    %edi                         ;;  337:   __ pop(rdi); // get return address
  0xee07054f:   mov    %esi,%esp                    ;;  338:   __ mov(rsp, rsi); // set rsp to the sender's SP
  0xee070551:   jmp    *%edi                        ;;  339:   __ jmp(rdi);
  0xee070553:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
method entry point (kind = java_lang_Float_floatToFloat16)  [0xee070580, 0xee070598]  24 bytes

--------------------------------------------------------------------------------
  0xee070580:   vmovss 0x4(%esp),%xmm0              ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_32.cpp
                                                    ;;  354:   address entry = __ pc();
                                                    ;;  359:   __ movflt(xmm0, Address(rsp, wordSize));
  0xee070586:   vcvtps2ph $0x4,%xmm0,%xmm1          ;;  360:   __ flt_to_flt16(rax, xmm0, xmm1);
  0xee07058c:   vmovd  %xmm1,%eax
  0xee070590:   movswl %ax,%eax
  0xee070593:   pop    %edi                         ;;  363:   __ pop(rdi); // get return address
  0xee070594:   mov    %esi,%esp                    ;;  364:   __ mov(rsp, rsi); // set rsp to the sender's SP
  0xee070596:   jmp    *%edi                        ;;  365:   __ jmp(rdi);
--------------------------------------------------------------------------------

----------------------------------------------------------------------
nop  0 nop  [0xee0705c0, 0xee0705e8]  40 bytes

--------------------------------------------------------------------------------
  0xee0705c0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0705c3:   vmovss %xmm0,(%esp)
  0xee0705c8:   jmp    0xee0705d9                   ;; 1751:       __ jmpb(L);
  0xee0705ca:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0705cd:   vmovsd %xmm0,(%esp)
  0xee0705d2:   jmp    0xee0705d9                   ;; 1754:       __ jmpb(L);
  0xee0705d4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0705d5:   push   %eax
  0xee0705d6:   jmp    0xee0705d9                   ;; 1765:       __ jmpb(L);
  0xee0705d8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0705d9:   movzbl 0x1(%esi),%ebx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0705dd:   inc    %esi
  0xee0705de:   jmp    *-0x833caa0(,%ebx,4)
  0xee0705e5:   nop
  0xee0705e6:   nop
  0xee0705e7:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
aconst_null  1 aconst_null  [0xee070600, 0xee070628]  40 bytes

--------------------------------------------------------------------------------
  0xee070600:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee070603:   vmovss %xmm0,(%esp)
  0xee070608:   jmp    0xee070619                   ;; 1751:       __ jmpb(L);
  0xee07060a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07060d:   vmovsd %xmm0,(%esp)
  0xee070612:   jmp    0xee070619                   ;; 1754:       __ jmpb(L);
  0xee070614:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee070615:   push   %eax
  0xee070616:   jmp    0xee070619                   ;; 1765:       __ jmpb(L);
  0xee070618:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee070619:   xor    %eax,%eax                    ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  259:   __ xorl(rax, rax);
  0xee07061b:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07061f:   inc    %esi
  0xee070620:   jmp    *-0x833cea0(,%ebx,4)
  0xee070627:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iconst_m1  2 iconst_m1  [0xee070640, 0xee07066c]  44 bytes

--------------------------------------------------------------------------------
  0xee070640:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee070643:   vmovss %xmm0,(%esp)
  0xee070648:   jmp    0xee070659                   ;; 1751:       __ jmpb(L);
  0xee07064a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07064d:   vmovsd %xmm0,(%esp)
  0xee070652:   jmp    0xee070659                   ;; 1754:       __ jmpb(L);
  0xee070654:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee070655:   push   %eax
  0xee070656:   jmp    0xee070659                   ;; 1765:       __ jmpb(L);
  0xee070658:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee070659:   mov    $0xffffffff,%eax             ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  267:     __ movl(rax, value);
  0xee07065e:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee070662:   inc    %esi
  0xee070663:   jmp    *-0x833dea0(,%ebx,4)
  0xee07066a:   nop
  0xee07066b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iconst_0  3 iconst_0  [0xee070680, 0xee0706a8]  40 bytes

--------------------------------------------------------------------------------
  0xee070680:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee070683:   vmovss %xmm0,(%esp)
  0xee070688:   jmp    0xee070699                   ;; 1751:       __ jmpb(L);
  0xee07068a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07068d:   vmovsd %xmm0,(%esp)
  0xee070692:   jmp    0xee070699                   ;; 1754:       __ jmpb(L);
  0xee070694:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee070695:   push   %eax
  0xee070696:   jmp    0xee070699                   ;; 1765:       __ jmpb(L);
  0xee070698:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee070699:   xor    %eax,%eax                    ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  265:     __ xorl(rax, rax);
  0xee07069b:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07069f:   inc    %esi
  0xee0706a0:   jmp    *-0x833dea0(,%ebx,4)
  0xee0706a7:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iconst_1  4 iconst_1  [0xee0706c0, 0xee0706ec]  44 bytes

--------------------------------------------------------------------------------
  0xee0706c0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0706c3:   vmovss %xmm0,(%esp)
  0xee0706c8:   jmp    0xee0706d9                   ;; 1751:       __ jmpb(L);
  0xee0706ca:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0706cd:   vmovsd %xmm0,(%esp)
  0xee0706d2:   jmp    0xee0706d9                   ;; 1754:       __ jmpb(L);
  0xee0706d4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0706d5:   push   %eax
  0xee0706d6:   jmp    0xee0706d9                   ;; 1765:       __ jmpb(L);
  0xee0706d8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0706d9:   mov    $0x1,%eax                    ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  267:     __ movl(rax, value);
  0xee0706de:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0706e2:   inc    %esi
  0xee0706e3:   jmp    *-0x833dea0(,%ebx,4)
  0xee0706ea:   nop
  0xee0706eb:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iconst_2  5 iconst_2  [0xee070700, 0xee07072c]  44 bytes

--------------------------------------------------------------------------------
  0xee070700:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee070703:   vmovss %xmm0,(%esp)
  0xee070708:   jmp    0xee070719                   ;; 1751:       __ jmpb(L);
  0xee07070a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07070d:   vmovsd %xmm0,(%esp)
  0xee070712:   jmp    0xee070719                   ;; 1754:       __ jmpb(L);
  0xee070714:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee070715:   push   %eax
  0xee070716:   jmp    0xee070719                   ;; 1765:       __ jmpb(L);
  0xee070718:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee070719:   mov    $0x2,%eax                    ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  267:     __ movl(rax, value);
  0xee07071e:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee070722:   inc    %esi
  0xee070723:   jmp    *-0x833dea0(,%ebx,4)
  0xee07072a:   nop
  0xee07072b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iconst_3  6 iconst_3  [0xee070740, 0xee07076c]  44 bytes

--------------------------------------------------------------------------------
  0xee070740:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee070743:   vmovss %xmm0,(%esp)
  0xee070748:   jmp    0xee070759                   ;; 1751:       __ jmpb(L);
  0xee07074a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07074d:   vmovsd %xmm0,(%esp)
  0xee070752:   jmp    0xee070759                   ;; 1754:       __ jmpb(L);
  0xee070754:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee070755:   push   %eax
  0xee070756:   jmp    0xee070759                   ;; 1765:       __ jmpb(L);
  0xee070758:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee070759:   mov    $0x3,%eax                    ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  267:     __ movl(rax, value);
  0xee07075e:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee070762:   inc    %esi
  0xee070763:   jmp    *-0x833dea0(,%ebx,4)
  0xee07076a:   nop
  0xee07076b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iconst_4  7 iconst_4  [0xee070780, 0xee0707ac]  44 bytes

--------------------------------------------------------------------------------
  0xee070780:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee070783:   vmovss %xmm0,(%esp)
  0xee070788:   jmp    0xee070799                   ;; 1751:       __ jmpb(L);
  0xee07078a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07078d:   vmovsd %xmm0,(%esp)
  0xee070792:   jmp    0xee070799                   ;; 1754:       __ jmpb(L);
  0xee070794:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee070795:   push   %eax
  0xee070796:   jmp    0xee070799                   ;; 1765:       __ jmpb(L);
  0xee070798:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee070799:   mov    $0x4,%eax                    ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  267:     __ movl(rax, value);
  0xee07079e:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0707a2:   inc    %esi
  0xee0707a3:   jmp    *-0x833dea0(,%ebx,4)
  0xee0707aa:   nop
  0xee0707ab:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iconst_5  8 iconst_5  [0xee0707c0, 0xee0707ec]  44 bytes

--------------------------------------------------------------------------------
  0xee0707c0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0707c3:   vmovss %xmm0,(%esp)
  0xee0707c8:   jmp    0xee0707d9                   ;; 1751:       __ jmpb(L);
  0xee0707ca:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0707cd:   vmovsd %xmm0,(%esp)
  0xee0707d2:   jmp    0xee0707d9                   ;; 1754:       __ jmpb(L);
  0xee0707d4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0707d5:   push   %eax
  0xee0707d6:   jmp    0xee0707d9                   ;; 1765:       __ jmpb(L);
  0xee0707d8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0707d9:   mov    $0x5,%eax                    ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  267:     __ movl(rax, value);
  0xee0707de:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0707e2:   inc    %esi
  0xee0707e3:   jmp    *-0x833dea0(,%ebx,4)
  0xee0707ea:   nop
  0xee0707eb:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lconst_0  9 lconst_0  [0xee070800, 0xee07082c]  44 bytes

--------------------------------------------------------------------------------
  0xee070800:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee070803:   vmovss %xmm0,(%esp)
  0xee070808:   jmp    0xee070819                   ;; 1751:       __ jmpb(L);
  0xee07080a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07080d:   vmovsd %xmm0,(%esp)
  0xee070812:   jmp    0xee070819                   ;; 1754:       __ jmpb(L);
  0xee070814:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee070815:   push   %eax
  0xee070816:   jmp    0xee070819                   ;; 1765:       __ jmpb(L);
  0xee070818:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee070819:   xor    %eax,%eax                    ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  274:     __ xorl(rax, rax);
  0xee07081b:   xor    %edx,%edx                    ;;  280:   __ xorptr(rdx, rdx);
  0xee07081d:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee070821:   inc    %esi
  0xee070822:   jmp    *-0x833daa0(,%ebx,4)
  0xee070829:   nop
  0xee07082a:   nop
  0xee07082b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lconst_1  10 lconst_1  [0xee070840, 0xee07086c]  44 bytes

--------------------------------------------------------------------------------
  0xee070840:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee070843:   vmovss %xmm0,(%esp)
  0xee070848:   jmp    0xee070859                   ;; 1751:       __ jmpb(L);
  0xee07084a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07084d:   vmovsd %xmm0,(%esp)
  0xee070852:   jmp    0xee070859                   ;; 1754:       __ jmpb(L);
  0xee070854:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee070855:   push   %eax
  0xee070856:   jmp    0xee070859                   ;; 1765:       __ jmpb(L);
  0xee070858:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee070859:   mov    $0x1,%eax                    ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  276:     __ movl(rax, value);
  0xee07085e:   xor    %edx,%edx                    ;;  280:   __ xorptr(rdx, rdx);
  0xee070860:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee070864:   inc    %esi
  0xee070865:   jmp    *-0x833daa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fconst_0  11 fconst_0  [0xee070880, 0xee0708ac]  44 bytes

--------------------------------------------------------------------------------
  0xee070880:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee070883:   vmovss %xmm0,(%esp)
  0xee070888:   jmp    0xee070899                   ;; 1751:       __ jmpb(L);
  0xee07088a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07088d:   vmovsd %xmm0,(%esp)
  0xee070892:   jmp    0xee070899                   ;; 1754:       __ jmpb(L);
  0xee070894:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee070895:   push   %eax
  0xee070896:   jmp    0xee070899                   ;; 1765:       __ jmpb(L);
  0xee070898:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee070899:   vxorps %xmm0,%xmm0,%xmm0            ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  292:       __ xorps(xmm0, xmm0);
  0xee07089d:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0708a1:   inc    %esi
  0xee0708a2:   jmp    *-0x833d6a0(,%ebx,4)
  0xee0708a9:   nop
  0xee0708aa:   nop
  0xee0708ab:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fconst_1  12 fconst_1  [0xee0708c0, 0xee0708f0]  48 bytes

--------------------------------------------------------------------------------
  0xee0708c0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0708c3:   vmovss %xmm0,(%esp)
  0xee0708c8:   jmp    0xee0708d9                   ;; 1751:       __ jmpb(L);
  0xee0708ca:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0708cd:   vmovsd %xmm0,(%esp)
  0xee0708d2:   jmp    0xee0708d9                   ;; 1754:       __ jmpb(L);
  0xee0708d4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0708d5:   push   %eax
  0xee0708d6:   jmp    0xee0708d9                   ;; 1765:       __ jmpb(L);
  0xee0708d8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0708d9:   vmovss 0xf7c46554,%xmm0             ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  295:       __ movflt(xmm0, ExternalAddress((address) &one), rscratch1);
  0xee0708e1:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0708e5:   inc    %esi
  0xee0708e6:   jmp    *-0x833d6a0(,%ebx,4)
  0xee0708ed:   nop
  0xee0708ee:   nop
  0xee0708ef:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fconst_2  13 fconst_2  [0xee070920, 0xee070950]  48 bytes

--------------------------------------------------------------------------------
  0xee070920:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee070923:   vmovss %xmm0,(%esp)
  0xee070928:   jmp    0xee070939                   ;; 1751:       __ jmpb(L);
  0xee07092a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07092d:   vmovsd %xmm0,(%esp)
  0xee070932:   jmp    0xee070939                   ;; 1754:       __ jmpb(L);
  0xee070934:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee070935:   push   %eax
  0xee070936:   jmp    0xee070939                   ;; 1765:       __ jmpb(L);
  0xee070938:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee070939:   vmovss 0xf7c46550,%xmm0             ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  298:       __ movflt(xmm0, ExternalAddress((address) &two), rscratch1);
  0xee070941:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee070945:   inc    %esi
  0xee070946:   jmp    *-0x833d6a0(,%ebx,4)
  0xee07094d:   nop
  0xee07094e:   nop
  0xee07094f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dconst_0  14 dconst_0  [0xee070980, 0xee0709ac]  44 bytes

--------------------------------------------------------------------------------
  0xee070980:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee070983:   vmovss %xmm0,(%esp)
  0xee070988:   jmp    0xee070999                   ;; 1751:       __ jmpb(L);
  0xee07098a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07098d:   vmovsd %xmm0,(%esp)
  0xee070992:   jmp    0xee070999                   ;; 1754:       __ jmpb(L);
  0xee070994:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee070995:   push   %eax
  0xee070996:   jmp    0xee070999                   ;; 1765:       __ jmpb(L);
  0xee070998:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee070999:   vxorpd %xmm0,%xmm0,%xmm0            ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  323:       __ xorpd(xmm0, xmm0);
  0xee07099d:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0709a1:   inc    %esi
  0xee0709a2:   jmp    *-0x833d2a0(,%ebx,4)
  0xee0709a9:   nop
  0xee0709aa:   nop
  0xee0709ab:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dconst_1  15 dconst_1  [0xee0709c0, 0xee0709f0]  48 bytes

--------------------------------------------------------------------------------
  0xee0709c0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0709c3:   vmovss %xmm0,(%esp)
  0xee0709c8:   jmp    0xee0709d9                   ;; 1751:       __ jmpb(L);
  0xee0709ca:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0709cd:   vmovsd %xmm0,(%esp)
  0xee0709d2:   jmp    0xee0709d9                   ;; 1754:       __ jmpb(L);
  0xee0709d4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0709d5:   push   %eax
  0xee0709d6:   jmp    0xee0709d9                   ;; 1765:       __ jmpb(L);
  0xee0709d8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0709d9:   vmovsd 0xf7c46548,%xmm0             ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  326:       __ movdbl(xmm0, ExternalAddress((address) &one), rscratch1);
  0xee0709e1:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0709e5:   inc    %esi
  0xee0709e6:   jmp    *-0x833d2a0(,%ebx,4)
  0xee0709ed:   nop
  0xee0709ee:   nop
  0xee0709ef:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
bipush  16 bipush  [0xee070a20, 0xee070a4c]  44 bytes

--------------------------------------------------------------------------------
  0xee070a20:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee070a23:   vmovss %xmm0,(%esp)
  0xee070a28:   jmp    0xee070a39                   ;; 1751:       __ jmpb(L);
  0xee070a2a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee070a2d:   vmovsd %xmm0,(%esp)
  0xee070a32:   jmp    0xee070a39                   ;; 1754:       __ jmpb(L);
  0xee070a34:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee070a35:   push   %eax
  0xee070a36:   jmp    0xee070a39                   ;; 1765:       __ jmpb(L);
  0xee070a38:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee070a39:   movsbl 0x1(%esi),%eax               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  346:   __ load_signed_byte(rax, at_bcp(1));
  0xee070a3d:   movzbl 0x2(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee070a41:   add    $0x2,%esi
  0xee070a44:   jmp    *-0x833dea0(,%ebx,4)
  0xee070a4b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
sipush  17 sipush  [0xee070a60, 0xee070a90]  48 bytes

--------------------------------------------------------------------------------
  0xee070a60:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee070a63:   vmovss %xmm0,(%esp)
  0xee070a68:   jmp    0xee070a79                   ;; 1751:       __ jmpb(L);
  0xee070a6a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee070a6d:   vmovsd %xmm0,(%esp)
  0xee070a72:   jmp    0xee070a79                   ;; 1754:       __ jmpb(L);
  0xee070a74:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee070a75:   push   %eax
  0xee070a76:   jmp    0xee070a79                   ;; 1765:       __ jmpb(L);
  0xee070a78:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee070a79:   movzwl 0x1(%esi),%eax               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  351:   __ load_unsigned_short(rax, at_bcp(1));
  0xee070a7d:   bswap  %eax                         ;;  352:   __ bswapl(rax);
  0xee070a7f:   sar    $0x10,%eax                   ;;  353:   __ sarl(rax, 16);
  0xee070a82:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee070a86:   add    $0x3,%esi
  0xee070a89:   jmp    *-0x833dea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ldc  18 ldc  [0xee070ac0, 0xee070d64]  676 bytes

--------------------------------------------------------------------------------
  0xee070ac0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee070ac3:   vmovss %xmm0,(%esp)
  0xee070ac8:   jmp    0xee070ad9                   ;; 1751:       __ jmpb(L);
  0xee070aca:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee070acd:   vmovsd %xmm0,(%esp)
  0xee070ad2:   jmp    0xee070ad9                   ;; 1754:       __ jmpb(L);
  0xee070ad4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee070ad5:   push   %eax
  0xee070ad6:   jmp    0xee070ad9                   ;; 1765:       __ jmpb(L);
  0xee070ad8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee070ad9:   movzbl 0x1(%esi),%ebx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  364:     __ load_unsigned_byte(rbx, at_bcp(1));
  0xee070add:   mov    -0xc(%ebp),%ecx              ;;  367:   __ get_cpool_and_tags(rcx, rax);
  0xee070ae0:   mov    0x8(%ecx),%ecx
  0xee070ae3:   mov    0x8(%ecx),%ecx
  0xee070ae6:   mov    0x8(%ecx),%eax
  0xee070ae9:   movzbl 0x4(%eax,%ebx,1),%edx        ;;  372:   __ movzbl(rdx, Address(rax, rbx, Address::times_1, tags_offset));
  0xee070aee:   cmp    $0x64,%edx                   ;;  375:   __ cmpl(rdx, JVM_CONSTANT_UnresolvedClass);
  0xee070af1:   je     0xee070b01                   ;;  376:   __ jccb(Assembler::equal, call_ldc);
  0xee070af3:   cmp    $0x67,%edx                   ;;  380:   __ cmpl(rdx, JVM_CONSTANT_UnresolvedClassInError);
  0xee070af6:   je     0xee070b01                   ;;  381:   __ jccb(Assembler::equal, call_ldc);
  0xee070af8:   cmp    $0x7,%edx                    ;;  384:   __ cmpl(rdx, JVM_CONSTANT_Class);
  0xee070afb:   jne    0xee070bc8                   ;;  385:   __ jcc(Assembler::notEqual, notClass);
  0xee070b01:   mov    $0x0,%ecx                    ;;  387:   __ bind(call_ldc);
                                                    ;;  389:   __ movl(rarg, is_ldc_wide(type) ? 1 : 0);
  0xee070b06:   call   0xee070b10
  0xee070b0b:   jmp    0xee070bc2
  0xee070b10:   push   %ecx
  0xee070b11:   lea    0x8(%esp),%eax
  0xee070b15:   mov    %esi,-0x20(%ebp)
  0xee070b18:   cmpl   $0x0,-0x8(%ebp)
  0xee070b1c:   je     0xee070b33
  0xee070b22:   push   $0xf78569d8
  0xee070b27:   call   0xee070b2c
  0xee070b2c:   pusha  
  0xee070b2d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee070b32:   hlt    
  0xee070b33:   push   %eax
  0xee070b34:   push   %edx
  0xee070b35:   push   %ecx
  0xee070b36:   call   0xf704a910 = Thread::current()
  0xee070b3b:   pop    %ecx
  0xee070b3c:   pop    %edx
  0xee070b3d:   mov    %eax,%edi
  0xee070b3f:   pop    %eax
  0xee070b40:   push   %edi
  0xee070b41:   vzeroupper 
  0xee070b44:   mov    %ebp,0x230(%edi)
  0xee070b4a:   mov    %eax,0x228(%edi)
  0xee070b50:   call   0xf6c12670 = InterpreterRuntime::ldc(JavaThread*, bool)
  0xee070b55:   add    $0x8,%esp
  0xee070b58:   push   %eax
  0xee070b59:   push   %edx
  0xee070b5a:   push   %ecx
  0xee070b5b:   call   0xf704a910 = Thread::current()
  0xee070b60:   pop    %ecx
  0xee070b61:   pop    %edx
  0xee070b62:   cmp    %eax,%edi
  0xee070b64:   je     0xee070b7b
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee070b6a:   push   $0xf78b5a48
  0xee070b6f:   call   0xee070b74
  0xee070b74:   pusha  
  0xee070b75:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee070b7a:   hlt    
  0xee070b7b:   pop    %eax
  0xee070b7c:   movl   $0x0,0x228(%edi)
  0xee070b86:   movl   $0x0,0x230(%edi)
  0xee070b90:   movl   $0x0,0x22c(%edi)
  0xee070b9a:   vzeroupper 
  0xee070b9d:   cmpl   $0x0,0x4(%edi)
  0xee070ba1:   jne    0xee05bbe0
  0xee070ba7:   mov    0x254(%edi),%eax
  0xee070bad:   movl   $0x0,0x254(%edi)
  0xee070bb7:   mov    -0x20(%ebp),%esi
  0xee070bba:   mov    -0x1c(%ebp),%edi
  0xee070bbd:   lea    0x0(%ebp,%edi,4),%edi
  0xee070bc1:   ret    
  0xee070bc2:   push   %eax                         ;;  392:   __ push(atos);
  0xee070bc3:   jmp    0xee070d54                   ;;  393:   __ jmp(Done);
  0xee070bc8:   cmp    $0x4,%edx                    ;;  395:   __ bind(notClass);
                                                    ;;  396:   __ cmpl(rdx, JVM_CONSTANT_Float);
  0xee070bcb:   jne    0xee070be0                   ;;  397:   __ jccb(Assembler::notEqual, notFloat);
  0xee070bcd:   vmovss 0x30(%ecx,%ebx,4),%xmm0      ;;  400:   __ load_float(Address(rcx, rbx, Address::times_ptr, base_offset));
  0xee070bd3:   sub    $0x4,%esp                    ;;  401:   __ push(ftos);
  0xee070bd6:   vmovss %xmm0,(%esp)
  0xee070bdb:   jmp    0xee070d54                   ;;  402:   __ jmp(Done);
  0xee070be0:   cmp    $0x3,%edx                    ;;  404:   __ bind(notFloat);
                                                    ;;  405:   __ cmpl(rdx, JVM_CONSTANT_Integer);
  0xee070be3:   jne    0xee070bef                   ;;  406:   __ jccb(Assembler::notEqual, notInt);
  0xee070be5:   mov    0x30(%ecx,%ebx,4),%eax       ;;  409:   __ movl(rax, Address(rcx, rbx, Address::times_ptr, base_offset));
  0xee070be9:   push   %eax                         ;;  410:   __ push(itos);
  0xee070bea:   jmp    0xee070d54                   ;;  411:   __ jmp(Done);
  0xee070bef:   mov    $0x12,%ecx                   ;;  414:   __ bind(notInt);
                                                    ;;  504:   __ movl(rarg, (int)bytecode());
  0xee070bf4:   call   0xee070bfe
  0xee070bf9:   jmp    0xee070cb0
  0xee070bfe:   push   %ecx
  0xee070bff:   lea    0x8(%esp),%eax
  0xee070c03:   mov    %esi,-0x20(%ebp)
  0xee070c06:   cmpl   $0x0,-0x8(%ebp)
  0xee070c0a:   je     0xee070c21
  0xee070c10:   push   $0xf78569d8
  0xee070c15:   call   0xee070c1a
  0xee070c1a:   pusha  
  0xee070c1b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee070c20:   hlt    
  0xee070c21:   push   %eax
  0xee070c22:   push   %edx
  0xee070c23:   push   %ecx
  0xee070c24:   call   0xf704a910 = Thread::current()
  0xee070c29:   pop    %ecx
  0xee070c2a:   pop    %edx
  0xee070c2b:   mov    %eax,%edi
  0xee070c2d:   pop    %eax
  0xee070c2e:   push   %edi
  0xee070c2f:   vzeroupper 
  0xee070c32:   mov    %ebp,0x230(%edi)
  0xee070c38:   mov    %eax,0x228(%edi)
  0xee070c3e:   call   0xf6c12d70 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0xee070c43:   add    $0x8,%esp
  0xee070c46:   push   %eax
  0xee070c47:   push   %edx
  0xee070c48:   push   %ecx
  0xee070c49:   call   0xf704a910 = Thread::current()
  0xee070c4e:   pop    %ecx
  0xee070c4f:   pop    %edx
  0xee070c50:   cmp    %eax,%edi
  0xee070c52:   je     0xee070c69
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee070c58:   push   $0xf78b5a48
  0xee070c5d:   call   0xee070c62
  0xee070c62:   pusha  
  0xee070c63:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee070c68:   hlt    
  0xee070c69:   pop    %eax
  0xee070c6a:   movl   $0x0,0x228(%edi)
  0xee070c74:   movl   $0x0,0x230(%edi)
  0xee070c7e:   movl   $0x0,0x22c(%edi)
  0xee070c88:   vzeroupper 
  0xee070c8b:   cmpl   $0x0,0x4(%edi)
  0xee070c8f:   jne    0xee05bbe0
  0xee070c95:   mov    0x254(%edi),%eax
  0xee070c9b:   movl   $0x0,0x254(%edi)
  0xee070ca5:   mov    -0x20(%ebp),%esi
  0xee070ca8:   mov    -0x1c(%ebp),%edi
  0xee070cab:   lea    0x0(%ebp,%edi,4),%edi
  0xee070caf:   ret    
  0xee070cb0:   push   %eax                         ;;  508:   __ get_thread(rdi);
  0xee070cb1:   push   %edx
  0xee070cb2:   push   %ecx
  0xee070cb3:   call   0xf704a910 = Thread::current()
  0xee070cb8:   pop    %ecx
  0xee070cb9:   pop    %edx
  0xee070cba:   mov    %eax,%edi
  0xee070cbc:   pop    %eax
  0xee070cbd:   mov    0x258(%edi),%ecx             ;;  509:   __ get_vm_result_2(flags, rdi);
  0xee070cc3:   movl   $0x0,0x258(%edi)
  0xee070ccd:   mov    -0x1c(%ebp),%edi             ;;  510:   __ restore_locals();
  0xee070cd0:   lea    0x0(%ebp,%edi,4),%edi
  0xee070cd4:   mov    %ecx,%ebx                    ;;  516:   __ movl(off, flags);
  0xee070cd6:   and    $0xffff,%ebx                 ;;  517:   __ andl(off, ConstantPoolCacheEntry::field_index_mask);
  0xee070cdc:   shr    $0x1c,%ecx                   ;;  521:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee070cdf:   and    $0xf,%ecx                    ;;  522:   __ andl(flags, ConstantPoolCacheEntry::tos_state_mask);
  0xee070ce2:   cmp    $0x4,%ecx                    ;;  530:       __ cmpl(flags, itos);
  0xee070ce5:   jne    0xee070cf0                   ;;  531:       __ jccb(Assembler::notEqual, notInt);
  0xee070ce7:   mov    (%eax,%ebx,1),%eax           ;;  533:       __ movl(rax, field);
  0xee070cea:   push   %eax                         ;;  534:       __ push(itos);
  0xee070ceb:   jmp    0xee070d54                   ;;  535:       __ jmp(Done);
  0xee070cf0:   cmp    $0x6,%ecx                    ;;  537:       __ bind(notInt);
                                                    ;;  538:       __ cmpl(flags, ftos);
  0xee070cf3:   jne    0xee070d07                   ;;  539:       __ jccb(Assembler::notEqual, notFloat);
  0xee070cf5:   vmovss (%eax,%ebx,1),%xmm0          ;;  541:       __ load_float(field);
  0xee070cfa:   sub    $0x4,%esp                    ;;  542:       __ push(ftos);
  0xee070cfd:   vmovss %xmm0,(%esp)
  0xee070d02:   jmp    0xee070d54                   ;;  543:       __ jmp(Done);
  0xee070d07:   cmp    $0x3,%ecx                    ;;  545:       __ bind(notFloat);
                                                    ;;  546:       __ cmpl(flags, stos);
  0xee070d0a:   jne    0xee070d16                   ;;  547:       __ jccb(Assembler::notEqual, notShort);
  0xee070d0c:   movswl (%eax,%ebx,1),%eax           ;;  549:       __ load_signed_short(rax, field);
  0xee070d10:   push   %eax                         ;;  550:       __ push(stos);
  0xee070d11:   jmp    0xee070d54                   ;;  551:       __ jmp(Done);
  0xee070d16:   cmp    $0x0,%ecx                    ;;  553:       __ bind(notShort);
                                                    ;;  554:       __ cmpl(flags, btos);
  0xee070d19:   jne    0xee070d25                   ;;  555:       __ jccb(Assembler::notEqual, notByte);
  0xee070d1b:   movsbl (%eax,%ebx,1),%eax           ;;  557:       __ load_signed_byte(rax, field);
  0xee070d1f:   push   %eax                         ;;  558:       __ push(btos);
  0xee070d20:   jmp    0xee070d54                   ;;  559:       __ jmp(Done);
  0xee070d25:   cmp    $0x2,%ecx                    ;;  561:       __ bind(notByte);
                                                    ;;  562:       __ cmpl(flags, ctos);
  0xee070d28:   jne    0xee070d34                   ;;  563:       __ jccb(Assembler::notEqual, notChar);
  0xee070d2a:   movzwl (%eax,%ebx,1),%eax           ;;  565:       __ load_unsigned_short(rax, field);
  0xee070d2e:   push   %eax                         ;;  566:       __ push(ctos);
  0xee070d2f:   jmp    0xee070d54                   ;;  567:       __ jmp(Done);
  0xee070d34:   cmp    $0x1,%ecx                    ;;  569:       __ bind(notChar);
                                                    ;;  570:       __ cmpl(flags, ztos);
  0xee070d37:   jne    0xee070d43                   ;;  571:       __ jccb(Assembler::notEqual, notBool);
  0xee070d39:   movsbl (%eax,%ebx,1),%eax           ;;  573:       __ load_signed_byte(rax, field);
  0xee070d3d:   push   %eax                         ;;  574:       __ push(ztos);
  0xee070d3e:   jmp    0xee070d54                   ;;  575:       __ jmp(Done);
  0xee070d43:   push   $0xf7924f5a                  ;;  577:       __ bind(notBool);
                                                    ;;  609:   __ stop("bad ldc/condy");
  0xee070d48:   call   0xee070d4d
  0xee070d4d:   pusha  
  0xee070d4e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee070d53:   hlt    
  0xee070d54:   movzbl 0x2(%esi),%ebx               ;;  417:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee070d58:   add    $0x2,%esi
  0xee070d5b:   jmp    *-0x833caa0(,%ebx,4)
  0xee070d62:   nop
  0xee070d63:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ldc_w  19 ldc_w  [0xee070d80, 0xee071028]  680 bytes

--------------------------------------------------------------------------------
  0xee070d80:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee070d83:   vmovss %xmm0,(%esp)
  0xee070d88:   jmp    0xee070d99                   ;; 1751:       __ jmpb(L);
  0xee070d8a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee070d8d:   vmovsd %xmm0,(%esp)
  0xee070d92:   jmp    0xee070d99                   ;; 1754:       __ jmpb(L);
  0xee070d94:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee070d95:   push   %eax
  0xee070d96:   jmp    0xee070d99                   ;; 1765:       __ jmpb(L);
  0xee070d98:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee070d99:   movzwl 0x1(%esi),%ebx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  362:     __ get_unsigned_2_byte_index_at_bcp(rbx, 1);
  0xee070d9d:   bswap  %ebx
  0xee070d9f:   shr    $0x10,%ebx
  0xee070da2:   mov    -0xc(%ebp),%ecx              ;;  367:   __ get_cpool_and_tags(rcx, rax);
  0xee070da5:   mov    0x8(%ecx),%ecx
  0xee070da8:   mov    0x8(%ecx),%ecx
  0xee070dab:   mov    0x8(%ecx),%eax
  0xee070dae:   movzbl 0x4(%eax,%ebx,1),%edx        ;;  372:   __ movzbl(rdx, Address(rax, rbx, Address::times_1, tags_offset));
  0xee070db3:   cmp    $0x64,%edx                   ;;  375:   __ cmpl(rdx, JVM_CONSTANT_UnresolvedClass);
  0xee070db6:   je     0xee070dc6                   ;;  376:   __ jccb(Assembler::equal, call_ldc);
  0xee070db8:   cmp    $0x67,%edx                   ;;  380:   __ cmpl(rdx, JVM_CONSTANT_UnresolvedClassInError);
  0xee070dbb:   je     0xee070dc6                   ;;  381:   __ jccb(Assembler::equal, call_ldc);
  0xee070dbd:   cmp    $0x7,%edx                    ;;  384:   __ cmpl(rdx, JVM_CONSTANT_Class);
  0xee070dc0:   jne    0xee070e8d                   ;;  385:   __ jcc(Assembler::notEqual, notClass);
  0xee070dc6:   mov    $0x1,%ecx                    ;;  387:   __ bind(call_ldc);
                                                    ;;  389:   __ movl(rarg, is_ldc_wide(type) ? 1 : 0);
  0xee070dcb:   call   0xee070dd5
  0xee070dd0:   jmp    0xee070e87
  0xee070dd5:   push   %ecx
  0xee070dd6:   lea    0x8(%esp),%eax
  0xee070dda:   mov    %esi,-0x20(%ebp)
  0xee070ddd:   cmpl   $0x0,-0x8(%ebp)
  0xee070de1:   je     0xee070df8
  0xee070de7:   push   $0xf78569d8
  0xee070dec:   call   0xee070df1
  0xee070df1:   pusha  
  0xee070df2:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee070df7:   hlt    
  0xee070df8:   push   %eax
  0xee070df9:   push   %edx
  0xee070dfa:   push   %ecx
  0xee070dfb:   call   0xf704a910 = Thread::current()
  0xee070e00:   pop    %ecx
  0xee070e01:   pop    %edx
  0xee070e02:   mov    %eax,%edi
  0xee070e04:   pop    %eax
  0xee070e05:   push   %edi
  0xee070e06:   vzeroupper 
  0xee070e09:   mov    %ebp,0x230(%edi)
  0xee070e0f:   mov    %eax,0x228(%edi)
  0xee070e15:   call   0xf6c12670 = InterpreterRuntime::ldc(JavaThread*, bool)
  0xee070e1a:   add    $0x8,%esp
  0xee070e1d:   push   %eax
  0xee070e1e:   push   %edx
  0xee070e1f:   push   %ecx
  0xee070e20:   call   0xf704a910 = Thread::current()
  0xee070e25:   pop    %ecx
  0xee070e26:   pop    %edx
  0xee070e27:   cmp    %eax,%edi
  0xee070e29:   je     0xee070e40
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee070e2f:   push   $0xf78b5a48
  0xee070e34:   call   0xee070e39
  0xee070e39:   pusha  
  0xee070e3a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee070e3f:   hlt    
  0xee070e40:   pop    %eax
  0xee070e41:   movl   $0x0,0x228(%edi)
  0xee070e4b:   movl   $0x0,0x230(%edi)
  0xee070e55:   movl   $0x0,0x22c(%edi)
  0xee070e5f:   vzeroupper 
  0xee070e62:   cmpl   $0x0,0x4(%edi)
  0xee070e66:   jne    0xee05bbe0
  0xee070e6c:   mov    0x254(%edi),%eax
  0xee070e72:   movl   $0x0,0x254(%edi)
  0xee070e7c:   mov    -0x20(%ebp),%esi
  0xee070e7f:   mov    -0x1c(%ebp),%edi
  0xee070e82:   lea    0x0(%ebp,%edi,4),%edi
  0xee070e86:   ret    
  0xee070e87:   push   %eax                         ;;  392:   __ push(atos);
  0xee070e88:   jmp    0xee071019                   ;;  393:   __ jmp(Done);
  0xee070e8d:   cmp    $0x4,%edx                    ;;  395:   __ bind(notClass);
                                                    ;;  396:   __ cmpl(rdx, JVM_CONSTANT_Float);
  0xee070e90:   jne    0xee070ea5                   ;;  397:   __ jccb(Assembler::notEqual, notFloat);
  0xee070e92:   vmovss 0x30(%ecx,%ebx,4),%xmm0      ;;  400:   __ load_float(Address(rcx, rbx, Address::times_ptr, base_offset));
  0xee070e98:   sub    $0x4,%esp                    ;;  401:   __ push(ftos);
  0xee070e9b:   vmovss %xmm0,(%esp)
  0xee070ea0:   jmp    0xee071019                   ;;  402:   __ jmp(Done);
  0xee070ea5:   cmp    $0x3,%edx                    ;;  404:   __ bind(notFloat);
                                                    ;;  405:   __ cmpl(rdx, JVM_CONSTANT_Integer);
  0xee070ea8:   jne    0xee070eb4                   ;;  406:   __ jccb(Assembler::notEqual, notInt);
  0xee070eaa:   mov    0x30(%ecx,%ebx,4),%eax       ;;  409:   __ movl(rax, Address(rcx, rbx, Address::times_ptr, base_offset));
  0xee070eae:   push   %eax                         ;;  410:   __ push(itos);
  0xee070eaf:   jmp    0xee071019                   ;;  411:   __ jmp(Done);
  0xee070eb4:   mov    $0x13,%ecx                   ;;  414:   __ bind(notInt);
                                                    ;;  504:   __ movl(rarg, (int)bytecode());
  0xee070eb9:   call   0xee070ec3
  0xee070ebe:   jmp    0xee070f75
  0xee070ec3:   push   %ecx
  0xee070ec4:   lea    0x8(%esp),%eax
  0xee070ec8:   mov    %esi,-0x20(%ebp)
  0xee070ecb:   cmpl   $0x0,-0x8(%ebp)
  0xee070ecf:   je     0xee070ee6
  0xee070ed5:   push   $0xf78569d8
  0xee070eda:   call   0xee070edf
  0xee070edf:   pusha  
  0xee070ee0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee070ee5:   hlt    
  0xee070ee6:   push   %eax
  0xee070ee7:   push   %edx
  0xee070ee8:   push   %ecx
  0xee070ee9:   call   0xf704a910 = Thread::current()
  0xee070eee:   pop    %ecx
  0xee070eef:   pop    %edx
  0xee070ef0:   mov    %eax,%edi
  0xee070ef2:   pop    %eax
  0xee070ef3:   push   %edi
  0xee070ef4:   vzeroupper 
  0xee070ef7:   mov    %ebp,0x230(%edi)
  0xee070efd:   mov    %eax,0x228(%edi)
  0xee070f03:   call   0xf6c12d70 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0xee070f08:   add    $0x8,%esp
  0xee070f0b:   push   %eax
  0xee070f0c:   push   %edx
  0xee070f0d:   push   %ecx
  0xee070f0e:   call   0xf704a910 = Thread::current()
  0xee070f13:   pop    %ecx
  0xee070f14:   pop    %edx
  0xee070f15:   cmp    %eax,%edi
  0xee070f17:   je     0xee070f2e
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee070f1d:   push   $0xf78b5a48
  0xee070f22:   call   0xee070f27
  0xee070f27:   pusha  
  0xee070f28:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee070f2d:   hlt    
  0xee070f2e:   pop    %eax
  0xee070f2f:   movl   $0x0,0x228(%edi)
  0xee070f39:   movl   $0x0,0x230(%edi)
  0xee070f43:   movl   $0x0,0x22c(%edi)
  0xee070f4d:   vzeroupper 
  0xee070f50:   cmpl   $0x0,0x4(%edi)
  0xee070f54:   jne    0xee05bbe0
  0xee070f5a:   mov    0x254(%edi),%eax
  0xee070f60:   movl   $0x0,0x254(%edi)
  0xee070f6a:   mov    -0x20(%ebp),%esi
  0xee070f6d:   mov    -0x1c(%ebp),%edi
  0xee070f70:   lea    0x0(%ebp,%edi,4),%edi
  0xee070f74:   ret    
  0xee070f75:   push   %eax                         ;;  508:   __ get_thread(rdi);
  0xee070f76:   push   %edx
  0xee070f77:   push   %ecx
  0xee070f78:   call   0xf704a910 = Thread::current()
  0xee070f7d:   pop    %ecx
  0xee070f7e:   pop    %edx
  0xee070f7f:   mov    %eax,%edi
  0xee070f81:   pop    %eax
  0xee070f82:   mov    0x258(%edi),%ecx             ;;  509:   __ get_vm_result_2(flags, rdi);
  0xee070f88:   movl   $0x0,0x258(%edi)
  0xee070f92:   mov    -0x1c(%ebp),%edi             ;;  510:   __ restore_locals();
  0xee070f95:   lea    0x0(%ebp,%edi,4),%edi
  0xee070f99:   mov    %ecx,%ebx                    ;;  516:   __ movl(off, flags);
  0xee070f9b:   and    $0xffff,%ebx                 ;;  517:   __ andl(off, ConstantPoolCacheEntry::field_index_mask);
  0xee070fa1:   shr    $0x1c,%ecx                   ;;  521:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee070fa4:   and    $0xf,%ecx                    ;;  522:   __ andl(flags, ConstantPoolCacheEntry::tos_state_mask);
  0xee070fa7:   cmp    $0x4,%ecx                    ;;  530:       __ cmpl(flags, itos);
  0xee070faa:   jne    0xee070fb5                   ;;  531:       __ jccb(Assembler::notEqual, notInt);
  0xee070fac:   mov    (%eax,%ebx,1),%eax           ;;  533:       __ movl(rax, field);
  0xee070faf:   push   %eax                         ;;  534:       __ push(itos);
  0xee070fb0:   jmp    0xee071019                   ;;  535:       __ jmp(Done);
  0xee070fb5:   cmp    $0x6,%ecx                    ;;  537:       __ bind(notInt);
                                                    ;;  538:       __ cmpl(flags, ftos);
  0xee070fb8:   jne    0xee070fcc                   ;;  539:       __ jccb(Assembler::notEqual, notFloat);
  0xee070fba:   vmovss (%eax,%ebx,1),%xmm0          ;;  541:       __ load_float(field);
  0xee070fbf:   sub    $0x4,%esp                    ;;  542:       __ push(ftos);
  0xee070fc2:   vmovss %xmm0,(%esp)
  0xee070fc7:   jmp    0xee071019                   ;;  543:       __ jmp(Done);
  0xee070fcc:   cmp    $0x3,%ecx                    ;;  545:       __ bind(notFloat);
                                                    ;;  546:       __ cmpl(flags, stos);
  0xee070fcf:   jne    0xee070fdb                   ;;  547:       __ jccb(Assembler::notEqual, notShort);
  0xee070fd1:   movswl (%eax,%ebx,1),%eax           ;;  549:       __ load_signed_short(rax, field);
  0xee070fd5:   push   %eax                         ;;  550:       __ push(stos);
  0xee070fd6:   jmp    0xee071019                   ;;  551:       __ jmp(Done);
  0xee070fdb:   cmp    $0x0,%ecx                    ;;  553:       __ bind(notShort);
                                                    ;;  554:       __ cmpl(flags, btos);
  0xee070fde:   jne    0xee070fea                   ;;  555:       __ jccb(Assembler::notEqual, notByte);
  0xee070fe0:   movsbl (%eax,%ebx,1),%eax           ;;  557:       __ load_signed_byte(rax, field);
  0xee070fe4:   push   %eax                         ;;  558:       __ push(btos);
  0xee070fe5:   jmp    0xee071019                   ;;  559:       __ jmp(Done);
  0xee070fea:   cmp    $0x2,%ecx                    ;;  561:       __ bind(notByte);
                                                    ;;  562:       __ cmpl(flags, ctos);
  0xee070fed:   jne    0xee070ff9                   ;;  563:       __ jccb(Assembler::notEqual, notChar);
  0xee070fef:   movzwl (%eax,%ebx,1),%eax           ;;  565:       __ load_unsigned_short(rax, field);
  0xee070ff3:   push   %eax                         ;;  566:       __ push(ctos);
  0xee070ff4:   jmp    0xee071019                   ;;  567:       __ jmp(Done);
  0xee070ff9:   cmp    $0x1,%ecx                    ;;  569:       __ bind(notChar);
                                                    ;;  570:       __ cmpl(flags, ztos);
  0xee070ffc:   jne    0xee071008                   ;;  571:       __ jccb(Assembler::notEqual, notBool);
  0xee070ffe:   movsbl (%eax,%ebx,1),%eax           ;;  573:       __ load_signed_byte(rax, field);
  0xee071002:   push   %eax                         ;;  574:       __ push(ztos);
  0xee071003:   jmp    0xee071019                   ;;  575:       __ jmp(Done);
  0xee071008:   push   $0xf7924f5a                  ;;  577:       __ bind(notBool);
                                                    ;;  609:   __ stop("bad ldc/condy");
  0xee07100d:   call   0xee071012
  0xee071012:   pusha  
  0xee071013:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee071018:   hlt    
  0xee071019:   movzbl 0x3(%esi),%ebx               ;;  417:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07101d:   add    $0x3,%esi
  0xee071020:   jmp    *-0x833caa0(,%ebx,4)
  0xee071027:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ldc2_w  20 ldc2_w  [0xee071040, 0xee0711dc]  412 bytes

--------------------------------------------------------------------------------
  0xee071040:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee071043:   vmovss %xmm0,(%esp)
  0xee071048:   jmp    0xee071059                   ;; 1751:       __ jmpb(L);
  0xee07104a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07104d:   vmovsd %xmm0,(%esp)
  0xee071052:   jmp    0xee071059                   ;; 1754:       __ jmpb(L);
  0xee071054:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee071055:   push   %eax
  0xee071056:   jmp    0xee071059                   ;; 1765:       __ jmpb(L);
  0xee071058:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee071059:   movzwl 0x1(%esi),%ebx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  467:   __ get_unsigned_2_byte_index_at_bcp(rbx, 1);
  0xee07105d:   bswap  %ebx
  0xee07105f:   shr    $0x10,%ebx
  0xee071062:   mov    -0xc(%ebp),%ecx              ;;  469:   __ get_cpool_and_tags(rcx, rax);
  0xee071065:   mov    0x8(%ecx),%ecx
  0xee071068:   mov    0x8(%ecx),%ecx
  0xee07106b:   mov    0x8(%ecx),%eax
  0xee07106e:   movzbl 0x4(%eax,%ebx,1),%edx        ;;  474:   __ movzbl(rdx, Address(rax, rbx, Address::times_1, tags_offset));
  0xee071073:   cmp    $0x6,%edx                    ;;  475:   __ cmpl(rdx, JVM_CONSTANT_Double);
  0xee071076:   jne    0xee07108b                   ;;  476:   __ jccb(Assembler::notEqual, notDouble);
  0xee071078:   vmovsd 0x30(%ecx,%ebx,4),%xmm0      ;;  479:   __ load_double(Address(rcx, rbx, Address::times_ptr, base_offset));
  0xee07107e:   sub    $0x8,%esp                    ;;  480:   __ push(dtos);
  0xee071081:   vmovsd %xmm0,(%esp)
  0xee071086:   jmp    0xee0711cd                   ;;  482:   __ jmp(Done);
  0xee07108b:   cmp    $0x5,%edx                    ;;  483:   __ bind(notDouble);
                                                    ;;  484:   __ cmpl(rdx, JVM_CONSTANT_Long);
  0xee07108e:   jne    0xee07109f                   ;;  485:   __ jccb(Assembler::notEqual, notLong);
  0xee071090:   mov    0x30(%ecx,%ebx,4),%eax       ;;  488:   __ movptr(rax, Address(rcx, rbx, Address::times_ptr, base_offset + 0 * wordSize));
  0xee071094:   mov    0x34(%ecx,%ebx,4),%edx       ;;  489:   NOT_LP64(__ movptr(rdx, Address(rcx, rbx, Address::times_ptr, base_offset + 1 * wordSize)));
  0xee071098:   push   %edx                         ;;  490:   __ push(ltos);
  0xee071099:   push   %eax
  0xee07109a:   jmp    0xee0711cd                   ;;  491:   __ jmp(Done);
  0xee07109f:   mov    $0x14,%ecx                   ;;  493:   __ bind(notLong);
                                                    ;;  504:   __ movl(rarg, (int)bytecode());
  0xee0710a4:   call   0xee0710ae
  0xee0710a9:   jmp    0xee071160
  0xee0710ae:   push   %ecx
  0xee0710af:   lea    0x8(%esp),%eax
  0xee0710b3:   mov    %esi,-0x20(%ebp)
  0xee0710b6:   cmpl   $0x0,-0x8(%ebp)
  0xee0710ba:   je     0xee0710d1
  0xee0710c0:   push   $0xf78569d8
  0xee0710c5:   call   0xee0710ca
  0xee0710ca:   pusha  
  0xee0710cb:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0710d0:   hlt    
  0xee0710d1:   push   %eax
  0xee0710d2:   push   %edx
  0xee0710d3:   push   %ecx
  0xee0710d4:   call   0xf704a910 = Thread::current()
  0xee0710d9:   pop    %ecx
  0xee0710da:   pop    %edx
  0xee0710db:   mov    %eax,%edi
  0xee0710dd:   pop    %eax
  0xee0710de:   push   %edi
  0xee0710df:   vzeroupper 
  0xee0710e2:   mov    %ebp,0x230(%edi)
  0xee0710e8:   mov    %eax,0x228(%edi)
  0xee0710ee:   call   0xf6c12d70 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0xee0710f3:   add    $0x8,%esp
  0xee0710f6:   push   %eax
  0xee0710f7:   push   %edx
  0xee0710f8:   push   %ecx
  0xee0710f9:   call   0xf704a910 = Thread::current()
  0xee0710fe:   pop    %ecx
  0xee0710ff:   pop    %edx
  0xee071100:   cmp    %eax,%edi
  0xee071102:   je     0xee071119
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee071108:   push   $0xf78b5a48
  0xee07110d:   call   0xee071112
  0xee071112:   pusha  
  0xee071113:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee071118:   hlt    
  0xee071119:   pop    %eax
  0xee07111a:   movl   $0x0,0x228(%edi)
  0xee071124:   movl   $0x0,0x230(%edi)
  0xee07112e:   movl   $0x0,0x22c(%edi)
  0xee071138:   vzeroupper 
  0xee07113b:   cmpl   $0x0,0x4(%edi)
  0xee07113f:   jne    0xee05bbe0
  0xee071145:   mov    0x254(%edi),%eax
  0xee07114b:   movl   $0x0,0x254(%edi)
  0xee071155:   mov    -0x20(%ebp),%esi
  0xee071158:   mov    -0x1c(%ebp),%edi
  0xee07115b:   lea    0x0(%ebp,%edi,4),%edi
  0xee07115f:   ret    
  0xee071160:   push   %eax                         ;;  508:   __ get_thread(rdi);
  0xee071161:   push   %edx
  0xee071162:   push   %ecx
  0xee071163:   call   0xf704a910 = Thread::current()
  0xee071168:   pop    %ecx
  0xee071169:   pop    %edx
  0xee07116a:   mov    %eax,%edi
  0xee07116c:   pop    %eax
  0xee07116d:   mov    0x258(%edi),%ecx             ;;  509:   __ get_vm_result_2(flags, rdi);
  0xee071173:   movl   $0x0,0x258(%edi)
  0xee07117d:   mov    -0x1c(%ebp),%edi             ;;  510:   __ restore_locals();
  0xee071180:   lea    0x0(%ebp,%edi,4),%edi
  0xee071184:   mov    %ecx,%ebx                    ;;  516:   __ movl(off, flags);
  0xee071186:   and    $0xffff,%ebx                 ;;  517:   __ andl(off, ConstantPoolCacheEntry::field_index_mask);
  0xee07118c:   shr    $0x1c,%ecx                   ;;  521:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee07118f:   and    $0xf,%ecx                    ;;  522:   __ andl(flags, ConstantPoolCacheEntry::tos_state_mask);
  0xee071192:   cmp    $0x5,%ecx                    ;;  584:       __ cmpl(flags, ltos);
  0xee071195:   jne    0xee0711a5                   ;;  585:       __ jccb(Assembler::notEqual, notLong);
  0xee071197:   mov    0x4(%eax,%ebx,1),%edx        ;;  588:       NOT_LP64(__ movptr(rdx, field.plus_disp(4)));
  0xee07119b:   mov    (%eax,%ebx,1),%eax           ;;  589:       __ movptr(rax, field);
  0xee07119e:   push   %edx                         ;;  590:       __ push(ltos);
  0xee07119f:   push   %eax
  0xee0711a0:   jmp    0xee0711cd                   ;;  591:       __ jmp(Done);
  0xee0711a5:   cmp    $0x7,%ecx                    ;;  593:       __ bind(notLong);
                                                    ;;  594:       __ cmpl(flags, dtos);
  0xee0711a8:   jne    0xee0711bc                   ;;  595:       __ jccb(Assembler::notEqual, notDouble);
  0xee0711aa:   vmovsd (%eax,%ebx,1),%xmm0          ;;  597:       __ load_double(field);
  0xee0711af:   sub    $0x8,%esp                    ;;  598:       __ push(dtos);
  0xee0711b2:   vmovsd %xmm0,(%esp)
  0xee0711b7:   jmp    0xee0711cd                   ;;  599:       __ jmp(Done);
  0xee0711bc:   push   $0xf7924f5a                  ;;  601:       __ bind(notDouble);
                                                    ;;  609:   __ stop("bad ldc/condy");
  0xee0711c1:   call   0xee0711c6
  0xee0711c6:   pusha  
  0xee0711c7:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0711cc:   hlt    
  0xee0711cd:   movzbl 0x3(%esi),%ebx               ;;  496:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0711d1:   add    $0x3,%esi
  0xee0711d4:   jmp    *-0x833caa0(,%ebx,4)
  0xee0711db:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iload  21 iload  [0xee071200, 0xee07129c]  156 bytes

--------------------------------------------------------------------------------
  0xee071200:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee071203:   vmovss %xmm0,(%esp)
  0xee071208:   jmp    0xee071219                   ;; 1751:       __ jmpb(L);
  0xee07120a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07120d:   vmovsd %xmm0,(%esp)
  0xee071212:   jmp    0xee071219                   ;; 1754:       __ jmpb(L);
  0xee071214:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee071215:   push   %eax
  0xee071216:   jmp    0xee071219                   ;; 1765:       __ jmpb(L);
  0xee071218:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee071219:   movzbl 0x2(%esi),%ebx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  633:     __ load_unsigned_byte(rbx,
  0xee07121d:   cmp    $0x15,%ebx                   ;;  639:     __ cmpl(rbx, Bytecodes::_iload);
  0xee071220:   je     0xee071269                   ;;  640:     __ jcc(Assembler::equal, done);
  0xee071226:   cmp    $0xe0,%ebx                   ;;  642:     __ cmpl(rbx, Bytecodes::_fast_iload);
  0xee07122c:   mov    $0xe1,%ecx                   ;;  643:     __ movl(bc, Bytecodes::_fast_iload2);
  0xee071231:   je     0xee071242                   ;;  645:     __ jccb(Assembler::equal, rewrite);
  0xee071233:   cmp    $0x34,%ebx                   ;;  648:     __ cmpl(rbx, Bytecodes::_caload);
  0xee071236:   mov    $0xe2,%ecx                   ;;  649:     __ movl(bc, Bytecodes::_fast_icaload);
  0xee07123b:   je     0xee071242                   ;;  650:     __ jccb(Assembler::equal, rewrite);
  0xee07123d:   mov    $0xe0,%ecx                   ;;  653:     __ movl(bc, Bytecodes::_fast_iload);
  0xee071242:   movzbl (%esi),%ebx                  ;;  657:     __ bind(rewrite);
                                                    ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee071245:   cmp    $0x15,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee071248:   je     0xee071267                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07124e:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee071250:   je     0xee071267                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee071256:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07125b:   call   0xee071260
  0xee071260:   pusha  
  0xee071261:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee071266:   hlt    
  0xee071267:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee071269:   movzbl 0x1(%esi),%ebx               ;;  242:   __ bind(L_patch_done);
                                                    ;;  659:     __ bind(done);
                                                    ;;  613:   __ load_unsigned_byte(reg, at_bcp(offset));
  0xee07126d:   neg    %ebx                         ;;  614:   __ negptr(reg);
  0xee07126f:   mov    (%edi,%ebx,4),%eax           ;;  664:   __ movl(rax, iaddress(rbx));
  0xee071272:   movzbl 0x2(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071276:   add    $0x2,%esi
  0xee071279:   jmp    *-0x833dea0(,%ebx,4)
  0xee071280:   movzwl 0x2(%esi),%ebx               ;;  335:   wep = __ pc(); generate_and_dispatch(t);
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  708:   __ load_unsigned_short(reg, at_bcp(2));
  0xee071284:   bswap  %ebx                         ;;  709:   __ bswapl(reg);
  0xee071286:   shr    $0x10,%ebx                   ;;  710:   __ shrl(reg, 16);
  0xee071289:   neg    %ebx                         ;;  711:   __ negptr(reg);
  0xee07128b:   mov    (%edi,%ebx,4),%eax           ;;  717:   __ movl(rax, iaddress(rbx));
  0xee07128e:   movzbl 0x4(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071292:   add    $0x4,%esi
  0xee071295:   jmp    *-0x833dea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lload  22 lload  [0xee0712c0, 0xee071314]  84 bytes

--------------------------------------------------------------------------------
  0xee0712c0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0712c3:   vmovss %xmm0,(%esp)
  0xee0712c8:   jmp    0xee0712d9                   ;; 1751:       __ jmpb(L);
  0xee0712ca:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0712cd:   vmovsd %xmm0,(%esp)
  0xee0712d2:   jmp    0xee0712d9                   ;; 1754:       __ jmpb(L);
  0xee0712d4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0712d5:   push   %eax
  0xee0712d6:   jmp    0xee0712d9                   ;; 1765:       __ jmpb(L);
  0xee0712d8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0712d9:   movzbl 0x1(%esi),%ebx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  613:   __ load_unsigned_byte(reg, at_bcp(offset));
  0xee0712dd:   neg    %ebx                         ;;  614:   __ negptr(reg);
  0xee0712df:   mov    -0x4(%edi,%ebx,4),%eax       ;;  685:   __ movptr(rax, laddress(rbx));
  0xee0712e3:   mov    (%edi,%ebx,4),%edx           ;;  686:   NOT_LP64(__ movl(rdx, haddress(rbx)));
  0xee0712e6:   movzbl 0x2(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0712ea:   add    $0x2,%esi
  0xee0712ed:   jmp    *-0x833daa0(,%ebx,4)
  0xee0712f4:   movzwl 0x2(%esi),%ebx               ;;  335:   wep = __ pc(); generate_and_dispatch(t);
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  708:   __ load_unsigned_short(reg, at_bcp(2));
  0xee0712f8:   bswap  %ebx                         ;;  709:   __ bswapl(reg);
  0xee0712fa:   shr    $0x10,%ebx                   ;;  710:   __ shrl(reg, 16);
  0xee0712fd:   neg    %ebx                         ;;  711:   __ negptr(reg);
  0xee0712ff:   mov    -0x4(%edi,%ebx,4),%eax       ;;  723:   __ movptr(rax, laddress(rbx));
  0xee071303:   mov    (%edi,%ebx,4),%edx           ;;  724:   NOT_LP64(__ movl(rdx, haddress(rbx)));
  0xee071306:   movzbl 0x4(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07130a:   add    $0x4,%esi
  0xee07130d:   jmp    *-0x833daa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fload  23 fload  [0xee071340, 0xee071390]  80 bytes

--------------------------------------------------------------------------------
  0xee071340:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee071343:   vmovss %xmm0,(%esp)
  0xee071348:   jmp    0xee071359                   ;; 1751:       __ jmpb(L);
  0xee07134a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07134d:   vmovsd %xmm0,(%esp)
  0xee071352:   jmp    0xee071359                   ;; 1754:       __ jmpb(L);
  0xee071354:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee071355:   push   %eax
  0xee071356:   jmp    0xee071359                   ;; 1765:       __ jmpb(L);
  0xee071358:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee071359:   movzbl 0x1(%esi),%ebx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  613:   __ load_unsigned_byte(reg, at_bcp(offset));
  0xee07135d:   neg    %ebx                         ;;  614:   __ negptr(reg);
  0xee07135f:   vmovss (%edi,%ebx,4),%xmm0          ;;  692:   __ load_float(faddress(rbx));
  0xee071364:   movzbl 0x2(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071368:   add    $0x2,%esi
  0xee07136b:   jmp    *-0x833d6a0(,%ebx,4)
  0xee071372:   movzwl 0x2(%esi),%ebx               ;;  335:   wep = __ pc(); generate_and_dispatch(t);
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  708:   __ load_unsigned_short(reg, at_bcp(2));
  0xee071376:   bswap  %ebx                         ;;  709:   __ bswapl(reg);
  0xee071378:   shr    $0x10,%ebx                   ;;  710:   __ shrl(reg, 16);
  0xee07137b:   neg    %ebx                         ;;  711:   __ negptr(reg);
  0xee07137d:   vmovss (%edi,%ebx,4),%xmm0          ;;  730:   __ load_float(faddress(rbx));
  0xee071382:   movzbl 0x4(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071386:   add    $0x4,%esi
  0xee071389:   jmp    *-0x833d6a0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dload  24 dload  [0xee0713c0, 0xee071414]  84 bytes

--------------------------------------------------------------------------------
  0xee0713c0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0713c3:   vmovss %xmm0,(%esp)
  0xee0713c8:   jmp    0xee0713d9                   ;; 1751:       __ jmpb(L);
  0xee0713ca:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0713cd:   vmovsd %xmm0,(%esp)
  0xee0713d2:   jmp    0xee0713d9                   ;; 1754:       __ jmpb(L);
  0xee0713d4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0713d5:   push   %eax
  0xee0713d6:   jmp    0xee0713d9                   ;; 1765:       __ jmpb(L);
  0xee0713d8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0713d9:   movzbl 0x1(%esi),%ebx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  613:   __ load_unsigned_byte(reg, at_bcp(offset));
  0xee0713dd:   neg    %ebx                         ;;  614:   __ negptr(reg);
  0xee0713df:   vmovsd -0x4(%edi,%ebx,4),%xmm0      ;;  698:   __ load_double(daddress(rbx));
  0xee0713e5:   movzbl 0x2(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0713e9:   add    $0x2,%esi
  0xee0713ec:   jmp    *-0x833d2a0(,%ebx,4)
  0xee0713f3:   movzwl 0x2(%esi),%ebx               ;;  335:   wep = __ pc(); generate_and_dispatch(t);
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  708:   __ load_unsigned_short(reg, at_bcp(2));
  0xee0713f7:   bswap  %ebx                         ;;  709:   __ bswapl(reg);
  0xee0713f9:   shr    $0x10,%ebx                   ;;  710:   __ shrl(reg, 16);
  0xee0713fc:   neg    %ebx                         ;;  711:   __ negptr(reg);
  0xee0713fe:   vmovsd -0x4(%edi,%ebx,4),%xmm0      ;;  736:   __ load_double(daddress(rbx));
  0xee071404:   movzbl 0x4(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071408:   add    $0x4,%esi
  0xee07140b:   jmp    *-0x833d2a0(,%ebx,4)
  0xee071412:   nop
  0xee071413:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
aload  25 aload  [0xee071440, 0xee07148c]  76 bytes

--------------------------------------------------------------------------------
  0xee071440:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee071443:   vmovss %xmm0,(%esp)
  0xee071448:   jmp    0xee071459                   ;; 1751:       __ jmpb(L);
  0xee07144a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07144d:   vmovsd %xmm0,(%esp)
  0xee071452:   jmp    0xee071459                   ;; 1754:       __ jmpb(L);
  0xee071454:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee071455:   push   %eax
  0xee071456:   jmp    0xee071459                   ;; 1765:       __ jmpb(L);
  0xee071458:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee071459:   movzbl 0x1(%esi),%ebx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  613:   __ load_unsigned_byte(reg, at_bcp(offset));
  0xee07145d:   neg    %ebx                         ;;  614:   __ negptr(reg);
  0xee07145f:   mov    (%edi,%ebx,4),%eax           ;;  704:   __ movptr(rax, aaddress(rbx));
  0xee071462:   movzbl 0x2(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071466:   add    $0x2,%esi
  0xee071469:   jmp    *-0x833cea0(,%ebx,4)
  0xee071470:   movzwl 0x2(%esi),%ebx               ;;  335:   wep = __ pc(); generate_and_dispatch(t);
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  708:   __ load_unsigned_short(reg, at_bcp(2));
  0xee071474:   bswap  %ebx                         ;;  709:   __ bswapl(reg);
  0xee071476:   shr    $0x10,%ebx                   ;;  710:   __ shrl(reg, 16);
  0xee071479:   neg    %ebx                         ;;  711:   __ negptr(reg);
  0xee07147b:   mov    (%edi,%ebx,4),%eax           ;;  742:   __ movptr(rax, aaddress(rbx));
  0xee07147e:   movzbl 0x4(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071482:   add    $0x4,%esi
  0xee071485:   jmp    *-0x833cea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iload_0  26 iload_0  [0xee0714a0, 0xee0714c8]  40 bytes

--------------------------------------------------------------------------------
  0xee0714a0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0714a3:   vmovss %xmm0,(%esp)
  0xee0714a8:   jmp    0xee0714b9                   ;; 1751:       __ jmpb(L);
  0xee0714aa:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0714ad:   vmovsd %xmm0,(%esp)
  0xee0714b2:   jmp    0xee0714b9                   ;; 1754:       __ jmpb(L);
  0xee0714b4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0714b5:   push   %eax
  0xee0714b6:   jmp    0xee0714b9                   ;; 1765:       __ jmpb(L);
  0xee0714b8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0714b9:   mov    (%edi),%eax                  ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  883:   __ movl(rax, iaddress(n));
  0xee0714bb:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0714bf:   inc    %esi
  0xee0714c0:   jmp    *-0x833dea0(,%ebx,4)
  0xee0714c7:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iload_1  27 iload_1  [0xee0714e0, 0xee071508]  40 bytes

--------------------------------------------------------------------------------
  0xee0714e0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0714e3:   vmovss %xmm0,(%esp)
  0xee0714e8:   jmp    0xee0714f9                   ;; 1751:       __ jmpb(L);
  0xee0714ea:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0714ed:   vmovsd %xmm0,(%esp)
  0xee0714f2:   jmp    0xee0714f9                   ;; 1754:       __ jmpb(L);
  0xee0714f4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0714f5:   push   %eax
  0xee0714f6:   jmp    0xee0714f9                   ;; 1765:       __ jmpb(L);
  0xee0714f8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0714f9:   mov    -0x4(%edi),%eax              ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  883:   __ movl(rax, iaddress(n));
  0xee0714fc:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071500:   inc    %esi
  0xee071501:   jmp    *-0x833dea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iload_2  28 iload_2  [0xee071520, 0xee071548]  40 bytes

--------------------------------------------------------------------------------
  0xee071520:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee071523:   vmovss %xmm0,(%esp)
  0xee071528:   jmp    0xee071539                   ;; 1751:       __ jmpb(L);
  0xee07152a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07152d:   vmovsd %xmm0,(%esp)
  0xee071532:   jmp    0xee071539                   ;; 1754:       __ jmpb(L);
  0xee071534:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee071535:   push   %eax
  0xee071536:   jmp    0xee071539                   ;; 1765:       __ jmpb(L);
  0xee071538:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee071539:   mov    -0x8(%edi),%eax              ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  883:   __ movl(rax, iaddress(n));
  0xee07153c:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071540:   inc    %esi
  0xee071541:   jmp    *-0x833dea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iload_3  29 iload_3  [0xee071560, 0xee071588]  40 bytes

--------------------------------------------------------------------------------
  0xee071560:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee071563:   vmovss %xmm0,(%esp)
  0xee071568:   jmp    0xee071579                   ;; 1751:       __ jmpb(L);
  0xee07156a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07156d:   vmovsd %xmm0,(%esp)
  0xee071572:   jmp    0xee071579                   ;; 1754:       __ jmpb(L);
  0xee071574:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee071575:   push   %eax
  0xee071576:   jmp    0xee071579                   ;; 1765:       __ jmpb(L);
  0xee071578:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee071579:   mov    -0xc(%edi),%eax              ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  883:   __ movl(rax, iaddress(n));
  0xee07157c:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071580:   inc    %esi
  0xee071581:   jmp    *-0x833dea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lload_0  30 lload_0  [0xee0715a0, 0xee0715cc]  44 bytes

--------------------------------------------------------------------------------
  0xee0715a0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0715a3:   vmovss %xmm0,(%esp)
  0xee0715a8:   jmp    0xee0715b9                   ;; 1751:       __ jmpb(L);
  0xee0715aa:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0715ad:   vmovsd %xmm0,(%esp)
  0xee0715b2:   jmp    0xee0715b9                   ;; 1754:       __ jmpb(L);
  0xee0715b4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0715b5:   push   %eax
  0xee0715b6:   jmp    0xee0715b9                   ;; 1765:       __ jmpb(L);
  0xee0715b8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0715b9:   mov    -0x4(%edi),%eax              ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  888:   __ movptr(rax, laddress(n));
  0xee0715bc:   mov    (%edi),%edx                  ;;  889:   NOT_LP64(__ movptr(rdx, haddress(n)));
  0xee0715be:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0715c2:   inc    %esi
  0xee0715c3:   jmp    *-0x833daa0(,%ebx,4)
  0xee0715ca:   nop
  0xee0715cb:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lload_1  31 lload_1  [0xee0715e0, 0xee07160c]  44 bytes

--------------------------------------------------------------------------------
  0xee0715e0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0715e3:   vmovss %xmm0,(%esp)
  0xee0715e8:   jmp    0xee0715f9                   ;; 1751:       __ jmpb(L);
  0xee0715ea:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0715ed:   vmovsd %xmm0,(%esp)
  0xee0715f2:   jmp    0xee0715f9                   ;; 1754:       __ jmpb(L);
  0xee0715f4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0715f5:   push   %eax
  0xee0715f6:   jmp    0xee0715f9                   ;; 1765:       __ jmpb(L);
  0xee0715f8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0715f9:   mov    -0x8(%edi),%eax              ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  888:   __ movptr(rax, laddress(n));
  0xee0715fc:   mov    -0x4(%edi),%edx              ;;  889:   NOT_LP64(__ movptr(rdx, haddress(n)));
  0xee0715ff:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071603:   inc    %esi
  0xee071604:   jmp    *-0x833daa0(,%ebx,4)
  0xee07160b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lload_2  32 lload_2  [0xee071620, 0xee07164c]  44 bytes

--------------------------------------------------------------------------------
  0xee071620:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee071623:   vmovss %xmm0,(%esp)
  0xee071628:   jmp    0xee071639                   ;; 1751:       __ jmpb(L);
  0xee07162a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07162d:   vmovsd %xmm0,(%esp)
  0xee071632:   jmp    0xee071639                   ;; 1754:       __ jmpb(L);
  0xee071634:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee071635:   push   %eax
  0xee071636:   jmp    0xee071639                   ;; 1765:       __ jmpb(L);
  0xee071638:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee071639:   mov    -0xc(%edi),%eax              ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  888:   __ movptr(rax, laddress(n));
  0xee07163c:   mov    -0x8(%edi),%edx              ;;  889:   NOT_LP64(__ movptr(rdx, haddress(n)));
  0xee07163f:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071643:   inc    %esi
  0xee071644:   jmp    *-0x833daa0(,%ebx,4)
  0xee07164b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lload_3  33 lload_3  [0xee071660, 0xee07168c]  44 bytes

--------------------------------------------------------------------------------
  0xee071660:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee071663:   vmovss %xmm0,(%esp)
  0xee071668:   jmp    0xee071679                   ;; 1751:       __ jmpb(L);
  0xee07166a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07166d:   vmovsd %xmm0,(%esp)
  0xee071672:   jmp    0xee071679                   ;; 1754:       __ jmpb(L);
  0xee071674:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee071675:   push   %eax
  0xee071676:   jmp    0xee071679                   ;; 1765:       __ jmpb(L);
  0xee071678:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee071679:   mov    -0x10(%edi),%eax             ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  888:   __ movptr(rax, laddress(n));
  0xee07167c:   mov    -0xc(%edi),%edx              ;;  889:   NOT_LP64(__ movptr(rdx, haddress(n)));
  0xee07167f:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071683:   inc    %esi
  0xee071684:   jmp    *-0x833daa0(,%ebx,4)
  0xee07168b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fload_0  34 fload_0  [0xee0716a0, 0xee0716cc]  44 bytes

--------------------------------------------------------------------------------
  0xee0716a0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0716a3:   vmovss %xmm0,(%esp)
  0xee0716a8:   jmp    0xee0716b9                   ;; 1751:       __ jmpb(L);
  0xee0716aa:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0716ad:   vmovsd %xmm0,(%esp)
  0xee0716b2:   jmp    0xee0716b9                   ;; 1754:       __ jmpb(L);
  0xee0716b4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0716b5:   push   %eax
  0xee0716b6:   jmp    0xee0716b9                   ;; 1765:       __ jmpb(L);
  0xee0716b8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0716b9:   vmovss (%edi),%xmm0                 ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  894:   __ load_float(faddress(n));
  0xee0716bd:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0716c1:   inc    %esi
  0xee0716c2:   jmp    *-0x833d6a0(,%ebx,4)
  0xee0716c9:   nop
  0xee0716ca:   nop
  0xee0716cb:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fload_1  35 fload_1  [0xee0716e0, 0xee07170c]  44 bytes

--------------------------------------------------------------------------------
  0xee0716e0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0716e3:   vmovss %xmm0,(%esp)
  0xee0716e8:   jmp    0xee0716f9                   ;; 1751:       __ jmpb(L);
  0xee0716ea:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0716ed:   vmovsd %xmm0,(%esp)
  0xee0716f2:   jmp    0xee0716f9                   ;; 1754:       __ jmpb(L);
  0xee0716f4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0716f5:   push   %eax
  0xee0716f6:   jmp    0xee0716f9                   ;; 1765:       __ jmpb(L);
  0xee0716f8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0716f9:   vmovss -0x4(%edi),%xmm0             ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  894:   __ load_float(faddress(n));
  0xee0716fe:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071702:   inc    %esi
  0xee071703:   jmp    *-0x833d6a0(,%ebx,4)
  0xee07170a:   nop
  0xee07170b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fload_2  36 fload_2  [0xee071720, 0xee07174c]  44 bytes

--------------------------------------------------------------------------------
  0xee071720:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee071723:   vmovss %xmm0,(%esp)
  0xee071728:   jmp    0xee071739                   ;; 1751:       __ jmpb(L);
  0xee07172a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07172d:   vmovsd %xmm0,(%esp)
  0xee071732:   jmp    0xee071739                   ;; 1754:       __ jmpb(L);
  0xee071734:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee071735:   push   %eax
  0xee071736:   jmp    0xee071739                   ;; 1765:       __ jmpb(L);
  0xee071738:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee071739:   vmovss -0x8(%edi),%xmm0             ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  894:   __ load_float(faddress(n));
  0xee07173e:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071742:   inc    %esi
  0xee071743:   jmp    *-0x833d6a0(,%ebx,4)
  0xee07174a:   nop
  0xee07174b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fload_3  37 fload_3  [0xee071760, 0xee07178c]  44 bytes

--------------------------------------------------------------------------------
  0xee071760:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee071763:   vmovss %xmm0,(%esp)
  0xee071768:   jmp    0xee071779                   ;; 1751:       __ jmpb(L);
  0xee07176a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07176d:   vmovsd %xmm0,(%esp)
  0xee071772:   jmp    0xee071779                   ;; 1754:       __ jmpb(L);
  0xee071774:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee071775:   push   %eax
  0xee071776:   jmp    0xee071779                   ;; 1765:       __ jmpb(L);
  0xee071778:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee071779:   vmovss -0xc(%edi),%xmm0             ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  894:   __ load_float(faddress(n));
  0xee07177e:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071782:   inc    %esi
  0xee071783:   jmp    *-0x833d6a0(,%ebx,4)
  0xee07178a:   nop
  0xee07178b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dload_0  38 dload_0  [0xee0717a0, 0xee0717cc]  44 bytes

--------------------------------------------------------------------------------
  0xee0717a0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0717a3:   vmovss %xmm0,(%esp)
  0xee0717a8:   jmp    0xee0717b9                   ;; 1751:       __ jmpb(L);
  0xee0717aa:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0717ad:   vmovsd %xmm0,(%esp)
  0xee0717b2:   jmp    0xee0717b9                   ;; 1754:       __ jmpb(L);
  0xee0717b4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0717b5:   push   %eax
  0xee0717b6:   jmp    0xee0717b9                   ;; 1765:       __ jmpb(L);
  0xee0717b8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0717b9:   vmovsd -0x4(%edi),%xmm0             ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  899:   __ load_double(daddress(n));
  0xee0717be:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0717c2:   inc    %esi
  0xee0717c3:   jmp    *-0x833d2a0(,%ebx,4)
  0xee0717ca:   nop
  0xee0717cb:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dload_1  39 dload_1  [0xee0717e0, 0xee07180c]  44 bytes

--------------------------------------------------------------------------------
  0xee0717e0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0717e3:   vmovss %xmm0,(%esp)
  0xee0717e8:   jmp    0xee0717f9                   ;; 1751:       __ jmpb(L);
  0xee0717ea:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0717ed:   vmovsd %xmm0,(%esp)
  0xee0717f2:   jmp    0xee0717f9                   ;; 1754:       __ jmpb(L);
  0xee0717f4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0717f5:   push   %eax
  0xee0717f6:   jmp    0xee0717f9                   ;; 1765:       __ jmpb(L);
  0xee0717f8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0717f9:   vmovsd -0x8(%edi),%xmm0             ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  899:   __ load_double(daddress(n));
  0xee0717fe:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071802:   inc    %esi
  0xee071803:   jmp    *-0x833d2a0(,%ebx,4)
  0xee07180a:   nop
  0xee07180b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dload_2  40 dload_2  [0xee071820, 0xee07184c]  44 bytes

--------------------------------------------------------------------------------
  0xee071820:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee071823:   vmovss %xmm0,(%esp)
  0xee071828:   jmp    0xee071839                   ;; 1751:       __ jmpb(L);
  0xee07182a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07182d:   vmovsd %xmm0,(%esp)
  0xee071832:   jmp    0xee071839                   ;; 1754:       __ jmpb(L);
  0xee071834:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee071835:   push   %eax
  0xee071836:   jmp    0xee071839                   ;; 1765:       __ jmpb(L);
  0xee071838:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee071839:   vmovsd -0xc(%edi),%xmm0             ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  899:   __ load_double(daddress(n));
  0xee07183e:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071842:   inc    %esi
  0xee071843:   jmp    *-0x833d2a0(,%ebx,4)
  0xee07184a:   nop
  0xee07184b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dload_3  41 dload_3  [0xee071860, 0xee07188c]  44 bytes

--------------------------------------------------------------------------------
  0xee071860:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee071863:   vmovss %xmm0,(%esp)
  0xee071868:   jmp    0xee071879                   ;; 1751:       __ jmpb(L);
  0xee07186a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07186d:   vmovsd %xmm0,(%esp)
  0xee071872:   jmp    0xee071879                   ;; 1754:       __ jmpb(L);
  0xee071874:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee071875:   push   %eax
  0xee071876:   jmp    0xee071879                   ;; 1765:       __ jmpb(L);
  0xee071878:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee071879:   vmovsd -0x10(%edi),%xmm0            ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  899:   __ load_double(daddress(n));
  0xee07187e:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071882:   inc    %esi
  0xee071883:   jmp    *-0x833d2a0(,%ebx,4)
  0xee07188a:   nop
  0xee07188b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
aload_0  42 aload_0  [0xee0718a0, 0xee07192c]  140 bytes

--------------------------------------------------------------------------------
  0xee0718a0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0718a3:   vmovss %xmm0,(%esp)
  0xee0718a8:   jmp    0xee0718b9                   ;; 1751:       __ jmpb(L);
  0xee0718aa:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0718ad:   vmovsd %xmm0,(%esp)
  0xee0718b2:   jmp    0xee0718b9                   ;; 1754:       __ jmpb(L);
  0xee0718b4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0718b5:   push   %eax
  0xee0718b6:   jmp    0xee0718b9                   ;; 1765:       __ jmpb(L);
  0xee0718b8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0718b9:   movzbl 0x1(%esi),%ebx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  945:     __ load_unsigned_byte(rbx, at_bcp(Bytecodes::length_for(Bytecodes::_aload_0)));
  0xee0718bd:   cmp    $0xb4,%ebx                   ;;  948:     __ cmpl(rbx, Bytecodes::_getfield);
  0xee0718c3:   je     0xee07191c                   ;;  949:     __ jcc(Assembler::equal, done);
  0xee0718c9:   cmp    $0xd0,%ebx                   ;;  953:     __ cmpl(rbx, Bytecodes::_fast_igetfield);
  0xee0718cf:   mov    $0xdd,%ecx                   ;;  954:     __ movl(bc, Bytecodes::_fast_iaccess_0);
  0xee0718d4:   je     0xee0718f5                   ;;  955:     __ jccb(Assembler::equal, rewrite);
  0xee0718d6:   cmp    $0xcb,%ebx                   ;;  959:     __ cmpl(rbx, Bytecodes::_fast_agetfield);
  0xee0718dc:   mov    $0xde,%ecx                   ;;  960:     __ movl(bc, Bytecodes::_fast_aaccess_0);
  0xee0718e1:   je     0xee0718f5                   ;;  961:     __ jccb(Assembler::equal, rewrite);
  0xee0718e3:   cmp    $0xcf,%ebx                   ;;  965:     __ cmpl(rbx, Bytecodes::_fast_fgetfield);
  0xee0718e9:   mov    $0xdf,%ecx                   ;;  966:     __ movl(bc, Bytecodes::_fast_faccess_0);
  0xee0718ee:   je     0xee0718f5                   ;;  967:     __ jccb(Assembler::equal, rewrite);
  0xee0718f0:   mov    $0xdc,%ecx                   ;;  971:     __ movl(bc, Bytecodes::_fast_aload_0);
  0xee0718f5:   movzbl (%esi),%ebx                  ;;  975:     __ bind(rewrite);
                                                    ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee0718f8:   cmp    $0x2a,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee0718fb:   je     0xee07191a                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee071901:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee071903:   je     0xee07191a                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee071909:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07190e:   call   0xee071913
  0xee071913:   pusha  
  0xee071914:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee071919:   hlt    
  0xee07191a:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07191c:   mov    (%edi),%eax                  ;;  242:   __ bind(L_patch_done);
                                                    ;;  978:     __ bind(done);
                                                    ;;  904:   __ movptr(rax, aaddress(n));
  0xee07191e:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071922:   inc    %esi
  0xee071923:   jmp    *-0x833cea0(,%ebx,4)
  0xee07192a:   nop
  0xee07192b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
aload_1  43 aload_1  [0xee071940, 0xee071968]  40 bytes

--------------------------------------------------------------------------------
  0xee071940:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee071943:   vmovss %xmm0,(%esp)
  0xee071948:   jmp    0xee071959                   ;; 1751:       __ jmpb(L);
  0xee07194a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07194d:   vmovsd %xmm0,(%esp)
  0xee071952:   jmp    0xee071959                   ;; 1754:       __ jmpb(L);
  0xee071954:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee071955:   push   %eax
  0xee071956:   jmp    0xee071959                   ;; 1765:       __ jmpb(L);
  0xee071958:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee071959:   mov    -0x4(%edi),%eax              ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  904:   __ movptr(rax, aaddress(n));
  0xee07195c:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071960:   inc    %esi
  0xee071961:   jmp    *-0x833cea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
aload_2  44 aload_2  [0xee071980, 0xee0719a8]  40 bytes

--------------------------------------------------------------------------------
  0xee071980:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee071983:   vmovss %xmm0,(%esp)
  0xee071988:   jmp    0xee071999                   ;; 1751:       __ jmpb(L);
  0xee07198a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07198d:   vmovsd %xmm0,(%esp)
  0xee071992:   jmp    0xee071999                   ;; 1754:       __ jmpb(L);
  0xee071994:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee071995:   push   %eax
  0xee071996:   jmp    0xee071999                   ;; 1765:       __ jmpb(L);
  0xee071998:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee071999:   mov    -0x8(%edi),%eax              ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  904:   __ movptr(rax, aaddress(n));
  0xee07199c:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0719a0:   inc    %esi
  0xee0719a1:   jmp    *-0x833cea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
aload_3  45 aload_3  [0xee0719c0, 0xee0719e8]  40 bytes

--------------------------------------------------------------------------------
  0xee0719c0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0719c3:   vmovss %xmm0,(%esp)
  0xee0719c8:   jmp    0xee0719d9                   ;; 1751:       __ jmpb(L);
  0xee0719ca:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0719cd:   vmovsd %xmm0,(%esp)
  0xee0719d2:   jmp    0xee0719d9                   ;; 1754:       __ jmpb(L);
  0xee0719d4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0719d5:   push   %eax
  0xee0719d6:   jmp    0xee0719d9                   ;; 1765:       __ jmpb(L);
  0xee0719d8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0719d9:   mov    -0xc(%edi),%eax              ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  904:   __ movptr(rax, aaddress(n));
  0xee0719dc:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0719e0:   inc    %esi
  0xee0719e1:   jmp    *-0x833cea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iaload  46 iaload  [0xee071a00, 0xee071a20]  32 bytes

--------------------------------------------------------------------------------
  0xee071a00:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee071a01:   pop    %edx                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  747:   __ pop_ptr(array);
  0xee071a02:   cmp    0x8(%edx),%eax               ;;  754:   __ null_check(array, arrayOopDesc::length_offset_in_bytes());
                                                    ;;  756:   __ movl2ptr(index, index);
                                                    ;;  758:   __ cmpl(index, Address(array, arrayOopDesc::length_offset_in_bytes()));
  0xee071a05:   mov    %eax,%ebx                    ;;  762:     __ movl(rbx, index);
  0xee071a07:   jb     0xee071a10                   ;;  765:   __ jccb(Assembler::below, skip);
  0xee071a09:   mov    %edx,%eax                    ;;  767:   __ mov(NOT_LP64(rax) LP64_ONLY(c_rarg1), array);
  0xee071a0b:   jmp    0xee06d9c0                   ;;  768:   __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));
  0xee071a10:   mov    0xc(%edx,%eax,4),%eax        ;;  769:   __ bind(skip);
                                                    ;;  777:   __ access_load_at(T_INT, IN_HEAP | IS_ARRAY, rax,
  0xee071a14:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071a18:   inc    %esi
  0xee071a19:   jmp    *-0x833dea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
laload  47 laload  [0xee071a40, 0xee071a68]  40 bytes

--------------------------------------------------------------------------------
  0xee071a40:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee071a41:   pop    %edx                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  747:   __ pop_ptr(array);
  0xee071a42:   cmp    0x8(%edx),%eax               ;;  754:   __ null_check(array, arrayOopDesc::length_offset_in_bytes());
                                                    ;;  756:   __ movl2ptr(index, index);
                                                    ;;  758:   __ cmpl(index, Address(array, arrayOopDesc::length_offset_in_bytes()));
  0xee071a45:   mov    %eax,%ebx                    ;;  762:     __ movl(rbx, index);
  0xee071a47:   jb     0xee071a50                   ;;  765:   __ jccb(Assembler::below, skip);
  0xee071a49:   mov    %edx,%eax                    ;;  767:   __ mov(NOT_LP64(rax) LP64_ONLY(c_rarg1), array);
  0xee071a4b:   jmp    0xee06d9c0                   ;;  768:   __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));
  0xee071a50:   mov    %eax,%ebx                    ;;  769:   __ bind(skip);
                                                    ;;  788:   NOT_LP64(__ mov(rbx, rax));
  0xee071a52:   mov    0x10(%edx,%ebx,8),%eax       ;;  790:   __ access_load_at(T_LONG, IN_HEAP | IS_ARRAY, noreg /* ltos */,
  0xee071a56:   mov    0x14(%edx,%ebx,8),%edx
  0xee071a5a:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071a5e:   inc    %esi
  0xee071a5f:   jmp    *-0x833daa0(,%ebx,4)
  0xee071a66:   nop
  0xee071a67:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
faload  48 faload  [0xee071a80, 0xee071aa4]  36 bytes

--------------------------------------------------------------------------------
  0xee071a80:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee071a81:   pop    %edx                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  747:   __ pop_ptr(array);
  0xee071a82:   cmp    0x8(%edx),%eax               ;;  754:   __ null_check(array, arrayOopDesc::length_offset_in_bytes());
                                                    ;;  756:   __ movl2ptr(index, index);
                                                    ;;  758:   __ cmpl(index, Address(array, arrayOopDesc::length_offset_in_bytes()));
  0xee071a85:   mov    %eax,%ebx                    ;;  762:     __ movl(rbx, index);
  0xee071a87:   jb     0xee071a90                   ;;  765:   __ jccb(Assembler::below, skip);
  0xee071a89:   mov    %edx,%eax                    ;;  767:   __ mov(NOT_LP64(rax) LP64_ONLY(c_rarg1), array);
  0xee071a8b:   jmp    0xee06d9c0                   ;;  768:   __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));
  0xee071a90:   vmovss 0xc(%edx,%eax,4),%xmm0       ;;  769:   __ bind(skip);
                                                    ;;  803:   __ access_load_at(T_FLOAT, IN_HEAP | IS_ARRAY, noreg /* ftos */,
  0xee071a96:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071a9a:   inc    %esi
  0xee071a9b:   jmp    *-0x833d6a0(,%ebx,4)
  0xee071aa2:   nop
  0xee071aa3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
daload  49 daload  [0xee071ac0, 0xee071ae4]  36 bytes

--------------------------------------------------------------------------------
  0xee071ac0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee071ac1:   pop    %edx                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  747:   __ pop_ptr(array);
  0xee071ac2:   cmp    0x8(%edx),%eax               ;;  754:   __ null_check(array, arrayOopDesc::length_offset_in_bytes());
                                                    ;;  756:   __ movl2ptr(index, index);
                                                    ;;  758:   __ cmpl(index, Address(array, arrayOopDesc::length_offset_in_bytes()));
  0xee071ac5:   mov    %eax,%ebx                    ;;  762:     __ movl(rbx, index);
  0xee071ac7:   jb     0xee071ad0                   ;;  765:   __ jccb(Assembler::below, skip);
  0xee071ac9:   mov    %edx,%eax                    ;;  767:   __ mov(NOT_LP64(rax) LP64_ONLY(c_rarg1), array);
  0xee071acb:   jmp    0xee06d9c0                   ;;  768:   __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));
  0xee071ad0:   vmovsd 0x10(%edx,%eax,8),%xmm0      ;;  769:   __ bind(skip);
                                                    ;;  815:   __ access_load_at(T_DOUBLE, IN_HEAP | IS_ARRAY, noreg /* dtos */,
  0xee071ad6:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071ada:   inc    %esi
  0xee071adb:   jmp    *-0x833d2a0(,%ebx,4)
  0xee071ae2:   nop
  0xee071ae3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
aaload  50 aaload  [0xee071b00, 0xee071b20]  32 bytes

--------------------------------------------------------------------------------
  0xee071b00:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee071b01:   pop    %edx                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  747:   __ pop_ptr(array);
  0xee071b02:   cmp    0x8(%edx),%eax               ;;  754:   __ null_check(array, arrayOopDesc::length_offset_in_bytes());
                                                    ;;  756:   __ movl2ptr(index, index);
                                                    ;;  758:   __ cmpl(index, Address(array, arrayOopDesc::length_offset_in_bytes()));
  0xee071b05:   mov    %eax,%ebx                    ;;  762:     __ movl(rbx, index);
  0xee071b07:   jb     0xee071b10                   ;;  765:   __ jccb(Assembler::below, skip);
  0xee071b09:   mov    %edx,%eax                    ;;  767:   __ mov(NOT_LP64(rax) LP64_ONLY(c_rarg1), array);
  0xee071b0b:   jmp    0xee06d9c0                   ;;  768:   __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));
  0xee071b10:   mov    0xc(%edx,%eax,4),%eax        ;;  769:   __ bind(skip);
                                                    ;;  165:   __ load_heap_oop(dst, src, rdx, rbx, decorators);
  0xee071b14:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071b18:   inc    %esi
  0xee071b19:   jmp    *-0x833cea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
baload  51 baload  [0xee071b40, 0xee071b64]  36 bytes

--------------------------------------------------------------------------------
  0xee071b40:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee071b41:   pop    %edx                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  747:   __ pop_ptr(array);
  0xee071b42:   cmp    0x8(%edx),%eax               ;;  754:   __ null_check(array, arrayOopDesc::length_offset_in_bytes());
                                                    ;;  756:   __ movl2ptr(index, index);
                                                    ;;  758:   __ cmpl(index, Address(array, arrayOopDesc::length_offset_in_bytes()));
  0xee071b45:   mov    %eax,%ebx                    ;;  762:     __ movl(rbx, index);
  0xee071b47:   jb     0xee071b50                   ;;  765:   __ jccb(Assembler::below, skip);
  0xee071b49:   mov    %edx,%eax                    ;;  767:   __ mov(NOT_LP64(rax) LP64_ONLY(c_rarg1), array);
  0xee071b4b:   jmp    0xee06d9c0                   ;;  768:   __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));
  0xee071b50:   movsbl 0xc(%edx,%eax,1),%eax        ;;  769:   __ bind(skip);
                                                    ;;  840:   __ access_load_at(T_BYTE, IN_HEAP | IS_ARRAY, rax,
  0xee071b55:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071b59:   inc    %esi
  0xee071b5a:   jmp    *-0x833dea0(,%ebx,4)
  0xee071b61:   nop
  0xee071b62:   nop
  0xee071b63:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
caload  52 caload  [0xee071b80, 0xee071ba4]  36 bytes

--------------------------------------------------------------------------------
  0xee071b80:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee071b81:   pop    %edx                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  747:   __ pop_ptr(array);
  0xee071b82:   cmp    0x8(%edx),%eax               ;;  754:   __ null_check(array, arrayOopDesc::length_offset_in_bytes());
                                                    ;;  756:   __ movl2ptr(index, index);
                                                    ;;  758:   __ cmpl(index, Address(array, arrayOopDesc::length_offset_in_bytes()));
  0xee071b85:   mov    %eax,%ebx                    ;;  762:     __ movl(rbx, index);
  0xee071b87:   jb     0xee071b90                   ;;  765:   __ jccb(Assembler::below, skip);
  0xee071b89:   mov    %edx,%eax                    ;;  767:   __ mov(NOT_LP64(rax) LP64_ONLY(c_rarg1), array);
  0xee071b8b:   jmp    0xee06d9c0                   ;;  768:   __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));
  0xee071b90:   movzwl 0xc(%edx,%eax,2),%eax        ;;  769:   __ bind(skip);
                                                    ;;  850:   __ access_load_at(T_CHAR, IN_HEAP | IS_ARRAY, rax,
  0xee071b95:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071b99:   inc    %esi
  0xee071b9a:   jmp    *-0x833dea0(,%ebx,4)
  0xee071ba1:   nop
  0xee071ba2:   nop
  0xee071ba3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
saload  53 saload  [0xee071bc0, 0xee071be4]  36 bytes

--------------------------------------------------------------------------------
  0xee071bc0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee071bc1:   pop    %edx                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  747:   __ pop_ptr(array);
  0xee071bc2:   cmp    0x8(%edx),%eax               ;;  754:   __ null_check(array, arrayOopDesc::length_offset_in_bytes());
                                                    ;;  756:   __ movl2ptr(index, index);
                                                    ;;  758:   __ cmpl(index, Address(array, arrayOopDesc::length_offset_in_bytes()));
  0xee071bc5:   mov    %eax,%ebx                    ;;  762:     __ movl(rbx, index);
  0xee071bc7:   jb     0xee071bd0                   ;;  765:   __ jccb(Assembler::below, skip);
  0xee071bc9:   mov    %edx,%eax                    ;;  767:   __ mov(NOT_LP64(rax) LP64_ONLY(c_rarg1), array);
  0xee071bcb:   jmp    0xee06d9c0                   ;;  768:   __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));
  0xee071bd0:   movswl 0xc(%edx,%eax,2),%eax        ;;  769:   __ bind(skip);
                                                    ;;  876:   __ access_load_at(T_SHORT, IN_HEAP | IS_ARRAY, rax,
  0xee071bd5:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071bd9:   inc    %esi
  0xee071bda:   jmp    *-0x833dea0(,%ebx,4)
  0xee071be1:   nop
  0xee071be2:   nop
  0xee071be3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
istore  54 istore  [0xee071c00, 0xee071c38]  56 bytes

--------------------------------------------------------------------------------
  0xee071c00:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee071c01:   movzbl 0x1(%esi),%ebx               ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  613:   __ load_unsigned_byte(reg, at_bcp(offset));
  0xee071c05:   neg    %ebx                         ;;  614:   __ negptr(reg);
  0xee071c07:   mov    %eax,(%edi,%ebx,4)           ;;  988:   __ movl(iaddress(rbx), rax);
  0xee071c0a:   movzbl 0x2(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071c0e:   add    $0x2,%esi
  0xee071c11:   jmp    *-0x833caa0(,%ebx,4)
  0xee071c18:   pop    %eax                         ;;  335:   wep = __ pc(); generate_and_dispatch(t);
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1020:   __ pop_i();
  0xee071c19:   movzwl 0x2(%esi),%ebx               ;;  708:   __ load_unsigned_short(reg, at_bcp(2));
  0xee071c1d:   bswap  %ebx                         ;;  709:   __ bswapl(reg);
  0xee071c1f:   shr    $0x10,%ebx                   ;;  710:   __ shrl(reg, 16);
  0xee071c22:   neg    %ebx                         ;;  711:   __ negptr(reg);
  0xee071c24:   mov    %eax,(%edi,%ebx,4)           ;; 1022:   __ movl(iaddress(rbx), rax);
  0xee071c27:   movzbl 0x4(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071c2b:   add    $0x4,%esi
  0xee071c2e:   jmp    *-0x833caa0(,%ebx,4)
  0xee071c35:   nop
  0xee071c36:   nop
  0xee071c37:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lstore  55 lstore  [0xee071c60, 0xee071ca0]  64 bytes

--------------------------------------------------------------------------------
  0xee071c60:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee071c61:   pop    %edx
  0xee071c62:   movzbl 0x1(%esi),%ebx               ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  613:   __ load_unsigned_byte(reg, at_bcp(offset));
  0xee071c66:   neg    %ebx                         ;;  614:   __ negptr(reg);
  0xee071c68:   mov    %eax,-0x4(%edi,%ebx,4)       ;;  995:   __ movptr(laddress(rbx), rax);
  0xee071c6c:   mov    %edx,(%edi,%ebx,4)           ;;  996:   NOT_LP64(__ movptr(haddress(rbx), rdx));
  0xee071c6f:   movzbl 0x2(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071c73:   add    $0x2,%esi
  0xee071c76:   jmp    *-0x833caa0(,%ebx,4)
  0xee071c7d:   pop    %eax                         ;;  335:   wep = __ pc(); generate_and_dispatch(t);
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1027:   NOT_LP64(__ pop_l(rax, rdx));
  0xee071c7e:   pop    %edx
  0xee071c7f:   movzwl 0x2(%esi),%ebx               ;;  708:   __ load_unsigned_short(reg, at_bcp(2));
  0xee071c83:   bswap  %ebx                         ;;  709:   __ bswapl(reg);
  0xee071c85:   shr    $0x10,%ebx                   ;;  710:   __ shrl(reg, 16);
  0xee071c88:   neg    %ebx                         ;;  711:   __ negptr(reg);
  0xee071c8a:   mov    %eax,-0x4(%edi,%ebx,4)       ;; 1030:   __ movptr(laddress(rbx), rax);
  0xee071c8e:   mov    %edx,(%edi,%ebx,4)           ;; 1031:   NOT_LP64(__ movl(haddress(rbx), rdx));
  0xee071c91:   movzbl 0x4(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071c95:   add    $0x4,%esi
  0xee071c98:   jmp    *-0x833caa0(,%ebx,4)
  0xee071c9f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fstore  56 fstore  [0xee071cc0, 0xee071d00]  64 bytes

--------------------------------------------------------------------------------
  0xee071cc0:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee071cc5:   add    $0x4,%esp
  0xee071cc8:   movzbl 0x1(%esi),%ebx               ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  613:   __ load_unsigned_byte(reg, at_bcp(offset));
  0xee071ccc:   neg    %ebx                         ;;  614:   __ negptr(reg);
  0xee071cce:   vmovss %xmm0,(%edi,%ebx,4)          ;; 1002:   __ store_float(faddress(rbx));
  0xee071cd3:   movzbl 0x2(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071cd7:   add    $0x2,%esi
  0xee071cda:   jmp    *-0x833caa0(,%ebx,4)
  0xee071ce1:   pop    %eax                         ;;  335:   wep = __ pc(); generate_and_dispatch(t);
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1020:   __ pop_i();
  0xee071ce2:   movzwl 0x2(%esi),%ebx               ;;  708:   __ load_unsigned_short(reg, at_bcp(2));
  0xee071ce6:   bswap  %ebx                         ;;  709:   __ bswapl(reg);
  0xee071ce8:   shr    $0x10,%ebx                   ;;  710:   __ shrl(reg, 16);
  0xee071ceb:   neg    %ebx                         ;;  711:   __ negptr(reg);
  0xee071ced:   mov    %eax,(%edi,%ebx,4)           ;; 1022:   __ movl(iaddress(rbx), rax);
  0xee071cf0:   movzbl 0x4(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071cf4:   add    $0x4,%esi
  0xee071cf7:   jmp    *-0x833caa0(,%ebx,4)
  0xee071cfe:   nop
  0xee071cff:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dstore  57 dstore  [0xee071d20, 0xee071d64]  68 bytes

--------------------------------------------------------------------------------
  0xee071d20:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee071d25:   add    $0x8,%esp
  0xee071d28:   movzbl 0x1(%esi),%ebx               ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  613:   __ load_unsigned_byte(reg, at_bcp(offset));
  0xee071d2c:   neg    %ebx                         ;;  614:   __ negptr(reg);
  0xee071d2e:   vmovsd %xmm0,-0x4(%edi,%ebx,4)      ;; 1008:   __ store_double(daddress(rbx));
  0xee071d34:   movzbl 0x2(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071d38:   add    $0x2,%esi
  0xee071d3b:   jmp    *-0x833caa0(,%ebx,4)
  0xee071d42:   pop    %eax                         ;;  335:   wep = __ pc(); generate_and_dispatch(t);
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1027:   NOT_LP64(__ pop_l(rax, rdx));
  0xee071d43:   pop    %edx
  0xee071d44:   movzwl 0x2(%esi),%ebx               ;;  708:   __ load_unsigned_short(reg, at_bcp(2));
  0xee071d48:   bswap  %ebx                         ;;  709:   __ bswapl(reg);
  0xee071d4a:   shr    $0x10,%ebx                   ;;  710:   __ shrl(reg, 16);
  0xee071d4d:   neg    %ebx                         ;;  711:   __ negptr(reg);
  0xee071d4f:   mov    %eax,-0x4(%edi,%ebx,4)       ;; 1030:   __ movptr(laddress(rbx), rax);
  0xee071d53:   mov    %edx,(%edi,%ebx,4)           ;; 1031:   NOT_LP64(__ movl(haddress(rbx), rdx));
  0xee071d56:   movzbl 0x4(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071d5a:   add    $0x4,%esi
  0xee071d5d:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
astore  58 astore  [0xee071d80, 0xee071dd0]  80 bytes

--------------------------------------------------------------------------------
  0xee071d80:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee071d83:   vmovss %xmm0,(%esp)
  0xee071d88:   jmp    0xee071d99                   ;; 1751:       __ jmpb(L);
  0xee071d8a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee071d8d:   vmovsd %xmm0,(%esp)
  0xee071d92:   jmp    0xee071d99                   ;; 1754:       __ jmpb(L);
  0xee071d94:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee071d95:   push   %eax
  0xee071d96:   jmp    0xee071d99                   ;; 1765:       __ jmpb(L);
  0xee071d98:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee071d99:   pop    %eax                         ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1013:   __ pop_ptr(rax);
  0xee071d9a:   movzbl 0x1(%esi),%ebx               ;;  613:   __ load_unsigned_byte(reg, at_bcp(offset));
  0xee071d9e:   neg    %ebx                         ;;  614:   __ negptr(reg);
  0xee071da0:   mov    %eax,(%edi,%ebx,4)           ;; 1015:   __ movptr(aaddress(rbx), rax);
  0xee071da3:   movzbl 0x2(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071da7:   add    $0x2,%esi
  0xee071daa:   jmp    *-0x833caa0(,%ebx,4)
  0xee071db1:   pop    %eax                         ;;  335:   wep = __ pc(); generate_and_dispatch(t);
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1058:   __ pop_ptr(rax);
  0xee071db2:   movzwl 0x2(%esi),%ebx               ;;  708:   __ load_unsigned_short(reg, at_bcp(2));
  0xee071db6:   bswap  %ebx                         ;;  709:   __ bswapl(reg);
  0xee071db8:   shr    $0x10,%ebx                   ;;  710:   __ shrl(reg, 16);
  0xee071dbb:   neg    %ebx                         ;;  711:   __ negptr(reg);
  0xee071dbd:   mov    %eax,(%edi,%ebx,4)           ;; 1060:   __ movptr(aaddress(rbx), rax);
  0xee071dc0:   movzbl 0x4(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071dc4:   add    $0x4,%esi
  0xee071dc7:   jmp    *-0x833caa0(,%ebx,4)
  0xee071dce:   nop
  0xee071dcf:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
istore_0  59 istore_0  [0xee071e00, 0xee071e10]  16 bytes

--------------------------------------------------------------------------------
  0xee071e00:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee071e01:   mov    %eax,(%edi)                  ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1213:   __ movl(iaddress(n), rax);
  0xee071e03:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071e07:   inc    %esi
  0xee071e08:   jmp    *-0x833caa0(,%ebx,4)
  0xee071e0f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
istore_1  60 istore_1  [0xee071e40, 0xee071e50]  16 bytes

--------------------------------------------------------------------------------
  0xee071e40:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee071e41:   mov    %eax,-0x4(%edi)              ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1213:   __ movl(iaddress(n), rax);
  0xee071e44:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071e48:   inc    %esi
  0xee071e49:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
istore_2  61 istore_2  [0xee071e80, 0xee071e90]  16 bytes

--------------------------------------------------------------------------------
  0xee071e80:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee071e81:   mov    %eax,-0x8(%edi)              ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1213:   __ movl(iaddress(n), rax);
  0xee071e84:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071e88:   inc    %esi
  0xee071e89:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
istore_3  62 istore_3  [0xee071ec0, 0xee071ed0]  16 bytes

--------------------------------------------------------------------------------
  0xee071ec0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee071ec1:   mov    %eax,-0xc(%edi)              ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1213:   __ movl(iaddress(n), rax);
  0xee071ec4:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071ec8:   inc    %esi
  0xee071ec9:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lstore_0  63 lstore_0  [0xee071f00, 0xee071f14]  20 bytes

--------------------------------------------------------------------------------
  0xee071f00:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee071f01:   pop    %edx
  0xee071f02:   mov    %eax,-0x4(%edi)              ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1218:   __ movptr(laddress(n), rax);
  0xee071f05:   mov    %edx,(%edi)                  ;; 1219:   NOT_LP64(__ movptr(haddress(n), rdx));
  0xee071f07:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071f0b:   inc    %esi
  0xee071f0c:   jmp    *-0x833caa0(,%ebx,4)
  0xee071f13:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lstore_1  64 lstore_1  [0xee071f40, 0xee071f54]  20 bytes

--------------------------------------------------------------------------------
  0xee071f40:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee071f41:   pop    %edx
  0xee071f42:   mov    %eax,-0x8(%edi)              ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1218:   __ movptr(laddress(n), rax);
  0xee071f45:   mov    %edx,-0x4(%edi)              ;; 1219:   NOT_LP64(__ movptr(haddress(n), rdx));
  0xee071f48:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071f4c:   inc    %esi
  0xee071f4d:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lstore_2  65 lstore_2  [0xee071f80, 0xee071f94]  20 bytes

--------------------------------------------------------------------------------
  0xee071f80:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee071f81:   pop    %edx
  0xee071f82:   mov    %eax,-0xc(%edi)              ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1218:   __ movptr(laddress(n), rax);
  0xee071f85:   mov    %edx,-0x8(%edi)              ;; 1219:   NOT_LP64(__ movptr(haddress(n), rdx));
  0xee071f88:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071f8c:   inc    %esi
  0xee071f8d:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lstore_3  66 lstore_3  [0xee071fc0, 0xee071fd4]  20 bytes

--------------------------------------------------------------------------------
  0xee071fc0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee071fc1:   pop    %edx
  0xee071fc2:   mov    %eax,-0x10(%edi)             ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1218:   __ movptr(laddress(n), rax);
  0xee071fc5:   mov    %edx,-0xc(%edi)              ;; 1219:   NOT_LP64(__ movptr(haddress(n), rdx));
  0xee071fc8:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee071fcc:   inc    %esi
  0xee071fcd:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fstore_0  67 fstore_0  [0xee072000, 0xee072018]  24 bytes

--------------------------------------------------------------------------------
  0xee072000:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee072005:   add    $0x4,%esp
  0xee072008:   vmovss %xmm0,(%edi)                 ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1224:   __ store_float(faddress(n));
  0xee07200c:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072010:   inc    %esi
  0xee072011:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fstore_1  68 fstore_1  [0xee072040, 0xee07205c]  28 bytes

--------------------------------------------------------------------------------
  0xee072040:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee072045:   add    $0x4,%esp
  0xee072048:   vmovss %xmm0,-0x4(%edi)             ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1224:   __ store_float(faddress(n));
  0xee07204d:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072051:   inc    %esi
  0xee072052:   jmp    *-0x833caa0(,%ebx,4)
  0xee072059:   nop
  0xee07205a:   nop
  0xee07205b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fstore_2  69 fstore_2  [0xee072080, 0xee07209c]  28 bytes

--------------------------------------------------------------------------------
  0xee072080:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee072085:   add    $0x4,%esp
  0xee072088:   vmovss %xmm0,-0x8(%edi)             ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1224:   __ store_float(faddress(n));
  0xee07208d:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072091:   inc    %esi
  0xee072092:   jmp    *-0x833caa0(,%ebx,4)
  0xee072099:   nop
  0xee07209a:   nop
  0xee07209b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fstore_3  70 fstore_3  [0xee0720c0, 0xee0720dc]  28 bytes

--------------------------------------------------------------------------------
  0xee0720c0:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee0720c5:   add    $0x4,%esp
  0xee0720c8:   vmovss %xmm0,-0xc(%edi)             ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1224:   __ store_float(faddress(n));
  0xee0720cd:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0720d1:   inc    %esi
  0xee0720d2:   jmp    *-0x833caa0(,%ebx,4)
  0xee0720d9:   nop
  0xee0720da:   nop
  0xee0720db:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dstore_0  71 dstore_0  [0xee072100, 0xee07211c]  28 bytes

--------------------------------------------------------------------------------
  0xee072100:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee072105:   add    $0x8,%esp
  0xee072108:   vmovsd %xmm0,-0x4(%edi)             ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1229:   __ store_double(daddress(n));
  0xee07210d:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072111:   inc    %esi
  0xee072112:   jmp    *-0x833caa0(,%ebx,4)
  0xee072119:   nop
  0xee07211a:   nop
  0xee07211b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dstore_1  72 dstore_1  [0xee072140, 0xee07215c]  28 bytes

--------------------------------------------------------------------------------
  0xee072140:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee072145:   add    $0x8,%esp
  0xee072148:   vmovsd %xmm0,-0x8(%edi)             ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1229:   __ store_double(daddress(n));
  0xee07214d:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072151:   inc    %esi
  0xee072152:   jmp    *-0x833caa0(,%ebx,4)
  0xee072159:   nop
  0xee07215a:   nop
  0xee07215b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dstore_2  73 dstore_2  [0xee072180, 0xee07219c]  28 bytes

--------------------------------------------------------------------------------
  0xee072180:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee072185:   add    $0x8,%esp
  0xee072188:   vmovsd %xmm0,-0xc(%edi)             ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1229:   __ store_double(daddress(n));
  0xee07218d:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072191:   inc    %esi
  0xee072192:   jmp    *-0x833caa0(,%ebx,4)
  0xee072199:   nop
  0xee07219a:   nop
  0xee07219b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dstore_3  74 dstore_3  [0xee0721c0, 0xee0721dc]  28 bytes

--------------------------------------------------------------------------------
  0xee0721c0:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee0721c5:   add    $0x8,%esp
  0xee0721c8:   vmovsd %xmm0,-0x10(%edi)            ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1229:   __ store_double(daddress(n));
  0xee0721cd:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0721d1:   inc    %esi
  0xee0721d2:   jmp    *-0x833caa0(,%ebx,4)
  0xee0721d9:   nop
  0xee0721da:   nop
  0xee0721db:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
astore_0  75 astore_0  [0xee072200, 0xee072228]  40 bytes

--------------------------------------------------------------------------------
  0xee072200:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee072203:   vmovss %xmm0,(%esp)
  0xee072208:   jmp    0xee072219                   ;; 1751:       __ jmpb(L);
  0xee07220a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07220d:   vmovsd %xmm0,(%esp)
  0xee072212:   jmp    0xee072219                   ;; 1754:       __ jmpb(L);
  0xee072214:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee072215:   push   %eax
  0xee072216:   jmp    0xee072219                   ;; 1765:       __ jmpb(L);
  0xee072218:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee072219:   pop    %eax                         ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1235:   __ pop_ptr(rax);
  0xee07221a:   mov    %eax,(%edi)                  ;; 1236:   __ movptr(aaddress(n), rax);
  0xee07221c:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072220:   inc    %esi
  0xee072221:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
astore_1  76 astore_1  [0xee072240, 0xee07226c]  44 bytes

--------------------------------------------------------------------------------
  0xee072240:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee072243:   vmovss %xmm0,(%esp)
  0xee072248:   jmp    0xee072259                   ;; 1751:       __ jmpb(L);
  0xee07224a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07224d:   vmovsd %xmm0,(%esp)
  0xee072252:   jmp    0xee072259                   ;; 1754:       __ jmpb(L);
  0xee072254:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee072255:   push   %eax
  0xee072256:   jmp    0xee072259                   ;; 1765:       __ jmpb(L);
  0xee072258:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee072259:   pop    %eax                         ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1235:   __ pop_ptr(rax);
  0xee07225a:   mov    %eax,-0x4(%edi)              ;; 1236:   __ movptr(aaddress(n), rax);
  0xee07225d:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072261:   inc    %esi
  0xee072262:   jmp    *-0x833caa0(,%ebx,4)
  0xee072269:   nop
  0xee07226a:   nop
  0xee07226b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
astore_2  77 astore_2  [0xee072280, 0xee0722ac]  44 bytes

--------------------------------------------------------------------------------
  0xee072280:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee072283:   vmovss %xmm0,(%esp)
  0xee072288:   jmp    0xee072299                   ;; 1751:       __ jmpb(L);
  0xee07228a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07228d:   vmovsd %xmm0,(%esp)
  0xee072292:   jmp    0xee072299                   ;; 1754:       __ jmpb(L);
  0xee072294:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee072295:   push   %eax
  0xee072296:   jmp    0xee072299                   ;; 1765:       __ jmpb(L);
  0xee072298:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee072299:   pop    %eax                         ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1235:   __ pop_ptr(rax);
  0xee07229a:   mov    %eax,-0x8(%edi)              ;; 1236:   __ movptr(aaddress(n), rax);
  0xee07229d:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0722a1:   inc    %esi
  0xee0722a2:   jmp    *-0x833caa0(,%ebx,4)
  0xee0722a9:   nop
  0xee0722aa:   nop
  0xee0722ab:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
astore_3  78 astore_3  [0xee0722c0, 0xee0722ec]  44 bytes

--------------------------------------------------------------------------------
  0xee0722c0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0722c3:   vmovss %xmm0,(%esp)
  0xee0722c8:   jmp    0xee0722d9                   ;; 1751:       __ jmpb(L);
  0xee0722ca:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0722cd:   vmovsd %xmm0,(%esp)
  0xee0722d2:   jmp    0xee0722d9                   ;; 1754:       __ jmpb(L);
  0xee0722d4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0722d5:   push   %eax
  0xee0722d6:   jmp    0xee0722d9                   ;; 1765:       __ jmpb(L);
  0xee0722d8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0722d9:   pop    %eax                         ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1235:   __ pop_ptr(rax);
  0xee0722da:   mov    %eax,-0xc(%edi)              ;; 1236:   __ movptr(aaddress(n), rax);
  0xee0722dd:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0722e1:   inc    %esi
  0xee0722e2:   jmp    *-0x833caa0(,%ebx,4)
  0xee0722e9:   nop
  0xee0722ea:   nop
  0xee0722eb:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iastore  79 iastore  [0xee072300, 0xee072320]  32 bytes

--------------------------------------------------------------------------------
  0xee072300:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee072301:   pop    %ebx                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1065:   __ pop_i(rbx);
  0xee072302:   pop    %edx                         ;;  747:   __ pop_ptr(array);
  0xee072303:   cmp    0x8(%edx),%ebx               ;;  754:   __ null_check(array, arrayOopDesc::length_offset_in_bytes());
                                                    ;;  756:   __ movl2ptr(index, index);
                                                    ;;  758:   __ cmpl(index, Address(array, arrayOopDesc::length_offset_in_bytes()));
  0xee072306:   jb     0xee07230f                   ;;  765:   __ jccb(Assembler::below, skip);
  0xee072308:   mov    %edx,%eax                    ;;  767:   __ mov(NOT_LP64(rax) LP64_ONLY(c_rarg1), array);
  0xee07230a:   jmp    0xee06d9c0                   ;;  768:   __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));
  0xee07230f:   mov    %eax,0xc(%edx,%ebx,4)        ;;  769:   __ bind(skip);
                                                    ;; 1070:   __ access_store_at(T_INT, IN_HEAP | IS_ARRAY,
  0xee072313:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072317:   inc    %esi
  0xee072318:   jmp    *-0x833caa0(,%ebx,4)
  0xee07231f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lastore  80 lastore  [0xee072340, 0xee072364]  36 bytes

--------------------------------------------------------------------------------
  0xee072340:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee072341:   pop    %edx
  0xee072342:   pop    %ebx                         ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1078:   __ pop_i(rbx);
  0xee072343:   pop    %ecx                         ;;  747:   __ pop_ptr(array);
  0xee072344:   cmp    0x8(%ecx),%ebx               ;;  754:   __ null_check(array, arrayOopDesc::length_offset_in_bytes());
                                                    ;;  756:   __ movl2ptr(index, index);
                                                    ;;  758:   __ cmpl(index, Address(array, arrayOopDesc::length_offset_in_bytes()));
  0xee072347:   jb     0xee072350                   ;;  765:   __ jccb(Assembler::below, skip);
  0xee072349:   mov    %ecx,%eax                    ;;  767:   __ mov(NOT_LP64(rax) LP64_ONLY(c_rarg1), array);
  0xee07234b:   jmp    0xee06d9c0                   ;;  768:   __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));
  0xee072350:   mov    %eax,0x10(%ecx,%ebx,8)       ;;  769:   __ bind(skip);
                                                    ;; 1084:   __ access_store_at(T_LONG, IN_HEAP | IS_ARRAY,
  0xee072354:   mov    %edx,0x14(%ecx,%ebx,8)
  0xee072358:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07235c:   inc    %esi
  0xee07235d:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fastore  81 fastore  [0xee072380, 0xee0723a8]  40 bytes

--------------------------------------------------------------------------------
  0xee072380:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee072385:   add    $0x4,%esp
  0xee072388:   pop    %ebx                         ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1093:   __ pop_i(rbx);
  0xee072389:   pop    %edx                         ;;  747:   __ pop_ptr(array);
  0xee07238a:   cmp    0x8(%edx),%ebx               ;;  754:   __ null_check(array, arrayOopDesc::length_offset_in_bytes());
                                                    ;;  756:   __ movl2ptr(index, index);
                                                    ;;  758:   __ cmpl(index, Address(array, arrayOopDesc::length_offset_in_bytes()));
  0xee07238d:   jb     0xee072396                   ;;  765:   __ jccb(Assembler::below, skip);
  0xee07238f:   mov    %edx,%eax                    ;;  767:   __ mov(NOT_LP64(rax) LP64_ONLY(c_rarg1), array);
  0xee072391:   jmp    0xee06d9c0                   ;;  768:   __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));
  0xee072396:   vmovss %xmm0,0xc(%edx,%ebx,4)       ;;  769:   __ bind(skip);
                                                    ;; 1098:   __ access_store_at(T_FLOAT, IN_HEAP | IS_ARRAY,
  0xee07239c:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0723a0:   inc    %esi
  0xee0723a1:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dastore  82 dastore  [0xee0723c0, 0xee0723e8]  40 bytes

--------------------------------------------------------------------------------
  0xee0723c0:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee0723c5:   add    $0x8,%esp
  0xee0723c8:   pop    %ebx                         ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1106:   __ pop_i(rbx);
  0xee0723c9:   pop    %edx                         ;;  747:   __ pop_ptr(array);
  0xee0723ca:   cmp    0x8(%edx),%ebx               ;;  754:   __ null_check(array, arrayOopDesc::length_offset_in_bytes());
                                                    ;;  756:   __ movl2ptr(index, index);
                                                    ;;  758:   __ cmpl(index, Address(array, arrayOopDesc::length_offset_in_bytes()));
  0xee0723cd:   jb     0xee0723d6                   ;;  765:   __ jccb(Assembler::below, skip);
  0xee0723cf:   mov    %edx,%eax                    ;;  767:   __ mov(NOT_LP64(rax) LP64_ONLY(c_rarg1), array);
  0xee0723d1:   jmp    0xee06d9c0                   ;;  768:   __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));
  0xee0723d6:   vmovsd %xmm0,0x10(%edx,%ebx,8)      ;;  769:   __ bind(skip);
                                                    ;; 1111:   __ access_store_at(T_DOUBLE, IN_HEAP | IS_ARRAY,
  0xee0723dc:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0723e0:   inc    %esi
  0xee0723e1:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
aastore  83 aastore  [0xee072400, 0xee072814]  1044 bytes

--------------------------------------------------------------------------------
  0xee072400:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee072403:   vmovss %xmm0,(%esp)
  0xee072408:   jmp    0xee072419                   ;; 1751:       __ jmpb(L);
  0xee07240a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07240d:   vmovsd %xmm0,(%esp)
  0xee072412:   jmp    0xee072419                   ;; 1754:       __ jmpb(L);
  0xee072414:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee072415:   push   %eax
  0xee072416:   jmp    0xee072419                   ;; 1765:       __ jmpb(L);
  0xee072418:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee072419:   push   %eax                         ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee07241a:   push   %ebx
  0xee07241b:   push   %ecx
  0xee07241c:   push   %edx
  0xee07241d:   mov    -0x14(%ebp),%ecx
  0xee072420:   test   %ecx,%ecx
  0xee072422:   je     0xee072463
  0xee072428:   mov    -0xc(%ebp),%ebx
  0xee07242b:   movzwl 0x2(%ecx),%edx
  0xee07242f:   add    0x8(%ebx),%edx
  0xee072432:   lea    0x2c(%edx),%edx
  0xee072435:   cmp    %esi,%edx
  0xee072437:   je     0xee072463
  0xee07243d:   push   %ecx
  0xee07243e:   push   %esi
  0xee07243f:   push   %ebx
  0xee072440:   cmpl   $0x0,-0x8(%ebp)
  0xee072444:   je     0xee07245b
  0xee07244a:   push   $0xf785694c
  0xee07244f:   call   0xee072454
  0xee072454:   pusha  
  0xee072455:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07245a:   hlt    
  0xee07245b:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee072460:   add    $0xc,%esp
  0xee072463:   pop    %edx
  0xee072464:   pop    %ecx
  0xee072465:   pop    %ebx
  0xee072466:   pop    %eax
  0xee072467:   mov    (%esp),%eax                  ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1121:   __ movptr(rax, at_tos());    // value
  0xee07246a:   mov    0x4(%esp),%ecx               ;; 1122:   __ movl(rcx, at_tos_p1()); // index
  0xee07246e:   mov    0x8(%esp),%edx               ;; 1123:   __ movptr(rdx, at_tos_p2()); // array
  0xee072472:   cmp    0x8(%edx),%ecx               ;;  754:   __ null_check(array, arrayOopDesc::length_offset_in_bytes());
                                                    ;;  756:   __ movl2ptr(index, index);
                                                    ;;  758:   __ cmpl(index, Address(array, arrayOopDesc::length_offset_in_bytes()));
  0xee072475:   mov    %ecx,%ebx                    ;;  762:     __ movl(rbx, index);
  0xee072477:   jb     0xee072480                   ;;  765:   __ jccb(Assembler::below, skip);
  0xee072479:   mov    %edx,%eax                    ;;  767:   __ mov(NOT_LP64(rax) LP64_ONLY(c_rarg1), array);
  0xee07247b:   jmp    0xee06d9c0                   ;;  768:   __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));
  0xee072480:   test   %eax,%eax                    ;;  769:   __ bind(skip);
                                                    ;; 1130:   __ testptr(rax, rax);
  0xee072482:   je     0xee0726fe                   ;; 1131:   __ jcc(Assembler::zero, is_null);
  0xee072488:   mov    0x4(%eax),%ebx               ;; 1134:   __ load_klass(rbx, rax, rscratch1);
  0xee07248b:   mov    0x4(%edx),%eax               ;; 1136:   __ load_klass(rax, rdx, rscratch1);
  0xee07248e:   mov    0x7c(%eax),%eax              ;; 1137:   __ movptr(rax, Address(rax,
  0xee072491:   mov    -0x14(%ebp),%ecx             ;; 1142:   __ gen_subtype_check(rbx, ok_is_subtype);
  0xee072494:   test   %ecx,%ecx
  0xee072496:   je     0xee07251a
  0xee07249c:   mov    0xc(%ecx),%edi
  0xee07249f:   cmp    %ebx,%edi
  0xee0724a1:   jne    0xee0724b4
  0xee0724a7:   addl   $0x1,0x10(%ecx)
  0xee0724ab:   sbbl   $0x0,0x10(%ecx)
  0xee0724af:   jmp    0xee07250d
  0xee0724b4:   test   %edi,%edi
  0xee0724b6:   je     0xee0724ec
  0xee0724bc:   mov    0x14(%ecx),%edi
  0xee0724bf:   cmp    %ebx,%edi
  0xee0724c1:   jne    0xee0724d4
  0xee0724c7:   addl   $0x1,0x18(%ecx)
  0xee0724cb:   sbbl   $0x0,0x18(%ecx)
  0xee0724cf:   jmp    0xee07250d
  0xee0724d4:   test   %edi,%edi
  0xee0724d6:   jne    0xee07250d
  0xee0724dc:   mov    %ebx,0x14(%ecx)
  0xee0724df:   mov    $0x1,%edi
  0xee0724e4:   mov    %edi,0x18(%ecx)
  0xee0724e7:   jmp    0xee07250d
  0xee0724ec:   cmp    0x14(%ecx),%ebx
  0xee0724ef:   jne    0xee072502
  0xee0724f5:   addl   $0x1,0x18(%ecx)
  0xee0724f9:   sbbl   $0x0,0x18(%ecx)
  0xee0724fd:   jmp    0xee07250d
  0xee072502:   mov    %ebx,0xc(%ecx)
  0xee072505:   mov    $0x1,%edi
  0xee07250a:   mov    %edi,0x10(%ecx)
  0xee07250d:   mov    -0x1c(%ebp),%edi
  0xee072510:   lea    0x0(%ebp,%edi,4),%edi
  0xee072514:   add    $0x1c,%ecx
  0xee072517:   mov    %ecx,-0x14(%ebp)
  0xee07251a:   cmp    %eax,%ebx
  0xee07251c:   je     0xee072573
  0xee072522:   mov    0x14(%eax),%ecx
  0xee072525:   cmp    (%ebx,%ecx,1),%eax
  0xee072528:   je     0xee072573
  0xee07252e:   cmp    $0x1c,%ecx
  0xee072531:   jne    0xee072555
  0xee072537:   push   %edi
  0xee072538:   incl   0xf7cb5bc0
  0xee07253e:   mov    0x20(%ebx),%edi
  0xee072541:   mov    (%edi),%ecx
  0xee072543:   add    $0x4,%edi
  0xee072546:   test   %eax,%eax
  0xee072548:   repnz scas %es:(%edi),%eax
  0xee07254a:   pop    %edi
  0xee07254b:   jne    0xee072555
  0xee07254d:   mov    %eax,0x1c(%ebx)
  0xee072550:   jmp    0xee072573
  0xee072555:   mov    -0x14(%ebp),%ecx
  0xee072558:   test   %ecx,%ecx
  0xee07255a:   je     0xee07256e
  0xee072560:   addl   $0xffffffff,-0x14(%ecx)
  0xee072564:   js     0xee07256e
  0xee07256a:   addl   $0x1,-0x14(%ecx)
  0xee07256e:   jmp    0xee06da79                   ;; 1146:   __ jump(ExternalAddress(Interpreter::_throw_ArrayStoreException_entry));
  0xee072573:   mov    (%esp),%eax                  ;; 1149:   __ bind(ok_is_subtype);
                                                    ;; 1152:   __ movptr(rax, at_tos());
  0xee072576:   mov    0x4(%esp),%ecx               ;; 1153:   __ movl(rcx, at_tos_p1()); // index
  0xee07257a:   lea    0xc(%edx,%ecx,4),%edx        ;;  155:   __ store_heap_oop(dst, val,
  0xee07257e:   push   %eax
  0xee07257f:   push   %edx
  0xee072580:   push   %ecx
  0xee072581:   call   0xf704a910 = Thread::current()
  0xee072586:   pop    %ecx
  0xee072587:   pop    %edx
  0xee072588:   mov    %eax,%ecx
  0xee07258a:   pop    %eax
  0xee07258b:   mov    %esi,-0x20(%ebp)
  0xee07258e:   cmpb   $0x0,0x24(%ecx)
  0xee072592:   je     0xee072663
  0xee072598:   mov    (%edx),%ebx
  0xee07259a:   cmp    $0x0,%ebx
  0xee07259d:   je     0xee072663
  0xee0725a3:   mov    0x18(%ecx),%esi
  0xee0725a6:   cmp    $0x0,%esi
  0xee0725a9:   je     0xee0725bf
  0xee0725af:   sub    $0x4,%esi
  0xee0725b2:   mov    %esi,0x18(%ecx)
  0xee0725b5:   add    0x20(%ecx),%esi
  0xee0725b8:   mov    %ebx,(%esi)
  0xee0725ba:   jmp    0xee072663
 ;; push_call_clobbered_registers start
  0xee0725bf:   sub    $0x50,%esp
  0xee0725c2:   mov    %eax,(%esp)
  0xee0725c5:   mov    %ecx,0x4(%esp)
  0xee0725c9:   mov    %edx,0x8(%esp)
  0xee0725cd:   vmovsd %xmm0,0x10(%esp)
  0xee0725d3:   vmovsd %xmm1,0x18(%esp)
  0xee0725d9:   vmovsd %xmm2,0x20(%esp)
  0xee0725df:   vmovsd %xmm3,0x28(%esp)
  0xee0725e5:   vmovsd %xmm4,0x30(%esp)
  0xee0725eb:   vmovsd %xmm5,0x38(%esp)
  0xee0725f1:   vmovsd %xmm6,0x40(%esp)
  0xee0725f7:   vmovsd %xmm7,0x48(%esp)
 ;; push_call_clobbered_registers end
  0xee0725fd:   push   %ecx
  0xee0725fe:   push   %ebx
  0xee0725ff:   cmpl   $0x0,-0x8(%ebp)
  0xee072603:   je     0xee07261a
  0xee072609:   push   $0xf785694c
  0xee07260e:   call   0xee072613
  0xee072613:   pusha  
  0xee072614:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee072619:   hlt    
  0xee07261a:   call   0xf6a17f10 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0xee07261f:   add    $0x8,%esp
 ;; pop_call_clobbered_registers start
  0xee072622:   vmovsd 0x48(%esp),%xmm7
  0xee072628:   vmovsd 0x40(%esp),%xmm6
  0xee07262e:   vmovsd 0x38(%esp),%xmm5
  0xee072634:   vmovsd 0x30(%esp),%xmm4
  0xee07263a:   vmovsd 0x28(%esp),%xmm3
  0xee072640:   vmovsd 0x20(%esp),%xmm2
  0xee072646:   vmovsd 0x18(%esp),%xmm1
  0xee07264c:   vmovsd 0x10(%esp),%xmm0
  0xee072652:   mov    0x8(%esp),%edx
  0xee072656:   mov    0x4(%esp),%ecx
  0xee07265a:   mov    (%esp),%eax
  0xee07265d:   add    $0x50,%esp
  0xee072660:   vzeroupper 
 ;; pop_call_clobbered_registers end
  0xee072663:   mov    %eax,(%edx)
  0xee072665:   mov    %edx,%esi
  0xee072667:   xor    %eax,%esi
  0xee072669:   shr    $0x14,%esi
  0xee07266c:   je     0xee0726f6
  0xee072672:   cmp    $0x0,%eax
  0xee072675:   je     0xee0726f6
  0xee07267b:   mov    %edx,%esi
  0xee07267d:   shr    $0x9,%esi
  0xee072680:   mov    $0xa5ecc000,%ebx
  0xee072685:   add    %ebx,%esi
  0xee072687:   cmpb   $0x2,(%esi)
  0xee07268a:   je     0xee0726f6
  0xee072690:   lock addl $0x0,-0x40(%esp)
  0xee072696:   cmpb   $0x0,(%esi)
  0xee072699:   je     0xee0726f6
  0xee07269f:   movb   $0x0,(%esi)
  0xee0726a2:   mov    0x28(%ecx),%ebx
  0xee0726a5:   test   %ebx,%ebx
  0xee0726a7:   je     0xee0726bd
  0xee0726ad:   sub    $0x4,%ebx
  0xee0726b0:   mov    %ebx,0x28(%ecx)
  0xee0726b3:   add    0x30(%ecx),%ebx
  0xee0726b6:   mov    %esi,(%ebx)
  0xee0726b8:   jmp    0xee0726f6
  0xee0726bd:   sub    $0x10,%esp
  0xee0726c0:   mov    %ecx,(%esp)
  0xee0726c3:   mov    %edx,0x4(%esp)
  0xee0726c7:   push   %ecx
  0xee0726c8:   push   %esi
  0xee0726c9:   cmpl   $0x0,-0x8(%ebp)
  0xee0726cd:   je     0xee0726e4
  0xee0726d3:   push   $0xf785694c
  0xee0726d8:   call   0xee0726dd
  0xee0726dd:   pusha  
  0xee0726de:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0726e3:   hlt    
  0xee0726e4:   call   0xf6a181d0 = G1BarrierSetRuntime::write_ref_field_post_entry(unsigned char volatile*, JavaThread*)
  0xee0726e9:   add    $0x8,%esp
  0xee0726ec:   mov    0x4(%esp),%edx
  0xee0726f0:   mov    (%esp),%ecx
  0xee0726f3:   add    $0x10,%esp
  0xee0726f6:   mov    -0x20(%ebp),%esi
  0xee0726f9:   jmp    0xee072805                   ;; 1156:   __ jmp(done);
  0xee0726fe:   mov    -0x14(%ebp),%ebx             ;; 1159:   __ bind(is_null);
                                                    ;; 1160:   __ profile_null_seen(rbx);
  0xee072701:   test   %ebx,%ebx
  0xee072703:   je     0xee072713
  0xee072709:   orb    $0x1,0x1(%ebx)
  0xee07270d:   add    $0x1c,%ebx
  0xee072710:   mov    %ebx,-0x14(%ebp)
  0xee072713:   lea    0xc(%edx,%ecx,4),%edx        ;;  155:   __ store_heap_oop(dst, val,
  0xee072717:   push   %eax
  0xee072718:   push   %edx
  0xee072719:   push   %ecx
  0xee07271a:   call   0xf704a910 = Thread::current()
  0xee07271f:   pop    %ecx
  0xee072720:   pop    %edx
  0xee072721:   mov    %eax,%ecx
  0xee072723:   pop    %eax
  0xee072724:   mov    %esi,-0x20(%ebp)
  0xee072727:   cmpb   $0x0,0x24(%ecx)
  0xee07272b:   je     0xee0727fc
  0xee072731:   mov    (%edx),%ebx
  0xee072733:   cmp    $0x0,%ebx
  0xee072736:   je     0xee0727fc
  0xee07273c:   mov    0x18(%ecx),%esi
  0xee07273f:   cmp    $0x0,%esi
  0xee072742:   je     0xee072758
  0xee072748:   sub    $0x4,%esi
  0xee07274b:   mov    %esi,0x18(%ecx)
  0xee07274e:   add    0x20(%ecx),%esi
  0xee072751:   mov    %ebx,(%esi)
  0xee072753:   jmp    0xee0727fc
 ;; push_call_clobbered_registers start
  0xee072758:   sub    $0x50,%esp
  0xee07275b:   mov    %eax,(%esp)
  0xee07275e:   mov    %ecx,0x4(%esp)
  0xee072762:   mov    %edx,0x8(%esp)
  0xee072766:   vmovsd %xmm0,0x10(%esp)
  0xee07276c:   vmovsd %xmm1,0x18(%esp)
  0xee072772:   vmovsd %xmm2,0x20(%esp)
  0xee072778:   vmovsd %xmm3,0x28(%esp)
  0xee07277e:   vmovsd %xmm4,0x30(%esp)
  0xee072784:   vmovsd %xmm5,0x38(%esp)
  0xee07278a:   vmovsd %xmm6,0x40(%esp)
  0xee072790:   vmovsd %xmm7,0x48(%esp)
 ;; push_call_clobbered_registers end
  0xee072796:   push   %ecx
  0xee072797:   push   %ebx
  0xee072798:   cmpl   $0x0,-0x8(%ebp)
  0xee07279c:   je     0xee0727b3
  0xee0727a2:   push   $0xf785694c
  0xee0727a7:   call   0xee0727ac
  0xee0727ac:   pusha  
  0xee0727ad:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0727b2:   hlt    
  0xee0727b3:   call   0xf6a17f10 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0xee0727b8:   add    $0x8,%esp
 ;; pop_call_clobbered_registers start
  0xee0727bb:   vmovsd 0x48(%esp),%xmm7
  0xee0727c1:   vmovsd 0x40(%esp),%xmm6
  0xee0727c7:   vmovsd 0x38(%esp),%xmm5
  0xee0727cd:   vmovsd 0x30(%esp),%xmm4
  0xee0727d3:   vmovsd 0x28(%esp),%xmm3
  0xee0727d9:   vmovsd 0x20(%esp),%xmm2
  0xee0727df:   vmovsd 0x18(%esp),%xmm1
  0xee0727e5:   vmovsd 0x10(%esp),%xmm0
  0xee0727eb:   mov    0x8(%esp),%edx
  0xee0727ef:   mov    0x4(%esp),%ecx
  0xee0727f3:   mov    (%esp),%eax
  0xee0727f6:   add    $0x50,%esp
  0xee0727f9:   vzeroupper 
 ;; pop_call_clobbered_registers end
  0xee0727fc:   movl   $0x0,(%edx)
  0xee072802:   mov    -0x20(%ebp),%esi
  0xee072805:   add    $0xc,%esp                    ;; 1166:   __ bind(done);
                                                    ;; 1167:   __ addptr(rsp, 3 * Interpreter::stackElementSize);
  0xee072808:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07280c:   inc    %esi
  0xee07280d:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
bastore  84 bastore  [0xee072840, 0xee072870]  48 bytes

--------------------------------------------------------------------------------
  0xee072840:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee072841:   pop    %ebx                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1172:   __ pop_i(rbx);
  0xee072842:   pop    %edx                         ;;  747:   __ pop_ptr(array);
  0xee072843:   cmp    0x8(%edx),%ebx               ;;  754:   __ null_check(array, arrayOopDesc::length_offset_in_bytes());
                                                    ;;  756:   __ movl2ptr(index, index);
                                                    ;;  758:   __ cmpl(index, Address(array, arrayOopDesc::length_offset_in_bytes()));
  0xee072846:   jb     0xee07284f                   ;;  765:   __ jccb(Assembler::below, skip);
  0xee072848:   mov    %edx,%eax                    ;;  767:   __ mov(NOT_LP64(rax) LP64_ONLY(c_rarg1), array);
  0xee07284a:   jmp    0xee06d9c0                   ;;  768:   __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));
  0xee07284f:   mov    0x4(%edx),%ecx               ;;  769:   __ bind(skip);
                                                    ;; 1179:   __ load_klass(rcx, rdx, rscratch1);
  0xee072852:   mov    0x8(%ecx),%ecx               ;; 1180:   __ movl(rcx, Address(rcx, Klass::layout_helper_offset()));
  0xee072855:   test   $0x400,%ecx                  ;; 1182:   __ testl(rcx, diffbit);
  0xee07285b:   je     0xee072860                   ;; 1184:   __ jccb(Assembler::zero, L_skip);
  0xee07285d:   and    $0x1,%eax                    ;; 1185:   __ andl(rax, 1);  // if it is a T_BOOLEAN array, mask the stored value to 0/1
  0xee072860:   mov    %al,0xc(%edx,%ebx,1)         ;; 1186:   __ bind(L_skip);
                                                    ;; 1187:   __ access_store_at(T_BYTE, IN_HEAP | IS_ARRAY,
  0xee072864:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072868:   inc    %esi
  0xee072869:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
castore  85 castore  [0xee0728a0, 0xee0728c0]  32 bytes

--------------------------------------------------------------------------------
  0xee0728a0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee0728a1:   pop    %ebx                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1195:   __ pop_i(rbx);
  0xee0728a2:   pop    %edx                         ;;  747:   __ pop_ptr(array);
  0xee0728a3:   cmp    0x8(%edx),%ebx               ;;  754:   __ null_check(array, arrayOopDesc::length_offset_in_bytes());
                                                    ;;  756:   __ movl2ptr(index, index);
                                                    ;;  758:   __ cmpl(index, Address(array, arrayOopDesc::length_offset_in_bytes()));
  0xee0728a6:   jb     0xee0728af                   ;;  765:   __ jccb(Assembler::below, skip);
  0xee0728a8:   mov    %edx,%eax                    ;;  767:   __ mov(NOT_LP64(rax) LP64_ONLY(c_rarg1), array);
  0xee0728aa:   jmp    0xee06d9c0                   ;;  768:   __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));
  0xee0728af:   mov    %ax,0xc(%edx,%ebx,2)         ;;  769:   __ bind(skip);
                                                    ;; 1200:   __ access_store_at(T_CHAR, IN_HEAP | IS_ARRAY,
  0xee0728b4:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0728b8:   inc    %esi
  0xee0728b9:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
sastore  86 sastore  [0xee0728e0, 0xee072900]  32 bytes

--------------------------------------------------------------------------------
  0xee0728e0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee0728e1:   pop    %ebx                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1195:   __ pop_i(rbx);
  0xee0728e2:   pop    %edx                         ;;  747:   __ pop_ptr(array);
  0xee0728e3:   cmp    0x8(%edx),%ebx               ;;  754:   __ null_check(array, arrayOopDesc::length_offset_in_bytes());
                                                    ;;  756:   __ movl2ptr(index, index);
                                                    ;;  758:   __ cmpl(index, Address(array, arrayOopDesc::length_offset_in_bytes()));
  0xee0728e6:   jb     0xee0728ef                   ;;  765:   __ jccb(Assembler::below, skip);
  0xee0728e8:   mov    %edx,%eax                    ;;  767:   __ mov(NOT_LP64(rax) LP64_ONLY(c_rarg1), array);
  0xee0728ea:   jmp    0xee06d9c0                   ;;  768:   __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));
  0xee0728ef:   mov    %ax,0xc(%edx,%ebx,2)         ;;  769:   __ bind(skip);
                                                    ;; 1200:   __ access_store_at(T_CHAR, IN_HEAP | IS_ARRAY,
  0xee0728f4:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0728f8:   inc    %esi
  0xee0728f9:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
pop  87 pop  [0xee072920, 0xee072948]  40 bytes

--------------------------------------------------------------------------------
  0xee072920:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee072923:   vmovss %xmm0,(%esp)
  0xee072928:   jmp    0xee072939                   ;; 1751:       __ jmpb(L);
  0xee07292a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07292d:   vmovsd %xmm0,(%esp)
  0xee072932:   jmp    0xee072939                   ;; 1754:       __ jmpb(L);
  0xee072934:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee072935:   push   %eax
  0xee072936:   jmp    0xee072939                   ;; 1765:       __ jmpb(L);
  0xee072938:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee072939:   add    $0x4,%esp                    ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1241:   __ addptr(rsp, Interpreter::stackElementSize);
  0xee07293c:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072940:   inc    %esi
  0xee072941:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
pop2  88 pop2  [0xee072960, 0xee072988]  40 bytes

--------------------------------------------------------------------------------
  0xee072960:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee072963:   vmovss %xmm0,(%esp)
  0xee072968:   jmp    0xee072979                   ;; 1751:       __ jmpb(L);
  0xee07296a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07296d:   vmovsd %xmm0,(%esp)
  0xee072972:   jmp    0xee072979                   ;; 1754:       __ jmpb(L);
  0xee072974:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee072975:   push   %eax
  0xee072976:   jmp    0xee072979                   ;; 1765:       __ jmpb(L);
  0xee072978:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee072979:   add    $0x8,%esp                    ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1246:   __ addptr(rsp, 2 * Interpreter::stackElementSize);
  0xee07297c:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072980:   inc    %esi
  0xee072981:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dup  89 dup  [0xee0729a0, 0xee0729cc]  44 bytes

--------------------------------------------------------------------------------
  0xee0729a0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0729a3:   vmovss %xmm0,(%esp)
  0xee0729a8:   jmp    0xee0729b9                   ;; 1751:       __ jmpb(L);
  0xee0729aa:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0729ad:   vmovsd %xmm0,(%esp)
  0xee0729b2:   jmp    0xee0729b9                   ;; 1754:       __ jmpb(L);
  0xee0729b4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0729b5:   push   %eax
  0xee0729b6:   jmp    0xee0729b9                   ;; 1765:       __ jmpb(L);
  0xee0729b8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0729b9:   mov    (%esp),%eax                  ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1252:   __ load_ptr(0, rax);
  0xee0729bc:   push   %eax                         ;; 1253:   __ push_ptr(rax);
  0xee0729bd:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0729c1:   inc    %esi
  0xee0729c2:   jmp    *-0x833caa0(,%ebx,4)
  0xee0729c9:   nop
  0xee0729ca:   nop
  0xee0729cb:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dup_x1  90 dup_x1  [0xee0729e0, 0xee072a14]  52 bytes

--------------------------------------------------------------------------------
  0xee0729e0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0729e3:   vmovss %xmm0,(%esp)
  0xee0729e8:   jmp    0xee0729f9                   ;; 1751:       __ jmpb(L);
  0xee0729ea:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0729ed:   vmovsd %xmm0,(%esp)
  0xee0729f2:   jmp    0xee0729f9                   ;; 1754:       __ jmpb(L);
  0xee0729f4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0729f5:   push   %eax
  0xee0729f6:   jmp    0xee0729f9                   ;; 1765:       __ jmpb(L);
  0xee0729f8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0729f9:   mov    (%esp),%eax                  ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1260:   __ load_ptr( 0, rax);  // load b
  0xee0729fc:   mov    0x4(%esp),%ecx               ;; 1261:   __ load_ptr( 1, rcx);  // load a
  0xee072a00:   mov    %eax,0x4(%esp)               ;; 1262:   __ store_ptr(1, rax);  // store b
  0xee072a04:   mov    %ecx,(%esp)                  ;; 1263:   __ store_ptr(0, rcx);  // store a
  0xee072a07:   push   %eax                         ;; 1264:   __ push_ptr(rax);      // push b
  0xee072a08:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072a0c:   inc    %esi
  0xee072a0d:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dup_x2  91 dup_x2  [0xee072a40, 0xee072a80]  64 bytes

--------------------------------------------------------------------------------
  0xee072a40:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee072a43:   vmovss %xmm0,(%esp)
  0xee072a48:   jmp    0xee072a59                   ;; 1751:       __ jmpb(L);
  0xee072a4a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee072a4d:   vmovsd %xmm0,(%esp)
  0xee072a52:   jmp    0xee072a59                   ;; 1754:       __ jmpb(L);
  0xee072a54:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee072a55:   push   %eax
  0xee072a56:   jmp    0xee072a59                   ;; 1765:       __ jmpb(L);
  0xee072a58:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee072a59:   mov    (%esp),%eax                  ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1271:   __ load_ptr( 0, rax);  // load c
  0xee072a5c:   mov    0x8(%esp),%ecx               ;; 1272:   __ load_ptr( 2, rcx);  // load a
  0xee072a60:   mov    %eax,0x8(%esp)               ;; 1273:   __ store_ptr(2, rax);  // store c in a
  0xee072a64:   push   %eax                         ;; 1274:   __ push_ptr(rax);      // push c
  0xee072a65:   mov    0x8(%esp),%eax               ;; 1276:   __ load_ptr( 2, rax);  // load b
  0xee072a69:   mov    %ecx,0x8(%esp)               ;; 1277:   __ store_ptr(2, rcx);  // store a in b
  0xee072a6d:   mov    %eax,0x4(%esp)               ;; 1279:   __ store_ptr(1, rax);  // store b in c
  0xee072a71:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072a75:   inc    %esi
  0xee072a76:   jmp    *-0x833caa0(,%ebx,4)
  0xee072a7d:   nop
  0xee072a7e:   nop
  0xee072a7f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dup2  92 dup2  [0xee072aa0, 0xee072ad0]  48 bytes

--------------------------------------------------------------------------------
  0xee072aa0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee072aa3:   vmovss %xmm0,(%esp)
  0xee072aa8:   jmp    0xee072ab9                   ;; 1751:       __ jmpb(L);
  0xee072aaa:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee072aad:   vmovsd %xmm0,(%esp)
  0xee072ab2:   jmp    0xee072ab9                   ;; 1754:       __ jmpb(L);
  0xee072ab4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee072ab5:   push   %eax
  0xee072ab6:   jmp    0xee072ab9                   ;; 1765:       __ jmpb(L);
  0xee072ab8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee072ab9:   mov    0x4(%esp),%eax               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1286:   __ load_ptr(1, rax);  // load a
  0xee072abd:   push   %eax                         ;; 1287:   __ push_ptr(rax);     // push a
  0xee072abe:   mov    0x4(%esp),%eax               ;; 1288:   __ load_ptr(1, rax);  // load b
  0xee072ac2:   push   %eax                         ;; 1289:   __ push_ptr(rax);     // push b
  0xee072ac3:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072ac7:   inc    %esi
  0xee072ac8:   jmp    *-0x833caa0(,%ebx,4)
  0xee072acf:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dup2_x1  93 dup2_x1  [0xee072b00, 0xee072b40]  64 bytes

--------------------------------------------------------------------------------
  0xee072b00:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee072b03:   vmovss %xmm0,(%esp)
  0xee072b08:   jmp    0xee072b19                   ;; 1751:       __ jmpb(L);
  0xee072b0a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee072b0d:   vmovsd %xmm0,(%esp)
  0xee072b12:   jmp    0xee072b19                   ;; 1754:       __ jmpb(L);
  0xee072b14:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee072b15:   push   %eax
  0xee072b16:   jmp    0xee072b19                   ;; 1765:       __ jmpb(L);
  0xee072b18:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee072b19:   mov    (%esp),%ecx                  ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1297:   __ load_ptr( 0, rcx);  // load c
  0xee072b1c:   mov    0x4(%esp),%eax               ;; 1298:   __ load_ptr( 1, rax);  // load b
  0xee072b20:   push   %eax                         ;; 1299:   __ push_ptr(rax);      // push b
  0xee072b21:   push   %ecx                         ;; 1300:   __ push_ptr(rcx);      // push c
  0xee072b22:   mov    %ecx,0xc(%esp)               ;; 1302:   __ store_ptr(3, rcx);  // store c in b
  0xee072b26:   mov    0x10(%esp),%ecx              ;; 1304:   __ load_ptr( 4, rcx);  // load a
  0xee072b2a:   mov    %ecx,0x8(%esp)               ;; 1305:   __ store_ptr(2, rcx);  // store a in 2nd c
  0xee072b2e:   mov    %eax,0x10(%esp)              ;; 1307:   __ store_ptr(4, rax);  // store b in a
  0xee072b32:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072b36:   inc    %esi
  0xee072b37:   jmp    *-0x833caa0(,%ebx,4)
  0xee072b3e:   nop
  0xee072b3f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dup2_x2  94 dup2_x2  [0xee072b60, 0xee072bac]  76 bytes

--------------------------------------------------------------------------------
  0xee072b60:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee072b63:   vmovss %xmm0,(%esp)
  0xee072b68:   jmp    0xee072b79                   ;; 1751:       __ jmpb(L);
  0xee072b6a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee072b6d:   vmovsd %xmm0,(%esp)
  0xee072b72:   jmp    0xee072b79                   ;; 1754:       __ jmpb(L);
  0xee072b74:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee072b75:   push   %eax
  0xee072b76:   jmp    0xee072b79                   ;; 1765:       __ jmpb(L);
  0xee072b78:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee072b79:   mov    (%esp),%ecx                  ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1314:   __ load_ptr( 0, rcx);  // load d
  0xee072b7c:   mov    0x4(%esp),%eax               ;; 1315:   __ load_ptr( 1, rax);  // load c
  0xee072b80:   push   %eax                         ;; 1316:   __ push_ptr(rax);      // push c
  0xee072b81:   push   %ecx                         ;; 1317:   __ push_ptr(rcx);      // push d
  0xee072b82:   mov    0x10(%esp),%eax              ;; 1319:   __ load_ptr( 4, rax);  // load b
  0xee072b86:   mov    %eax,0x8(%esp)               ;; 1320:   __ store_ptr(2, rax);  // store b in d
  0xee072b8a:   mov    %ecx,0x10(%esp)              ;; 1321:   __ store_ptr(4, rcx);  // store d in b
  0xee072b8e:   mov    0x14(%esp),%ecx              ;; 1323:   __ load_ptr( 5, rcx);  // load a
  0xee072b92:   mov    0xc(%esp),%eax               ;; 1324:   __ load_ptr( 3, rax);  // load c
  0xee072b96:   mov    %ecx,0xc(%esp)               ;; 1325:   __ store_ptr(3, rcx);  // store a in c
  0xee072b9a:   mov    %eax,0x14(%esp)              ;; 1326:   __ store_ptr(5, rax);  // store c in a
  0xee072b9e:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072ba2:   inc    %esi
  0xee072ba3:   jmp    *-0x833caa0(,%ebx,4)
  0xee072baa:   nop
  0xee072bab:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
swap  95 swap  [0xee072bc0, 0xee072bf4]  52 bytes

--------------------------------------------------------------------------------
  0xee072bc0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee072bc3:   vmovss %xmm0,(%esp)
  0xee072bc8:   jmp    0xee072bd9                   ;; 1751:       __ jmpb(L);
  0xee072bca:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee072bcd:   vmovsd %xmm0,(%esp)
  0xee072bd2:   jmp    0xee072bd9                   ;; 1754:       __ jmpb(L);
  0xee072bd4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee072bd5:   push   %eax
  0xee072bd6:   jmp    0xee072bd9                   ;; 1765:       __ jmpb(L);
  0xee072bd8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee072bd9:   mov    0x4(%esp),%ecx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1333:   __ load_ptr( 1, rcx);  // load a
  0xee072bdd:   mov    (%esp),%eax                  ;; 1334:   __ load_ptr( 0, rax);  // load b
  0xee072be0:   mov    %ecx,(%esp)                  ;; 1335:   __ store_ptr(0, rcx);  // store a in b
  0xee072be3:   mov    %eax,0x4(%esp)               ;; 1336:   __ store_ptr(1, rax);  // store b in a
  0xee072be7:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072beb:   inc    %esi
  0xee072bec:   jmp    *-0x833caa0(,%ebx,4)
  0xee072bf3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iadd  96 iadd  [0xee072c20, 0xee072c30]  16 bytes

--------------------------------------------------------------------------------
  0xee072c20:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee072c21:   pop    %edx                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1343:   case add  :                    __ pop_i(rdx); __ addl (rax, rdx); break;
  0xee072c22:   add    %edx,%eax                    ;; 1343:   case add  :                    __ pop_i(rdx); __ addl (rax, rdx); break;
  0xee072c24:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072c28:   inc    %esi
  0xee072c29:   jmp    *-0x833dea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ladd  97 ladd  [0xee072c60, 0xee072c74]  20 bytes

--------------------------------------------------------------------------------
  0xee072c60:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee072c61:   pop    %edx
  0xee072c62:   pop    %ebx                         ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1368:   __ pop_l(rbx, rcx);
  0xee072c63:   pop    %ecx
  0xee072c64:   add    %ebx,%eax                    ;; 1370:     case add  : __ addl(rax, rbx); __ adcl(rdx, rcx); break;
  0xee072c66:   adc    %ecx,%edx                    ;; 1370:     case add  : __ addl(rax, rbx); __ adcl(rdx, rcx); break;
  0xee072c68:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072c6c:   inc    %esi
  0xee072c6d:   jmp    *-0x833daa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fadd  98 fadd  [0xee072ca0, 0xee072cbc]  28 bytes

--------------------------------------------------------------------------------
  0xee072ca0:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee072ca5:   add    $0x4,%esp
  0xee072ca8:   vaddss (%esp),%xmm0,%xmm0           ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1517:       __ addss(xmm0, at_rsp());
  0xee072cad:   add    $0x4,%esp                    ;; 1518:       __ addptr(rsp, Interpreter::stackElementSize);
  0xee072cb0:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072cb4:   inc    %esi
  0xee072cb5:   jmp    *-0x833d6a0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dadd  99 dadd  [0xee072ce0, 0xee072cfc]  28 bytes

--------------------------------------------------------------------------------
  0xee072ce0:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee072ce5:   add    $0x8,%esp
  0xee072ce8:   vaddsd (%esp),%xmm0,%xmm0           ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1588:       __ addsd(xmm0, at_rsp());
  0xee072ced:   add    $0x8,%esp                    ;; 1589:       __ addptr(rsp, 2 * Interpreter::stackElementSize);
  0xee072cf0:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072cf4:   inc    %esi
  0xee072cf5:   jmp    *-0x833d2a0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
isub  100 isub  [0xee072d20, 0xee072d34]  20 bytes

--------------------------------------------------------------------------------
  0xee072d20:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee072d21:   mov    %eax,%edx                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1344:   case sub  : __ movl(rdx, rax); __ pop_i(rax); __ subl (rax, rdx); break;
  0xee072d23:   pop    %eax                         ;; 1344:   case sub  : __ movl(rdx, rax); __ pop_i(rax); __ subl (rax, rdx); break;
  0xee072d24:   sub    %edx,%eax                    ;; 1344:   case sub  : __ movl(rdx, rax); __ pop_i(rax); __ subl (rax, rdx); break;
  0xee072d26:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072d2a:   inc    %esi
  0xee072d2b:   jmp    *-0x833dea0(,%ebx,4)
  0xee072d32:   nop
  0xee072d33:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lsub  101 lsub  [0xee072d60, 0xee072d78]  24 bytes

--------------------------------------------------------------------------------
  0xee072d60:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee072d61:   pop    %edx
  0xee072d62:   pop    %ebx                         ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1368:   __ pop_l(rbx, rcx);
  0xee072d63:   pop    %ecx
  0xee072d64:   sub    %eax,%ebx                    ;; 1371:     case sub  : __ subl(rbx, rax); __ sbbl(rcx, rdx);
  0xee072d66:   sbb    %edx,%ecx                    ;; 1371:     case sub  : __ subl(rbx, rax); __ sbbl(rcx, rdx);
  0xee072d68:   mov    %ebx,%eax                    ;; 1372:                 __ mov (rax, rbx); __ mov (rdx, rcx); break;
  0xee072d6a:   mov    %ecx,%edx                    ;; 1372:                 __ mov (rax, rbx); __ mov (rdx, rcx); break;
  0xee072d6c:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072d70:   inc    %esi
  0xee072d71:   jmp    *-0x833daa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fsub  102 fsub  [0xee072da0, 0xee072dc4]  36 bytes

--------------------------------------------------------------------------------
  0xee072da0:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee072da5:   add    $0x4,%esp
  0xee072da8:   vmovaps %xmm0,%xmm1                 ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1521:       __ movflt(xmm1, xmm0);
  0xee072dac:   vmovss (%esp),%xmm0                 ;; 1522:       __ pop_f(xmm0);
  0xee072db1:   add    $0x4,%esp
  0xee072db4:   vsubss %xmm1,%xmm0,%xmm0            ;; 1523:       __ subss(xmm0, xmm1);
  0xee072db8:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072dbc:   inc    %esi
  0xee072dbd:   jmp    *-0x833d6a0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dsub  103 dsub  [0xee072de0, 0xee072e04]  36 bytes

--------------------------------------------------------------------------------
  0xee072de0:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee072de5:   add    $0x8,%esp
  0xee072de8:   vmovapd %xmm0,%xmm1                 ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1592:       __ movdbl(xmm1, xmm0);
  0xee072dec:   vmovsd (%esp),%xmm0                 ;; 1593:       __ pop_d(xmm0);
  0xee072df1:   add    $0x8,%esp
  0xee072df4:   vsubsd %xmm1,%xmm0,%xmm0            ;; 1594:       __ subsd(xmm0, xmm1);
  0xee072df8:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072dfc:   inc    %esi
  0xee072dfd:   jmp    *-0x833d2a0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
imul  104 imul  [0xee072e20, 0xee072e34]  20 bytes

--------------------------------------------------------------------------------
  0xee072e20:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee072e21:   pop    %edx                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1345:   case mul  :                    __ pop_i(rdx); __ imull(rax, rdx); break;
  0xee072e22:   imul   %edx,%eax                    ;; 1345:   case mul  :                    __ pop_i(rdx); __ imull(rax, rdx); break;
  0xee072e25:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072e29:   inc    %esi
  0xee072e2a:   jmp    *-0x833dea0(,%ebx,4)
  0xee072e31:   nop
  0xee072e32:   nop
  0xee072e33:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lmul  105 lmul  [0xee072e60, 0xee072ea0]  64 bytes

--------------------------------------------------------------------------------
  0xee072e60:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee072e61:   pop    %edx
  0xee072e62:   pop    %ebx                         ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1410:   __ pop_l(rbx, rcx);
  0xee072e63:   pop    %ecx
  0xee072e64:   push   %ecx                         ;; 1411:   __ push(rcx); __ push(rbx);
  0xee072e65:   push   %ebx                         ;; 1411:   __ push(rcx); __ push(rbx);
  0xee072e66:   push   %edx                         ;; 1412:   __ push(rdx); __ push(rax);
  0xee072e67:   push   %eax                         ;; 1412:   __ push(rdx); __ push(rax);
  0xee072e68:   mov    0xc(%esp),%ebx               ;; 1413:   __ lmul(2 * wordSize, 0);
  0xee072e6c:   mov    0x4(%esp),%ecx
  0xee072e70:   mov    %ebx,%eax
  0xee072e72:   or     %ecx,%ebx
  0xee072e74:   je     0xee072e87
  0xee072e7a:   mull   (%esp)
  0xee072e7d:   mov    %eax,%ebx
  0xee072e7f:   mov    0x8(%esp),%eax
  0xee072e83:   mul    %ecx
  0xee072e85:   add    %eax,%ebx
  0xee072e87:   mov    0x8(%esp),%eax
  0xee072e8b:   mull   (%esp)
  0xee072e8e:   add    %ebx,%edx
  0xee072e90:   add    $0x10,%esp                   ;; 1414:   __ addptr(rsp, 4 * wordSize);  // take off temporaries
  0xee072e93:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072e97:   inc    %esi
  0xee072e98:   jmp    *-0x833daa0(,%ebx,4)
  0xee072e9f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fmul  106 fmul  [0xee072ec0, 0xee072edc]  28 bytes

--------------------------------------------------------------------------------
  0xee072ec0:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee072ec5:   add    $0x4,%esp
  0xee072ec8:   vmulss (%esp),%xmm0,%xmm0           ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1526:       __ mulss(xmm0, at_rsp());
  0xee072ecd:   add    $0x4,%esp                    ;; 1527:       __ addptr(rsp, Interpreter::stackElementSize);
  0xee072ed0:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072ed4:   inc    %esi
  0xee072ed5:   jmp    *-0x833d6a0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dmul  107 dmul  [0xee072f00, 0xee072f1c]  28 bytes

--------------------------------------------------------------------------------
  0xee072f00:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee072f05:   add    $0x8,%esp
  0xee072f08:   vmulsd (%esp),%xmm0,%xmm0           ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1597:       __ mulsd(xmm0, at_rsp());
  0xee072f0d:   add    $0x8,%esp                    ;; 1598:       __ addptr(rsp, 2 * Interpreter::stackElementSize);
  0xee072f10:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072f14:   inc    %esi
  0xee072f15:   jmp    *-0x833d2a0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
idiv  108 idiv  [0xee072f40, 0xee072f6c]  44 bytes

--------------------------------------------------------------------------------
  0xee072f40:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee072f41:   mov    %eax,%ecx                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1383:   __ movl(rcx, rax);
  0xee072f43:   pop    %eax                         ;; 1384:   __ pop_i(rax);
  0xee072f44:   cmp    $0x80000000,%eax             ;; 1389:   __ corrected_idivl(rcx);
  0xee072f49:   jne    0xee072f5a
  0xee072f4f:   xor    %edx,%edx
  0xee072f51:   cmp    $0xffffffff,%ecx
  0xee072f54:   je     0xee072f5d
  0xee072f5a:   cltd   
  0xee072f5b:   idiv   %ecx
  0xee072f5d:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072f61:   inc    %esi
  0xee072f62:   jmp    *-0x833dea0(,%ebx,4)
  0xee072f69:   nop
  0xee072f6a:   nop
  0xee072f6b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ldiv  109 ldiv  [0xee072f80, 0xee072fc0]  64 bytes

--------------------------------------------------------------------------------
  0xee072f80:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee072f81:   pop    %edx
  0xee072f82:   pop    %ebx                         ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1433:   __ pop_l(rbx, rcx);
  0xee072f83:   pop    %ecx
  0xee072f84:   push   %ecx                         ;; 1434:   __ push(rcx); __ push(rbx);
  0xee072f85:   push   %ebx                         ;; 1434:   __ push(rcx); __ push(rbx);
  0xee072f86:   push   %edx                         ;; 1435:   __ push(rdx); __ push(rax);
  0xee072f87:   push   %eax                         ;; 1435:   __ push(rdx); __ push(rax);
  0xee072f88:   or     %edx,%eax                    ;; 1437:   __ orl(rax, rdx);
  0xee072f8a:   je     0xee06db4d                   ;; 1438:   __ jump_cc(Assembler::zero,
  0xee072f90:   cmpl   $0x0,-0x8(%ebp)              ;; 1440:   __ call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::ldiv));
  0xee072f94:   je     0xee072fab
  0xee072f9a:   push   $0xf785694c
  0xee072f9f:   call   0xee072fa4
  0xee072fa4:   pusha  
  0xee072fa5:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee072faa:   hlt    
  0xee072fab:   call   0xf7398a90 = SharedRuntime::ldiv(long long, long long)
  0xee072fb0:   add    $0x10,%esp                   ;; 1441:   __ addptr(rsp, 4 * wordSize);  // take off temporaries
  0xee072fb3:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072fb7:   inc    %esi
  0xee072fb8:   jmp    *-0x833daa0(,%ebx,4)
  0xee072fbf:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fdiv  110 fdiv  [0xee072fe0, 0xee073004]  36 bytes

--------------------------------------------------------------------------------
  0xee072fe0:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee072fe5:   add    $0x4,%esp
  0xee072fe8:   vmovaps %xmm0,%xmm1                 ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1530:       __ movflt(xmm1, xmm0);
  0xee072fec:   vmovss (%esp),%xmm0                 ;; 1531:       __ pop_f(xmm0);
  0xee072ff1:   add    $0x4,%esp
  0xee072ff4:   vdivss %xmm1,%xmm0,%xmm0            ;; 1532:       __ divss(xmm0, xmm1);
  0xee072ff8:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee072ffc:   inc    %esi
  0xee072ffd:   jmp    *-0x833d6a0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ddiv  111 ddiv  [0xee073020, 0xee073044]  36 bytes

--------------------------------------------------------------------------------
  0xee073020:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee073025:   add    $0x8,%esp
  0xee073028:   vmovapd %xmm0,%xmm1                 ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1601:       __ movdbl(xmm1, xmm0);
  0xee07302c:   vmovsd (%esp),%xmm0                 ;; 1602:       __ pop_d(xmm0);
  0xee073031:   add    $0x8,%esp
  0xee073034:   vdivsd %xmm1,%xmm0,%xmm0            ;; 1603:       __ divsd(xmm0, xmm1);
  0xee073038:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07303c:   inc    %esi
  0xee07303d:   jmp    *-0x833d2a0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
irem  112 irem  [0xee073060, 0xee07308c]  44 bytes

--------------------------------------------------------------------------------
  0xee073060:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee073061:   mov    %eax,%ecx                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1394:   __ movl(rcx, rax);
  0xee073063:   pop    %eax                         ;; 1395:   __ pop_i(rax);
  0xee073064:   cmp    $0x80000000,%eax             ;; 1400:   __ corrected_idivl(rcx);
  0xee073069:   jne    0xee07307a
  0xee07306f:   xor    %edx,%edx
  0xee073071:   cmp    $0xffffffff,%ecx
  0xee073074:   je     0xee07307d
  0xee07307a:   cltd   
  0xee07307b:   idiv   %ecx
  0xee07307d:   mov    %edx,%eax                    ;; 1401:   __ movl(rax, rdx);
  0xee07307f:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073083:   inc    %esi
  0xee073084:   jmp    *-0x833dea0(,%ebx,4)
  0xee07308b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lrem  113 lrem  [0xee0730a0, 0xee0730e0]  64 bytes

--------------------------------------------------------------------------------
  0xee0730a0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee0730a1:   pop    %edx
  0xee0730a2:   pop    %ebx                         ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1460:   __ pop_l(rbx, rcx);
  0xee0730a3:   pop    %ecx
  0xee0730a4:   push   %ecx                         ;; 1461:   __ push(rcx); __ push(rbx);
  0xee0730a5:   push   %ebx                         ;; 1461:   __ push(rcx); __ push(rbx);
  0xee0730a6:   push   %edx                         ;; 1462:   __ push(rdx); __ push(rax);
  0xee0730a7:   push   %eax                         ;; 1462:   __ push(rdx); __ push(rax);
  0xee0730a8:   or     %edx,%eax                    ;; 1464:   __ orl(rax, rdx);
  0xee0730aa:   je     0xee06db4d                   ;; 1465:   __ jump_cc(Assembler::zero,
  0xee0730b0:   cmpl   $0x0,-0x8(%ebp)              ;; 1467:   __ call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::lrem));
  0xee0730b4:   je     0xee0730cb
  0xee0730ba:   push   $0xf785694c
  0xee0730bf:   call   0xee0730c4
  0xee0730c4:   pusha  
  0xee0730c5:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0730ca:   hlt    
  0xee0730cb:   call   0xf7398b50 = SharedRuntime::lrem(long long, long long)
  0xee0730d0:   add    $0x10,%esp                   ;; 1468:   __ addptr(rsp, 4 * wordSize);
  0xee0730d3:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0730d7:   inc    %esi
  0xee0730d8:   jmp    *-0x833daa0(,%ebx,4)
  0xee0730df:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
frem  114 frem  [0xee073100, 0xee073148]  72 bytes

--------------------------------------------------------------------------------
  0xee073100:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee073105:   add    $0x4,%esp
  0xee073108:   sub    $0x4,%esp                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1551:       __ push_f(xmm0);
  0xee07310b:   vmovss %xmm0,(%esp)
  0xee073110:   flds   (%esp)                       ;; 1552:       __ pop_f();
  0xee073113:   add    $0x4,%esp
  0xee073116:   flds   (%esp)                       ;; 1553:       __ fld_s(at_rsp());
  0xee073119:   fprem                               ;; 1554:       __ fremr(rax);
  0xee07311b:   fstsw  %ax
  0xee07311e:   sahf   
  0xee07311f:   jp     0xee073119
  0xee073121:   fxch   %st(1)
  0xee073123:   ffree  %st(0)
  0xee073125:   fincstp 
  0xee073127:   fstps  (%esp)                       ;; 1555:       __ f2ieee();
  0xee07312a:   flds   (%esp)
  0xee07312d:   pop    %eax                         ;; 1556:       __ pop(rax);  // pop second operand off the stack
  0xee07312e:   sub    $0x4,%esp                    ;; 1557:       __ push_f();
  0xee073131:   fstps  (%esp)
  0xee073134:   vmovss (%esp),%xmm0                 ;; 1558:       __ pop_f(xmm0);
  0xee073139:   add    $0x4,%esp
  0xee07313c:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073140:   inc    %esi
  0xee073141:   jmp    *-0x833d6a0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
drem  115 drem  [0xee073160, 0xee0731ac]  76 bytes

--------------------------------------------------------------------------------
  0xee073160:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee073165:   add    $0x8,%esp
  0xee073168:   sub    $0x8,%esp                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1614:       __ push_d(xmm0);
  0xee07316b:   vmovsd %xmm0,(%esp)
  0xee073170:   fldl   (%esp)                       ;; 1615:       __ pop_d();
  0xee073173:   add    $0x8,%esp
  0xee073176:   fldl   (%esp)                       ;; 1616:       __ fld_d(at_rsp());
  0xee073179:   fprem                               ;; 1617:       __ fremr(rax);
  0xee07317b:   fstsw  %ax
  0xee07317e:   sahf   
  0xee07317f:   jp     0xee073179
  0xee073181:   fxch   %st(1)
  0xee073183:   ffree  %st(0)
  0xee073185:   fincstp 
  0xee073187:   fstpl  (%esp)                       ;; 1618:       __ d2ieee();
  0xee07318a:   fldl   (%esp)
  0xee07318d:   pop    %eax                         ;; 1619:       __ pop(rax);
  0xee07318e:   pop    %edx                         ;; 1620:       __ pop(rdx);
  0xee07318f:   sub    $0x8,%esp                    ;; 1621:       __ push_d();
  0xee073192:   fstpl  (%esp)
  0xee073195:   vmovsd (%esp),%xmm0                 ;; 1622:       __ pop_d(xmm0);
  0xee07319a:   add    $0x8,%esp
  0xee07319d:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0731a1:   inc    %esi
  0xee0731a2:   jmp    *-0x833d2a0(,%ebx,4)
  0xee0731a9:   nop
  0xee0731aa:   nop
  0xee0731ab:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ineg  116 ineg  [0xee0731c0, 0xee0731d0]  16 bytes

--------------------------------------------------------------------------------
  0xee0731c0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee0731c1:   neg    %eax                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1667:   __ negl(rax);
  0xee0731c3:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0731c7:   inc    %esi
  0xee0731c8:   jmp    *-0x833dea0(,%ebx,4)
  0xee0731cf:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lneg  117 lneg  [0xee073200, 0xee073218]  24 bytes

--------------------------------------------------------------------------------
  0xee073200:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee073201:   pop    %edx
  0xee073202:   neg    %eax                         ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1673:   NOT_LP64(__ lneg(rdx, rax));
  0xee073204:   adc    $0x0,%edx
  0xee073207:   neg    %edx
  0xee073209:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07320d:   inc    %esi
  0xee07320e:   jmp    *-0x833daa0(,%ebx,4)
  0xee073215:   nop
  0xee073216:   nop
  0xee073217:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fneg  118 fneg  [0xee073240, 0xee07325c]  28 bytes

--------------------------------------------------------------------------------
  0xee073240:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee073245:   add    $0x4,%esp
  0xee073248:   vxorps 0xf7cc6300,%xmm0,%xmm0       ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1695:     __ xorps(xmm0, ExternalAddress((address) float_signflip), rscratch1);
  0xee073250:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073254:   inc    %esi
  0xee073255:   jmp    *-0x833d6a0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dneg  119 dneg  [0xee073280, 0xee07329c]  28 bytes

--------------------------------------------------------------------------------
  0xee073280:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee073285:   add    $0x8,%esp
  0xee073288:   vxorpd 0xf7cc62e0,%xmm0,%xmm0       ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1707:     __ xorpd(xmm0, ExternalAddress((address) double_signflip), rscratch1);
  0xee073290:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073294:   inc    %esi
  0xee073295:   jmp    *-0x833d2a0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ishl  120 ishl  [0xee0732c0, 0xee0732d4]  20 bytes

--------------------------------------------------------------------------------
  0xee0732c0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee0732c1:   mov    %eax,%ecx                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1349:   case shl  : __ movl(rcx, rax); __ pop_i(rax); __ shll (rax);      break;
  0xee0732c3:   pop    %eax                         ;; 1349:   case shl  : __ movl(rcx, rax); __ pop_i(rax); __ shll (rax);      break;
  0xee0732c4:   shl    %cl,%eax                     ;; 1349:   case shl  : __ movl(rcx, rax); __ pop_i(rax); __ shll (rax);      break;
  0xee0732c6:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0732ca:   inc    %esi
  0xee0732cb:   jmp    *-0x833dea0(,%ebx,4)
  0xee0732d2:   nop
  0xee0732d3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lshl  121 lshl  [0xee073300, 0xee073328]  40 bytes

--------------------------------------------------------------------------------
  0xee073300:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee073301:   mov    %eax,%ecx                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1474:   __ movl(rcx, rax);                             // get shift count
  0xee073303:   pop    %eax                         ;; 1479:   __ pop_l(rax, rdx);                            // get shift value
  0xee073304:   pop    %edx
  0xee073305:   and    $0x3f,%ecx                   ;; 1480:   __ lshl(rdx, rax);
  0xee073308:   cmp    $0x20,%ecx
  0xee07330b:   jl     0xee073315
  0xee073311:   mov    %eax,%edx
  0xee073313:   xor    %eax,%eax
  0xee073315:   shld   %cl,%eax,%edx
  0xee073318:   shl    %cl,%eax
  0xee07331a:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07331e:   inc    %esi
  0xee07331f:   jmp    *-0x833daa0(,%ebx,4)
  0xee073326:   nop
  0xee073327:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ishr  122 ishr  [0xee073340, 0xee073354]  20 bytes

--------------------------------------------------------------------------------
  0xee073340:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee073341:   mov    %eax,%ecx                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1350:   case shr  : __ movl(rcx, rax); __ pop_i(rax); __ sarl (rax);      break;
  0xee073343:   pop    %eax                         ;; 1350:   case shr  : __ movl(rcx, rax); __ pop_i(rax); __ sarl (rax);      break;
  0xee073344:   sar    %cl,%eax                     ;; 1350:   case shr  : __ movl(rcx, rax); __ pop_i(rax); __ sarl (rax);      break;
  0xee073346:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07334a:   inc    %esi
  0xee07334b:   jmp    *-0x833dea0(,%ebx,4)
  0xee073352:   nop
  0xee073353:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lshr  123 lshr  [0xee073380, 0xee0733a8]  40 bytes

--------------------------------------------------------------------------------
  0xee073380:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee073381:   mov    %eax,%ecx                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1492:   __ mov(rcx, rax);                              // get shift count
  0xee073383:   pop    %eax                         ;; 1493:   __ pop_l(rax, rdx);                            // get shift value
  0xee073384:   pop    %edx
  0xee073385:   and    $0x3f,%ecx                   ;; 1494:   __ lshr(rdx, rax, true);
  0xee073388:   cmp    $0x20,%ecx
  0xee07338b:   jl     0xee073396
  0xee073391:   mov    %edx,%eax
  0xee073393:   sar    $0x1f,%edx
  0xee073396:   shrd   %cl,%edx,%eax
  0xee073399:   sar    %cl,%edx
  0xee07339b:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07339f:   inc    %esi
  0xee0733a0:   jmp    *-0x833daa0(,%ebx,4)
  0xee0733a7:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iushr  124 iushr  [0xee0733c0, 0xee0733d4]  20 bytes

--------------------------------------------------------------------------------
  0xee0733c0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee0733c1:   mov    %eax,%ecx                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1351:   case ushr : __ movl(rcx, rax); __ pop_i(rax); __ shrl (rax);      break;
  0xee0733c3:   pop    %eax                         ;; 1351:   case ushr : __ movl(rcx, rax); __ pop_i(rax); __ shrl (rax);      break;
  0xee0733c4:   shr    %cl,%eax                     ;; 1351:   case ushr : __ movl(rcx, rax); __ pop_i(rax); __ shrl (rax);      break;
  0xee0733c6:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0733ca:   inc    %esi
  0xee0733cb:   jmp    *-0x833dea0(,%ebx,4)
  0xee0733d2:   nop
  0xee0733d3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lushr  125 lushr  [0xee073400, 0xee073428]  40 bytes

--------------------------------------------------------------------------------
  0xee073400:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee073401:   mov    %eax,%ecx                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1505:   __ mov(rcx, rax);                              // get shift count
  0xee073403:   pop    %eax                         ;; 1506:   __ pop_l(rax, rdx);                            // get shift value
  0xee073404:   pop    %edx
  0xee073405:   and    $0x3f,%ecx                   ;; 1507:   __ lshr(rdx, rax);
  0xee073408:   cmp    $0x20,%ecx
  0xee07340b:   jl     0xee073415
  0xee073411:   mov    %edx,%eax
  0xee073413:   xor    %edx,%edx
  0xee073415:   shrd   %cl,%edx,%eax
  0xee073418:   shr    %cl,%edx
  0xee07341a:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07341e:   inc    %esi
  0xee07341f:   jmp    *-0x833daa0(,%ebx,4)
  0xee073426:   nop
  0xee073427:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iand  126 iand  [0xee073440, 0xee073450]  16 bytes

--------------------------------------------------------------------------------
  0xee073440:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee073441:   pop    %edx                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1346:   case _and :                    __ pop_i(rdx); __ andl (rax, rdx); break;
  0xee073442:   and    %edx,%eax                    ;; 1346:   case _and :                    __ pop_i(rdx); __ andl (rax, rdx); break;
  0xee073444:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073448:   inc    %esi
  0xee073449:   jmp    *-0x833dea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
land  127 land  [0xee073480, 0xee073494]  20 bytes

--------------------------------------------------------------------------------
  0xee073480:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee073481:   pop    %edx
  0xee073482:   pop    %ebx                         ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1368:   __ pop_l(rbx, rcx);
  0xee073483:   pop    %ecx
  0xee073484:   and    %ebx,%eax                    ;; 1373:     case _and : __ andl(rax, rbx); __ andl(rdx, rcx); break;
  0xee073486:   and    %ecx,%edx                    ;; 1373:     case _and : __ andl(rax, rbx); __ andl(rdx, rcx); break;
  0xee073488:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07348c:   inc    %esi
  0xee07348d:   jmp    *-0x833daa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ior  128 ior  [0xee0734c0, 0xee0734d0]  16 bytes

--------------------------------------------------------------------------------
  0xee0734c0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee0734c1:   pop    %edx                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1347:   case _or  :                    __ pop_i(rdx); __ orl  (rax, rdx); break;
  0xee0734c2:   or     %edx,%eax                    ;; 1347:   case _or  :                    __ pop_i(rdx); __ orl  (rax, rdx); break;
  0xee0734c4:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0734c8:   inc    %esi
  0xee0734c9:   jmp    *-0x833dea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lor  129 lor  [0xee073500, 0xee073514]  20 bytes

--------------------------------------------------------------------------------
  0xee073500:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee073501:   pop    %edx
  0xee073502:   pop    %ebx                         ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1368:   __ pop_l(rbx, rcx);
  0xee073503:   pop    %ecx
  0xee073504:   or     %ebx,%eax                    ;; 1374:     case _or  : __ orl (rax, rbx); __ orl (rdx, rcx); break;
  0xee073506:   or     %ecx,%edx                    ;; 1374:     case _or  : __ orl (rax, rbx); __ orl (rdx, rcx); break;
  0xee073508:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07350c:   inc    %esi
  0xee07350d:   jmp    *-0x833daa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ixor  130 ixor  [0xee073540, 0xee073550]  16 bytes

--------------------------------------------------------------------------------
  0xee073540:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee073541:   pop    %edx                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1348:   case _xor :                    __ pop_i(rdx); __ xorl (rax, rdx); break;
  0xee073542:   xor    %edx,%eax                    ;; 1348:   case _xor :                    __ pop_i(rdx); __ xorl (rax, rdx); break;
  0xee073544:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073548:   inc    %esi
  0xee073549:   jmp    *-0x833dea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lxor  131 lxor  [0xee073580, 0xee073594]  20 bytes

--------------------------------------------------------------------------------
  0xee073580:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee073581:   pop    %edx
  0xee073582:   pop    %ebx                         ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1368:   __ pop_l(rbx, rcx);
  0xee073583:   pop    %ecx
  0xee073584:   xor    %ebx,%eax                    ;; 1375:     case _xor : __ xorl(rax, rbx); __ xorl(rdx, rcx); break;
  0xee073586:   xor    %ecx,%edx                    ;; 1375:     case _xor : __ xorl(rax, rbx); __ xorl(rdx, rcx); break;
  0xee073588:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07358c:   inc    %esi
  0xee07358d:   jmp    *-0x833daa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iinc  132 iinc  [0xee0735c0, 0xee073618]  88 bytes

--------------------------------------------------------------------------------
  0xee0735c0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee0735c3:   vmovss %xmm0,(%esp)
  0xee0735c8:   jmp    0xee0735d9                   ;; 1751:       __ jmpb(L);
  0xee0735ca:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee0735cd:   vmovsd %xmm0,(%esp)
  0xee0735d2:   jmp    0xee0735d9                   ;; 1754:       __ jmpb(L);
  0xee0735d4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee0735d5:   push   %eax
  0xee0735d6:   jmp    0xee0735d9                   ;; 1765:       __ jmpb(L);
  0xee0735d8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee0735d9:   movsbl 0x2(%esi),%edx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1719:   __ load_signed_byte(rdx, at_bcp(2)); // get constant
  0xee0735dd:   movzbl 0x1(%esi),%ebx               ;;  613:   __ load_unsigned_byte(reg, at_bcp(offset));
  0xee0735e1:   neg    %ebx                         ;;  614:   __ negptr(reg);
  0xee0735e3:   add    %edx,(%edi,%ebx,4)           ;; 1721:   __ addl(iaddress(rbx), rdx);
  0xee0735e6:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0735ea:   add    $0x3,%esi
  0xee0735ed:   jmp    *-0x833caa0(,%ebx,4)
  0xee0735f4:   mov    0x4(%esi),%edx               ;;  335:   wep = __ pc(); generate_and_dispatch(t);
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1726:   __ movl(rdx, at_bcp(4)); // get constant
  0xee0735f7:   movzwl 0x2(%esi),%ebx               ;;  708:   __ load_unsigned_short(reg, at_bcp(2));
  0xee0735fb:   bswap  %ebx                         ;;  709:   __ bswapl(reg);
  0xee0735fd:   shr    $0x10,%ebx                   ;;  710:   __ shrl(reg, 16);
  0xee073600:   neg    %ebx                         ;;  711:   __ negptr(reg);
  0xee073602:   bswap  %edx                         ;; 1728:   __ bswapl(rdx); // swap bytes & sign-extend constant
  0xee073604:   sar    $0x10,%edx                   ;; 1729:   __ sarl(rdx, 16);
  0xee073607:   add    %edx,(%edi,%ebx,4)           ;; 1730:   __ addl(iaddress(rbx), rdx);
  0xee07360a:   movzbl 0x6(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07360e:   add    $0x6,%esi
  0xee073611:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
i2l  133 i2l  [0xee073640, 0xee073650]  16 bytes

--------------------------------------------------------------------------------
  0xee073640:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee073641:   cltd                                ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1913:       __ extend_sign(rdx, rax);
  0xee073642:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073646:   inc    %esi
  0xee073647:   jmp    *-0x833daa0(,%ebx,4)
  0xee07364e:   nop
  0xee07364f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
i2f  134 i2f  [0xee073680, 0xee073694]  20 bytes

--------------------------------------------------------------------------------
  0xee073680:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee073681:   vcvtsi2ss %eax,%xmm0,%xmm0          ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1917:         __ cvtsi2ssl(xmm0, rax);
  0xee073685:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073689:   inc    %esi
  0xee07368a:   jmp    *-0x833d6a0(,%ebx,4)
  0xee073691:   nop
  0xee073692:   nop
  0xee073693:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
i2d  135 i2d  [0xee0736c0, 0xee0736d4]  20 bytes

--------------------------------------------------------------------------------
  0xee0736c0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee0736c1:   vcvtsi2sd %eax,%xmm0,%xmm0          ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1927:         __ cvtsi2sdl(xmm0, rax);
  0xee0736c5:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0736c9:   inc    %esi
  0xee0736ca:   jmp    *-0x833d2a0(,%ebx,4)
  0xee0736d1:   nop
  0xee0736d2:   nop
  0xee0736d3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
l2i  136 l2i  [0xee073700, 0xee073710]  16 bytes

--------------------------------------------------------------------------------
  0xee073700:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee073701:   pop    %edx
  0xee073702:   movzbl 0x1(%esi),%ebx               ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073706:   inc    %esi
  0xee073707:   jmp    *-0x833dea0(,%ebx,4)
  0xee07370e:   nop
  0xee07370f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
l2f  137 l2f  [0xee073740, 0xee07376c]  44 bytes

--------------------------------------------------------------------------------
  0xee073740:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee073741:   pop    %edx
  0xee073742:   push   %edx                         ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1959:       __ push(rdx);          // store long on tos
  0xee073743:   push   %eax                         ;; 1960:       __ push(rax);
  0xee073744:   fildll (%esp)                       ;; 1961:       __ fild_d(at_rsp());   // load long to ST0
  0xee073747:   fstps  (%esp)                       ;; 1962:       __ f2ieee();           // truncate to float size
  0xee07374a:   flds   (%esp)
  0xee07374d:   pop    %ecx                         ;; 1963:       __ pop(rcx);           // adjust rsp
  0xee07374e:   pop    %ecx                         ;; 1964:       __ pop(rcx);
  0xee07374f:   sub    $0x4,%esp                    ;; 1966:         __ push_f();
  0xee073752:   fstps  (%esp)
  0xee073755:   vmovss (%esp),%xmm0                 ;; 1967:         __ pop_f(xmm0);
  0xee07375a:   add    $0x4,%esp
  0xee07375d:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073761:   inc    %esi
  0xee073762:   jmp    *-0x833d6a0(,%ebx,4)
  0xee073769:   nop
  0xee07376a:   nop
  0xee07376b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
l2d  138 l2d  [0xee073780, 0xee0737ac]  44 bytes

--------------------------------------------------------------------------------
  0xee073780:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee073781:   pop    %edx
  0xee073782:   push   %edx                         ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1974:       __ push(rdx);          // store long on tos
  0xee073783:   push   %eax                         ;; 1975:       __ push(rax);
  0xee073784:   fildll (%esp)                       ;; 1976:       __ fild_d(at_rsp());   // load long to ST0
  0xee073787:   fstpl  (%esp)                       ;; 1977:       __ d2ieee();           // truncate to double size
  0xee07378a:   fldl   (%esp)
  0xee07378d:   pop    %ecx                         ;; 1978:       __ pop(rcx);           // adjust rsp
  0xee07378e:   pop    %ecx                         ;; 1979:       __ pop(rcx);
  0xee07378f:   sub    $0x8,%esp                    ;; 1981:         __ push_d();
  0xee073792:   fstpl  (%esp)
  0xee073795:   vmovsd (%esp),%xmm0                 ;; 1982:         __ pop_d(xmm0);
  0xee07379a:   add    $0x8,%esp
  0xee07379d:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0737a1:   inc    %esi
  0xee0737a2:   jmp    *-0x833d2a0(,%ebx,4)
  0xee0737a9:   nop
  0xee0737aa:   nop
  0xee0737ab:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
f2i  139 f2i  [0xee0737c0, 0xee073800]  64 bytes

--------------------------------------------------------------------------------
  0xee0737c0:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee0737c5:   add    $0x4,%esp
  0xee0737c8:   sub    $0x4,%esp                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1989:         __ push_f(xmm0);
  0xee0737cb:   vmovss %xmm0,(%esp)
  0xee0737d0:   cmpl   $0x0,-0x8(%ebp)              ;; 1994:       __ call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::f2i), 1);
  0xee0737d4:   je     0xee0737eb
  0xee0737da:   push   $0xf785694c
  0xee0737df:   call   0xee0737e4
  0xee0737e4:   pusha  
  0xee0737e5:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0737ea:   hlt    
  0xee0737eb:   call   0xf7398d50 = SharedRuntime::f2i(float)
  0xee0737f0:   add    $0x4,%esp
  0xee0737f3:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0737f7:   inc    %esi
  0xee0737f8:   jmp    *-0x833dea0(,%ebx,4)
  0xee0737ff:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
f2l  140 f2l  [0xee073820, 0xee073860]  64 bytes

--------------------------------------------------------------------------------
  0xee073820:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee073825:   add    $0x4,%esp
  0xee073828:   sub    $0x4,%esp                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2000:        __ push_f(xmm0);
  0xee07382b:   vmovss %xmm0,(%esp)
  0xee073830:   cmpl   $0x0,-0x8(%ebp)              ;; 2005:       __ call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::f2l), 1);
  0xee073834:   je     0xee07384b
  0xee07383a:   push   $0xf785694c
  0xee07383f:   call   0xee073844
  0xee073844:   pusha  
  0xee073845:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07384a:   hlt    
  0xee07384b:   call   0xf7398e10 = SharedRuntime::f2l(float)
  0xee073850:   add    $0x4,%esp
  0xee073853:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073857:   inc    %esi
  0xee073858:   jmp    *-0x833daa0(,%ebx,4)
  0xee07385f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
f2d  141 f2d  [0xee073880, 0xee073898]  24 bytes

--------------------------------------------------------------------------------
  0xee073880:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee073885:   add    $0x4,%esp
  0xee073888:   vcvtss2sd %xmm0,%xmm0,%xmm0         ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2014:         __ cvtss2sd(xmm0, xmm0);
  0xee07388c:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073890:   inc    %esi
  0xee073891:   jmp    *-0x833d2a0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
d2i  142 d2i  [0xee0738c0, 0xee073900]  64 bytes

--------------------------------------------------------------------------------
  0xee0738c0:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee0738c5:   add    $0x8,%esp
  0xee0738c8:   sub    $0x8,%esp                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2019:         __ push_d(xmm0);
  0xee0738cb:   vmovsd %xmm0,(%esp)
  0xee0738d0:   cmpl   $0x0,-0x8(%ebp)              ;; 2025:       __ call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::d2i), 2);
  0xee0738d4:   je     0xee0738eb
  0xee0738da:   push   $0xf785694c
  0xee0738df:   call   0xee0738e4
  0xee0738e4:   pusha  
  0xee0738e5:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0738ea:   hlt    
  0xee0738eb:   call   0xf7398ee0 = SharedRuntime::d2i(double)
  0xee0738f0:   add    $0x8,%esp
  0xee0738f3:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0738f7:   inc    %esi
  0xee0738f8:   jmp    *-0x833dea0(,%ebx,4)
  0xee0738ff:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
d2l  143 d2l  [0xee073920, 0xee073960]  64 bytes

--------------------------------------------------------------------------------
  0xee073920:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee073925:   add    $0x8,%esp
  0xee073928:   sub    $0x8,%esp                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2029:         __ push_d(xmm0);
  0xee07392b:   vmovsd %xmm0,(%esp)
  0xee073930:   cmpl   $0x0,-0x8(%ebp)              ;; 2035:       __ call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::d2l), 2);
  0xee073934:   je     0xee07394b
  0xee07393a:   push   $0xf785694c
  0xee07393f:   call   0xee073944
  0xee073944:   pusha  
  0xee073945:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07394a:   hlt    
  0xee07394b:   call   0xf7398fa0 = SharedRuntime::d2l(double)
  0xee073950:   add    $0x8,%esp
  0xee073953:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073957:   inc    %esi
  0xee073958:   jmp    *-0x833daa0(,%ebx,4)
  0xee07395f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
d2f  144 d2f  [0xee073980, 0xee073998]  24 bytes

--------------------------------------------------------------------------------
  0xee073980:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee073985:   add    $0x8,%esp
  0xee073988:   vcvtsd2ss %xmm0,%xmm0,%xmm0         ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2049:         __ cvtsd2ss(xmm0, xmm0);
  0xee07398c:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073990:   inc    %esi
  0xee073991:   jmp    *-0x833d6a0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
i2b  145 i2b  [0xee0739c0, 0xee0739d4]  20 bytes

--------------------------------------------------------------------------------
  0xee0739c0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee0739c1:   shl    $0x18,%eax                   ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1938:       __ shll(rax, 24);      // truncate upper 24 bits
  0xee0739c4:   sar    $0x18,%eax                   ;; 1939:       __ sarl(rax, 24);      // and sign-extend byte
  0xee0739c7:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0739cb:   inc    %esi
  0xee0739cc:   jmp    *-0x833dea0(,%ebx,4)
  0xee0739d3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
i2c  146 i2c  [0xee073a00, 0xee073a14]  20 bytes

--------------------------------------------------------------------------------
  0xee073a00:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee073a01:   and    $0xffff,%eax                 ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1943:       __ andl(rax, 0xFFFF);  // truncate upper 16 bits
  0xee073a06:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073a0a:   inc    %esi
  0xee073a0b:   jmp    *-0x833dea0(,%ebx,4)
  0xee073a12:   nop
  0xee073a13:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
i2s  147 i2s  [0xee073a40, 0xee073a54]  20 bytes

--------------------------------------------------------------------------------
  0xee073a40:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee073a41:   shl    $0x10,%eax                   ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 1947:       __ shll(rax, 16);      // truncate upper 16 bits
  0xee073a44:   sar    $0x10,%eax                   ;; 1948:       __ sarl(rax, 16);      // and sign-extend short
  0xee073a47:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073a4b:   inc    %esi
  0xee073a4c:   jmp    *-0x833dea0(,%ebx,4)
  0xee073a53:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lcmp  148 lcmp  [0xee073a80, 0xee073abc]  60 bytes

--------------------------------------------------------------------------------
  0xee073a80:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee073a81:   pop    %edx
  0xee073a82:   pop    %ebx                         ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2072:   __ pop_l(rbx, rcx);             // get x = rcx:rbx
  0xee073a83:   pop    %ecx
  0xee073a84:   cmp    %edx,%ecx                    ;; 2073:   __ lcmp2int(rcx, rbx, rdx, rax);// rcx := cmp(x, y)
  0xee073a86:   jl     0xee073aaa
  0xee073a8c:   jg     0xee073aa2
  0xee073a92:   xor    %ecx,%ecx
  0xee073a94:   cmp    %eax,%ebx
  0xee073a96:   jb     0xee073aaa
  0xee073a9c:   je     0xee073aad
  0xee073aa2:   xor    %ecx,%ecx
  0xee073aa4:   inc    %ecx
  0xee073aa5:   jmp    0xee073aad
  0xee073aaa:   xor    %ecx,%ecx
  0xee073aac:   dec    %ecx
  0xee073aad:   mov    %ecx,%eax                    ;; 2074:   __ mov(rax, rcx);
  0xee073aaf:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073ab3:   inc    %esi
  0xee073ab4:   jmp    *-0x833dea0(,%ebx,4)
  0xee073abb:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fcmpl  149 fcmpl  [0xee073ae0, 0xee073b10]  48 bytes

--------------------------------------------------------------------------------
  0xee073ae0:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee073ae5:   add    $0x4,%esp
  0xee073ae8:   vmovss (%esp),%xmm1                 ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2084:       __ pop_f(xmm1);
  0xee073aed:   add    $0x4,%esp
  0xee073af0:   vucomiss %xmm0,%xmm1                ;; 2085:       __ ucomiss(xmm1, xmm0);
  0xee073af4:   mov    $0xffffffff,%eax             ;; 2092:       __ movl(rax, -1);
  0xee073af9:   jp     0xee073b03                   ;; 2093:       __ jccb(Assembler::parity, done);
  0xee073afb:   jb     0xee073b03                   ;; 2094:       __ jccb(Assembler::below, done);
  0xee073afd:   setne  %dl                          ;; 2095:       __ setb(Assembler::notEqual, rdx);
  0xee073b00:   movzbl %dl,%eax                     ;; 2096:       __ movzbl(rax, rdx);
  0xee073b03:   movzbl 0x1(%esi),%ebx               ;; 2105:     __ bind(done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073b07:   inc    %esi
  0xee073b08:   jmp    *-0x833dea0(,%ebx,4)
  0xee073b0f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fcmpg  150 fcmpg  [0xee073b40, 0xee073b74]  52 bytes

--------------------------------------------------------------------------------
  0xee073b40:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee073b45:   add    $0x4,%esp
  0xee073b48:   vmovss (%esp),%xmm1                 ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2084:       __ pop_f(xmm1);
  0xee073b4d:   add    $0x4,%esp
  0xee073b50:   vucomiss %xmm0,%xmm1                ;; 2085:       __ ucomiss(xmm1, xmm0);
  0xee073b54:   mov    $0x1,%eax                    ;; 2098:       __ movl(rax, 1);
  0xee073b59:   jp     0xee073b65                   ;; 2099:       __ jccb(Assembler::parity, done);
  0xee073b5b:   ja     0xee073b65                   ;; 2100:       __ jccb(Assembler::above, done);
  0xee073b5d:   mov    $0x0,%eax                    ;; 2101:       __ movl(rax, 0);
  0xee073b62:   je     0xee073b65                   ;; 2102:       __ jccb(Assembler::equal, done);
  0xee073b64:   dec    %eax                         ;; 2103:       __ decrementl(rax);
  0xee073b65:   movzbl 0x1(%esi),%ebx               ;; 2105:     __ bind(done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073b69:   inc    %esi
  0xee073b6a:   jmp    *-0x833dea0(,%ebx,4)
  0xee073b71:   nop
  0xee073b72:   nop
  0xee073b73:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dcmpl  151 dcmpl  [0xee073ba0, 0xee073bd0]  48 bytes

--------------------------------------------------------------------------------
  0xee073ba0:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee073ba5:   add    $0x8,%esp
  0xee073ba8:   vmovsd (%esp),%xmm1                 ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2088:       __ pop_d(xmm1);
  0xee073bad:   add    $0x8,%esp
  0xee073bb0:   vucomisd %xmm0,%xmm1                ;; 2089:       __ ucomisd(xmm1, xmm0);
  0xee073bb4:   mov    $0xffffffff,%eax             ;; 2092:       __ movl(rax, -1);
  0xee073bb9:   jp     0xee073bc3                   ;; 2093:       __ jccb(Assembler::parity, done);
  0xee073bbb:   jb     0xee073bc3                   ;; 2094:       __ jccb(Assembler::below, done);
  0xee073bbd:   setne  %dl                          ;; 2095:       __ setb(Assembler::notEqual, rdx);
  0xee073bc0:   movzbl %dl,%eax                     ;; 2096:       __ movzbl(rax, rdx);
  0xee073bc3:   movzbl 0x1(%esi),%ebx               ;; 2105:     __ bind(done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073bc7:   inc    %esi
  0xee073bc8:   jmp    *-0x833dea0(,%ebx,4)
  0xee073bcf:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dcmpg  152 dcmpg  [0xee073c00, 0xee073c34]  52 bytes

--------------------------------------------------------------------------------
  0xee073c00:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee073c05:   add    $0x8,%esp
  0xee073c08:   vmovsd (%esp),%xmm1                 ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2088:       __ pop_d(xmm1);
  0xee073c0d:   add    $0x8,%esp
  0xee073c10:   vucomisd %xmm0,%xmm1                ;; 2089:       __ ucomisd(xmm1, xmm0);
  0xee073c14:   mov    $0x1,%eax                    ;; 2098:       __ movl(rax, 1);
  0xee073c19:   jp     0xee073c25                   ;; 2099:       __ jccb(Assembler::parity, done);
  0xee073c1b:   ja     0xee073c25                   ;; 2100:       __ jccb(Assembler::above, done);
  0xee073c1d:   mov    $0x0,%eax                    ;; 2101:       __ movl(rax, 0);
  0xee073c22:   je     0xee073c25                   ;; 2102:       __ jccb(Assembler::equal, done);
  0xee073c24:   dec    %eax                         ;; 2103:       __ decrementl(rax);
  0xee073c25:   movzbl 0x1(%esi),%ebx               ;; 2105:     __ bind(done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073c29:   inc    %esi
  0xee073c2a:   jmp    *-0x833dea0(,%ebx,4)
  0xee073c31:   nop
  0xee073c32:   nop
  0xee073c33:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ifeq  153 ifeq  [0xee073c60, 0xee073fd0]  880 bytes

--------------------------------------------------------------------------------
  0xee073c60:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee073c61:   push   %eax                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee073c62:   push   %ebx
  0xee073c63:   push   %ecx
  0xee073c64:   push   %edx
  0xee073c65:   mov    -0x14(%ebp),%ecx
  0xee073c68:   test   %ecx,%ecx
  0xee073c6a:   je     0xee073cab
  0xee073c70:   mov    -0xc(%ebp),%ebx
  0xee073c73:   movzwl 0x2(%ecx),%edx
  0xee073c77:   add    0x8(%ebx),%edx
  0xee073c7a:   lea    0x2c(%edx),%edx
  0xee073c7d:   cmp    %esi,%edx
  0xee073c7f:   je     0xee073cab
  0xee073c85:   push   %ecx
  0xee073c86:   push   %esi
  0xee073c87:   push   %ebx
  0xee073c88:   cmpl   $0x0,-0x8(%ebp)
  0xee073c8c:   je     0xee073ca3
  0xee073c92:   push   $0xf785694c
  0xee073c97:   call   0xee073c9c
  0xee073c9c:   pusha  
  0xee073c9d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee073ca2:   hlt    
  0xee073ca3:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee073ca8:   add    $0xc,%esp
  0xee073cab:   pop    %edx
  0xee073cac:   pop    %ecx
  0xee073cad:   pop    %ebx
  0xee073cae:   pop    %eax
  0xee073caf:   test   %eax,%eax                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2300:   __ testl(rax, rax);
  0xee073cb1:   jne    0xee073fa7                   ;; 2301:   __ jcc(j_not(cc), not_taken);
  0xee073cb7:   mov    -0xc(%ebp),%ecx              ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee073cba:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee073cbd:   test   %eax,%eax
  0xee073cbf:   je     0xee073cd7
  0xee073cc5:   mov    0x8(%eax),%ebx
  0xee073cc8:   add    $0x1,%ebx
  0xee073ccb:   sbb    $0x0,%ebx
  0xee073cce:   mov    %ebx,0x8(%eax)
  0xee073cd1:   add    0xc(%eax),%eax
  0xee073cd4:   mov    %eax,-0x14(%ebp)
  0xee073cd7:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee073cdb:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee073cdd:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee073ce0:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee073ce2:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee073ce4:   jns    0xee073dec                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee073cea:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee073ced:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee073cef:   jne    0xee073db0                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee073cf5:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee073cf6:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee073cf7:   call   0xee073d01                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee073cfc:   jmp    0xee073da3
  0xee073d01:   push   %ecx
  0xee073d02:   lea    0x8(%esp),%eax
  0xee073d06:   mov    %esi,-0x20(%ebp)
  0xee073d09:   cmpl   $0x0,-0x8(%ebp)
  0xee073d0d:   je     0xee073d24
  0xee073d13:   push   $0xf78569d8
  0xee073d18:   call   0xee073d1d
  0xee073d1d:   pusha  
  0xee073d1e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee073d23:   hlt    
  0xee073d24:   push   %eax
  0xee073d25:   push   %edx
  0xee073d26:   push   %ecx
  0xee073d27:   call   0xf704a910 = Thread::current()
  0xee073d2c:   pop    %ecx
  0xee073d2d:   pop    %edx
  0xee073d2e:   mov    %eax,%edi
  0xee073d30:   pop    %eax
  0xee073d31:   push   %edi
  0xee073d32:   vzeroupper 
  0xee073d35:   mov    %ebp,0x230(%edi)
  0xee073d3b:   mov    %eax,0x228(%edi)
  0xee073d41:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee073d46:   add    $0x8,%esp
  0xee073d49:   push   %eax
  0xee073d4a:   push   %edx
  0xee073d4b:   push   %ecx
  0xee073d4c:   call   0xf704a910 = Thread::current()
  0xee073d51:   pop    %ecx
  0xee073d52:   pop    %edx
  0xee073d53:   cmp    %eax,%edi
  0xee073d55:   je     0xee073d6c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee073d5b:   push   $0xf78b5a48
  0xee073d60:   call   0xee073d65
  0xee073d65:   pusha  
  0xee073d66:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee073d6b:   hlt    
  0xee073d6c:   pop    %eax
  0xee073d6d:   movl   $0x0,0x228(%edi)
  0xee073d77:   movl   $0x0,0x230(%edi)
  0xee073d81:   movl   $0x0,0x22c(%edi)
  0xee073d8b:   vzeroupper 
  0xee073d8e:   cmpl   $0x0,0x4(%edi)
  0xee073d92:   jne    0xee05bbe0
  0xee073d98:   mov    -0x20(%ebp),%esi
  0xee073d9b:   mov    -0x1c(%ebp),%edi
  0xee073d9e:   lea    0x0(%ebp,%edi,4),%edi
  0xee073da2:   ret    
  0xee073da3:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee073da4:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee073da5:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee073da8:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee073daa:   je     0xee073dec                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee073db0:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee073db3:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee073db5:   je     0xee073dd7                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee073db7:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee073dbd:   add    $0x2,%eax
  0xee073dc0:   mov    %eax,0xb8(%ebx)
  0xee073dc6:   and    0xcc(%ebx),%eax
  0xee073dcc:   je     0xee073e13
  0xee073dd2:   jmp    0xee073dec                   ;; 2212:       __ jmp(dispatch);
  0xee073dd7:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee073dda:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee073ddd:   add    $0x2,%eax
  0xee073de0:   mov    %eax,0xc(%ecx)
  0xee073de3:   and    0x20(%ecx),%eax
  0xee073de6:   je     0xee073e13
  0xee073dec:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee073def:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee073df0:   push   %edx
  0xee073df1:   push   %ecx
  0xee073df2:   call   0xf704a910 = Thread::current()
  0xee073df7:   pop    %ecx
  0xee073df8:   pop    %edx
  0xee073df9:   mov    %eax,%ecx
  0xee073dfb:   pop    %eax
  0xee073dfc:   testb  $0x1,0x288(%ecx)
  0xee073e03:   je     0xee073e0c
  0xee073e05:   jmp    *-0x8341aa0(,%ebx,4)
  0xee073e0c:   jmp    *-0x833caa0(,%ebx,4)
  0xee073e13:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee073e15:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee073e17:   call   0xee073e21                   ;; 2240:       __ call_VM(noreg,
  0xee073e1c:   jmp    0xee073ec3
  0xee073e21:   push   %edx
  0xee073e22:   lea    0x8(%esp),%eax
  0xee073e26:   mov    %esi,-0x20(%ebp)
  0xee073e29:   cmpl   $0x0,-0x8(%ebp)
  0xee073e2d:   je     0xee073e44
  0xee073e33:   push   $0xf78569d8
  0xee073e38:   call   0xee073e3d
  0xee073e3d:   pusha  
  0xee073e3e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee073e43:   hlt    
  0xee073e44:   push   %eax
  0xee073e45:   push   %edx
  0xee073e46:   push   %ecx
  0xee073e47:   call   0xf704a910 = Thread::current()
  0xee073e4c:   pop    %ecx
  0xee073e4d:   pop    %edx
  0xee073e4e:   mov    %eax,%edi
  0xee073e50:   pop    %eax
  0xee073e51:   push   %edi
  0xee073e52:   vzeroupper 
  0xee073e55:   mov    %ebp,0x230(%edi)
  0xee073e5b:   mov    %eax,0x228(%edi)
  0xee073e61:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee073e66:   add    $0x8,%esp
  0xee073e69:   push   %eax
  0xee073e6a:   push   %edx
  0xee073e6b:   push   %ecx
  0xee073e6c:   call   0xf704a910 = Thread::current()
  0xee073e71:   pop    %ecx
  0xee073e72:   pop    %edx
  0xee073e73:   cmp    %eax,%edi
  0xee073e75:   je     0xee073e8c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee073e7b:   push   $0xf78b5a48
  0xee073e80:   call   0xee073e85
  0xee073e85:   pusha  
  0xee073e86:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee073e8b:   hlt    
  0xee073e8c:   pop    %eax
  0xee073e8d:   movl   $0x0,0x228(%edi)
  0xee073e97:   movl   $0x0,0x230(%edi)
  0xee073ea1:   movl   $0x0,0x22c(%edi)
  0xee073eab:   vzeroupper 
  0xee073eae:   cmpl   $0x0,0x4(%edi)
  0xee073eb2:   jne    0xee05bbe0
  0xee073eb8:   mov    -0x20(%ebp),%esi
  0xee073ebb:   mov    -0x1c(%ebp),%edi
  0xee073ebe:   lea    0x0(%ebp,%edi,4),%edi
  0xee073ec2:   ret    
  0xee073ec3:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee073ec5:   je     0xee073dec                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee073ecb:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee073ed2:   jne    0xee073dec                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee073ed8:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee073eda:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee073edb:   push   %edx
  0xee073edc:   push   %ecx
  0xee073edd:   call   0xf704a910 = Thread::current()
  0xee073ee2:   pop    %ecx
  0xee073ee3:   pop    %edx
  0xee073ee4:   mov    %eax,%ecx
  0xee073ee6:   pop    %eax
  0xee073ee7:   call   0xee073ef1
  0xee073eec:   jmp    0xee073f92
  0xee073ef1:   lea    0x4(%esp),%eax
  0xee073ef5:   mov    %esi,-0x20(%ebp)
  0xee073ef8:   cmpl   $0x0,-0x8(%ebp)
  0xee073efc:   je     0xee073f13
  0xee073f02:   push   $0xf78569d8
  0xee073f07:   call   0xee073f0c
  0xee073f0c:   pusha  
  0xee073f0d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee073f12:   hlt    
  0xee073f13:   push   %eax
  0xee073f14:   push   %edx
  0xee073f15:   push   %ecx
  0xee073f16:   call   0xf704a910 = Thread::current()
  0xee073f1b:   pop    %ecx
  0xee073f1c:   pop    %edx
  0xee073f1d:   mov    %eax,%edi
  0xee073f1f:   pop    %eax
  0xee073f20:   push   %edi
  0xee073f21:   vzeroupper 
  0xee073f24:   mov    %ebp,0x230(%edi)
  0xee073f2a:   mov    %eax,0x228(%edi)
  0xee073f30:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee073f35:   add    $0x4,%esp
  0xee073f38:   push   %eax
  0xee073f39:   push   %edx
  0xee073f3a:   push   %ecx
  0xee073f3b:   call   0xf704a910 = Thread::current()
  0xee073f40:   pop    %ecx
  0xee073f41:   pop    %edx
  0xee073f42:   cmp    %eax,%edi
  0xee073f44:   je     0xee073f5b
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee073f4a:   push   $0xf78b5a48
  0xee073f4f:   call   0xee073f54
  0xee073f54:   pusha  
  0xee073f55:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee073f5a:   hlt    
  0xee073f5b:   pop    %eax
  0xee073f5c:   movl   $0x0,0x228(%edi)
  0xee073f66:   movl   $0x0,0x230(%edi)
  0xee073f70:   movl   $0x0,0x22c(%edi)
  0xee073f7a:   vzeroupper 
  0xee073f7d:   cmpl   $0x0,0x4(%edi)
  0xee073f81:   jne    0xee05bbe0
  0xee073f87:   mov    -0x20(%ebp),%esi
  0xee073f8a:   mov    -0x1c(%ebp),%edi
  0xee073f8d:   lea    0x0(%ebp,%edi,4),%edi
  0xee073f91:   ret    
  0xee073f92:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee073f94:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee073f97:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee073f99:   pop    %ebp
  0xee073f9a:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee073f9b:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee073f9d:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee073fa0:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee073fa1:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee073fa7:   mov    -0x14(%ebp),%eax             ;; 2303:   __ bind(not_taken);
                                                    ;; 2304:   __ profile_not_taken_branch(rax);
  0xee073faa:   test   %eax,%eax
  0xee073fac:   je     0xee073fc0
  0xee073fb2:   addl   $0x1,0x10(%eax)
  0xee073fb6:   sbbl   $0x0,0x10(%eax)
  0xee073fba:   add    $0x14,%eax
  0xee073fbd:   mov    %eax,-0x14(%ebp)
  0xee073fc0:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee073fc4:   add    $0x3,%esi
  0xee073fc7:   jmp    *-0x833caa0(,%ebx,4)
  0xee073fce:   nop
  0xee073fcf:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ifne  154 ifne  [0xee074000, 0xee074370]  880 bytes

--------------------------------------------------------------------------------
  0xee074000:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee074001:   push   %eax                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee074002:   push   %ebx
  0xee074003:   push   %ecx
  0xee074004:   push   %edx
  0xee074005:   mov    -0x14(%ebp),%ecx
  0xee074008:   test   %ecx,%ecx
  0xee07400a:   je     0xee07404b
  0xee074010:   mov    -0xc(%ebp),%ebx
  0xee074013:   movzwl 0x2(%ecx),%edx
  0xee074017:   add    0x8(%ebx),%edx
  0xee07401a:   lea    0x2c(%edx),%edx
  0xee07401d:   cmp    %esi,%edx
  0xee07401f:   je     0xee07404b
  0xee074025:   push   %ecx
  0xee074026:   push   %esi
  0xee074027:   push   %ebx
  0xee074028:   cmpl   $0x0,-0x8(%ebp)
  0xee07402c:   je     0xee074043
  0xee074032:   push   $0xf785694c
  0xee074037:   call   0xee07403c
  0xee07403c:   pusha  
  0xee07403d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074042:   hlt    
  0xee074043:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee074048:   add    $0xc,%esp
  0xee07404b:   pop    %edx
  0xee07404c:   pop    %ecx
  0xee07404d:   pop    %ebx
  0xee07404e:   pop    %eax
  0xee07404f:   test   %eax,%eax                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2300:   __ testl(rax, rax);
  0xee074051:   je     0xee074347                   ;; 2301:   __ jcc(j_not(cc), not_taken);
  0xee074057:   mov    -0xc(%ebp),%ecx              ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee07405a:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee07405d:   test   %eax,%eax
  0xee07405f:   je     0xee074077
  0xee074065:   mov    0x8(%eax),%ebx
  0xee074068:   add    $0x1,%ebx
  0xee07406b:   sbb    $0x0,%ebx
  0xee07406e:   mov    %ebx,0x8(%eax)
  0xee074071:   add    0xc(%eax),%eax
  0xee074074:   mov    %eax,-0x14(%ebp)
  0xee074077:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee07407b:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee07407d:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee074080:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee074082:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee074084:   jns    0xee07418c                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee07408a:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee07408d:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee07408f:   jne    0xee074150                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee074095:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee074096:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee074097:   call   0xee0740a1                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee07409c:   jmp    0xee074143
  0xee0740a1:   push   %ecx
  0xee0740a2:   lea    0x8(%esp),%eax
  0xee0740a6:   mov    %esi,-0x20(%ebp)
  0xee0740a9:   cmpl   $0x0,-0x8(%ebp)
  0xee0740ad:   je     0xee0740c4
  0xee0740b3:   push   $0xf78569d8
  0xee0740b8:   call   0xee0740bd
  0xee0740bd:   pusha  
  0xee0740be:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0740c3:   hlt    
  0xee0740c4:   push   %eax
  0xee0740c5:   push   %edx
  0xee0740c6:   push   %ecx
  0xee0740c7:   call   0xf704a910 = Thread::current()
  0xee0740cc:   pop    %ecx
  0xee0740cd:   pop    %edx
  0xee0740ce:   mov    %eax,%edi
  0xee0740d0:   pop    %eax
  0xee0740d1:   push   %edi
  0xee0740d2:   vzeroupper 
  0xee0740d5:   mov    %ebp,0x230(%edi)
  0xee0740db:   mov    %eax,0x228(%edi)
  0xee0740e1:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee0740e6:   add    $0x8,%esp
  0xee0740e9:   push   %eax
  0xee0740ea:   push   %edx
  0xee0740eb:   push   %ecx
  0xee0740ec:   call   0xf704a910 = Thread::current()
  0xee0740f1:   pop    %ecx
  0xee0740f2:   pop    %edx
  0xee0740f3:   cmp    %eax,%edi
  0xee0740f5:   je     0xee07410c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee0740fb:   push   $0xf78b5a48
  0xee074100:   call   0xee074105
  0xee074105:   pusha  
  0xee074106:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07410b:   hlt    
  0xee07410c:   pop    %eax
  0xee07410d:   movl   $0x0,0x228(%edi)
  0xee074117:   movl   $0x0,0x230(%edi)
  0xee074121:   movl   $0x0,0x22c(%edi)
  0xee07412b:   vzeroupper 
  0xee07412e:   cmpl   $0x0,0x4(%edi)
  0xee074132:   jne    0xee05bbe0
  0xee074138:   mov    -0x20(%ebp),%esi
  0xee07413b:   mov    -0x1c(%ebp),%edi
  0xee07413e:   lea    0x0(%ebp,%edi,4),%edi
  0xee074142:   ret    
  0xee074143:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee074144:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee074145:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee074148:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee07414a:   je     0xee07418c                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee074150:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee074153:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee074155:   je     0xee074177                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee074157:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee07415d:   add    $0x2,%eax
  0xee074160:   mov    %eax,0xb8(%ebx)
  0xee074166:   and    0xcc(%ebx),%eax
  0xee07416c:   je     0xee0741b3
  0xee074172:   jmp    0xee07418c                   ;; 2212:       __ jmp(dispatch);
  0xee074177:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee07417a:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee07417d:   add    $0x2,%eax
  0xee074180:   mov    %eax,0xc(%ecx)
  0xee074183:   and    0x20(%ecx),%eax
  0xee074186:   je     0xee0741b3
  0xee07418c:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee07418f:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee074190:   push   %edx
  0xee074191:   push   %ecx
  0xee074192:   call   0xf704a910 = Thread::current()
  0xee074197:   pop    %ecx
  0xee074198:   pop    %edx
  0xee074199:   mov    %eax,%ecx
  0xee07419b:   pop    %eax
  0xee07419c:   testb  $0x1,0x288(%ecx)
  0xee0741a3:   je     0xee0741ac
  0xee0741a5:   jmp    *-0x8341aa0(,%ebx,4)
  0xee0741ac:   jmp    *-0x833caa0(,%ebx,4)
  0xee0741b3:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee0741b5:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee0741b7:   call   0xee0741c1                   ;; 2240:       __ call_VM(noreg,
  0xee0741bc:   jmp    0xee074263
  0xee0741c1:   push   %edx
  0xee0741c2:   lea    0x8(%esp),%eax
  0xee0741c6:   mov    %esi,-0x20(%ebp)
  0xee0741c9:   cmpl   $0x0,-0x8(%ebp)
  0xee0741cd:   je     0xee0741e4
  0xee0741d3:   push   $0xf78569d8
  0xee0741d8:   call   0xee0741dd
  0xee0741dd:   pusha  
  0xee0741de:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0741e3:   hlt    
  0xee0741e4:   push   %eax
  0xee0741e5:   push   %edx
  0xee0741e6:   push   %ecx
  0xee0741e7:   call   0xf704a910 = Thread::current()
  0xee0741ec:   pop    %ecx
  0xee0741ed:   pop    %edx
  0xee0741ee:   mov    %eax,%edi
  0xee0741f0:   pop    %eax
  0xee0741f1:   push   %edi
  0xee0741f2:   vzeroupper 
  0xee0741f5:   mov    %ebp,0x230(%edi)
  0xee0741fb:   mov    %eax,0x228(%edi)
  0xee074201:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee074206:   add    $0x8,%esp
  0xee074209:   push   %eax
  0xee07420a:   push   %edx
  0xee07420b:   push   %ecx
  0xee07420c:   call   0xf704a910 = Thread::current()
  0xee074211:   pop    %ecx
  0xee074212:   pop    %edx
  0xee074213:   cmp    %eax,%edi
  0xee074215:   je     0xee07422c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07421b:   push   $0xf78b5a48
  0xee074220:   call   0xee074225
  0xee074225:   pusha  
  0xee074226:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07422b:   hlt    
  0xee07422c:   pop    %eax
  0xee07422d:   movl   $0x0,0x228(%edi)
  0xee074237:   movl   $0x0,0x230(%edi)
  0xee074241:   movl   $0x0,0x22c(%edi)
  0xee07424b:   vzeroupper 
  0xee07424e:   cmpl   $0x0,0x4(%edi)
  0xee074252:   jne    0xee05bbe0
  0xee074258:   mov    -0x20(%ebp),%esi
  0xee07425b:   mov    -0x1c(%ebp),%edi
  0xee07425e:   lea    0x0(%ebp,%edi,4),%edi
  0xee074262:   ret    
  0xee074263:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee074265:   je     0xee07418c                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee07426b:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee074272:   jne    0xee07418c                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee074278:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee07427a:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee07427b:   push   %edx
  0xee07427c:   push   %ecx
  0xee07427d:   call   0xf704a910 = Thread::current()
  0xee074282:   pop    %ecx
  0xee074283:   pop    %edx
  0xee074284:   mov    %eax,%ecx
  0xee074286:   pop    %eax
  0xee074287:   call   0xee074291
  0xee07428c:   jmp    0xee074332
  0xee074291:   lea    0x4(%esp),%eax
  0xee074295:   mov    %esi,-0x20(%ebp)
  0xee074298:   cmpl   $0x0,-0x8(%ebp)
  0xee07429c:   je     0xee0742b3
  0xee0742a2:   push   $0xf78569d8
  0xee0742a7:   call   0xee0742ac
  0xee0742ac:   pusha  
  0xee0742ad:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0742b2:   hlt    
  0xee0742b3:   push   %eax
  0xee0742b4:   push   %edx
  0xee0742b5:   push   %ecx
  0xee0742b6:   call   0xf704a910 = Thread::current()
  0xee0742bb:   pop    %ecx
  0xee0742bc:   pop    %edx
  0xee0742bd:   mov    %eax,%edi
  0xee0742bf:   pop    %eax
  0xee0742c0:   push   %edi
  0xee0742c1:   vzeroupper 
  0xee0742c4:   mov    %ebp,0x230(%edi)
  0xee0742ca:   mov    %eax,0x228(%edi)
  0xee0742d0:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee0742d5:   add    $0x4,%esp
  0xee0742d8:   push   %eax
  0xee0742d9:   push   %edx
  0xee0742da:   push   %ecx
  0xee0742db:   call   0xf704a910 = Thread::current()
  0xee0742e0:   pop    %ecx
  0xee0742e1:   pop    %edx
  0xee0742e2:   cmp    %eax,%edi
  0xee0742e4:   je     0xee0742fb
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee0742ea:   push   $0xf78b5a48
  0xee0742ef:   call   0xee0742f4
  0xee0742f4:   pusha  
  0xee0742f5:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0742fa:   hlt    
  0xee0742fb:   pop    %eax
  0xee0742fc:   movl   $0x0,0x228(%edi)
  0xee074306:   movl   $0x0,0x230(%edi)
  0xee074310:   movl   $0x0,0x22c(%edi)
  0xee07431a:   vzeroupper 
  0xee07431d:   cmpl   $0x0,0x4(%edi)
  0xee074321:   jne    0xee05bbe0
  0xee074327:   mov    -0x20(%ebp),%esi
  0xee07432a:   mov    -0x1c(%ebp),%edi
  0xee07432d:   lea    0x0(%ebp,%edi,4),%edi
  0xee074331:   ret    
  0xee074332:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee074334:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee074337:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee074339:   pop    %ebp
  0xee07433a:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee07433b:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee07433d:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee074340:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee074341:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee074347:   mov    -0x14(%ebp),%eax             ;; 2303:   __ bind(not_taken);
                                                    ;; 2304:   __ profile_not_taken_branch(rax);
  0xee07434a:   test   %eax,%eax
  0xee07434c:   je     0xee074360
  0xee074352:   addl   $0x1,0x10(%eax)
  0xee074356:   sbbl   $0x0,0x10(%eax)
  0xee07435a:   add    $0x14,%eax
  0xee07435d:   mov    %eax,-0x14(%ebp)
  0xee074360:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee074364:   add    $0x3,%esi
  0xee074367:   jmp    *-0x833caa0(,%ebx,4)
  0xee07436e:   nop
  0xee07436f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
iflt  155 iflt  [0xee0743a0, 0xee074710]  880 bytes

--------------------------------------------------------------------------------
  0xee0743a0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee0743a1:   push   %eax                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee0743a2:   push   %ebx
  0xee0743a3:   push   %ecx
  0xee0743a4:   push   %edx
  0xee0743a5:   mov    -0x14(%ebp),%ecx
  0xee0743a8:   test   %ecx,%ecx
  0xee0743aa:   je     0xee0743eb
  0xee0743b0:   mov    -0xc(%ebp),%ebx
  0xee0743b3:   movzwl 0x2(%ecx),%edx
  0xee0743b7:   add    0x8(%ebx),%edx
  0xee0743ba:   lea    0x2c(%edx),%edx
  0xee0743bd:   cmp    %esi,%edx
  0xee0743bf:   je     0xee0743eb
  0xee0743c5:   push   %ecx
  0xee0743c6:   push   %esi
  0xee0743c7:   push   %ebx
  0xee0743c8:   cmpl   $0x0,-0x8(%ebp)
  0xee0743cc:   je     0xee0743e3
  0xee0743d2:   push   $0xf785694c
  0xee0743d7:   call   0xee0743dc
  0xee0743dc:   pusha  
  0xee0743dd:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0743e2:   hlt    
  0xee0743e3:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee0743e8:   add    $0xc,%esp
  0xee0743eb:   pop    %edx
  0xee0743ec:   pop    %ecx
  0xee0743ed:   pop    %ebx
  0xee0743ee:   pop    %eax
  0xee0743ef:   test   %eax,%eax                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2300:   __ testl(rax, rax);
  0xee0743f1:   jge    0xee0746e7                   ;; 2301:   __ jcc(j_not(cc), not_taken);
  0xee0743f7:   mov    -0xc(%ebp),%ecx              ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee0743fa:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee0743fd:   test   %eax,%eax
  0xee0743ff:   je     0xee074417
  0xee074405:   mov    0x8(%eax),%ebx
  0xee074408:   add    $0x1,%ebx
  0xee07440b:   sbb    $0x0,%ebx
  0xee07440e:   mov    %ebx,0x8(%eax)
  0xee074411:   add    0xc(%eax),%eax
  0xee074414:   mov    %eax,-0x14(%ebp)
  0xee074417:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee07441b:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee07441d:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee074420:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee074422:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee074424:   jns    0xee07452c                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee07442a:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee07442d:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee07442f:   jne    0xee0744f0                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee074435:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee074436:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee074437:   call   0xee074441                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee07443c:   jmp    0xee0744e3
  0xee074441:   push   %ecx
  0xee074442:   lea    0x8(%esp),%eax
  0xee074446:   mov    %esi,-0x20(%ebp)
  0xee074449:   cmpl   $0x0,-0x8(%ebp)
  0xee07444d:   je     0xee074464
  0xee074453:   push   $0xf78569d8
  0xee074458:   call   0xee07445d
  0xee07445d:   pusha  
  0xee07445e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074463:   hlt    
  0xee074464:   push   %eax
  0xee074465:   push   %edx
  0xee074466:   push   %ecx
  0xee074467:   call   0xf704a910 = Thread::current()
  0xee07446c:   pop    %ecx
  0xee07446d:   pop    %edx
  0xee07446e:   mov    %eax,%edi
  0xee074470:   pop    %eax
  0xee074471:   push   %edi
  0xee074472:   vzeroupper 
  0xee074475:   mov    %ebp,0x230(%edi)
  0xee07447b:   mov    %eax,0x228(%edi)
  0xee074481:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee074486:   add    $0x8,%esp
  0xee074489:   push   %eax
  0xee07448a:   push   %edx
  0xee07448b:   push   %ecx
  0xee07448c:   call   0xf704a910 = Thread::current()
  0xee074491:   pop    %ecx
  0xee074492:   pop    %edx
  0xee074493:   cmp    %eax,%edi
  0xee074495:   je     0xee0744ac
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07449b:   push   $0xf78b5a48
  0xee0744a0:   call   0xee0744a5
  0xee0744a5:   pusha  
  0xee0744a6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0744ab:   hlt    
  0xee0744ac:   pop    %eax
  0xee0744ad:   movl   $0x0,0x228(%edi)
  0xee0744b7:   movl   $0x0,0x230(%edi)
  0xee0744c1:   movl   $0x0,0x22c(%edi)
  0xee0744cb:   vzeroupper 
  0xee0744ce:   cmpl   $0x0,0x4(%edi)
  0xee0744d2:   jne    0xee05bbe0
  0xee0744d8:   mov    -0x20(%ebp),%esi
  0xee0744db:   mov    -0x1c(%ebp),%edi
  0xee0744de:   lea    0x0(%ebp,%edi,4),%edi
  0xee0744e2:   ret    
  0xee0744e3:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee0744e4:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee0744e5:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee0744e8:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee0744ea:   je     0xee07452c                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee0744f0:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee0744f3:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee0744f5:   je     0xee074517                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee0744f7:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee0744fd:   add    $0x2,%eax
  0xee074500:   mov    %eax,0xb8(%ebx)
  0xee074506:   and    0xcc(%ebx),%eax
  0xee07450c:   je     0xee074553
  0xee074512:   jmp    0xee07452c                   ;; 2212:       __ jmp(dispatch);
  0xee074517:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee07451a:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee07451d:   add    $0x2,%eax
  0xee074520:   mov    %eax,0xc(%ecx)
  0xee074523:   and    0x20(%ecx),%eax
  0xee074526:   je     0xee074553
  0xee07452c:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee07452f:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee074530:   push   %edx
  0xee074531:   push   %ecx
  0xee074532:   call   0xf704a910 = Thread::current()
  0xee074537:   pop    %ecx
  0xee074538:   pop    %edx
  0xee074539:   mov    %eax,%ecx
  0xee07453b:   pop    %eax
  0xee07453c:   testb  $0x1,0x288(%ecx)
  0xee074543:   je     0xee07454c
  0xee074545:   jmp    *-0x8341aa0(,%ebx,4)
  0xee07454c:   jmp    *-0x833caa0(,%ebx,4)
  0xee074553:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee074555:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee074557:   call   0xee074561                   ;; 2240:       __ call_VM(noreg,
  0xee07455c:   jmp    0xee074603
  0xee074561:   push   %edx
  0xee074562:   lea    0x8(%esp),%eax
  0xee074566:   mov    %esi,-0x20(%ebp)
  0xee074569:   cmpl   $0x0,-0x8(%ebp)
  0xee07456d:   je     0xee074584
  0xee074573:   push   $0xf78569d8
  0xee074578:   call   0xee07457d
  0xee07457d:   pusha  
  0xee07457e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074583:   hlt    
  0xee074584:   push   %eax
  0xee074585:   push   %edx
  0xee074586:   push   %ecx
  0xee074587:   call   0xf704a910 = Thread::current()
  0xee07458c:   pop    %ecx
  0xee07458d:   pop    %edx
  0xee07458e:   mov    %eax,%edi
  0xee074590:   pop    %eax
  0xee074591:   push   %edi
  0xee074592:   vzeroupper 
  0xee074595:   mov    %ebp,0x230(%edi)
  0xee07459b:   mov    %eax,0x228(%edi)
  0xee0745a1:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee0745a6:   add    $0x8,%esp
  0xee0745a9:   push   %eax
  0xee0745aa:   push   %edx
  0xee0745ab:   push   %ecx
  0xee0745ac:   call   0xf704a910 = Thread::current()
  0xee0745b1:   pop    %ecx
  0xee0745b2:   pop    %edx
  0xee0745b3:   cmp    %eax,%edi
  0xee0745b5:   je     0xee0745cc
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee0745bb:   push   $0xf78b5a48
  0xee0745c0:   call   0xee0745c5
  0xee0745c5:   pusha  
  0xee0745c6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0745cb:   hlt    
  0xee0745cc:   pop    %eax
  0xee0745cd:   movl   $0x0,0x228(%edi)
  0xee0745d7:   movl   $0x0,0x230(%edi)
  0xee0745e1:   movl   $0x0,0x22c(%edi)
  0xee0745eb:   vzeroupper 
  0xee0745ee:   cmpl   $0x0,0x4(%edi)
  0xee0745f2:   jne    0xee05bbe0
  0xee0745f8:   mov    -0x20(%ebp),%esi
  0xee0745fb:   mov    -0x1c(%ebp),%edi
  0xee0745fe:   lea    0x0(%ebp,%edi,4),%edi
  0xee074602:   ret    
  0xee074603:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee074605:   je     0xee07452c                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee07460b:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee074612:   jne    0xee07452c                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee074618:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee07461a:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee07461b:   push   %edx
  0xee07461c:   push   %ecx
  0xee07461d:   call   0xf704a910 = Thread::current()
  0xee074622:   pop    %ecx
  0xee074623:   pop    %edx
  0xee074624:   mov    %eax,%ecx
  0xee074626:   pop    %eax
  0xee074627:   call   0xee074631
  0xee07462c:   jmp    0xee0746d2
  0xee074631:   lea    0x4(%esp),%eax
  0xee074635:   mov    %esi,-0x20(%ebp)
  0xee074638:   cmpl   $0x0,-0x8(%ebp)
  0xee07463c:   je     0xee074653
  0xee074642:   push   $0xf78569d8
  0xee074647:   call   0xee07464c
  0xee07464c:   pusha  
  0xee07464d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074652:   hlt    
  0xee074653:   push   %eax
  0xee074654:   push   %edx
  0xee074655:   push   %ecx
  0xee074656:   call   0xf704a910 = Thread::current()
  0xee07465b:   pop    %ecx
  0xee07465c:   pop    %edx
  0xee07465d:   mov    %eax,%edi
  0xee07465f:   pop    %eax
  0xee074660:   push   %edi
  0xee074661:   vzeroupper 
  0xee074664:   mov    %ebp,0x230(%edi)
  0xee07466a:   mov    %eax,0x228(%edi)
  0xee074670:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee074675:   add    $0x4,%esp
  0xee074678:   push   %eax
  0xee074679:   push   %edx
  0xee07467a:   push   %ecx
  0xee07467b:   call   0xf704a910 = Thread::current()
  0xee074680:   pop    %ecx
  0xee074681:   pop    %edx
  0xee074682:   cmp    %eax,%edi
  0xee074684:   je     0xee07469b
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07468a:   push   $0xf78b5a48
  0xee07468f:   call   0xee074694
  0xee074694:   pusha  
  0xee074695:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07469a:   hlt    
  0xee07469b:   pop    %eax
  0xee07469c:   movl   $0x0,0x228(%edi)
  0xee0746a6:   movl   $0x0,0x230(%edi)
  0xee0746b0:   movl   $0x0,0x22c(%edi)
  0xee0746ba:   vzeroupper 
  0xee0746bd:   cmpl   $0x0,0x4(%edi)
  0xee0746c1:   jne    0xee05bbe0
  0xee0746c7:   mov    -0x20(%ebp),%esi
  0xee0746ca:   mov    -0x1c(%ebp),%edi
  0xee0746cd:   lea    0x0(%ebp,%edi,4),%edi
  0xee0746d1:   ret    
  0xee0746d2:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee0746d4:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee0746d7:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee0746d9:   pop    %ebp
  0xee0746da:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee0746db:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee0746dd:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee0746e0:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee0746e1:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee0746e7:   mov    -0x14(%ebp),%eax             ;; 2303:   __ bind(not_taken);
                                                    ;; 2304:   __ profile_not_taken_branch(rax);
  0xee0746ea:   test   %eax,%eax
  0xee0746ec:   je     0xee074700
  0xee0746f2:   addl   $0x1,0x10(%eax)
  0xee0746f6:   sbbl   $0x0,0x10(%eax)
  0xee0746fa:   add    $0x14,%eax
  0xee0746fd:   mov    %eax,-0x14(%ebp)
  0xee074700:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee074704:   add    $0x3,%esi
  0xee074707:   jmp    *-0x833caa0(,%ebx,4)
  0xee07470e:   nop
  0xee07470f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ifge  156 ifge  [0xee074740, 0xee074ab0]  880 bytes

--------------------------------------------------------------------------------
  0xee074740:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee074741:   push   %eax                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee074742:   push   %ebx
  0xee074743:   push   %ecx
  0xee074744:   push   %edx
  0xee074745:   mov    -0x14(%ebp),%ecx
  0xee074748:   test   %ecx,%ecx
  0xee07474a:   je     0xee07478b
  0xee074750:   mov    -0xc(%ebp),%ebx
  0xee074753:   movzwl 0x2(%ecx),%edx
  0xee074757:   add    0x8(%ebx),%edx
  0xee07475a:   lea    0x2c(%edx),%edx
  0xee07475d:   cmp    %esi,%edx
  0xee07475f:   je     0xee07478b
  0xee074765:   push   %ecx
  0xee074766:   push   %esi
  0xee074767:   push   %ebx
  0xee074768:   cmpl   $0x0,-0x8(%ebp)
  0xee07476c:   je     0xee074783
  0xee074772:   push   $0xf785694c
  0xee074777:   call   0xee07477c
  0xee07477c:   pusha  
  0xee07477d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074782:   hlt    
  0xee074783:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee074788:   add    $0xc,%esp
  0xee07478b:   pop    %edx
  0xee07478c:   pop    %ecx
  0xee07478d:   pop    %ebx
  0xee07478e:   pop    %eax
  0xee07478f:   test   %eax,%eax                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2300:   __ testl(rax, rax);
  0xee074791:   jl     0xee074a87                   ;; 2301:   __ jcc(j_not(cc), not_taken);
  0xee074797:   mov    -0xc(%ebp),%ecx              ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee07479a:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee07479d:   test   %eax,%eax
  0xee07479f:   je     0xee0747b7
  0xee0747a5:   mov    0x8(%eax),%ebx
  0xee0747a8:   add    $0x1,%ebx
  0xee0747ab:   sbb    $0x0,%ebx
  0xee0747ae:   mov    %ebx,0x8(%eax)
  0xee0747b1:   add    0xc(%eax),%eax
  0xee0747b4:   mov    %eax,-0x14(%ebp)
  0xee0747b7:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee0747bb:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee0747bd:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee0747c0:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee0747c2:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee0747c4:   jns    0xee0748cc                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee0747ca:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee0747cd:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee0747cf:   jne    0xee074890                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee0747d5:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee0747d6:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee0747d7:   call   0xee0747e1                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee0747dc:   jmp    0xee074883
  0xee0747e1:   push   %ecx
  0xee0747e2:   lea    0x8(%esp),%eax
  0xee0747e6:   mov    %esi,-0x20(%ebp)
  0xee0747e9:   cmpl   $0x0,-0x8(%ebp)
  0xee0747ed:   je     0xee074804
  0xee0747f3:   push   $0xf78569d8
  0xee0747f8:   call   0xee0747fd
  0xee0747fd:   pusha  
  0xee0747fe:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074803:   hlt    
  0xee074804:   push   %eax
  0xee074805:   push   %edx
  0xee074806:   push   %ecx
  0xee074807:   call   0xf704a910 = Thread::current()
  0xee07480c:   pop    %ecx
  0xee07480d:   pop    %edx
  0xee07480e:   mov    %eax,%edi
  0xee074810:   pop    %eax
  0xee074811:   push   %edi
  0xee074812:   vzeroupper 
  0xee074815:   mov    %ebp,0x230(%edi)
  0xee07481b:   mov    %eax,0x228(%edi)
  0xee074821:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee074826:   add    $0x8,%esp
  0xee074829:   push   %eax
  0xee07482a:   push   %edx
  0xee07482b:   push   %ecx
  0xee07482c:   call   0xf704a910 = Thread::current()
  0xee074831:   pop    %ecx
  0xee074832:   pop    %edx
  0xee074833:   cmp    %eax,%edi
  0xee074835:   je     0xee07484c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07483b:   push   $0xf78b5a48
  0xee074840:   call   0xee074845
  0xee074845:   pusha  
  0xee074846:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07484b:   hlt    
  0xee07484c:   pop    %eax
  0xee07484d:   movl   $0x0,0x228(%edi)
  0xee074857:   movl   $0x0,0x230(%edi)
  0xee074861:   movl   $0x0,0x22c(%edi)
  0xee07486b:   vzeroupper 
  0xee07486e:   cmpl   $0x0,0x4(%edi)
  0xee074872:   jne    0xee05bbe0
  0xee074878:   mov    -0x20(%ebp),%esi
  0xee07487b:   mov    -0x1c(%ebp),%edi
  0xee07487e:   lea    0x0(%ebp,%edi,4),%edi
  0xee074882:   ret    
  0xee074883:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee074884:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee074885:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee074888:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee07488a:   je     0xee0748cc                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee074890:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee074893:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee074895:   je     0xee0748b7                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee074897:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee07489d:   add    $0x2,%eax
  0xee0748a0:   mov    %eax,0xb8(%ebx)
  0xee0748a6:   and    0xcc(%ebx),%eax
  0xee0748ac:   je     0xee0748f3
  0xee0748b2:   jmp    0xee0748cc                   ;; 2212:       __ jmp(dispatch);
  0xee0748b7:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee0748ba:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee0748bd:   add    $0x2,%eax
  0xee0748c0:   mov    %eax,0xc(%ecx)
  0xee0748c3:   and    0x20(%ecx),%eax
  0xee0748c6:   je     0xee0748f3
  0xee0748cc:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee0748cf:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee0748d0:   push   %edx
  0xee0748d1:   push   %ecx
  0xee0748d2:   call   0xf704a910 = Thread::current()
  0xee0748d7:   pop    %ecx
  0xee0748d8:   pop    %edx
  0xee0748d9:   mov    %eax,%ecx
  0xee0748db:   pop    %eax
  0xee0748dc:   testb  $0x1,0x288(%ecx)
  0xee0748e3:   je     0xee0748ec
  0xee0748e5:   jmp    *-0x8341aa0(,%ebx,4)
  0xee0748ec:   jmp    *-0x833caa0(,%ebx,4)
  0xee0748f3:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee0748f5:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee0748f7:   call   0xee074901                   ;; 2240:       __ call_VM(noreg,
  0xee0748fc:   jmp    0xee0749a3
  0xee074901:   push   %edx
  0xee074902:   lea    0x8(%esp),%eax
  0xee074906:   mov    %esi,-0x20(%ebp)
  0xee074909:   cmpl   $0x0,-0x8(%ebp)
  0xee07490d:   je     0xee074924
  0xee074913:   push   $0xf78569d8
  0xee074918:   call   0xee07491d
  0xee07491d:   pusha  
  0xee07491e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074923:   hlt    
  0xee074924:   push   %eax
  0xee074925:   push   %edx
  0xee074926:   push   %ecx
  0xee074927:   call   0xf704a910 = Thread::current()
  0xee07492c:   pop    %ecx
  0xee07492d:   pop    %edx
  0xee07492e:   mov    %eax,%edi
  0xee074930:   pop    %eax
  0xee074931:   push   %edi
  0xee074932:   vzeroupper 
  0xee074935:   mov    %ebp,0x230(%edi)
  0xee07493b:   mov    %eax,0x228(%edi)
  0xee074941:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee074946:   add    $0x8,%esp
  0xee074949:   push   %eax
  0xee07494a:   push   %edx
  0xee07494b:   push   %ecx
  0xee07494c:   call   0xf704a910 = Thread::current()
  0xee074951:   pop    %ecx
  0xee074952:   pop    %edx
  0xee074953:   cmp    %eax,%edi
  0xee074955:   je     0xee07496c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07495b:   push   $0xf78b5a48
  0xee074960:   call   0xee074965
  0xee074965:   pusha  
  0xee074966:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07496b:   hlt    
  0xee07496c:   pop    %eax
  0xee07496d:   movl   $0x0,0x228(%edi)
  0xee074977:   movl   $0x0,0x230(%edi)
  0xee074981:   movl   $0x0,0x22c(%edi)
  0xee07498b:   vzeroupper 
  0xee07498e:   cmpl   $0x0,0x4(%edi)
  0xee074992:   jne    0xee05bbe0
  0xee074998:   mov    -0x20(%ebp),%esi
  0xee07499b:   mov    -0x1c(%ebp),%edi
  0xee07499e:   lea    0x0(%ebp,%edi,4),%edi
  0xee0749a2:   ret    
  0xee0749a3:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee0749a5:   je     0xee0748cc                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee0749ab:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee0749b2:   jne    0xee0748cc                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee0749b8:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee0749ba:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee0749bb:   push   %edx
  0xee0749bc:   push   %ecx
  0xee0749bd:   call   0xf704a910 = Thread::current()
  0xee0749c2:   pop    %ecx
  0xee0749c3:   pop    %edx
  0xee0749c4:   mov    %eax,%ecx
  0xee0749c6:   pop    %eax
  0xee0749c7:   call   0xee0749d1
  0xee0749cc:   jmp    0xee074a72
  0xee0749d1:   lea    0x4(%esp),%eax
  0xee0749d5:   mov    %esi,-0x20(%ebp)
  0xee0749d8:   cmpl   $0x0,-0x8(%ebp)
  0xee0749dc:   je     0xee0749f3
  0xee0749e2:   push   $0xf78569d8
  0xee0749e7:   call   0xee0749ec
  0xee0749ec:   pusha  
  0xee0749ed:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0749f2:   hlt    
  0xee0749f3:   push   %eax
  0xee0749f4:   push   %edx
  0xee0749f5:   push   %ecx
  0xee0749f6:   call   0xf704a910 = Thread::current()
  0xee0749fb:   pop    %ecx
  0xee0749fc:   pop    %edx
  0xee0749fd:   mov    %eax,%edi
  0xee0749ff:   pop    %eax
  0xee074a00:   push   %edi
  0xee074a01:   vzeroupper 
  0xee074a04:   mov    %ebp,0x230(%edi)
  0xee074a0a:   mov    %eax,0x228(%edi)
  0xee074a10:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee074a15:   add    $0x4,%esp
  0xee074a18:   push   %eax
  0xee074a19:   push   %edx
  0xee074a1a:   push   %ecx
  0xee074a1b:   call   0xf704a910 = Thread::current()
  0xee074a20:   pop    %ecx
  0xee074a21:   pop    %edx
  0xee074a22:   cmp    %eax,%edi
  0xee074a24:   je     0xee074a3b
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee074a2a:   push   $0xf78b5a48
  0xee074a2f:   call   0xee074a34
  0xee074a34:   pusha  
  0xee074a35:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074a3a:   hlt    
  0xee074a3b:   pop    %eax
  0xee074a3c:   movl   $0x0,0x228(%edi)
  0xee074a46:   movl   $0x0,0x230(%edi)
  0xee074a50:   movl   $0x0,0x22c(%edi)
  0xee074a5a:   vzeroupper 
  0xee074a5d:   cmpl   $0x0,0x4(%edi)
  0xee074a61:   jne    0xee05bbe0
  0xee074a67:   mov    -0x20(%ebp),%esi
  0xee074a6a:   mov    -0x1c(%ebp),%edi
  0xee074a6d:   lea    0x0(%ebp,%edi,4),%edi
  0xee074a71:   ret    
  0xee074a72:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee074a74:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee074a77:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee074a79:   pop    %ebp
  0xee074a7a:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee074a7b:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee074a7d:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee074a80:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee074a81:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee074a87:   mov    -0x14(%ebp),%eax             ;; 2303:   __ bind(not_taken);
                                                    ;; 2304:   __ profile_not_taken_branch(rax);
  0xee074a8a:   test   %eax,%eax
  0xee074a8c:   je     0xee074aa0
  0xee074a92:   addl   $0x1,0x10(%eax)
  0xee074a96:   sbbl   $0x0,0x10(%eax)
  0xee074a9a:   add    $0x14,%eax
  0xee074a9d:   mov    %eax,-0x14(%ebp)
  0xee074aa0:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee074aa4:   add    $0x3,%esi
  0xee074aa7:   jmp    *-0x833caa0(,%ebx,4)
  0xee074aae:   nop
  0xee074aaf:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ifgt  157 ifgt  [0xee074ae0, 0xee074e50]  880 bytes

--------------------------------------------------------------------------------
  0xee074ae0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee074ae1:   push   %eax                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee074ae2:   push   %ebx
  0xee074ae3:   push   %ecx
  0xee074ae4:   push   %edx
  0xee074ae5:   mov    -0x14(%ebp),%ecx
  0xee074ae8:   test   %ecx,%ecx
  0xee074aea:   je     0xee074b2b
  0xee074af0:   mov    -0xc(%ebp),%ebx
  0xee074af3:   movzwl 0x2(%ecx),%edx
  0xee074af7:   add    0x8(%ebx),%edx
  0xee074afa:   lea    0x2c(%edx),%edx
  0xee074afd:   cmp    %esi,%edx
  0xee074aff:   je     0xee074b2b
  0xee074b05:   push   %ecx
  0xee074b06:   push   %esi
  0xee074b07:   push   %ebx
  0xee074b08:   cmpl   $0x0,-0x8(%ebp)
  0xee074b0c:   je     0xee074b23
  0xee074b12:   push   $0xf785694c
  0xee074b17:   call   0xee074b1c
  0xee074b1c:   pusha  
  0xee074b1d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074b22:   hlt    
  0xee074b23:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee074b28:   add    $0xc,%esp
  0xee074b2b:   pop    %edx
  0xee074b2c:   pop    %ecx
  0xee074b2d:   pop    %ebx
  0xee074b2e:   pop    %eax
  0xee074b2f:   test   %eax,%eax                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2300:   __ testl(rax, rax);
  0xee074b31:   jle    0xee074e27                   ;; 2301:   __ jcc(j_not(cc), not_taken);
  0xee074b37:   mov    -0xc(%ebp),%ecx              ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee074b3a:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee074b3d:   test   %eax,%eax
  0xee074b3f:   je     0xee074b57
  0xee074b45:   mov    0x8(%eax),%ebx
  0xee074b48:   add    $0x1,%ebx
  0xee074b4b:   sbb    $0x0,%ebx
  0xee074b4e:   mov    %ebx,0x8(%eax)
  0xee074b51:   add    0xc(%eax),%eax
  0xee074b54:   mov    %eax,-0x14(%ebp)
  0xee074b57:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee074b5b:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee074b5d:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee074b60:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee074b62:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee074b64:   jns    0xee074c6c                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee074b6a:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee074b6d:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee074b6f:   jne    0xee074c30                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee074b75:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee074b76:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee074b77:   call   0xee074b81                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee074b7c:   jmp    0xee074c23
  0xee074b81:   push   %ecx
  0xee074b82:   lea    0x8(%esp),%eax
  0xee074b86:   mov    %esi,-0x20(%ebp)
  0xee074b89:   cmpl   $0x0,-0x8(%ebp)
  0xee074b8d:   je     0xee074ba4
  0xee074b93:   push   $0xf78569d8
  0xee074b98:   call   0xee074b9d
  0xee074b9d:   pusha  
  0xee074b9e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074ba3:   hlt    
  0xee074ba4:   push   %eax
  0xee074ba5:   push   %edx
  0xee074ba6:   push   %ecx
  0xee074ba7:   call   0xf704a910 = Thread::current()
  0xee074bac:   pop    %ecx
  0xee074bad:   pop    %edx
  0xee074bae:   mov    %eax,%edi
  0xee074bb0:   pop    %eax
  0xee074bb1:   push   %edi
  0xee074bb2:   vzeroupper 
  0xee074bb5:   mov    %ebp,0x230(%edi)
  0xee074bbb:   mov    %eax,0x228(%edi)
  0xee074bc1:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee074bc6:   add    $0x8,%esp
  0xee074bc9:   push   %eax
  0xee074bca:   push   %edx
  0xee074bcb:   push   %ecx
  0xee074bcc:   call   0xf704a910 = Thread::current()
  0xee074bd1:   pop    %ecx
  0xee074bd2:   pop    %edx
  0xee074bd3:   cmp    %eax,%edi
  0xee074bd5:   je     0xee074bec
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee074bdb:   push   $0xf78b5a48
  0xee074be0:   call   0xee074be5
  0xee074be5:   pusha  
  0xee074be6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074beb:   hlt    
  0xee074bec:   pop    %eax
  0xee074bed:   movl   $0x0,0x228(%edi)
  0xee074bf7:   movl   $0x0,0x230(%edi)
  0xee074c01:   movl   $0x0,0x22c(%edi)
  0xee074c0b:   vzeroupper 
  0xee074c0e:   cmpl   $0x0,0x4(%edi)
  0xee074c12:   jne    0xee05bbe0
  0xee074c18:   mov    -0x20(%ebp),%esi
  0xee074c1b:   mov    -0x1c(%ebp),%edi
  0xee074c1e:   lea    0x0(%ebp,%edi,4),%edi
  0xee074c22:   ret    
  0xee074c23:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee074c24:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee074c25:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee074c28:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee074c2a:   je     0xee074c6c                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee074c30:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee074c33:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee074c35:   je     0xee074c57                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee074c37:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee074c3d:   add    $0x2,%eax
  0xee074c40:   mov    %eax,0xb8(%ebx)
  0xee074c46:   and    0xcc(%ebx),%eax
  0xee074c4c:   je     0xee074c93
  0xee074c52:   jmp    0xee074c6c                   ;; 2212:       __ jmp(dispatch);
  0xee074c57:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee074c5a:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee074c5d:   add    $0x2,%eax
  0xee074c60:   mov    %eax,0xc(%ecx)
  0xee074c63:   and    0x20(%ecx),%eax
  0xee074c66:   je     0xee074c93
  0xee074c6c:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee074c6f:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee074c70:   push   %edx
  0xee074c71:   push   %ecx
  0xee074c72:   call   0xf704a910 = Thread::current()
  0xee074c77:   pop    %ecx
  0xee074c78:   pop    %edx
  0xee074c79:   mov    %eax,%ecx
  0xee074c7b:   pop    %eax
  0xee074c7c:   testb  $0x1,0x288(%ecx)
  0xee074c83:   je     0xee074c8c
  0xee074c85:   jmp    *-0x8341aa0(,%ebx,4)
  0xee074c8c:   jmp    *-0x833caa0(,%ebx,4)
  0xee074c93:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee074c95:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee074c97:   call   0xee074ca1                   ;; 2240:       __ call_VM(noreg,
  0xee074c9c:   jmp    0xee074d43
  0xee074ca1:   push   %edx
  0xee074ca2:   lea    0x8(%esp),%eax
  0xee074ca6:   mov    %esi,-0x20(%ebp)
  0xee074ca9:   cmpl   $0x0,-0x8(%ebp)
  0xee074cad:   je     0xee074cc4
  0xee074cb3:   push   $0xf78569d8
  0xee074cb8:   call   0xee074cbd
  0xee074cbd:   pusha  
  0xee074cbe:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074cc3:   hlt    
  0xee074cc4:   push   %eax
  0xee074cc5:   push   %edx
  0xee074cc6:   push   %ecx
  0xee074cc7:   call   0xf704a910 = Thread::current()
  0xee074ccc:   pop    %ecx
  0xee074ccd:   pop    %edx
  0xee074cce:   mov    %eax,%edi
  0xee074cd0:   pop    %eax
  0xee074cd1:   push   %edi
  0xee074cd2:   vzeroupper 
  0xee074cd5:   mov    %ebp,0x230(%edi)
  0xee074cdb:   mov    %eax,0x228(%edi)
  0xee074ce1:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee074ce6:   add    $0x8,%esp
  0xee074ce9:   push   %eax
  0xee074cea:   push   %edx
  0xee074ceb:   push   %ecx
  0xee074cec:   call   0xf704a910 = Thread::current()
  0xee074cf1:   pop    %ecx
  0xee074cf2:   pop    %edx
  0xee074cf3:   cmp    %eax,%edi
  0xee074cf5:   je     0xee074d0c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee074cfb:   push   $0xf78b5a48
  0xee074d00:   call   0xee074d05
  0xee074d05:   pusha  
  0xee074d06:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074d0b:   hlt    
  0xee074d0c:   pop    %eax
  0xee074d0d:   movl   $0x0,0x228(%edi)
  0xee074d17:   movl   $0x0,0x230(%edi)
  0xee074d21:   movl   $0x0,0x22c(%edi)
  0xee074d2b:   vzeroupper 
  0xee074d2e:   cmpl   $0x0,0x4(%edi)
  0xee074d32:   jne    0xee05bbe0
  0xee074d38:   mov    -0x20(%ebp),%esi
  0xee074d3b:   mov    -0x1c(%ebp),%edi
  0xee074d3e:   lea    0x0(%ebp,%edi,4),%edi
  0xee074d42:   ret    
  0xee074d43:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee074d45:   je     0xee074c6c                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee074d4b:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee074d52:   jne    0xee074c6c                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee074d58:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee074d5a:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee074d5b:   push   %edx
  0xee074d5c:   push   %ecx
  0xee074d5d:   call   0xf704a910 = Thread::current()
  0xee074d62:   pop    %ecx
  0xee074d63:   pop    %edx
  0xee074d64:   mov    %eax,%ecx
  0xee074d66:   pop    %eax
  0xee074d67:   call   0xee074d71
  0xee074d6c:   jmp    0xee074e12
  0xee074d71:   lea    0x4(%esp),%eax
  0xee074d75:   mov    %esi,-0x20(%ebp)
  0xee074d78:   cmpl   $0x0,-0x8(%ebp)
  0xee074d7c:   je     0xee074d93
  0xee074d82:   push   $0xf78569d8
  0xee074d87:   call   0xee074d8c
  0xee074d8c:   pusha  
  0xee074d8d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074d92:   hlt    
  0xee074d93:   push   %eax
  0xee074d94:   push   %edx
  0xee074d95:   push   %ecx
  0xee074d96:   call   0xf704a910 = Thread::current()
  0xee074d9b:   pop    %ecx
  0xee074d9c:   pop    %edx
  0xee074d9d:   mov    %eax,%edi
  0xee074d9f:   pop    %eax
  0xee074da0:   push   %edi
  0xee074da1:   vzeroupper 
  0xee074da4:   mov    %ebp,0x230(%edi)
  0xee074daa:   mov    %eax,0x228(%edi)
  0xee074db0:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee074db5:   add    $0x4,%esp
  0xee074db8:   push   %eax
  0xee074db9:   push   %edx
  0xee074dba:   push   %ecx
  0xee074dbb:   call   0xf704a910 = Thread::current()
  0xee074dc0:   pop    %ecx
  0xee074dc1:   pop    %edx
  0xee074dc2:   cmp    %eax,%edi
  0xee074dc4:   je     0xee074ddb
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee074dca:   push   $0xf78b5a48
  0xee074dcf:   call   0xee074dd4
  0xee074dd4:   pusha  
  0xee074dd5:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074dda:   hlt    
  0xee074ddb:   pop    %eax
  0xee074ddc:   movl   $0x0,0x228(%edi)
  0xee074de6:   movl   $0x0,0x230(%edi)
  0xee074df0:   movl   $0x0,0x22c(%edi)
  0xee074dfa:   vzeroupper 
  0xee074dfd:   cmpl   $0x0,0x4(%edi)
  0xee074e01:   jne    0xee05bbe0
  0xee074e07:   mov    -0x20(%ebp),%esi
  0xee074e0a:   mov    -0x1c(%ebp),%edi
  0xee074e0d:   lea    0x0(%ebp,%edi,4),%edi
  0xee074e11:   ret    
  0xee074e12:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee074e14:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee074e17:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee074e19:   pop    %ebp
  0xee074e1a:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee074e1b:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee074e1d:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee074e20:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee074e21:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee074e27:   mov    -0x14(%ebp),%eax             ;; 2303:   __ bind(not_taken);
                                                    ;; 2304:   __ profile_not_taken_branch(rax);
  0xee074e2a:   test   %eax,%eax
  0xee074e2c:   je     0xee074e40
  0xee074e32:   addl   $0x1,0x10(%eax)
  0xee074e36:   sbbl   $0x0,0x10(%eax)
  0xee074e3a:   add    $0x14,%eax
  0xee074e3d:   mov    %eax,-0x14(%ebp)
  0xee074e40:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee074e44:   add    $0x3,%esi
  0xee074e47:   jmp    *-0x833caa0(,%ebx,4)
  0xee074e4e:   nop
  0xee074e4f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ifle  158 ifle  [0xee074e80, 0xee0751f0]  880 bytes

--------------------------------------------------------------------------------
  0xee074e80:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee074e81:   push   %eax                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee074e82:   push   %ebx
  0xee074e83:   push   %ecx
  0xee074e84:   push   %edx
  0xee074e85:   mov    -0x14(%ebp),%ecx
  0xee074e88:   test   %ecx,%ecx
  0xee074e8a:   je     0xee074ecb
  0xee074e90:   mov    -0xc(%ebp),%ebx
  0xee074e93:   movzwl 0x2(%ecx),%edx
  0xee074e97:   add    0x8(%ebx),%edx
  0xee074e9a:   lea    0x2c(%edx),%edx
  0xee074e9d:   cmp    %esi,%edx
  0xee074e9f:   je     0xee074ecb
  0xee074ea5:   push   %ecx
  0xee074ea6:   push   %esi
  0xee074ea7:   push   %ebx
  0xee074ea8:   cmpl   $0x0,-0x8(%ebp)
  0xee074eac:   je     0xee074ec3
  0xee074eb2:   push   $0xf785694c
  0xee074eb7:   call   0xee074ebc
  0xee074ebc:   pusha  
  0xee074ebd:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074ec2:   hlt    
  0xee074ec3:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee074ec8:   add    $0xc,%esp
  0xee074ecb:   pop    %edx
  0xee074ecc:   pop    %ecx
  0xee074ecd:   pop    %ebx
  0xee074ece:   pop    %eax
  0xee074ecf:   test   %eax,%eax                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2300:   __ testl(rax, rax);
  0xee074ed1:   jg     0xee0751c7                   ;; 2301:   __ jcc(j_not(cc), not_taken);
  0xee074ed7:   mov    -0xc(%ebp),%ecx              ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee074eda:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee074edd:   test   %eax,%eax
  0xee074edf:   je     0xee074ef7
  0xee074ee5:   mov    0x8(%eax),%ebx
  0xee074ee8:   add    $0x1,%ebx
  0xee074eeb:   sbb    $0x0,%ebx
  0xee074eee:   mov    %ebx,0x8(%eax)
  0xee074ef1:   add    0xc(%eax),%eax
  0xee074ef4:   mov    %eax,-0x14(%ebp)
  0xee074ef7:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee074efb:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee074efd:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee074f00:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee074f02:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee074f04:   jns    0xee07500c                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee074f0a:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee074f0d:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee074f0f:   jne    0xee074fd0                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee074f15:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee074f16:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee074f17:   call   0xee074f21                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee074f1c:   jmp    0xee074fc3
  0xee074f21:   push   %ecx
  0xee074f22:   lea    0x8(%esp),%eax
  0xee074f26:   mov    %esi,-0x20(%ebp)
  0xee074f29:   cmpl   $0x0,-0x8(%ebp)
  0xee074f2d:   je     0xee074f44
  0xee074f33:   push   $0xf78569d8
  0xee074f38:   call   0xee074f3d
  0xee074f3d:   pusha  
  0xee074f3e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074f43:   hlt    
  0xee074f44:   push   %eax
  0xee074f45:   push   %edx
  0xee074f46:   push   %ecx
  0xee074f47:   call   0xf704a910 = Thread::current()
  0xee074f4c:   pop    %ecx
  0xee074f4d:   pop    %edx
  0xee074f4e:   mov    %eax,%edi
  0xee074f50:   pop    %eax
  0xee074f51:   push   %edi
  0xee074f52:   vzeroupper 
  0xee074f55:   mov    %ebp,0x230(%edi)
  0xee074f5b:   mov    %eax,0x228(%edi)
  0xee074f61:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee074f66:   add    $0x8,%esp
  0xee074f69:   push   %eax
  0xee074f6a:   push   %edx
  0xee074f6b:   push   %ecx
  0xee074f6c:   call   0xf704a910 = Thread::current()
  0xee074f71:   pop    %ecx
  0xee074f72:   pop    %edx
  0xee074f73:   cmp    %eax,%edi
  0xee074f75:   je     0xee074f8c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee074f7b:   push   $0xf78b5a48
  0xee074f80:   call   0xee074f85
  0xee074f85:   pusha  
  0xee074f86:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee074f8b:   hlt    
  0xee074f8c:   pop    %eax
  0xee074f8d:   movl   $0x0,0x228(%edi)
  0xee074f97:   movl   $0x0,0x230(%edi)
  0xee074fa1:   movl   $0x0,0x22c(%edi)
  0xee074fab:   vzeroupper 
  0xee074fae:   cmpl   $0x0,0x4(%edi)
  0xee074fb2:   jne    0xee05bbe0
  0xee074fb8:   mov    -0x20(%ebp),%esi
  0xee074fbb:   mov    -0x1c(%ebp),%edi
  0xee074fbe:   lea    0x0(%ebp,%edi,4),%edi
  0xee074fc2:   ret    
  0xee074fc3:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee074fc4:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee074fc5:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee074fc8:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee074fca:   je     0xee07500c                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee074fd0:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee074fd3:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee074fd5:   je     0xee074ff7                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee074fd7:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee074fdd:   add    $0x2,%eax
  0xee074fe0:   mov    %eax,0xb8(%ebx)
  0xee074fe6:   and    0xcc(%ebx),%eax
  0xee074fec:   je     0xee075033
  0xee074ff2:   jmp    0xee07500c                   ;; 2212:       __ jmp(dispatch);
  0xee074ff7:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee074ffa:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee074ffd:   add    $0x2,%eax
  0xee075000:   mov    %eax,0xc(%ecx)
  0xee075003:   and    0x20(%ecx),%eax
  0xee075006:   je     0xee075033
  0xee07500c:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee07500f:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee075010:   push   %edx
  0xee075011:   push   %ecx
  0xee075012:   call   0xf704a910 = Thread::current()
  0xee075017:   pop    %ecx
  0xee075018:   pop    %edx
  0xee075019:   mov    %eax,%ecx
  0xee07501b:   pop    %eax
  0xee07501c:   testb  $0x1,0x288(%ecx)
  0xee075023:   je     0xee07502c
  0xee075025:   jmp    *-0x8341aa0(,%ebx,4)
  0xee07502c:   jmp    *-0x833caa0(,%ebx,4)
  0xee075033:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee075035:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee075037:   call   0xee075041                   ;; 2240:       __ call_VM(noreg,
  0xee07503c:   jmp    0xee0750e3
  0xee075041:   push   %edx
  0xee075042:   lea    0x8(%esp),%eax
  0xee075046:   mov    %esi,-0x20(%ebp)
  0xee075049:   cmpl   $0x0,-0x8(%ebp)
  0xee07504d:   je     0xee075064
  0xee075053:   push   $0xf78569d8
  0xee075058:   call   0xee07505d
  0xee07505d:   pusha  
  0xee07505e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075063:   hlt    
  0xee075064:   push   %eax
  0xee075065:   push   %edx
  0xee075066:   push   %ecx
  0xee075067:   call   0xf704a910 = Thread::current()
  0xee07506c:   pop    %ecx
  0xee07506d:   pop    %edx
  0xee07506e:   mov    %eax,%edi
  0xee075070:   pop    %eax
  0xee075071:   push   %edi
  0xee075072:   vzeroupper 
  0xee075075:   mov    %ebp,0x230(%edi)
  0xee07507b:   mov    %eax,0x228(%edi)
  0xee075081:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee075086:   add    $0x8,%esp
  0xee075089:   push   %eax
  0xee07508a:   push   %edx
  0xee07508b:   push   %ecx
  0xee07508c:   call   0xf704a910 = Thread::current()
  0xee075091:   pop    %ecx
  0xee075092:   pop    %edx
  0xee075093:   cmp    %eax,%edi
  0xee075095:   je     0xee0750ac
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07509b:   push   $0xf78b5a48
  0xee0750a0:   call   0xee0750a5
  0xee0750a5:   pusha  
  0xee0750a6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0750ab:   hlt    
  0xee0750ac:   pop    %eax
  0xee0750ad:   movl   $0x0,0x228(%edi)
  0xee0750b7:   movl   $0x0,0x230(%edi)
  0xee0750c1:   movl   $0x0,0x22c(%edi)
  0xee0750cb:   vzeroupper 
  0xee0750ce:   cmpl   $0x0,0x4(%edi)
  0xee0750d2:   jne    0xee05bbe0
  0xee0750d8:   mov    -0x20(%ebp),%esi
  0xee0750db:   mov    -0x1c(%ebp),%edi
  0xee0750de:   lea    0x0(%ebp,%edi,4),%edi
  0xee0750e2:   ret    
  0xee0750e3:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee0750e5:   je     0xee07500c                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee0750eb:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee0750f2:   jne    0xee07500c                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee0750f8:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee0750fa:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee0750fb:   push   %edx
  0xee0750fc:   push   %ecx
  0xee0750fd:   call   0xf704a910 = Thread::current()
  0xee075102:   pop    %ecx
  0xee075103:   pop    %edx
  0xee075104:   mov    %eax,%ecx
  0xee075106:   pop    %eax
  0xee075107:   call   0xee075111
  0xee07510c:   jmp    0xee0751b2
  0xee075111:   lea    0x4(%esp),%eax
  0xee075115:   mov    %esi,-0x20(%ebp)
  0xee075118:   cmpl   $0x0,-0x8(%ebp)
  0xee07511c:   je     0xee075133
  0xee075122:   push   $0xf78569d8
  0xee075127:   call   0xee07512c
  0xee07512c:   pusha  
  0xee07512d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075132:   hlt    
  0xee075133:   push   %eax
  0xee075134:   push   %edx
  0xee075135:   push   %ecx
  0xee075136:   call   0xf704a910 = Thread::current()
  0xee07513b:   pop    %ecx
  0xee07513c:   pop    %edx
  0xee07513d:   mov    %eax,%edi
  0xee07513f:   pop    %eax
  0xee075140:   push   %edi
  0xee075141:   vzeroupper 
  0xee075144:   mov    %ebp,0x230(%edi)
  0xee07514a:   mov    %eax,0x228(%edi)
  0xee075150:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee075155:   add    $0x4,%esp
  0xee075158:   push   %eax
  0xee075159:   push   %edx
  0xee07515a:   push   %ecx
  0xee07515b:   call   0xf704a910 = Thread::current()
  0xee075160:   pop    %ecx
  0xee075161:   pop    %edx
  0xee075162:   cmp    %eax,%edi
  0xee075164:   je     0xee07517b
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07516a:   push   $0xf78b5a48
  0xee07516f:   call   0xee075174
  0xee075174:   pusha  
  0xee075175:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07517a:   hlt    
  0xee07517b:   pop    %eax
  0xee07517c:   movl   $0x0,0x228(%edi)
  0xee075186:   movl   $0x0,0x230(%edi)
  0xee075190:   movl   $0x0,0x22c(%edi)
  0xee07519a:   vzeroupper 
  0xee07519d:   cmpl   $0x0,0x4(%edi)
  0xee0751a1:   jne    0xee05bbe0
  0xee0751a7:   mov    -0x20(%ebp),%esi
  0xee0751aa:   mov    -0x1c(%ebp),%edi
  0xee0751ad:   lea    0x0(%ebp,%edi,4),%edi
  0xee0751b1:   ret    
  0xee0751b2:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee0751b4:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee0751b7:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee0751b9:   pop    %ebp
  0xee0751ba:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee0751bb:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee0751bd:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee0751c0:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee0751c1:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee0751c7:   mov    -0x14(%ebp),%eax             ;; 2303:   __ bind(not_taken);
                                                    ;; 2304:   __ profile_not_taken_branch(rax);
  0xee0751ca:   test   %eax,%eax
  0xee0751cc:   je     0xee0751e0
  0xee0751d2:   addl   $0x1,0x10(%eax)
  0xee0751d6:   sbbl   $0x0,0x10(%eax)
  0xee0751da:   add    $0x14,%eax
  0xee0751dd:   mov    %eax,-0x14(%ebp)
  0xee0751e0:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0751e4:   add    $0x3,%esi
  0xee0751e7:   jmp    *-0x833caa0(,%ebx,4)
  0xee0751ee:   nop
  0xee0751ef:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
if_icmpeq  159 if_icmpeq  [0xee075220, 0xee075590]  880 bytes

--------------------------------------------------------------------------------
  0xee075220:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee075221:   push   %eax                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee075222:   push   %ebx
  0xee075223:   push   %ecx
  0xee075224:   push   %edx
  0xee075225:   mov    -0x14(%ebp),%ecx
  0xee075228:   test   %ecx,%ecx
  0xee07522a:   je     0xee07526b
  0xee075230:   mov    -0xc(%ebp),%ebx
  0xee075233:   movzwl 0x2(%ecx),%edx
  0xee075237:   add    0x8(%ebx),%edx
  0xee07523a:   lea    0x2c(%edx),%edx
  0xee07523d:   cmp    %esi,%edx
  0xee07523f:   je     0xee07526b
  0xee075245:   push   %ecx
  0xee075246:   push   %esi
  0xee075247:   push   %ebx
  0xee075248:   cmpl   $0x0,-0x8(%ebp)
  0xee07524c:   je     0xee075263
  0xee075252:   push   $0xf785694c
  0xee075257:   call   0xee07525c
  0xee07525c:   pusha  
  0xee07525d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075262:   hlt    
  0xee075263:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee075268:   add    $0xc,%esp
  0xee07526b:   pop    %edx
  0xee07526c:   pop    %ecx
  0xee07526d:   pop    %ebx
  0xee07526e:   pop    %eax
  0xee07526f:   pop    %edx                         ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2311:   __ pop_i(rdx);
  0xee075270:   cmp    %eax,%edx                    ;; 2312:   __ cmpl(rdx, rax);
  0xee075272:   jne    0xee075568                   ;; 2313:   __ jcc(j_not(cc), not_taken);
  0xee075278:   mov    -0xc(%ebp),%ecx              ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee07527b:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee07527e:   test   %eax,%eax
  0xee075280:   je     0xee075298
  0xee075286:   mov    0x8(%eax),%ebx
  0xee075289:   add    $0x1,%ebx
  0xee07528c:   sbb    $0x0,%ebx
  0xee07528f:   mov    %ebx,0x8(%eax)
  0xee075292:   add    0xc(%eax),%eax
  0xee075295:   mov    %eax,-0x14(%ebp)
  0xee075298:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee07529c:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee07529e:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee0752a1:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee0752a3:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee0752a5:   jns    0xee0753ad                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee0752ab:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee0752ae:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee0752b0:   jne    0xee075371                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee0752b6:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee0752b7:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee0752b8:   call   0xee0752c2                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee0752bd:   jmp    0xee075364
  0xee0752c2:   push   %ecx
  0xee0752c3:   lea    0x8(%esp),%eax
  0xee0752c7:   mov    %esi,-0x20(%ebp)
  0xee0752ca:   cmpl   $0x0,-0x8(%ebp)
  0xee0752ce:   je     0xee0752e5
  0xee0752d4:   push   $0xf78569d8
  0xee0752d9:   call   0xee0752de
  0xee0752de:   pusha  
  0xee0752df:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0752e4:   hlt    
  0xee0752e5:   push   %eax
  0xee0752e6:   push   %edx
  0xee0752e7:   push   %ecx
  0xee0752e8:   call   0xf704a910 = Thread::current()
  0xee0752ed:   pop    %ecx
  0xee0752ee:   pop    %edx
  0xee0752ef:   mov    %eax,%edi
  0xee0752f1:   pop    %eax
  0xee0752f2:   push   %edi
  0xee0752f3:   vzeroupper 
  0xee0752f6:   mov    %ebp,0x230(%edi)
  0xee0752fc:   mov    %eax,0x228(%edi)
  0xee075302:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee075307:   add    $0x8,%esp
  0xee07530a:   push   %eax
  0xee07530b:   push   %edx
  0xee07530c:   push   %ecx
  0xee07530d:   call   0xf704a910 = Thread::current()
  0xee075312:   pop    %ecx
  0xee075313:   pop    %edx
  0xee075314:   cmp    %eax,%edi
  0xee075316:   je     0xee07532d
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07531c:   push   $0xf78b5a48
  0xee075321:   call   0xee075326
  0xee075326:   pusha  
  0xee075327:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07532c:   hlt    
  0xee07532d:   pop    %eax
  0xee07532e:   movl   $0x0,0x228(%edi)
  0xee075338:   movl   $0x0,0x230(%edi)
  0xee075342:   movl   $0x0,0x22c(%edi)
  0xee07534c:   vzeroupper 
  0xee07534f:   cmpl   $0x0,0x4(%edi)
  0xee075353:   jne    0xee05bbe0
  0xee075359:   mov    -0x20(%ebp),%esi
  0xee07535c:   mov    -0x1c(%ebp),%edi
  0xee07535f:   lea    0x0(%ebp,%edi,4),%edi
  0xee075363:   ret    
  0xee075364:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee075365:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee075366:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee075369:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee07536b:   je     0xee0753ad                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee075371:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee075374:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee075376:   je     0xee075398                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee075378:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee07537e:   add    $0x2,%eax
  0xee075381:   mov    %eax,0xb8(%ebx)
  0xee075387:   and    0xcc(%ebx),%eax
  0xee07538d:   je     0xee0753d4
  0xee075393:   jmp    0xee0753ad                   ;; 2212:       __ jmp(dispatch);
  0xee075398:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee07539b:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee07539e:   add    $0x2,%eax
  0xee0753a1:   mov    %eax,0xc(%ecx)
  0xee0753a4:   and    0x20(%ecx),%eax
  0xee0753a7:   je     0xee0753d4
  0xee0753ad:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee0753b0:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee0753b1:   push   %edx
  0xee0753b2:   push   %ecx
  0xee0753b3:   call   0xf704a910 = Thread::current()
  0xee0753b8:   pop    %ecx
  0xee0753b9:   pop    %edx
  0xee0753ba:   mov    %eax,%ecx
  0xee0753bc:   pop    %eax
  0xee0753bd:   testb  $0x1,0x288(%ecx)
  0xee0753c4:   je     0xee0753cd
  0xee0753c6:   jmp    *-0x8341aa0(,%ebx,4)
  0xee0753cd:   jmp    *-0x833caa0(,%ebx,4)
  0xee0753d4:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee0753d6:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee0753d8:   call   0xee0753e2                   ;; 2240:       __ call_VM(noreg,
  0xee0753dd:   jmp    0xee075484
  0xee0753e2:   push   %edx
  0xee0753e3:   lea    0x8(%esp),%eax
  0xee0753e7:   mov    %esi,-0x20(%ebp)
  0xee0753ea:   cmpl   $0x0,-0x8(%ebp)
  0xee0753ee:   je     0xee075405
  0xee0753f4:   push   $0xf78569d8
  0xee0753f9:   call   0xee0753fe
  0xee0753fe:   pusha  
  0xee0753ff:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075404:   hlt    
  0xee075405:   push   %eax
  0xee075406:   push   %edx
  0xee075407:   push   %ecx
  0xee075408:   call   0xf704a910 = Thread::current()
  0xee07540d:   pop    %ecx
  0xee07540e:   pop    %edx
  0xee07540f:   mov    %eax,%edi
  0xee075411:   pop    %eax
  0xee075412:   push   %edi
  0xee075413:   vzeroupper 
  0xee075416:   mov    %ebp,0x230(%edi)
  0xee07541c:   mov    %eax,0x228(%edi)
  0xee075422:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee075427:   add    $0x8,%esp
  0xee07542a:   push   %eax
  0xee07542b:   push   %edx
  0xee07542c:   push   %ecx
  0xee07542d:   call   0xf704a910 = Thread::current()
  0xee075432:   pop    %ecx
  0xee075433:   pop    %edx
  0xee075434:   cmp    %eax,%edi
  0xee075436:   je     0xee07544d
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07543c:   push   $0xf78b5a48
  0xee075441:   call   0xee075446
  0xee075446:   pusha  
  0xee075447:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07544c:   hlt    
  0xee07544d:   pop    %eax
  0xee07544e:   movl   $0x0,0x228(%edi)
  0xee075458:   movl   $0x0,0x230(%edi)
  0xee075462:   movl   $0x0,0x22c(%edi)
  0xee07546c:   vzeroupper 
  0xee07546f:   cmpl   $0x0,0x4(%edi)
  0xee075473:   jne    0xee05bbe0
  0xee075479:   mov    -0x20(%ebp),%esi
  0xee07547c:   mov    -0x1c(%ebp),%edi
  0xee07547f:   lea    0x0(%ebp,%edi,4),%edi
  0xee075483:   ret    
  0xee075484:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee075486:   je     0xee0753ad                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee07548c:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee075493:   jne    0xee0753ad                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee075499:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee07549b:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee07549c:   push   %edx
  0xee07549d:   push   %ecx
  0xee07549e:   call   0xf704a910 = Thread::current()
  0xee0754a3:   pop    %ecx
  0xee0754a4:   pop    %edx
  0xee0754a5:   mov    %eax,%ecx
  0xee0754a7:   pop    %eax
  0xee0754a8:   call   0xee0754b2
  0xee0754ad:   jmp    0xee075553
  0xee0754b2:   lea    0x4(%esp),%eax
  0xee0754b6:   mov    %esi,-0x20(%ebp)
  0xee0754b9:   cmpl   $0x0,-0x8(%ebp)
  0xee0754bd:   je     0xee0754d4
  0xee0754c3:   push   $0xf78569d8
  0xee0754c8:   call   0xee0754cd
  0xee0754cd:   pusha  
  0xee0754ce:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0754d3:   hlt    
  0xee0754d4:   push   %eax
  0xee0754d5:   push   %edx
  0xee0754d6:   push   %ecx
  0xee0754d7:   call   0xf704a910 = Thread::current()
  0xee0754dc:   pop    %ecx
  0xee0754dd:   pop    %edx
  0xee0754de:   mov    %eax,%edi
  0xee0754e0:   pop    %eax
  0xee0754e1:   push   %edi
  0xee0754e2:   vzeroupper 
  0xee0754e5:   mov    %ebp,0x230(%edi)
  0xee0754eb:   mov    %eax,0x228(%edi)
  0xee0754f1:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee0754f6:   add    $0x4,%esp
  0xee0754f9:   push   %eax
  0xee0754fa:   push   %edx
  0xee0754fb:   push   %ecx
  0xee0754fc:   call   0xf704a910 = Thread::current()
  0xee075501:   pop    %ecx
  0xee075502:   pop    %edx
  0xee075503:   cmp    %eax,%edi
  0xee075505:   je     0xee07551c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07550b:   push   $0xf78b5a48
  0xee075510:   call   0xee075515
  0xee075515:   pusha  
  0xee075516:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07551b:   hlt    
  0xee07551c:   pop    %eax
  0xee07551d:   movl   $0x0,0x228(%edi)
  0xee075527:   movl   $0x0,0x230(%edi)
  0xee075531:   movl   $0x0,0x22c(%edi)
  0xee07553b:   vzeroupper 
  0xee07553e:   cmpl   $0x0,0x4(%edi)
  0xee075542:   jne    0xee05bbe0
  0xee075548:   mov    -0x20(%ebp),%esi
  0xee07554b:   mov    -0x1c(%ebp),%edi
  0xee07554e:   lea    0x0(%ebp,%edi,4),%edi
  0xee075552:   ret    
  0xee075553:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee075555:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee075558:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee07555a:   pop    %ebp
  0xee07555b:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee07555c:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee07555e:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee075561:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee075562:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee075568:   mov    -0x14(%ebp),%eax             ;; 2315:   __ bind(not_taken);
                                                    ;; 2316:   __ profile_not_taken_branch(rax);
  0xee07556b:   test   %eax,%eax
  0xee07556d:   je     0xee075581
  0xee075573:   addl   $0x1,0x10(%eax)
  0xee075577:   sbbl   $0x0,0x10(%eax)
  0xee07557b:   add    $0x14,%eax
  0xee07557e:   mov    %eax,-0x14(%ebp)
  0xee075581:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee075585:   add    $0x3,%esi
  0xee075588:   jmp    *-0x833caa0(,%ebx,4)
  0xee07558f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
if_icmpne  160 if_icmpne  [0xee0755c0, 0xee075930]  880 bytes

--------------------------------------------------------------------------------
  0xee0755c0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee0755c1:   push   %eax                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee0755c2:   push   %ebx
  0xee0755c3:   push   %ecx
  0xee0755c4:   push   %edx
  0xee0755c5:   mov    -0x14(%ebp),%ecx
  0xee0755c8:   test   %ecx,%ecx
  0xee0755ca:   je     0xee07560b
  0xee0755d0:   mov    -0xc(%ebp),%ebx
  0xee0755d3:   movzwl 0x2(%ecx),%edx
  0xee0755d7:   add    0x8(%ebx),%edx
  0xee0755da:   lea    0x2c(%edx),%edx
  0xee0755dd:   cmp    %esi,%edx
  0xee0755df:   je     0xee07560b
  0xee0755e5:   push   %ecx
  0xee0755e6:   push   %esi
  0xee0755e7:   push   %ebx
  0xee0755e8:   cmpl   $0x0,-0x8(%ebp)
  0xee0755ec:   je     0xee075603
  0xee0755f2:   push   $0xf785694c
  0xee0755f7:   call   0xee0755fc
  0xee0755fc:   pusha  
  0xee0755fd:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075602:   hlt    
  0xee075603:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee075608:   add    $0xc,%esp
  0xee07560b:   pop    %edx
  0xee07560c:   pop    %ecx
  0xee07560d:   pop    %ebx
  0xee07560e:   pop    %eax
  0xee07560f:   pop    %edx                         ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2311:   __ pop_i(rdx);
  0xee075610:   cmp    %eax,%edx                    ;; 2312:   __ cmpl(rdx, rax);
  0xee075612:   je     0xee075908                   ;; 2313:   __ jcc(j_not(cc), not_taken);
  0xee075618:   mov    -0xc(%ebp),%ecx              ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee07561b:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee07561e:   test   %eax,%eax
  0xee075620:   je     0xee075638
  0xee075626:   mov    0x8(%eax),%ebx
  0xee075629:   add    $0x1,%ebx
  0xee07562c:   sbb    $0x0,%ebx
  0xee07562f:   mov    %ebx,0x8(%eax)
  0xee075632:   add    0xc(%eax),%eax
  0xee075635:   mov    %eax,-0x14(%ebp)
  0xee075638:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee07563c:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee07563e:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee075641:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee075643:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee075645:   jns    0xee07574d                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee07564b:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee07564e:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee075650:   jne    0xee075711                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee075656:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee075657:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee075658:   call   0xee075662                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee07565d:   jmp    0xee075704
  0xee075662:   push   %ecx
  0xee075663:   lea    0x8(%esp),%eax
  0xee075667:   mov    %esi,-0x20(%ebp)
  0xee07566a:   cmpl   $0x0,-0x8(%ebp)
  0xee07566e:   je     0xee075685
  0xee075674:   push   $0xf78569d8
  0xee075679:   call   0xee07567e
  0xee07567e:   pusha  
  0xee07567f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075684:   hlt    
  0xee075685:   push   %eax
  0xee075686:   push   %edx
  0xee075687:   push   %ecx
  0xee075688:   call   0xf704a910 = Thread::current()
  0xee07568d:   pop    %ecx
  0xee07568e:   pop    %edx
  0xee07568f:   mov    %eax,%edi
  0xee075691:   pop    %eax
  0xee075692:   push   %edi
  0xee075693:   vzeroupper 
  0xee075696:   mov    %ebp,0x230(%edi)
  0xee07569c:   mov    %eax,0x228(%edi)
  0xee0756a2:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee0756a7:   add    $0x8,%esp
  0xee0756aa:   push   %eax
  0xee0756ab:   push   %edx
  0xee0756ac:   push   %ecx
  0xee0756ad:   call   0xf704a910 = Thread::current()
  0xee0756b2:   pop    %ecx
  0xee0756b3:   pop    %edx
  0xee0756b4:   cmp    %eax,%edi
  0xee0756b6:   je     0xee0756cd
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee0756bc:   push   $0xf78b5a48
  0xee0756c1:   call   0xee0756c6
  0xee0756c6:   pusha  
  0xee0756c7:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0756cc:   hlt    
  0xee0756cd:   pop    %eax
  0xee0756ce:   movl   $0x0,0x228(%edi)
  0xee0756d8:   movl   $0x0,0x230(%edi)
  0xee0756e2:   movl   $0x0,0x22c(%edi)
  0xee0756ec:   vzeroupper 
  0xee0756ef:   cmpl   $0x0,0x4(%edi)
  0xee0756f3:   jne    0xee05bbe0
  0xee0756f9:   mov    -0x20(%ebp),%esi
  0xee0756fc:   mov    -0x1c(%ebp),%edi
  0xee0756ff:   lea    0x0(%ebp,%edi,4),%edi
  0xee075703:   ret    
  0xee075704:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee075705:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee075706:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee075709:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee07570b:   je     0xee07574d                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee075711:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee075714:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee075716:   je     0xee075738                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee075718:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee07571e:   add    $0x2,%eax
  0xee075721:   mov    %eax,0xb8(%ebx)
  0xee075727:   and    0xcc(%ebx),%eax
  0xee07572d:   je     0xee075774
  0xee075733:   jmp    0xee07574d                   ;; 2212:       __ jmp(dispatch);
  0xee075738:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee07573b:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee07573e:   add    $0x2,%eax
  0xee075741:   mov    %eax,0xc(%ecx)
  0xee075744:   and    0x20(%ecx),%eax
  0xee075747:   je     0xee075774
  0xee07574d:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee075750:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee075751:   push   %edx
  0xee075752:   push   %ecx
  0xee075753:   call   0xf704a910 = Thread::current()
  0xee075758:   pop    %ecx
  0xee075759:   pop    %edx
  0xee07575a:   mov    %eax,%ecx
  0xee07575c:   pop    %eax
  0xee07575d:   testb  $0x1,0x288(%ecx)
  0xee075764:   je     0xee07576d
  0xee075766:   jmp    *-0x8341aa0(,%ebx,4)
  0xee07576d:   jmp    *-0x833caa0(,%ebx,4)
  0xee075774:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee075776:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee075778:   call   0xee075782                   ;; 2240:       __ call_VM(noreg,
  0xee07577d:   jmp    0xee075824
  0xee075782:   push   %edx
  0xee075783:   lea    0x8(%esp),%eax
  0xee075787:   mov    %esi,-0x20(%ebp)
  0xee07578a:   cmpl   $0x0,-0x8(%ebp)
  0xee07578e:   je     0xee0757a5
  0xee075794:   push   $0xf78569d8
  0xee075799:   call   0xee07579e
  0xee07579e:   pusha  
  0xee07579f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0757a4:   hlt    
  0xee0757a5:   push   %eax
  0xee0757a6:   push   %edx
  0xee0757a7:   push   %ecx
  0xee0757a8:   call   0xf704a910 = Thread::current()
  0xee0757ad:   pop    %ecx
  0xee0757ae:   pop    %edx
  0xee0757af:   mov    %eax,%edi
  0xee0757b1:   pop    %eax
  0xee0757b2:   push   %edi
  0xee0757b3:   vzeroupper 
  0xee0757b6:   mov    %ebp,0x230(%edi)
  0xee0757bc:   mov    %eax,0x228(%edi)
  0xee0757c2:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee0757c7:   add    $0x8,%esp
  0xee0757ca:   push   %eax
  0xee0757cb:   push   %edx
  0xee0757cc:   push   %ecx
  0xee0757cd:   call   0xf704a910 = Thread::current()
  0xee0757d2:   pop    %ecx
  0xee0757d3:   pop    %edx
  0xee0757d4:   cmp    %eax,%edi
  0xee0757d6:   je     0xee0757ed
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee0757dc:   push   $0xf78b5a48
  0xee0757e1:   call   0xee0757e6
  0xee0757e6:   pusha  
  0xee0757e7:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0757ec:   hlt    
  0xee0757ed:   pop    %eax
  0xee0757ee:   movl   $0x0,0x228(%edi)
  0xee0757f8:   movl   $0x0,0x230(%edi)
  0xee075802:   movl   $0x0,0x22c(%edi)
  0xee07580c:   vzeroupper 
  0xee07580f:   cmpl   $0x0,0x4(%edi)
  0xee075813:   jne    0xee05bbe0
  0xee075819:   mov    -0x20(%ebp),%esi
  0xee07581c:   mov    -0x1c(%ebp),%edi
  0xee07581f:   lea    0x0(%ebp,%edi,4),%edi
  0xee075823:   ret    
  0xee075824:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee075826:   je     0xee07574d                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee07582c:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee075833:   jne    0xee07574d                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee075839:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee07583b:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee07583c:   push   %edx
  0xee07583d:   push   %ecx
  0xee07583e:   call   0xf704a910 = Thread::current()
  0xee075843:   pop    %ecx
  0xee075844:   pop    %edx
  0xee075845:   mov    %eax,%ecx
  0xee075847:   pop    %eax
  0xee075848:   call   0xee075852
  0xee07584d:   jmp    0xee0758f3
  0xee075852:   lea    0x4(%esp),%eax
  0xee075856:   mov    %esi,-0x20(%ebp)
  0xee075859:   cmpl   $0x0,-0x8(%ebp)
  0xee07585d:   je     0xee075874
  0xee075863:   push   $0xf78569d8
  0xee075868:   call   0xee07586d
  0xee07586d:   pusha  
  0xee07586e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075873:   hlt    
  0xee075874:   push   %eax
  0xee075875:   push   %edx
  0xee075876:   push   %ecx
  0xee075877:   call   0xf704a910 = Thread::current()
  0xee07587c:   pop    %ecx
  0xee07587d:   pop    %edx
  0xee07587e:   mov    %eax,%edi
  0xee075880:   pop    %eax
  0xee075881:   push   %edi
  0xee075882:   vzeroupper 
  0xee075885:   mov    %ebp,0x230(%edi)
  0xee07588b:   mov    %eax,0x228(%edi)
  0xee075891:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee075896:   add    $0x4,%esp
  0xee075899:   push   %eax
  0xee07589a:   push   %edx
  0xee07589b:   push   %ecx
  0xee07589c:   call   0xf704a910 = Thread::current()
  0xee0758a1:   pop    %ecx
  0xee0758a2:   pop    %edx
  0xee0758a3:   cmp    %eax,%edi
  0xee0758a5:   je     0xee0758bc
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee0758ab:   push   $0xf78b5a48
  0xee0758b0:   call   0xee0758b5
  0xee0758b5:   pusha  
  0xee0758b6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0758bb:   hlt    
  0xee0758bc:   pop    %eax
  0xee0758bd:   movl   $0x0,0x228(%edi)
  0xee0758c7:   movl   $0x0,0x230(%edi)
  0xee0758d1:   movl   $0x0,0x22c(%edi)
  0xee0758db:   vzeroupper 
  0xee0758de:   cmpl   $0x0,0x4(%edi)
  0xee0758e2:   jne    0xee05bbe0
  0xee0758e8:   mov    -0x20(%ebp),%esi
  0xee0758eb:   mov    -0x1c(%ebp),%edi
  0xee0758ee:   lea    0x0(%ebp,%edi,4),%edi
  0xee0758f2:   ret    
  0xee0758f3:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee0758f5:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee0758f8:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee0758fa:   pop    %ebp
  0xee0758fb:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee0758fc:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee0758fe:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee075901:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee075902:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee075908:   mov    -0x14(%ebp),%eax             ;; 2315:   __ bind(not_taken);
                                                    ;; 2316:   __ profile_not_taken_branch(rax);
  0xee07590b:   test   %eax,%eax
  0xee07590d:   je     0xee075921
  0xee075913:   addl   $0x1,0x10(%eax)
  0xee075917:   sbbl   $0x0,0x10(%eax)
  0xee07591b:   add    $0x14,%eax
  0xee07591e:   mov    %eax,-0x14(%ebp)
  0xee075921:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee075925:   add    $0x3,%esi
  0xee075928:   jmp    *-0x833caa0(,%ebx,4)
  0xee07592f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
if_icmplt  161 if_icmplt  [0xee075960, 0xee075cd0]  880 bytes

--------------------------------------------------------------------------------
  0xee075960:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee075961:   push   %eax                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee075962:   push   %ebx
  0xee075963:   push   %ecx
  0xee075964:   push   %edx
  0xee075965:   mov    -0x14(%ebp),%ecx
  0xee075968:   test   %ecx,%ecx
  0xee07596a:   je     0xee0759ab
  0xee075970:   mov    -0xc(%ebp),%ebx
  0xee075973:   movzwl 0x2(%ecx),%edx
  0xee075977:   add    0x8(%ebx),%edx
  0xee07597a:   lea    0x2c(%edx),%edx
  0xee07597d:   cmp    %esi,%edx
  0xee07597f:   je     0xee0759ab
  0xee075985:   push   %ecx
  0xee075986:   push   %esi
  0xee075987:   push   %ebx
  0xee075988:   cmpl   $0x0,-0x8(%ebp)
  0xee07598c:   je     0xee0759a3
  0xee075992:   push   $0xf785694c
  0xee075997:   call   0xee07599c
  0xee07599c:   pusha  
  0xee07599d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0759a2:   hlt    
  0xee0759a3:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee0759a8:   add    $0xc,%esp
  0xee0759ab:   pop    %edx
  0xee0759ac:   pop    %ecx
  0xee0759ad:   pop    %ebx
  0xee0759ae:   pop    %eax
  0xee0759af:   pop    %edx                         ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2311:   __ pop_i(rdx);
  0xee0759b0:   cmp    %eax,%edx                    ;; 2312:   __ cmpl(rdx, rax);
  0xee0759b2:   jge    0xee075ca8                   ;; 2313:   __ jcc(j_not(cc), not_taken);
  0xee0759b8:   mov    -0xc(%ebp),%ecx              ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee0759bb:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee0759be:   test   %eax,%eax
  0xee0759c0:   je     0xee0759d8
  0xee0759c6:   mov    0x8(%eax),%ebx
  0xee0759c9:   add    $0x1,%ebx
  0xee0759cc:   sbb    $0x0,%ebx
  0xee0759cf:   mov    %ebx,0x8(%eax)
  0xee0759d2:   add    0xc(%eax),%eax
  0xee0759d5:   mov    %eax,-0x14(%ebp)
  0xee0759d8:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee0759dc:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee0759de:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee0759e1:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee0759e3:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee0759e5:   jns    0xee075aed                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee0759eb:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee0759ee:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee0759f0:   jne    0xee075ab1                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee0759f6:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee0759f7:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee0759f8:   call   0xee075a02                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee0759fd:   jmp    0xee075aa4
  0xee075a02:   push   %ecx
  0xee075a03:   lea    0x8(%esp),%eax
  0xee075a07:   mov    %esi,-0x20(%ebp)
  0xee075a0a:   cmpl   $0x0,-0x8(%ebp)
  0xee075a0e:   je     0xee075a25
  0xee075a14:   push   $0xf78569d8
  0xee075a19:   call   0xee075a1e
  0xee075a1e:   pusha  
  0xee075a1f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075a24:   hlt    
  0xee075a25:   push   %eax
  0xee075a26:   push   %edx
  0xee075a27:   push   %ecx
  0xee075a28:   call   0xf704a910 = Thread::current()
  0xee075a2d:   pop    %ecx
  0xee075a2e:   pop    %edx
  0xee075a2f:   mov    %eax,%edi
  0xee075a31:   pop    %eax
  0xee075a32:   push   %edi
  0xee075a33:   vzeroupper 
  0xee075a36:   mov    %ebp,0x230(%edi)
  0xee075a3c:   mov    %eax,0x228(%edi)
  0xee075a42:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee075a47:   add    $0x8,%esp
  0xee075a4a:   push   %eax
  0xee075a4b:   push   %edx
  0xee075a4c:   push   %ecx
  0xee075a4d:   call   0xf704a910 = Thread::current()
  0xee075a52:   pop    %ecx
  0xee075a53:   pop    %edx
  0xee075a54:   cmp    %eax,%edi
  0xee075a56:   je     0xee075a6d
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee075a5c:   push   $0xf78b5a48
  0xee075a61:   call   0xee075a66
  0xee075a66:   pusha  
  0xee075a67:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075a6c:   hlt    
  0xee075a6d:   pop    %eax
  0xee075a6e:   movl   $0x0,0x228(%edi)
  0xee075a78:   movl   $0x0,0x230(%edi)
  0xee075a82:   movl   $0x0,0x22c(%edi)
  0xee075a8c:   vzeroupper 
  0xee075a8f:   cmpl   $0x0,0x4(%edi)
  0xee075a93:   jne    0xee05bbe0
  0xee075a99:   mov    -0x20(%ebp),%esi
  0xee075a9c:   mov    -0x1c(%ebp),%edi
  0xee075a9f:   lea    0x0(%ebp,%edi,4),%edi
  0xee075aa3:   ret    
  0xee075aa4:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee075aa5:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee075aa6:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee075aa9:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee075aab:   je     0xee075aed                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee075ab1:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee075ab4:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee075ab6:   je     0xee075ad8                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee075ab8:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee075abe:   add    $0x2,%eax
  0xee075ac1:   mov    %eax,0xb8(%ebx)
  0xee075ac7:   and    0xcc(%ebx),%eax
  0xee075acd:   je     0xee075b14
  0xee075ad3:   jmp    0xee075aed                   ;; 2212:       __ jmp(dispatch);
  0xee075ad8:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee075adb:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee075ade:   add    $0x2,%eax
  0xee075ae1:   mov    %eax,0xc(%ecx)
  0xee075ae4:   and    0x20(%ecx),%eax
  0xee075ae7:   je     0xee075b14
  0xee075aed:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee075af0:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee075af1:   push   %edx
  0xee075af2:   push   %ecx
  0xee075af3:   call   0xf704a910 = Thread::current()
  0xee075af8:   pop    %ecx
  0xee075af9:   pop    %edx
  0xee075afa:   mov    %eax,%ecx
  0xee075afc:   pop    %eax
  0xee075afd:   testb  $0x1,0x288(%ecx)
  0xee075b04:   je     0xee075b0d
  0xee075b06:   jmp    *-0x8341aa0(,%ebx,4)
  0xee075b0d:   jmp    *-0x833caa0(,%ebx,4)
  0xee075b14:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee075b16:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee075b18:   call   0xee075b22                   ;; 2240:       __ call_VM(noreg,
  0xee075b1d:   jmp    0xee075bc4
  0xee075b22:   push   %edx
  0xee075b23:   lea    0x8(%esp),%eax
  0xee075b27:   mov    %esi,-0x20(%ebp)
  0xee075b2a:   cmpl   $0x0,-0x8(%ebp)
  0xee075b2e:   je     0xee075b45
  0xee075b34:   push   $0xf78569d8
  0xee075b39:   call   0xee075b3e
  0xee075b3e:   pusha  
  0xee075b3f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075b44:   hlt    
  0xee075b45:   push   %eax
  0xee075b46:   push   %edx
  0xee075b47:   push   %ecx
  0xee075b48:   call   0xf704a910 = Thread::current()
  0xee075b4d:   pop    %ecx
  0xee075b4e:   pop    %edx
  0xee075b4f:   mov    %eax,%edi
  0xee075b51:   pop    %eax
  0xee075b52:   push   %edi
  0xee075b53:   vzeroupper 
  0xee075b56:   mov    %ebp,0x230(%edi)
  0xee075b5c:   mov    %eax,0x228(%edi)
  0xee075b62:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee075b67:   add    $0x8,%esp
  0xee075b6a:   push   %eax
  0xee075b6b:   push   %edx
  0xee075b6c:   push   %ecx
  0xee075b6d:   call   0xf704a910 = Thread::current()
  0xee075b72:   pop    %ecx
  0xee075b73:   pop    %edx
  0xee075b74:   cmp    %eax,%edi
  0xee075b76:   je     0xee075b8d
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee075b7c:   push   $0xf78b5a48
  0xee075b81:   call   0xee075b86
  0xee075b86:   pusha  
  0xee075b87:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075b8c:   hlt    
  0xee075b8d:   pop    %eax
  0xee075b8e:   movl   $0x0,0x228(%edi)
  0xee075b98:   movl   $0x0,0x230(%edi)
  0xee075ba2:   movl   $0x0,0x22c(%edi)
  0xee075bac:   vzeroupper 
  0xee075baf:   cmpl   $0x0,0x4(%edi)
  0xee075bb3:   jne    0xee05bbe0
  0xee075bb9:   mov    -0x20(%ebp),%esi
  0xee075bbc:   mov    -0x1c(%ebp),%edi
  0xee075bbf:   lea    0x0(%ebp,%edi,4),%edi
  0xee075bc3:   ret    
  0xee075bc4:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee075bc6:   je     0xee075aed                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee075bcc:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee075bd3:   jne    0xee075aed                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee075bd9:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee075bdb:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee075bdc:   push   %edx
  0xee075bdd:   push   %ecx
  0xee075bde:   call   0xf704a910 = Thread::current()
  0xee075be3:   pop    %ecx
  0xee075be4:   pop    %edx
  0xee075be5:   mov    %eax,%ecx
  0xee075be7:   pop    %eax
  0xee075be8:   call   0xee075bf2
  0xee075bed:   jmp    0xee075c93
  0xee075bf2:   lea    0x4(%esp),%eax
  0xee075bf6:   mov    %esi,-0x20(%ebp)
  0xee075bf9:   cmpl   $0x0,-0x8(%ebp)
  0xee075bfd:   je     0xee075c14
  0xee075c03:   push   $0xf78569d8
  0xee075c08:   call   0xee075c0d
  0xee075c0d:   pusha  
  0xee075c0e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075c13:   hlt    
  0xee075c14:   push   %eax
  0xee075c15:   push   %edx
  0xee075c16:   push   %ecx
  0xee075c17:   call   0xf704a910 = Thread::current()
  0xee075c1c:   pop    %ecx
  0xee075c1d:   pop    %edx
  0xee075c1e:   mov    %eax,%edi
  0xee075c20:   pop    %eax
  0xee075c21:   push   %edi
  0xee075c22:   vzeroupper 
  0xee075c25:   mov    %ebp,0x230(%edi)
  0xee075c2b:   mov    %eax,0x228(%edi)
  0xee075c31:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee075c36:   add    $0x4,%esp
  0xee075c39:   push   %eax
  0xee075c3a:   push   %edx
  0xee075c3b:   push   %ecx
  0xee075c3c:   call   0xf704a910 = Thread::current()
  0xee075c41:   pop    %ecx
  0xee075c42:   pop    %edx
  0xee075c43:   cmp    %eax,%edi
  0xee075c45:   je     0xee075c5c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee075c4b:   push   $0xf78b5a48
  0xee075c50:   call   0xee075c55
  0xee075c55:   pusha  
  0xee075c56:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075c5b:   hlt    
  0xee075c5c:   pop    %eax
  0xee075c5d:   movl   $0x0,0x228(%edi)
  0xee075c67:   movl   $0x0,0x230(%edi)
  0xee075c71:   movl   $0x0,0x22c(%edi)
  0xee075c7b:   vzeroupper 
  0xee075c7e:   cmpl   $0x0,0x4(%edi)
  0xee075c82:   jne    0xee05bbe0
  0xee075c88:   mov    -0x20(%ebp),%esi
  0xee075c8b:   mov    -0x1c(%ebp),%edi
  0xee075c8e:   lea    0x0(%ebp,%edi,4),%edi
  0xee075c92:   ret    
  0xee075c93:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee075c95:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee075c98:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee075c9a:   pop    %ebp
  0xee075c9b:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee075c9c:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee075c9e:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee075ca1:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee075ca2:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee075ca8:   mov    -0x14(%ebp),%eax             ;; 2315:   __ bind(not_taken);
                                                    ;; 2316:   __ profile_not_taken_branch(rax);
  0xee075cab:   test   %eax,%eax
  0xee075cad:   je     0xee075cc1
  0xee075cb3:   addl   $0x1,0x10(%eax)
  0xee075cb7:   sbbl   $0x0,0x10(%eax)
  0xee075cbb:   add    $0x14,%eax
  0xee075cbe:   mov    %eax,-0x14(%ebp)
  0xee075cc1:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee075cc5:   add    $0x3,%esi
  0xee075cc8:   jmp    *-0x833caa0(,%ebx,4)
  0xee075ccf:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
if_icmpge  162 if_icmpge  [0xee075d00, 0xee076070]  880 bytes

--------------------------------------------------------------------------------
  0xee075d00:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee075d01:   push   %eax                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee075d02:   push   %ebx
  0xee075d03:   push   %ecx
  0xee075d04:   push   %edx
  0xee075d05:   mov    -0x14(%ebp),%ecx
  0xee075d08:   test   %ecx,%ecx
  0xee075d0a:   je     0xee075d4b
  0xee075d10:   mov    -0xc(%ebp),%ebx
  0xee075d13:   movzwl 0x2(%ecx),%edx
  0xee075d17:   add    0x8(%ebx),%edx
  0xee075d1a:   lea    0x2c(%edx),%edx
  0xee075d1d:   cmp    %esi,%edx
  0xee075d1f:   je     0xee075d4b
  0xee075d25:   push   %ecx
  0xee075d26:   push   %esi
  0xee075d27:   push   %ebx
  0xee075d28:   cmpl   $0x0,-0x8(%ebp)
  0xee075d2c:   je     0xee075d43
  0xee075d32:   push   $0xf785694c
  0xee075d37:   call   0xee075d3c
  0xee075d3c:   pusha  
  0xee075d3d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075d42:   hlt    
  0xee075d43:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee075d48:   add    $0xc,%esp
  0xee075d4b:   pop    %edx
  0xee075d4c:   pop    %ecx
  0xee075d4d:   pop    %ebx
  0xee075d4e:   pop    %eax
  0xee075d4f:   pop    %edx                         ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2311:   __ pop_i(rdx);
  0xee075d50:   cmp    %eax,%edx                    ;; 2312:   __ cmpl(rdx, rax);
  0xee075d52:   jl     0xee076048                   ;; 2313:   __ jcc(j_not(cc), not_taken);
  0xee075d58:   mov    -0xc(%ebp),%ecx              ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee075d5b:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee075d5e:   test   %eax,%eax
  0xee075d60:   je     0xee075d78
  0xee075d66:   mov    0x8(%eax),%ebx
  0xee075d69:   add    $0x1,%ebx
  0xee075d6c:   sbb    $0x0,%ebx
  0xee075d6f:   mov    %ebx,0x8(%eax)
  0xee075d72:   add    0xc(%eax),%eax
  0xee075d75:   mov    %eax,-0x14(%ebp)
  0xee075d78:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee075d7c:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee075d7e:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee075d81:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee075d83:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee075d85:   jns    0xee075e8d                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee075d8b:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee075d8e:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee075d90:   jne    0xee075e51                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee075d96:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee075d97:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee075d98:   call   0xee075da2                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee075d9d:   jmp    0xee075e44
  0xee075da2:   push   %ecx
  0xee075da3:   lea    0x8(%esp),%eax
  0xee075da7:   mov    %esi,-0x20(%ebp)
  0xee075daa:   cmpl   $0x0,-0x8(%ebp)
  0xee075dae:   je     0xee075dc5
  0xee075db4:   push   $0xf78569d8
  0xee075db9:   call   0xee075dbe
  0xee075dbe:   pusha  
  0xee075dbf:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075dc4:   hlt    
  0xee075dc5:   push   %eax
  0xee075dc6:   push   %edx
  0xee075dc7:   push   %ecx
  0xee075dc8:   call   0xf704a910 = Thread::current()
  0xee075dcd:   pop    %ecx
  0xee075dce:   pop    %edx
  0xee075dcf:   mov    %eax,%edi
  0xee075dd1:   pop    %eax
  0xee075dd2:   push   %edi
  0xee075dd3:   vzeroupper 
  0xee075dd6:   mov    %ebp,0x230(%edi)
  0xee075ddc:   mov    %eax,0x228(%edi)
  0xee075de2:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee075de7:   add    $0x8,%esp
  0xee075dea:   push   %eax
  0xee075deb:   push   %edx
  0xee075dec:   push   %ecx
  0xee075ded:   call   0xf704a910 = Thread::current()
  0xee075df2:   pop    %ecx
  0xee075df3:   pop    %edx
  0xee075df4:   cmp    %eax,%edi
  0xee075df6:   je     0xee075e0d
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee075dfc:   push   $0xf78b5a48
  0xee075e01:   call   0xee075e06
  0xee075e06:   pusha  
  0xee075e07:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075e0c:   hlt    
  0xee075e0d:   pop    %eax
  0xee075e0e:   movl   $0x0,0x228(%edi)
  0xee075e18:   movl   $0x0,0x230(%edi)
  0xee075e22:   movl   $0x0,0x22c(%edi)
  0xee075e2c:   vzeroupper 
  0xee075e2f:   cmpl   $0x0,0x4(%edi)
  0xee075e33:   jne    0xee05bbe0
  0xee075e39:   mov    -0x20(%ebp),%esi
  0xee075e3c:   mov    -0x1c(%ebp),%edi
  0xee075e3f:   lea    0x0(%ebp,%edi,4),%edi
  0xee075e43:   ret    
  0xee075e44:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee075e45:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee075e46:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee075e49:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee075e4b:   je     0xee075e8d                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee075e51:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee075e54:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee075e56:   je     0xee075e78                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee075e58:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee075e5e:   add    $0x2,%eax
  0xee075e61:   mov    %eax,0xb8(%ebx)
  0xee075e67:   and    0xcc(%ebx),%eax
  0xee075e6d:   je     0xee075eb4
  0xee075e73:   jmp    0xee075e8d                   ;; 2212:       __ jmp(dispatch);
  0xee075e78:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee075e7b:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee075e7e:   add    $0x2,%eax
  0xee075e81:   mov    %eax,0xc(%ecx)
  0xee075e84:   and    0x20(%ecx),%eax
  0xee075e87:   je     0xee075eb4
  0xee075e8d:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee075e90:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee075e91:   push   %edx
  0xee075e92:   push   %ecx
  0xee075e93:   call   0xf704a910 = Thread::current()
  0xee075e98:   pop    %ecx
  0xee075e99:   pop    %edx
  0xee075e9a:   mov    %eax,%ecx
  0xee075e9c:   pop    %eax
  0xee075e9d:   testb  $0x1,0x288(%ecx)
  0xee075ea4:   je     0xee075ead
  0xee075ea6:   jmp    *-0x8341aa0(,%ebx,4)
  0xee075ead:   jmp    *-0x833caa0(,%ebx,4)
  0xee075eb4:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee075eb6:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee075eb8:   call   0xee075ec2                   ;; 2240:       __ call_VM(noreg,
  0xee075ebd:   jmp    0xee075f64
  0xee075ec2:   push   %edx
  0xee075ec3:   lea    0x8(%esp),%eax
  0xee075ec7:   mov    %esi,-0x20(%ebp)
  0xee075eca:   cmpl   $0x0,-0x8(%ebp)
  0xee075ece:   je     0xee075ee5
  0xee075ed4:   push   $0xf78569d8
  0xee075ed9:   call   0xee075ede
  0xee075ede:   pusha  
  0xee075edf:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075ee4:   hlt    
  0xee075ee5:   push   %eax
  0xee075ee6:   push   %edx
  0xee075ee7:   push   %ecx
  0xee075ee8:   call   0xf704a910 = Thread::current()
  0xee075eed:   pop    %ecx
  0xee075eee:   pop    %edx
  0xee075eef:   mov    %eax,%edi
  0xee075ef1:   pop    %eax
  0xee075ef2:   push   %edi
  0xee075ef3:   vzeroupper 
  0xee075ef6:   mov    %ebp,0x230(%edi)
  0xee075efc:   mov    %eax,0x228(%edi)
  0xee075f02:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee075f07:   add    $0x8,%esp
  0xee075f0a:   push   %eax
  0xee075f0b:   push   %edx
  0xee075f0c:   push   %ecx
  0xee075f0d:   call   0xf704a910 = Thread::current()
  0xee075f12:   pop    %ecx
  0xee075f13:   pop    %edx
  0xee075f14:   cmp    %eax,%edi
  0xee075f16:   je     0xee075f2d
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee075f1c:   push   $0xf78b5a48
  0xee075f21:   call   0xee075f26
  0xee075f26:   pusha  
  0xee075f27:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075f2c:   hlt    
  0xee075f2d:   pop    %eax
  0xee075f2e:   movl   $0x0,0x228(%edi)
  0xee075f38:   movl   $0x0,0x230(%edi)
  0xee075f42:   movl   $0x0,0x22c(%edi)
  0xee075f4c:   vzeroupper 
  0xee075f4f:   cmpl   $0x0,0x4(%edi)
  0xee075f53:   jne    0xee05bbe0
  0xee075f59:   mov    -0x20(%ebp),%esi
  0xee075f5c:   mov    -0x1c(%ebp),%edi
  0xee075f5f:   lea    0x0(%ebp,%edi,4),%edi
  0xee075f63:   ret    
  0xee075f64:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee075f66:   je     0xee075e8d                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee075f6c:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee075f73:   jne    0xee075e8d                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee075f79:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee075f7b:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee075f7c:   push   %edx
  0xee075f7d:   push   %ecx
  0xee075f7e:   call   0xf704a910 = Thread::current()
  0xee075f83:   pop    %ecx
  0xee075f84:   pop    %edx
  0xee075f85:   mov    %eax,%ecx
  0xee075f87:   pop    %eax
  0xee075f88:   call   0xee075f92
  0xee075f8d:   jmp    0xee076033
  0xee075f92:   lea    0x4(%esp),%eax
  0xee075f96:   mov    %esi,-0x20(%ebp)
  0xee075f99:   cmpl   $0x0,-0x8(%ebp)
  0xee075f9d:   je     0xee075fb4
  0xee075fa3:   push   $0xf78569d8
  0xee075fa8:   call   0xee075fad
  0xee075fad:   pusha  
  0xee075fae:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075fb3:   hlt    
  0xee075fb4:   push   %eax
  0xee075fb5:   push   %edx
  0xee075fb6:   push   %ecx
  0xee075fb7:   call   0xf704a910 = Thread::current()
  0xee075fbc:   pop    %ecx
  0xee075fbd:   pop    %edx
  0xee075fbe:   mov    %eax,%edi
  0xee075fc0:   pop    %eax
  0xee075fc1:   push   %edi
  0xee075fc2:   vzeroupper 
  0xee075fc5:   mov    %ebp,0x230(%edi)
  0xee075fcb:   mov    %eax,0x228(%edi)
  0xee075fd1:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee075fd6:   add    $0x4,%esp
  0xee075fd9:   push   %eax
  0xee075fda:   push   %edx
  0xee075fdb:   push   %ecx
  0xee075fdc:   call   0xf704a910 = Thread::current()
  0xee075fe1:   pop    %ecx
  0xee075fe2:   pop    %edx
  0xee075fe3:   cmp    %eax,%edi
  0xee075fe5:   je     0xee075ffc
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee075feb:   push   $0xf78b5a48
  0xee075ff0:   call   0xee075ff5
  0xee075ff5:   pusha  
  0xee075ff6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee075ffb:   hlt    
  0xee075ffc:   pop    %eax
  0xee075ffd:   movl   $0x0,0x228(%edi)
  0xee076007:   movl   $0x0,0x230(%edi)
  0xee076011:   movl   $0x0,0x22c(%edi)
  0xee07601b:   vzeroupper 
  0xee07601e:   cmpl   $0x0,0x4(%edi)
  0xee076022:   jne    0xee05bbe0
  0xee076028:   mov    -0x20(%ebp),%esi
  0xee07602b:   mov    -0x1c(%ebp),%edi
  0xee07602e:   lea    0x0(%ebp,%edi,4),%edi
  0xee076032:   ret    
  0xee076033:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee076035:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee076038:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee07603a:   pop    %ebp
  0xee07603b:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee07603c:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee07603e:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee076041:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee076042:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee076048:   mov    -0x14(%ebp),%eax             ;; 2315:   __ bind(not_taken);
                                                    ;; 2316:   __ profile_not_taken_branch(rax);
  0xee07604b:   test   %eax,%eax
  0xee07604d:   je     0xee076061
  0xee076053:   addl   $0x1,0x10(%eax)
  0xee076057:   sbbl   $0x0,0x10(%eax)
  0xee07605b:   add    $0x14,%eax
  0xee07605e:   mov    %eax,-0x14(%ebp)
  0xee076061:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee076065:   add    $0x3,%esi
  0xee076068:   jmp    *-0x833caa0(,%ebx,4)
  0xee07606f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
if_icmpgt  163 if_icmpgt  [0xee0760a0, 0xee076410]  880 bytes

--------------------------------------------------------------------------------
  0xee0760a0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee0760a1:   push   %eax                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee0760a2:   push   %ebx
  0xee0760a3:   push   %ecx
  0xee0760a4:   push   %edx
  0xee0760a5:   mov    -0x14(%ebp),%ecx
  0xee0760a8:   test   %ecx,%ecx
  0xee0760aa:   je     0xee0760eb
  0xee0760b0:   mov    -0xc(%ebp),%ebx
  0xee0760b3:   movzwl 0x2(%ecx),%edx
  0xee0760b7:   add    0x8(%ebx),%edx
  0xee0760ba:   lea    0x2c(%edx),%edx
  0xee0760bd:   cmp    %esi,%edx
  0xee0760bf:   je     0xee0760eb
  0xee0760c5:   push   %ecx
  0xee0760c6:   push   %esi
  0xee0760c7:   push   %ebx
  0xee0760c8:   cmpl   $0x0,-0x8(%ebp)
  0xee0760cc:   je     0xee0760e3
  0xee0760d2:   push   $0xf785694c
  0xee0760d7:   call   0xee0760dc
  0xee0760dc:   pusha  
  0xee0760dd:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0760e2:   hlt    
  0xee0760e3:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee0760e8:   add    $0xc,%esp
  0xee0760eb:   pop    %edx
  0xee0760ec:   pop    %ecx
  0xee0760ed:   pop    %ebx
  0xee0760ee:   pop    %eax
  0xee0760ef:   pop    %edx                         ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2311:   __ pop_i(rdx);
  0xee0760f0:   cmp    %eax,%edx                    ;; 2312:   __ cmpl(rdx, rax);
  0xee0760f2:   jle    0xee0763e8                   ;; 2313:   __ jcc(j_not(cc), not_taken);
  0xee0760f8:   mov    -0xc(%ebp),%ecx              ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee0760fb:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee0760fe:   test   %eax,%eax
  0xee076100:   je     0xee076118
  0xee076106:   mov    0x8(%eax),%ebx
  0xee076109:   add    $0x1,%ebx
  0xee07610c:   sbb    $0x0,%ebx
  0xee07610f:   mov    %ebx,0x8(%eax)
  0xee076112:   add    0xc(%eax),%eax
  0xee076115:   mov    %eax,-0x14(%ebp)
  0xee076118:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee07611c:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee07611e:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee076121:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee076123:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee076125:   jns    0xee07622d                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee07612b:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee07612e:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee076130:   jne    0xee0761f1                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee076136:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee076137:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee076138:   call   0xee076142                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee07613d:   jmp    0xee0761e4
  0xee076142:   push   %ecx
  0xee076143:   lea    0x8(%esp),%eax
  0xee076147:   mov    %esi,-0x20(%ebp)
  0xee07614a:   cmpl   $0x0,-0x8(%ebp)
  0xee07614e:   je     0xee076165
  0xee076154:   push   $0xf78569d8
  0xee076159:   call   0xee07615e
  0xee07615e:   pusha  
  0xee07615f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076164:   hlt    
  0xee076165:   push   %eax
  0xee076166:   push   %edx
  0xee076167:   push   %ecx
  0xee076168:   call   0xf704a910 = Thread::current()
  0xee07616d:   pop    %ecx
  0xee07616e:   pop    %edx
  0xee07616f:   mov    %eax,%edi
  0xee076171:   pop    %eax
  0xee076172:   push   %edi
  0xee076173:   vzeroupper 
  0xee076176:   mov    %ebp,0x230(%edi)
  0xee07617c:   mov    %eax,0x228(%edi)
  0xee076182:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee076187:   add    $0x8,%esp
  0xee07618a:   push   %eax
  0xee07618b:   push   %edx
  0xee07618c:   push   %ecx
  0xee07618d:   call   0xf704a910 = Thread::current()
  0xee076192:   pop    %ecx
  0xee076193:   pop    %edx
  0xee076194:   cmp    %eax,%edi
  0xee076196:   je     0xee0761ad
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07619c:   push   $0xf78b5a48
  0xee0761a1:   call   0xee0761a6
  0xee0761a6:   pusha  
  0xee0761a7:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0761ac:   hlt    
  0xee0761ad:   pop    %eax
  0xee0761ae:   movl   $0x0,0x228(%edi)
  0xee0761b8:   movl   $0x0,0x230(%edi)
  0xee0761c2:   movl   $0x0,0x22c(%edi)
  0xee0761cc:   vzeroupper 
  0xee0761cf:   cmpl   $0x0,0x4(%edi)
  0xee0761d3:   jne    0xee05bbe0
  0xee0761d9:   mov    -0x20(%ebp),%esi
  0xee0761dc:   mov    -0x1c(%ebp),%edi
  0xee0761df:   lea    0x0(%ebp,%edi,4),%edi
  0xee0761e3:   ret    
  0xee0761e4:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee0761e5:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee0761e6:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee0761e9:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee0761eb:   je     0xee07622d                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee0761f1:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee0761f4:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee0761f6:   je     0xee076218                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee0761f8:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee0761fe:   add    $0x2,%eax
  0xee076201:   mov    %eax,0xb8(%ebx)
  0xee076207:   and    0xcc(%ebx),%eax
  0xee07620d:   je     0xee076254
  0xee076213:   jmp    0xee07622d                   ;; 2212:       __ jmp(dispatch);
  0xee076218:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee07621b:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee07621e:   add    $0x2,%eax
  0xee076221:   mov    %eax,0xc(%ecx)
  0xee076224:   and    0x20(%ecx),%eax
  0xee076227:   je     0xee076254
  0xee07622d:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee076230:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee076231:   push   %edx
  0xee076232:   push   %ecx
  0xee076233:   call   0xf704a910 = Thread::current()
  0xee076238:   pop    %ecx
  0xee076239:   pop    %edx
  0xee07623a:   mov    %eax,%ecx
  0xee07623c:   pop    %eax
  0xee07623d:   testb  $0x1,0x288(%ecx)
  0xee076244:   je     0xee07624d
  0xee076246:   jmp    *-0x8341aa0(,%ebx,4)
  0xee07624d:   jmp    *-0x833caa0(,%ebx,4)
  0xee076254:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee076256:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee076258:   call   0xee076262                   ;; 2240:       __ call_VM(noreg,
  0xee07625d:   jmp    0xee076304
  0xee076262:   push   %edx
  0xee076263:   lea    0x8(%esp),%eax
  0xee076267:   mov    %esi,-0x20(%ebp)
  0xee07626a:   cmpl   $0x0,-0x8(%ebp)
  0xee07626e:   je     0xee076285
  0xee076274:   push   $0xf78569d8
  0xee076279:   call   0xee07627e
  0xee07627e:   pusha  
  0xee07627f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076284:   hlt    
  0xee076285:   push   %eax
  0xee076286:   push   %edx
  0xee076287:   push   %ecx
  0xee076288:   call   0xf704a910 = Thread::current()
  0xee07628d:   pop    %ecx
  0xee07628e:   pop    %edx
  0xee07628f:   mov    %eax,%edi
  0xee076291:   pop    %eax
  0xee076292:   push   %edi
  0xee076293:   vzeroupper 
  0xee076296:   mov    %ebp,0x230(%edi)
  0xee07629c:   mov    %eax,0x228(%edi)
  0xee0762a2:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee0762a7:   add    $0x8,%esp
  0xee0762aa:   push   %eax
  0xee0762ab:   push   %edx
  0xee0762ac:   push   %ecx
  0xee0762ad:   call   0xf704a910 = Thread::current()
  0xee0762b2:   pop    %ecx
  0xee0762b3:   pop    %edx
  0xee0762b4:   cmp    %eax,%edi
  0xee0762b6:   je     0xee0762cd
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee0762bc:   push   $0xf78b5a48
  0xee0762c1:   call   0xee0762c6
  0xee0762c6:   pusha  
  0xee0762c7:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0762cc:   hlt    
  0xee0762cd:   pop    %eax
  0xee0762ce:   movl   $0x0,0x228(%edi)
  0xee0762d8:   movl   $0x0,0x230(%edi)
  0xee0762e2:   movl   $0x0,0x22c(%edi)
  0xee0762ec:   vzeroupper 
  0xee0762ef:   cmpl   $0x0,0x4(%edi)
  0xee0762f3:   jne    0xee05bbe0
  0xee0762f9:   mov    -0x20(%ebp),%esi
  0xee0762fc:   mov    -0x1c(%ebp),%edi
  0xee0762ff:   lea    0x0(%ebp,%edi,4),%edi
  0xee076303:   ret    
  0xee076304:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee076306:   je     0xee07622d                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee07630c:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee076313:   jne    0xee07622d                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee076319:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee07631b:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee07631c:   push   %edx
  0xee07631d:   push   %ecx
  0xee07631e:   call   0xf704a910 = Thread::current()
  0xee076323:   pop    %ecx
  0xee076324:   pop    %edx
  0xee076325:   mov    %eax,%ecx
  0xee076327:   pop    %eax
  0xee076328:   call   0xee076332
  0xee07632d:   jmp    0xee0763d3
  0xee076332:   lea    0x4(%esp),%eax
  0xee076336:   mov    %esi,-0x20(%ebp)
  0xee076339:   cmpl   $0x0,-0x8(%ebp)
  0xee07633d:   je     0xee076354
  0xee076343:   push   $0xf78569d8
  0xee076348:   call   0xee07634d
  0xee07634d:   pusha  
  0xee07634e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076353:   hlt    
  0xee076354:   push   %eax
  0xee076355:   push   %edx
  0xee076356:   push   %ecx
  0xee076357:   call   0xf704a910 = Thread::current()
  0xee07635c:   pop    %ecx
  0xee07635d:   pop    %edx
  0xee07635e:   mov    %eax,%edi
  0xee076360:   pop    %eax
  0xee076361:   push   %edi
  0xee076362:   vzeroupper 
  0xee076365:   mov    %ebp,0x230(%edi)
  0xee07636b:   mov    %eax,0x228(%edi)
  0xee076371:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee076376:   add    $0x4,%esp
  0xee076379:   push   %eax
  0xee07637a:   push   %edx
  0xee07637b:   push   %ecx
  0xee07637c:   call   0xf704a910 = Thread::current()
  0xee076381:   pop    %ecx
  0xee076382:   pop    %edx
  0xee076383:   cmp    %eax,%edi
  0xee076385:   je     0xee07639c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07638b:   push   $0xf78b5a48
  0xee076390:   call   0xee076395
  0xee076395:   pusha  
  0xee076396:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07639b:   hlt    
  0xee07639c:   pop    %eax
  0xee07639d:   movl   $0x0,0x228(%edi)
  0xee0763a7:   movl   $0x0,0x230(%edi)
  0xee0763b1:   movl   $0x0,0x22c(%edi)
  0xee0763bb:   vzeroupper 
  0xee0763be:   cmpl   $0x0,0x4(%edi)
  0xee0763c2:   jne    0xee05bbe0
  0xee0763c8:   mov    -0x20(%ebp),%esi
  0xee0763cb:   mov    -0x1c(%ebp),%edi
  0xee0763ce:   lea    0x0(%ebp,%edi,4),%edi
  0xee0763d2:   ret    
  0xee0763d3:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee0763d5:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee0763d8:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee0763da:   pop    %ebp
  0xee0763db:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee0763dc:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee0763de:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee0763e1:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee0763e2:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee0763e8:   mov    -0x14(%ebp),%eax             ;; 2315:   __ bind(not_taken);
                                                    ;; 2316:   __ profile_not_taken_branch(rax);
  0xee0763eb:   test   %eax,%eax
  0xee0763ed:   je     0xee076401
  0xee0763f3:   addl   $0x1,0x10(%eax)
  0xee0763f7:   sbbl   $0x0,0x10(%eax)
  0xee0763fb:   add    $0x14,%eax
  0xee0763fe:   mov    %eax,-0x14(%ebp)
  0xee076401:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee076405:   add    $0x3,%esi
  0xee076408:   jmp    *-0x833caa0(,%ebx,4)
  0xee07640f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
if_icmple  164 if_icmple  [0xee076440, 0xee0767b0]  880 bytes

--------------------------------------------------------------------------------
  0xee076440:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee076441:   push   %eax                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee076442:   push   %ebx
  0xee076443:   push   %ecx
  0xee076444:   push   %edx
  0xee076445:   mov    -0x14(%ebp),%ecx
  0xee076448:   test   %ecx,%ecx
  0xee07644a:   je     0xee07648b
  0xee076450:   mov    -0xc(%ebp),%ebx
  0xee076453:   movzwl 0x2(%ecx),%edx
  0xee076457:   add    0x8(%ebx),%edx
  0xee07645a:   lea    0x2c(%edx),%edx
  0xee07645d:   cmp    %esi,%edx
  0xee07645f:   je     0xee07648b
  0xee076465:   push   %ecx
  0xee076466:   push   %esi
  0xee076467:   push   %ebx
  0xee076468:   cmpl   $0x0,-0x8(%ebp)
  0xee07646c:   je     0xee076483
  0xee076472:   push   $0xf785694c
  0xee076477:   call   0xee07647c
  0xee07647c:   pusha  
  0xee07647d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076482:   hlt    
  0xee076483:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee076488:   add    $0xc,%esp
  0xee07648b:   pop    %edx
  0xee07648c:   pop    %ecx
  0xee07648d:   pop    %ebx
  0xee07648e:   pop    %eax
  0xee07648f:   pop    %edx                         ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2311:   __ pop_i(rdx);
  0xee076490:   cmp    %eax,%edx                    ;; 2312:   __ cmpl(rdx, rax);
  0xee076492:   jg     0xee076788                   ;; 2313:   __ jcc(j_not(cc), not_taken);
  0xee076498:   mov    -0xc(%ebp),%ecx              ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee07649b:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee07649e:   test   %eax,%eax
  0xee0764a0:   je     0xee0764b8
  0xee0764a6:   mov    0x8(%eax),%ebx
  0xee0764a9:   add    $0x1,%ebx
  0xee0764ac:   sbb    $0x0,%ebx
  0xee0764af:   mov    %ebx,0x8(%eax)
  0xee0764b2:   add    0xc(%eax),%eax
  0xee0764b5:   mov    %eax,-0x14(%ebp)
  0xee0764b8:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee0764bc:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee0764be:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee0764c1:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee0764c3:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee0764c5:   jns    0xee0765cd                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee0764cb:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee0764ce:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee0764d0:   jne    0xee076591                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee0764d6:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee0764d7:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee0764d8:   call   0xee0764e2                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee0764dd:   jmp    0xee076584
  0xee0764e2:   push   %ecx
  0xee0764e3:   lea    0x8(%esp),%eax
  0xee0764e7:   mov    %esi,-0x20(%ebp)
  0xee0764ea:   cmpl   $0x0,-0x8(%ebp)
  0xee0764ee:   je     0xee076505
  0xee0764f4:   push   $0xf78569d8
  0xee0764f9:   call   0xee0764fe
  0xee0764fe:   pusha  
  0xee0764ff:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076504:   hlt    
  0xee076505:   push   %eax
  0xee076506:   push   %edx
  0xee076507:   push   %ecx
  0xee076508:   call   0xf704a910 = Thread::current()
  0xee07650d:   pop    %ecx
  0xee07650e:   pop    %edx
  0xee07650f:   mov    %eax,%edi
  0xee076511:   pop    %eax
  0xee076512:   push   %edi
  0xee076513:   vzeroupper 
  0xee076516:   mov    %ebp,0x230(%edi)
  0xee07651c:   mov    %eax,0x228(%edi)
  0xee076522:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee076527:   add    $0x8,%esp
  0xee07652a:   push   %eax
  0xee07652b:   push   %edx
  0xee07652c:   push   %ecx
  0xee07652d:   call   0xf704a910 = Thread::current()
  0xee076532:   pop    %ecx
  0xee076533:   pop    %edx
  0xee076534:   cmp    %eax,%edi
  0xee076536:   je     0xee07654d
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07653c:   push   $0xf78b5a48
  0xee076541:   call   0xee076546
  0xee076546:   pusha  
  0xee076547:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07654c:   hlt    
  0xee07654d:   pop    %eax
  0xee07654e:   movl   $0x0,0x228(%edi)
  0xee076558:   movl   $0x0,0x230(%edi)
  0xee076562:   movl   $0x0,0x22c(%edi)
  0xee07656c:   vzeroupper 
  0xee07656f:   cmpl   $0x0,0x4(%edi)
  0xee076573:   jne    0xee05bbe0
  0xee076579:   mov    -0x20(%ebp),%esi
  0xee07657c:   mov    -0x1c(%ebp),%edi
  0xee07657f:   lea    0x0(%ebp,%edi,4),%edi
  0xee076583:   ret    
  0xee076584:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee076585:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee076586:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee076589:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee07658b:   je     0xee0765cd                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee076591:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee076594:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee076596:   je     0xee0765b8                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee076598:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee07659e:   add    $0x2,%eax
  0xee0765a1:   mov    %eax,0xb8(%ebx)
  0xee0765a7:   and    0xcc(%ebx),%eax
  0xee0765ad:   je     0xee0765f4
  0xee0765b3:   jmp    0xee0765cd                   ;; 2212:       __ jmp(dispatch);
  0xee0765b8:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee0765bb:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee0765be:   add    $0x2,%eax
  0xee0765c1:   mov    %eax,0xc(%ecx)
  0xee0765c4:   and    0x20(%ecx),%eax
  0xee0765c7:   je     0xee0765f4
  0xee0765cd:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee0765d0:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee0765d1:   push   %edx
  0xee0765d2:   push   %ecx
  0xee0765d3:   call   0xf704a910 = Thread::current()
  0xee0765d8:   pop    %ecx
  0xee0765d9:   pop    %edx
  0xee0765da:   mov    %eax,%ecx
  0xee0765dc:   pop    %eax
  0xee0765dd:   testb  $0x1,0x288(%ecx)
  0xee0765e4:   je     0xee0765ed
  0xee0765e6:   jmp    *-0x8341aa0(,%ebx,4)
  0xee0765ed:   jmp    *-0x833caa0(,%ebx,4)
  0xee0765f4:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee0765f6:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee0765f8:   call   0xee076602                   ;; 2240:       __ call_VM(noreg,
  0xee0765fd:   jmp    0xee0766a4
  0xee076602:   push   %edx
  0xee076603:   lea    0x8(%esp),%eax
  0xee076607:   mov    %esi,-0x20(%ebp)
  0xee07660a:   cmpl   $0x0,-0x8(%ebp)
  0xee07660e:   je     0xee076625
  0xee076614:   push   $0xf78569d8
  0xee076619:   call   0xee07661e
  0xee07661e:   pusha  
  0xee07661f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076624:   hlt    
  0xee076625:   push   %eax
  0xee076626:   push   %edx
  0xee076627:   push   %ecx
  0xee076628:   call   0xf704a910 = Thread::current()
  0xee07662d:   pop    %ecx
  0xee07662e:   pop    %edx
  0xee07662f:   mov    %eax,%edi
  0xee076631:   pop    %eax
  0xee076632:   push   %edi
  0xee076633:   vzeroupper 
  0xee076636:   mov    %ebp,0x230(%edi)
  0xee07663c:   mov    %eax,0x228(%edi)
  0xee076642:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee076647:   add    $0x8,%esp
  0xee07664a:   push   %eax
  0xee07664b:   push   %edx
  0xee07664c:   push   %ecx
  0xee07664d:   call   0xf704a910 = Thread::current()
  0xee076652:   pop    %ecx
  0xee076653:   pop    %edx
  0xee076654:   cmp    %eax,%edi
  0xee076656:   je     0xee07666d
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07665c:   push   $0xf78b5a48
  0xee076661:   call   0xee076666
  0xee076666:   pusha  
  0xee076667:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07666c:   hlt    
  0xee07666d:   pop    %eax
  0xee07666e:   movl   $0x0,0x228(%edi)
  0xee076678:   movl   $0x0,0x230(%edi)
  0xee076682:   movl   $0x0,0x22c(%edi)
  0xee07668c:   vzeroupper 
  0xee07668f:   cmpl   $0x0,0x4(%edi)
  0xee076693:   jne    0xee05bbe0
  0xee076699:   mov    -0x20(%ebp),%esi
  0xee07669c:   mov    -0x1c(%ebp),%edi
  0xee07669f:   lea    0x0(%ebp,%edi,4),%edi
  0xee0766a3:   ret    
  0xee0766a4:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee0766a6:   je     0xee0765cd                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee0766ac:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee0766b3:   jne    0xee0765cd                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee0766b9:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee0766bb:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee0766bc:   push   %edx
  0xee0766bd:   push   %ecx
  0xee0766be:   call   0xf704a910 = Thread::current()
  0xee0766c3:   pop    %ecx
  0xee0766c4:   pop    %edx
  0xee0766c5:   mov    %eax,%ecx
  0xee0766c7:   pop    %eax
  0xee0766c8:   call   0xee0766d2
  0xee0766cd:   jmp    0xee076773
  0xee0766d2:   lea    0x4(%esp),%eax
  0xee0766d6:   mov    %esi,-0x20(%ebp)
  0xee0766d9:   cmpl   $0x0,-0x8(%ebp)
  0xee0766dd:   je     0xee0766f4
  0xee0766e3:   push   $0xf78569d8
  0xee0766e8:   call   0xee0766ed
  0xee0766ed:   pusha  
  0xee0766ee:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0766f3:   hlt    
  0xee0766f4:   push   %eax
  0xee0766f5:   push   %edx
  0xee0766f6:   push   %ecx
  0xee0766f7:   call   0xf704a910 = Thread::current()
  0xee0766fc:   pop    %ecx
  0xee0766fd:   pop    %edx
  0xee0766fe:   mov    %eax,%edi
  0xee076700:   pop    %eax
  0xee076701:   push   %edi
  0xee076702:   vzeroupper 
  0xee076705:   mov    %ebp,0x230(%edi)
  0xee07670b:   mov    %eax,0x228(%edi)
  0xee076711:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee076716:   add    $0x4,%esp
  0xee076719:   push   %eax
  0xee07671a:   push   %edx
  0xee07671b:   push   %ecx
  0xee07671c:   call   0xf704a910 = Thread::current()
  0xee076721:   pop    %ecx
  0xee076722:   pop    %edx
  0xee076723:   cmp    %eax,%edi
  0xee076725:   je     0xee07673c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07672b:   push   $0xf78b5a48
  0xee076730:   call   0xee076735
  0xee076735:   pusha  
  0xee076736:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07673b:   hlt    
  0xee07673c:   pop    %eax
  0xee07673d:   movl   $0x0,0x228(%edi)
  0xee076747:   movl   $0x0,0x230(%edi)
  0xee076751:   movl   $0x0,0x22c(%edi)
  0xee07675b:   vzeroupper 
  0xee07675e:   cmpl   $0x0,0x4(%edi)
  0xee076762:   jne    0xee05bbe0
  0xee076768:   mov    -0x20(%ebp),%esi
  0xee07676b:   mov    -0x1c(%ebp),%edi
  0xee07676e:   lea    0x0(%ebp,%edi,4),%edi
  0xee076772:   ret    
  0xee076773:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee076775:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee076778:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee07677a:   pop    %ebp
  0xee07677b:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee07677c:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee07677e:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee076781:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee076782:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee076788:   mov    -0x14(%ebp),%eax             ;; 2315:   __ bind(not_taken);
                                                    ;; 2316:   __ profile_not_taken_branch(rax);
  0xee07678b:   test   %eax,%eax
  0xee07678d:   je     0xee0767a1
  0xee076793:   addl   $0x1,0x10(%eax)
  0xee076797:   sbbl   $0x0,0x10(%eax)
  0xee07679b:   add    $0x14,%eax
  0xee07679e:   mov    %eax,-0x14(%ebp)
  0xee0767a1:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee0767a5:   add    $0x3,%esi
  0xee0767a8:   jmp    *-0x833caa0(,%ebx,4)
  0xee0767af:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
if_acmpeq  165 if_acmpeq  [0xee0767e0, 0xee076b50]  880 bytes

--------------------------------------------------------------------------------
  0xee0767e0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee0767e1:   push   %eax                         ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee0767e2:   push   %ebx
  0xee0767e3:   push   %ecx
  0xee0767e4:   push   %edx
  0xee0767e5:   mov    -0x14(%ebp),%ecx
  0xee0767e8:   test   %ecx,%ecx
  0xee0767ea:   je     0xee07682b
  0xee0767f0:   mov    -0xc(%ebp),%ebx
  0xee0767f3:   movzwl 0x2(%ecx),%edx
  0xee0767f7:   add    0x8(%ebx),%edx
  0xee0767fa:   lea    0x2c(%edx),%edx
  0xee0767fd:   cmp    %esi,%edx
  0xee0767ff:   je     0xee07682b
  0xee076805:   push   %ecx
  0xee076806:   push   %esi
  0xee076807:   push   %ebx
  0xee076808:   cmpl   $0x0,-0x8(%ebp)
  0xee07680c:   je     0xee076823
  0xee076812:   push   $0xf785694c
  0xee076817:   call   0xee07681c
  0xee07681c:   pusha  
  0xee07681d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076822:   hlt    
  0xee076823:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee076828:   add    $0xc,%esp
  0xee07682b:   pop    %edx
  0xee07682c:   pop    %ecx
  0xee07682d:   pop    %ebx
  0xee07682e:   pop    %eax
  0xee07682f:   pop    %edx                         ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2334:   __ pop_ptr(rdx);
  0xee076830:   cmp    %eax,%edx                    ;; 2335:   __ cmpoop(rdx, rax);
  0xee076832:   jne    0xee076b28                   ;; 2336:   __ jcc(j_not(cc), not_taken);
  0xee076838:   mov    -0xc(%ebp),%ecx              ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee07683b:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee07683e:   test   %eax,%eax
  0xee076840:   je     0xee076858
  0xee076846:   mov    0x8(%eax),%ebx
  0xee076849:   add    $0x1,%ebx
  0xee07684c:   sbb    $0x0,%ebx
  0xee07684f:   mov    %ebx,0x8(%eax)
  0xee076852:   add    0xc(%eax),%eax
  0xee076855:   mov    %eax,-0x14(%ebp)
  0xee076858:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee07685c:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee07685e:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee076861:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee076863:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee076865:   jns    0xee07696d                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee07686b:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee07686e:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee076870:   jne    0xee076931                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee076876:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee076877:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee076878:   call   0xee076882                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee07687d:   jmp    0xee076924
  0xee076882:   push   %ecx
  0xee076883:   lea    0x8(%esp),%eax
  0xee076887:   mov    %esi,-0x20(%ebp)
  0xee07688a:   cmpl   $0x0,-0x8(%ebp)
  0xee07688e:   je     0xee0768a5
  0xee076894:   push   $0xf78569d8
  0xee076899:   call   0xee07689e
  0xee07689e:   pusha  
  0xee07689f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0768a4:   hlt    
  0xee0768a5:   push   %eax
  0xee0768a6:   push   %edx
  0xee0768a7:   push   %ecx
  0xee0768a8:   call   0xf704a910 = Thread::current()
  0xee0768ad:   pop    %ecx
  0xee0768ae:   pop    %edx
  0xee0768af:   mov    %eax,%edi
  0xee0768b1:   pop    %eax
  0xee0768b2:   push   %edi
  0xee0768b3:   vzeroupper 
  0xee0768b6:   mov    %ebp,0x230(%edi)
  0xee0768bc:   mov    %eax,0x228(%edi)
  0xee0768c2:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee0768c7:   add    $0x8,%esp
  0xee0768ca:   push   %eax
  0xee0768cb:   push   %edx
  0xee0768cc:   push   %ecx
  0xee0768cd:   call   0xf704a910 = Thread::current()
  0xee0768d2:   pop    %ecx
  0xee0768d3:   pop    %edx
  0xee0768d4:   cmp    %eax,%edi
  0xee0768d6:   je     0xee0768ed
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee0768dc:   push   $0xf78b5a48
  0xee0768e1:   call   0xee0768e6
  0xee0768e6:   pusha  
  0xee0768e7:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0768ec:   hlt    
  0xee0768ed:   pop    %eax
  0xee0768ee:   movl   $0x0,0x228(%edi)
  0xee0768f8:   movl   $0x0,0x230(%edi)
  0xee076902:   movl   $0x0,0x22c(%edi)
  0xee07690c:   vzeroupper 
  0xee07690f:   cmpl   $0x0,0x4(%edi)
  0xee076913:   jne    0xee05bbe0
  0xee076919:   mov    -0x20(%ebp),%esi
  0xee07691c:   mov    -0x1c(%ebp),%edi
  0xee07691f:   lea    0x0(%ebp,%edi,4),%edi
  0xee076923:   ret    
  0xee076924:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee076925:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee076926:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee076929:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee07692b:   je     0xee07696d                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee076931:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee076934:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee076936:   je     0xee076958                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee076938:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee07693e:   add    $0x2,%eax
  0xee076941:   mov    %eax,0xb8(%ebx)
  0xee076947:   and    0xcc(%ebx),%eax
  0xee07694d:   je     0xee076994
  0xee076953:   jmp    0xee07696d                   ;; 2212:       __ jmp(dispatch);
  0xee076958:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee07695b:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee07695e:   add    $0x2,%eax
  0xee076961:   mov    %eax,0xc(%ecx)
  0xee076964:   and    0x20(%ecx),%eax
  0xee076967:   je     0xee076994
  0xee07696d:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee076970:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee076971:   push   %edx
  0xee076972:   push   %ecx
  0xee076973:   call   0xf704a910 = Thread::current()
  0xee076978:   pop    %ecx
  0xee076979:   pop    %edx
  0xee07697a:   mov    %eax,%ecx
  0xee07697c:   pop    %eax
  0xee07697d:   testb  $0x1,0x288(%ecx)
  0xee076984:   je     0xee07698d
  0xee076986:   jmp    *-0x8341aa0(,%ebx,4)
  0xee07698d:   jmp    *-0x833caa0(,%ebx,4)
  0xee076994:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee076996:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee076998:   call   0xee0769a2                   ;; 2240:       __ call_VM(noreg,
  0xee07699d:   jmp    0xee076a44
  0xee0769a2:   push   %edx
  0xee0769a3:   lea    0x8(%esp),%eax
  0xee0769a7:   mov    %esi,-0x20(%ebp)
  0xee0769aa:   cmpl   $0x0,-0x8(%ebp)
  0xee0769ae:   je     0xee0769c5
  0xee0769b4:   push   $0xf78569d8
  0xee0769b9:   call   0xee0769be
  0xee0769be:   pusha  
  0xee0769bf:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0769c4:   hlt    
  0xee0769c5:   push   %eax
  0xee0769c6:   push   %edx
  0xee0769c7:   push   %ecx
  0xee0769c8:   call   0xf704a910 = Thread::current()
  0xee0769cd:   pop    %ecx
  0xee0769ce:   pop    %edx
  0xee0769cf:   mov    %eax,%edi
  0xee0769d1:   pop    %eax
  0xee0769d2:   push   %edi
  0xee0769d3:   vzeroupper 
  0xee0769d6:   mov    %ebp,0x230(%edi)
  0xee0769dc:   mov    %eax,0x228(%edi)
  0xee0769e2:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee0769e7:   add    $0x8,%esp
  0xee0769ea:   push   %eax
  0xee0769eb:   push   %edx
  0xee0769ec:   push   %ecx
  0xee0769ed:   call   0xf704a910 = Thread::current()
  0xee0769f2:   pop    %ecx
  0xee0769f3:   pop    %edx
  0xee0769f4:   cmp    %eax,%edi
  0xee0769f6:   je     0xee076a0d
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee0769fc:   push   $0xf78b5a48
  0xee076a01:   call   0xee076a06
  0xee076a06:   pusha  
  0xee076a07:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076a0c:   hlt    
  0xee076a0d:   pop    %eax
  0xee076a0e:   movl   $0x0,0x228(%edi)
  0xee076a18:   movl   $0x0,0x230(%edi)
  0xee076a22:   movl   $0x0,0x22c(%edi)
  0xee076a2c:   vzeroupper 
  0xee076a2f:   cmpl   $0x0,0x4(%edi)
  0xee076a33:   jne    0xee05bbe0
  0xee076a39:   mov    -0x20(%ebp),%esi
  0xee076a3c:   mov    -0x1c(%ebp),%edi
  0xee076a3f:   lea    0x0(%ebp,%edi,4),%edi
  0xee076a43:   ret    
  0xee076a44:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee076a46:   je     0xee07696d                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee076a4c:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee076a53:   jne    0xee07696d                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee076a59:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee076a5b:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee076a5c:   push   %edx
  0xee076a5d:   push   %ecx
  0xee076a5e:   call   0xf704a910 = Thread::current()
  0xee076a63:   pop    %ecx
  0xee076a64:   pop    %edx
  0xee076a65:   mov    %eax,%ecx
  0xee076a67:   pop    %eax
  0xee076a68:   call   0xee076a72
  0xee076a6d:   jmp    0xee076b13
  0xee076a72:   lea    0x4(%esp),%eax
  0xee076a76:   mov    %esi,-0x20(%ebp)
  0xee076a79:   cmpl   $0x0,-0x8(%ebp)
  0xee076a7d:   je     0xee076a94
  0xee076a83:   push   $0xf78569d8
  0xee076a88:   call   0xee076a8d
  0xee076a8d:   pusha  
  0xee076a8e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076a93:   hlt    
  0xee076a94:   push   %eax
  0xee076a95:   push   %edx
  0xee076a96:   push   %ecx
  0xee076a97:   call   0xf704a910 = Thread::current()
  0xee076a9c:   pop    %ecx
  0xee076a9d:   pop    %edx
  0xee076a9e:   mov    %eax,%edi
  0xee076aa0:   pop    %eax
  0xee076aa1:   push   %edi
  0xee076aa2:   vzeroupper 
  0xee076aa5:   mov    %ebp,0x230(%edi)
  0xee076aab:   mov    %eax,0x228(%edi)
  0xee076ab1:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee076ab6:   add    $0x4,%esp
  0xee076ab9:   push   %eax
  0xee076aba:   push   %edx
  0xee076abb:   push   %ecx
  0xee076abc:   call   0xf704a910 = Thread::current()
  0xee076ac1:   pop    %ecx
  0xee076ac2:   pop    %edx
  0xee076ac3:   cmp    %eax,%edi
  0xee076ac5:   je     0xee076adc
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee076acb:   push   $0xf78b5a48
  0xee076ad0:   call   0xee076ad5
  0xee076ad5:   pusha  
  0xee076ad6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076adb:   hlt    
  0xee076adc:   pop    %eax
  0xee076add:   movl   $0x0,0x228(%edi)
  0xee076ae7:   movl   $0x0,0x230(%edi)
  0xee076af1:   movl   $0x0,0x22c(%edi)
  0xee076afb:   vzeroupper 
  0xee076afe:   cmpl   $0x0,0x4(%edi)
  0xee076b02:   jne    0xee05bbe0
  0xee076b08:   mov    -0x20(%ebp),%esi
  0xee076b0b:   mov    -0x1c(%ebp),%edi
  0xee076b0e:   lea    0x0(%ebp,%edi,4),%edi
  0xee076b12:   ret    
  0xee076b13:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee076b15:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee076b18:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee076b1a:   pop    %ebp
  0xee076b1b:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee076b1c:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee076b1e:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee076b21:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee076b22:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee076b28:   mov    -0x14(%ebp),%eax             ;; 2338:   __ bind(not_taken);
                                                    ;; 2339:   __ profile_not_taken_branch(rax);
  0xee076b2b:   test   %eax,%eax
  0xee076b2d:   je     0xee076b41
  0xee076b33:   addl   $0x1,0x10(%eax)
  0xee076b37:   sbbl   $0x0,0x10(%eax)
  0xee076b3b:   add    $0x14,%eax
  0xee076b3e:   mov    %eax,-0x14(%ebp)
  0xee076b41:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee076b45:   add    $0x3,%esi
  0xee076b48:   jmp    *-0x833caa0(,%ebx,4)
  0xee076b4f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
if_acmpne  166 if_acmpne  [0xee076b80, 0xee076ef0]  880 bytes

--------------------------------------------------------------------------------
  0xee076b80:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee076b81:   push   %eax                         ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee076b82:   push   %ebx
  0xee076b83:   push   %ecx
  0xee076b84:   push   %edx
  0xee076b85:   mov    -0x14(%ebp),%ecx
  0xee076b88:   test   %ecx,%ecx
  0xee076b8a:   je     0xee076bcb
  0xee076b90:   mov    -0xc(%ebp),%ebx
  0xee076b93:   movzwl 0x2(%ecx),%edx
  0xee076b97:   add    0x8(%ebx),%edx
  0xee076b9a:   lea    0x2c(%edx),%edx
  0xee076b9d:   cmp    %esi,%edx
  0xee076b9f:   je     0xee076bcb
  0xee076ba5:   push   %ecx
  0xee076ba6:   push   %esi
  0xee076ba7:   push   %ebx
  0xee076ba8:   cmpl   $0x0,-0x8(%ebp)
  0xee076bac:   je     0xee076bc3
  0xee076bb2:   push   $0xf785694c
  0xee076bb7:   call   0xee076bbc
  0xee076bbc:   pusha  
  0xee076bbd:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076bc2:   hlt    
  0xee076bc3:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee076bc8:   add    $0xc,%esp
  0xee076bcb:   pop    %edx
  0xee076bcc:   pop    %ecx
  0xee076bcd:   pop    %ebx
  0xee076bce:   pop    %eax
  0xee076bcf:   pop    %edx                         ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2334:   __ pop_ptr(rdx);
  0xee076bd0:   cmp    %eax,%edx                    ;; 2335:   __ cmpoop(rdx, rax);
  0xee076bd2:   je     0xee076ec8                   ;; 2336:   __ jcc(j_not(cc), not_taken);
  0xee076bd8:   mov    -0xc(%ebp),%ecx              ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee076bdb:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee076bde:   test   %eax,%eax
  0xee076be0:   je     0xee076bf8
  0xee076be6:   mov    0x8(%eax),%ebx
  0xee076be9:   add    $0x1,%ebx
  0xee076bec:   sbb    $0x0,%ebx
  0xee076bef:   mov    %ebx,0x8(%eax)
  0xee076bf2:   add    0xc(%eax),%eax
  0xee076bf5:   mov    %eax,-0x14(%ebp)
  0xee076bf8:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee076bfc:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee076bfe:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee076c01:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee076c03:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee076c05:   jns    0xee076d0d                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee076c0b:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee076c0e:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee076c10:   jne    0xee076cd1                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee076c16:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee076c17:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee076c18:   call   0xee076c22                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee076c1d:   jmp    0xee076cc4
  0xee076c22:   push   %ecx
  0xee076c23:   lea    0x8(%esp),%eax
  0xee076c27:   mov    %esi,-0x20(%ebp)
  0xee076c2a:   cmpl   $0x0,-0x8(%ebp)
  0xee076c2e:   je     0xee076c45
  0xee076c34:   push   $0xf78569d8
  0xee076c39:   call   0xee076c3e
  0xee076c3e:   pusha  
  0xee076c3f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076c44:   hlt    
  0xee076c45:   push   %eax
  0xee076c46:   push   %edx
  0xee076c47:   push   %ecx
  0xee076c48:   call   0xf704a910 = Thread::current()
  0xee076c4d:   pop    %ecx
  0xee076c4e:   pop    %edx
  0xee076c4f:   mov    %eax,%edi
  0xee076c51:   pop    %eax
  0xee076c52:   push   %edi
  0xee076c53:   vzeroupper 
  0xee076c56:   mov    %ebp,0x230(%edi)
  0xee076c5c:   mov    %eax,0x228(%edi)
  0xee076c62:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee076c67:   add    $0x8,%esp
  0xee076c6a:   push   %eax
  0xee076c6b:   push   %edx
  0xee076c6c:   push   %ecx
  0xee076c6d:   call   0xf704a910 = Thread::current()
  0xee076c72:   pop    %ecx
  0xee076c73:   pop    %edx
  0xee076c74:   cmp    %eax,%edi
  0xee076c76:   je     0xee076c8d
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee076c7c:   push   $0xf78b5a48
  0xee076c81:   call   0xee076c86
  0xee076c86:   pusha  
  0xee076c87:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076c8c:   hlt    
  0xee076c8d:   pop    %eax
  0xee076c8e:   movl   $0x0,0x228(%edi)
  0xee076c98:   movl   $0x0,0x230(%edi)
  0xee076ca2:   movl   $0x0,0x22c(%edi)
  0xee076cac:   vzeroupper 
  0xee076caf:   cmpl   $0x0,0x4(%edi)
  0xee076cb3:   jne    0xee05bbe0
  0xee076cb9:   mov    -0x20(%ebp),%esi
  0xee076cbc:   mov    -0x1c(%ebp),%edi
  0xee076cbf:   lea    0x0(%ebp,%edi,4),%edi
  0xee076cc3:   ret    
  0xee076cc4:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee076cc5:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee076cc6:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee076cc9:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee076ccb:   je     0xee076d0d                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee076cd1:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee076cd4:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee076cd6:   je     0xee076cf8                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee076cd8:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee076cde:   add    $0x2,%eax
  0xee076ce1:   mov    %eax,0xb8(%ebx)
  0xee076ce7:   and    0xcc(%ebx),%eax
  0xee076ced:   je     0xee076d34
  0xee076cf3:   jmp    0xee076d0d                   ;; 2212:       __ jmp(dispatch);
  0xee076cf8:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee076cfb:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee076cfe:   add    $0x2,%eax
  0xee076d01:   mov    %eax,0xc(%ecx)
  0xee076d04:   and    0x20(%ecx),%eax
  0xee076d07:   je     0xee076d34
  0xee076d0d:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee076d10:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee076d11:   push   %edx
  0xee076d12:   push   %ecx
  0xee076d13:   call   0xf704a910 = Thread::current()
  0xee076d18:   pop    %ecx
  0xee076d19:   pop    %edx
  0xee076d1a:   mov    %eax,%ecx
  0xee076d1c:   pop    %eax
  0xee076d1d:   testb  $0x1,0x288(%ecx)
  0xee076d24:   je     0xee076d2d
  0xee076d26:   jmp    *-0x8341aa0(,%ebx,4)
  0xee076d2d:   jmp    *-0x833caa0(,%ebx,4)
  0xee076d34:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee076d36:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee076d38:   call   0xee076d42                   ;; 2240:       __ call_VM(noreg,
  0xee076d3d:   jmp    0xee076de4
  0xee076d42:   push   %edx
  0xee076d43:   lea    0x8(%esp),%eax
  0xee076d47:   mov    %esi,-0x20(%ebp)
  0xee076d4a:   cmpl   $0x0,-0x8(%ebp)
  0xee076d4e:   je     0xee076d65
  0xee076d54:   push   $0xf78569d8
  0xee076d59:   call   0xee076d5e
  0xee076d5e:   pusha  
  0xee076d5f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076d64:   hlt    
  0xee076d65:   push   %eax
  0xee076d66:   push   %edx
  0xee076d67:   push   %ecx
  0xee076d68:   call   0xf704a910 = Thread::current()
  0xee076d6d:   pop    %ecx
  0xee076d6e:   pop    %edx
  0xee076d6f:   mov    %eax,%edi
  0xee076d71:   pop    %eax
  0xee076d72:   push   %edi
  0xee076d73:   vzeroupper 
  0xee076d76:   mov    %ebp,0x230(%edi)
  0xee076d7c:   mov    %eax,0x228(%edi)
  0xee076d82:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee076d87:   add    $0x8,%esp
  0xee076d8a:   push   %eax
  0xee076d8b:   push   %edx
  0xee076d8c:   push   %ecx
  0xee076d8d:   call   0xf704a910 = Thread::current()
  0xee076d92:   pop    %ecx
  0xee076d93:   pop    %edx
  0xee076d94:   cmp    %eax,%edi
  0xee076d96:   je     0xee076dad
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee076d9c:   push   $0xf78b5a48
  0xee076da1:   call   0xee076da6
  0xee076da6:   pusha  
  0xee076da7:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076dac:   hlt    
  0xee076dad:   pop    %eax
  0xee076dae:   movl   $0x0,0x228(%edi)
  0xee076db8:   movl   $0x0,0x230(%edi)
  0xee076dc2:   movl   $0x0,0x22c(%edi)
  0xee076dcc:   vzeroupper 
  0xee076dcf:   cmpl   $0x0,0x4(%edi)
  0xee076dd3:   jne    0xee05bbe0
  0xee076dd9:   mov    -0x20(%ebp),%esi
  0xee076ddc:   mov    -0x1c(%ebp),%edi
  0xee076ddf:   lea    0x0(%ebp,%edi,4),%edi
  0xee076de3:   ret    
  0xee076de4:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee076de6:   je     0xee076d0d                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee076dec:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee076df3:   jne    0xee076d0d                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee076df9:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee076dfb:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee076dfc:   push   %edx
  0xee076dfd:   push   %ecx
  0xee076dfe:   call   0xf704a910 = Thread::current()
  0xee076e03:   pop    %ecx
  0xee076e04:   pop    %edx
  0xee076e05:   mov    %eax,%ecx
  0xee076e07:   pop    %eax
  0xee076e08:   call   0xee076e12
  0xee076e0d:   jmp    0xee076eb3
  0xee076e12:   lea    0x4(%esp),%eax
  0xee076e16:   mov    %esi,-0x20(%ebp)
  0xee076e19:   cmpl   $0x0,-0x8(%ebp)
  0xee076e1d:   je     0xee076e34
  0xee076e23:   push   $0xf78569d8
  0xee076e28:   call   0xee076e2d
  0xee076e2d:   pusha  
  0xee076e2e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076e33:   hlt    
  0xee076e34:   push   %eax
  0xee076e35:   push   %edx
  0xee076e36:   push   %ecx
  0xee076e37:   call   0xf704a910 = Thread::current()
  0xee076e3c:   pop    %ecx
  0xee076e3d:   pop    %edx
  0xee076e3e:   mov    %eax,%edi
  0xee076e40:   pop    %eax
  0xee076e41:   push   %edi
  0xee076e42:   vzeroupper 
  0xee076e45:   mov    %ebp,0x230(%edi)
  0xee076e4b:   mov    %eax,0x228(%edi)
  0xee076e51:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee076e56:   add    $0x4,%esp
  0xee076e59:   push   %eax
  0xee076e5a:   push   %edx
  0xee076e5b:   push   %ecx
  0xee076e5c:   call   0xf704a910 = Thread::current()
  0xee076e61:   pop    %ecx
  0xee076e62:   pop    %edx
  0xee076e63:   cmp    %eax,%edi
  0xee076e65:   je     0xee076e7c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee076e6b:   push   $0xf78b5a48
  0xee076e70:   call   0xee076e75
  0xee076e75:   pusha  
  0xee076e76:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076e7b:   hlt    
  0xee076e7c:   pop    %eax
  0xee076e7d:   movl   $0x0,0x228(%edi)
  0xee076e87:   movl   $0x0,0x230(%edi)
  0xee076e91:   movl   $0x0,0x22c(%edi)
  0xee076e9b:   vzeroupper 
  0xee076e9e:   cmpl   $0x0,0x4(%edi)
  0xee076ea2:   jne    0xee05bbe0
  0xee076ea8:   mov    -0x20(%ebp),%esi
  0xee076eab:   mov    -0x1c(%ebp),%edi
  0xee076eae:   lea    0x0(%ebp,%edi,4),%edi
  0xee076eb2:   ret    
  0xee076eb3:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee076eb5:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee076eb8:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee076eba:   pop    %ebp
  0xee076ebb:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee076ebc:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee076ebe:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee076ec1:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee076ec2:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee076ec8:   mov    -0x14(%ebp),%eax             ;; 2338:   __ bind(not_taken);
                                                    ;; 2339:   __ profile_not_taken_branch(rax);
  0xee076ecb:   test   %eax,%eax
  0xee076ecd:   je     0xee076ee1
  0xee076ed3:   addl   $0x1,0x10(%eax)
  0xee076ed7:   sbbl   $0x0,0x10(%eax)
  0xee076edb:   add    $0x14,%eax
  0xee076ede:   mov    %eax,-0x14(%ebp)
  0xee076ee1:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee076ee5:   add    $0x3,%esi
  0xee076ee8:   jmp    *-0x833caa0(,%ebx,4)
  0xee076eef:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
goto  167 goto  [0xee076f20, 0xee07723c]  796 bytes

--------------------------------------------------------------------------------
  0xee076f20:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee076f23:   vmovss %xmm0,(%esp)
  0xee076f28:   jmp    0xee076f39                   ;; 1751:       __ jmpb(L);
  0xee076f2a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee076f2d:   vmovsd %xmm0,(%esp)
  0xee076f32:   jmp    0xee076f39                   ;; 1754:       __ jmpb(L);
  0xee076f34:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee076f35:   push   %eax
  0xee076f36:   jmp    0xee076f39                   ;; 1765:       __ jmpb(L);
  0xee076f38:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee076f39:   mov    -0xc(%ebp),%ecx              ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee076f3c:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee076f3f:   test   %eax,%eax
  0xee076f41:   je     0xee076f59
  0xee076f47:   mov    0x8(%eax),%ebx
  0xee076f4a:   add    $0x1,%ebx
  0xee076f4d:   sbb    $0x0,%ebx
  0xee076f50:   mov    %ebx,0x8(%eax)
  0xee076f53:   add    0xc(%eax),%eax
  0xee076f56:   mov    %eax,-0x14(%ebp)
  0xee076f59:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee076f5d:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee076f5f:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee076f62:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee076f64:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee076f66:   jns    0xee07706e                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee076f6c:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee076f6f:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee076f71:   jne    0xee077032                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee076f77:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee076f78:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee076f79:   call   0xee076f83                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee076f7e:   jmp    0xee077025
  0xee076f83:   push   %ecx
  0xee076f84:   lea    0x8(%esp),%eax
  0xee076f88:   mov    %esi,-0x20(%ebp)
  0xee076f8b:   cmpl   $0x0,-0x8(%ebp)
  0xee076f8f:   je     0xee076fa6
  0xee076f95:   push   $0xf78569d8
  0xee076f9a:   call   0xee076f9f
  0xee076f9f:   pusha  
  0xee076fa0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076fa5:   hlt    
  0xee076fa6:   push   %eax
  0xee076fa7:   push   %edx
  0xee076fa8:   push   %ecx
  0xee076fa9:   call   0xf704a910 = Thread::current()
  0xee076fae:   pop    %ecx
  0xee076faf:   pop    %edx
  0xee076fb0:   mov    %eax,%edi
  0xee076fb2:   pop    %eax
  0xee076fb3:   push   %edi
  0xee076fb4:   vzeroupper 
  0xee076fb7:   mov    %ebp,0x230(%edi)
  0xee076fbd:   mov    %eax,0x228(%edi)
  0xee076fc3:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee076fc8:   add    $0x8,%esp
  0xee076fcb:   push   %eax
  0xee076fcc:   push   %edx
  0xee076fcd:   push   %ecx
  0xee076fce:   call   0xf704a910 = Thread::current()
  0xee076fd3:   pop    %ecx
  0xee076fd4:   pop    %edx
  0xee076fd5:   cmp    %eax,%edi
  0xee076fd7:   je     0xee076fee
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee076fdd:   push   $0xf78b5a48
  0xee076fe2:   call   0xee076fe7
  0xee076fe7:   pusha  
  0xee076fe8:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee076fed:   hlt    
  0xee076fee:   pop    %eax
  0xee076fef:   movl   $0x0,0x228(%edi)
  0xee076ff9:   movl   $0x0,0x230(%edi)
  0xee077003:   movl   $0x0,0x22c(%edi)
  0xee07700d:   vzeroupper 
  0xee077010:   cmpl   $0x0,0x4(%edi)
  0xee077014:   jne    0xee05bbe0
  0xee07701a:   mov    -0x20(%ebp),%esi
  0xee07701d:   mov    -0x1c(%ebp),%edi
  0xee077020:   lea    0x0(%ebp,%edi,4),%edi
  0xee077024:   ret    
  0xee077025:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee077026:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee077027:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee07702a:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee07702c:   je     0xee07706e                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee077032:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee077035:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee077037:   je     0xee077059                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee077039:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee07703f:   add    $0x2,%eax
  0xee077042:   mov    %eax,0xb8(%ebx)
  0xee077048:   and    0xcc(%ebx),%eax
  0xee07704e:   je     0xee077095
  0xee077054:   jmp    0xee07706e                   ;; 2212:       __ jmp(dispatch);
  0xee077059:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee07705c:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee07705f:   add    $0x2,%eax
  0xee077062:   mov    %eax,0xc(%ecx)
  0xee077065:   and    0x20(%ecx),%eax
  0xee077068:   je     0xee077095
  0xee07706e:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee077071:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee077072:   push   %edx
  0xee077073:   push   %ecx
  0xee077074:   call   0xf704a910 = Thread::current()
  0xee077079:   pop    %ecx
  0xee07707a:   pop    %edx
  0xee07707b:   mov    %eax,%ecx
  0xee07707d:   pop    %eax
  0xee07707e:   testb  $0x1,0x288(%ecx)
  0xee077085:   je     0xee07708e
  0xee077087:   jmp    *-0x8341aa0(,%ebx,4)
  0xee07708e:   jmp    *-0x833caa0(,%ebx,4)
  0xee077095:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee077097:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee077099:   call   0xee0770a3                   ;; 2240:       __ call_VM(noreg,
  0xee07709e:   jmp    0xee077145
  0xee0770a3:   push   %edx
  0xee0770a4:   lea    0x8(%esp),%eax
  0xee0770a8:   mov    %esi,-0x20(%ebp)
  0xee0770ab:   cmpl   $0x0,-0x8(%ebp)
  0xee0770af:   je     0xee0770c6
  0xee0770b5:   push   $0xf78569d8
  0xee0770ba:   call   0xee0770bf
  0xee0770bf:   pusha  
  0xee0770c0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0770c5:   hlt    
  0xee0770c6:   push   %eax
  0xee0770c7:   push   %edx
  0xee0770c8:   push   %ecx
  0xee0770c9:   call   0xf704a910 = Thread::current()
  0xee0770ce:   pop    %ecx
  0xee0770cf:   pop    %edx
  0xee0770d0:   mov    %eax,%edi
  0xee0770d2:   pop    %eax
  0xee0770d3:   push   %edi
  0xee0770d4:   vzeroupper 
  0xee0770d7:   mov    %ebp,0x230(%edi)
  0xee0770dd:   mov    %eax,0x228(%edi)
  0xee0770e3:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee0770e8:   add    $0x8,%esp
  0xee0770eb:   push   %eax
  0xee0770ec:   push   %edx
  0xee0770ed:   push   %ecx
  0xee0770ee:   call   0xf704a910 = Thread::current()
  0xee0770f3:   pop    %ecx
  0xee0770f4:   pop    %edx
  0xee0770f5:   cmp    %eax,%edi
  0xee0770f7:   je     0xee07710e
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee0770fd:   push   $0xf78b5a48
  0xee077102:   call   0xee077107
  0xee077107:   pusha  
  0xee077108:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07710d:   hlt    
  0xee07710e:   pop    %eax
  0xee07710f:   movl   $0x0,0x228(%edi)
  0xee077119:   movl   $0x0,0x230(%edi)
  0xee077123:   movl   $0x0,0x22c(%edi)
  0xee07712d:   vzeroupper 
  0xee077130:   cmpl   $0x0,0x4(%edi)
  0xee077134:   jne    0xee05bbe0
  0xee07713a:   mov    -0x20(%ebp),%esi
  0xee07713d:   mov    -0x1c(%ebp),%edi
  0xee077140:   lea    0x0(%ebp,%edi,4),%edi
  0xee077144:   ret    
  0xee077145:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee077147:   je     0xee07706e                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee07714d:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee077154:   jne    0xee07706e                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee07715a:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee07715c:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee07715d:   push   %edx
  0xee07715e:   push   %ecx
  0xee07715f:   call   0xf704a910 = Thread::current()
  0xee077164:   pop    %ecx
  0xee077165:   pop    %edx
  0xee077166:   mov    %eax,%ecx
  0xee077168:   pop    %eax
  0xee077169:   call   0xee077173
  0xee07716e:   jmp    0xee077214
  0xee077173:   lea    0x4(%esp),%eax
  0xee077177:   mov    %esi,-0x20(%ebp)
  0xee07717a:   cmpl   $0x0,-0x8(%ebp)
  0xee07717e:   je     0xee077195
  0xee077184:   push   $0xf78569d8
  0xee077189:   call   0xee07718e
  0xee07718e:   pusha  
  0xee07718f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077194:   hlt    
  0xee077195:   push   %eax
  0xee077196:   push   %edx
  0xee077197:   push   %ecx
  0xee077198:   call   0xf704a910 = Thread::current()
  0xee07719d:   pop    %ecx
  0xee07719e:   pop    %edx
  0xee07719f:   mov    %eax,%edi
  0xee0771a1:   pop    %eax
  0xee0771a2:   push   %edi
  0xee0771a3:   vzeroupper 
  0xee0771a6:   mov    %ebp,0x230(%edi)
  0xee0771ac:   mov    %eax,0x228(%edi)
  0xee0771b2:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee0771b7:   add    $0x4,%esp
  0xee0771ba:   push   %eax
  0xee0771bb:   push   %edx
  0xee0771bc:   push   %ecx
  0xee0771bd:   call   0xf704a910 = Thread::current()
  0xee0771c2:   pop    %ecx
  0xee0771c3:   pop    %edx
  0xee0771c4:   cmp    %eax,%edi
  0xee0771c6:   je     0xee0771dd
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee0771cc:   push   $0xf78b5a48
  0xee0771d1:   call   0xee0771d6
  0xee0771d6:   pusha  
  0xee0771d7:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0771dc:   hlt    
  0xee0771dd:   pop    %eax
  0xee0771de:   movl   $0x0,0x228(%edi)
  0xee0771e8:   movl   $0x0,0x230(%edi)
  0xee0771f2:   movl   $0x0,0x22c(%edi)
  0xee0771fc:   vzeroupper 
  0xee0771ff:   cmpl   $0x0,0x4(%edi)
  0xee077203:   jne    0xee05bbe0
  0xee077209:   mov    -0x20(%ebp),%esi
  0xee07720c:   mov    -0x1c(%ebp),%edi
  0xee07720f:   lea    0x0(%ebp,%edi,4),%edi
  0xee077213:   ret    
  0xee077214:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee077216:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee077219:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee07721b:   pop    %ebp
  0xee07721c:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee07721d:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee07721f:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee077222:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee077223:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee077229:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee07722e:   call   0xee077233
  0xee077233:   pusha  
  0xee077234:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077239:   hlt    
  0xee07723a:   nop
  0xee07723b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
jsr  168 jsr  [0xee077260, 0xee0772e4]  132 bytes

--------------------------------------------------------------------------------
  0xee077260:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee077263:   vmovss %xmm0,(%esp)
  0xee077268:   jmp    0xee077279                   ;; 1751:       __ jmpb(L);
  0xee07726a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07726d:   vmovsd %xmm0,(%esp)
  0xee077272:   jmp    0xee077279                   ;; 1754:       __ jmpb(L);
  0xee077274:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee077275:   push   %eax
  0xee077276:   jmp    0xee077279                   ;; 1765:       __ jmpb(L);
  0xee077278:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee077279:   mov    -0xc(%ebp),%ecx              ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee07727c:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee07727f:   test   %eax,%eax
  0xee077281:   je     0xee077299
  0xee077287:   mov    0x8(%eax),%ebx
  0xee07728a:   add    $0x1,%ebx
  0xee07728d:   sbb    $0x0,%ebx
  0xee077290:   mov    %ebx,0x8(%eax)
  0xee077293:   add    0xc(%eax),%eax
  0xee077296:   mov    %eax,-0x14(%ebp)
  0xee077299:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee07729d:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee07729f:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee0772a2:   movzbl (%esi,%edx,1),%ebx           ;; 2150:     __ load_unsigned_byte(rbx, Address(rbcp, rdx, Address::times_1, 0));
  0xee0772a6:   lea    -0x29(%esi),%eax             ;; 2153:     __ lea(rax, at_bcp((is_wide ? 5 : 3) -
  0xee0772a9:   sub    0x8(%ecx),%eax               ;; 2155:     __ subptr(rax, Address(rcx, Method::const_offset()));
  0xee0772ac:   add    %edx,%esi                    ;; 2157:     __ addptr(rbcp, rdx);
  0xee0772ae:   push   %eax                         ;; 2159:     __ push_i(rax);
 ;; Thread-local Safepoint poll
  0xee0772af:   push   %eax                         ;; 2160:     __ dispatch_only(vtos, true);
  0xee0772b0:   push   %edx
  0xee0772b1:   push   %ecx
  0xee0772b2:   call   0xf704a910 = Thread::current()
  0xee0772b7:   pop    %ecx
  0xee0772b8:   pop    %edx
  0xee0772b9:   mov    %eax,%ecx
  0xee0772bb:   pop    %eax
  0xee0772bc:   testb  $0x1,0x288(%ecx)
  0xee0772c3:   je     0xee0772cc
  0xee0772c5:   jmp    *-0x8341aa0(,%ebx,4)
  0xee0772cc:   jmp    *-0x833caa0(,%ebx,4)
  0xee0772d3:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee0772d8:   call   0xee0772dd
  0xee0772dd:   pusha  
  0xee0772de:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0772e3:   hlt    
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ret  169 ret  [0xee077300, 0xee0775a8]  680 bytes

--------------------------------------------------------------------------------
  0xee077300:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee077303:   vmovss %xmm0,(%esp)
  0xee077308:   jmp    0xee077319                   ;; 1751:       __ jmpb(L);
  0xee07730a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07730d:   vmovsd %xmm0,(%esp)
  0xee077312:   jmp    0xee077319                   ;; 1754:       __ jmpb(L);
  0xee077314:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee077315:   push   %eax
  0xee077316:   jmp    0xee077319                   ;; 1765:       __ jmpb(L);
  0xee077318:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee077319:   movzbl 0x1(%esi),%ebx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  613:   __ load_unsigned_byte(reg, at_bcp(offset));
  0xee07731d:   neg    %ebx                         ;;  614:   __ negptr(reg);
  0xee07731f:   mov    (%edi,%ebx,4),%ebx           ;; 2346:   NOT_LP64(__ movptr(rbx, iaddress(rbx)));
  0xee077322:   mov    -0x14(%ebp),%ecx             ;; 2347:   __ profile_ret(rbx, rcx);
  0xee077325:   test   %ecx,%ecx
  0xee077327:   je     0xee07741b
  0xee07732d:   addl   $0x1,0x8(%ecx)
  0xee077331:   sbbl   $0x0,0x8(%ecx)
  0xee077335:   cmp    0xc(%ecx),%ebx
  0xee077338:   jne    0xee077351
  0xee07733e:   addl   $0x1,0x10(%ecx)
  0xee077342:   sbbl   $0x0,0x10(%ecx)
  0xee077346:   add    0x14(%ecx),%ecx
  0xee077349:   mov    %ecx,-0x14(%ebp)
  0xee07734c:   jmp    0xee07741b
  0xee077351:   cmp    0x18(%ecx),%ebx
  0xee077354:   jne    0xee07736d
  0xee07735a:   addl   $0x1,0x1c(%ecx)
  0xee07735e:   sbbl   $0x0,0x1c(%ecx)
  0xee077362:   add    0x20(%ecx),%ecx
  0xee077365:   mov    %ecx,-0x14(%ebp)
  0xee077368:   jmp    0xee07741b
  0xee07736d:   push   %ebx
  0xee07736e:   call   0xee077378
  0xee077373:   jmp    0xee07741a
  0xee077378:   push   %ebx
  0xee077379:   lea    0x8(%esp),%eax
  0xee07737d:   mov    %esi,-0x20(%ebp)
  0xee077380:   cmpl   $0x0,-0x8(%ebp)
  0xee077384:   je     0xee07739b
  0xee07738a:   push   $0xf78569d8
  0xee07738f:   call   0xee077394
  0xee077394:   pusha  
  0xee077395:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07739a:   hlt    
  0xee07739b:   push   %eax
  0xee07739c:   push   %edx
  0xee07739d:   push   %ecx
  0xee07739e:   call   0xf704a910 = Thread::current()
  0xee0773a3:   pop    %ecx
  0xee0773a4:   pop    %edx
  0xee0773a5:   mov    %eax,%edi
  0xee0773a7:   pop    %eax
  0xee0773a8:   push   %edi
  0xee0773a9:   vzeroupper 
  0xee0773ac:   mov    %ebp,0x230(%edi)
  0xee0773b2:   mov    %eax,0x228(%edi)
  0xee0773b8:   call   0xf6c0d960 = InterpreterRuntime::update_mdp_for_ret(JavaThread*, int)
  0xee0773bd:   add    $0x8,%esp
  0xee0773c0:   push   %eax
  0xee0773c1:   push   %edx
  0xee0773c2:   push   %ecx
  0xee0773c3:   call   0xf704a910 = Thread::current()
  0xee0773c8:   pop    %ecx
  0xee0773c9:   pop    %edx
  0xee0773ca:   cmp    %eax,%edi
  0xee0773cc:   je     0xee0773e3
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee0773d2:   push   $0xf78b5a48
  0xee0773d7:   call   0xee0773dc
  0xee0773dc:   pusha  
  0xee0773dd:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0773e2:   hlt    
  0xee0773e3:   pop    %eax
  0xee0773e4:   movl   $0x0,0x228(%edi)
  0xee0773ee:   movl   $0x0,0x230(%edi)
  0xee0773f8:   movl   $0x0,0x22c(%edi)
  0xee077402:   vzeroupper 
  0xee077405:   cmpl   $0x0,0x4(%edi)
  0xee077409:   jne    0xee05bbe0
  0xee07740f:   mov    -0x20(%ebp),%esi
  0xee077412:   mov    -0x1c(%ebp),%edi
  0xee077415:   lea    0x0(%ebp,%edi,4),%edi
  0xee077419:   ret    
  0xee07741a:   pop    %ebx
  0xee07741b:   mov    -0xc(%ebp),%eax              ;; 2348:   __ get_method(rax);
  0xee07741e:   mov    0x8(%eax),%esi               ;; 2349:   __ movptr(rbcp, Address(rax, Method::const_offset()));
  0xee077421:   lea    0x2c(%esi,%ebx,1),%esi       ;; 2350:   __ lea(rbcp, Address(rbcp, rbx, Address::times_1,
  0xee077425:   movzbl (%esi),%ebx                  ;; 2352:   __ dispatch_next(vtos, 0, true);
 ;; Thread-local Safepoint poll
  0xee077428:   push   %eax
  0xee077429:   push   %edx
  0xee07742a:   push   %ecx
  0xee07742b:   call   0xf704a910 = Thread::current()
  0xee077430:   pop    %ecx
  0xee077431:   pop    %edx
  0xee077432:   mov    %eax,%ecx
  0xee077434:   pop    %eax
  0xee077435:   testb  $0x1,0x288(%ecx)
  0xee07743c:   je     0xee077445
  0xee07743e:   jmp    *-0x8341aa0(,%ebx,4)
  0xee077445:   jmp    *-0x833caa0(,%ebx,4)
  0xee07744c:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee077451:   call   0xee077456
  0xee077456:   pusha  
  0xee077457:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07745c:   hlt    
  0xee07745d:   movzwl 0x2(%esi),%ebx               ;;  335:   wep = __ pc(); generate_and_dispatch(t);
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  708:   __ load_unsigned_short(reg, at_bcp(2));
  0xee077461:   bswap  %ebx                         ;;  709:   __ bswapl(reg);
  0xee077463:   shr    $0x10,%ebx                   ;;  710:   __ shrl(reg, 16);
  0xee077466:   neg    %ebx                         ;;  711:   __ negptr(reg);
  0xee077468:   mov    (%edi,%ebx,4),%ebx           ;; 2358:   __ movptr(rbx, aaddress(rbx)); // get return bci, compute return bcp
  0xee07746b:   mov    -0x14(%ebp),%ecx             ;; 2359:   __ profile_ret(rbx, rcx);
  0xee07746e:   test   %ecx,%ecx
  0xee077470:   je     0xee077564
  0xee077476:   addl   $0x1,0x8(%ecx)
  0xee07747a:   sbbl   $0x0,0x8(%ecx)
  0xee07747e:   cmp    0xc(%ecx),%ebx
  0xee077481:   jne    0xee07749a
  0xee077487:   addl   $0x1,0x10(%ecx)
  0xee07748b:   sbbl   $0x0,0x10(%ecx)
  0xee07748f:   add    0x14(%ecx),%ecx
  0xee077492:   mov    %ecx,-0x14(%ebp)
  0xee077495:   jmp    0xee077564
  0xee07749a:   cmp    0x18(%ecx),%ebx
  0xee07749d:   jne    0xee0774b6
  0xee0774a3:   addl   $0x1,0x1c(%ecx)
  0xee0774a7:   sbbl   $0x0,0x1c(%ecx)
  0xee0774ab:   add    0x20(%ecx),%ecx
  0xee0774ae:   mov    %ecx,-0x14(%ebp)
  0xee0774b1:   jmp    0xee077564
  0xee0774b6:   push   %ebx
  0xee0774b7:   call   0xee0774c1
  0xee0774bc:   jmp    0xee077563
  0xee0774c1:   push   %ebx
  0xee0774c2:   lea    0x8(%esp),%eax
  0xee0774c6:   mov    %esi,-0x20(%ebp)
  0xee0774c9:   cmpl   $0x0,-0x8(%ebp)
  0xee0774cd:   je     0xee0774e4
  0xee0774d3:   push   $0xf78569d8
  0xee0774d8:   call   0xee0774dd
  0xee0774dd:   pusha  
  0xee0774de:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0774e3:   hlt    
  0xee0774e4:   push   %eax
  0xee0774e5:   push   %edx
  0xee0774e6:   push   %ecx
  0xee0774e7:   call   0xf704a910 = Thread::current()
  0xee0774ec:   pop    %ecx
  0xee0774ed:   pop    %edx
  0xee0774ee:   mov    %eax,%edi
  0xee0774f0:   pop    %eax
  0xee0774f1:   push   %edi
  0xee0774f2:   vzeroupper 
  0xee0774f5:   mov    %ebp,0x230(%edi)
  0xee0774fb:   mov    %eax,0x228(%edi)
  0xee077501:   call   0xf6c0d960 = InterpreterRuntime::update_mdp_for_ret(JavaThread*, int)
  0xee077506:   add    $0x8,%esp
  0xee077509:   push   %eax
  0xee07750a:   push   %edx
  0xee07750b:   push   %ecx
  0xee07750c:   call   0xf704a910 = Thread::current()
  0xee077511:   pop    %ecx
  0xee077512:   pop    %edx
  0xee077513:   cmp    %eax,%edi
  0xee077515:   je     0xee07752c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07751b:   push   $0xf78b5a48
  0xee077520:   call   0xee077525
  0xee077525:   pusha  
  0xee077526:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07752b:   hlt    
  0xee07752c:   pop    %eax
  0xee07752d:   movl   $0x0,0x228(%edi)
  0xee077537:   movl   $0x0,0x230(%edi)
  0xee077541:   movl   $0x0,0x22c(%edi)
  0xee07754b:   vzeroupper 
  0xee07754e:   cmpl   $0x0,0x4(%edi)
  0xee077552:   jne    0xee05bbe0
  0xee077558:   mov    -0x20(%ebp),%esi
  0xee07755b:   mov    -0x1c(%ebp),%edi
  0xee07755e:   lea    0x0(%ebp,%edi,4),%edi
  0xee077562:   ret    
  0xee077563:   pop    %ebx
  0xee077564:   mov    -0xc(%ebp),%eax              ;; 2360:   __ get_method(rax);
  0xee077567:   mov    0x8(%eax),%esi               ;; 2361:   __ movptr(rbcp, Address(rax, Method::const_offset()));
  0xee07756a:   lea    0x2c(%esi,%ebx,1),%esi       ;; 2362:   __ lea(rbcp, Address(rbcp, rbx, Address::times_1, ConstMethod::codes_offset()));
  0xee07756e:   movzbl (%esi),%ebx                  ;; 2363:   __ dispatch_next(vtos, 0, true);
 ;; Thread-local Safepoint poll
  0xee077571:   push   %eax
  0xee077572:   push   %edx
  0xee077573:   push   %ecx
  0xee077574:   call   0xf704a910 = Thread::current()
  0xee077579:   pop    %ecx
  0xee07757a:   pop    %edx
  0xee07757b:   mov    %eax,%ecx
  0xee07757d:   pop    %eax
  0xee07757e:   testb  $0x1,0x288(%ecx)
  0xee077585:   je     0xee07758e
  0xee077587:   jmp    *-0x8341aa0(,%ebx,4)
  0xee07758e:   jmp    *-0x833caa0(,%ebx,4)
  0xee077595:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee07759a:   call   0xee07759f
  0xee07759f:   pusha  
  0xee0775a0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0775a5:   hlt    
  0xee0775a6:   nop
  0xee0775a7:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
tableswitch  170 tableswitch  [0xee0775c0, 0xee077668]  168 bytes

--------------------------------------------------------------------------------
  0xee0775c0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee0775c1:   lea    0x4(%esi),%ebx               ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2371:   __ lea(rbx, at_bcp(BytesPerInt));
  0xee0775c4:   and    $0xfffffffc,%ebx             ;; 2372:   __ andptr(rbx, -BytesPerInt);
  0xee0775c7:   mov    0x4(%ebx),%ecx               ;; 2374:   __ movl(rcx, Address(rbx, BytesPerInt));
  0xee0775ca:   mov    0x8(%ebx),%edx               ;; 2375:   __ movl(rdx, Address(rbx, 2 * BytesPerInt));
  0xee0775cd:   bswap  %ecx                         ;; 2376:   __ bswapl(rcx);
  0xee0775cf:   bswap  %edx                         ;; 2377:   __ bswapl(rdx);
  0xee0775d1:   cmp    %ecx,%eax                    ;; 2379:   __ cmpl(rax, rcx);
  0xee0775d3:   jl     0xee077638                   ;; 2380:   __ jcc(Assembler::less, default_case);
  0xee0775d9:   cmp    %edx,%eax                    ;; 2381:   __ cmpl(rax, rdx);
  0xee0775db:   jg     0xee077638                   ;; 2382:   __ jcc(Assembler::greater, default_case);
  0xee0775e1:   sub    %ecx,%eax                    ;; 2384:   __ subl(rax, rcx);
  0xee0775e3:   mov    0xc(%ebx,%eax,4),%edx        ;; 2385:   __ movl(rdx, Address(rbx, rax, Address::times_4, 3 * BytesPerInt));
  0xee0775e7:   mov    -0x14(%ebp),%ebx             ;; 2386:   __ profile_switch_case(rax, rbx, rcx);
  0xee0775ea:   test   %ebx,%ebx
  0xee0775ec:   je     0xee07760c
  0xee0775f2:   mov    $0x8,%ecx
  0xee0775f7:   imul   %ecx,%eax
  0xee0775fa:   add    $0x14,%eax
  0xee0775fd:   addl   $0x1,(%ebx,%eax,1)
  0xee077601:   sbbl   $0x0,(%ebx,%eax,1)
  0xee077605:   add    0x4(%ebx,%eax,1),%ebx
  0xee077609:   mov    %ebx,-0x14(%ebp)
  0xee07760c:   bswap  %edx                         ;; 2388:   __ bind(continue_execution);
                                                    ;; 2389:   __ bswapl(rdx);
  0xee07760e:   movzbl (%esi,%edx,1),%ebx           ;; 2391:   __ load_unsigned_byte(rbx, Address(rbcp, rdx, Address::times_1));
  0xee077612:   add    %edx,%esi                    ;; 2392:   __ addptr(rbcp, rdx);
 ;; Thread-local Safepoint poll
  0xee077614:   push   %eax                         ;; 2393:   __ dispatch_only(vtos, true);
  0xee077615:   push   %edx
  0xee077616:   push   %ecx
  0xee077617:   call   0xf704a910 = Thread::current()
  0xee07761c:   pop    %ecx
  0xee07761d:   pop    %edx
  0xee07761e:   mov    %eax,%ecx
  0xee077620:   pop    %eax
  0xee077621:   testb  $0x1,0x288(%ecx)
  0xee077628:   je     0xee077631
  0xee07762a:   jmp    *-0x8341aa0(,%ebx,4)
  0xee077631:   jmp    *-0x833caa0(,%ebx,4)
  0xee077638:   mov    -0x14(%ebp),%eax             ;; 2395:   __ bind(default_case);
                                                    ;; 2396:   __ profile_switch_default(rax);
  0xee07763b:   test   %eax,%eax
  0xee07763d:   je     0xee077651
  0xee077643:   addl   $0x1,0xc(%eax)
  0xee077647:   sbbl   $0x0,0xc(%eax)
  0xee07764b:   add    0x10(%eax),%eax
  0xee07764e:   mov    %eax,-0x14(%ebp)
  0xee077651:   mov    (%ebx),%edx                  ;; 2397:   __ movl(rdx, Address(rbx, 0));
  0xee077653:   jmp    0xee07760c                   ;; 2398:   __ jmp(continue_execution);
  0xee077655:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee07765a:   call   0xee07765f
  0xee07765f:   pusha  
  0xee077660:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077665:   hlt    
  0xee077666:   nop
  0xee077667:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lookupswitch  171 lookupswitch  [0xee077680, 0xee0776a4]  36 bytes

--------------------------------------------------------------------------------
  0xee077680:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee077681:   push   $0xf7924c2c                  ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2403:   __ stop("lookupswitch bytecode should have been rewritten");
  0xee077686:   call   0xee07768b
  0xee07768b:   pusha  
  0xee07768c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077691:   hlt    
  0xee077692:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee077697:   call   0xee07769c
  0xee07769c:   pusha  
  0xee07769d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0776a2:   hlt    
  0xee0776a3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ireturn  172 ireturn  [0xee0776c0, 0xee077be0]  1312 bytes

--------------------------------------------------------------------------------
  0xee0776c0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
 ;; Thread-local Safepoint poll
  0xee0776c1:   push   %eax                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2585:     NOT_PRODUCT(__ block_comment("Thread-local Safepoint poll"));
                                                    ;; 2590:     __ get_thread(thread);
  0xee0776c2:   push   %edx
  0xee0776c3:   push   %ecx
  0xee0776c4:   call   0xf704a910 = Thread::current()
  0xee0776c9:   pop    %ecx
  0xee0776ca:   pop    %edx
  0xee0776cb:   mov    %eax,%edi
  0xee0776cd:   pop    %eax
  0xee0776ce:   testb  $0x1,0x288(%edi)             ;; 2591:     __ testb(Address(thread, JavaThread::polling_word_offset()), SafepointMechanism::poll_bit());
  0xee0776d5:   je     0xee077788                   ;; 2593:     __ jcc(Assembler::zero, no_safepoint);
  0xee0776db:   push   %eax                         ;; 2594:     __ push(state);
  0xee0776dc:   call   0xee0776e6                   ;; 2595:     __ push_cont_fastpath();
                                                    ;; 2596:     __ call_VM(noreg, CAST_FROM_FN_PTR(address,
  0xee0776e1:   jmp    0xee077787
  0xee0776e6:   lea    0x4(%esp),%eax
  0xee0776ea:   mov    %esi,-0x20(%ebp)
  0xee0776ed:   cmpl   $0x0,-0x8(%ebp)
  0xee0776f1:   je     0xee077708
  0xee0776f7:   push   $0xf78569d8
  0xee0776fc:   call   0xee077701
  0xee077701:   pusha  
  0xee077702:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077707:   hlt    
  0xee077708:   push   %eax
  0xee077709:   push   %edx
  0xee07770a:   push   %ecx
  0xee07770b:   call   0xf704a910 = Thread::current()
  0xee077710:   pop    %ecx
  0xee077711:   pop    %edx
  0xee077712:   mov    %eax,%edi
  0xee077714:   pop    %eax
  0xee077715:   push   %edi
  0xee077716:   vzeroupper 
  0xee077719:   mov    %ebp,0x230(%edi)
  0xee07771f:   mov    %eax,0x228(%edi)
  0xee077725:   call   0xf6c0de90 = InterpreterRuntime::at_safepoint(JavaThread*)
  0xee07772a:   add    $0x4,%esp
  0xee07772d:   push   %eax
  0xee07772e:   push   %edx
  0xee07772f:   push   %ecx
  0xee077730:   call   0xf704a910 = Thread::current()
  0xee077735:   pop    %ecx
  0xee077736:   pop    %edx
  0xee077737:   cmp    %eax,%edi
  0xee077739:   je     0xee077750
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07773f:   push   $0xf78b5a48
  0xee077744:   call   0xee077749
  0xee077749:   pusha  
  0xee07774a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07774f:   hlt    
  0xee077750:   pop    %eax
  0xee077751:   movl   $0x0,0x228(%edi)
  0xee07775b:   movl   $0x0,0x230(%edi)
  0xee077765:   movl   $0x0,0x22c(%edi)
  0xee07776f:   vzeroupper 
  0xee077772:   cmpl   $0x0,0x4(%edi)
  0xee077776:   jne    0xee05bbe0
  0xee07777c:   mov    -0x20(%ebp),%esi
  0xee07777f:   mov    -0x1c(%ebp),%edi
  0xee077782:   lea    0x0(%ebp,%edi,4),%edi
  0xee077786:   ret    
  0xee077787:   pop    %eax                         ;; 2598:     __ pop_cont_fastpath();
                                                    ;; 2599:     __ pop(state);
  0xee077788:   mov    -0xc(%ebp),%ecx              ;; 2600:     __ bind(no_safepoint);
                                                    ;; 2607:     __ narrow(rax);
  0xee07778b:   mov    0x8(%ecx),%ecx
  0xee07778e:   movzbl 0x16(%ecx),%ecx
  0xee077792:   cmp    $0xa,%ecx
  0xee077795:   je     0xee0777d9
  0xee07779b:   cmp    $0x4,%ecx
  0xee07779e:   jne    0xee0777ac
  0xee0777a4:   and    $0x1,%eax
  0xee0777a7:   jmp    0xee0777d9
  0xee0777ac:   cmp    $0x8,%ecx
  0xee0777af:   jne    0xee0777c0
  0xee0777b5:   shl    $0x18,%eax
  0xee0777b8:   sar    $0x18,%eax
  0xee0777bb:   jmp    0xee0777d9
  0xee0777c0:   cmp    $0x5,%ecx
  0xee0777c3:   jne    0xee0777d3
  0xee0777c9:   and    $0xffff,%eax
  0xee0777ce:   jmp    0xee0777d9
  0xee0777d3:   shl    $0x10,%eax
  0xee0777d6:   sar    $0x10,%eax
  0xee0777d9:   push   %eax                         ;; 2609:   __ remove_activation(state, rbcp);
  0xee0777da:   push   %edx
  0xee0777db:   push   %ecx
  0xee0777dc:   call   0xf704a910 = Thread::current()
  0xee0777e1:   pop    %ecx
  0xee0777e2:   pop    %edx
  0xee0777e3:   mov    %eax,%ecx
  0xee0777e5:   pop    %eax
  0xee0777e6:   cmp    0x288(%ecx),%ebp
  0xee0777ec:   ja     0xee0777f7
  0xee0777f2:   jmp    0xee077849
  0xee0777f7:   push   %eax
  0xee0777f8:   vzeroupper 
  0xee0777fb:   mov    %ebp,0x230(%ecx)
  0xee077801:   movl   $0xee0777f8,0x22c(%ecx)
  0xee07780b:   mov    %esp,0x228(%ecx)
  0xee077811:   push   %ecx
  0xee077812:   call   0xf6c0e120 = InterpreterRuntime::at_unwind(JavaThread*)
  0xee077817:   add    $0x4,%esp
  0xee07781a:   push   %eax
  0xee07781b:   push   %edx
  0xee07781c:   push   %ecx
  0xee07781d:   call   0xf704a910 = Thread::current()
  0xee077822:   pop    %ecx
  0xee077823:   pop    %edx
  0xee077824:   mov    %eax,%ecx
  0xee077826:   pop    %eax
  0xee077827:   movl   $0x0,0x228(%ecx)
  0xee077831:   movl   $0x0,0x230(%ecx)
  0xee07783b:   movl   $0x0,0x22c(%ecx)
  0xee077845:   vzeroupper 
  0xee077848:   pop    %eax
  0xee077849:   mov    0x2b1(%ecx),%bl
  0xee07784f:   movb   $0x0,0x2b1(%ecx)
  0xee077856:   mov    -0xc(%ebp),%ecx
  0xee077859:   mov    0x18(%ecx),%ecx
  0xee07785c:   test   $0x20,%cl
  0xee07785f:   je     0xee0779a0
  0xee077865:   test   $0xff,%bl
  0xee077868:   jne    0xee077a7a
  0xee07786e:   push   %eax
  0xee07786f:   lea    -0x2c(%ebp),%edx
  0xee077872:   mov    0x4(%edx),%eax
  0xee077875:   test   %eax,%eax
  0xee077877:   jne    0xee07793c
  0xee07787d:   pop    %eax
  0xee07787e:   emms   
  0xee077880:   call   0xee07788a
  0xee077885:   jmp    0xee07792b
  0xee07788a:   lea    0x4(%esp),%eax
  0xee07788e:   mov    %esi,-0x20(%ebp)
  0xee077891:   cmpl   $0x0,-0x8(%ebp)
  0xee077895:   je     0xee0778ac
  0xee07789b:   push   $0xf78569d8
  0xee0778a0:   call   0xee0778a5
  0xee0778a5:   pusha  
  0xee0778a6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0778ab:   hlt    
  0xee0778ac:   push   %eax
  0xee0778ad:   push   %edx
  0xee0778ae:   push   %ecx
  0xee0778af:   call   0xf704a910 = Thread::current()
  0xee0778b4:   pop    %ecx
  0xee0778b5:   pop    %edx
  0xee0778b6:   mov    %eax,%edi
  0xee0778b8:   pop    %eax
  0xee0778b9:   push   %edi
  0xee0778ba:   vzeroupper 
  0xee0778bd:   mov    %ebp,0x230(%edi)
  0xee0778c3:   mov    %eax,0x228(%edi)
  0xee0778c9:   call   0xf6c0c900 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0xee0778ce:   add    $0x4,%esp
  0xee0778d1:   push   %eax
  0xee0778d2:   push   %edx
  0xee0778d3:   push   %ecx
  0xee0778d4:   call   0xf704a910 = Thread::current()
  0xee0778d9:   pop    %ecx
  0xee0778da:   pop    %edx
  0xee0778db:   cmp    %eax,%edi
  0xee0778dd:   je     0xee0778f4
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee0778e3:   push   $0xf78b5a48
  0xee0778e8:   call   0xee0778ed
  0xee0778ed:   pusha  
  0xee0778ee:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0778f3:   hlt    
  0xee0778f4:   pop    %eax
  0xee0778f5:   movl   $0x0,0x228(%edi)
  0xee0778ff:   movl   $0x0,0x230(%edi)
  0xee077909:   movl   $0x0,0x22c(%edi)
  0xee077913:   vzeroupper 
  0xee077916:   cmpl   $0x0,0x4(%edi)
  0xee07791a:   jne    0xee05bbe0
  0xee077920:   mov    -0x20(%ebp),%esi
  0xee077923:   mov    -0x1c(%ebp),%edi
  0xee077926:   lea    0x0(%ebp,%edi,4),%edi
  0xee07792a:   ret    
  0xee07792b:   push   $0xf77a6b02
  0xee077930:   call   0xee077935
  0xee077935:   pusha  
  0xee077936:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07793b:   hlt    
  0xee07793c:   mov    %esi,-0x20(%ebp)
  0xee07793f:   lea    (%edx),%eax
  0xee077941:   mov    0x4(%edx),%ecx
  0xee077944:   movl   $0x0,0x4(%edx)
  0xee07794b:   mov    (%eax),%ebx
  0xee07794d:   test   %ebx,%ebx
  0xee07794f:   je     0xee07795f
  0xee077955:   lock cmpxchg %ebx,(%ecx)
  0xee077959:   jne    0xee077975
  0xee07795f:   push   %eax
  0xee077960:   push   %edx
  0xee077961:   push   %ecx
  0xee077962:   call   0xf704a910 = Thread::current()
  0xee077967:   pop    %ecx
  0xee077968:   pop    %edx
  0xee077969:   decl   0x308(%eax)
  0xee07796f:   pop    %eax
  0xee077970:   jmp    0xee07799c
  0xee077975:   mov    %ecx,0x4(%edx)
  0xee077978:   push   %edx
  0xee077979:   cmpl   $0x0,-0x8(%ebp)
  0xee07797d:   je     0xee077994
  0xee077983:   push   $0xf785694c
  0xee077988:   call   0xee07798d
  0xee07798d:   pusha  
  0xee07798e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077993:   hlt    
  0xee077994:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee077999:   add    $0x4,%esp
  0xee07799c:   mov    -0x20(%ebp),%esi
  0xee07799f:   pop    %eax
  0xee0779a0:   mov    -0x24(%ebp),%ecx
  0xee0779a3:   lea    -0x24(%ebp),%ebx
  0xee0779a6:   jmp    0xee077a76
  0xee0779ab:   emms   
  0xee0779ad:   call   0xee0779b7
  0xee0779b2:   jmp    0xee077a58
  0xee0779b7:   lea    0x4(%esp),%eax
  0xee0779bb:   mov    %esi,-0x20(%ebp)
  0xee0779be:   cmpl   $0x0,-0x8(%ebp)
  0xee0779c2:   je     0xee0779d9
  0xee0779c8:   push   $0xf78569d8
  0xee0779cd:   call   0xee0779d2
  0xee0779d2:   pusha  
  0xee0779d3:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0779d8:   hlt    
  0xee0779d9:   push   %eax
  0xee0779da:   push   %edx
  0xee0779db:   push   %ecx
  0xee0779dc:   call   0xf704a910 = Thread::current()
  0xee0779e1:   pop    %ecx
  0xee0779e2:   pop    %edx
  0xee0779e3:   mov    %eax,%edi
  0xee0779e5:   pop    %eax
  0xee0779e6:   push   %edi
  0xee0779e7:   vzeroupper 
  0xee0779ea:   mov    %ebp,0x230(%edi)
  0xee0779f0:   mov    %eax,0x228(%edi)
  0xee0779f6:   call   0xf6c0c900 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0xee0779fb:   add    $0x4,%esp
  0xee0779fe:   push   %eax
  0xee0779ff:   push   %edx
  0xee077a00:   push   %ecx
  0xee077a01:   call   0xf704a910 = Thread::current()
  0xee077a06:   pop    %ecx
  0xee077a07:   pop    %edx
  0xee077a08:   cmp    %eax,%edi
  0xee077a0a:   je     0xee077a21
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee077a10:   push   $0xf78b5a48
  0xee077a15:   call   0xee077a1a
  0xee077a1a:   pusha  
  0xee077a1b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077a20:   hlt    
  0xee077a21:   pop    %eax
  0xee077a22:   movl   $0x0,0x228(%edi)
  0xee077a2c:   movl   $0x0,0x230(%edi)
  0xee077a36:   movl   $0x0,0x22c(%edi)
  0xee077a40:   vzeroupper 
  0xee077a43:   cmpl   $0x0,0x4(%edi)
  0xee077a47:   jne    0xee05bbe0
  0xee077a4d:   mov    -0x20(%ebp),%esi
  0xee077a50:   mov    -0x1c(%ebp),%edi
  0xee077a53:   lea    0x0(%ebp,%edi,4),%edi
  0xee077a57:   ret    
  0xee077a58:   push   $0xf77a6b02
  0xee077a5d:   call   0xee077a62
  0xee077a62:   pusha  
  0xee077a63:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077a68:   hlt    
  0xee077a69:   cmpl   $0x0,0x4(%ecx)
  0xee077a6d:   jne    0xee0779ab
  0xee077a73:   add    $0x8,%ecx
  0xee077a76:   cmp    %ebx,%ecx
  0xee077a78:   jne    0xee077a69
  0xee077a7a:   cmpb   $0x0,0xf7ca3a0d
  0xee077a81:   je     0xee077abe
  0xee077a87:   push   %eax
  0xee077a88:   push   %eax
  0xee077a89:   push   %edx
  0xee077a8a:   push   %ecx
  0xee077a8b:   call   0xf704a910 = Thread::current()
  0xee077a90:   pop    %ecx
  0xee077a91:   pop    %edx
  0xee077a92:   mov    %eax,%ecx
  0xee077a94:   pop    %eax
  0xee077a95:   mov    -0xc(%ebp),%ebx
  0xee077a98:   push   %ebx
  0xee077a99:   push   %ecx
  0xee077a9a:   cmpl   $0x0,-0x8(%ebp)
  0xee077a9e:   je     0xee077ab5
  0xee077aa4:   push   $0xf785694c
  0xee077aa9:   call   0xee077aae
  0xee077aae:   pusha  
  0xee077aaf:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077ab4:   hlt    
  0xee077ab5:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee077aba:   add    $0x8,%esp
  0xee077abd:   pop    %eax
  0xee077abe:   mov    -0x4(%ebp),%ebx
  0xee077ac1:   push   %eax
  0xee077ac2:   push   %edx
  0xee077ac3:   push   %ecx
  0xee077ac4:   call   0xf704a910 = Thread::current()
  0xee077ac9:   pop    %ecx
  0xee077aca:   pop    %edx
  0xee077acb:   mov    %eax,%ecx
  0xee077acd:   pop    %eax
  0xee077ace:   cmpl   $0x3,0x2bc(%ecx)
  0xee077ad5:   je     0xee077bc7
  0xee077adb:   cmp    0x2c4(%ecx),%ebx
  0xee077ae1:   jle    0xee077bc7
  0xee077ae7:   push   %ecx
  0xee077ae8:   cmpl   $0x0,-0x8(%ebp)
  0xee077aec:   je     0xee077b03
  0xee077af2:   push   $0xf785694c
  0xee077af7:   call   0xee077afc
  0xee077afc:   pusha  
  0xee077afd:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077b02:   hlt    
  0xee077b03:   call   0xf739fd80 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0xee077b08:   add    $0x4,%esp
  0xee077b0b:   call   0xee077b15
  0xee077b10:   jmp    0xee077bb6
  0xee077b15:   lea    0x4(%esp),%eax
  0xee077b19:   mov    %esi,-0x20(%ebp)
  0xee077b1c:   cmpl   $0x0,-0x8(%ebp)
  0xee077b20:   je     0xee077b37
  0xee077b26:   push   $0xf78569d8
  0xee077b2b:   call   0xee077b30
  0xee077b30:   pusha  
  0xee077b31:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077b36:   hlt    
  0xee077b37:   push   %eax
  0xee077b38:   push   %edx
  0xee077b39:   push   %ecx
  0xee077b3a:   call   0xf704a910 = Thread::current()
  0xee077b3f:   pop    %ecx
  0xee077b40:   pop    %edx
  0xee077b41:   mov    %eax,%edi
  0xee077b43:   pop    %eax
  0xee077b44:   push   %edi
  0xee077b45:   vzeroupper 
  0xee077b48:   mov    %ebp,0x230(%edi)
  0xee077b4e:   mov    %eax,0x228(%edi)
  0xee077b54:   call   0xf6c0b0b0 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0xee077b59:   add    $0x4,%esp
  0xee077b5c:   push   %eax
  0xee077b5d:   push   %edx
  0xee077b5e:   push   %ecx
  0xee077b5f:   call   0xf704a910 = Thread::current()
  0xee077b64:   pop    %ecx
  0xee077b65:   pop    %edx
  0xee077b66:   cmp    %eax,%edi
  0xee077b68:   je     0xee077b7f
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee077b6e:   push   $0xf78b5a48
  0xee077b73:   call   0xee077b78
  0xee077b78:   pusha  
  0xee077b79:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077b7e:   hlt    
  0xee077b7f:   pop    %eax
  0xee077b80:   movl   $0x0,0x228(%edi)
  0xee077b8a:   movl   $0x0,0x230(%edi)
  0xee077b94:   movl   $0x0,0x22c(%edi)
  0xee077b9e:   vzeroupper 
  0xee077ba1:   cmpl   $0x0,0x4(%edi)
  0xee077ba5:   jne    0xee05bbe0
  0xee077bab:   mov    -0x20(%ebp),%esi
  0xee077bae:   mov    -0x1c(%ebp),%edi
  0xee077bb1:   lea    0x0(%ebp,%edi,4),%edi
  0xee077bb5:   ret    
  0xee077bb6:   push   $0xf77a6b02
  0xee077bbb:   call   0xee077bc0
  0xee077bc0:   pusha  
  0xee077bc1:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077bc6:   hlt    
  0xee077bc7:   mov    %ebp,%esp
  0xee077bc9:   pop    %ebp
  0xee077bca:   pop    %esi
  0xee077bcb:   mov    %ebx,%esp
  0xee077bcd:   jmp    *%esi                        ;; 2611:   __ jmp(rbcp);
  0xee077bcf:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee077bd4:   call   0xee077bd9
  0xee077bd9:   pusha  
  0xee077bda:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077bdf:   hlt    
--------------------------------------------------------------------------------

----------------------------------------------------------------------
lreturn  173 lreturn  [0xee077c00, 0xee0780dc]  1244 bytes

--------------------------------------------------------------------------------
  0xee077c00:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee077c01:   pop    %edx
 ;; Thread-local Safepoint poll
  0xee077c02:   push   %eax                         ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2585:     NOT_PRODUCT(__ block_comment("Thread-local Safepoint poll"));
                                                    ;; 2590:     __ get_thread(thread);
  0xee077c03:   push   %edx
  0xee077c04:   push   %ecx
  0xee077c05:   call   0xf704a910 = Thread::current()
  0xee077c0a:   pop    %ecx
  0xee077c0b:   pop    %edx
  0xee077c0c:   mov    %eax,%edi
  0xee077c0e:   pop    %eax
  0xee077c0f:   testb  $0x1,0x288(%edi)             ;; 2591:     __ testb(Address(thread, JavaThread::polling_word_offset()), SafepointMechanism::poll_bit());
  0xee077c16:   je     0xee077ccb                   ;; 2593:     __ jcc(Assembler::zero, no_safepoint);
  0xee077c1c:   push   %edx                         ;; 2594:     __ push(state);
  0xee077c1d:   push   %eax
  0xee077c1e:   call   0xee077c28                   ;; 2595:     __ push_cont_fastpath();
                                                    ;; 2596:     __ call_VM(noreg, CAST_FROM_FN_PTR(address,
  0xee077c23:   jmp    0xee077cc9
  0xee077c28:   lea    0x4(%esp),%eax
  0xee077c2c:   mov    %esi,-0x20(%ebp)
  0xee077c2f:   cmpl   $0x0,-0x8(%ebp)
  0xee077c33:   je     0xee077c4a
  0xee077c39:   push   $0xf78569d8
  0xee077c3e:   call   0xee077c43
  0xee077c43:   pusha  
  0xee077c44:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077c49:   hlt    
  0xee077c4a:   push   %eax
  0xee077c4b:   push   %edx
  0xee077c4c:   push   %ecx
  0xee077c4d:   call   0xf704a910 = Thread::current()
  0xee077c52:   pop    %ecx
  0xee077c53:   pop    %edx
  0xee077c54:   mov    %eax,%edi
  0xee077c56:   pop    %eax
  0xee077c57:   push   %edi
  0xee077c58:   vzeroupper 
  0xee077c5b:   mov    %ebp,0x230(%edi)
  0xee077c61:   mov    %eax,0x228(%edi)
  0xee077c67:   call   0xf6c0de90 = InterpreterRuntime::at_safepoint(JavaThread*)
  0xee077c6c:   add    $0x4,%esp
  0xee077c6f:   push   %eax
  0xee077c70:   push   %edx
  0xee077c71:   push   %ecx
  0xee077c72:   call   0xf704a910 = Thread::current()
  0xee077c77:   pop    %ecx
  0xee077c78:   pop    %edx
  0xee077c79:   cmp    %eax,%edi
  0xee077c7b:   je     0xee077c92
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee077c81:   push   $0xf78b5a48
  0xee077c86:   call   0xee077c8b
  0xee077c8b:   pusha  
  0xee077c8c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077c91:   hlt    
  0xee077c92:   pop    %eax
  0xee077c93:   movl   $0x0,0x228(%edi)
  0xee077c9d:   movl   $0x0,0x230(%edi)
  0xee077ca7:   movl   $0x0,0x22c(%edi)
  0xee077cb1:   vzeroupper 
  0xee077cb4:   cmpl   $0x0,0x4(%edi)
  0xee077cb8:   jne    0xee05bbe0
  0xee077cbe:   mov    -0x20(%ebp),%esi
  0xee077cc1:   mov    -0x1c(%ebp),%edi
  0xee077cc4:   lea    0x0(%ebp,%edi,4),%edi
  0xee077cc8:   ret    
  0xee077cc9:   pop    %eax                         ;; 2598:     __ pop_cont_fastpath();
                                                    ;; 2599:     __ pop(state);
  0xee077cca:   pop    %edx
  0xee077ccb:   push   %eax                         ;; 2600:     __ bind(no_safepoint);
                                                    ;; 2609:   __ remove_activation(state, rbcp);
  0xee077ccc:   push   %edx
  0xee077ccd:   push   %ecx
  0xee077cce:   call   0xf704a910 = Thread::current()
  0xee077cd3:   pop    %ecx
  0xee077cd4:   pop    %edx
  0xee077cd5:   mov    %eax,%ecx
  0xee077cd7:   pop    %eax
  0xee077cd8:   cmp    0x288(%ecx),%ebp
  0xee077cde:   ja     0xee077ce9
  0xee077ce4:   jmp    0xee077d3d
  0xee077ce9:   push   %edx
  0xee077cea:   push   %eax
  0xee077ceb:   vzeroupper 
  0xee077cee:   mov    %ebp,0x230(%ecx)
  0xee077cf4:   movl   $0xee077ceb,0x22c(%ecx)
  0xee077cfe:   mov    %esp,0x228(%ecx)
  0xee077d04:   push   %ecx
  0xee077d05:   call   0xf6c0e120 = InterpreterRuntime::at_unwind(JavaThread*)
  0xee077d0a:   add    $0x4,%esp
  0xee077d0d:   push   %eax
  0xee077d0e:   push   %edx
  0xee077d0f:   push   %ecx
  0xee077d10:   call   0xf704a910 = Thread::current()
  0xee077d15:   pop    %ecx
  0xee077d16:   pop    %edx
  0xee077d17:   mov    %eax,%ecx
  0xee077d19:   pop    %eax
  0xee077d1a:   movl   $0x0,0x228(%ecx)
  0xee077d24:   movl   $0x0,0x230(%ecx)
  0xee077d2e:   movl   $0x0,0x22c(%ecx)
  0xee077d38:   vzeroupper 
  0xee077d3b:   pop    %eax
  0xee077d3c:   pop    %edx
  0xee077d3d:   mov    0x2b1(%ecx),%bl
  0xee077d43:   movb   $0x0,0x2b1(%ecx)
  0xee077d4a:   mov    -0xc(%ebp),%ecx
  0xee077d4d:   mov    0x18(%ecx),%ecx
  0xee077d50:   test   $0x20,%cl
  0xee077d53:   je     0xee077e97
  0xee077d59:   test   $0xff,%bl
  0xee077d5c:   jne    0xee077f71
  0xee077d62:   push   %edx
  0xee077d63:   push   %eax
  0xee077d64:   lea    -0x2c(%ebp),%edx
  0xee077d67:   mov    0x4(%edx),%eax
  0xee077d6a:   test   %eax,%eax
  0xee077d6c:   jne    0xee077e32
  0xee077d72:   pop    %eax
  0xee077d73:   pop    %edx
  0xee077d74:   emms   
  0xee077d76:   call   0xee077d80
  0xee077d7b:   jmp    0xee077e21
  0xee077d80:   lea    0x4(%esp),%eax
  0xee077d84:   mov    %esi,-0x20(%ebp)
  0xee077d87:   cmpl   $0x0,-0x8(%ebp)
  0xee077d8b:   je     0xee077da2
  0xee077d91:   push   $0xf78569d8
  0xee077d96:   call   0xee077d9b
  0xee077d9b:   pusha  
  0xee077d9c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077da1:   hlt    
  0xee077da2:   push   %eax
  0xee077da3:   push   %edx
  0xee077da4:   push   %ecx
  0xee077da5:   call   0xf704a910 = Thread::current()
  0xee077daa:   pop    %ecx
  0xee077dab:   pop    %edx
  0xee077dac:   mov    %eax,%edi
  0xee077dae:   pop    %eax
  0xee077daf:   push   %edi
  0xee077db0:   vzeroupper 
  0xee077db3:   mov    %ebp,0x230(%edi)
  0xee077db9:   mov    %eax,0x228(%edi)
  0xee077dbf:   call   0xf6c0c900 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0xee077dc4:   add    $0x4,%esp
  0xee077dc7:   push   %eax
  0xee077dc8:   push   %edx
  0xee077dc9:   push   %ecx
  0xee077dca:   call   0xf704a910 = Thread::current()
  0xee077dcf:   pop    %ecx
  0xee077dd0:   pop    %edx
  0xee077dd1:   cmp    %eax,%edi
  0xee077dd3:   je     0xee077dea
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee077dd9:   push   $0xf78b5a48
  0xee077dde:   call   0xee077de3
  0xee077de3:   pusha  
  0xee077de4:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077de9:   hlt    
  0xee077dea:   pop    %eax
  0xee077deb:   movl   $0x0,0x228(%edi)
  0xee077df5:   movl   $0x0,0x230(%edi)
  0xee077dff:   movl   $0x0,0x22c(%edi)
  0xee077e09:   vzeroupper 
  0xee077e0c:   cmpl   $0x0,0x4(%edi)
  0xee077e10:   jne    0xee05bbe0
  0xee077e16:   mov    -0x20(%ebp),%esi
  0xee077e19:   mov    -0x1c(%ebp),%edi
  0xee077e1c:   lea    0x0(%ebp,%edi,4),%edi
  0xee077e20:   ret    
  0xee077e21:   push   $0xf77a6b02
  0xee077e26:   call   0xee077e2b
  0xee077e2b:   pusha  
  0xee077e2c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077e31:   hlt    
  0xee077e32:   mov    %esi,-0x20(%ebp)
  0xee077e35:   lea    (%edx),%eax
  0xee077e37:   mov    0x4(%edx),%ecx
  0xee077e3a:   movl   $0x0,0x4(%edx)
  0xee077e41:   mov    (%eax),%ebx
  0xee077e43:   test   %ebx,%ebx
  0xee077e45:   je     0xee077e55
  0xee077e4b:   lock cmpxchg %ebx,(%ecx)
  0xee077e4f:   jne    0xee077e6b
  0xee077e55:   push   %eax
  0xee077e56:   push   %edx
  0xee077e57:   push   %ecx
  0xee077e58:   call   0xf704a910 = Thread::current()
  0xee077e5d:   pop    %ecx
  0xee077e5e:   pop    %edx
  0xee077e5f:   decl   0x308(%eax)
  0xee077e65:   pop    %eax
  0xee077e66:   jmp    0xee077e92
  0xee077e6b:   mov    %ecx,0x4(%edx)
  0xee077e6e:   push   %edx
  0xee077e6f:   cmpl   $0x0,-0x8(%ebp)
  0xee077e73:   je     0xee077e8a
  0xee077e79:   push   $0xf785694c
  0xee077e7e:   call   0xee077e83
  0xee077e83:   pusha  
  0xee077e84:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077e89:   hlt    
  0xee077e8a:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee077e8f:   add    $0x4,%esp
  0xee077e92:   mov    -0x20(%ebp),%esi
  0xee077e95:   pop    %eax
  0xee077e96:   pop    %edx
  0xee077e97:   mov    -0x24(%ebp),%ecx
  0xee077e9a:   lea    -0x24(%ebp),%ebx
  0xee077e9d:   jmp    0xee077f6d
  0xee077ea2:   emms   
  0xee077ea4:   call   0xee077eae
  0xee077ea9:   jmp    0xee077f4f
  0xee077eae:   lea    0x4(%esp),%eax
  0xee077eb2:   mov    %esi,-0x20(%ebp)
  0xee077eb5:   cmpl   $0x0,-0x8(%ebp)
  0xee077eb9:   je     0xee077ed0
  0xee077ebf:   push   $0xf78569d8
  0xee077ec4:   call   0xee077ec9
  0xee077ec9:   pusha  
  0xee077eca:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077ecf:   hlt    
  0xee077ed0:   push   %eax
  0xee077ed1:   push   %edx
  0xee077ed2:   push   %ecx
  0xee077ed3:   call   0xf704a910 = Thread::current()
  0xee077ed8:   pop    %ecx
  0xee077ed9:   pop    %edx
  0xee077eda:   mov    %eax,%edi
  0xee077edc:   pop    %eax
  0xee077edd:   push   %edi
  0xee077ede:   vzeroupper 
  0xee077ee1:   mov    %ebp,0x230(%edi)
  0xee077ee7:   mov    %eax,0x228(%edi)
  0xee077eed:   call   0xf6c0c900 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0xee077ef2:   add    $0x4,%esp
  0xee077ef5:   push   %eax
  0xee077ef6:   push   %edx
  0xee077ef7:   push   %ecx
  0xee077ef8:   call   0xf704a910 = Thread::current()
  0xee077efd:   pop    %ecx
  0xee077efe:   pop    %edx
  0xee077eff:   cmp    %eax,%edi
  0xee077f01:   je     0xee077f18
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee077f07:   push   $0xf78b5a48
  0xee077f0c:   call   0xee077f11
  0xee077f11:   pusha  
  0xee077f12:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077f17:   hlt    
  0xee077f18:   pop    %eax
  0xee077f19:   movl   $0x0,0x228(%edi)
  0xee077f23:   movl   $0x0,0x230(%edi)
  0xee077f2d:   movl   $0x0,0x22c(%edi)
  0xee077f37:   vzeroupper 
  0xee077f3a:   cmpl   $0x0,0x4(%edi)
  0xee077f3e:   jne    0xee05bbe0
  0xee077f44:   mov    -0x20(%ebp),%esi
  0xee077f47:   mov    -0x1c(%ebp),%edi
  0xee077f4a:   lea    0x0(%ebp,%edi,4),%edi
  0xee077f4e:   ret    
  0xee077f4f:   push   $0xf77a6b02
  0xee077f54:   call   0xee077f59
  0xee077f59:   pusha  
  0xee077f5a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077f5f:   hlt    
  0xee077f60:   cmpl   $0x0,0x4(%ecx)
  0xee077f64:   jne    0xee077ea2
  0xee077f6a:   add    $0x8,%ecx
  0xee077f6d:   cmp    %ebx,%ecx
  0xee077f6f:   jne    0xee077f60
  0xee077f71:   cmpb   $0x0,0xf7ca3a0d
  0xee077f78:   je     0xee077fb7
  0xee077f7e:   push   %edx
  0xee077f7f:   push   %eax
  0xee077f80:   push   %eax
  0xee077f81:   push   %edx
  0xee077f82:   push   %ecx
  0xee077f83:   call   0xf704a910 = Thread::current()
  0xee077f88:   pop    %ecx
  0xee077f89:   pop    %edx
  0xee077f8a:   mov    %eax,%ecx
  0xee077f8c:   pop    %eax
  0xee077f8d:   mov    -0xc(%ebp),%ebx
  0xee077f90:   push   %ebx
  0xee077f91:   push   %ecx
  0xee077f92:   cmpl   $0x0,-0x8(%ebp)
  0xee077f96:   je     0xee077fad
  0xee077f9c:   push   $0xf785694c
  0xee077fa1:   call   0xee077fa6
  0xee077fa6:   pusha  
  0xee077fa7:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077fac:   hlt    
  0xee077fad:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee077fb2:   add    $0x8,%esp
  0xee077fb5:   pop    %eax
  0xee077fb6:   pop    %edx
  0xee077fb7:   mov    -0x4(%ebp),%ebx
  0xee077fba:   push   %eax
  0xee077fbb:   push   %edx
  0xee077fbc:   push   %ecx
  0xee077fbd:   call   0xf704a910 = Thread::current()
  0xee077fc2:   pop    %ecx
  0xee077fc3:   pop    %edx
  0xee077fc4:   mov    %eax,%ecx
  0xee077fc6:   pop    %eax
  0xee077fc7:   cmpl   $0x3,0x2bc(%ecx)
  0xee077fce:   je     0xee0780c0
  0xee077fd4:   cmp    0x2c4(%ecx),%ebx
  0xee077fda:   jle    0xee0780c0
  0xee077fe0:   push   %ecx
  0xee077fe1:   cmpl   $0x0,-0x8(%ebp)
  0xee077fe5:   je     0xee077ffc
  0xee077feb:   push   $0xf785694c
  0xee077ff0:   call   0xee077ff5
  0xee077ff5:   pusha  
  0xee077ff6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee077ffb:   hlt    
  0xee077ffc:   call   0xf739fd80 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0xee078001:   add    $0x4,%esp
  0xee078004:   call   0xee07800e
  0xee078009:   jmp    0xee0780af
  0xee07800e:   lea    0x4(%esp),%eax
  0xee078012:   mov    %esi,-0x20(%ebp)
  0xee078015:   cmpl   $0x0,-0x8(%ebp)
  0xee078019:   je     0xee078030
  0xee07801f:   push   $0xf78569d8
  0xee078024:   call   0xee078029
  0xee078029:   pusha  
  0xee07802a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07802f:   hlt    
  0xee078030:   push   %eax
  0xee078031:   push   %edx
  0xee078032:   push   %ecx
  0xee078033:   call   0xf704a910 = Thread::current()
  0xee078038:   pop    %ecx
  0xee078039:   pop    %edx
  0xee07803a:   mov    %eax,%edi
  0xee07803c:   pop    %eax
  0xee07803d:   push   %edi
  0xee07803e:   vzeroupper 
  0xee078041:   mov    %ebp,0x230(%edi)
  0xee078047:   mov    %eax,0x228(%edi)
  0xee07804d:   call   0xf6c0b0b0 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0xee078052:   add    $0x4,%esp
  0xee078055:   push   %eax
  0xee078056:   push   %edx
  0xee078057:   push   %ecx
  0xee078058:   call   0xf704a910 = Thread::current()
  0xee07805d:   pop    %ecx
  0xee07805e:   pop    %edx
  0xee07805f:   cmp    %eax,%edi
  0xee078061:   je     0xee078078
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee078067:   push   $0xf78b5a48
  0xee07806c:   call   0xee078071
  0xee078071:   pusha  
  0xee078072:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078077:   hlt    
  0xee078078:   pop    %eax
  0xee078079:   movl   $0x0,0x228(%edi)
  0xee078083:   movl   $0x0,0x230(%edi)
  0xee07808d:   movl   $0x0,0x22c(%edi)
  0xee078097:   vzeroupper 
  0xee07809a:   cmpl   $0x0,0x4(%edi)
  0xee07809e:   jne    0xee05bbe0
  0xee0780a4:   mov    -0x20(%ebp),%esi
  0xee0780a7:   mov    -0x1c(%ebp),%edi
  0xee0780aa:   lea    0x0(%ebp,%edi,4),%edi
  0xee0780ae:   ret    
  0xee0780af:   push   $0xf77a6b02
  0xee0780b4:   call   0xee0780b9
  0xee0780b9:   pusha  
  0xee0780ba:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0780bf:   hlt    
  0xee0780c0:   mov    %ebp,%esp
  0xee0780c2:   pop    %ebp
  0xee0780c3:   pop    %esi
  0xee0780c4:   mov    %ebx,%esp
  0xee0780c6:   jmp    *%esi                        ;; 2611:   __ jmp(rbcp);
  0xee0780c8:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee0780cd:   call   0xee0780d2
  0xee0780d2:   pusha  
  0xee0780d3:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0780d8:   hlt    
  0xee0780d9:   nop
  0xee0780da:   nop
  0xee0780db:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
freturn  174 freturn  [0xee078100, 0xee078618]  1304 bytes

--------------------------------------------------------------------------------
  0xee078100:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee078105:   add    $0x4,%esp
 ;; Thread-local Safepoint poll
  0xee078108:   push   %eax                         ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2585:     NOT_PRODUCT(__ block_comment("Thread-local Safepoint poll"));
                                                    ;; 2590:     __ get_thread(thread);
  0xee078109:   push   %edx
  0xee07810a:   push   %ecx
  0xee07810b:   call   0xf704a910 = Thread::current()
  0xee078110:   pop    %ecx
  0xee078111:   pop    %edx
  0xee078112:   mov    %eax,%edi
  0xee078114:   pop    %eax
  0xee078115:   testb  $0x1,0x288(%edi)             ;; 2591:     __ testb(Address(thread, JavaThread::polling_word_offset()), SafepointMechanism::poll_bit());
  0xee07811c:   je     0xee0781dd                   ;; 2593:     __ jcc(Assembler::zero, no_safepoint);
  0xee078122:   sub    $0x4,%esp                    ;; 2594:     __ push(state);
  0xee078125:   vmovss %xmm0,(%esp)
  0xee07812a:   call   0xee078134                   ;; 2595:     __ push_cont_fastpath();
                                                    ;; 2596:     __ call_VM(noreg, CAST_FROM_FN_PTR(address,
  0xee07812f:   jmp    0xee0781d5
  0xee078134:   lea    0x4(%esp),%eax
  0xee078138:   mov    %esi,-0x20(%ebp)
  0xee07813b:   cmpl   $0x0,-0x8(%ebp)
  0xee07813f:   je     0xee078156
  0xee078145:   push   $0xf78569d8
  0xee07814a:   call   0xee07814f
  0xee07814f:   pusha  
  0xee078150:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078155:   hlt    
  0xee078156:   push   %eax
  0xee078157:   push   %edx
  0xee078158:   push   %ecx
  0xee078159:   call   0xf704a910 = Thread::current()
  0xee07815e:   pop    %ecx
  0xee07815f:   pop    %edx
  0xee078160:   mov    %eax,%edi
  0xee078162:   pop    %eax
  0xee078163:   push   %edi
  0xee078164:   vzeroupper 
  0xee078167:   mov    %ebp,0x230(%edi)
  0xee07816d:   mov    %eax,0x228(%edi)
  0xee078173:   call   0xf6c0de90 = InterpreterRuntime::at_safepoint(JavaThread*)
  0xee078178:   add    $0x4,%esp
  0xee07817b:   push   %eax
  0xee07817c:   push   %edx
  0xee07817d:   push   %ecx
  0xee07817e:   call   0xf704a910 = Thread::current()
  0xee078183:   pop    %ecx
  0xee078184:   pop    %edx
  0xee078185:   cmp    %eax,%edi
  0xee078187:   je     0xee07819e
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07818d:   push   $0xf78b5a48
  0xee078192:   call   0xee078197
  0xee078197:   pusha  
  0xee078198:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07819d:   hlt    
  0xee07819e:   pop    %eax
  0xee07819f:   movl   $0x0,0x228(%edi)
  0xee0781a9:   movl   $0x0,0x230(%edi)
  0xee0781b3:   movl   $0x0,0x22c(%edi)
  0xee0781bd:   vzeroupper 
  0xee0781c0:   cmpl   $0x0,0x4(%edi)
  0xee0781c4:   jne    0xee05bbe0
  0xee0781ca:   mov    -0x20(%ebp),%esi
  0xee0781cd:   mov    -0x1c(%ebp),%edi
  0xee0781d0:   lea    0x0(%ebp,%edi,4),%edi
  0xee0781d4:   ret    
  0xee0781d5:   vmovss (%esp),%xmm0                 ;; 2598:     __ pop_cont_fastpath();
                                                    ;; 2599:     __ pop(state);
  0xee0781da:   add    $0x4,%esp
  0xee0781dd:   push   %eax                         ;; 2600:     __ bind(no_safepoint);
                                                    ;; 2609:   __ remove_activation(state, rbcp);
  0xee0781de:   push   %edx
  0xee0781df:   push   %ecx
  0xee0781e0:   call   0xf704a910 = Thread::current()
  0xee0781e5:   pop    %ecx
  0xee0781e6:   pop    %edx
  0xee0781e7:   mov    %eax,%ecx
  0xee0781e9:   pop    %eax
  0xee0781ea:   cmp    0x288(%ecx),%ebp
  0xee0781f0:   ja     0xee0781fb
  0xee0781f6:   jmp    0xee07825b
  0xee0781fb:   sub    $0x4,%esp
  0xee0781fe:   vmovss %xmm0,(%esp)
  0xee078203:   vzeroupper 
  0xee078206:   mov    %ebp,0x230(%ecx)
  0xee07820c:   movl   $0xee078203,0x22c(%ecx)
  0xee078216:   mov    %esp,0x228(%ecx)
  0xee07821c:   push   %ecx
  0xee07821d:   call   0xf6c0e120 = InterpreterRuntime::at_unwind(JavaThread*)
  0xee078222:   add    $0x4,%esp
  0xee078225:   push   %eax
  0xee078226:   push   %edx
  0xee078227:   push   %ecx
  0xee078228:   call   0xf704a910 = Thread::current()
  0xee07822d:   pop    %ecx
  0xee07822e:   pop    %edx
  0xee07822f:   mov    %eax,%ecx
  0xee078231:   pop    %eax
  0xee078232:   movl   $0x0,0x228(%ecx)
  0xee07823c:   movl   $0x0,0x230(%ecx)
  0xee078246:   movl   $0x0,0x22c(%ecx)
  0xee078250:   vzeroupper 
  0xee078253:   vmovss (%esp),%xmm0
  0xee078258:   add    $0x4,%esp
  0xee07825b:   mov    0x2b1(%ecx),%bl
  0xee078261:   movb   $0x0,0x2b1(%ecx)
  0xee078268:   mov    -0xc(%ebp),%ecx
  0xee07826b:   mov    0x18(%ecx),%ecx
  0xee07826e:   test   $0x20,%cl
  0xee078271:   je     0xee0783c7
  0xee078277:   test   $0xff,%bl
  0xee07827a:   jne    0xee0784a1
  0xee078280:   sub    $0x4,%esp
  0xee078283:   vmovss %xmm0,(%esp)
  0xee078288:   lea    -0x2c(%ebp),%edx
  0xee07828b:   mov    0x4(%edx),%eax
  0xee07828e:   test   %eax,%eax
  0xee078290:   jne    0xee07835c
  0xee078296:   vmovss (%esp),%xmm0
  0xee07829b:   add    $0x4,%esp
  0xee07829e:   emms   
  0xee0782a0:   call   0xee0782aa
  0xee0782a5:   jmp    0xee07834b
  0xee0782aa:   lea    0x4(%esp),%eax
  0xee0782ae:   mov    %esi,-0x20(%ebp)
  0xee0782b1:   cmpl   $0x0,-0x8(%ebp)
  0xee0782b5:   je     0xee0782cc
  0xee0782bb:   push   $0xf78569d8
  0xee0782c0:   call   0xee0782c5
  0xee0782c5:   pusha  
  0xee0782c6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0782cb:   hlt    
  0xee0782cc:   push   %eax
  0xee0782cd:   push   %edx
  0xee0782ce:   push   %ecx
  0xee0782cf:   call   0xf704a910 = Thread::current()
  0xee0782d4:   pop    %ecx
  0xee0782d5:   pop    %edx
  0xee0782d6:   mov    %eax,%edi
  0xee0782d8:   pop    %eax
  0xee0782d9:   push   %edi
  0xee0782da:   vzeroupper 
  0xee0782dd:   mov    %ebp,0x230(%edi)
  0xee0782e3:   mov    %eax,0x228(%edi)
  0xee0782e9:   call   0xf6c0c900 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0xee0782ee:   add    $0x4,%esp
  0xee0782f1:   push   %eax
  0xee0782f2:   push   %edx
  0xee0782f3:   push   %ecx
  0xee0782f4:   call   0xf704a910 = Thread::current()
  0xee0782f9:   pop    %ecx
  0xee0782fa:   pop    %edx
  0xee0782fb:   cmp    %eax,%edi
  0xee0782fd:   je     0xee078314
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee078303:   push   $0xf78b5a48
  0xee078308:   call   0xee07830d
  0xee07830d:   pusha  
  0xee07830e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078313:   hlt    
  0xee078314:   pop    %eax
  0xee078315:   movl   $0x0,0x228(%edi)
  0xee07831f:   movl   $0x0,0x230(%edi)
  0xee078329:   movl   $0x0,0x22c(%edi)
  0xee078333:   vzeroupper 
  0xee078336:   cmpl   $0x0,0x4(%edi)
  0xee07833a:   jne    0xee05bbe0
  0xee078340:   mov    -0x20(%ebp),%esi
  0xee078343:   mov    -0x1c(%ebp),%edi
  0xee078346:   lea    0x0(%ebp,%edi,4),%edi
  0xee07834a:   ret    
  0xee07834b:   push   $0xf77a6b02
  0xee078350:   call   0xee078355
  0xee078355:   pusha  
  0xee078356:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07835b:   hlt    
  0xee07835c:   mov    %esi,-0x20(%ebp)
  0xee07835f:   lea    (%edx),%eax
  0xee078361:   mov    0x4(%edx),%ecx
  0xee078364:   movl   $0x0,0x4(%edx)
  0xee07836b:   mov    (%eax),%ebx
  0xee07836d:   test   %ebx,%ebx
  0xee07836f:   je     0xee07837f
  0xee078375:   lock cmpxchg %ebx,(%ecx)
  0xee078379:   jne    0xee078395
  0xee07837f:   push   %eax
  0xee078380:   push   %edx
  0xee078381:   push   %ecx
  0xee078382:   call   0xf704a910 = Thread::current()
  0xee078387:   pop    %ecx
  0xee078388:   pop    %edx
  0xee078389:   decl   0x308(%eax)
  0xee07838f:   pop    %eax
  0xee078390:   jmp    0xee0783bc
  0xee078395:   mov    %ecx,0x4(%edx)
  0xee078398:   push   %edx
  0xee078399:   cmpl   $0x0,-0x8(%ebp)
  0xee07839d:   je     0xee0783b4
  0xee0783a3:   push   $0xf785694c
  0xee0783a8:   call   0xee0783ad
  0xee0783ad:   pusha  
  0xee0783ae:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0783b3:   hlt    
  0xee0783b4:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee0783b9:   add    $0x4,%esp
  0xee0783bc:   mov    -0x20(%ebp),%esi
  0xee0783bf:   vmovss (%esp),%xmm0
  0xee0783c4:   add    $0x4,%esp
  0xee0783c7:   mov    -0x24(%ebp),%ecx
  0xee0783ca:   lea    -0x24(%ebp),%ebx
  0xee0783cd:   jmp    0xee07849d
  0xee0783d2:   emms   
  0xee0783d4:   call   0xee0783de
  0xee0783d9:   jmp    0xee07847f
  0xee0783de:   lea    0x4(%esp),%eax
  0xee0783e2:   mov    %esi,-0x20(%ebp)
  0xee0783e5:   cmpl   $0x0,-0x8(%ebp)
  0xee0783e9:   je     0xee078400
  0xee0783ef:   push   $0xf78569d8
  0xee0783f4:   call   0xee0783f9
  0xee0783f9:   pusha  
  0xee0783fa:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0783ff:   hlt    
  0xee078400:   push   %eax
  0xee078401:   push   %edx
  0xee078402:   push   %ecx
  0xee078403:   call   0xf704a910 = Thread::current()
  0xee078408:   pop    %ecx
  0xee078409:   pop    %edx
  0xee07840a:   mov    %eax,%edi
  0xee07840c:   pop    %eax
  0xee07840d:   push   %edi
  0xee07840e:   vzeroupper 
  0xee078411:   mov    %ebp,0x230(%edi)
  0xee078417:   mov    %eax,0x228(%edi)
  0xee07841d:   call   0xf6c0c900 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0xee078422:   add    $0x4,%esp
  0xee078425:   push   %eax
  0xee078426:   push   %edx
  0xee078427:   push   %ecx
  0xee078428:   call   0xf704a910 = Thread::current()
  0xee07842d:   pop    %ecx
  0xee07842e:   pop    %edx
  0xee07842f:   cmp    %eax,%edi
  0xee078431:   je     0xee078448
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee078437:   push   $0xf78b5a48
  0xee07843c:   call   0xee078441
  0xee078441:   pusha  
  0xee078442:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078447:   hlt    
  0xee078448:   pop    %eax
  0xee078449:   movl   $0x0,0x228(%edi)
  0xee078453:   movl   $0x0,0x230(%edi)
  0xee07845d:   movl   $0x0,0x22c(%edi)
  0xee078467:   vzeroupper 
  0xee07846a:   cmpl   $0x0,0x4(%edi)
  0xee07846e:   jne    0xee05bbe0
  0xee078474:   mov    -0x20(%ebp),%esi
  0xee078477:   mov    -0x1c(%ebp),%edi
  0xee07847a:   lea    0x0(%ebp,%edi,4),%edi
  0xee07847e:   ret    
  0xee07847f:   push   $0xf77a6b02
  0xee078484:   call   0xee078489
  0xee078489:   pusha  
  0xee07848a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07848f:   hlt    
  0xee078490:   cmpl   $0x0,0x4(%ecx)
  0xee078494:   jne    0xee0783d2
  0xee07849a:   add    $0x8,%ecx
  0xee07849d:   cmp    %ebx,%ecx
  0xee07849f:   jne    0xee078490
  0xee0784a1:   cmpb   $0x0,0xf7ca3a0d
  0xee0784a8:   je     0xee0784f3
  0xee0784ae:   sub    $0x4,%esp
  0xee0784b1:   vmovss %xmm0,(%esp)
  0xee0784b6:   push   %eax
  0xee0784b7:   push   %edx
  0xee0784b8:   push   %ecx
  0xee0784b9:   call   0xf704a910 = Thread::current()
  0xee0784be:   pop    %ecx
  0xee0784bf:   pop    %edx
  0xee0784c0:   mov    %eax,%ecx
  0xee0784c2:   pop    %eax
  0xee0784c3:   mov    -0xc(%ebp),%ebx
  0xee0784c6:   push   %ebx
  0xee0784c7:   push   %ecx
  0xee0784c8:   cmpl   $0x0,-0x8(%ebp)
  0xee0784cc:   je     0xee0784e3
  0xee0784d2:   push   $0xf785694c
  0xee0784d7:   call   0xee0784dc
  0xee0784dc:   pusha  
  0xee0784dd:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0784e2:   hlt    
  0xee0784e3:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee0784e8:   add    $0x8,%esp
  0xee0784eb:   vmovss (%esp),%xmm0
  0xee0784f0:   add    $0x4,%esp
  0xee0784f3:   mov    -0x4(%ebp),%ebx
  0xee0784f6:   push   %eax
  0xee0784f7:   push   %edx
  0xee0784f8:   push   %ecx
  0xee0784f9:   call   0xf704a910 = Thread::current()
  0xee0784fe:   pop    %ecx
  0xee0784ff:   pop    %edx
  0xee078500:   mov    %eax,%ecx
  0xee078502:   pop    %eax
  0xee078503:   cmpl   $0x3,0x2bc(%ecx)
  0xee07850a:   je     0xee0785fc
  0xee078510:   cmp    0x2c4(%ecx),%ebx
  0xee078516:   jle    0xee0785fc
  0xee07851c:   push   %ecx
  0xee07851d:   cmpl   $0x0,-0x8(%ebp)
  0xee078521:   je     0xee078538
  0xee078527:   push   $0xf785694c
  0xee07852c:   call   0xee078531
  0xee078531:   pusha  
  0xee078532:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078537:   hlt    
  0xee078538:   call   0xf739fd80 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0xee07853d:   add    $0x4,%esp
  0xee078540:   call   0xee07854a
  0xee078545:   jmp    0xee0785eb
  0xee07854a:   lea    0x4(%esp),%eax
  0xee07854e:   mov    %esi,-0x20(%ebp)
  0xee078551:   cmpl   $0x0,-0x8(%ebp)
  0xee078555:   je     0xee07856c
  0xee07855b:   push   $0xf78569d8
  0xee078560:   call   0xee078565
  0xee078565:   pusha  
  0xee078566:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07856b:   hlt    
  0xee07856c:   push   %eax
  0xee07856d:   push   %edx
  0xee07856e:   push   %ecx
  0xee07856f:   call   0xf704a910 = Thread::current()
  0xee078574:   pop    %ecx
  0xee078575:   pop    %edx
  0xee078576:   mov    %eax,%edi
  0xee078578:   pop    %eax
  0xee078579:   push   %edi
  0xee07857a:   vzeroupper 
  0xee07857d:   mov    %ebp,0x230(%edi)
  0xee078583:   mov    %eax,0x228(%edi)
  0xee078589:   call   0xf6c0b0b0 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0xee07858e:   add    $0x4,%esp
  0xee078591:   push   %eax
  0xee078592:   push   %edx
  0xee078593:   push   %ecx
  0xee078594:   call   0xf704a910 = Thread::current()
  0xee078599:   pop    %ecx
  0xee07859a:   pop    %edx
  0xee07859b:   cmp    %eax,%edi
  0xee07859d:   je     0xee0785b4
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee0785a3:   push   $0xf78b5a48
  0xee0785a8:   call   0xee0785ad
  0xee0785ad:   pusha  
  0xee0785ae:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0785b3:   hlt    
  0xee0785b4:   pop    %eax
  0xee0785b5:   movl   $0x0,0x228(%edi)
  0xee0785bf:   movl   $0x0,0x230(%edi)
  0xee0785c9:   movl   $0x0,0x22c(%edi)
  0xee0785d3:   vzeroupper 
  0xee0785d6:   cmpl   $0x0,0x4(%edi)
  0xee0785da:   jne    0xee05bbe0
  0xee0785e0:   mov    -0x20(%ebp),%esi
  0xee0785e3:   mov    -0x1c(%ebp),%edi
  0xee0785e6:   lea    0x0(%ebp,%edi,4),%edi
  0xee0785ea:   ret    
  0xee0785eb:   push   $0xf77a6b02
  0xee0785f0:   call   0xee0785f5
  0xee0785f5:   pusha  
  0xee0785f6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0785fb:   hlt    
  0xee0785fc:   mov    %ebp,%esp
  0xee0785fe:   pop    %ebp
  0xee0785ff:   pop    %esi
  0xee078600:   mov    %ebx,%esp
  0xee078602:   jmp    *%esi                        ;; 2611:   __ jmp(rbcp);
  0xee078604:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee078609:   call   0xee07860e
  0xee07860e:   pusha  
  0xee07860f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078614:   hlt    
  0xee078615:   nop
  0xee078616:   nop
  0xee078617:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
dreturn  175 dreturn  [0xee078640, 0xee078b58]  1304 bytes

--------------------------------------------------------------------------------
  0xee078640:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee078645:   add    $0x8,%esp
 ;; Thread-local Safepoint poll
  0xee078648:   push   %eax                         ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2585:     NOT_PRODUCT(__ block_comment("Thread-local Safepoint poll"));
                                                    ;; 2590:     __ get_thread(thread);
  0xee078649:   push   %edx
  0xee07864a:   push   %ecx
  0xee07864b:   call   0xf704a910 = Thread::current()
  0xee078650:   pop    %ecx
  0xee078651:   pop    %edx
  0xee078652:   mov    %eax,%edi
  0xee078654:   pop    %eax
  0xee078655:   testb  $0x1,0x288(%edi)             ;; 2591:     __ testb(Address(thread, JavaThread::polling_word_offset()), SafepointMechanism::poll_bit());
  0xee07865c:   je     0xee07871d                   ;; 2593:     __ jcc(Assembler::zero, no_safepoint);
  0xee078662:   sub    $0x8,%esp                    ;; 2594:     __ push(state);
  0xee078665:   vmovsd %xmm0,(%esp)
  0xee07866a:   call   0xee078674                   ;; 2595:     __ push_cont_fastpath();
                                                    ;; 2596:     __ call_VM(noreg, CAST_FROM_FN_PTR(address,
  0xee07866f:   jmp    0xee078715
  0xee078674:   lea    0x4(%esp),%eax
  0xee078678:   mov    %esi,-0x20(%ebp)
  0xee07867b:   cmpl   $0x0,-0x8(%ebp)
  0xee07867f:   je     0xee078696
  0xee078685:   push   $0xf78569d8
  0xee07868a:   call   0xee07868f
  0xee07868f:   pusha  
  0xee078690:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078695:   hlt    
  0xee078696:   push   %eax
  0xee078697:   push   %edx
  0xee078698:   push   %ecx
  0xee078699:   call   0xf704a910 = Thread::current()
  0xee07869e:   pop    %ecx
  0xee07869f:   pop    %edx
  0xee0786a0:   mov    %eax,%edi
  0xee0786a2:   pop    %eax
  0xee0786a3:   push   %edi
  0xee0786a4:   vzeroupper 
  0xee0786a7:   mov    %ebp,0x230(%edi)
  0xee0786ad:   mov    %eax,0x228(%edi)
  0xee0786b3:   call   0xf6c0de90 = InterpreterRuntime::at_safepoint(JavaThread*)
  0xee0786b8:   add    $0x4,%esp
  0xee0786bb:   push   %eax
  0xee0786bc:   push   %edx
  0xee0786bd:   push   %ecx
  0xee0786be:   call   0xf704a910 = Thread::current()
  0xee0786c3:   pop    %ecx
  0xee0786c4:   pop    %edx
  0xee0786c5:   cmp    %eax,%edi
  0xee0786c7:   je     0xee0786de
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee0786cd:   push   $0xf78b5a48
  0xee0786d2:   call   0xee0786d7
  0xee0786d7:   pusha  
  0xee0786d8:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0786dd:   hlt    
  0xee0786de:   pop    %eax
  0xee0786df:   movl   $0x0,0x228(%edi)
  0xee0786e9:   movl   $0x0,0x230(%edi)
  0xee0786f3:   movl   $0x0,0x22c(%edi)
  0xee0786fd:   vzeroupper 
  0xee078700:   cmpl   $0x0,0x4(%edi)
  0xee078704:   jne    0xee05bbe0
  0xee07870a:   mov    -0x20(%ebp),%esi
  0xee07870d:   mov    -0x1c(%ebp),%edi
  0xee078710:   lea    0x0(%ebp,%edi,4),%edi
  0xee078714:   ret    
  0xee078715:   vmovsd (%esp),%xmm0                 ;; 2598:     __ pop_cont_fastpath();
                                                    ;; 2599:     __ pop(state);
  0xee07871a:   add    $0x8,%esp
  0xee07871d:   push   %eax                         ;; 2600:     __ bind(no_safepoint);
                                                    ;; 2609:   __ remove_activation(state, rbcp);
  0xee07871e:   push   %edx
  0xee07871f:   push   %ecx
  0xee078720:   call   0xf704a910 = Thread::current()
  0xee078725:   pop    %ecx
  0xee078726:   pop    %edx
  0xee078727:   mov    %eax,%ecx
  0xee078729:   pop    %eax
  0xee07872a:   cmp    0x288(%ecx),%ebp
  0xee078730:   ja     0xee07873b
  0xee078736:   jmp    0xee07879b
  0xee07873b:   sub    $0x8,%esp
  0xee07873e:   vmovsd %xmm0,(%esp)
  0xee078743:   vzeroupper 
  0xee078746:   mov    %ebp,0x230(%ecx)
  0xee07874c:   movl   $0xee078743,0x22c(%ecx)
  0xee078756:   mov    %esp,0x228(%ecx)
  0xee07875c:   push   %ecx
  0xee07875d:   call   0xf6c0e120 = InterpreterRuntime::at_unwind(JavaThread*)
  0xee078762:   add    $0x4,%esp
  0xee078765:   push   %eax
  0xee078766:   push   %edx
  0xee078767:   push   %ecx
  0xee078768:   call   0xf704a910 = Thread::current()
  0xee07876d:   pop    %ecx
  0xee07876e:   pop    %edx
  0xee07876f:   mov    %eax,%ecx
  0xee078771:   pop    %eax
  0xee078772:   movl   $0x0,0x228(%ecx)
  0xee07877c:   movl   $0x0,0x230(%ecx)
  0xee078786:   movl   $0x0,0x22c(%ecx)
  0xee078790:   vzeroupper 
  0xee078793:   vmovsd (%esp),%xmm0
  0xee078798:   add    $0x8,%esp
  0xee07879b:   mov    0x2b1(%ecx),%bl
  0xee0787a1:   movb   $0x0,0x2b1(%ecx)
  0xee0787a8:   mov    -0xc(%ebp),%ecx
  0xee0787ab:   mov    0x18(%ecx),%ecx
  0xee0787ae:   test   $0x20,%cl
  0xee0787b1:   je     0xee078907
  0xee0787b7:   test   $0xff,%bl
  0xee0787ba:   jne    0xee0789e1
  0xee0787c0:   sub    $0x8,%esp
  0xee0787c3:   vmovsd %xmm0,(%esp)
  0xee0787c8:   lea    -0x2c(%ebp),%edx
  0xee0787cb:   mov    0x4(%edx),%eax
  0xee0787ce:   test   %eax,%eax
  0xee0787d0:   jne    0xee07889c
  0xee0787d6:   vmovsd (%esp),%xmm0
  0xee0787db:   add    $0x8,%esp
  0xee0787de:   emms   
  0xee0787e0:   call   0xee0787ea
  0xee0787e5:   jmp    0xee07888b
  0xee0787ea:   lea    0x4(%esp),%eax
  0xee0787ee:   mov    %esi,-0x20(%ebp)
  0xee0787f1:   cmpl   $0x0,-0x8(%ebp)
  0xee0787f5:   je     0xee07880c
  0xee0787fb:   push   $0xf78569d8
  0xee078800:   call   0xee078805
  0xee078805:   pusha  
  0xee078806:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07880b:   hlt    
  0xee07880c:   push   %eax
  0xee07880d:   push   %edx
  0xee07880e:   push   %ecx
  0xee07880f:   call   0xf704a910 = Thread::current()
  0xee078814:   pop    %ecx
  0xee078815:   pop    %edx
  0xee078816:   mov    %eax,%edi
  0xee078818:   pop    %eax
  0xee078819:   push   %edi
  0xee07881a:   vzeroupper 
  0xee07881d:   mov    %ebp,0x230(%edi)
  0xee078823:   mov    %eax,0x228(%edi)
  0xee078829:   call   0xf6c0c900 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0xee07882e:   add    $0x4,%esp
  0xee078831:   push   %eax
  0xee078832:   push   %edx
  0xee078833:   push   %ecx
  0xee078834:   call   0xf704a910 = Thread::current()
  0xee078839:   pop    %ecx
  0xee07883a:   pop    %edx
  0xee07883b:   cmp    %eax,%edi
  0xee07883d:   je     0xee078854
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee078843:   push   $0xf78b5a48
  0xee078848:   call   0xee07884d
  0xee07884d:   pusha  
  0xee07884e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078853:   hlt    
  0xee078854:   pop    %eax
  0xee078855:   movl   $0x0,0x228(%edi)
  0xee07885f:   movl   $0x0,0x230(%edi)
  0xee078869:   movl   $0x0,0x22c(%edi)
  0xee078873:   vzeroupper 
  0xee078876:   cmpl   $0x0,0x4(%edi)
  0xee07887a:   jne    0xee05bbe0
  0xee078880:   mov    -0x20(%ebp),%esi
  0xee078883:   mov    -0x1c(%ebp),%edi
  0xee078886:   lea    0x0(%ebp,%edi,4),%edi
  0xee07888a:   ret    
  0xee07888b:   push   $0xf77a6b02
  0xee078890:   call   0xee078895
  0xee078895:   pusha  
  0xee078896:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07889b:   hlt    
  0xee07889c:   mov    %esi,-0x20(%ebp)
  0xee07889f:   lea    (%edx),%eax
  0xee0788a1:   mov    0x4(%edx),%ecx
  0xee0788a4:   movl   $0x0,0x4(%edx)
  0xee0788ab:   mov    (%eax),%ebx
  0xee0788ad:   test   %ebx,%ebx
  0xee0788af:   je     0xee0788bf
  0xee0788b5:   lock cmpxchg %ebx,(%ecx)
  0xee0788b9:   jne    0xee0788d5
  0xee0788bf:   push   %eax
  0xee0788c0:   push   %edx
  0xee0788c1:   push   %ecx
  0xee0788c2:   call   0xf704a910 = Thread::current()
  0xee0788c7:   pop    %ecx
  0xee0788c8:   pop    %edx
  0xee0788c9:   decl   0x308(%eax)
  0xee0788cf:   pop    %eax
  0xee0788d0:   jmp    0xee0788fc
  0xee0788d5:   mov    %ecx,0x4(%edx)
  0xee0788d8:   push   %edx
  0xee0788d9:   cmpl   $0x0,-0x8(%ebp)
  0xee0788dd:   je     0xee0788f4
  0xee0788e3:   push   $0xf785694c
  0xee0788e8:   call   0xee0788ed
  0xee0788ed:   pusha  
  0xee0788ee:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0788f3:   hlt    
  0xee0788f4:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee0788f9:   add    $0x4,%esp
  0xee0788fc:   mov    -0x20(%ebp),%esi
  0xee0788ff:   vmovsd (%esp),%xmm0
  0xee078904:   add    $0x8,%esp
  0xee078907:   mov    -0x24(%ebp),%ecx
  0xee07890a:   lea    -0x24(%ebp),%ebx
  0xee07890d:   jmp    0xee0789dd
  0xee078912:   emms   
  0xee078914:   call   0xee07891e
  0xee078919:   jmp    0xee0789bf
  0xee07891e:   lea    0x4(%esp),%eax
  0xee078922:   mov    %esi,-0x20(%ebp)
  0xee078925:   cmpl   $0x0,-0x8(%ebp)
  0xee078929:   je     0xee078940
  0xee07892f:   push   $0xf78569d8
  0xee078934:   call   0xee078939
  0xee078939:   pusha  
  0xee07893a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07893f:   hlt    
  0xee078940:   push   %eax
  0xee078941:   push   %edx
  0xee078942:   push   %ecx
  0xee078943:   call   0xf704a910 = Thread::current()
  0xee078948:   pop    %ecx
  0xee078949:   pop    %edx
  0xee07894a:   mov    %eax,%edi
  0xee07894c:   pop    %eax
  0xee07894d:   push   %edi
  0xee07894e:   vzeroupper 
  0xee078951:   mov    %ebp,0x230(%edi)
  0xee078957:   mov    %eax,0x228(%edi)
  0xee07895d:   call   0xf6c0c900 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0xee078962:   add    $0x4,%esp
  0xee078965:   push   %eax
  0xee078966:   push   %edx
  0xee078967:   push   %ecx
  0xee078968:   call   0xf704a910 = Thread::current()
  0xee07896d:   pop    %ecx
  0xee07896e:   pop    %edx
  0xee07896f:   cmp    %eax,%edi
  0xee078971:   je     0xee078988
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee078977:   push   $0xf78b5a48
  0xee07897c:   call   0xee078981
  0xee078981:   pusha  
  0xee078982:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078987:   hlt    
  0xee078988:   pop    %eax
  0xee078989:   movl   $0x0,0x228(%edi)
  0xee078993:   movl   $0x0,0x230(%edi)
  0xee07899d:   movl   $0x0,0x22c(%edi)
  0xee0789a7:   vzeroupper 
  0xee0789aa:   cmpl   $0x0,0x4(%edi)
  0xee0789ae:   jne    0xee05bbe0
  0xee0789b4:   mov    -0x20(%ebp),%esi
  0xee0789b7:   mov    -0x1c(%ebp),%edi
  0xee0789ba:   lea    0x0(%ebp,%edi,4),%edi
  0xee0789be:   ret    
  0xee0789bf:   push   $0xf77a6b02
  0xee0789c4:   call   0xee0789c9
  0xee0789c9:   pusha  
  0xee0789ca:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0789cf:   hlt    
  0xee0789d0:   cmpl   $0x0,0x4(%ecx)
  0xee0789d4:   jne    0xee078912
  0xee0789da:   add    $0x8,%ecx
  0xee0789dd:   cmp    %ebx,%ecx
  0xee0789df:   jne    0xee0789d0
  0xee0789e1:   cmpb   $0x0,0xf7ca3a0d
  0xee0789e8:   je     0xee078a33
  0xee0789ee:   sub    $0x8,%esp
  0xee0789f1:   vmovsd %xmm0,(%esp)
  0xee0789f6:   push   %eax
  0xee0789f7:   push   %edx
  0xee0789f8:   push   %ecx
  0xee0789f9:   call   0xf704a910 = Thread::current()
  0xee0789fe:   pop    %ecx
  0xee0789ff:   pop    %edx
  0xee078a00:   mov    %eax,%ecx
  0xee078a02:   pop    %eax
  0xee078a03:   mov    -0xc(%ebp),%ebx
  0xee078a06:   push   %ebx
  0xee078a07:   push   %ecx
  0xee078a08:   cmpl   $0x0,-0x8(%ebp)
  0xee078a0c:   je     0xee078a23
  0xee078a12:   push   $0xf785694c
  0xee078a17:   call   0xee078a1c
  0xee078a1c:   pusha  
  0xee078a1d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078a22:   hlt    
  0xee078a23:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee078a28:   add    $0x8,%esp
  0xee078a2b:   vmovsd (%esp),%xmm0
  0xee078a30:   add    $0x8,%esp
  0xee078a33:   mov    -0x4(%ebp),%ebx
  0xee078a36:   push   %eax
  0xee078a37:   push   %edx
  0xee078a38:   push   %ecx
  0xee078a39:   call   0xf704a910 = Thread::current()
  0xee078a3e:   pop    %ecx
  0xee078a3f:   pop    %edx
  0xee078a40:   mov    %eax,%ecx
  0xee078a42:   pop    %eax
  0xee078a43:   cmpl   $0x3,0x2bc(%ecx)
  0xee078a4a:   je     0xee078b3c
  0xee078a50:   cmp    0x2c4(%ecx),%ebx
  0xee078a56:   jle    0xee078b3c
  0xee078a5c:   push   %ecx
  0xee078a5d:   cmpl   $0x0,-0x8(%ebp)
  0xee078a61:   je     0xee078a78
  0xee078a67:   push   $0xf785694c
  0xee078a6c:   call   0xee078a71
  0xee078a71:   pusha  
  0xee078a72:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078a77:   hlt    
  0xee078a78:   call   0xf739fd80 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0xee078a7d:   add    $0x4,%esp
  0xee078a80:   call   0xee078a8a
  0xee078a85:   jmp    0xee078b2b
  0xee078a8a:   lea    0x4(%esp),%eax
  0xee078a8e:   mov    %esi,-0x20(%ebp)
  0xee078a91:   cmpl   $0x0,-0x8(%ebp)
  0xee078a95:   je     0xee078aac
  0xee078a9b:   push   $0xf78569d8
  0xee078aa0:   call   0xee078aa5
  0xee078aa5:   pusha  
  0xee078aa6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078aab:   hlt    
  0xee078aac:   push   %eax
  0xee078aad:   push   %edx
  0xee078aae:   push   %ecx
  0xee078aaf:   call   0xf704a910 = Thread::current()
  0xee078ab4:   pop    %ecx
  0xee078ab5:   pop    %edx
  0xee078ab6:   mov    %eax,%edi
  0xee078ab8:   pop    %eax
  0xee078ab9:   push   %edi
  0xee078aba:   vzeroupper 
  0xee078abd:   mov    %ebp,0x230(%edi)
  0xee078ac3:   mov    %eax,0x228(%edi)
  0xee078ac9:   call   0xf6c0b0b0 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0xee078ace:   add    $0x4,%esp
  0xee078ad1:   push   %eax
  0xee078ad2:   push   %edx
  0xee078ad3:   push   %ecx
  0xee078ad4:   call   0xf704a910 = Thread::current()
  0xee078ad9:   pop    %ecx
  0xee078ada:   pop    %edx
  0xee078adb:   cmp    %eax,%edi
  0xee078add:   je     0xee078af4
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee078ae3:   push   $0xf78b5a48
  0xee078ae8:   call   0xee078aed
  0xee078aed:   pusha  
  0xee078aee:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078af3:   hlt    
  0xee078af4:   pop    %eax
  0xee078af5:   movl   $0x0,0x228(%edi)
  0xee078aff:   movl   $0x0,0x230(%edi)
  0xee078b09:   movl   $0x0,0x22c(%edi)
  0xee078b13:   vzeroupper 
  0xee078b16:   cmpl   $0x0,0x4(%edi)
  0xee078b1a:   jne    0xee05bbe0
  0xee078b20:   mov    -0x20(%ebp),%esi
  0xee078b23:   mov    -0x1c(%ebp),%edi
  0xee078b26:   lea    0x0(%ebp,%edi,4),%edi
  0xee078b2a:   ret    
  0xee078b2b:   push   $0xf77a6b02
  0xee078b30:   call   0xee078b35
  0xee078b35:   pusha  
  0xee078b36:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078b3b:   hlt    
  0xee078b3c:   mov    %ebp,%esp
  0xee078b3e:   pop    %ebp
  0xee078b3f:   pop    %esi
  0xee078b40:   mov    %ebx,%esp
  0xee078b42:   jmp    *%esi                        ;; 2611:   __ jmp(rbcp);
  0xee078b44:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee078b49:   call   0xee078b4e
  0xee078b4e:   pusha  
  0xee078b4f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078b54:   hlt    
  0xee078b55:   nop
  0xee078b56:   nop
  0xee078b57:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
areturn  176 areturn  [0xee078b80, 0xee079050]  1232 bytes

--------------------------------------------------------------------------------
  0xee078b80:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
 ;; Thread-local Safepoint poll
  0xee078b81:   push   %eax                         ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2585:     NOT_PRODUCT(__ block_comment("Thread-local Safepoint poll"));
                                                    ;; 2590:     __ get_thread(thread);
  0xee078b82:   push   %edx
  0xee078b83:   push   %ecx
  0xee078b84:   call   0xf704a910 = Thread::current()
  0xee078b89:   pop    %ecx
  0xee078b8a:   pop    %edx
  0xee078b8b:   mov    %eax,%edi
  0xee078b8d:   pop    %eax
  0xee078b8e:   testb  $0x1,0x288(%edi)             ;; 2591:     __ testb(Address(thread, JavaThread::polling_word_offset()), SafepointMechanism::poll_bit());
  0xee078b95:   je     0xee078c48                   ;; 2593:     __ jcc(Assembler::zero, no_safepoint);
  0xee078b9b:   push   %eax                         ;; 2594:     __ push(state);
  0xee078b9c:   call   0xee078ba6                   ;; 2595:     __ push_cont_fastpath();
                                                    ;; 2596:     __ call_VM(noreg, CAST_FROM_FN_PTR(address,
  0xee078ba1:   jmp    0xee078c47
  0xee078ba6:   lea    0x4(%esp),%eax
  0xee078baa:   mov    %esi,-0x20(%ebp)
  0xee078bad:   cmpl   $0x0,-0x8(%ebp)
  0xee078bb1:   je     0xee078bc8
  0xee078bb7:   push   $0xf78569d8
  0xee078bbc:   call   0xee078bc1
  0xee078bc1:   pusha  
  0xee078bc2:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078bc7:   hlt    
  0xee078bc8:   push   %eax
  0xee078bc9:   push   %edx
  0xee078bca:   push   %ecx
  0xee078bcb:   call   0xf704a910 = Thread::current()
  0xee078bd0:   pop    %ecx
  0xee078bd1:   pop    %edx
  0xee078bd2:   mov    %eax,%edi
  0xee078bd4:   pop    %eax
  0xee078bd5:   push   %edi
  0xee078bd6:   vzeroupper 
  0xee078bd9:   mov    %ebp,0x230(%edi)
  0xee078bdf:   mov    %eax,0x228(%edi)
  0xee078be5:   call   0xf6c0de90 = InterpreterRuntime::at_safepoint(JavaThread*)
  0xee078bea:   add    $0x4,%esp
  0xee078bed:   push   %eax
  0xee078bee:   push   %edx
  0xee078bef:   push   %ecx
  0xee078bf0:   call   0xf704a910 = Thread::current()
  0xee078bf5:   pop    %ecx
  0xee078bf6:   pop    %edx
  0xee078bf7:   cmp    %eax,%edi
  0xee078bf9:   je     0xee078c10
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee078bff:   push   $0xf78b5a48
  0xee078c04:   call   0xee078c09
  0xee078c09:   pusha  
  0xee078c0a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078c0f:   hlt    
  0xee078c10:   pop    %eax
  0xee078c11:   movl   $0x0,0x228(%edi)
  0xee078c1b:   movl   $0x0,0x230(%edi)
  0xee078c25:   movl   $0x0,0x22c(%edi)
  0xee078c2f:   vzeroupper 
  0xee078c32:   cmpl   $0x0,0x4(%edi)
  0xee078c36:   jne    0xee05bbe0
  0xee078c3c:   mov    -0x20(%ebp),%esi
  0xee078c3f:   mov    -0x1c(%ebp),%edi
  0xee078c42:   lea    0x0(%ebp,%edi,4),%edi
  0xee078c46:   ret    
  0xee078c47:   pop    %eax                         ;; 2598:     __ pop_cont_fastpath();
                                                    ;; 2599:     __ pop(state);
  0xee078c48:   push   %eax                         ;; 2600:     __ bind(no_safepoint);
                                                    ;; 2609:   __ remove_activation(state, rbcp);
  0xee078c49:   push   %edx
  0xee078c4a:   push   %ecx
  0xee078c4b:   call   0xf704a910 = Thread::current()
  0xee078c50:   pop    %ecx
  0xee078c51:   pop    %edx
  0xee078c52:   mov    %eax,%ecx
  0xee078c54:   pop    %eax
  0xee078c55:   cmp    0x288(%ecx),%ebp
  0xee078c5b:   ja     0xee078c66
  0xee078c61:   jmp    0xee078cb8
  0xee078c66:   push   %eax
  0xee078c67:   vzeroupper 
  0xee078c6a:   mov    %ebp,0x230(%ecx)
  0xee078c70:   movl   $0xee078c67,0x22c(%ecx)
  0xee078c7a:   mov    %esp,0x228(%ecx)
  0xee078c80:   push   %ecx
  0xee078c81:   call   0xf6c0e120 = InterpreterRuntime::at_unwind(JavaThread*)
  0xee078c86:   add    $0x4,%esp
  0xee078c89:   push   %eax
  0xee078c8a:   push   %edx
  0xee078c8b:   push   %ecx
  0xee078c8c:   call   0xf704a910 = Thread::current()
  0xee078c91:   pop    %ecx
  0xee078c92:   pop    %edx
  0xee078c93:   mov    %eax,%ecx
  0xee078c95:   pop    %eax
  0xee078c96:   movl   $0x0,0x228(%ecx)
  0xee078ca0:   movl   $0x0,0x230(%ecx)
  0xee078caa:   movl   $0x0,0x22c(%ecx)
  0xee078cb4:   vzeroupper 
  0xee078cb7:   pop    %eax
  0xee078cb8:   mov    0x2b1(%ecx),%bl
  0xee078cbe:   movb   $0x0,0x2b1(%ecx)
  0xee078cc5:   mov    -0xc(%ebp),%ecx
  0xee078cc8:   mov    0x18(%ecx),%ecx
  0xee078ccb:   test   $0x20,%cl
  0xee078cce:   je     0xee078e0f
  0xee078cd4:   test   $0xff,%bl
  0xee078cd7:   jne    0xee078ee9
  0xee078cdd:   push   %eax
  0xee078cde:   lea    -0x2c(%ebp),%edx
  0xee078ce1:   mov    0x4(%edx),%eax
  0xee078ce4:   test   %eax,%eax
  0xee078ce6:   jne    0xee078dab
  0xee078cec:   pop    %eax
  0xee078ced:   emms   
  0xee078cef:   call   0xee078cf9
  0xee078cf4:   jmp    0xee078d9a
  0xee078cf9:   lea    0x4(%esp),%eax
  0xee078cfd:   mov    %esi,-0x20(%ebp)
  0xee078d00:   cmpl   $0x0,-0x8(%ebp)
  0xee078d04:   je     0xee078d1b
  0xee078d0a:   push   $0xf78569d8
  0xee078d0f:   call   0xee078d14
  0xee078d14:   pusha  
  0xee078d15:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078d1a:   hlt    
  0xee078d1b:   push   %eax
  0xee078d1c:   push   %edx
  0xee078d1d:   push   %ecx
  0xee078d1e:   call   0xf704a910 = Thread::current()
  0xee078d23:   pop    %ecx
  0xee078d24:   pop    %edx
  0xee078d25:   mov    %eax,%edi
  0xee078d27:   pop    %eax
  0xee078d28:   push   %edi
  0xee078d29:   vzeroupper 
  0xee078d2c:   mov    %ebp,0x230(%edi)
  0xee078d32:   mov    %eax,0x228(%edi)
  0xee078d38:   call   0xf6c0c900 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0xee078d3d:   add    $0x4,%esp
  0xee078d40:   push   %eax
  0xee078d41:   push   %edx
  0xee078d42:   push   %ecx
  0xee078d43:   call   0xf704a910 = Thread::current()
  0xee078d48:   pop    %ecx
  0xee078d49:   pop    %edx
  0xee078d4a:   cmp    %eax,%edi
  0xee078d4c:   je     0xee078d63
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee078d52:   push   $0xf78b5a48
  0xee078d57:   call   0xee078d5c
  0xee078d5c:   pusha  
  0xee078d5d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078d62:   hlt    
  0xee078d63:   pop    %eax
  0xee078d64:   movl   $0x0,0x228(%edi)
  0xee078d6e:   movl   $0x0,0x230(%edi)
  0xee078d78:   movl   $0x0,0x22c(%edi)
  0xee078d82:   vzeroupper 
  0xee078d85:   cmpl   $0x0,0x4(%edi)
  0xee078d89:   jne    0xee05bbe0
  0xee078d8f:   mov    -0x20(%ebp),%esi
  0xee078d92:   mov    -0x1c(%ebp),%edi
  0xee078d95:   lea    0x0(%ebp,%edi,4),%edi
  0xee078d99:   ret    
  0xee078d9a:   push   $0xf77a6b02
  0xee078d9f:   call   0xee078da4
  0xee078da4:   pusha  
  0xee078da5:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078daa:   hlt    
  0xee078dab:   mov    %esi,-0x20(%ebp)
  0xee078dae:   lea    (%edx),%eax
  0xee078db0:   mov    0x4(%edx),%ecx
  0xee078db3:   movl   $0x0,0x4(%edx)
  0xee078dba:   mov    (%eax),%ebx
  0xee078dbc:   test   %ebx,%ebx
  0xee078dbe:   je     0xee078dce
  0xee078dc4:   lock cmpxchg %ebx,(%ecx)
  0xee078dc8:   jne    0xee078de4
  0xee078dce:   push   %eax
  0xee078dcf:   push   %edx
  0xee078dd0:   push   %ecx
  0xee078dd1:   call   0xf704a910 = Thread::current()
  0xee078dd6:   pop    %ecx
  0xee078dd7:   pop    %edx
  0xee078dd8:   decl   0x308(%eax)
  0xee078dde:   pop    %eax
  0xee078ddf:   jmp    0xee078e0b
  0xee078de4:   mov    %ecx,0x4(%edx)
  0xee078de7:   push   %edx
  0xee078de8:   cmpl   $0x0,-0x8(%ebp)
  0xee078dec:   je     0xee078e03
  0xee078df2:   push   $0xf785694c
  0xee078df7:   call   0xee078dfc
  0xee078dfc:   pusha  
  0xee078dfd:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078e02:   hlt    
  0xee078e03:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee078e08:   add    $0x4,%esp
  0xee078e0b:   mov    -0x20(%ebp),%esi
  0xee078e0e:   pop    %eax
  0xee078e0f:   mov    -0x24(%ebp),%ecx
  0xee078e12:   lea    -0x24(%ebp),%ebx
  0xee078e15:   jmp    0xee078ee5
  0xee078e1a:   emms   
  0xee078e1c:   call   0xee078e26
  0xee078e21:   jmp    0xee078ec7
  0xee078e26:   lea    0x4(%esp),%eax
  0xee078e2a:   mov    %esi,-0x20(%ebp)
  0xee078e2d:   cmpl   $0x0,-0x8(%ebp)
  0xee078e31:   je     0xee078e48
  0xee078e37:   push   $0xf78569d8
  0xee078e3c:   call   0xee078e41
  0xee078e41:   pusha  
  0xee078e42:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078e47:   hlt    
  0xee078e48:   push   %eax
  0xee078e49:   push   %edx
  0xee078e4a:   push   %ecx
  0xee078e4b:   call   0xf704a910 = Thread::current()
  0xee078e50:   pop    %ecx
  0xee078e51:   pop    %edx
  0xee078e52:   mov    %eax,%edi
  0xee078e54:   pop    %eax
  0xee078e55:   push   %edi
  0xee078e56:   vzeroupper 
  0xee078e59:   mov    %ebp,0x230(%edi)
  0xee078e5f:   mov    %eax,0x228(%edi)
  0xee078e65:   call   0xf6c0c900 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0xee078e6a:   add    $0x4,%esp
  0xee078e6d:   push   %eax
  0xee078e6e:   push   %edx
  0xee078e6f:   push   %ecx
  0xee078e70:   call   0xf704a910 = Thread::current()
  0xee078e75:   pop    %ecx
  0xee078e76:   pop    %edx
  0xee078e77:   cmp    %eax,%edi
  0xee078e79:   je     0xee078e90
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee078e7f:   push   $0xf78b5a48
  0xee078e84:   call   0xee078e89
  0xee078e89:   pusha  
  0xee078e8a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078e8f:   hlt    
  0xee078e90:   pop    %eax
  0xee078e91:   movl   $0x0,0x228(%edi)
  0xee078e9b:   movl   $0x0,0x230(%edi)
  0xee078ea5:   movl   $0x0,0x22c(%edi)
  0xee078eaf:   vzeroupper 
  0xee078eb2:   cmpl   $0x0,0x4(%edi)
  0xee078eb6:   jne    0xee05bbe0
  0xee078ebc:   mov    -0x20(%ebp),%esi
  0xee078ebf:   mov    -0x1c(%ebp),%edi
  0xee078ec2:   lea    0x0(%ebp,%edi,4),%edi
  0xee078ec6:   ret    
  0xee078ec7:   push   $0xf77a6b02
  0xee078ecc:   call   0xee078ed1
  0xee078ed1:   pusha  
  0xee078ed2:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078ed7:   hlt    
  0xee078ed8:   cmpl   $0x0,0x4(%ecx)
  0xee078edc:   jne    0xee078e1a
  0xee078ee2:   add    $0x8,%ecx
  0xee078ee5:   cmp    %ebx,%ecx
  0xee078ee7:   jne    0xee078ed8
  0xee078ee9:   cmpb   $0x0,0xf7ca3a0d
  0xee078ef0:   je     0xee078f2d
  0xee078ef6:   push   %eax
  0xee078ef7:   push   %eax
  0xee078ef8:   push   %edx
  0xee078ef9:   push   %ecx
  0xee078efa:   call   0xf704a910 = Thread::current()
  0xee078eff:   pop    %ecx
  0xee078f00:   pop    %edx
  0xee078f01:   mov    %eax,%ecx
  0xee078f03:   pop    %eax
  0xee078f04:   mov    -0xc(%ebp),%ebx
  0xee078f07:   push   %ebx
  0xee078f08:   push   %ecx
  0xee078f09:   cmpl   $0x0,-0x8(%ebp)
  0xee078f0d:   je     0xee078f24
  0xee078f13:   push   $0xf785694c
  0xee078f18:   call   0xee078f1d
  0xee078f1d:   pusha  
  0xee078f1e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078f23:   hlt    
  0xee078f24:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee078f29:   add    $0x8,%esp
  0xee078f2c:   pop    %eax
  0xee078f2d:   mov    -0x4(%ebp),%ebx
  0xee078f30:   push   %eax
  0xee078f31:   push   %edx
  0xee078f32:   push   %ecx
  0xee078f33:   call   0xf704a910 = Thread::current()
  0xee078f38:   pop    %ecx
  0xee078f39:   pop    %edx
  0xee078f3a:   mov    %eax,%ecx
  0xee078f3c:   pop    %eax
  0xee078f3d:   cmpl   $0x3,0x2bc(%ecx)
  0xee078f44:   je     0xee079036
  0xee078f4a:   cmp    0x2c4(%ecx),%ebx
  0xee078f50:   jle    0xee079036
  0xee078f56:   push   %ecx
  0xee078f57:   cmpl   $0x0,-0x8(%ebp)
  0xee078f5b:   je     0xee078f72
  0xee078f61:   push   $0xf785694c
  0xee078f66:   call   0xee078f6b
  0xee078f6b:   pusha  
  0xee078f6c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078f71:   hlt    
  0xee078f72:   call   0xf739fd80 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0xee078f77:   add    $0x4,%esp
  0xee078f7a:   call   0xee078f84
  0xee078f7f:   jmp    0xee079025
  0xee078f84:   lea    0x4(%esp),%eax
  0xee078f88:   mov    %esi,-0x20(%ebp)
  0xee078f8b:   cmpl   $0x0,-0x8(%ebp)
  0xee078f8f:   je     0xee078fa6
  0xee078f95:   push   $0xf78569d8
  0xee078f9a:   call   0xee078f9f
  0xee078f9f:   pusha  
  0xee078fa0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078fa5:   hlt    
  0xee078fa6:   push   %eax
  0xee078fa7:   push   %edx
  0xee078fa8:   push   %ecx
  0xee078fa9:   call   0xf704a910 = Thread::current()
  0xee078fae:   pop    %ecx
  0xee078faf:   pop    %edx
  0xee078fb0:   mov    %eax,%edi
  0xee078fb2:   pop    %eax
  0xee078fb3:   push   %edi
  0xee078fb4:   vzeroupper 
  0xee078fb7:   mov    %ebp,0x230(%edi)
  0xee078fbd:   mov    %eax,0x228(%edi)
  0xee078fc3:   call   0xf6c0b0b0 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0xee078fc8:   add    $0x4,%esp
  0xee078fcb:   push   %eax
  0xee078fcc:   push   %edx
  0xee078fcd:   push   %ecx
  0xee078fce:   call   0xf704a910 = Thread::current()
  0xee078fd3:   pop    %ecx
  0xee078fd4:   pop    %edx
  0xee078fd5:   cmp    %eax,%edi
  0xee078fd7:   je     0xee078fee
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee078fdd:   push   $0xf78b5a48
  0xee078fe2:   call   0xee078fe7
  0xee078fe7:   pusha  
  0xee078fe8:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee078fed:   hlt    
  0xee078fee:   pop    %eax
  0xee078fef:   movl   $0x0,0x228(%edi)
  0xee078ff9:   movl   $0x0,0x230(%edi)
  0xee079003:   movl   $0x0,0x22c(%edi)
  0xee07900d:   vzeroupper 
  0xee079010:   cmpl   $0x0,0x4(%edi)
  0xee079014:   jne    0xee05bbe0
  0xee07901a:   mov    -0x20(%ebp),%esi
  0xee07901d:   mov    -0x1c(%ebp),%edi
  0xee079020:   lea    0x0(%ebp,%edi,4),%edi
  0xee079024:   ret    
  0xee079025:   push   $0xf77a6b02
  0xee07902a:   call   0xee07902f
  0xee07902f:   pusha  
  0xee079030:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079035:   hlt    
  0xee079036:   mov    %ebp,%esp
  0xee079038:   pop    %ebp
  0xee079039:   pop    %esi
  0xee07903a:   mov    %ebx,%esp
  0xee07903c:   jmp    *%esi                        ;; 2611:   __ jmp(rbcp);
  0xee07903e:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee079043:   call   0xee079048
  0xee079048:   pusha  
  0xee079049:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07904e:   hlt    
  0xee07904f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
return  177 return  [0xee079080, 0xee079560]  1248 bytes

--------------------------------------------------------------------------------
  0xee079080:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee079083:   vmovss %xmm0,(%esp)
  0xee079088:   jmp    0xee079099                   ;; 1751:       __ jmpb(L);
  0xee07908a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07908d:   vmovsd %xmm0,(%esp)
  0xee079092:   jmp    0xee079099                   ;; 1754:       __ jmpb(L);
  0xee079094:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee079095:   push   %eax
  0xee079096:   jmp    0xee079099                   ;; 1765:       __ jmpb(L);
  0xee079098:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
 ;; Thread-local Safepoint poll
  0xee079099:   push   %eax                         ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2585:     NOT_PRODUCT(__ block_comment("Thread-local Safepoint poll"));
                                                    ;; 2590:     __ get_thread(thread);
  0xee07909a:   push   %edx
  0xee07909b:   push   %ecx
  0xee07909c:   call   0xf704a910 = Thread::current()
  0xee0790a1:   pop    %ecx
  0xee0790a2:   pop    %edx
  0xee0790a3:   mov    %eax,%edi
  0xee0790a5:   pop    %eax
  0xee0790a6:   testb  $0x1,0x288(%edi)             ;; 2591:     __ testb(Address(thread, JavaThread::polling_word_offset()), SafepointMechanism::poll_bit());
  0xee0790ad:   je     0xee07915e                   ;; 2593:     __ jcc(Assembler::zero, no_safepoint);
  0xee0790b3:   call   0xee0790bd                   ;; 2594:     __ push(state);
                                                    ;; 2595:     __ push_cont_fastpath();
                                                    ;; 2596:     __ call_VM(noreg, CAST_FROM_FN_PTR(address,
  0xee0790b8:   jmp    0xee07915e
  0xee0790bd:   lea    0x4(%esp),%eax
  0xee0790c1:   mov    %esi,-0x20(%ebp)
  0xee0790c4:   cmpl   $0x0,-0x8(%ebp)
  0xee0790c8:   je     0xee0790df
  0xee0790ce:   push   $0xf78569d8
  0xee0790d3:   call   0xee0790d8
  0xee0790d8:   pusha  
  0xee0790d9:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0790de:   hlt    
  0xee0790df:   push   %eax
  0xee0790e0:   push   %edx
  0xee0790e1:   push   %ecx
  0xee0790e2:   call   0xf704a910 = Thread::current()
  0xee0790e7:   pop    %ecx
  0xee0790e8:   pop    %edx
  0xee0790e9:   mov    %eax,%edi
  0xee0790eb:   pop    %eax
  0xee0790ec:   push   %edi
  0xee0790ed:   vzeroupper 
  0xee0790f0:   mov    %ebp,0x230(%edi)
  0xee0790f6:   mov    %eax,0x228(%edi)
  0xee0790fc:   call   0xf6c0de90 = InterpreterRuntime::at_safepoint(JavaThread*)
  0xee079101:   add    $0x4,%esp
  0xee079104:   push   %eax
  0xee079105:   push   %edx
  0xee079106:   push   %ecx
  0xee079107:   call   0xf704a910 = Thread::current()
  0xee07910c:   pop    %ecx
  0xee07910d:   pop    %edx
  0xee07910e:   cmp    %eax,%edi
  0xee079110:   je     0xee079127
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee079116:   push   $0xf78b5a48
  0xee07911b:   call   0xee079120
  0xee079120:   pusha  
  0xee079121:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079126:   hlt    
  0xee079127:   pop    %eax
  0xee079128:   movl   $0x0,0x228(%edi)
  0xee079132:   movl   $0x0,0x230(%edi)
  0xee07913c:   movl   $0x0,0x22c(%edi)
  0xee079146:   vzeroupper 
  0xee079149:   cmpl   $0x0,0x4(%edi)
  0xee07914d:   jne    0xee05bbe0
  0xee079153:   mov    -0x20(%ebp),%esi
  0xee079156:   mov    -0x1c(%ebp),%edi
  0xee079159:   lea    0x0(%ebp,%edi,4),%edi
  0xee07915d:   ret    
  0xee07915e:   push   %eax                         ;; 2598:     __ pop_cont_fastpath();
                                                    ;; 2599:     __ pop(state);
                                                    ;; 2600:     __ bind(no_safepoint);
                                                    ;; 2609:   __ remove_activation(state, rbcp);
  0xee07915f:   push   %edx
  0xee079160:   push   %ecx
  0xee079161:   call   0xf704a910 = Thread::current()
  0xee079166:   pop    %ecx
  0xee079167:   pop    %edx
  0xee079168:   mov    %eax,%ecx
  0xee07916a:   pop    %eax
  0xee07916b:   cmp    0x288(%ecx),%ebp
  0xee079171:   ja     0xee07917c
  0xee079177:   jmp    0xee0791cc
  0xee07917c:   vzeroupper 
  0xee07917f:   mov    %ebp,0x230(%ecx)
  0xee079185:   movl   $0xee07917c,0x22c(%ecx)
  0xee07918f:   mov    %esp,0x228(%ecx)
  0xee079195:   push   %ecx
  0xee079196:   call   0xf6c0e120 = InterpreterRuntime::at_unwind(JavaThread*)
  0xee07919b:   add    $0x4,%esp
  0xee07919e:   push   %eax
  0xee07919f:   push   %edx
  0xee0791a0:   push   %ecx
  0xee0791a1:   call   0xf704a910 = Thread::current()
  0xee0791a6:   pop    %ecx
  0xee0791a7:   pop    %edx
  0xee0791a8:   mov    %eax,%ecx
  0xee0791aa:   pop    %eax
  0xee0791ab:   movl   $0x0,0x228(%ecx)
  0xee0791b5:   movl   $0x0,0x230(%ecx)
  0xee0791bf:   movl   $0x0,0x22c(%ecx)
  0xee0791c9:   vzeroupper 
  0xee0791cc:   mov    0x2b1(%ecx),%bl
  0xee0791d2:   movb   $0x0,0x2b1(%ecx)
  0xee0791d9:   mov    -0xc(%ebp),%ecx
  0xee0791dc:   mov    0x18(%ecx),%ecx
  0xee0791df:   test   $0x20,%cl
  0xee0791e2:   je     0xee079320
  0xee0791e8:   test   $0xff,%bl
  0xee0791eb:   jne    0xee0793fa
  0xee0791f1:   lea    -0x2c(%ebp),%edx
  0xee0791f4:   mov    0x4(%edx),%eax
  0xee0791f7:   test   %eax,%eax
  0xee0791f9:   jne    0xee0792bd
  0xee0791ff:   emms   
  0xee079201:   call   0xee07920b
  0xee079206:   jmp    0xee0792ac
  0xee07920b:   lea    0x4(%esp),%eax
  0xee07920f:   mov    %esi,-0x20(%ebp)
  0xee079212:   cmpl   $0x0,-0x8(%ebp)
  0xee079216:   je     0xee07922d
  0xee07921c:   push   $0xf78569d8
  0xee079221:   call   0xee079226
  0xee079226:   pusha  
  0xee079227:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07922c:   hlt    
  0xee07922d:   push   %eax
  0xee07922e:   push   %edx
  0xee07922f:   push   %ecx
  0xee079230:   call   0xf704a910 = Thread::current()
  0xee079235:   pop    %ecx
  0xee079236:   pop    %edx
  0xee079237:   mov    %eax,%edi
  0xee079239:   pop    %eax
  0xee07923a:   push   %edi
  0xee07923b:   vzeroupper 
  0xee07923e:   mov    %ebp,0x230(%edi)
  0xee079244:   mov    %eax,0x228(%edi)
  0xee07924a:   call   0xf6c0c900 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0xee07924f:   add    $0x4,%esp
  0xee079252:   push   %eax
  0xee079253:   push   %edx
  0xee079254:   push   %ecx
  0xee079255:   call   0xf704a910 = Thread::current()
  0xee07925a:   pop    %ecx
  0xee07925b:   pop    %edx
  0xee07925c:   cmp    %eax,%edi
  0xee07925e:   je     0xee079275
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee079264:   push   $0xf78b5a48
  0xee079269:   call   0xee07926e
  0xee07926e:   pusha  
  0xee07926f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079274:   hlt    
  0xee079275:   pop    %eax
  0xee079276:   movl   $0x0,0x228(%edi)
  0xee079280:   movl   $0x0,0x230(%edi)
  0xee07928a:   movl   $0x0,0x22c(%edi)
  0xee079294:   vzeroupper 
  0xee079297:   cmpl   $0x0,0x4(%edi)
  0xee07929b:   jne    0xee05bbe0
  0xee0792a1:   mov    -0x20(%ebp),%esi
  0xee0792a4:   mov    -0x1c(%ebp),%edi
  0xee0792a7:   lea    0x0(%ebp,%edi,4),%edi
  0xee0792ab:   ret    
  0xee0792ac:   push   $0xf77a6b02
  0xee0792b1:   call   0xee0792b6
  0xee0792b6:   pusha  
  0xee0792b7:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0792bc:   hlt    
  0xee0792bd:   mov    %esi,-0x20(%ebp)
  0xee0792c0:   lea    (%edx),%eax
  0xee0792c2:   mov    0x4(%edx),%ecx
  0xee0792c5:   movl   $0x0,0x4(%edx)
  0xee0792cc:   mov    (%eax),%ebx
  0xee0792ce:   test   %ebx,%ebx
  0xee0792d0:   je     0xee0792e0
  0xee0792d6:   lock cmpxchg %ebx,(%ecx)
  0xee0792da:   jne    0xee0792f6
  0xee0792e0:   push   %eax
  0xee0792e1:   push   %edx
  0xee0792e2:   push   %ecx
  0xee0792e3:   call   0xf704a910 = Thread::current()
  0xee0792e8:   pop    %ecx
  0xee0792e9:   pop    %edx
  0xee0792ea:   decl   0x308(%eax)
  0xee0792f0:   pop    %eax
  0xee0792f1:   jmp    0xee07931d
  0xee0792f6:   mov    %ecx,0x4(%edx)
  0xee0792f9:   push   %edx
  0xee0792fa:   cmpl   $0x0,-0x8(%ebp)
  0xee0792fe:   je     0xee079315
  0xee079304:   push   $0xf785694c
  0xee079309:   call   0xee07930e
  0xee07930e:   pusha  
  0xee07930f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079314:   hlt    
  0xee079315:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee07931a:   add    $0x4,%esp
  0xee07931d:   mov    -0x20(%ebp),%esi
  0xee079320:   mov    -0x24(%ebp),%ecx
  0xee079323:   lea    -0x24(%ebp),%ebx
  0xee079326:   jmp    0xee0793f6
  0xee07932b:   emms   
  0xee07932d:   call   0xee079337
  0xee079332:   jmp    0xee0793d8
  0xee079337:   lea    0x4(%esp),%eax
  0xee07933b:   mov    %esi,-0x20(%ebp)
  0xee07933e:   cmpl   $0x0,-0x8(%ebp)
  0xee079342:   je     0xee079359
  0xee079348:   push   $0xf78569d8
  0xee07934d:   call   0xee079352
  0xee079352:   pusha  
  0xee079353:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079358:   hlt    
  0xee079359:   push   %eax
  0xee07935a:   push   %edx
  0xee07935b:   push   %ecx
  0xee07935c:   call   0xf704a910 = Thread::current()
  0xee079361:   pop    %ecx
  0xee079362:   pop    %edx
  0xee079363:   mov    %eax,%edi
  0xee079365:   pop    %eax
  0xee079366:   push   %edi
  0xee079367:   vzeroupper 
  0xee07936a:   mov    %ebp,0x230(%edi)
  0xee079370:   mov    %eax,0x228(%edi)
  0xee079376:   call   0xf6c0c900 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0xee07937b:   add    $0x4,%esp
  0xee07937e:   push   %eax
  0xee07937f:   push   %edx
  0xee079380:   push   %ecx
  0xee079381:   call   0xf704a910 = Thread::current()
  0xee079386:   pop    %ecx
  0xee079387:   pop    %edx
  0xee079388:   cmp    %eax,%edi
  0xee07938a:   je     0xee0793a1
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee079390:   push   $0xf78b5a48
  0xee079395:   call   0xee07939a
  0xee07939a:   pusha  
  0xee07939b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0793a0:   hlt    
  0xee0793a1:   pop    %eax
  0xee0793a2:   movl   $0x0,0x228(%edi)
  0xee0793ac:   movl   $0x0,0x230(%edi)
  0xee0793b6:   movl   $0x0,0x22c(%edi)
  0xee0793c0:   vzeroupper 
  0xee0793c3:   cmpl   $0x0,0x4(%edi)
  0xee0793c7:   jne    0xee05bbe0
  0xee0793cd:   mov    -0x20(%ebp),%esi
  0xee0793d0:   mov    -0x1c(%ebp),%edi
  0xee0793d3:   lea    0x0(%ebp,%edi,4),%edi
  0xee0793d7:   ret    
  0xee0793d8:   push   $0xf77a6b02
  0xee0793dd:   call   0xee0793e2
  0xee0793e2:   pusha  
  0xee0793e3:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0793e8:   hlt    
  0xee0793e9:   cmpl   $0x0,0x4(%ecx)
  0xee0793ed:   jne    0xee07932b
  0xee0793f3:   add    $0x8,%ecx
  0xee0793f6:   cmp    %ebx,%ecx
  0xee0793f8:   jne    0xee0793e9
  0xee0793fa:   cmpb   $0x0,0xf7ca3a0d
  0xee079401:   je     0xee07943c
  0xee079407:   push   %eax
  0xee079408:   push   %edx
  0xee079409:   push   %ecx
  0xee07940a:   call   0xf704a910 = Thread::current()
  0xee07940f:   pop    %ecx
  0xee079410:   pop    %edx
  0xee079411:   mov    %eax,%ecx
  0xee079413:   pop    %eax
  0xee079414:   mov    -0xc(%ebp),%ebx
  0xee079417:   push   %ebx
  0xee079418:   push   %ecx
  0xee079419:   cmpl   $0x0,-0x8(%ebp)
  0xee07941d:   je     0xee079434
  0xee079423:   push   $0xf785694c
  0xee079428:   call   0xee07942d
  0xee07942d:   pusha  
  0xee07942e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079433:   hlt    
  0xee079434:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee079439:   add    $0x8,%esp
  0xee07943c:   mov    -0x4(%ebp),%ebx
  0xee07943f:   push   %eax
  0xee079440:   push   %edx
  0xee079441:   push   %ecx
  0xee079442:   call   0xf704a910 = Thread::current()
  0xee079447:   pop    %ecx
  0xee079448:   pop    %edx
  0xee079449:   mov    %eax,%ecx
  0xee07944b:   pop    %eax
  0xee07944c:   cmpl   $0x3,0x2bc(%ecx)
  0xee079453:   je     0xee079545
  0xee079459:   cmp    0x2c4(%ecx),%ebx
  0xee07945f:   jle    0xee079545
  0xee079465:   push   %ecx
  0xee079466:   cmpl   $0x0,-0x8(%ebp)
  0xee07946a:   je     0xee079481
  0xee079470:   push   $0xf785694c
  0xee079475:   call   0xee07947a
  0xee07947a:   pusha  
  0xee07947b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079480:   hlt    
  0xee079481:   call   0xf739fd80 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0xee079486:   add    $0x4,%esp
  0xee079489:   call   0xee079493
  0xee07948e:   jmp    0xee079534
  0xee079493:   lea    0x4(%esp),%eax
  0xee079497:   mov    %esi,-0x20(%ebp)
  0xee07949a:   cmpl   $0x0,-0x8(%ebp)
  0xee07949e:   je     0xee0794b5
  0xee0794a4:   push   $0xf78569d8
  0xee0794a9:   call   0xee0794ae
  0xee0794ae:   pusha  
  0xee0794af:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0794b4:   hlt    
  0xee0794b5:   push   %eax
  0xee0794b6:   push   %edx
  0xee0794b7:   push   %ecx
  0xee0794b8:   call   0xf704a910 = Thread::current()
  0xee0794bd:   pop    %ecx
  0xee0794be:   pop    %edx
  0xee0794bf:   mov    %eax,%edi
  0xee0794c1:   pop    %eax
  0xee0794c2:   push   %edi
  0xee0794c3:   vzeroupper 
  0xee0794c6:   mov    %ebp,0x230(%edi)
  0xee0794cc:   mov    %eax,0x228(%edi)
  0xee0794d2:   call   0xf6c0b0b0 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0xee0794d7:   add    $0x4,%esp
  0xee0794da:   push   %eax
  0xee0794db:   push   %edx
  0xee0794dc:   push   %ecx
  0xee0794dd:   call   0xf704a910 = Thread::current()
  0xee0794e2:   pop    %ecx
  0xee0794e3:   pop    %edx
  0xee0794e4:   cmp    %eax,%edi
  0xee0794e6:   je     0xee0794fd
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee0794ec:   push   $0xf78b5a48
  0xee0794f1:   call   0xee0794f6
  0xee0794f6:   pusha  
  0xee0794f7:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0794fc:   hlt    
  0xee0794fd:   pop    %eax
  0xee0794fe:   movl   $0x0,0x228(%edi)
  0xee079508:   movl   $0x0,0x230(%edi)
  0xee079512:   movl   $0x0,0x22c(%edi)
  0xee07951c:   vzeroupper 
  0xee07951f:   cmpl   $0x0,0x4(%edi)
  0xee079523:   jne    0xee05bbe0
  0xee079529:   mov    -0x20(%ebp),%esi
  0xee07952c:   mov    -0x1c(%ebp),%edi
  0xee07952f:   lea    0x0(%ebp,%edi,4),%edi
  0xee079533:   ret    
  0xee079534:   push   $0xf77a6b02
  0xee079539:   call   0xee07953e
  0xee07953e:   pusha  
  0xee07953f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079544:   hlt    
  0xee079545:   mov    %ebp,%esp
  0xee079547:   pop    %ebp
  0xee079548:   pop    %esi
  0xee079549:   mov    %ebx,%esp
  0xee07954b:   jmp    *%esi                        ;; 2611:   __ jmp(rbcp);
  0xee07954d:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee079552:   call   0xee079557
  0xee079557:   pusha  
  0xee079558:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07955d:   hlt    
  0xee07955e:   nop
  0xee07955f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
getstatic  178 getstatic  [0xee079580, 0xee07976c]  492 bytes

--------------------------------------------------------------------------------
  0xee079580:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee079583:   vmovss %xmm0,(%esp)
  0xee079588:   jmp    0xee079599                   ;; 1751:       __ jmpb(L);
  0xee07958a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07958d:   vmovsd %xmm0,(%esp)
  0xee079592:   jmp    0xee079599                   ;; 1754:       __ jmpb(L);
  0xee079594:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee079595:   push   %eax
  0xee079596:   jmp    0xee079599                   ;; 1765:       __ jmpb(L);
  0xee079598:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee079599:   movzwl 0x1(%esi),%edx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2666:   __ get_cache_and_index_and_bytecode_at_bcp(cache, index, temp, byte_no, 1, index_size);
  0xee07959d:   mov    -0x18(%ebp),%ecx
  0xee0795a0:   shl    $0x2,%edx
  0xee0795a3:   mov    0x1c(%ecx,%edx,4),%ebx
  0xee0795a7:   shr    $0x10,%ebx
  0xee0795aa:   and    $0xff,%ebx
  0xee0795b0:   cmp    $0xb2,%ebx                   ;; 2667:   __ cmpl(temp, code);  // have we resolved this bytecode?
  0xee0795b6:   je     0xee079677                   ;; 2668:   __ jcc(Assembler::equal, resolved);
  0xee0795bc:   mov    $0xb2,%ebx                   ;; 2672:   __ bind(L_clinit_barrier_slow);
                                                    ;; 2674:   __ movl(temp, code);
  0xee0795c1:   call   0xee0795cb                   ;; 2675:   __ call_VM(noreg, entry, temp);
  0xee0795c6:   jmp    0xee07966d
  0xee0795cb:   push   %ebx
  0xee0795cc:   lea    0x8(%esp),%eax
  0xee0795d0:   mov    %esi,-0x20(%ebp)
  0xee0795d3:   cmpl   $0x0,-0x8(%ebp)
  0xee0795d7:   je     0xee0795ee
  0xee0795dd:   push   $0xf78569d8
  0xee0795e2:   call   0xee0795e7
  0xee0795e7:   pusha  
  0xee0795e8:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0795ed:   hlt    
  0xee0795ee:   push   %eax
  0xee0795ef:   push   %edx
  0xee0795f0:   push   %ecx
  0xee0795f1:   call   0xf704a910 = Thread::current()
  0xee0795f6:   pop    %ecx
  0xee0795f7:   pop    %edx
  0xee0795f8:   mov    %eax,%edi
  0xee0795fa:   pop    %eax
  0xee0795fb:   push   %edi
  0xee0795fc:   vzeroupper 
  0xee0795ff:   mov    %ebp,0x230(%edi)
  0xee079605:   mov    %eax,0x228(%edi)
  0xee07960b:   call   0xf6c166c0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0xee079610:   add    $0x8,%esp
  0xee079613:   push   %eax
  0xee079614:   push   %edx
  0xee079615:   push   %ecx
  0xee079616:   call   0xf704a910 = Thread::current()
  0xee07961b:   pop    %ecx
  0xee07961c:   pop    %edx
  0xee07961d:   cmp    %eax,%edi
  0xee07961f:   je     0xee079636
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee079625:   push   $0xf78b5a48
  0xee07962a:   call   0xee07962f
  0xee07962f:   pusha  
  0xee079630:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079635:   hlt    
  0xee079636:   pop    %eax
  0xee079637:   movl   $0x0,0x228(%edi)
  0xee079641:   movl   $0x0,0x230(%edi)
  0xee07964b:   movl   $0x0,0x22c(%edi)
  0xee079655:   vzeroupper 
  0xee079658:   cmpl   $0x0,0x4(%edi)
  0xee07965c:   jne    0xee05bbe0
  0xee079662:   mov    -0x20(%ebp),%esi
  0xee079665:   mov    -0x1c(%ebp),%edi
  0xee079668:   lea    0x0(%ebp,%edi,4),%edi
  0xee07966c:   ret    
  0xee07966d:   movzwl 0x1(%esi),%edx               ;; 2677:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee079671:   mov    -0x18(%ebp),%ecx
  0xee079674:   shl    $0x2,%edx
  0xee079677:   mov    0x24(%ecx,%edx,4),%ebx       ;; 2679:   __ bind(resolved);
                                                    ;; 2705:   __ movptr(off, Address(cache, index, Address::times_ptr,
  0xee07967b:   mov    0x28(%ecx,%edx,4),%eax       ;; 2709:   __ movl(flags, Address(cache, index, Address::times_ptr,
  0xee07967f:   mov    0x20(%ecx,%edx,4),%ecx       ;; 2715:     __ movptr(obj, Address(cache, index, Address::times_ptr,
  0xee079683:   mov    0x44(%ecx),%ecx              ;; 2719:     __ movptr(obj, Address(obj, mirror_offset));
  0xee079686:   mov    (%ecx),%ecx                  ;; 2720:     __ resolve_oop_handle(obj, rscratch2);
  0xee079688:   shr    $0x1c,%eax                   ;; 2818:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee07968b:   and    $0xf,%eax                    ;; 2822:   __ andl(flags, ConstantPoolCacheEntry::tos_state_mask);
  0xee07968e:   jne    0xee07969e                   ;; 2824:   __ jcc(Assembler::notZero, notByte);
  0xee079694:   movsbl (%ecx,%ebx,1),%eax           ;; 2826:   __ access_load_at(T_BYTE, IN_HEAP, rax, field, noreg, noreg);
  0xee079698:   push   %eax                         ;; 2827:   __ push(btos);
  0xee079699:   jmp    0xee07975d                   ;; 2832:   __ jmp(Done);
  0xee07969e:   cmp    $0x1,%eax                    ;; 2834:   __ bind(notByte);
                                                    ;; 2835:   __ cmpl(flags, ztos);
  0xee0796a1:   jne    0xee0796b1                   ;; 2836:   __ jcc(Assembler::notEqual, notBool);
  0xee0796a7:   movzbl (%ecx,%ebx,1),%eax           ;; 2839:   __ access_load_at(T_BOOLEAN, IN_HEAP, rax, field, noreg, noreg);
  0xee0796ab:   push   %eax                         ;; 2840:   __ push(ztos);
  0xee0796ac:   jmp    0xee07975d                   ;; 2846:   __ jmp(Done);
  0xee0796b1:   cmp    $0x8,%eax                    ;; 2848:   __ bind(notBool);
                                                    ;; 2849:   __ cmpl(flags, atos);
  0xee0796b4:   jne    0xee0796c3                   ;; 2850:   __ jcc(Assembler::notEqual, notObj);
  0xee0796ba:   mov    (%ecx,%ebx,1),%eax           ;;  165:   __ load_heap_oop(dst, src, rdx, rbx, decorators);
  0xee0796bd:   push   %eax                         ;; 2853:   __ push(atos);
  0xee0796be:   jmp    0xee07975d                   ;; 2857:   __ jmp(Done);
  0xee0796c3:   cmp    $0x4,%eax                    ;; 2859:   __ bind(notObj);
                                                    ;; 2860:   __ cmpl(flags, itos);
  0xee0796c6:   jne    0xee0796d5                   ;; 2861:   __ jcc(Assembler::notEqual, notInt);
  0xee0796cc:   mov    (%ecx,%ebx,1),%eax           ;; 2863:   __ access_load_at(T_INT, IN_HEAP, rax, field, noreg, noreg);
  0xee0796cf:   push   %eax                         ;; 2864:   __ push(itos);
  0xee0796d0:   jmp    0xee07975d                   ;; 2869:   __ jmp(Done);
  0xee0796d5:   cmp    $0x2,%eax                    ;; 2871:   __ bind(notInt);
                                                    ;; 2872:   __ cmpl(flags, ctos);
  0xee0796d8:   jne    0xee0796e8                   ;; 2873:   __ jcc(Assembler::notEqual, notChar);
  0xee0796de:   movzwl (%ecx,%ebx,1),%eax           ;; 2875:   __ access_load_at(T_CHAR, IN_HEAP, rax, field, noreg, noreg);
  0xee0796e2:   push   %eax                         ;; 2876:   __ push(ctos);
  0xee0796e3:   jmp    0xee07975d                   ;; 2881:   __ jmp(Done);
  0xee0796e8:   cmp    $0x3,%eax                    ;; 2883:   __ bind(notChar);
                                                    ;; 2884:   __ cmpl(flags, stos);
  0xee0796eb:   jne    0xee0796fb                   ;; 2885:   __ jcc(Assembler::notEqual, notShort);
  0xee0796f1:   movswl (%ecx,%ebx,1),%eax           ;; 2887:   __ access_load_at(T_SHORT, IN_HEAP, rax, field, noreg, noreg);
  0xee0796f5:   push   %eax                         ;; 2888:   __ push(stos);
  0xee0796f6:   jmp    0xee07975d                   ;; 2893:   __ jmp(Done);
  0xee0796fb:   cmp    $0x5,%eax                    ;; 2895:   __ bind(notShort);
                                                    ;; 2896:   __ cmpl(flags, ltos);
  0xee0796fe:   jne    0xee079716                   ;; 2897:   __ jcc(Assembler::notEqual, notLong);
  0xee079704:   fildll (%ecx,%ebx,1)                ;; 2901:   __ access_load_at(T_LONG, IN_HEAP | MO_RELAXED, noreg /* ltos */, field, noreg, noreg);
  0xee079707:   sub    $0x8,%esp
  0xee07970a:   fistpll (%esp)
  0xee07970d:   pop    %eax
  0xee07970e:   pop    %edx
  0xee07970f:   push   %edx                         ;; 2902:   __ push(ltos);
  0xee079710:   push   %eax
  0xee079711:   jmp    0xee07975d                   ;; 2905:   __ jmp(Done);
  0xee079716:   cmp    $0x6,%eax                    ;; 2907:   __ bind(notLong);
                                                    ;; 2908:   __ cmpl(flags, ftos);
  0xee079719:   jne    0xee079731                   ;; 2909:   __ jcc(Assembler::notEqual, notFloat);
  0xee07971f:   vmovss (%ecx,%ebx,1),%xmm0          ;; 2912:   __ access_load_at(T_FLOAT, IN_HEAP, noreg /* ftos */, field, noreg, noreg);
  0xee079724:   sub    $0x4,%esp                    ;; 2913:   __ push(ftos);
  0xee079727:   vmovss %xmm0,(%esp)
  0xee07972c:   jmp    0xee07975d                   ;; 2918:   __ jmp(Done);
  0xee079731:   cmp    $0x7,%eax                    ;; 2920:   __ bind(notFloat);
                                                    ;; 2923:   __ cmpl(flags, dtos);
  0xee079734:   jne    0xee07974c                   ;; 2924:   __ jcc(Assembler::notEqual, notDouble);
  0xee07973a:   vmovsd (%ecx,%ebx,1),%xmm0          ;; 2928:   __ access_load_at(T_DOUBLE, IN_HEAP | MO_RELAXED, noreg /* dtos */, field, noreg, noreg);
  0xee07973f:   sub    $0x8,%esp                    ;; 2929:   __ push(dtos);
  0xee079742:   vmovsd %xmm0,(%esp)
  0xee079747:   jmp    0xee07975d                   ;; 2935:   __ jmp(Done);
  0xee07974c:   push   $0xf7924fde                  ;; 2937:   __ bind(notDouble);
                                                    ;; 2938:   __ stop("Bad state");
  0xee079751:   call   0xee079756
  0xee079756:   pusha  
  0xee079757:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07975c:   hlt    
  0xee07975d:   movzbl 0x3(%esi),%ebx               ;; 2941:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee079761:   add    $0x3,%esi
  0xee079764:   jmp    *-0x833caa0(,%ebx,4)
  0xee07976b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
putstatic  179 putstatic  [0xee079780, 0xee079d54]  1492 bytes

--------------------------------------------------------------------------------
  0xee079780:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee079783:   vmovss %xmm0,(%esp)
  0xee079788:   jmp    0xee079799                   ;; 1751:       __ jmpb(L);
  0xee07978a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07978d:   vmovsd %xmm0,(%esp)
  0xee079792:   jmp    0xee079799                   ;; 1754:       __ jmpb(L);
  0xee079794:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee079795:   push   %eax
  0xee079796:   jmp    0xee079799                   ;; 1765:       __ jmpb(L);
  0xee079798:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee079799:   movzwl 0x1(%esi),%edx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2666:   __ get_cache_and_index_and_bytecode_at_bcp(cache, index, temp, byte_no, 1, index_size);
  0xee07979d:   mov    -0x18(%ebp),%ecx
  0xee0797a0:   shl    $0x2,%edx
  0xee0797a3:   mov    0x1c(%ecx,%edx,4),%ebx
  0xee0797a7:   shr    $0x18,%ebx
  0xee0797aa:   and    $0xff,%ebx
  0xee0797b0:   cmp    $0xb3,%ebx                   ;; 2667:   __ cmpl(temp, code);  // have we resolved this bytecode?
  0xee0797b6:   je     0xee079877                   ;; 2668:   __ jcc(Assembler::equal, resolved);
  0xee0797bc:   mov    $0xb3,%ebx                   ;; 2672:   __ bind(L_clinit_barrier_slow);
                                                    ;; 2674:   __ movl(temp, code);
  0xee0797c1:   call   0xee0797cb                   ;; 2675:   __ call_VM(noreg, entry, temp);
  0xee0797c6:   jmp    0xee07986d
  0xee0797cb:   push   %ebx
  0xee0797cc:   lea    0x8(%esp),%eax
  0xee0797d0:   mov    %esi,-0x20(%ebp)
  0xee0797d3:   cmpl   $0x0,-0x8(%ebp)
  0xee0797d7:   je     0xee0797ee
  0xee0797dd:   push   $0xf78569d8
  0xee0797e2:   call   0xee0797e7
  0xee0797e7:   pusha  
  0xee0797e8:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0797ed:   hlt    
  0xee0797ee:   push   %eax
  0xee0797ef:   push   %edx
  0xee0797f0:   push   %ecx
  0xee0797f1:   call   0xf704a910 = Thread::current()
  0xee0797f6:   pop    %ecx
  0xee0797f7:   pop    %edx
  0xee0797f8:   mov    %eax,%edi
  0xee0797fa:   pop    %eax
  0xee0797fb:   push   %edi
  0xee0797fc:   vzeroupper 
  0xee0797ff:   mov    %ebp,0x230(%edi)
  0xee079805:   mov    %eax,0x228(%edi)
  0xee07980b:   call   0xf6c166c0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0xee079810:   add    $0x8,%esp
  0xee079813:   push   %eax
  0xee079814:   push   %edx
  0xee079815:   push   %ecx
  0xee079816:   call   0xf704a910 = Thread::current()
  0xee07981b:   pop    %ecx
  0xee07981c:   pop    %edx
  0xee07981d:   cmp    %eax,%edi
  0xee07981f:   je     0xee079836
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee079825:   push   $0xf78b5a48
  0xee07982a:   call   0xee07982f
  0xee07982f:   pusha  
  0xee079830:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079835:   hlt    
  0xee079836:   pop    %eax
  0xee079837:   movl   $0x0,0x228(%edi)
  0xee079841:   movl   $0x0,0x230(%edi)
  0xee07984b:   movl   $0x0,0x22c(%edi)
  0xee079855:   vzeroupper 
  0xee079858:   cmpl   $0x0,0x4(%edi)
  0xee07985c:   jne    0xee05bbe0
  0xee079862:   mov    -0x20(%ebp),%esi
  0xee079865:   mov    -0x1c(%ebp),%edi
  0xee079868:   lea    0x0(%ebp,%edi,4),%edi
  0xee07986c:   ret    
  0xee07986d:   movzwl 0x1(%esi),%edx               ;; 2677:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee079871:   mov    -0x18(%ebp),%ecx
  0xee079874:   shl    $0x2,%edx
  0xee079877:   mov    0x24(%ecx,%edx,4),%ebx       ;; 2679:   __ bind(resolved);
                                                    ;; 2705:   __ movptr(off, Address(cache, index, Address::times_ptr,
  0xee07987b:   mov    0x28(%ecx,%edx,4),%eax       ;; 2709:   __ movl(flags, Address(cache, index, Address::times_ptr,
  0xee07987f:   mov    0x20(%ecx,%edx,4),%ecx       ;; 2715:     __ movptr(obj, Address(cache, index, Address::times_ptr,
  0xee079883:   mov    0x44(%ecx),%ecx              ;; 2719:     __ movptr(obj, Address(obj, mirror_offset));
  0xee079886:   mov    (%ecx),%ecx                  ;; 2720:     __ resolve_oop_handle(obj, rscratch2);
  0xee079888:   mov    %eax,%edx                    ;; 3064:   __ movl(rdx, flags);
  0xee07988a:   shr    $0x15,%edx                   ;; 3065:   __ shrl(rdx, ConstantPoolCacheEntry::is_volatile_shift);
  0xee07988d:   and    $0x1,%edx                    ;; 3066:   __ andl(rdx, 0x1);
  0xee079890:   test   %edx,%edx                    ;; 3069:   __ testl(rdx, rdx);
  0xee079892:   je     0xee079af4                   ;; 3070:   __ jcc(Assembler::zero, notVolatile);
  0xee079898:   shr    $0x1c,%eax                   ;; 3096:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee07989b:   and    $0xf,%eax                    ;; 3099:   __ andl(flags, ConstantPoolCacheEntry::tos_state_mask);
  0xee07989e:   jne    0xee0798ad                   ;; 3100:   __ jcc(Assembler::notZero, notByte);
  0xee0798a4:   pop    %eax                         ;; 3104:     __ pop(btos);
  0xee0798a5:   mov    %al,(%ecx,%ebx,1)            ;; 3106:     __ access_store_at(T_BYTE, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee0798a8:   jmp    0xee079ae9                   ;; 3110:     __ jmp(Done);
  0xee0798ad:   cmp    $0x1,%eax                    ;; 3113:   __ bind(notByte);
                                                    ;; 3114:   __ cmpl(flags, ztos);
  0xee0798b0:   jne    0xee0798c2                   ;; 3115:   __ jcc(Assembler::notEqual, notBool);
  0xee0798b6:   pop    %eax                         ;; 3119:     __ pop(ztos);
  0xee0798b7:   and    $0x1,%eax                    ;; 3121:     __ access_store_at(T_BOOLEAN, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee0798ba:   mov    %al,(%ecx,%ebx,1)
  0xee0798bd:   jmp    0xee079ae9                   ;; 3125:     __ jmp(Done);
  0xee0798c2:   cmp    $0x8,%eax                    ;; 3128:   __ bind(notBool);
                                                    ;; 3129:   __ cmpl(flags, atos);
  0xee0798c5:   jne    0xee079a4f                   ;; 3130:   __ jcc(Assembler::notEqual, notObj);
  0xee0798cb:   pop    %eax                         ;; 3134:     __ pop(atos);
  0xee0798cc:   lea    (%ecx,%ebx,1),%edx           ;;  155:   __ store_heap_oop(dst, val,
  0xee0798cf:   push   %eax
  0xee0798d0:   push   %edx
  0xee0798d1:   push   %ecx
  0xee0798d2:   call   0xf704a910 = Thread::current()
  0xee0798d7:   pop    %ecx
  0xee0798d8:   pop    %edx
  0xee0798d9:   mov    %eax,%ecx
  0xee0798db:   pop    %eax
  0xee0798dc:   mov    %esi,-0x20(%ebp)
  0xee0798df:   cmpb   $0x0,0x24(%ecx)
  0xee0798e3:   je     0xee0799b4
  0xee0798e9:   mov    (%edx),%ebx
  0xee0798eb:   cmp    $0x0,%ebx
  0xee0798ee:   je     0xee0799b4
  0xee0798f4:   mov    0x18(%ecx),%esi
  0xee0798f7:   cmp    $0x0,%esi
  0xee0798fa:   je     0xee079910
  0xee079900:   sub    $0x4,%esi
  0xee079903:   mov    %esi,0x18(%ecx)
  0xee079906:   add    0x20(%ecx),%esi
  0xee079909:   mov    %ebx,(%esi)
  0xee07990b:   jmp    0xee0799b4
 ;; push_call_clobbered_registers start
  0xee079910:   sub    $0x50,%esp
  0xee079913:   mov    %eax,(%esp)
  0xee079916:   mov    %ecx,0x4(%esp)
  0xee07991a:   mov    %edx,0x8(%esp)
  0xee07991e:   vmovsd %xmm0,0x10(%esp)
  0xee079924:   vmovsd %xmm1,0x18(%esp)
  0xee07992a:   vmovsd %xmm2,0x20(%esp)
  0xee079930:   vmovsd %xmm3,0x28(%esp)
  0xee079936:   vmovsd %xmm4,0x30(%esp)
  0xee07993c:   vmovsd %xmm5,0x38(%esp)
  0xee079942:   vmovsd %xmm6,0x40(%esp)
  0xee079948:   vmovsd %xmm7,0x48(%esp)
 ;; push_call_clobbered_registers end
  0xee07994e:   push   %ecx
  0xee07994f:   push   %ebx
  0xee079950:   cmpl   $0x0,-0x8(%ebp)
  0xee079954:   je     0xee07996b
  0xee07995a:   push   $0xf785694c
  0xee07995f:   call   0xee079964
  0xee079964:   pusha  
  0xee079965:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07996a:   hlt    
  0xee07996b:   call   0xf6a17f10 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0xee079970:   add    $0x8,%esp
 ;; pop_call_clobbered_registers start
  0xee079973:   vmovsd 0x48(%esp),%xmm7
  0xee079979:   vmovsd 0x40(%esp),%xmm6
  0xee07997f:   vmovsd 0x38(%esp),%xmm5
  0xee079985:   vmovsd 0x30(%esp),%xmm4
  0xee07998b:   vmovsd 0x28(%esp),%xmm3
  0xee079991:   vmovsd 0x20(%esp),%xmm2
  0xee079997:   vmovsd 0x18(%esp),%xmm1
  0xee07999d:   vmovsd 0x10(%esp),%xmm0
  0xee0799a3:   mov    0x8(%esp),%edx
  0xee0799a7:   mov    0x4(%esp),%ecx
  0xee0799ab:   mov    (%esp),%eax
  0xee0799ae:   add    $0x50,%esp
  0xee0799b1:   vzeroupper 
 ;; pop_call_clobbered_registers end
  0xee0799b4:   mov    %eax,(%edx)
  0xee0799b6:   mov    %edx,%esi
  0xee0799b8:   xor    %eax,%esi
  0xee0799ba:   shr    $0x14,%esi
  0xee0799bd:   je     0xee079a47
  0xee0799c3:   cmp    $0x0,%eax
  0xee0799c6:   je     0xee079a47
  0xee0799cc:   mov    %edx,%esi
  0xee0799ce:   shr    $0x9,%esi
  0xee0799d1:   mov    $0xa5ecc000,%ebx
  0xee0799d6:   add    %ebx,%esi
  0xee0799d8:   cmpb   $0x2,(%esi)
  0xee0799db:   je     0xee079a47
  0xee0799e1:   lock addl $0x0,-0x40(%esp)
  0xee0799e7:   cmpb   $0x0,(%esi)
  0xee0799ea:   je     0xee079a47
  0xee0799f0:   movb   $0x0,(%esi)
  0xee0799f3:   mov    0x28(%ecx),%ebx
  0xee0799f6:   test   %ebx,%ebx
  0xee0799f8:   je     0xee079a0e
  0xee0799fe:   sub    $0x4,%ebx
  0xee079a01:   mov    %ebx,0x28(%ecx)
  0xee079a04:   add    0x30(%ecx),%ebx
  0xee079a07:   mov    %esi,(%ebx)
  0xee079a09:   jmp    0xee079a47
  0xee079a0e:   sub    $0x10,%esp
  0xee079a11:   mov    %ecx,(%esp)
  0xee079a14:   mov    %edx,0x4(%esp)
  0xee079a18:   push   %ecx
  0xee079a19:   push   %esi
  0xee079a1a:   cmpl   $0x0,-0x8(%ebp)
  0xee079a1e:   je     0xee079a35
  0xee079a24:   push   $0xf785694c
  0xee079a29:   call   0xee079a2e
  0xee079a2e:   pusha  
  0xee079a2f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079a34:   hlt    
  0xee079a35:   call   0xf6a181d0 = G1BarrierSetRuntime::write_ref_field_post_entry(unsigned char volatile*, JavaThread*)
  0xee079a3a:   add    $0x8,%esp
  0xee079a3d:   mov    0x4(%esp),%edx
  0xee079a41:   mov    (%esp),%ecx
  0xee079a44:   add    $0x10,%esp
  0xee079a47:   mov    -0x20(%ebp),%esi
  0xee079a4a:   jmp    0xee079ae9                   ;; 3141:     __ jmp(Done);
  0xee079a4f:   cmp    $0x4,%eax                    ;; 3144:   __ bind(notObj);
                                                    ;; 3145:   __ cmpl(flags, itos);
  0xee079a52:   jne    0xee079a61                   ;; 3146:   __ jcc(Assembler::notEqual, notInt);
  0xee079a58:   pop    %eax                         ;; 3150:     __ pop(itos);
  0xee079a59:   mov    %eax,(%ecx,%ebx,1)           ;; 3152:     __ access_store_at(T_INT, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee079a5c:   jmp    0xee079ae9                   ;; 3156:     __ jmp(Done);
  0xee079a61:   cmp    $0x2,%eax                    ;; 3159:   __ bind(notInt);
                                                    ;; 3160:   __ cmpl(flags, ctos);
  0xee079a64:   jne    0xee079a74                   ;; 3161:   __ jcc(Assembler::notEqual, notChar);
  0xee079a6a:   pop    %eax                         ;; 3165:     __ pop(ctos);
  0xee079a6b:   mov    %ax,(%ecx,%ebx,1)            ;; 3167:     __ access_store_at(T_CHAR, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee079a6f:   jmp    0xee079ae9                   ;; 3171:     __ jmp(Done);
  0xee079a74:   cmp    $0x3,%eax                    ;; 3174:   __ bind(notChar);
                                                    ;; 3175:   __ cmpl(flags, stos);
  0xee079a77:   jne    0xee079a87                   ;; 3176:   __ jcc(Assembler::notEqual, notShort);
  0xee079a7d:   pop    %eax                         ;; 3180:     __ pop(stos);
  0xee079a7e:   mov    %ax,(%ecx,%ebx,1)            ;; 3182:     __ access_store_at(T_SHORT, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee079a82:   jmp    0xee079ae9                   ;; 3186:     __ jmp(Done);
  0xee079a87:   cmp    $0x5,%eax                    ;; 3189:   __ bind(notShort);
                                                    ;; 3190:   __ cmpl(flags, ltos);
  0xee079a8a:   jne    0xee079aa2                   ;; 3191:   __ jcc(Assembler::notEqual, notLong);
  0xee079a90:   pop    %eax                         ;; 3195:     __ pop(ltos);
  0xee079a91:   pop    %edx
  0xee079a92:   push   %edx                         ;; 3198:     __ access_store_at(T_LONG, IN_HEAP | MO_RELAXED, field, noreg /* ltos*/, noreg, noreg, noreg);
  0xee079a93:   push   %eax
  0xee079a94:   fildll (%esp)
  0xee079a97:   fistpll (%ecx,%ebx,1)
  0xee079a9a:   add    $0x8,%esp
  0xee079a9d:   jmp    0xee079ae9                   ;; 3204:     __ jmp(Done);
  0xee079aa2:   cmp    $0x6,%eax                    ;; 3207:   __ bind(notLong);
                                                    ;; 3208:   __ cmpl(flags, ftos);
  0xee079aa5:   jne    0xee079abd                   ;; 3209:   __ jcc(Assembler::notEqual, notFloat);
  0xee079aab:   vmovss (%esp),%xmm0                 ;; 3213:     __ pop(ftos);
  0xee079ab0:   add    $0x4,%esp
  0xee079ab3:   vmovss %xmm0,(%ecx,%ebx,1)          ;; 3215:     __ access_store_at(T_FLOAT, IN_HEAP, field, noreg /* ftos */, noreg, noreg, noreg);
  0xee079ab8:   jmp    0xee079ae9                   ;; 3219:     __ jmp(Done);
  0xee079abd:   cmp    $0x7,%eax                    ;; 3222:   __ bind(notFloat);
                                                    ;; 3225:   __ cmpl(flags, dtos);
  0xee079ac0:   jne    0xee079ad8                   ;; 3226:   __ jcc(Assembler::notEqual, notDouble);
  0xee079ac6:   vmovsd (%esp),%xmm0                 ;; 3231:     __ pop(dtos);
  0xee079acb:   add    $0x8,%esp
  0xee079ace:   vmovsd %xmm0,(%ecx,%ebx,1)          ;; 3234:     __ access_store_at(T_DOUBLE, IN_HEAP | MO_RELAXED, field, noreg /* dtos */, noreg, noreg, noreg);
  0xee079ad3:   jmp    0xee079ae9                   ;; 3241:   __ jmp(Done);
  0xee079ad8:   push   $0xf7924fde                  ;; 3243:   __ bind(notDouble);
                                                    ;; 3244:   __ stop("Bad state");
  0xee079add:   call   0xee079ae2
  0xee079ae2:   pusha  
  0xee079ae3:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079ae8:   hlt    
  0xee079ae9:   lock addl $0x0,-0x40(%esp)          ;; 3247:   __ bind(Done);
                                                    ;; 2645:   __ membar(order_constraint);
  0xee079aef:   jmp    0xee079d45                   ;; 3075:   __ jmp(Done);
  0xee079af4:   shr    $0x1c,%eax                   ;; 3076:   __ bind(notVolatile);
                                                    ;; 3096:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee079af7:   and    $0xf,%eax                    ;; 3099:   __ andl(flags, ConstantPoolCacheEntry::tos_state_mask);
  0xee079afa:   jne    0xee079b09                   ;; 3100:   __ jcc(Assembler::notZero, notByte);
  0xee079b00:   pop    %eax                         ;; 3104:     __ pop(btos);
  0xee079b01:   mov    %al,(%ecx,%ebx,1)            ;; 3106:     __ access_store_at(T_BYTE, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee079b04:   jmp    0xee079d45                   ;; 3110:     __ jmp(Done);
  0xee079b09:   cmp    $0x1,%eax                    ;; 3113:   __ bind(notByte);
                                                    ;; 3114:   __ cmpl(flags, ztos);
  0xee079b0c:   jne    0xee079b1e                   ;; 3115:   __ jcc(Assembler::notEqual, notBool);
  0xee079b12:   pop    %eax                         ;; 3119:     __ pop(ztos);
  0xee079b13:   and    $0x1,%eax                    ;; 3121:     __ access_store_at(T_BOOLEAN, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee079b16:   mov    %al,(%ecx,%ebx,1)
  0xee079b19:   jmp    0xee079d45                   ;; 3125:     __ jmp(Done);
  0xee079b1e:   cmp    $0x8,%eax                    ;; 3128:   __ bind(notBool);
                                                    ;; 3129:   __ cmpl(flags, atos);
  0xee079b21:   jne    0xee079cab                   ;; 3130:   __ jcc(Assembler::notEqual, notObj);
  0xee079b27:   pop    %eax                         ;; 3134:     __ pop(atos);
  0xee079b28:   lea    (%ecx,%ebx,1),%edx           ;;  155:   __ store_heap_oop(dst, val,
  0xee079b2b:   push   %eax
  0xee079b2c:   push   %edx
  0xee079b2d:   push   %ecx
  0xee079b2e:   call   0xf704a910 = Thread::current()
  0xee079b33:   pop    %ecx
  0xee079b34:   pop    %edx
  0xee079b35:   mov    %eax,%ecx
  0xee079b37:   pop    %eax
  0xee079b38:   mov    %esi,-0x20(%ebp)
  0xee079b3b:   cmpb   $0x0,0x24(%ecx)
  0xee079b3f:   je     0xee079c10
  0xee079b45:   mov    (%edx),%ebx
  0xee079b47:   cmp    $0x0,%ebx
  0xee079b4a:   je     0xee079c10
  0xee079b50:   mov    0x18(%ecx),%esi
  0xee079b53:   cmp    $0x0,%esi
  0xee079b56:   je     0xee079b6c
  0xee079b5c:   sub    $0x4,%esi
  0xee079b5f:   mov    %esi,0x18(%ecx)
  0xee079b62:   add    0x20(%ecx),%esi
  0xee079b65:   mov    %ebx,(%esi)
  0xee079b67:   jmp    0xee079c10
 ;; push_call_clobbered_registers start
  0xee079b6c:   sub    $0x50,%esp
  0xee079b6f:   mov    %eax,(%esp)
  0xee079b72:   mov    %ecx,0x4(%esp)
  0xee079b76:   mov    %edx,0x8(%esp)
  0xee079b7a:   vmovsd %xmm0,0x10(%esp)
  0xee079b80:   vmovsd %xmm1,0x18(%esp)
  0xee079b86:   vmovsd %xmm2,0x20(%esp)
  0xee079b8c:   vmovsd %xmm3,0x28(%esp)
  0xee079b92:   vmovsd %xmm4,0x30(%esp)
  0xee079b98:   vmovsd %xmm5,0x38(%esp)
  0xee079b9e:   vmovsd %xmm6,0x40(%esp)
  0xee079ba4:   vmovsd %xmm7,0x48(%esp)
 ;; push_call_clobbered_registers end
  0xee079baa:   push   %ecx
  0xee079bab:   push   %ebx
  0xee079bac:   cmpl   $0x0,-0x8(%ebp)
  0xee079bb0:   je     0xee079bc7
  0xee079bb6:   push   $0xf785694c
  0xee079bbb:   call   0xee079bc0
  0xee079bc0:   pusha  
  0xee079bc1:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079bc6:   hlt    
  0xee079bc7:   call   0xf6a17f10 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0xee079bcc:   add    $0x8,%esp
 ;; pop_call_clobbered_registers start
  0xee079bcf:   vmovsd 0x48(%esp),%xmm7
  0xee079bd5:   vmovsd 0x40(%esp),%xmm6
  0xee079bdb:   vmovsd 0x38(%esp),%xmm5
  0xee079be1:   vmovsd 0x30(%esp),%xmm4
  0xee079be7:   vmovsd 0x28(%esp),%xmm3
  0xee079bed:   vmovsd 0x20(%esp),%xmm2
  0xee079bf3:   vmovsd 0x18(%esp),%xmm1
  0xee079bf9:   vmovsd 0x10(%esp),%xmm0
  0xee079bff:   mov    0x8(%esp),%edx
  0xee079c03:   mov    0x4(%esp),%ecx
  0xee079c07:   mov    (%esp),%eax
  0xee079c0a:   add    $0x50,%esp
  0xee079c0d:   vzeroupper 
 ;; pop_call_clobbered_registers end
  0xee079c10:   mov    %eax,(%edx)
  0xee079c12:   mov    %edx,%esi
  0xee079c14:   xor    %eax,%esi
  0xee079c16:   shr    $0x14,%esi
  0xee079c19:   je     0xee079ca3
  0xee079c1f:   cmp    $0x0,%eax
  0xee079c22:   je     0xee079ca3
  0xee079c28:   mov    %edx,%esi
  0xee079c2a:   shr    $0x9,%esi
  0xee079c2d:   mov    $0xa5ecc000,%ebx
  0xee079c32:   add    %ebx,%esi
  0xee079c34:   cmpb   $0x2,(%esi)
  0xee079c37:   je     0xee079ca3
  0xee079c3d:   lock addl $0x0,-0x40(%esp)
  0xee079c43:   cmpb   $0x0,(%esi)
  0xee079c46:   je     0xee079ca3
  0xee079c4c:   movb   $0x0,(%esi)
  0xee079c4f:   mov    0x28(%ecx),%ebx
  0xee079c52:   test   %ebx,%ebx
  0xee079c54:   je     0xee079c6a
  0xee079c5a:   sub    $0x4,%ebx
  0xee079c5d:   mov    %ebx,0x28(%ecx)
  0xee079c60:   add    0x30(%ecx),%ebx
  0xee079c63:   mov    %esi,(%ebx)
  0xee079c65:   jmp    0xee079ca3
  0xee079c6a:   sub    $0x10,%esp
  0xee079c6d:   mov    %ecx,(%esp)
  0xee079c70:   mov    %edx,0x4(%esp)
  0xee079c74:   push   %ecx
  0xee079c75:   push   %esi
  0xee079c76:   cmpl   $0x0,-0x8(%ebp)
  0xee079c7a:   je     0xee079c91
  0xee079c80:   push   $0xf785694c
  0xee079c85:   call   0xee079c8a
  0xee079c8a:   pusha  
  0xee079c8b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079c90:   hlt    
  0xee079c91:   call   0xf6a181d0 = G1BarrierSetRuntime::write_ref_field_post_entry(unsigned char volatile*, JavaThread*)
  0xee079c96:   add    $0x8,%esp
  0xee079c99:   mov    0x4(%esp),%edx
  0xee079c9d:   mov    (%esp),%ecx
  0xee079ca0:   add    $0x10,%esp
  0xee079ca3:   mov    -0x20(%ebp),%esi
  0xee079ca6:   jmp    0xee079d45                   ;; 3141:     __ jmp(Done);
  0xee079cab:   cmp    $0x4,%eax                    ;; 3144:   __ bind(notObj);
                                                    ;; 3145:   __ cmpl(flags, itos);
  0xee079cae:   jne    0xee079cbd                   ;; 3146:   __ jcc(Assembler::notEqual, notInt);
  0xee079cb4:   pop    %eax                         ;; 3150:     __ pop(itos);
  0xee079cb5:   mov    %eax,(%ecx,%ebx,1)           ;; 3152:     __ access_store_at(T_INT, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee079cb8:   jmp    0xee079d45                   ;; 3156:     __ jmp(Done);
  0xee079cbd:   cmp    $0x2,%eax                    ;; 3159:   __ bind(notInt);
                                                    ;; 3160:   __ cmpl(flags, ctos);
  0xee079cc0:   jne    0xee079cd0                   ;; 3161:   __ jcc(Assembler::notEqual, notChar);
  0xee079cc6:   pop    %eax                         ;; 3165:     __ pop(ctos);
  0xee079cc7:   mov    %ax,(%ecx,%ebx,1)            ;; 3167:     __ access_store_at(T_CHAR, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee079ccb:   jmp    0xee079d45                   ;; 3171:     __ jmp(Done);
  0xee079cd0:   cmp    $0x3,%eax                    ;; 3174:   __ bind(notChar);
                                                    ;; 3175:   __ cmpl(flags, stos);
  0xee079cd3:   jne    0xee079ce3                   ;; 3176:   __ jcc(Assembler::notEqual, notShort);
  0xee079cd9:   pop    %eax                         ;; 3180:     __ pop(stos);
  0xee079cda:   mov    %ax,(%ecx,%ebx,1)            ;; 3182:     __ access_store_at(T_SHORT, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee079cde:   jmp    0xee079d45                   ;; 3186:     __ jmp(Done);
  0xee079ce3:   cmp    $0x5,%eax                    ;; 3189:   __ bind(notShort);
                                                    ;; 3190:   __ cmpl(flags, ltos);
  0xee079ce6:   jne    0xee079cfe                   ;; 3191:   __ jcc(Assembler::notEqual, notLong);
  0xee079cec:   pop    %eax                         ;; 3195:     __ pop(ltos);
  0xee079ced:   pop    %edx
  0xee079cee:   push   %edx                         ;; 3198:     __ access_store_at(T_LONG, IN_HEAP | MO_RELAXED, field, noreg /* ltos*/, noreg, noreg, noreg);
  0xee079cef:   push   %eax
  0xee079cf0:   fildll (%esp)
  0xee079cf3:   fistpll (%ecx,%ebx,1)
  0xee079cf6:   add    $0x8,%esp
  0xee079cf9:   jmp    0xee079d45                   ;; 3204:     __ jmp(Done);
  0xee079cfe:   cmp    $0x6,%eax                    ;; 3207:   __ bind(notLong);
                                                    ;; 3208:   __ cmpl(flags, ftos);
  0xee079d01:   jne    0xee079d19                   ;; 3209:   __ jcc(Assembler::notEqual, notFloat);
  0xee079d07:   vmovss (%esp),%xmm0                 ;; 3213:     __ pop(ftos);
  0xee079d0c:   add    $0x4,%esp
  0xee079d0f:   vmovss %xmm0,(%ecx,%ebx,1)          ;; 3215:     __ access_store_at(T_FLOAT, IN_HEAP, field, noreg /* ftos */, noreg, noreg, noreg);
  0xee079d14:   jmp    0xee079d45                   ;; 3219:     __ jmp(Done);
  0xee079d19:   cmp    $0x7,%eax                    ;; 3222:   __ bind(notFloat);
                                                    ;; 3225:   __ cmpl(flags, dtos);
  0xee079d1c:   jne    0xee079d34                   ;; 3226:   __ jcc(Assembler::notEqual, notDouble);
  0xee079d22:   vmovsd (%esp),%xmm0                 ;; 3231:     __ pop(dtos);
  0xee079d27:   add    $0x8,%esp
  0xee079d2a:   vmovsd %xmm0,(%ecx,%ebx,1)          ;; 3234:     __ access_store_at(T_DOUBLE, IN_HEAP | MO_RELAXED, field, noreg /* dtos */, noreg, noreg, noreg);
  0xee079d2f:   jmp    0xee079d45                   ;; 3241:   __ jmp(Done);
  0xee079d34:   push   $0xf7924fde                  ;; 3243:   __ bind(notDouble);
                                                    ;; 3244:   __ stop("Bad state");
  0xee079d39:   call   0xee079d3e
  0xee079d3e:   pusha  
  0xee079d3f:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079d44:   hlt    
  0xee079d45:   movzbl 0x3(%esi),%ebx               ;; 3247:   __ bind(Done);
                                                    ;; 3080:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee079d49:   add    $0x3,%esi
  0xee079d4c:   jmp    *-0x833caa0(,%ebx,4)
  0xee079d53:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
getfield  180 getfield  [0xee079d80, 0xee07a0e0]  864 bytes

--------------------------------------------------------------------------------
  0xee079d80:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee079d83:   vmovss %xmm0,(%esp)
  0xee079d88:   jmp    0xee079d99                   ;; 1751:       __ jmpb(L);
  0xee079d8a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee079d8d:   vmovsd %xmm0,(%esp)
  0xee079d92:   jmp    0xee079d99                   ;; 1754:       __ jmpb(L);
  0xee079d94:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee079d95:   push   %eax
  0xee079d96:   jmp    0xee079d99                   ;; 1765:       __ jmpb(L);
  0xee079d98:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee079d99:   movzwl 0x1(%esi),%edx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2666:   __ get_cache_and_index_and_bytecode_at_bcp(cache, index, temp, byte_no, 1, index_size);
  0xee079d9d:   mov    -0x18(%ebp),%ecx
  0xee079da0:   shl    $0x2,%edx
  0xee079da3:   mov    0x1c(%ecx,%edx,4),%ebx
  0xee079da7:   shr    $0x10,%ebx
  0xee079daa:   and    $0xff,%ebx
  0xee079db0:   cmp    $0xb4,%ebx                   ;; 2667:   __ cmpl(temp, code);  // have we resolved this bytecode?
  0xee079db6:   je     0xee079e77                   ;; 2668:   __ jcc(Assembler::equal, resolved);
  0xee079dbc:   mov    $0xb4,%ebx                   ;; 2672:   __ bind(L_clinit_barrier_slow);
                                                    ;; 2674:   __ movl(temp, code);
  0xee079dc1:   call   0xee079dcb                   ;; 2675:   __ call_VM(noreg, entry, temp);
  0xee079dc6:   jmp    0xee079e6d
  0xee079dcb:   push   %ebx
  0xee079dcc:   lea    0x8(%esp),%eax
  0xee079dd0:   mov    %esi,-0x20(%ebp)
  0xee079dd3:   cmpl   $0x0,-0x8(%ebp)
  0xee079dd7:   je     0xee079dee
  0xee079ddd:   push   $0xf78569d8
  0xee079de2:   call   0xee079de7
  0xee079de7:   pusha  
  0xee079de8:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079ded:   hlt    
  0xee079dee:   push   %eax
  0xee079def:   push   %edx
  0xee079df0:   push   %ecx
  0xee079df1:   call   0xf704a910 = Thread::current()
  0xee079df6:   pop    %ecx
  0xee079df7:   pop    %edx
  0xee079df8:   mov    %eax,%edi
  0xee079dfa:   pop    %eax
  0xee079dfb:   push   %edi
  0xee079dfc:   vzeroupper 
  0xee079dff:   mov    %ebp,0x230(%edi)
  0xee079e05:   mov    %eax,0x228(%edi)
  0xee079e0b:   call   0xf6c166c0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0xee079e10:   add    $0x8,%esp
  0xee079e13:   push   %eax
  0xee079e14:   push   %edx
  0xee079e15:   push   %ecx
  0xee079e16:   call   0xf704a910 = Thread::current()
  0xee079e1b:   pop    %ecx
  0xee079e1c:   pop    %edx
  0xee079e1d:   cmp    %eax,%edi
  0xee079e1f:   je     0xee079e36
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee079e25:   push   $0xf78b5a48
  0xee079e2a:   call   0xee079e2f
  0xee079e2f:   pusha  
  0xee079e30:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079e35:   hlt    
  0xee079e36:   pop    %eax
  0xee079e37:   movl   $0x0,0x228(%edi)
  0xee079e41:   movl   $0x0,0x230(%edi)
  0xee079e4b:   movl   $0x0,0x22c(%edi)
  0xee079e55:   vzeroupper 
  0xee079e58:   cmpl   $0x0,0x4(%edi)
  0xee079e5c:   jne    0xee05bbe0
  0xee079e62:   mov    -0x20(%ebp),%esi
  0xee079e65:   mov    -0x1c(%ebp),%edi
  0xee079e68:   lea    0x0(%ebp,%edi,4),%edi
  0xee079e6c:   ret    
  0xee079e6d:   movzwl 0x1(%esi),%edx               ;; 2677:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee079e71:   mov    -0x18(%ebp),%ecx
  0xee079e74:   shl    $0x2,%edx
  0xee079e77:   mov    0x24(%ecx,%edx,4),%ebx       ;; 2679:   __ bind(resolved);
                                                    ;; 2705:   __ movptr(off, Address(cache, index, Address::times_ptr,
  0xee079e7b:   mov    0x28(%ecx,%edx,4),%eax       ;; 2709:   __ movl(flags, Address(cache, index, Address::times_ptr,
  0xee079e7f:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee079e80:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee079e82:   shr    $0x1c,%eax                   ;; 2795:   __ verify_oop(r);
                                                    ;; 2818:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee079e85:   and    $0xf,%eax                    ;; 2822:   __ andl(flags, ConstantPoolCacheEntry::tos_state_mask);
  0xee079e88:   jne    0xee079ec7                   ;; 2824:   __ jcc(Assembler::notZero, notByte);
  0xee079e8e:   movsbl (%ecx,%ebx,1),%eax           ;; 2826:   __ access_load_at(T_BYTE, IN_HEAP, rax, field, noreg, noreg);
  0xee079e92:   push   %eax                         ;; 2827:   __ push(btos);
  0xee079e93:   mov    $0xcc,%ecx                   ;;  208:       __ movl(bc_reg, bc);
  0xee079e98:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee079e9b:   cmp    $0xb4,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee079ea1:   je     0xee079ec0                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee079ea7:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee079ea9:   je     0xee079ec0                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee079eaf:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee079eb4:   call   0xee079eb9
  0xee079eb9:   pusha  
  0xee079eba:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079ebf:   hlt    
  0xee079ec0:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee079ec2:   jmp    0xee07a0cf                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 2832:   __ jmp(Done);
  0xee079ec7:   cmp    $0x1,%eax                    ;; 2834:   __ bind(notByte);
                                                    ;; 2835:   __ cmpl(flags, ztos);
  0xee079eca:   jne    0xee079f09                   ;; 2836:   __ jcc(Assembler::notEqual, notBool);
  0xee079ed0:   movzbl (%ecx,%ebx,1),%eax           ;; 2839:   __ access_load_at(T_BOOLEAN, IN_HEAP, rax, field, noreg, noreg);
  0xee079ed4:   push   %eax                         ;; 2840:   __ push(ztos);
  0xee079ed5:   mov    $0xcc,%ecx                   ;;  208:       __ movl(bc_reg, bc);
  0xee079eda:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee079edd:   cmp    $0xb4,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee079ee3:   je     0xee079f02                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee079ee9:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee079eeb:   je     0xee079f02                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee079ef1:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee079ef6:   call   0xee079efb
  0xee079efb:   pusha  
  0xee079efc:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079f01:   hlt    
  0xee079f02:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee079f04:   jmp    0xee07a0cf                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 2846:   __ jmp(Done);
  0xee079f09:   cmp    $0x8,%eax                    ;; 2848:   __ bind(notBool);
                                                    ;; 2849:   __ cmpl(flags, atos);
  0xee079f0c:   jne    0xee079f4a                   ;; 2850:   __ jcc(Assembler::notEqual, notObj);
  0xee079f12:   mov    (%ecx,%ebx,1),%eax           ;;  165:   __ load_heap_oop(dst, src, rdx, rbx, decorators);
  0xee079f15:   push   %eax                         ;; 2853:   __ push(atos);
  0xee079f16:   mov    $0xcb,%ecx                   ;;  208:       __ movl(bc_reg, bc);
  0xee079f1b:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee079f1e:   cmp    $0xb4,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee079f24:   je     0xee079f43                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee079f2a:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee079f2c:   je     0xee079f43                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee079f32:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee079f37:   call   0xee079f3c
  0xee079f3c:   pusha  
  0xee079f3d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079f42:   hlt    
  0xee079f43:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee079f45:   jmp    0xee07a0cf                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 2857:   __ jmp(Done);
  0xee079f4a:   cmp    $0x4,%eax                    ;; 2859:   __ bind(notObj);
                                                    ;; 2860:   __ cmpl(flags, itos);
  0xee079f4d:   jne    0xee079f8b                   ;; 2861:   __ jcc(Assembler::notEqual, notInt);
  0xee079f53:   mov    (%ecx,%ebx,1),%eax           ;; 2863:   __ access_load_at(T_INT, IN_HEAP, rax, field, noreg, noreg);
  0xee079f56:   push   %eax                         ;; 2864:   __ push(itos);
  0xee079f57:   mov    $0xd0,%ecx                   ;;  208:       __ movl(bc_reg, bc);
  0xee079f5c:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee079f5f:   cmp    $0xb4,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee079f65:   je     0xee079f84                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee079f6b:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee079f6d:   je     0xee079f84                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee079f73:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee079f78:   call   0xee079f7d
  0xee079f7d:   pusha  
  0xee079f7e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079f83:   hlt    
  0xee079f84:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee079f86:   jmp    0xee07a0cf                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 2869:   __ jmp(Done);
  0xee079f8b:   cmp    $0x2,%eax                    ;; 2871:   __ bind(notInt);
                                                    ;; 2872:   __ cmpl(flags, ctos);
  0xee079f8e:   jne    0xee079fcd                   ;; 2873:   __ jcc(Assembler::notEqual, notChar);
  0xee079f94:   movzwl (%ecx,%ebx,1),%eax           ;; 2875:   __ access_load_at(T_CHAR, IN_HEAP, rax, field, noreg, noreg);
  0xee079f98:   push   %eax                         ;; 2876:   __ push(ctos);
  0xee079f99:   mov    $0xcd,%ecx                   ;;  208:       __ movl(bc_reg, bc);
  0xee079f9e:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee079fa1:   cmp    $0xb4,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee079fa7:   je     0xee079fc6                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee079fad:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee079faf:   je     0xee079fc6                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee079fb5:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee079fba:   call   0xee079fbf
  0xee079fbf:   pusha  
  0xee079fc0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee079fc5:   hlt    
  0xee079fc6:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee079fc8:   jmp    0xee07a0cf                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 2881:   __ jmp(Done);
  0xee079fcd:   cmp    $0x3,%eax                    ;; 2883:   __ bind(notChar);
                                                    ;; 2884:   __ cmpl(flags, stos);
  0xee079fd0:   jne    0xee07a00f                   ;; 2885:   __ jcc(Assembler::notEqual, notShort);
  0xee079fd6:   movswl (%ecx,%ebx,1),%eax           ;; 2887:   __ access_load_at(T_SHORT, IN_HEAP, rax, field, noreg, noreg);
  0xee079fda:   push   %eax                         ;; 2888:   __ push(stos);
  0xee079fdb:   mov    $0xd2,%ecx                   ;;  208:       __ movl(bc_reg, bc);
  0xee079fe0:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee079fe3:   cmp    $0xb4,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee079fe9:   je     0xee07a008                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee079fef:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee079ff1:   je     0xee07a008                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee079ff7:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee079ffc:   call   0xee07a001
  0xee07a001:   pusha  
  0xee07a002:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a007:   hlt    
  0xee07a008:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07a00a:   jmp    0xee07a0cf                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 2893:   __ jmp(Done);
  0xee07a00f:   cmp    $0x5,%eax                    ;; 2895:   __ bind(notShort);
                                                    ;; 2896:   __ cmpl(flags, ltos);
  0xee07a012:   jne    0xee07a02a                   ;; 2897:   __ jcc(Assembler::notEqual, notLong);
  0xee07a018:   fildll (%ecx,%ebx,1)                ;; 2901:   __ access_load_at(T_LONG, IN_HEAP | MO_RELAXED, noreg /* ltos */, field, noreg, noreg);
  0xee07a01b:   sub    $0x8,%esp
  0xee07a01e:   fistpll (%esp)
  0xee07a021:   pop    %eax
  0xee07a022:   pop    %edx
  0xee07a023:   push   %edx                         ;; 2902:   __ push(ltos);
  0xee07a024:   push   %eax
  0xee07a025:   jmp    0xee07a0cf                   ;; 2905:   __ jmp(Done);
  0xee07a02a:   cmp    $0x6,%eax                    ;; 2907:   __ bind(notLong);
                                                    ;; 2908:   __ cmpl(flags, ftos);
  0xee07a02d:   jne    0xee07a074                   ;; 2909:   __ jcc(Assembler::notEqual, notFloat);
  0xee07a033:   vmovss (%ecx,%ebx,1),%xmm0          ;; 2912:   __ access_load_at(T_FLOAT, IN_HEAP, noreg /* ftos */, field, noreg, noreg);
  0xee07a038:   sub    $0x4,%esp                    ;; 2913:   __ push(ftos);
  0xee07a03b:   vmovss %xmm0,(%esp)
  0xee07a040:   mov    $0xcf,%ecx                   ;;  208:       __ movl(bc_reg, bc);
  0xee07a045:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07a048:   cmp    $0xb4,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07a04e:   je     0xee07a06d                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07a054:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07a056:   je     0xee07a06d                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07a05c:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07a061:   call   0xee07a066
  0xee07a066:   pusha  
  0xee07a067:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a06c:   hlt    
  0xee07a06d:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07a06f:   jmp    0xee07a0cf                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 2918:   __ jmp(Done);
  0xee07a074:   cmp    $0x7,%eax                    ;; 2920:   __ bind(notFloat);
                                                    ;; 2923:   __ cmpl(flags, dtos);
  0xee07a077:   jne    0xee07a0be                   ;; 2924:   __ jcc(Assembler::notEqual, notDouble);
  0xee07a07d:   vmovsd (%ecx,%ebx,1),%xmm0          ;; 2928:   __ access_load_at(T_DOUBLE, IN_HEAP | MO_RELAXED, noreg /* dtos */, field, noreg, noreg);
  0xee07a082:   sub    $0x8,%esp                    ;; 2929:   __ push(dtos);
  0xee07a085:   vmovsd %xmm0,(%esp)
  0xee07a08a:   mov    $0xce,%ecx                   ;;  208:       __ movl(bc_reg, bc);
  0xee07a08f:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07a092:   cmp    $0xb4,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07a098:   je     0xee07a0b7                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07a09e:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07a0a0:   je     0xee07a0b7                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07a0a6:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07a0ab:   call   0xee07a0b0
  0xee07a0b0:   pusha  
  0xee07a0b1:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a0b6:   hlt    
  0xee07a0b7:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07a0b9:   jmp    0xee07a0cf                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 2935:   __ jmp(Done);
  0xee07a0be:   push   $0xf7924fde                  ;; 2937:   __ bind(notDouble);
                                                    ;; 2938:   __ stop("Bad state");
  0xee07a0c3:   call   0xee07a0c8
  0xee07a0c8:   pusha  
  0xee07a0c9:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a0ce:   hlt    
  0xee07a0cf:   movzbl 0x3(%esi),%ebx               ;; 2941:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07a0d3:   add    $0x3,%esi
  0xee07a0d6:   jmp    *-0x833caa0(,%ebx,4)
  0xee07a0dd:   nop
  0xee07a0de:   nop
  0xee07a0df:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
putfield  181 putfield  [0xee07a100, 0xee07abf0]  2800 bytes

--------------------------------------------------------------------------------
  0xee07a100:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07a103:   vmovss %xmm0,(%esp)
  0xee07a108:   jmp    0xee07a119                   ;; 1751:       __ jmpb(L);
  0xee07a10a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07a10d:   vmovsd %xmm0,(%esp)
  0xee07a112:   jmp    0xee07a119                   ;; 1754:       __ jmpb(L);
  0xee07a114:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07a115:   push   %eax
  0xee07a116:   jmp    0xee07a119                   ;; 1765:       __ jmpb(L);
  0xee07a118:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07a119:   movzwl 0x1(%esi),%edx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2666:   __ get_cache_and_index_and_bytecode_at_bcp(cache, index, temp, byte_no, 1, index_size);
  0xee07a11d:   mov    -0x18(%ebp),%ecx
  0xee07a120:   shl    $0x2,%edx
  0xee07a123:   mov    0x1c(%ecx,%edx,4),%ebx
  0xee07a127:   shr    $0x18,%ebx
  0xee07a12a:   and    $0xff,%ebx
  0xee07a130:   cmp    $0xb5,%ebx                   ;; 2667:   __ cmpl(temp, code);  // have we resolved this bytecode?
  0xee07a136:   je     0xee07a1f7                   ;; 2668:   __ jcc(Assembler::equal, resolved);
  0xee07a13c:   mov    $0xb5,%ebx                   ;; 2672:   __ bind(L_clinit_barrier_slow);
                                                    ;; 2674:   __ movl(temp, code);
  0xee07a141:   call   0xee07a14b                   ;; 2675:   __ call_VM(noreg, entry, temp);
  0xee07a146:   jmp    0xee07a1ed
  0xee07a14b:   push   %ebx
  0xee07a14c:   lea    0x8(%esp),%eax
  0xee07a150:   mov    %esi,-0x20(%ebp)
  0xee07a153:   cmpl   $0x0,-0x8(%ebp)
  0xee07a157:   je     0xee07a16e
  0xee07a15d:   push   $0xf78569d8
  0xee07a162:   call   0xee07a167
  0xee07a167:   pusha  
  0xee07a168:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a16d:   hlt    
  0xee07a16e:   push   %eax
  0xee07a16f:   push   %edx
  0xee07a170:   push   %ecx
  0xee07a171:   call   0xf704a910 = Thread::current()
  0xee07a176:   pop    %ecx
  0xee07a177:   pop    %edx
  0xee07a178:   mov    %eax,%edi
  0xee07a17a:   pop    %eax
  0xee07a17b:   push   %edi
  0xee07a17c:   vzeroupper 
  0xee07a17f:   mov    %ebp,0x230(%edi)
  0xee07a185:   mov    %eax,0x228(%edi)
  0xee07a18b:   call   0xf6c166c0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0xee07a190:   add    $0x8,%esp
  0xee07a193:   push   %eax
  0xee07a194:   push   %edx
  0xee07a195:   push   %ecx
  0xee07a196:   call   0xf704a910 = Thread::current()
  0xee07a19b:   pop    %ecx
  0xee07a19c:   pop    %edx
  0xee07a19d:   cmp    %eax,%edi
  0xee07a19f:   je     0xee07a1b6
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07a1a5:   push   $0xf78b5a48
  0xee07a1aa:   call   0xee07a1af
  0xee07a1af:   pusha  
  0xee07a1b0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a1b5:   hlt    
  0xee07a1b6:   pop    %eax
  0xee07a1b7:   movl   $0x0,0x228(%edi)
  0xee07a1c1:   movl   $0x0,0x230(%edi)
  0xee07a1cb:   movl   $0x0,0x22c(%edi)
  0xee07a1d5:   vzeroupper 
  0xee07a1d8:   cmpl   $0x0,0x4(%edi)
  0xee07a1dc:   jne    0xee05bbe0
  0xee07a1e2:   mov    -0x20(%ebp),%esi
  0xee07a1e5:   mov    -0x1c(%ebp),%edi
  0xee07a1e8:   lea    0x0(%ebp,%edi,4),%edi
  0xee07a1ec:   ret    
  0xee07a1ed:   movzwl 0x1(%esi),%edx               ;; 2677:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee07a1f1:   mov    -0x18(%ebp),%ecx
  0xee07a1f4:   shl    $0x2,%edx
  0xee07a1f7:   mov    0x24(%ecx,%edx,4),%ebx       ;; 2679:   __ bind(resolved);
                                                    ;; 2705:   __ movptr(off, Address(cache, index, Address::times_ptr,
  0xee07a1fb:   mov    0x28(%ecx,%edx,4),%eax       ;; 2709:   __ movl(flags, Address(cache, index, Address::times_ptr,
  0xee07a1ff:   mov    %eax,%edx                    ;; 3064:   __ movl(rdx, flags);
  0xee07a201:   shr    $0x15,%edx                   ;; 3065:   __ shrl(rdx, ConstantPoolCacheEntry::is_volatile_shift);
  0xee07a204:   and    $0x1,%edx                    ;; 3066:   __ andl(rdx, 0x1);
  0xee07a207:   test   %edx,%edx                    ;; 3069:   __ testl(rdx, rdx);
  0xee07a209:   je     0xee07a6fe                   ;; 3070:   __ jcc(Assembler::zero, notVolatile);
  0xee07a20f:   shr    $0x1c,%eax                   ;; 3096:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee07a212:   and    $0xf,%eax                    ;; 3099:   __ andl(flags, ConstantPoolCacheEntry::tos_state_mask);
  0xee07a215:   jne    0xee07a276                   ;; 3100:   __ jcc(Assembler::notZero, notByte);
  0xee07a21b:   pop    %eax                         ;; 3104:     __ pop(btos);
  0xee07a21c:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07a21d:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07a21f:   mov    %al,(%ecx,%ebx,1)            ;; 2795:   __ verify_oop(r);
                                                    ;; 3106:     __ access_store_at(T_BYTE, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07a222:   movzwl 0x1(%esi),%ecx               ;;  198:       __ get_cache_and_index_and_bytecode_at_bcp(temp_reg, bc_reg, temp_reg, byte_no, 1);
  0xee07a226:   mov    -0x18(%ebp),%ebx
  0xee07a229:   shl    $0x2,%ecx
  0xee07a22c:   mov    0x1c(%ebx,%ecx,4),%ebx
  0xee07a230:   shr    $0x18,%ebx
  0xee07a233:   and    $0xff,%ebx
  0xee07a239:   mov    $0xd4,%ecx                   ;;  199:       __ movl(bc_reg, bc);
  0xee07a23e:   cmp    $0x0,%ebx                    ;;  200:       __ cmpl(temp_reg, (int) 0);
  0xee07a241:   je     0xee07a271                   ;;  201:       __ jcc(Assembler::zero, L_patch_done);  // don't patch
  0xee07a247:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07a24a:   cmp    $0xb5,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07a250:   je     0xee07a26f                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07a256:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07a258:   je     0xee07a26f                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07a25e:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07a263:   call   0xee07a268
  0xee07a268:   pusha  
  0xee07a269:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a26e:   hlt    
  0xee07a26f:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07a271:   jmp    0xee07a6f3                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 3110:     __ jmp(Done);
  0xee07a276:   cmp    $0x1,%eax                    ;; 3113:   __ bind(notByte);
                                                    ;; 3114:   __ cmpl(flags, ztos);
  0xee07a279:   jne    0xee07a2dd                   ;; 3115:   __ jcc(Assembler::notEqual, notBool);
  0xee07a27f:   pop    %eax                         ;; 3119:     __ pop(ztos);
  0xee07a280:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07a281:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07a283:   and    $0x1,%eax                    ;; 2795:   __ verify_oop(r);
                                                    ;; 3121:     __ access_store_at(T_BOOLEAN, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07a286:   mov    %al,(%ecx,%ebx,1)
  0xee07a289:   movzwl 0x1(%esi),%ecx               ;;  198:       __ get_cache_and_index_and_bytecode_at_bcp(temp_reg, bc_reg, temp_reg, byte_no, 1);
  0xee07a28d:   mov    -0x18(%ebp),%ebx
  0xee07a290:   shl    $0x2,%ecx
  0xee07a293:   mov    0x1c(%ebx,%ecx,4),%ebx
  0xee07a297:   shr    $0x18,%ebx
  0xee07a29a:   and    $0xff,%ebx
  0xee07a2a0:   mov    $0xd5,%ecx                   ;;  199:       __ movl(bc_reg, bc);
  0xee07a2a5:   cmp    $0x0,%ebx                    ;;  200:       __ cmpl(temp_reg, (int) 0);
  0xee07a2a8:   je     0xee07a2d8                   ;;  201:       __ jcc(Assembler::zero, L_patch_done);  // don't patch
  0xee07a2ae:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07a2b1:   cmp    $0xb5,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07a2b7:   je     0xee07a2d6                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07a2bd:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07a2bf:   je     0xee07a2d6                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07a2c5:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07a2ca:   call   0xee07a2cf
  0xee07a2cf:   pusha  
  0xee07a2d0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a2d5:   hlt    
  0xee07a2d6:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07a2d8:   jmp    0xee07a6f3                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 3125:     __ jmp(Done);
  0xee07a2dd:   cmp    $0x8,%eax                    ;; 3128:   __ bind(notBool);
                                                    ;; 3129:   __ cmpl(flags, atos);
  0xee07a2e0:   jne    0xee07a4bc                   ;; 3130:   __ jcc(Assembler::notEqual, notObj);
  0xee07a2e6:   pop    %eax                         ;; 3134:     __ pop(atos);
  0xee07a2e7:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07a2e8:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07a2ea:   lea    (%ecx,%ebx,1),%edx           ;; 2795:   __ verify_oop(r);
                                                    ;;  155:   __ store_heap_oop(dst, val,
  0xee07a2ed:   push   %eax
  0xee07a2ee:   push   %edx
  0xee07a2ef:   push   %ecx
  0xee07a2f0:   call   0xf704a910 = Thread::current()
  0xee07a2f5:   pop    %ecx
  0xee07a2f6:   pop    %edx
  0xee07a2f7:   mov    %eax,%ecx
  0xee07a2f9:   pop    %eax
  0xee07a2fa:   mov    %esi,-0x20(%ebp)
  0xee07a2fd:   cmpb   $0x0,0x24(%ecx)
  0xee07a301:   je     0xee07a3d2
  0xee07a307:   mov    (%edx),%ebx
  0xee07a309:   cmp    $0x0,%ebx
  0xee07a30c:   je     0xee07a3d2
  0xee07a312:   mov    0x18(%ecx),%esi
  0xee07a315:   cmp    $0x0,%esi
  0xee07a318:   je     0xee07a32e
  0xee07a31e:   sub    $0x4,%esi
  0xee07a321:   mov    %esi,0x18(%ecx)
  0xee07a324:   add    0x20(%ecx),%esi
  0xee07a327:   mov    %ebx,(%esi)
  0xee07a329:   jmp    0xee07a3d2
 ;; push_call_clobbered_registers start
  0xee07a32e:   sub    $0x50,%esp
  0xee07a331:   mov    %eax,(%esp)
  0xee07a334:   mov    %ecx,0x4(%esp)
  0xee07a338:   mov    %edx,0x8(%esp)
  0xee07a33c:   vmovsd %xmm0,0x10(%esp)
  0xee07a342:   vmovsd %xmm1,0x18(%esp)
  0xee07a348:   vmovsd %xmm2,0x20(%esp)
  0xee07a34e:   vmovsd %xmm3,0x28(%esp)
  0xee07a354:   vmovsd %xmm4,0x30(%esp)
  0xee07a35a:   vmovsd %xmm5,0x38(%esp)
  0xee07a360:   vmovsd %xmm6,0x40(%esp)
  0xee07a366:   vmovsd %xmm7,0x48(%esp)
 ;; push_call_clobbered_registers end
  0xee07a36c:   push   %ecx
  0xee07a36d:   push   %ebx
  0xee07a36e:   cmpl   $0x0,-0x8(%ebp)
  0xee07a372:   je     0xee07a389
  0xee07a378:   push   $0xf785694c
  0xee07a37d:   call   0xee07a382
  0xee07a382:   pusha  
  0xee07a383:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a388:   hlt    
  0xee07a389:   call   0xf6a17f10 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0xee07a38e:   add    $0x8,%esp
 ;; pop_call_clobbered_registers start
  0xee07a391:   vmovsd 0x48(%esp),%xmm7
  0xee07a397:   vmovsd 0x40(%esp),%xmm6
  0xee07a39d:   vmovsd 0x38(%esp),%xmm5
  0xee07a3a3:   vmovsd 0x30(%esp),%xmm4
  0xee07a3a9:   vmovsd 0x28(%esp),%xmm3
  0xee07a3af:   vmovsd 0x20(%esp),%xmm2
  0xee07a3b5:   vmovsd 0x18(%esp),%xmm1
  0xee07a3bb:   vmovsd 0x10(%esp),%xmm0
  0xee07a3c1:   mov    0x8(%esp),%edx
  0xee07a3c5:   mov    0x4(%esp),%ecx
  0xee07a3c9:   mov    (%esp),%eax
  0xee07a3cc:   add    $0x50,%esp
  0xee07a3cf:   vzeroupper 
 ;; pop_call_clobbered_registers end
  0xee07a3d2:   mov    %eax,(%edx)
  0xee07a3d4:   mov    %edx,%esi
  0xee07a3d6:   xor    %eax,%esi
  0xee07a3d8:   shr    $0x14,%esi
  0xee07a3db:   je     0xee07a465
  0xee07a3e1:   cmp    $0x0,%eax
  0xee07a3e4:   je     0xee07a465
  0xee07a3ea:   mov    %edx,%esi
  0xee07a3ec:   shr    $0x9,%esi
  0xee07a3ef:   mov    $0xa5ecc000,%ebx
  0xee07a3f4:   add    %ebx,%esi
  0xee07a3f6:   cmpb   $0x2,(%esi)
  0xee07a3f9:   je     0xee07a465
  0xee07a3ff:   lock addl $0x0,-0x40(%esp)
  0xee07a405:   cmpb   $0x0,(%esi)
  0xee07a408:   je     0xee07a465
  0xee07a40e:   movb   $0x0,(%esi)
  0xee07a411:   mov    0x28(%ecx),%ebx
  0xee07a414:   test   %ebx,%ebx
  0xee07a416:   je     0xee07a42c
  0xee07a41c:   sub    $0x4,%ebx
  0xee07a41f:   mov    %ebx,0x28(%ecx)
  0xee07a422:   add    0x30(%ecx),%ebx
  0xee07a425:   mov    %esi,(%ebx)
  0xee07a427:   jmp    0xee07a465
  0xee07a42c:   sub    $0x10,%esp
  0xee07a42f:   mov    %ecx,(%esp)
  0xee07a432:   mov    %edx,0x4(%esp)
  0xee07a436:   push   %ecx
  0xee07a437:   push   %esi
  0xee07a438:   cmpl   $0x0,-0x8(%ebp)
  0xee07a43c:   je     0xee07a453
  0xee07a442:   push   $0xf785694c
  0xee07a447:   call   0xee07a44c
  0xee07a44c:   pusha  
  0xee07a44d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a452:   hlt    
  0xee07a453:   call   0xf6a181d0 = G1BarrierSetRuntime::write_ref_field_post_entry(unsigned char volatile*, JavaThread*)
  0xee07a458:   add    $0x8,%esp
  0xee07a45b:   mov    0x4(%esp),%edx
  0xee07a45f:   mov    (%esp),%ecx
  0xee07a462:   add    $0x10,%esp
  0xee07a465:   mov    -0x20(%ebp),%esi
  0xee07a468:   movzwl 0x1(%esi),%ecx               ;;  198:       __ get_cache_and_index_and_bytecode_at_bcp(temp_reg, bc_reg, temp_reg, byte_no, 1);
  0xee07a46c:   mov    -0x18(%ebp),%ebx
  0xee07a46f:   shl    $0x2,%ecx
  0xee07a472:   mov    0x1c(%ebx,%ecx,4),%ebx
  0xee07a476:   shr    $0x18,%ebx
  0xee07a479:   and    $0xff,%ebx
  0xee07a47f:   mov    $0xd3,%ecx                   ;;  199:       __ movl(bc_reg, bc);
  0xee07a484:   cmp    $0x0,%ebx                    ;;  200:       __ cmpl(temp_reg, (int) 0);
  0xee07a487:   je     0xee07a4b7                   ;;  201:       __ jcc(Assembler::zero, L_patch_done);  // don't patch
  0xee07a48d:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07a490:   cmp    $0xb5,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07a496:   je     0xee07a4b5                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07a49c:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07a49e:   je     0xee07a4b5                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07a4a4:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07a4a9:   call   0xee07a4ae
  0xee07a4ae:   pusha  
  0xee07a4af:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a4b4:   hlt    
  0xee07a4b5:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07a4b7:   jmp    0xee07a6f3                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 3141:     __ jmp(Done);
  0xee07a4bc:   cmp    $0x4,%eax                    ;; 3144:   __ bind(notObj);
                                                    ;; 3145:   __ cmpl(flags, itos);
  0xee07a4bf:   jne    0xee07a520                   ;; 3146:   __ jcc(Assembler::notEqual, notInt);
  0xee07a4c5:   pop    %eax                         ;; 3150:     __ pop(itos);
  0xee07a4c6:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07a4c7:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07a4c9:   mov    %eax,(%ecx,%ebx,1)           ;; 2795:   __ verify_oop(r);
                                                    ;; 3152:     __ access_store_at(T_INT, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07a4cc:   movzwl 0x1(%esi),%ecx               ;;  198:       __ get_cache_and_index_and_bytecode_at_bcp(temp_reg, bc_reg, temp_reg, byte_no, 1);
  0xee07a4d0:   mov    -0x18(%ebp),%ebx
  0xee07a4d3:   shl    $0x2,%ecx
  0xee07a4d6:   mov    0x1c(%ebx,%ecx,4),%ebx
  0xee07a4da:   shr    $0x18,%ebx
  0xee07a4dd:   and    $0xff,%ebx
  0xee07a4e3:   mov    $0xd9,%ecx                   ;;  199:       __ movl(bc_reg, bc);
  0xee07a4e8:   cmp    $0x0,%ebx                    ;;  200:       __ cmpl(temp_reg, (int) 0);
  0xee07a4eb:   je     0xee07a51b                   ;;  201:       __ jcc(Assembler::zero, L_patch_done);  // don't patch
  0xee07a4f1:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07a4f4:   cmp    $0xb5,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07a4fa:   je     0xee07a519                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07a500:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07a502:   je     0xee07a519                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07a508:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07a50d:   call   0xee07a512
  0xee07a512:   pusha  
  0xee07a513:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a518:   hlt    
  0xee07a519:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07a51b:   jmp    0xee07a6f3                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 3156:     __ jmp(Done);
  0xee07a520:   cmp    $0x2,%eax                    ;; 3159:   __ bind(notInt);
                                                    ;; 3160:   __ cmpl(flags, ctos);
  0xee07a523:   jne    0xee07a585                   ;; 3161:   __ jcc(Assembler::notEqual, notChar);
  0xee07a529:   pop    %eax                         ;; 3165:     __ pop(ctos);
  0xee07a52a:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07a52b:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07a52d:   mov    %ax,(%ecx,%ebx,1)            ;; 2795:   __ verify_oop(r);
                                                    ;; 3167:     __ access_store_at(T_CHAR, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07a531:   movzwl 0x1(%esi),%ecx               ;;  198:       __ get_cache_and_index_and_bytecode_at_bcp(temp_reg, bc_reg, temp_reg, byte_no, 1);
  0xee07a535:   mov    -0x18(%ebp),%ebx
  0xee07a538:   shl    $0x2,%ecx
  0xee07a53b:   mov    0x1c(%ebx,%ecx,4),%ebx
  0xee07a53f:   shr    $0x18,%ebx
  0xee07a542:   and    $0xff,%ebx
  0xee07a548:   mov    $0xd6,%ecx                   ;;  199:       __ movl(bc_reg, bc);
  0xee07a54d:   cmp    $0x0,%ebx                    ;;  200:       __ cmpl(temp_reg, (int) 0);
  0xee07a550:   je     0xee07a580                   ;;  201:       __ jcc(Assembler::zero, L_patch_done);  // don't patch
  0xee07a556:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07a559:   cmp    $0xb5,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07a55f:   je     0xee07a57e                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07a565:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07a567:   je     0xee07a57e                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07a56d:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07a572:   call   0xee07a577
  0xee07a577:   pusha  
  0xee07a578:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a57d:   hlt    
  0xee07a57e:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07a580:   jmp    0xee07a6f3                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 3171:     __ jmp(Done);
  0xee07a585:   cmp    $0x3,%eax                    ;; 3174:   __ bind(notChar);
                                                    ;; 3175:   __ cmpl(flags, stos);
  0xee07a588:   jne    0xee07a5ea                   ;; 3176:   __ jcc(Assembler::notEqual, notShort);
  0xee07a58e:   pop    %eax                         ;; 3180:     __ pop(stos);
  0xee07a58f:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07a590:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07a592:   mov    %ax,(%ecx,%ebx,1)            ;; 2795:   __ verify_oop(r);
                                                    ;; 3182:     __ access_store_at(T_SHORT, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07a596:   movzwl 0x1(%esi),%ecx               ;;  198:       __ get_cache_and_index_and_bytecode_at_bcp(temp_reg, bc_reg, temp_reg, byte_no, 1);
  0xee07a59a:   mov    -0x18(%ebp),%ebx
  0xee07a59d:   shl    $0x2,%ecx
  0xee07a5a0:   mov    0x1c(%ebx,%ecx,4),%ebx
  0xee07a5a4:   shr    $0x18,%ebx
  0xee07a5a7:   and    $0xff,%ebx
  0xee07a5ad:   mov    $0xdb,%ecx                   ;;  199:       __ movl(bc_reg, bc);
  0xee07a5b2:   cmp    $0x0,%ebx                    ;;  200:       __ cmpl(temp_reg, (int) 0);
  0xee07a5b5:   je     0xee07a5e5                   ;;  201:       __ jcc(Assembler::zero, L_patch_done);  // don't patch
  0xee07a5bb:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07a5be:   cmp    $0xb5,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07a5c4:   je     0xee07a5e3                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07a5ca:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07a5cc:   je     0xee07a5e3                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07a5d2:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07a5d7:   call   0xee07a5dc
  0xee07a5dc:   pusha  
  0xee07a5dd:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a5e2:   hlt    
  0xee07a5e3:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07a5e5:   jmp    0xee07a6f3                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 3186:     __ jmp(Done);
  0xee07a5ea:   cmp    $0x5,%eax                    ;; 3189:   __ bind(notShort);
                                                    ;; 3190:   __ cmpl(flags, ltos);
  0xee07a5ed:   jne    0xee07a608                   ;; 3191:   __ jcc(Assembler::notEqual, notLong);
  0xee07a5f3:   pop    %eax                         ;; 3195:     __ pop(ltos);
  0xee07a5f4:   pop    %edx
  0xee07a5f5:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07a5f6:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07a5f8:   push   %edx                         ;; 2795:   __ verify_oop(r);
                                                    ;; 3198:     __ access_store_at(T_LONG, IN_HEAP | MO_RELAXED, field, noreg /* ltos*/, noreg, noreg, noreg);
  0xee07a5f9:   push   %eax
  0xee07a5fa:   fildll (%esp)
  0xee07a5fd:   fistpll (%ecx,%ebx,1)
  0xee07a600:   add    $0x8,%esp
  0xee07a603:   jmp    0xee07a6f3                   ;; 3204:     __ jmp(Done);
  0xee07a608:   cmp    $0x6,%eax                    ;; 3207:   __ bind(notLong);
                                                    ;; 3208:   __ cmpl(flags, ftos);
  0xee07a60b:   jne    0xee07a675                   ;; 3209:   __ jcc(Assembler::notEqual, notFloat);
  0xee07a611:   vmovss (%esp),%xmm0                 ;; 3213:     __ pop(ftos);
  0xee07a616:   add    $0x4,%esp
  0xee07a619:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07a61a:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07a61c:   vmovss %xmm0,(%ecx,%ebx,1)          ;; 2795:   __ verify_oop(r);
                                                    ;; 3215:     __ access_store_at(T_FLOAT, IN_HEAP, field, noreg /* ftos */, noreg, noreg, noreg);
  0xee07a621:   movzwl 0x1(%esi),%ecx               ;;  198:       __ get_cache_and_index_and_bytecode_at_bcp(temp_reg, bc_reg, temp_reg, byte_no, 1);
  0xee07a625:   mov    -0x18(%ebp),%ebx
  0xee07a628:   shl    $0x2,%ecx
  0xee07a62b:   mov    0x1c(%ebx,%ecx,4),%ebx
  0xee07a62f:   shr    $0x18,%ebx
  0xee07a632:   and    $0xff,%ebx
  0xee07a638:   mov    $0xd8,%ecx                   ;;  199:       __ movl(bc_reg, bc);
  0xee07a63d:   cmp    $0x0,%ebx                    ;;  200:       __ cmpl(temp_reg, (int) 0);
  0xee07a640:   je     0xee07a670                   ;;  201:       __ jcc(Assembler::zero, L_patch_done);  // don't patch
  0xee07a646:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07a649:   cmp    $0xb5,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07a64f:   je     0xee07a66e                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07a655:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07a657:   je     0xee07a66e                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07a65d:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07a662:   call   0xee07a667
  0xee07a667:   pusha  
  0xee07a668:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a66d:   hlt    
  0xee07a66e:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07a670:   jmp    0xee07a6f3                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 3219:     __ jmp(Done);
  0xee07a675:   cmp    $0x7,%eax                    ;; 3222:   __ bind(notFloat);
                                                    ;; 3225:   __ cmpl(flags, dtos);
  0xee07a678:   jne    0xee07a6e2                   ;; 3226:   __ jcc(Assembler::notEqual, notDouble);
  0xee07a67e:   vmovsd (%esp),%xmm0                 ;; 3231:     __ pop(dtos);
  0xee07a683:   add    $0x8,%esp
  0xee07a686:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07a687:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07a689:   vmovsd %xmm0,(%ecx,%ebx,1)          ;; 2795:   __ verify_oop(r);
                                                    ;; 3234:     __ access_store_at(T_DOUBLE, IN_HEAP | MO_RELAXED, field, noreg /* dtos */, noreg, noreg, noreg);
  0xee07a68e:   movzwl 0x1(%esi),%ecx               ;;  198:       __ get_cache_and_index_and_bytecode_at_bcp(temp_reg, bc_reg, temp_reg, byte_no, 1);
  0xee07a692:   mov    -0x18(%ebp),%ebx
  0xee07a695:   shl    $0x2,%ecx
  0xee07a698:   mov    0x1c(%ebx,%ecx,4),%ebx
  0xee07a69c:   shr    $0x18,%ebx
  0xee07a69f:   and    $0xff,%ebx
  0xee07a6a5:   mov    $0xd7,%ecx                   ;;  199:       __ movl(bc_reg, bc);
  0xee07a6aa:   cmp    $0x0,%ebx                    ;;  200:       __ cmpl(temp_reg, (int) 0);
  0xee07a6ad:   je     0xee07a6dd                   ;;  201:       __ jcc(Assembler::zero, L_patch_done);  // don't patch
  0xee07a6b3:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07a6b6:   cmp    $0xb5,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07a6bc:   je     0xee07a6db                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07a6c2:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07a6c4:   je     0xee07a6db                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07a6ca:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07a6cf:   call   0xee07a6d4
  0xee07a6d4:   pusha  
  0xee07a6d5:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a6da:   hlt    
  0xee07a6db:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07a6dd:   jmp    0xee07a6f3                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 3241:   __ jmp(Done);
  0xee07a6e2:   push   $0xf7924fde                  ;; 3243:   __ bind(notDouble);
                                                    ;; 3244:   __ stop("Bad state");
  0xee07a6e7:   call   0xee07a6ec
  0xee07a6ec:   pusha  
  0xee07a6ed:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a6f2:   hlt    
  0xee07a6f3:   lock addl $0x0,-0x40(%esp)          ;; 3247:   __ bind(Done);
                                                    ;; 2645:   __ membar(order_constraint);
  0xee07a6f9:   jmp    0xee07abe2                   ;; 3075:   __ jmp(Done);
  0xee07a6fe:   shr    $0x1c,%eax                   ;; 3076:   __ bind(notVolatile);
                                                    ;; 3096:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee07a701:   and    $0xf,%eax                    ;; 3099:   __ andl(flags, ConstantPoolCacheEntry::tos_state_mask);
  0xee07a704:   jne    0xee07a765                   ;; 3100:   __ jcc(Assembler::notZero, notByte);
  0xee07a70a:   pop    %eax                         ;; 3104:     __ pop(btos);
  0xee07a70b:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07a70c:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07a70e:   mov    %al,(%ecx,%ebx,1)            ;; 2795:   __ verify_oop(r);
                                                    ;; 3106:     __ access_store_at(T_BYTE, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07a711:   movzwl 0x1(%esi),%ecx               ;;  198:       __ get_cache_and_index_and_bytecode_at_bcp(temp_reg, bc_reg, temp_reg, byte_no, 1);
  0xee07a715:   mov    -0x18(%ebp),%ebx
  0xee07a718:   shl    $0x2,%ecx
  0xee07a71b:   mov    0x1c(%ebx,%ecx,4),%ebx
  0xee07a71f:   shr    $0x18,%ebx
  0xee07a722:   and    $0xff,%ebx
  0xee07a728:   mov    $0xd4,%ecx                   ;;  199:       __ movl(bc_reg, bc);
  0xee07a72d:   cmp    $0x0,%ebx                    ;;  200:       __ cmpl(temp_reg, (int) 0);
  0xee07a730:   je     0xee07a760                   ;;  201:       __ jcc(Assembler::zero, L_patch_done);  // don't patch
  0xee07a736:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07a739:   cmp    $0xb5,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07a73f:   je     0xee07a75e                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07a745:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07a747:   je     0xee07a75e                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07a74d:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07a752:   call   0xee07a757
  0xee07a757:   pusha  
  0xee07a758:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a75d:   hlt    
  0xee07a75e:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07a760:   jmp    0xee07abe2                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 3110:     __ jmp(Done);
  0xee07a765:   cmp    $0x1,%eax                    ;; 3113:   __ bind(notByte);
                                                    ;; 3114:   __ cmpl(flags, ztos);
  0xee07a768:   jne    0xee07a7cc                   ;; 3115:   __ jcc(Assembler::notEqual, notBool);
  0xee07a76e:   pop    %eax                         ;; 3119:     __ pop(ztos);
  0xee07a76f:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07a770:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07a772:   and    $0x1,%eax                    ;; 2795:   __ verify_oop(r);
                                                    ;; 3121:     __ access_store_at(T_BOOLEAN, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07a775:   mov    %al,(%ecx,%ebx,1)
  0xee07a778:   movzwl 0x1(%esi),%ecx               ;;  198:       __ get_cache_and_index_and_bytecode_at_bcp(temp_reg, bc_reg, temp_reg, byte_no, 1);
  0xee07a77c:   mov    -0x18(%ebp),%ebx
  0xee07a77f:   shl    $0x2,%ecx
  0xee07a782:   mov    0x1c(%ebx,%ecx,4),%ebx
  0xee07a786:   shr    $0x18,%ebx
  0xee07a789:   and    $0xff,%ebx
  0xee07a78f:   mov    $0xd5,%ecx                   ;;  199:       __ movl(bc_reg, bc);
  0xee07a794:   cmp    $0x0,%ebx                    ;;  200:       __ cmpl(temp_reg, (int) 0);
  0xee07a797:   je     0xee07a7c7                   ;;  201:       __ jcc(Assembler::zero, L_patch_done);  // don't patch
  0xee07a79d:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07a7a0:   cmp    $0xb5,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07a7a6:   je     0xee07a7c5                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07a7ac:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07a7ae:   je     0xee07a7c5                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07a7b4:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07a7b9:   call   0xee07a7be
  0xee07a7be:   pusha  
  0xee07a7bf:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a7c4:   hlt    
  0xee07a7c5:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07a7c7:   jmp    0xee07abe2                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 3125:     __ jmp(Done);
  0xee07a7cc:   cmp    $0x8,%eax                    ;; 3128:   __ bind(notBool);
                                                    ;; 3129:   __ cmpl(flags, atos);
  0xee07a7cf:   jne    0xee07a9ab                   ;; 3130:   __ jcc(Assembler::notEqual, notObj);
  0xee07a7d5:   pop    %eax                         ;; 3134:     __ pop(atos);
  0xee07a7d6:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07a7d7:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07a7d9:   lea    (%ecx,%ebx,1),%edx           ;; 2795:   __ verify_oop(r);
                                                    ;;  155:   __ store_heap_oop(dst, val,
  0xee07a7dc:   push   %eax
  0xee07a7dd:   push   %edx
  0xee07a7de:   push   %ecx
  0xee07a7df:   call   0xf704a910 = Thread::current()
  0xee07a7e4:   pop    %ecx
  0xee07a7e5:   pop    %edx
  0xee07a7e6:   mov    %eax,%ecx
  0xee07a7e8:   pop    %eax
  0xee07a7e9:   mov    %esi,-0x20(%ebp)
  0xee07a7ec:   cmpb   $0x0,0x24(%ecx)
  0xee07a7f0:   je     0xee07a8c1
  0xee07a7f6:   mov    (%edx),%ebx
  0xee07a7f8:   cmp    $0x0,%ebx
  0xee07a7fb:   je     0xee07a8c1
  0xee07a801:   mov    0x18(%ecx),%esi
  0xee07a804:   cmp    $0x0,%esi
  0xee07a807:   je     0xee07a81d
  0xee07a80d:   sub    $0x4,%esi
  0xee07a810:   mov    %esi,0x18(%ecx)
  0xee07a813:   add    0x20(%ecx),%esi
  0xee07a816:   mov    %ebx,(%esi)
  0xee07a818:   jmp    0xee07a8c1
 ;; push_call_clobbered_registers start
  0xee07a81d:   sub    $0x50,%esp
  0xee07a820:   mov    %eax,(%esp)
  0xee07a823:   mov    %ecx,0x4(%esp)
  0xee07a827:   mov    %edx,0x8(%esp)
  0xee07a82b:   vmovsd %xmm0,0x10(%esp)
  0xee07a831:   vmovsd %xmm1,0x18(%esp)
  0xee07a837:   vmovsd %xmm2,0x20(%esp)
  0xee07a83d:   vmovsd %xmm3,0x28(%esp)
  0xee07a843:   vmovsd %xmm4,0x30(%esp)
  0xee07a849:   vmovsd %xmm5,0x38(%esp)
  0xee07a84f:   vmovsd %xmm6,0x40(%esp)
  0xee07a855:   vmovsd %xmm7,0x48(%esp)
 ;; push_call_clobbered_registers end
  0xee07a85b:   push   %ecx
  0xee07a85c:   push   %ebx
  0xee07a85d:   cmpl   $0x0,-0x8(%ebp)
  0xee07a861:   je     0xee07a878
  0xee07a867:   push   $0xf785694c
  0xee07a86c:   call   0xee07a871
  0xee07a871:   pusha  
  0xee07a872:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a877:   hlt    
  0xee07a878:   call   0xf6a17f10 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0xee07a87d:   add    $0x8,%esp
 ;; pop_call_clobbered_registers start
  0xee07a880:   vmovsd 0x48(%esp),%xmm7
  0xee07a886:   vmovsd 0x40(%esp),%xmm6
  0xee07a88c:   vmovsd 0x38(%esp),%xmm5
  0xee07a892:   vmovsd 0x30(%esp),%xmm4
  0xee07a898:   vmovsd 0x28(%esp),%xmm3
  0xee07a89e:   vmovsd 0x20(%esp),%xmm2
  0xee07a8a4:   vmovsd 0x18(%esp),%xmm1
  0xee07a8aa:   vmovsd 0x10(%esp),%xmm0
  0xee07a8b0:   mov    0x8(%esp),%edx
  0xee07a8b4:   mov    0x4(%esp),%ecx
  0xee07a8b8:   mov    (%esp),%eax
  0xee07a8bb:   add    $0x50,%esp
  0xee07a8be:   vzeroupper 
 ;; pop_call_clobbered_registers end
  0xee07a8c1:   mov    %eax,(%edx)
  0xee07a8c3:   mov    %edx,%esi
  0xee07a8c5:   xor    %eax,%esi
  0xee07a8c7:   shr    $0x14,%esi
  0xee07a8ca:   je     0xee07a954
  0xee07a8d0:   cmp    $0x0,%eax
  0xee07a8d3:   je     0xee07a954
  0xee07a8d9:   mov    %edx,%esi
  0xee07a8db:   shr    $0x9,%esi
  0xee07a8de:   mov    $0xa5ecc000,%ebx
  0xee07a8e3:   add    %ebx,%esi
  0xee07a8e5:   cmpb   $0x2,(%esi)
  0xee07a8e8:   je     0xee07a954
  0xee07a8ee:   lock addl $0x0,-0x40(%esp)
  0xee07a8f4:   cmpb   $0x0,(%esi)
  0xee07a8f7:   je     0xee07a954
  0xee07a8fd:   movb   $0x0,(%esi)
  0xee07a900:   mov    0x28(%ecx),%ebx
  0xee07a903:   test   %ebx,%ebx
  0xee07a905:   je     0xee07a91b
  0xee07a90b:   sub    $0x4,%ebx
  0xee07a90e:   mov    %ebx,0x28(%ecx)
  0xee07a911:   add    0x30(%ecx),%ebx
  0xee07a914:   mov    %esi,(%ebx)
  0xee07a916:   jmp    0xee07a954
  0xee07a91b:   sub    $0x10,%esp
  0xee07a91e:   mov    %ecx,(%esp)
  0xee07a921:   mov    %edx,0x4(%esp)
  0xee07a925:   push   %ecx
  0xee07a926:   push   %esi
  0xee07a927:   cmpl   $0x0,-0x8(%ebp)
  0xee07a92b:   je     0xee07a942
  0xee07a931:   push   $0xf785694c
  0xee07a936:   call   0xee07a93b
  0xee07a93b:   pusha  
  0xee07a93c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a941:   hlt    
  0xee07a942:   call   0xf6a181d0 = G1BarrierSetRuntime::write_ref_field_post_entry(unsigned char volatile*, JavaThread*)
  0xee07a947:   add    $0x8,%esp
  0xee07a94a:   mov    0x4(%esp),%edx
  0xee07a94e:   mov    (%esp),%ecx
  0xee07a951:   add    $0x10,%esp
  0xee07a954:   mov    -0x20(%ebp),%esi
  0xee07a957:   movzwl 0x1(%esi),%ecx               ;;  198:       __ get_cache_and_index_and_bytecode_at_bcp(temp_reg, bc_reg, temp_reg, byte_no, 1);
  0xee07a95b:   mov    -0x18(%ebp),%ebx
  0xee07a95e:   shl    $0x2,%ecx
  0xee07a961:   mov    0x1c(%ebx,%ecx,4),%ebx
  0xee07a965:   shr    $0x18,%ebx
  0xee07a968:   and    $0xff,%ebx
  0xee07a96e:   mov    $0xd3,%ecx                   ;;  199:       __ movl(bc_reg, bc);
  0xee07a973:   cmp    $0x0,%ebx                    ;;  200:       __ cmpl(temp_reg, (int) 0);
  0xee07a976:   je     0xee07a9a6                   ;;  201:       __ jcc(Assembler::zero, L_patch_done);  // don't patch
  0xee07a97c:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07a97f:   cmp    $0xb5,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07a985:   je     0xee07a9a4                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07a98b:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07a98d:   je     0xee07a9a4                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07a993:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07a998:   call   0xee07a99d
  0xee07a99d:   pusha  
  0xee07a99e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07a9a3:   hlt    
  0xee07a9a4:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07a9a6:   jmp    0xee07abe2                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 3141:     __ jmp(Done);
  0xee07a9ab:   cmp    $0x4,%eax                    ;; 3144:   __ bind(notObj);
                                                    ;; 3145:   __ cmpl(flags, itos);
  0xee07a9ae:   jne    0xee07aa0f                   ;; 3146:   __ jcc(Assembler::notEqual, notInt);
  0xee07a9b4:   pop    %eax                         ;; 3150:     __ pop(itos);
  0xee07a9b5:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07a9b6:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07a9b8:   mov    %eax,(%ecx,%ebx,1)           ;; 2795:   __ verify_oop(r);
                                                    ;; 3152:     __ access_store_at(T_INT, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07a9bb:   movzwl 0x1(%esi),%ecx               ;;  198:       __ get_cache_and_index_and_bytecode_at_bcp(temp_reg, bc_reg, temp_reg, byte_no, 1);
  0xee07a9bf:   mov    -0x18(%ebp),%ebx
  0xee07a9c2:   shl    $0x2,%ecx
  0xee07a9c5:   mov    0x1c(%ebx,%ecx,4),%ebx
  0xee07a9c9:   shr    $0x18,%ebx
  0xee07a9cc:   and    $0xff,%ebx
  0xee07a9d2:   mov    $0xd9,%ecx                   ;;  199:       __ movl(bc_reg, bc);
  0xee07a9d7:   cmp    $0x0,%ebx                    ;;  200:       __ cmpl(temp_reg, (int) 0);
  0xee07a9da:   je     0xee07aa0a                   ;;  201:       __ jcc(Assembler::zero, L_patch_done);  // don't patch
  0xee07a9e0:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07a9e3:   cmp    $0xb5,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07a9e9:   je     0xee07aa08                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07a9ef:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07a9f1:   je     0xee07aa08                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07a9f7:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07a9fc:   call   0xee07aa01
  0xee07aa01:   pusha  
  0xee07aa02:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07aa07:   hlt    
  0xee07aa08:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07aa0a:   jmp    0xee07abe2                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 3156:     __ jmp(Done);
  0xee07aa0f:   cmp    $0x2,%eax                    ;; 3159:   __ bind(notInt);
                                                    ;; 3160:   __ cmpl(flags, ctos);
  0xee07aa12:   jne    0xee07aa74                   ;; 3161:   __ jcc(Assembler::notEqual, notChar);
  0xee07aa18:   pop    %eax                         ;; 3165:     __ pop(ctos);
  0xee07aa19:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07aa1a:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07aa1c:   mov    %ax,(%ecx,%ebx,1)            ;; 2795:   __ verify_oop(r);
                                                    ;; 3167:     __ access_store_at(T_CHAR, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07aa20:   movzwl 0x1(%esi),%ecx               ;;  198:       __ get_cache_and_index_and_bytecode_at_bcp(temp_reg, bc_reg, temp_reg, byte_no, 1);
  0xee07aa24:   mov    -0x18(%ebp),%ebx
  0xee07aa27:   shl    $0x2,%ecx
  0xee07aa2a:   mov    0x1c(%ebx,%ecx,4),%ebx
  0xee07aa2e:   shr    $0x18,%ebx
  0xee07aa31:   and    $0xff,%ebx
  0xee07aa37:   mov    $0xd6,%ecx                   ;;  199:       __ movl(bc_reg, bc);
  0xee07aa3c:   cmp    $0x0,%ebx                    ;;  200:       __ cmpl(temp_reg, (int) 0);
  0xee07aa3f:   je     0xee07aa6f                   ;;  201:       __ jcc(Assembler::zero, L_patch_done);  // don't patch
  0xee07aa45:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07aa48:   cmp    $0xb5,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07aa4e:   je     0xee07aa6d                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07aa54:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07aa56:   je     0xee07aa6d                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07aa5c:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07aa61:   call   0xee07aa66
  0xee07aa66:   pusha  
  0xee07aa67:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07aa6c:   hlt    
  0xee07aa6d:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07aa6f:   jmp    0xee07abe2                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 3171:     __ jmp(Done);
  0xee07aa74:   cmp    $0x3,%eax                    ;; 3174:   __ bind(notChar);
                                                    ;; 3175:   __ cmpl(flags, stos);
  0xee07aa77:   jne    0xee07aad9                   ;; 3176:   __ jcc(Assembler::notEqual, notShort);
  0xee07aa7d:   pop    %eax                         ;; 3180:     __ pop(stos);
  0xee07aa7e:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07aa7f:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07aa81:   mov    %ax,(%ecx,%ebx,1)            ;; 2795:   __ verify_oop(r);
                                                    ;; 3182:     __ access_store_at(T_SHORT, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07aa85:   movzwl 0x1(%esi),%ecx               ;;  198:       __ get_cache_and_index_and_bytecode_at_bcp(temp_reg, bc_reg, temp_reg, byte_no, 1);
  0xee07aa89:   mov    -0x18(%ebp),%ebx
  0xee07aa8c:   shl    $0x2,%ecx
  0xee07aa8f:   mov    0x1c(%ebx,%ecx,4),%ebx
  0xee07aa93:   shr    $0x18,%ebx
  0xee07aa96:   and    $0xff,%ebx
  0xee07aa9c:   mov    $0xdb,%ecx                   ;;  199:       __ movl(bc_reg, bc);
  0xee07aaa1:   cmp    $0x0,%ebx                    ;;  200:       __ cmpl(temp_reg, (int) 0);
  0xee07aaa4:   je     0xee07aad4                   ;;  201:       __ jcc(Assembler::zero, L_patch_done);  // don't patch
  0xee07aaaa:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07aaad:   cmp    $0xb5,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07aab3:   je     0xee07aad2                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07aab9:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07aabb:   je     0xee07aad2                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07aac1:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07aac6:   call   0xee07aacb
  0xee07aacb:   pusha  
  0xee07aacc:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07aad1:   hlt    
  0xee07aad2:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07aad4:   jmp    0xee07abe2                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 3186:     __ jmp(Done);
  0xee07aad9:   cmp    $0x5,%eax                    ;; 3189:   __ bind(notShort);
                                                    ;; 3190:   __ cmpl(flags, ltos);
  0xee07aadc:   jne    0xee07aaf7                   ;; 3191:   __ jcc(Assembler::notEqual, notLong);
  0xee07aae2:   pop    %eax                         ;; 3195:     __ pop(ltos);
  0xee07aae3:   pop    %edx
  0xee07aae4:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07aae5:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07aae7:   push   %edx                         ;; 2795:   __ verify_oop(r);
                                                    ;; 3198:     __ access_store_at(T_LONG, IN_HEAP | MO_RELAXED, field, noreg /* ltos*/, noreg, noreg, noreg);
  0xee07aae8:   push   %eax
  0xee07aae9:   fildll (%esp)
  0xee07aaec:   fistpll (%ecx,%ebx,1)
  0xee07aaef:   add    $0x8,%esp
  0xee07aaf2:   jmp    0xee07abe2                   ;; 3204:     __ jmp(Done);
  0xee07aaf7:   cmp    $0x6,%eax                    ;; 3207:   __ bind(notLong);
                                                    ;; 3208:   __ cmpl(flags, ftos);
  0xee07aafa:   jne    0xee07ab64                   ;; 3209:   __ jcc(Assembler::notEqual, notFloat);
  0xee07ab00:   vmovss (%esp),%xmm0                 ;; 3213:     __ pop(ftos);
  0xee07ab05:   add    $0x4,%esp
  0xee07ab08:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07ab09:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07ab0b:   vmovss %xmm0,(%ecx,%ebx,1)          ;; 2795:   __ verify_oop(r);
                                                    ;; 3215:     __ access_store_at(T_FLOAT, IN_HEAP, field, noreg /* ftos */, noreg, noreg, noreg);
  0xee07ab10:   movzwl 0x1(%esi),%ecx               ;;  198:       __ get_cache_and_index_and_bytecode_at_bcp(temp_reg, bc_reg, temp_reg, byte_no, 1);
  0xee07ab14:   mov    -0x18(%ebp),%ebx
  0xee07ab17:   shl    $0x2,%ecx
  0xee07ab1a:   mov    0x1c(%ebx,%ecx,4),%ebx
  0xee07ab1e:   shr    $0x18,%ebx
  0xee07ab21:   and    $0xff,%ebx
  0xee07ab27:   mov    $0xd8,%ecx                   ;;  199:       __ movl(bc_reg, bc);
  0xee07ab2c:   cmp    $0x0,%ebx                    ;;  200:       __ cmpl(temp_reg, (int) 0);
  0xee07ab2f:   je     0xee07ab5f                   ;;  201:       __ jcc(Assembler::zero, L_patch_done);  // don't patch
  0xee07ab35:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07ab38:   cmp    $0xb5,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07ab3e:   je     0xee07ab5d                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07ab44:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07ab46:   je     0xee07ab5d                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07ab4c:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07ab51:   call   0xee07ab56
  0xee07ab56:   pusha  
  0xee07ab57:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07ab5c:   hlt    
  0xee07ab5d:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07ab5f:   jmp    0xee07abe2                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 3219:     __ jmp(Done);
  0xee07ab64:   cmp    $0x7,%eax                    ;; 3222:   __ bind(notFloat);
                                                    ;; 3225:   __ cmpl(flags, dtos);
  0xee07ab67:   jne    0xee07abd1                   ;; 3226:   __ jcc(Assembler::notEqual, notDouble);
  0xee07ab6d:   vmovsd (%esp),%xmm0                 ;; 3231:     __ pop(dtos);
  0xee07ab72:   add    $0x8,%esp
  0xee07ab75:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07ab76:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07ab78:   vmovsd %xmm0,(%ecx,%ebx,1)          ;; 2795:   __ verify_oop(r);
                                                    ;; 3234:     __ access_store_at(T_DOUBLE, IN_HEAP | MO_RELAXED, field, noreg /* dtos */, noreg, noreg, noreg);
  0xee07ab7d:   movzwl 0x1(%esi),%ecx               ;;  198:       __ get_cache_and_index_and_bytecode_at_bcp(temp_reg, bc_reg, temp_reg, byte_no, 1);
  0xee07ab81:   mov    -0x18(%ebp),%ebx
  0xee07ab84:   shl    $0x2,%ecx
  0xee07ab87:   mov    0x1c(%ebx,%ecx,4),%ebx
  0xee07ab8b:   shr    $0x18,%ebx
  0xee07ab8e:   and    $0xff,%ebx
  0xee07ab94:   mov    $0xd7,%ecx                   ;;  199:       __ movl(bc_reg, bc);
  0xee07ab99:   cmp    $0x0,%ebx                    ;;  200:       __ cmpl(temp_reg, (int) 0);
  0xee07ab9c:   je     0xee07abcc                   ;;  201:       __ jcc(Assembler::zero, L_patch_done);  // don't patch
  0xee07aba2:   movzbl (%esi),%ebx                  ;;  231:   __ load_unsigned_byte(temp_reg, at_bcp(0));
  0xee07aba5:   cmp    $0xb5,%ebx                   ;;  232:   __ cmpl(temp_reg, (int) Bytecodes::java_code(bc));
  0xee07abab:   je     0xee07abca                   ;;  233:   __ jcc(Assembler::equal, L_okay);
  0xee07abb1:   cmp    %ecx,%ebx                    ;;  234:   __ cmpl(temp_reg, bc_reg);
  0xee07abb3:   je     0xee07abca                   ;;  235:   __ jcc(Assembler::equal, L_okay);
  0xee07abb9:   push   $0xf7924f10                  ;;  236:   __ stop("patching the wrong bytecode");
  0xee07abbe:   call   0xee07abc3
  0xee07abc3:   pusha  
  0xee07abc4:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07abc9:   hlt    
  0xee07abca:   mov    %cl,(%esi)                   ;;  237:   __ bind(L_okay);
                                                    ;;  241:   __ movb(at_bcp(0), bc_reg);
  0xee07abcc:   jmp    0xee07abe2                   ;;  242:   __ bind(L_patch_done);
                                                    ;; 3241:   __ jmp(Done);
  0xee07abd1:   push   $0xf7924fde                  ;; 3243:   __ bind(notDouble);
                                                    ;; 3244:   __ stop("Bad state");
  0xee07abd6:   call   0xee07abdb
  0xee07abdb:   pusha  
  0xee07abdc:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07abe1:   hlt    
  0xee07abe2:   movzbl 0x3(%esi),%ebx               ;; 3247:   __ bind(Done);
                                                    ;; 3080:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07abe6:   add    $0x3,%esi
  0xee07abe9:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
invokevirtual  182 invokevirtual  [0xee07ac20, 0xee07aff8]  984 bytes

--------------------------------------------------------------------------------
  0xee07ac20:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07ac23:   vmovss %xmm0,(%esp)
  0xee07ac28:   jmp    0xee07ac39                   ;; 1751:       __ jmpb(L);
  0xee07ac2a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07ac2d:   vmovsd %xmm0,(%esp)
  0xee07ac32:   jmp    0xee07ac39                   ;; 1754:       __ jmpb(L);
  0xee07ac34:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07ac35:   push   %eax
  0xee07ac36:   jmp    0xee07ac39                   ;; 1765:       __ jmpb(L);
  0xee07ac38:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07ac39:   mov    %esi,-0x20(%ebp)             ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3568:   __ save_bcp();
  0xee07ac3c:   movzwl 0x1(%esi),%edx               ;; 2666:   __ get_cache_and_index_and_bytecode_at_bcp(cache, index, temp, byte_no, 1, index_size);
  0xee07ac40:   mov    -0x18(%ebp),%ecx
  0xee07ac43:   shl    $0x2,%edx
  0xee07ac46:   mov    0x1c(%ecx,%edx,4),%ebx
  0xee07ac4a:   shr    $0x18,%ebx
  0xee07ac4d:   and    $0xff,%ebx
  0xee07ac53:   cmp    $0xb6,%ebx                   ;; 2667:   __ cmpl(temp, code);  // have we resolved this bytecode?
  0xee07ac59:   je     0xee07ad1a                   ;; 2668:   __ jcc(Assembler::equal, resolved);
  0xee07ac5f:   mov    $0xb6,%ebx                   ;; 2672:   __ bind(L_clinit_barrier_slow);
                                                    ;; 2674:   __ movl(temp, code);
  0xee07ac64:   call   0xee07ac6e                   ;; 2675:   __ call_VM(noreg, entry, temp);
  0xee07ac69:   jmp    0xee07ad10
  0xee07ac6e:   push   %ebx
  0xee07ac6f:   lea    0x8(%esp),%eax
  0xee07ac73:   mov    %esi,-0x20(%ebp)
  0xee07ac76:   cmpl   $0x0,-0x8(%ebp)
  0xee07ac7a:   je     0xee07ac91
  0xee07ac80:   push   $0xf78569d8
  0xee07ac85:   call   0xee07ac8a
  0xee07ac8a:   pusha  
  0xee07ac8b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07ac90:   hlt    
  0xee07ac91:   push   %eax
  0xee07ac92:   push   %edx
  0xee07ac93:   push   %ecx
  0xee07ac94:   call   0xf704a910 = Thread::current()
  0xee07ac99:   pop    %ecx
  0xee07ac9a:   pop    %edx
  0xee07ac9b:   mov    %eax,%edi
  0xee07ac9d:   pop    %eax
  0xee07ac9e:   push   %edi
  0xee07ac9f:   vzeroupper 
  0xee07aca2:   mov    %ebp,0x230(%edi)
  0xee07aca8:   mov    %eax,0x228(%edi)
  0xee07acae:   call   0xf6c166c0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0xee07acb3:   add    $0x8,%esp
  0xee07acb6:   push   %eax
  0xee07acb7:   push   %edx
  0xee07acb8:   push   %ecx
  0xee07acb9:   call   0xf704a910 = Thread::current()
  0xee07acbe:   pop    %ecx
  0xee07acbf:   pop    %edx
  0xee07acc0:   cmp    %eax,%edi
  0xee07acc2:   je     0xee07acd9
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07acc8:   push   $0xf78b5a48
  0xee07accd:   call   0xee07acd2
  0xee07acd2:   pusha  
  0xee07acd3:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07acd8:   hlt    
  0xee07acd9:   pop    %eax
  0xee07acda:   movl   $0x0,0x228(%edi)
  0xee07ace4:   movl   $0x0,0x230(%edi)
  0xee07acee:   movl   $0x0,0x22c(%edi)
  0xee07acf8:   vzeroupper 
  0xee07acfb:   cmpl   $0x0,0x4(%edi)
  0xee07acff:   jne    0xee05bbe0
  0xee07ad05:   mov    -0x20(%ebp),%esi
  0xee07ad08:   mov    -0x1c(%ebp),%edi
  0xee07ad0b:   lea    0x0(%ebp,%edi,4),%edi
  0xee07ad0f:   ret    
  0xee07ad10:   movzwl 0x1(%esi),%edx               ;; 2677:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee07ad14:   mov    -0x18(%ebp),%ecx
  0xee07ad17:   shl    $0x2,%edx
  0xee07ad1a:   mov    0x24(%ecx,%edx,4),%ebx       ;; 2679:   __ bind(resolved);
                                                    ;; 2748:   __ load_resolved_method_at_index(byte_no, method, cache, index);
  0xee07ad1e:   mov    0x28(%ecx,%edx,4),%edx       ;; 2754:   __ movl(flags, Address(cache, index, Address::times_ptr, flags_offset));
  0xee07ad22:   mov    %edx,%ecx                    ;; 3591:     __ movl(recv, flags);
  0xee07ad24:   and    $0xff,%ecx                   ;; 3592:     __ andl(recv, ConstantPoolCacheEntry::parameter_size_mask);
  0xee07ad2a:   mov    -0x4(%esp,%ecx,4),%ecx       ;; 3595:     Address recv_addr = __ argument_address(recv, no_return_pc_pushed_yet + receiver_is_at_end);
                                                    ;; 3596:     __ movptr(recv, recv_addr);
  0xee07ad2e:   mov    %edx,%esi                    ;; 3597:     __ verify_oop(recv);
                                                    ;; 3601:     __ movl(rbcp, flags);
  0xee07ad30:   shr    $0x1c,%edx                   ;; 3605:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee07ad33:   mov    -0x833c620(,%edx,4),%edx     ;; 3616:     __ movptr(flags, ArrayAddress(table, Address(noreg, flags, Address::times_ptr)));
  0xee07ad3a:   push   %edx                         ;; 3621:   __ push(flags);
  0xee07ad3b:   mov    %esi,%edx                    ;; 3626:     __ movl(flags, rbcp);
  0xee07ad3d:   mov    -0x20(%ebp),%esi             ;; 3627:     __ restore_bcp();
  0xee07ad40:   mov    %edx,%eax                    ;; 3641:   __ movl(rax, flags);
  0xee07ad42:   and    $0x100000,%eax               ;; 3642:   __ andl(rax, (1 << ConstantPoolCacheEntry::is_vfinal_shift));
  0xee07ad47:   je     0xee07ae5c                   ;; 3643:   __ jcc(Assembler::zero, notFinal);
  0xee07ad4d:   cmp    (%ecx),%eax                  ;; 3653:   __ null_check(recv);
  0xee07ad4f:   mov    -0x14(%ebp),%eax             ;; 3656:   __ profile_final_call(rax);
  0xee07ad52:   test   %eax,%eax
  0xee07ad54:   je     0xee07ad68
  0xee07ad5a:   addl   $0x1,0x8(%eax)
  0xee07ad5e:   sbbl   $0x0,0x8(%eax)
  0xee07ad62:   add    $0x1c,%eax
  0xee07ad65:   mov    %eax,-0x14(%ebp)
  0xee07ad68:   mov    -0x14(%ebp),%eax             ;; 3657:   __ profile_arguments_type(rax, method, rbcp, true);
  0xee07ad6b:   test   %eax,%eax
  0xee07ad6d:   je     0xee07ae52
  0xee07ad73:   cmpb   $0xb,-0x1c(%eax)
  0xee07ad77:   jne    0xee07ae52
  0xee07ad7d:   add    $0x4,%eax
  0xee07ad80:   mov    -0x4(%eax),%esi
  0xee07ad83:   sub    $0x0,%esi
  0xee07ad86:   cmp    $0x2,%esi
  0xee07ad89:   jl     0xee07ae4a
  0xee07ad8f:   mov    0x8(%ebx),%esi
  0xee07ad92:   movzwl 0x24(%esi),%esi
  0xee07ad96:   sub    (%eax),%esi
  0xee07ad98:   sub    $0x1,%esi
  0xee07ad9b:   mov    0x4(%esp,%esi,4),%esi
  0xee07ad9f:   test   %esi,%esi
  0xee07ada1:   jne    0xee07ada9
  0xee07ada3:   orl    $0x1,0x4(%eax)
  0xee07ada7:   jmp    0xee07addf
  0xee07ada9:   mov    0x4(%esi),%esi
  0xee07adac:   xor    0x4(%eax),%esi
  0xee07adaf:   test   $0xfffffffc,%esi
  0xee07adb5:   je     0xee07addf
  0xee07adb7:   test   $0x2,%esi
  0xee07adbd:   jne    0xee07addf
  0xee07adbf:   cmpl   $0x0,0x4(%eax)
  0xee07adc3:   je     0xee07addc
  0xee07adc5:   cmpl   $0x1,0x4(%eax)
  0xee07adc9:   je     0xee07addc
  0xee07adcb:   xor    0x4(%eax),%esi
  0xee07adce:   test   $0xfffffffc,%esi
  0xee07add4:   je     0xee07addf
  0xee07add6:   orl    $0x2,0x4(%eax)
  0xee07adda:   jmp    0xee07addf
  0xee07addc:   mov    %esi,0x4(%eax)
  0xee07addf:   add    $0x8,%eax
  0xee07ade2:   mov    -0xc(%eax),%esi
  0xee07ade5:   sub    $0x2,%esi
  0xee07ade8:   cmp    $0x2,%esi
  0xee07adeb:   jl     0xee07ae4a
  0xee07adf1:   mov    0x8(%ebx),%esi
  0xee07adf4:   movzwl 0x24(%esi),%esi
  0xee07adf8:   sub    (%eax),%esi
  0xee07adfa:   sub    $0x1,%esi
  0xee07adfd:   mov    0x4(%esp,%esi,4),%esi
  0xee07ae01:   test   %esi,%esi
  0xee07ae03:   jne    0xee07ae0b
  0xee07ae05:   orl    $0x1,0x4(%eax)
  0xee07ae09:   jmp    0xee07ae41
  0xee07ae0b:   mov    0x4(%esi),%esi
  0xee07ae0e:   xor    0x4(%eax),%esi
  0xee07ae11:   test   $0xfffffffc,%esi
  0xee07ae17:   je     0xee07ae41
  0xee07ae19:   test   $0x2,%esi
  0xee07ae1f:   jne    0xee07ae41
  0xee07ae21:   cmpl   $0x0,0x4(%eax)
  0xee07ae25:   je     0xee07ae3e
  0xee07ae27:   cmpl   $0x1,0x4(%eax)
  0xee07ae2b:   je     0xee07ae3e
  0xee07ae2d:   xor    0x4(%eax),%esi
  0xee07ae30:   test   $0xfffffffc,%esi
  0xee07ae36:   je     0xee07ae41
  0xee07ae38:   orl    $0x2,0x4(%eax)
  0xee07ae3c:   jmp    0xee07ae41
  0xee07ae3e:   mov    %esi,0x4(%eax)
  0xee07ae41:   add    $0x8,%eax
  0xee07ae44:   mov    -0x14(%eax),%esi
  0xee07ae47:   sub    $0x4,%esi
  0xee07ae4a:   shl    $0x2,%esi
  0xee07ae4d:   add    %esi,%eax
  0xee07ae4f:   mov    %eax,-0x14(%ebp)
  0xee07ae52:   lea    0x4(%esp),%esi               ;; 3659:   __ jump_from_interpreted(method, rax);
  0xee07ae56:   mov    %esi,-0x8(%ebp)
  0xee07ae59:   jmp    *0x40(%ebx)
  0xee07ae5c:   mov    0x4(%ecx),%eax               ;; 3661:   __ bind(notFinal);
                                                    ;; 3664:   __ load_klass_check_null(rax, recv, rscratch1);
  0xee07ae5f:   mov    -0x14(%ebp),%edi             ;; 3667:   __ profile_virtual_call(rax, rlocals, rdx);
  0xee07ae62:   test   %edi,%edi
  0xee07ae64:   je     0xee07aeea
  0xee07ae6a:   mov    0xc(%edi),%edx
  0xee07ae6d:   cmp    %eax,%edx
  0xee07ae6f:   jne    0xee07ae82
  0xee07ae75:   addl   $0x1,0x10(%edi)
  0xee07ae79:   sbbl   $0x0,0x10(%edi)
  0xee07ae7d:   jmp    0xee07aee4
  0xee07ae82:   test   %edx,%edx
  0xee07ae84:   je     0xee07aec3
  0xee07ae8a:   mov    0x14(%edi),%edx
  0xee07ae8d:   cmp    %eax,%edx
  0xee07ae8f:   jne    0xee07aea2
  0xee07ae95:   addl   $0x1,0x18(%edi)
  0xee07ae99:   sbbl   $0x0,0x18(%edi)
  0xee07ae9d:   jmp    0xee07aee4
  0xee07aea2:   test   %edx,%edx
  0xee07aea4:   je     0xee07aeb3
  0xee07aea6:   addl   $0x1,0x8(%edi)
  0xee07aeaa:   sbbl   $0x0,0x8(%edi)
  0xee07aeae:   jmp    0xee07aee4
  0xee07aeb3:   mov    %eax,0x14(%edi)
  0xee07aeb6:   mov    $0x1,%edx
  0xee07aebb:   mov    %edx,0x18(%edi)
  0xee07aebe:   jmp    0xee07aee4
  0xee07aec3:   cmp    0x14(%edi),%eax
  0xee07aec6:   jne    0xee07aed9
  0xee07aecc:   addl   $0x1,0x18(%edi)
  0xee07aed0:   sbbl   $0x0,0x18(%edi)
  0xee07aed4:   jmp    0xee07aee4
  0xee07aed9:   mov    %eax,0xc(%edi)
  0xee07aedc:   mov    $0x1,%edx
  0xee07aee1:   mov    %edx,0x10(%edi)
  0xee07aee4:   add    $0x1c,%edi
  0xee07aee7:   mov    %edi,-0x14(%ebp)
  0xee07aeea:   mov    0x10c(%eax,%ebx,4),%ebx      ;; 3669:   __ lookup_virtual_method(rax, index, method);
  0xee07aef1:   mov    -0x14(%ebp),%edx             ;; 3671:   __ profile_arguments_type(rdx, method, rbcp, true);
  0xee07aef4:   test   %edx,%edx
  0xee07aef6:   je     0xee07afdb
  0xee07aefc:   cmpb   $0xb,-0x1c(%edx)
  0xee07af00:   jne    0xee07afdb
  0xee07af06:   add    $0x4,%edx
  0xee07af09:   mov    -0x4(%edx),%esi
  0xee07af0c:   sub    $0x0,%esi
  0xee07af0f:   cmp    $0x2,%esi
  0xee07af12:   jl     0xee07afd3
  0xee07af18:   mov    0x8(%ebx),%esi
  0xee07af1b:   movzwl 0x24(%esi),%esi
  0xee07af1f:   sub    (%edx),%esi
  0xee07af21:   sub    $0x1,%esi
  0xee07af24:   mov    0x4(%esp,%esi,4),%esi
  0xee07af28:   test   %esi,%esi
  0xee07af2a:   jne    0xee07af32
  0xee07af2c:   orl    $0x1,0x4(%edx)
  0xee07af30:   jmp    0xee07af68
  0xee07af32:   mov    0x4(%esi),%esi
  0xee07af35:   xor    0x4(%edx),%esi
  0xee07af38:   test   $0xfffffffc,%esi
  0xee07af3e:   je     0xee07af68
  0xee07af40:   test   $0x2,%esi
  0xee07af46:   jne    0xee07af68
  0xee07af48:   cmpl   $0x0,0x4(%edx)
  0xee07af4c:   je     0xee07af65
  0xee07af4e:   cmpl   $0x1,0x4(%edx)
  0xee07af52:   je     0xee07af65
  0xee07af54:   xor    0x4(%edx),%esi
  0xee07af57:   test   $0xfffffffc,%esi
  0xee07af5d:   je     0xee07af68
  0xee07af5f:   orl    $0x2,0x4(%edx)
  0xee07af63:   jmp    0xee07af68
  0xee07af65:   mov    %esi,0x4(%edx)
  0xee07af68:   add    $0x8,%edx
  0xee07af6b:   mov    -0xc(%edx),%esi
  0xee07af6e:   sub    $0x2,%esi
  0xee07af71:   cmp    $0x2,%esi
  0xee07af74:   jl     0xee07afd3
  0xee07af7a:   mov    0x8(%ebx),%esi
  0xee07af7d:   movzwl 0x24(%esi),%esi
  0xee07af81:   sub    (%edx),%esi
  0xee07af83:   sub    $0x1,%esi
  0xee07af86:   mov    0x4(%esp,%esi,4),%esi
  0xee07af8a:   test   %esi,%esi
  0xee07af8c:   jne    0xee07af94
  0xee07af8e:   orl    $0x1,0x4(%edx)
  0xee07af92:   jmp    0xee07afca
  0xee07af94:   mov    0x4(%esi),%esi
  0xee07af97:   xor    0x4(%edx),%esi
  0xee07af9a:   test   $0xfffffffc,%esi
  0xee07afa0:   je     0xee07afca
  0xee07afa2:   test   $0x2,%esi
  0xee07afa8:   jne    0xee07afca
  0xee07afaa:   cmpl   $0x0,0x4(%edx)
  0xee07afae:   je     0xee07afc7
  0xee07afb0:   cmpl   $0x1,0x4(%edx)
  0xee07afb4:   je     0xee07afc7
  0xee07afb6:   xor    0x4(%edx),%esi
  0xee07afb9:   test   $0xfffffffc,%esi
  0xee07afbf:   je     0xee07afca
  0xee07afc1:   orl    $0x2,0x4(%edx)
  0xee07afc5:   jmp    0xee07afca
  0xee07afc7:   mov    %esi,0x4(%edx)
  0xee07afca:   add    $0x8,%edx
  0xee07afcd:   mov    -0x14(%edx),%esi
  0xee07afd0:   sub    $0x4,%esi
  0xee07afd3:   shl    $0x2,%esi
  0xee07afd6:   add    %esi,%edx
  0xee07afd8:   mov    %edx,-0x14(%ebp)
  0xee07afdb:   lea    0x4(%esp),%esi               ;; 3672:   __ jump_from_interpreted(method, rdx);
  0xee07afdf:   mov    %esi,-0x8(%ebp)
  0xee07afe2:   jmp    *0x40(%ebx)
  0xee07afe5:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee07afea:   call   0xee07afef
  0xee07afef:   pusha  
  0xee07aff0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07aff5:   hlt    
  0xee07aff6:   nop
  0xee07aff7:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
invokespecial  183 invokespecial  [0xee07b020, 0xee07b25c]  572 bytes

--------------------------------------------------------------------------------
  0xee07b020:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07b023:   vmovss %xmm0,(%esp)
  0xee07b028:   jmp    0xee07b039                   ;; 1751:       __ jmpb(L);
  0xee07b02a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07b02d:   vmovsd %xmm0,(%esp)
  0xee07b032:   jmp    0xee07b039                   ;; 1754:       __ jmpb(L);
  0xee07b034:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07b035:   push   %eax
  0xee07b036:   jmp    0xee07b039                   ;; 1765:       __ jmpb(L);
  0xee07b038:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07b039:   mov    %esi,-0x20(%ebp)             ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3568:   __ save_bcp();
  0xee07b03c:   movzwl 0x1(%esi),%edx               ;; 2666:   __ get_cache_and_index_and_bytecode_at_bcp(cache, index, temp, byte_no, 1, index_size);
  0xee07b040:   mov    -0x18(%ebp),%ecx
  0xee07b043:   shl    $0x2,%edx
  0xee07b046:   mov    0x1c(%ecx,%edx,4),%ebx
  0xee07b04a:   shr    $0x10,%ebx
  0xee07b04d:   and    $0xff,%ebx
  0xee07b053:   cmp    $0xb7,%ebx                   ;; 2667:   __ cmpl(temp, code);  // have we resolved this bytecode?
  0xee07b059:   je     0xee07b11a                   ;; 2668:   __ jcc(Assembler::equal, resolved);
  0xee07b05f:   mov    $0xb7,%ebx                   ;; 2672:   __ bind(L_clinit_barrier_slow);
                                                    ;; 2674:   __ movl(temp, code);
  0xee07b064:   call   0xee07b06e                   ;; 2675:   __ call_VM(noreg, entry, temp);
  0xee07b069:   jmp    0xee07b110
  0xee07b06e:   push   %ebx
  0xee07b06f:   lea    0x8(%esp),%eax
  0xee07b073:   mov    %esi,-0x20(%ebp)
  0xee07b076:   cmpl   $0x0,-0x8(%ebp)
  0xee07b07a:   je     0xee07b091
  0xee07b080:   push   $0xf78569d8
  0xee07b085:   call   0xee07b08a
  0xee07b08a:   pusha  
  0xee07b08b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07b090:   hlt    
  0xee07b091:   push   %eax
  0xee07b092:   push   %edx
  0xee07b093:   push   %ecx
  0xee07b094:   call   0xf704a910 = Thread::current()
  0xee07b099:   pop    %ecx
  0xee07b09a:   pop    %edx
  0xee07b09b:   mov    %eax,%edi
  0xee07b09d:   pop    %eax
  0xee07b09e:   push   %edi
  0xee07b09f:   vzeroupper 
  0xee07b0a2:   mov    %ebp,0x230(%edi)
  0xee07b0a8:   mov    %eax,0x228(%edi)
  0xee07b0ae:   call   0xf6c166c0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0xee07b0b3:   add    $0x8,%esp
  0xee07b0b6:   push   %eax
  0xee07b0b7:   push   %edx
  0xee07b0b8:   push   %ecx
  0xee07b0b9:   call   0xf704a910 = Thread::current()
  0xee07b0be:   pop    %ecx
  0xee07b0bf:   pop    %edx
  0xee07b0c0:   cmp    %eax,%edi
  0xee07b0c2:   je     0xee07b0d9
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07b0c8:   push   $0xf78b5a48
  0xee07b0cd:   call   0xee07b0d2
  0xee07b0d2:   pusha  
  0xee07b0d3:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07b0d8:   hlt    
  0xee07b0d9:   pop    %eax
  0xee07b0da:   movl   $0x0,0x228(%edi)
  0xee07b0e4:   movl   $0x0,0x230(%edi)
  0xee07b0ee:   movl   $0x0,0x22c(%edi)
  0xee07b0f8:   vzeroupper 
  0xee07b0fb:   cmpl   $0x0,0x4(%edi)
  0xee07b0ff:   jne    0xee05bbe0
  0xee07b105:   mov    -0x20(%ebp),%esi
  0xee07b108:   mov    -0x1c(%ebp),%edi
  0xee07b10b:   lea    0x0(%ebp,%edi,4),%edi
  0xee07b10f:   ret    
  0xee07b110:   movzwl 0x1(%esi),%edx               ;; 2677:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee07b114:   mov    -0x18(%ebp),%ecx
  0xee07b117:   shl    $0x2,%edx
  0xee07b11a:   mov    0x20(%ecx,%edx,4),%ebx       ;; 2679:   __ bind(resolved);
                                                    ;; 2748:   __ load_resolved_method_at_index(byte_no, method, cache, index);
  0xee07b11e:   mov    0x28(%ecx,%edx,4),%edx       ;; 2754:   __ movl(flags, Address(cache, index, Address::times_ptr, flags_offset));
  0xee07b122:   mov    %edx,%ecx                    ;; 3591:     __ movl(recv, flags);
  0xee07b124:   and    $0xff,%ecx                   ;; 3592:     __ andl(recv, ConstantPoolCacheEntry::parameter_size_mask);
  0xee07b12a:   mov    -0x4(%esp,%ecx,4),%ecx       ;; 3595:     Address recv_addr = __ argument_address(recv, no_return_pc_pushed_yet + receiver_is_at_end);
                                                    ;; 3596:     __ movptr(recv, recv_addr);
  0xee07b12e:   shr    $0x1c,%edx                   ;; 3597:     __ verify_oop(recv);
                                                    ;; 3605:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee07b131:   mov    -0x833c620(,%edx,4),%edx     ;; 3616:     __ movptr(flags, ArrayAddress(table, Address(noreg, flags, Address::times_ptr)));
  0xee07b138:   push   %edx                         ;; 3621:   __ push(flags);
  0xee07b139:   cmp    (%ecx),%eax                  ;; 3695:   __ verify_oop(rcx);
                                                    ;; 3696:   __ null_check(rcx);
  0xee07b13b:   mov    -0x14(%ebp),%eax             ;; 3698:   __ profile_call(rax);
  0xee07b13e:   test   %eax,%eax
  0xee07b140:   je     0xee07b154
  0xee07b146:   addl   $0x1,0x8(%eax)
  0xee07b14a:   sbbl   $0x0,0x8(%eax)
  0xee07b14e:   add    $0xc,%eax
  0xee07b151:   mov    %eax,-0x14(%ebp)
  0xee07b154:   mov    -0x14(%ebp),%eax             ;; 3699:   __ profile_arguments_type(rax, rbx, rbcp, false);
  0xee07b157:   test   %eax,%eax
  0xee07b159:   je     0xee07b23e
  0xee07b15f:   cmpb   $0xa,-0xc(%eax)
  0xee07b163:   jne    0xee07b23e
  0xee07b169:   add    $0x4,%eax
  0xee07b16c:   mov    -0x4(%eax),%esi
  0xee07b16f:   sub    $0x0,%esi
  0xee07b172:   cmp    $0x2,%esi
  0xee07b175:   jl     0xee07b236
  0xee07b17b:   mov    0x8(%ebx),%esi
  0xee07b17e:   movzwl 0x24(%esi),%esi
  0xee07b182:   sub    (%eax),%esi
  0xee07b184:   sub    $0x1,%esi
  0xee07b187:   mov    0x4(%esp,%esi,4),%esi
  0xee07b18b:   test   %esi,%esi
  0xee07b18d:   jne    0xee07b195
  0xee07b18f:   orl    $0x1,0x4(%eax)
  0xee07b193:   jmp    0xee07b1cb
  0xee07b195:   mov    0x4(%esi),%esi
  0xee07b198:   xor    0x4(%eax),%esi
  0xee07b19b:   test   $0xfffffffc,%esi
  0xee07b1a1:   je     0xee07b1cb
  0xee07b1a3:   test   $0x2,%esi
  0xee07b1a9:   jne    0xee07b1cb
  0xee07b1ab:   cmpl   $0x0,0x4(%eax)
  0xee07b1af:   je     0xee07b1c8
  0xee07b1b1:   cmpl   $0x1,0x4(%eax)
  0xee07b1b5:   je     0xee07b1c8
  0xee07b1b7:   xor    0x4(%eax),%esi
  0xee07b1ba:   test   $0xfffffffc,%esi
  0xee07b1c0:   je     0xee07b1cb
  0xee07b1c2:   orl    $0x2,0x4(%eax)
  0xee07b1c6:   jmp    0xee07b1cb
  0xee07b1c8:   mov    %esi,0x4(%eax)
  0xee07b1cb:   add    $0x8,%eax
  0xee07b1ce:   mov    -0xc(%eax),%esi
  0xee07b1d1:   sub    $0x2,%esi
  0xee07b1d4:   cmp    $0x2,%esi
  0xee07b1d7:   jl     0xee07b236
  0xee07b1dd:   mov    0x8(%ebx),%esi
  0xee07b1e0:   movzwl 0x24(%esi),%esi
  0xee07b1e4:   sub    (%eax),%esi
  0xee07b1e6:   sub    $0x1,%esi
  0xee07b1e9:   mov    0x4(%esp,%esi,4),%esi
  0xee07b1ed:   test   %esi,%esi
  0xee07b1ef:   jne    0xee07b1f7
  0xee07b1f1:   orl    $0x1,0x4(%eax)
  0xee07b1f5:   jmp    0xee07b22d
  0xee07b1f7:   mov    0x4(%esi),%esi
  0xee07b1fa:   xor    0x4(%eax),%esi
  0xee07b1fd:   test   $0xfffffffc,%esi
  0xee07b203:   je     0xee07b22d
  0xee07b205:   test   $0x2,%esi
  0xee07b20b:   jne    0xee07b22d
  0xee07b20d:   cmpl   $0x0,0x4(%eax)
  0xee07b211:   je     0xee07b22a
  0xee07b213:   cmpl   $0x1,0x4(%eax)
  0xee07b217:   je     0xee07b22a
  0xee07b219:   xor    0x4(%eax),%esi
  0xee07b21c:   test   $0xfffffffc,%esi
  0xee07b222:   je     0xee07b22d
  0xee07b224:   orl    $0x2,0x4(%eax)
  0xee07b228:   jmp    0xee07b22d
  0xee07b22a:   mov    %esi,0x4(%eax)
  0xee07b22d:   add    $0x8,%eax
  0xee07b230:   mov    -0x14(%eax),%esi
  0xee07b233:   sub    $0x4,%esi
  0xee07b236:   shl    $0x2,%esi
  0xee07b239:   add    %esi,%eax
  0xee07b23b:   mov    %eax,-0x14(%ebp)
  0xee07b23e:   lea    0x4(%esp),%esi               ;; 3700:   __ jump_from_interpreted(rbx, rax);
  0xee07b242:   mov    %esi,-0x8(%ebp)
  0xee07b245:   jmp    *0x40(%ebx)
  0xee07b248:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee07b24d:   call   0xee07b252
  0xee07b252:   pusha  
  0xee07b253:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07b258:   hlt    
  0xee07b259:   nop
  0xee07b25a:   nop
  0xee07b25b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
invokestatic  184 invokestatic  [0xee07b280, 0xee07b4ac]  556 bytes

--------------------------------------------------------------------------------
  0xee07b280:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07b283:   vmovss %xmm0,(%esp)
  0xee07b288:   jmp    0xee07b299                   ;; 1751:       __ jmpb(L);
  0xee07b28a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07b28d:   vmovsd %xmm0,(%esp)
  0xee07b292:   jmp    0xee07b299                   ;; 1754:       __ jmpb(L);
  0xee07b294:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07b295:   push   %eax
  0xee07b296:   jmp    0xee07b299                   ;; 1765:       __ jmpb(L);
  0xee07b298:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07b299:   mov    %esi,-0x20(%ebp)             ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3568:   __ save_bcp();
  0xee07b29c:   movzwl 0x1(%esi),%edx               ;; 2666:   __ get_cache_and_index_and_bytecode_at_bcp(cache, index, temp, byte_no, 1, index_size);
  0xee07b2a0:   mov    -0x18(%ebp),%ecx
  0xee07b2a3:   shl    $0x2,%edx
  0xee07b2a6:   mov    0x1c(%ecx,%edx,4),%ebx
  0xee07b2aa:   shr    $0x10,%ebx
  0xee07b2ad:   and    $0xff,%ebx
  0xee07b2b3:   cmp    $0xb8,%ebx                   ;; 2667:   __ cmpl(temp, code);  // have we resolved this bytecode?
  0xee07b2b9:   je     0xee07b37a                   ;; 2668:   __ jcc(Assembler::equal, resolved);
  0xee07b2bf:   mov    $0xb8,%ebx                   ;; 2672:   __ bind(L_clinit_barrier_slow);
                                                    ;; 2674:   __ movl(temp, code);
  0xee07b2c4:   call   0xee07b2ce                   ;; 2675:   __ call_VM(noreg, entry, temp);
  0xee07b2c9:   jmp    0xee07b370
  0xee07b2ce:   push   %ebx
  0xee07b2cf:   lea    0x8(%esp),%eax
  0xee07b2d3:   mov    %esi,-0x20(%ebp)
  0xee07b2d6:   cmpl   $0x0,-0x8(%ebp)
  0xee07b2da:   je     0xee07b2f1
  0xee07b2e0:   push   $0xf78569d8
  0xee07b2e5:   call   0xee07b2ea
  0xee07b2ea:   pusha  
  0xee07b2eb:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07b2f0:   hlt    
  0xee07b2f1:   push   %eax
  0xee07b2f2:   push   %edx
  0xee07b2f3:   push   %ecx
  0xee07b2f4:   call   0xf704a910 = Thread::current()
  0xee07b2f9:   pop    %ecx
  0xee07b2fa:   pop    %edx
  0xee07b2fb:   mov    %eax,%edi
  0xee07b2fd:   pop    %eax
  0xee07b2fe:   push   %edi
  0xee07b2ff:   vzeroupper 
  0xee07b302:   mov    %ebp,0x230(%edi)
  0xee07b308:   mov    %eax,0x228(%edi)
  0xee07b30e:   call   0xf6c166c0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0xee07b313:   add    $0x8,%esp
  0xee07b316:   push   %eax
  0xee07b317:   push   %edx
  0xee07b318:   push   %ecx
  0xee07b319:   call   0xf704a910 = Thread::current()
  0xee07b31e:   pop    %ecx
  0xee07b31f:   pop    %edx
  0xee07b320:   cmp    %eax,%edi
  0xee07b322:   je     0xee07b339
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07b328:   push   $0xf78b5a48
  0xee07b32d:   call   0xee07b332
  0xee07b332:   pusha  
  0xee07b333:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07b338:   hlt    
  0xee07b339:   pop    %eax
  0xee07b33a:   movl   $0x0,0x228(%edi)
  0xee07b344:   movl   $0x0,0x230(%edi)
  0xee07b34e:   movl   $0x0,0x22c(%edi)
  0xee07b358:   vzeroupper 
  0xee07b35b:   cmpl   $0x0,0x4(%edi)
  0xee07b35f:   jne    0xee05bbe0
  0xee07b365:   mov    -0x20(%ebp),%esi
  0xee07b368:   mov    -0x1c(%ebp),%edi
  0xee07b36b:   lea    0x0(%ebp,%edi,4),%edi
  0xee07b36f:   ret    
  0xee07b370:   movzwl 0x1(%esi),%edx               ;; 2677:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee07b374:   mov    -0x18(%ebp),%ecx
  0xee07b377:   shl    $0x2,%edx
  0xee07b37a:   mov    0x20(%ecx,%edx,4),%ebx       ;; 2679:   __ bind(resolved);
                                                    ;; 2748:   __ load_resolved_method_at_index(byte_no, method, cache, index);
  0xee07b37e:   mov    0x28(%ecx,%edx,4),%edx       ;; 2754:   __ movl(flags, Address(cache, index, Address::times_ptr, flags_offset));
  0xee07b382:   shr    $0x1c,%edx                   ;; 3605:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee07b385:   mov    -0x833c620(,%edx,4),%edx     ;; 3616:     __ movptr(flags, ArrayAddress(table, Address(noreg, flags, Address::times_ptr)));
  0xee07b38c:   push   %edx                         ;; 3621:   __ push(flags);
  0xee07b38d:   mov    -0x14(%ebp),%eax             ;; 3708:   __ profile_call(rax);
  0xee07b390:   test   %eax,%eax
  0xee07b392:   je     0xee07b3a6
  0xee07b398:   addl   $0x1,0x8(%eax)
  0xee07b39c:   sbbl   $0x0,0x8(%eax)
  0xee07b3a0:   add    $0xc,%eax
  0xee07b3a3:   mov    %eax,-0x14(%ebp)
  0xee07b3a6:   mov    -0x14(%ebp),%eax             ;; 3709:   __ profile_arguments_type(rax, rbx, rbcp, false);
  0xee07b3a9:   test   %eax,%eax
  0xee07b3ab:   je     0xee07b490
  0xee07b3b1:   cmpb   $0xa,-0xc(%eax)
  0xee07b3b5:   jne    0xee07b490
  0xee07b3bb:   add    $0x4,%eax
  0xee07b3be:   mov    -0x4(%eax),%esi
  0xee07b3c1:   sub    $0x0,%esi
  0xee07b3c4:   cmp    $0x2,%esi
  0xee07b3c7:   jl     0xee07b488
  0xee07b3cd:   mov    0x8(%ebx),%esi
  0xee07b3d0:   movzwl 0x24(%esi),%esi
  0xee07b3d4:   sub    (%eax),%esi
  0xee07b3d6:   sub    $0x1,%esi
  0xee07b3d9:   mov    0x4(%esp,%esi,4),%esi
  0xee07b3dd:   test   %esi,%esi
  0xee07b3df:   jne    0xee07b3e7
  0xee07b3e1:   orl    $0x1,0x4(%eax)
  0xee07b3e5:   jmp    0xee07b41d
  0xee07b3e7:   mov    0x4(%esi),%esi
  0xee07b3ea:   xor    0x4(%eax),%esi
  0xee07b3ed:   test   $0xfffffffc,%esi
  0xee07b3f3:   je     0xee07b41d
  0xee07b3f5:   test   $0x2,%esi
  0xee07b3fb:   jne    0xee07b41d
  0xee07b3fd:   cmpl   $0x0,0x4(%eax)
  0xee07b401:   je     0xee07b41a
  0xee07b403:   cmpl   $0x1,0x4(%eax)
  0xee07b407:   je     0xee07b41a
  0xee07b409:   xor    0x4(%eax),%esi
  0xee07b40c:   test   $0xfffffffc,%esi
  0xee07b412:   je     0xee07b41d
  0xee07b414:   orl    $0x2,0x4(%eax)
  0xee07b418:   jmp    0xee07b41d
  0xee07b41a:   mov    %esi,0x4(%eax)
  0xee07b41d:   add    $0x8,%eax
  0xee07b420:   mov    -0xc(%eax),%esi
  0xee07b423:   sub    $0x2,%esi
  0xee07b426:   cmp    $0x2,%esi
  0xee07b429:   jl     0xee07b488
  0xee07b42f:   mov    0x8(%ebx),%esi
  0xee07b432:   movzwl 0x24(%esi),%esi
  0xee07b436:   sub    (%eax),%esi
  0xee07b438:   sub    $0x1,%esi
  0xee07b43b:   mov    0x4(%esp,%esi,4),%esi
  0xee07b43f:   test   %esi,%esi
  0xee07b441:   jne    0xee07b449
  0xee07b443:   orl    $0x1,0x4(%eax)
  0xee07b447:   jmp    0xee07b47f
  0xee07b449:   mov    0x4(%esi),%esi
  0xee07b44c:   xor    0x4(%eax),%esi
  0xee07b44f:   test   $0xfffffffc,%esi
  0xee07b455:   je     0xee07b47f
  0xee07b457:   test   $0x2,%esi
  0xee07b45d:   jne    0xee07b47f
  0xee07b45f:   cmpl   $0x0,0x4(%eax)
  0xee07b463:   je     0xee07b47c
  0xee07b465:   cmpl   $0x1,0x4(%eax)
  0xee07b469:   je     0xee07b47c
  0xee07b46b:   xor    0x4(%eax),%esi
  0xee07b46e:   test   $0xfffffffc,%esi
  0xee07b474:   je     0xee07b47f
  0xee07b476:   orl    $0x2,0x4(%eax)
  0xee07b47a:   jmp    0xee07b47f
  0xee07b47c:   mov    %esi,0x4(%eax)
  0xee07b47f:   add    $0x8,%eax
  0xee07b482:   mov    -0x14(%eax),%esi
  0xee07b485:   sub    $0x4,%esi
  0xee07b488:   shl    $0x2,%esi
  0xee07b48b:   add    %esi,%eax
  0xee07b48d:   mov    %eax,-0x14(%ebp)
  0xee07b490:   lea    0x4(%esp),%esi               ;; 3710:   __ jump_from_interpreted(rbx, rax);
  0xee07b494:   mov    %esi,-0x8(%ebp)
  0xee07b497:   jmp    *0x40(%ebx)
  0xee07b49a:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee07b49f:   call   0xee07b4a4
  0xee07b4a4:   pusha  
  0xee07b4a5:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07b4aa:   hlt    
  0xee07b4ab:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
invokeinterface  185 invokeinterface  [0xee07b4c0, 0xee07bda4]  2276 bytes

--------------------------------------------------------------------------------
  0xee07b4c0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07b4c3:   vmovss %xmm0,(%esp)
  0xee07b4c8:   jmp    0xee07b4d9                   ;; 1751:       __ jmpb(L);
  0xee07b4ca:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07b4cd:   vmovsd %xmm0,(%esp)
  0xee07b4d2:   jmp    0xee07b4d9                   ;; 1754:       __ jmpb(L);
  0xee07b4d4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07b4d5:   push   %eax
  0xee07b4d6:   jmp    0xee07b4d9                   ;; 1765:       __ jmpb(L);
  0xee07b4d8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07b4d9:   mov    %esi,-0x20(%ebp)             ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3568:   __ save_bcp();
  0xee07b4dc:   movzwl 0x1(%esi),%edx               ;; 2666:   __ get_cache_and_index_and_bytecode_at_bcp(cache, index, temp, byte_no, 1, index_size);
  0xee07b4e0:   mov    -0x18(%ebp),%ecx
  0xee07b4e3:   shl    $0x2,%edx
  0xee07b4e6:   mov    0x1c(%ecx,%edx,4),%ebx
  0xee07b4ea:   shr    $0x10,%ebx
  0xee07b4ed:   and    $0xff,%ebx
  0xee07b4f3:   cmp    $0xb9,%ebx                   ;; 2667:   __ cmpl(temp, code);  // have we resolved this bytecode?
  0xee07b4f9:   je     0xee07b5ba                   ;; 2668:   __ jcc(Assembler::equal, resolved);
  0xee07b4ff:   mov    $0xb9,%ebx                   ;; 2672:   __ bind(L_clinit_barrier_slow);
                                                    ;; 2674:   __ movl(temp, code);
  0xee07b504:   call   0xee07b50e                   ;; 2675:   __ call_VM(noreg, entry, temp);
  0xee07b509:   jmp    0xee07b5b0
  0xee07b50e:   push   %ebx
  0xee07b50f:   lea    0x8(%esp),%eax
  0xee07b513:   mov    %esi,-0x20(%ebp)
  0xee07b516:   cmpl   $0x0,-0x8(%ebp)
  0xee07b51a:   je     0xee07b531
  0xee07b520:   push   $0xf78569d8
  0xee07b525:   call   0xee07b52a
  0xee07b52a:   pusha  
  0xee07b52b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07b530:   hlt    
  0xee07b531:   push   %eax
  0xee07b532:   push   %edx
  0xee07b533:   push   %ecx
  0xee07b534:   call   0xf704a910 = Thread::current()
  0xee07b539:   pop    %ecx
  0xee07b53a:   pop    %edx
  0xee07b53b:   mov    %eax,%edi
  0xee07b53d:   pop    %eax
  0xee07b53e:   push   %edi
  0xee07b53f:   vzeroupper 
  0xee07b542:   mov    %ebp,0x230(%edi)
  0xee07b548:   mov    %eax,0x228(%edi)
  0xee07b54e:   call   0xf6c166c0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0xee07b553:   add    $0x8,%esp
  0xee07b556:   push   %eax
  0xee07b557:   push   %edx
  0xee07b558:   push   %ecx
  0xee07b559:   call   0xf704a910 = Thread::current()
  0xee07b55e:   pop    %ecx
  0xee07b55f:   pop    %edx
  0xee07b560:   cmp    %eax,%edi
  0xee07b562:   je     0xee07b579
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07b568:   push   $0xf78b5a48
  0xee07b56d:   call   0xee07b572
  0xee07b572:   pusha  
  0xee07b573:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07b578:   hlt    
  0xee07b579:   pop    %eax
  0xee07b57a:   movl   $0x0,0x228(%edi)
  0xee07b584:   movl   $0x0,0x230(%edi)
  0xee07b58e:   movl   $0x0,0x22c(%edi)
  0xee07b598:   vzeroupper 
  0xee07b59b:   cmpl   $0x0,0x4(%edi)
  0xee07b59f:   jne    0xee05bbe0
  0xee07b5a5:   mov    -0x20(%ebp),%esi
  0xee07b5a8:   mov    -0x1c(%ebp),%edi
  0xee07b5ab:   lea    0x0(%ebp,%edi,4),%edi
  0xee07b5af:   ret    
  0xee07b5b0:   movzwl 0x1(%esi),%edx               ;; 2677:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee07b5b4:   mov    -0x18(%ebp),%ecx
  0xee07b5b7:   shl    $0x2,%edx
  0xee07b5ba:   mov    0x20(%ecx,%edx,4),%eax       ;; 2679:   __ bind(resolved);
                                                    ;; 2748:   __ load_resolved_method_at_index(byte_no, method, cache, index);
  0xee07b5be:   mov    0x24(%ecx,%edx,4),%ebx       ;; 2752:     __ movptr(itable_index, Address(cache, index, Address::times_ptr, index_offset));
  0xee07b5c2:   mov    0x28(%ecx,%edx,4),%edx       ;; 2754:   __ movl(flags, Address(cache, index, Address::times_ptr, flags_offset));
  0xee07b5c6:   mov    %edx,%ecx                    ;; 3591:     __ movl(recv, flags);
  0xee07b5c8:   and    $0xff,%ecx                   ;; 3592:     __ andl(recv, ConstantPoolCacheEntry::parameter_size_mask);
  0xee07b5ce:   mov    -0x4(%esp,%ecx,4),%ecx       ;; 3595:     Address recv_addr = __ argument_address(recv, no_return_pc_pushed_yet + receiver_is_at_end);
                                                    ;; 3596:     __ movptr(recv, recv_addr);
  0xee07b5d2:   mov    %edx,%esi                    ;; 3597:     __ verify_oop(recv);
                                                    ;; 3601:     __ movl(rbcp, flags);
  0xee07b5d4:   shr    $0x1c,%edx                   ;; 3605:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee07b5d7:   mov    -0x833c660(,%edx,4),%edx     ;; 3616:     __ movptr(flags, ArrayAddress(table, Address(noreg, flags, Address::times_ptr)));
  0xee07b5de:   push   %edx                         ;; 3621:   __ push(flags);
  0xee07b5df:   mov    %esi,%edx                    ;; 3626:     __ movl(flags, rbcp);
  0xee07b5e1:   mov    -0x20(%ebp),%esi             ;; 3627:     __ restore_bcp();
  0xee07b5e4:   mov    %edx,%edi                    ;; 3738:   __ movl(rlocals, rdx);
  0xee07b5e6:   and    $0x800000,%edi               ;; 3739:   __ andl(rlocals, (1 << ConstantPoolCacheEntry::is_forced_virtual_shift));
  0xee07b5ec:   je     0xee07b897                   ;; 3740:   __ jcc(Assembler::zero, notObjectMethod);
  0xee07b5f2:   mov    %edx,%eax                    ;; 3641:   __ movl(rax, flags);
  0xee07b5f4:   and    $0x100000,%eax               ;; 3642:   __ andl(rax, (1 << ConstantPoolCacheEntry::is_vfinal_shift));
  0xee07b5f9:   je     0xee07b70e                   ;; 3643:   __ jcc(Assembler::zero, notFinal);
  0xee07b5ff:   cmp    (%ecx),%eax                  ;; 3653:   __ null_check(recv);
  0xee07b601:   mov    -0x14(%ebp),%eax             ;; 3656:   __ profile_final_call(rax);
  0xee07b604:   test   %eax,%eax
  0xee07b606:   je     0xee07b61a
  0xee07b60c:   addl   $0x1,0x8(%eax)
  0xee07b610:   sbbl   $0x0,0x8(%eax)
  0xee07b614:   add    $0x1c,%eax
  0xee07b617:   mov    %eax,-0x14(%ebp)
  0xee07b61a:   mov    -0x14(%ebp),%eax             ;; 3657:   __ profile_arguments_type(rax, method, rbcp, true);
  0xee07b61d:   test   %eax,%eax
  0xee07b61f:   je     0xee07b704
  0xee07b625:   cmpb   $0xb,-0x1c(%eax)
  0xee07b629:   jne    0xee07b704
  0xee07b62f:   add    $0x4,%eax
  0xee07b632:   mov    -0x4(%eax),%esi
  0xee07b635:   sub    $0x0,%esi
  0xee07b638:   cmp    $0x2,%esi
  0xee07b63b:   jl     0xee07b6fc
  0xee07b641:   mov    0x8(%ebx),%esi
  0xee07b644:   movzwl 0x24(%esi),%esi
  0xee07b648:   sub    (%eax),%esi
  0xee07b64a:   sub    $0x1,%esi
  0xee07b64d:   mov    0x4(%esp,%esi,4),%esi
  0xee07b651:   test   %esi,%esi
  0xee07b653:   jne    0xee07b65b
  0xee07b655:   orl    $0x1,0x4(%eax)
  0xee07b659:   jmp    0xee07b691
  0xee07b65b:   mov    0x4(%esi),%esi
  0xee07b65e:   xor    0x4(%eax),%esi
  0xee07b661:   test   $0xfffffffc,%esi
  0xee07b667:   je     0xee07b691
  0xee07b669:   test   $0x2,%esi
  0xee07b66f:   jne    0xee07b691
  0xee07b671:   cmpl   $0x0,0x4(%eax)
  0xee07b675:   je     0xee07b68e
  0xee07b677:   cmpl   $0x1,0x4(%eax)
  0xee07b67b:   je     0xee07b68e
  0xee07b67d:   xor    0x4(%eax),%esi
  0xee07b680:   test   $0xfffffffc,%esi
  0xee07b686:   je     0xee07b691
  0xee07b688:   orl    $0x2,0x4(%eax)
  0xee07b68c:   jmp    0xee07b691
  0xee07b68e:   mov    %esi,0x4(%eax)
  0xee07b691:   add    $0x8,%eax
  0xee07b694:   mov    -0xc(%eax),%esi
  0xee07b697:   sub    $0x2,%esi
  0xee07b69a:   cmp    $0x2,%esi
  0xee07b69d:   jl     0xee07b6fc
  0xee07b6a3:   mov    0x8(%ebx),%esi
  0xee07b6a6:   movzwl 0x24(%esi),%esi
  0xee07b6aa:   sub    (%eax),%esi
  0xee07b6ac:   sub    $0x1,%esi
  0xee07b6af:   mov    0x4(%esp,%esi,4),%esi
  0xee07b6b3:   test   %esi,%esi
  0xee07b6b5:   jne    0xee07b6bd
  0xee07b6b7:   orl    $0x1,0x4(%eax)
  0xee07b6bb:   jmp    0xee07b6f3
  0xee07b6bd:   mov    0x4(%esi),%esi
  0xee07b6c0:   xor    0x4(%eax),%esi
  0xee07b6c3:   test   $0xfffffffc,%esi
  0xee07b6c9:   je     0xee07b6f3
  0xee07b6cb:   test   $0x2,%esi
  0xee07b6d1:   jne    0xee07b6f3
  0xee07b6d3:   cmpl   $0x0,0x4(%eax)
  0xee07b6d7:   je     0xee07b6f0
  0xee07b6d9:   cmpl   $0x1,0x4(%eax)
  0xee07b6dd:   je     0xee07b6f0
  0xee07b6df:   xor    0x4(%eax),%esi
  0xee07b6e2:   test   $0xfffffffc,%esi
  0xee07b6e8:   je     0xee07b6f3
  0xee07b6ea:   orl    $0x2,0x4(%eax)
  0xee07b6ee:   jmp    0xee07b6f3
  0xee07b6f0:   mov    %esi,0x4(%eax)
  0xee07b6f3:   add    $0x8,%eax
  0xee07b6f6:   mov    -0x14(%eax),%esi
  0xee07b6f9:   sub    $0x4,%esi
  0xee07b6fc:   shl    $0x2,%esi
  0xee07b6ff:   add    %esi,%eax
  0xee07b701:   mov    %eax,-0x14(%ebp)
  0xee07b704:   lea    0x4(%esp),%esi               ;; 3659:   __ jump_from_interpreted(method, rax);
  0xee07b708:   mov    %esi,-0x8(%ebp)
  0xee07b70b:   jmp    *0x40(%ebx)
  0xee07b70e:   mov    0x4(%ecx),%eax               ;; 3661:   __ bind(notFinal);
                                                    ;; 3664:   __ load_klass_check_null(rax, recv, rscratch1);
  0xee07b711:   mov    -0x14(%ebp),%edi             ;; 3667:   __ profile_virtual_call(rax, rlocals, rdx);
  0xee07b714:   test   %edi,%edi
  0xee07b716:   je     0xee07b79c
  0xee07b71c:   mov    0xc(%edi),%edx
  0xee07b71f:   cmp    %eax,%edx
  0xee07b721:   jne    0xee07b734
  0xee07b727:   addl   $0x1,0x10(%edi)
  0xee07b72b:   sbbl   $0x0,0x10(%edi)
  0xee07b72f:   jmp    0xee07b796
  0xee07b734:   test   %edx,%edx
  0xee07b736:   je     0xee07b775
  0xee07b73c:   mov    0x14(%edi),%edx
  0xee07b73f:   cmp    %eax,%edx
  0xee07b741:   jne    0xee07b754
  0xee07b747:   addl   $0x1,0x18(%edi)
  0xee07b74b:   sbbl   $0x0,0x18(%edi)
  0xee07b74f:   jmp    0xee07b796
  0xee07b754:   test   %edx,%edx
  0xee07b756:   je     0xee07b765
  0xee07b758:   addl   $0x1,0x8(%edi)
  0xee07b75c:   sbbl   $0x0,0x8(%edi)
  0xee07b760:   jmp    0xee07b796
  0xee07b765:   mov    %eax,0x14(%edi)
  0xee07b768:   mov    $0x1,%edx
  0xee07b76d:   mov    %edx,0x18(%edi)
  0xee07b770:   jmp    0xee07b796
  0xee07b775:   cmp    0x14(%edi),%eax
  0xee07b778:   jne    0xee07b78b
  0xee07b77e:   addl   $0x1,0x18(%edi)
  0xee07b782:   sbbl   $0x0,0x18(%edi)
  0xee07b786:   jmp    0xee07b796
  0xee07b78b:   mov    %eax,0xc(%edi)
  0xee07b78e:   mov    $0x1,%edx
  0xee07b793:   mov    %edx,0x10(%edi)
  0xee07b796:   add    $0x1c,%edi
  0xee07b799:   mov    %edi,-0x14(%ebp)
  0xee07b79c:   mov    0x10c(%eax,%ebx,4),%ebx      ;; 3669:   __ lookup_virtual_method(rax, index, method);
  0xee07b7a3:   mov    -0x14(%ebp),%edx             ;; 3671:   __ profile_arguments_type(rdx, method, rbcp, true);
  0xee07b7a6:   test   %edx,%edx
  0xee07b7a8:   je     0xee07b88d
  0xee07b7ae:   cmpb   $0xb,-0x1c(%edx)
  0xee07b7b2:   jne    0xee07b88d
  0xee07b7b8:   add    $0x4,%edx
  0xee07b7bb:   mov    -0x4(%edx),%esi
  0xee07b7be:   sub    $0x0,%esi
  0xee07b7c1:   cmp    $0x2,%esi
  0xee07b7c4:   jl     0xee07b885
  0xee07b7ca:   mov    0x8(%ebx),%esi
  0xee07b7cd:   movzwl 0x24(%esi),%esi
  0xee07b7d1:   sub    (%edx),%esi
  0xee07b7d3:   sub    $0x1,%esi
  0xee07b7d6:   mov    0x4(%esp,%esi,4),%esi
  0xee07b7da:   test   %esi,%esi
  0xee07b7dc:   jne    0xee07b7e4
  0xee07b7de:   orl    $0x1,0x4(%edx)
  0xee07b7e2:   jmp    0xee07b81a
  0xee07b7e4:   mov    0x4(%esi),%esi
  0xee07b7e7:   xor    0x4(%edx),%esi
  0xee07b7ea:   test   $0xfffffffc,%esi
  0xee07b7f0:   je     0xee07b81a
  0xee07b7f2:   test   $0x2,%esi
  0xee07b7f8:   jne    0xee07b81a
  0xee07b7fa:   cmpl   $0x0,0x4(%edx)
  0xee07b7fe:   je     0xee07b817
  0xee07b800:   cmpl   $0x1,0x4(%edx)
  0xee07b804:   je     0xee07b817
  0xee07b806:   xor    0x4(%edx),%esi
  0xee07b809:   test   $0xfffffffc,%esi
  0xee07b80f:   je     0xee07b81a
  0xee07b811:   orl    $0x2,0x4(%edx)
  0xee07b815:   jmp    0xee07b81a
  0xee07b817:   mov    %esi,0x4(%edx)
  0xee07b81a:   add    $0x8,%edx
  0xee07b81d:   mov    -0xc(%edx),%esi
  0xee07b820:   sub    $0x2,%esi
  0xee07b823:   cmp    $0x2,%esi
  0xee07b826:   jl     0xee07b885
  0xee07b82c:   mov    0x8(%ebx),%esi
  0xee07b82f:   movzwl 0x24(%esi),%esi
  0xee07b833:   sub    (%edx),%esi
  0xee07b835:   sub    $0x1,%esi
  0xee07b838:   mov    0x4(%esp,%esi,4),%esi
  0xee07b83c:   test   %esi,%esi
  0xee07b83e:   jne    0xee07b846
  0xee07b840:   orl    $0x1,0x4(%edx)
  0xee07b844:   jmp    0xee07b87c
  0xee07b846:   mov    0x4(%esi),%esi
  0xee07b849:   xor    0x4(%edx),%esi
  0xee07b84c:   test   $0xfffffffc,%esi
  0xee07b852:   je     0xee07b87c
  0xee07b854:   test   $0x2,%esi
  0xee07b85a:   jne    0xee07b87c
  0xee07b85c:   cmpl   $0x0,0x4(%edx)
  0xee07b860:   je     0xee07b879
  0xee07b862:   cmpl   $0x1,0x4(%edx)
  0xee07b866:   je     0xee07b879
  0xee07b868:   xor    0x4(%edx),%esi
  0xee07b86b:   test   $0xfffffffc,%esi
  0xee07b871:   je     0xee07b87c
  0xee07b873:   orl    $0x2,0x4(%edx)
  0xee07b877:   jmp    0xee07b87c
  0xee07b879:   mov    %esi,0x4(%edx)
  0xee07b87c:   add    $0x8,%edx
  0xee07b87f:   mov    -0x14(%edx),%esi
  0xee07b882:   sub    $0x4,%esi
  0xee07b885:   shl    $0x2,%esi
  0xee07b888:   add    %esi,%edx
  0xee07b88a:   mov    %edx,-0x14(%ebp)
  0xee07b88d:   lea    0x4(%esp),%esi               ;; 3672:   __ jump_from_interpreted(method, rdx);
  0xee07b891:   mov    %esi,-0x8(%ebp)
  0xee07b894:   jmp    *0x40(%ebx)
  0xee07b897:   mov    %edx,%edi                    ;; 3743:   __ bind(notObjectMethod);
                                                    ;; 3750:   __ movl(rlocals, rdx);
  0xee07b899:   and    $0x100000,%edi               ;; 3751:   __ andl(rlocals, (1 << ConstantPoolCacheEntry::is_vfinal_shift));
  0xee07b89f:   je     0xee07b9f9                   ;; 3752:   __ jcc(Assembler::zero, notVFinal);
  0xee07b8a5:   mov    0x4(%ecx),%edi               ;; 3755:   __ load_klass_check_null(rlocals, rcx, rscratch1);
  0xee07b8a8:   cmp    %eax,%edi                    ;; 3758:   __ check_klass_subtype(rlocals, rax, rbcp, subtype);
  0xee07b8aa:   je     0xee07b8ec
  0xee07b8b0:   mov    0x14(%eax),%esi
  0xee07b8b3:   cmp    (%edi,%esi,1),%eax
  0xee07b8b6:   je     0xee07b8ec
  0xee07b8bc:   cmp    $0x1c,%esi
  0xee07b8bf:   jne    0xee07b8e5
  0xee07b8c5:   push   %ecx
  0xee07b8c6:   push   %edi
  0xee07b8c7:   incl   0xf7cb5bc0
  0xee07b8cd:   mov    0x20(%edi),%edi
  0xee07b8d0:   mov    (%edi),%ecx
  0xee07b8d2:   add    $0x4,%edi
  0xee07b8d5:   test   %eax,%eax
  0xee07b8d7:   repnz scas %es:(%edi),%eax
  0xee07b8d9:   pop    %edi
  0xee07b8da:   pop    %ecx
  0xee07b8db:   jne    0xee07b8e5
  0xee07b8dd:   mov    %eax,0x1c(%edi)
  0xee07b8e0:   jmp    0xee07b8ec
  0xee07b8e5:   mov    %edi,%edx                    ;; 3761:   __ mov(recvKlass, rlocals); // shuffle receiver class for exception use
  0xee07b8e7:   jmp    0xee07bcc7                   ;; 3762:   __ jmp(no_such_interface);
  0xee07b8ec:   mov    -0x14(%ebp),%edx             ;; 3764:   __ bind(subtype);
                                                    ;; 3768:   __ profile_final_call(rdx);
  0xee07b8ef:   test   %edx,%edx
  0xee07b8f1:   je     0xee07b905
  0xee07b8f7:   addl   $0x1,0x8(%edx)
  0xee07b8fb:   sbbl   $0x0,0x8(%edx)
  0xee07b8ff:   add    $0x1c,%edx
  0xee07b902:   mov    %edx,-0x14(%ebp)
  0xee07b905:   mov    -0x14(%ebp),%edx             ;; 3769:   __ profile_arguments_type(rdx, rbx, rbcp, true);
  0xee07b908:   test   %edx,%edx
  0xee07b90a:   je     0xee07b9ef
  0xee07b910:   cmpb   $0xb,-0x1c(%edx)
  0xee07b914:   jne    0xee07b9ef
  0xee07b91a:   add    $0x4,%edx
  0xee07b91d:   mov    -0x4(%edx),%esi
  0xee07b920:   sub    $0x0,%esi
  0xee07b923:   cmp    $0x2,%esi
  0xee07b926:   jl     0xee07b9e7
  0xee07b92c:   mov    0x8(%ebx),%esi
  0xee07b92f:   movzwl 0x24(%esi),%esi
  0xee07b933:   sub    (%edx),%esi
  0xee07b935:   sub    $0x1,%esi
  0xee07b938:   mov    0x4(%esp,%esi,4),%esi
  0xee07b93c:   test   %esi,%esi
  0xee07b93e:   jne    0xee07b946
  0xee07b940:   orl    $0x1,0x4(%edx)
  0xee07b944:   jmp    0xee07b97c
  0xee07b946:   mov    0x4(%esi),%esi
  0xee07b949:   xor    0x4(%edx),%esi
  0xee07b94c:   test   $0xfffffffc,%esi
  0xee07b952:   je     0xee07b97c
  0xee07b954:   test   $0x2,%esi
  0xee07b95a:   jne    0xee07b97c
  0xee07b95c:   cmpl   $0x0,0x4(%edx)
  0xee07b960:   je     0xee07b979
  0xee07b962:   cmpl   $0x1,0x4(%edx)
  0xee07b966:   je     0xee07b979
  0xee07b968:   xor    0x4(%edx),%esi
  0xee07b96b:   test   $0xfffffffc,%esi
  0xee07b971:   je     0xee07b97c
  0xee07b973:   orl    $0x2,0x4(%edx)
  0xee07b977:   jmp    0xee07b97c
  0xee07b979:   mov    %esi,0x4(%edx)
  0xee07b97c:   add    $0x8,%edx
  0xee07b97f:   mov    -0xc(%edx),%esi
  0xee07b982:   sub    $0x2,%esi
  0xee07b985:   cmp    $0x2,%esi
  0xee07b988:   jl     0xee07b9e7
  0xee07b98e:   mov    0x8(%ebx),%esi
  0xee07b991:   movzwl 0x24(%esi),%esi
  0xee07b995:   sub    (%edx),%esi
  0xee07b997:   sub    $0x1,%esi
  0xee07b99a:   mov    0x4(%esp,%esi,4),%esi
  0xee07b99e:   test   %esi,%esi
  0xee07b9a0:   jne    0xee07b9a8
  0xee07b9a2:   orl    $0x1,0x4(%edx)
  0xee07b9a6:   jmp    0xee07b9de
  0xee07b9a8:   mov    0x4(%esi),%esi
  0xee07b9ab:   xor    0x4(%edx),%esi
  0xee07b9ae:   test   $0xfffffffc,%esi
  0xee07b9b4:   je     0xee07b9de
  0xee07b9b6:   test   $0x2,%esi
  0xee07b9bc:   jne    0xee07b9de
  0xee07b9be:   cmpl   $0x0,0x4(%edx)
  0xee07b9c2:   je     0xee07b9db
  0xee07b9c4:   cmpl   $0x1,0x4(%edx)
  0xee07b9c8:   je     0xee07b9db
  0xee07b9ca:   xor    0x4(%edx),%esi
  0xee07b9cd:   test   $0xfffffffc,%esi
  0xee07b9d3:   je     0xee07b9de
  0xee07b9d5:   orl    $0x2,0x4(%edx)
  0xee07b9d9:   jmp    0xee07b9de
  0xee07b9db:   mov    %esi,0x4(%edx)
  0xee07b9de:   add    $0x8,%edx
  0xee07b9e1:   mov    -0x14(%edx),%esi
  0xee07b9e4:   sub    $0x4,%esi
  0xee07b9e7:   shl    $0x2,%esi
  0xee07b9ea:   add    %esi,%edx
  0xee07b9ec:   mov    %edx,-0x14(%ebp)
  0xee07b9ef:   lea    0x4(%esp),%esi               ;; 3771:   __ jump_from_interpreted(rbx, rdx);
  0xee07b9f3:   mov    %esi,-0x8(%ebp)
  0xee07b9f6:   jmp    *0x40(%ebx)
  0xee07b9f9:   mov    -0x1c(%ebp),%edi             ;; 3773:   __ bind(notVFinal);
                                                    ;; 3776:   __ restore_locals();  // restore r14
  0xee07b9fc:   lea    0x0(%ebp,%edi,4),%edi
  0xee07ba00:   mov    0x4(%ecx),%edx               ;; 3777:   __ load_klass_check_null(rdx, rcx, rscratch1);
  0xee07ba03:   mov    %ebx,%ecx                    ;; 3782:   __ mov(rcx, rbx);
  0xee07ba05:   mov    0x5c(%edx),%edi              ;; 3785:   __ lookup_interface_method(// inputs: rec. class, interface, itable index
  0xee07ba08:   lea    0x10c(%edx,%edi,4),%edi
  0xee07ba0f:   mov    (%edi),%esi
  0xee07ba11:   cmp    %esi,%eax
  0xee07ba13:   je     0xee07ba26
  0xee07ba15:   test   %esi,%esi
  0xee07ba17:   je     0xee07bcc7
  0xee07ba1d:   add    $0x8,%edi
  0xee07ba20:   mov    (%edi),%esi
  0xee07ba22:   cmp    %esi,%eax
  0xee07ba24:   jne    0xee07ba15
  0xee07ba26:   mov    -0x20(%ebp),%esi             ;; 3793:   __ restore_bcp(); // rbcp was destroyed by receiver type check
  0xee07ba29:   mov    -0x14(%ebp),%esi             ;; 3794:   __ profile_virtual_call(rdx, rbcp, rlocals);
  0xee07ba2c:   test   %esi,%esi
  0xee07ba2e:   je     0xee07bab4
  0xee07ba34:   mov    0xc(%esi),%edi
  0xee07ba37:   cmp    %edx,%edi
  0xee07ba39:   jne    0xee07ba4c
  0xee07ba3f:   addl   $0x1,0x10(%esi)
  0xee07ba43:   sbbl   $0x0,0x10(%esi)
  0xee07ba47:   jmp    0xee07baae
  0xee07ba4c:   test   %edi,%edi
  0xee07ba4e:   je     0xee07ba8d
  0xee07ba54:   mov    0x14(%esi),%edi
  0xee07ba57:   cmp    %edx,%edi
  0xee07ba59:   jne    0xee07ba6c
  0xee07ba5f:   addl   $0x1,0x18(%esi)
  0xee07ba63:   sbbl   $0x0,0x18(%esi)
  0xee07ba67:   jmp    0xee07baae
  0xee07ba6c:   test   %edi,%edi
  0xee07ba6e:   je     0xee07ba7d
  0xee07ba70:   addl   $0x1,0x8(%esi)
  0xee07ba74:   sbbl   $0x0,0x8(%esi)
  0xee07ba78:   jmp    0xee07baae
  0xee07ba7d:   mov    %edx,0x14(%esi)
  0xee07ba80:   mov    $0x1,%edi
  0xee07ba85:   mov    %edi,0x18(%esi)
  0xee07ba88:   jmp    0xee07baae
  0xee07ba8d:   cmp    0x14(%esi),%edx
  0xee07ba90:   jne    0xee07baa3
  0xee07ba96:   addl   $0x1,0x18(%esi)
  0xee07ba9a:   sbbl   $0x0,0x18(%esi)
  0xee07ba9e:   jmp    0xee07baae
  0xee07baa3:   mov    %edx,0xc(%esi)
  0xee07baa6:   mov    $0x1,%edi
  0xee07baab:   mov    %edi,0x10(%esi)
  0xee07baae:   add    $0x1c,%esi
  0xee07bab1:   mov    %esi,-0x14(%ebp)
  0xee07bab4:   mov    0x8(%ebx),%eax               ;; 3797:   __ load_method_holder(rax, rbx);
  0xee07bab7:   mov    0x8(%eax),%eax
  0xee07baba:   mov    0x10(%eax),%eax
  0xee07babd:   mov    0x1c(%ebx),%ebx              ;; 3798:   __ movl(rbx, Address(rbx, Method::itable_index_offset()));
  0xee07bac0:   sub    $0xfffffff6,%ebx             ;; 3799:   __ subl(rbx, Method::itable_index_max);
  0xee07bac3:   neg    %ebx                         ;; 3800:   __ negl(rbx);
  0xee07bac5:   mov    %edx,%edi                    ;; 3803:   __ mov(rlocals, rdx);
  0xee07bac7:   mov    0x5c(%edi),%esi              ;; 3804:   __ lookup_interface_method(// inputs: rec. class, interface, itable index
  0xee07baca:   lea    0x10c(%edi,%esi,4),%esi
  0xee07bad1:   lea    (%edi,%ebx,4),%edi
  0xee07bad4:   mov    (%esi),%ebx
  0xee07bad6:   cmp    %ebx,%eax
  0xee07bad8:   je     0xee07baeb
  0xee07bada:   test   %ebx,%ebx
  0xee07badc:   je     0xee07bcc7
  0xee07bae2:   add    $0x8,%esi
  0xee07bae5:   mov    (%esi),%ebx
  0xee07bae7:   cmp    %ebx,%eax
  0xee07bae9:   jne    0xee07bada
  0xee07baeb:   mov    0x4(%esi),%esi
  0xee07baee:   mov    (%edi,%esi,1),%ebx
  0xee07baf1:   test   %ebx,%ebx                    ;; 3816:   __ testptr(rbx, rbx);
  0xee07baf3:   je     0xee07bbfe                   ;; 3817:   __ jcc(Assembler::zero, no_such_method);
  0xee07baf9:   mov    -0x14(%ebp),%edx             ;; 3819:   __ profile_arguments_type(rdx, rbx, rbcp, true);
  0xee07bafc:   test   %edx,%edx
  0xee07bafe:   je     0xee07bbe3
  0xee07bb04:   cmpb   $0xb,-0x1c(%edx)
  0xee07bb08:   jne    0xee07bbe3
  0xee07bb0e:   add    $0x4,%edx
  0xee07bb11:   mov    -0x4(%edx),%esi
  0xee07bb14:   sub    $0x0,%esi
  0xee07bb17:   cmp    $0x2,%esi
  0xee07bb1a:   jl     0xee07bbdb
  0xee07bb20:   mov    0x8(%ebx),%esi
  0xee07bb23:   movzwl 0x24(%esi),%esi
  0xee07bb27:   sub    (%edx),%esi
  0xee07bb29:   sub    $0x1,%esi
  0xee07bb2c:   mov    0x4(%esp,%esi,4),%esi
  0xee07bb30:   test   %esi,%esi
  0xee07bb32:   jne    0xee07bb3a
  0xee07bb34:   orl    $0x1,0x4(%edx)
  0xee07bb38:   jmp    0xee07bb70
  0xee07bb3a:   mov    0x4(%esi),%esi
  0xee07bb3d:   xor    0x4(%edx),%esi
  0xee07bb40:   test   $0xfffffffc,%esi
  0xee07bb46:   je     0xee07bb70
  0xee07bb48:   test   $0x2,%esi
  0xee07bb4e:   jne    0xee07bb70
  0xee07bb50:   cmpl   $0x0,0x4(%edx)
  0xee07bb54:   je     0xee07bb6d
  0xee07bb56:   cmpl   $0x1,0x4(%edx)
  0xee07bb5a:   je     0xee07bb6d
  0xee07bb5c:   xor    0x4(%edx),%esi
  0xee07bb5f:   test   $0xfffffffc,%esi
  0xee07bb65:   je     0xee07bb70
  0xee07bb67:   orl    $0x2,0x4(%edx)
  0xee07bb6b:   jmp    0xee07bb70
  0xee07bb6d:   mov    %esi,0x4(%edx)
  0xee07bb70:   add    $0x8,%edx
  0xee07bb73:   mov    -0xc(%edx),%esi
  0xee07bb76:   sub    $0x2,%esi
  0xee07bb79:   cmp    $0x2,%esi
  0xee07bb7c:   jl     0xee07bbdb
  0xee07bb82:   mov    0x8(%ebx),%esi
  0xee07bb85:   movzwl 0x24(%esi),%esi
  0xee07bb89:   sub    (%edx),%esi
  0xee07bb8b:   sub    $0x1,%esi
  0xee07bb8e:   mov    0x4(%esp,%esi,4),%esi
  0xee07bb92:   test   %esi,%esi
  0xee07bb94:   jne    0xee07bb9c
  0xee07bb96:   orl    $0x1,0x4(%edx)
  0xee07bb9a:   jmp    0xee07bbd2
  0xee07bb9c:   mov    0x4(%esi),%esi
  0xee07bb9f:   xor    0x4(%edx),%esi
  0xee07bba2:   test   $0xfffffffc,%esi
  0xee07bba8:   je     0xee07bbd2
  0xee07bbaa:   test   $0x2,%esi
  0xee07bbb0:   jne    0xee07bbd2
  0xee07bbb2:   cmpl   $0x0,0x4(%edx)
  0xee07bbb6:   je     0xee07bbcf
  0xee07bbb8:   cmpl   $0x1,0x4(%edx)
  0xee07bbbc:   je     0xee07bbcf
  0xee07bbbe:   xor    0x4(%edx),%esi
  0xee07bbc1:   test   $0xfffffffc,%esi
  0xee07bbc7:   je     0xee07bbd2
  0xee07bbc9:   orl    $0x2,0x4(%edx)
  0xee07bbcd:   jmp    0xee07bbd2
  0xee07bbcf:   mov    %esi,0x4(%edx)
  0xee07bbd2:   add    $0x8,%edx
  0xee07bbd5:   mov    -0x14(%edx),%esi
  0xee07bbd8:   sub    $0x4,%esi
  0xee07bbdb:   shl    $0x2,%esi
  0xee07bbde:   add    %esi,%edx
  0xee07bbe0:   mov    %edx,-0x14(%ebp)
  0xee07bbe3:   lea    0x4(%esp),%esi               ;; 3824:   __ jump_from_interpreted(rbx, rdx);
  0xee07bbe7:   mov    %esi,-0x8(%ebp)
  0xee07bbea:   jmp    *0x40(%ebx)
  0xee07bbed:   push   $0xf77a6b02                  ;; 3825:   __ should_not_reach_here();
  0xee07bbf2:   call   0xee07bbf7
  0xee07bbf7:   pusha  
  0xee07bbf8:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07bbfd:   hlt    
  0xee07bbfe:   pop    %ebx                         ;; 3831:   __ bind(no_such_method);
                                                    ;; 3833:   __ pop(rbx);           // pop return address (pushed by prepare_invoke)
  0xee07bbff:   mov    -0x20(%ebp),%esi             ;; 3834:   __ restore_bcp();      // rbcp must be correct for exception handler   (was destroyed)
  0xee07bc02:   mov    -0x1c(%ebp),%edi             ;; 3835:   __ restore_locals();   // make sure locals pointer is correct as well (was destroyed)
  0xee07bc05:   lea    0x0(%ebp,%edi,4),%edi
  0xee07bc09:   call   0xee07bc13                   ;; 3846:   __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::throw_AbstractMethodErrorVerbose),
  0xee07bc0e:   jmp    0xee07bcb6
  0xee07bc13:   push   %ecx
  0xee07bc14:   push   %edx
  0xee07bc15:   lea    0xc(%esp),%eax
  0xee07bc19:   mov    %esi,-0x20(%ebp)
  0xee07bc1c:   cmpl   $0x0,-0x8(%ebp)
  0xee07bc20:   je     0xee07bc37
  0xee07bc26:   push   $0xf78569d8
  0xee07bc2b:   call   0xee07bc30
  0xee07bc30:   pusha  
  0xee07bc31:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07bc36:   hlt    
  0xee07bc37:   push   %eax
  0xee07bc38:   push   %edx
  0xee07bc39:   push   %ecx
  0xee07bc3a:   call   0xf704a910 = Thread::current()
  0xee07bc3f:   pop    %ecx
  0xee07bc40:   pop    %edx
  0xee07bc41:   mov    %eax,%edi
  0xee07bc43:   pop    %eax
  0xee07bc44:   push   %edi
  0xee07bc45:   vzeroupper 
  0xee07bc48:   mov    %ebp,0x230(%edi)
  0xee07bc4e:   mov    %eax,0x228(%edi)
  0xee07bc54:   call   0xf6c14910 = InterpreterRuntime::throw_AbstractMethodErrorVerbose(JavaThread*, Klass*, Method*)
  0xee07bc59:   add    $0xc,%esp
  0xee07bc5c:   push   %eax
  0xee07bc5d:   push   %edx
  0xee07bc5e:   push   %ecx
  0xee07bc5f:   call   0xf704a910 = Thread::current()
  0xee07bc64:   pop    %ecx
  0xee07bc65:   pop    %edx
  0xee07bc66:   cmp    %eax,%edi
  0xee07bc68:   je     0xee07bc7f
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07bc6e:   push   $0xf78b5a48
  0xee07bc73:   call   0xee07bc78
  0xee07bc78:   pusha  
  0xee07bc79:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07bc7e:   hlt    
  0xee07bc7f:   pop    %eax
  0xee07bc80:   movl   $0x0,0x228(%edi)
  0xee07bc8a:   movl   $0x0,0x230(%edi)
  0xee07bc94:   movl   $0x0,0x22c(%edi)
  0xee07bc9e:   vzeroupper 
  0xee07bca1:   cmpl   $0x0,0x4(%edi)
  0xee07bca5:   jne    0xee05bbe0
  0xee07bcab:   mov    -0x20(%ebp),%esi
  0xee07bcae:   mov    -0x1c(%ebp),%edi
  0xee07bcb1:   lea    0x0(%ebp,%edi,4),%edi
  0xee07bcb5:   ret    
  0xee07bcb6:   push   $0xf77a6b02                  ;; 3849:   __ should_not_reach_here();
  0xee07bcbb:   call   0xee07bcc0
  0xee07bcc0:   pusha  
  0xee07bcc1:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07bcc6:   hlt    
  0xee07bcc7:   pop    %ebx                         ;; 3851:   __ bind(no_such_interface);
                                                    ;; 3853:   __ pop(rbx);           // pop return address (pushed by prepare_invoke)
  0xee07bcc8:   mov    -0x20(%ebp),%esi             ;; 3854:   __ restore_bcp();      // rbcp must be correct for exception handler   (was destroyed)
  0xee07bccb:   mov    -0x1c(%ebp),%edi             ;; 3855:   __ restore_locals();   // make sure locals pointer is correct as well (was destroyed)
  0xee07bcce:   lea    0x0(%ebp,%edi,4),%edi
  0xee07bcd2:   call   0xee07bcdc                   ;; 3858:   __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::throw_IncompatibleClassChangeErrorVerbose),
  0xee07bcd7:   jmp    0xee07bd7f
  0xee07bcdc:   push   %eax
  0xee07bcdd:   push   %edx
  0xee07bcde:   lea    0xc(%esp),%eax
  0xee07bce2:   mov    %esi,-0x20(%ebp)
  0xee07bce5:   cmpl   $0x0,-0x8(%ebp)
  0xee07bce9:   je     0xee07bd00
  0xee07bcef:   push   $0xf78569d8
  0xee07bcf4:   call   0xee07bcf9
  0xee07bcf9:   pusha  
  0xee07bcfa:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07bcff:   hlt    
  0xee07bd00:   push   %eax
  0xee07bd01:   push   %edx
  0xee07bd02:   push   %ecx
  0xee07bd03:   call   0xf704a910 = Thread::current()
  0xee07bd08:   pop    %ecx
  0xee07bd09:   pop    %edx
  0xee07bd0a:   mov    %eax,%edi
  0xee07bd0c:   pop    %eax
  0xee07bd0d:   push   %edi
  0xee07bd0e:   vzeroupper 
  0xee07bd11:   mov    %ebp,0x230(%edi)
  0xee07bd17:   mov    %eax,0x228(%edi)
  0xee07bd1d:   call   0xf6c0ba90 = InterpreterRuntime::throw_IncompatibleClassChangeErrorVerbose(JavaThread*, Klass*, Klass*)
  0xee07bd22:   add    $0xc,%esp
  0xee07bd25:   push   %eax
  0xee07bd26:   push   %edx
  0xee07bd27:   push   %ecx
  0xee07bd28:   call   0xf704a910 = Thread::current()
  0xee07bd2d:   pop    %ecx
  0xee07bd2e:   pop    %edx
  0xee07bd2f:   cmp    %eax,%edi
  0xee07bd31:   je     0xee07bd48
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07bd37:   push   $0xf78b5a48
  0xee07bd3c:   call   0xee07bd41
  0xee07bd41:   pusha  
  0xee07bd42:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07bd47:   hlt    
  0xee07bd48:   pop    %eax
  0xee07bd49:   movl   $0x0,0x228(%edi)
  0xee07bd53:   movl   $0x0,0x230(%edi)
  0xee07bd5d:   movl   $0x0,0x22c(%edi)
  0xee07bd67:   vzeroupper 
  0xee07bd6a:   cmpl   $0x0,0x4(%edi)
  0xee07bd6e:   jne    0xee05bbe0
  0xee07bd74:   mov    -0x20(%ebp),%esi
  0xee07bd77:   mov    -0x1c(%ebp),%edi
  0xee07bd7a:   lea    0x0(%ebp,%edi,4),%edi
  0xee07bd7e:   ret    
  0xee07bd7f:   push   $0xf77a6b02                  ;; 3861:   __ should_not_reach_here();
  0xee07bd84:   call   0xee07bd89
  0xee07bd89:   pusha  
  0xee07bd8a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07bd8f:   hlt    
  0xee07bd90:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee07bd95:   call   0xee07bd9a
  0xee07bd9a:   pusha  
  0xee07bd9b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07bda0:   hlt    
  0xee07bda1:   nop
  0xee07bda2:   nop
  0xee07bda3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
invokedynamic  186 invokedynamic  [0xee07bdc0, 0xee07c018]  600 bytes

--------------------------------------------------------------------------------
  0xee07bdc0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07bdc3:   vmovss %xmm0,(%esp)
  0xee07bdc8:   jmp    0xee07bdd9                   ;; 1751:       __ jmpb(L);
  0xee07bdca:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07bdcd:   vmovsd %xmm0,(%esp)
  0xee07bdd2:   jmp    0xee07bdd9                   ;; 1754:       __ jmpb(L);
  0xee07bdd4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07bdd5:   push   %eax
  0xee07bdd6:   jmp    0xee07bdd9                   ;; 1765:       __ jmpb(L);
  0xee07bdd8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07bdd9:   mov    %esi,-0x20(%ebp)             ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3568:   __ save_bcp();
  0xee07bddc:   mov    0x1(%esi),%edx               ;; 2666:   __ get_cache_and_index_and_bytecode_at_bcp(cache, index, temp, byte_no, 1, index_size);
  0xee07bddf:   not    %edx
  0xee07bde1:   mov    -0x18(%ebp),%ecx
  0xee07bde4:   shl    $0x2,%edx
  0xee07bde7:   mov    0x1c(%ecx,%edx,4),%ebx
  0xee07bdeb:   shr    $0x10,%ebx
  0xee07bdee:   and    $0xff,%ebx
  0xee07bdf4:   cmp    $0xba,%ebx                   ;; 2667:   __ cmpl(temp, code);  // have we resolved this bytecode?
  0xee07bdfa:   je     0xee07bebc                   ;; 2668:   __ jcc(Assembler::equal, resolved);
  0xee07be00:   mov    $0xba,%ebx                   ;; 2672:   __ bind(L_clinit_barrier_slow);
                                                    ;; 2674:   __ movl(temp, code);
  0xee07be05:   call   0xee07be0f                   ;; 2675:   __ call_VM(noreg, entry, temp);
  0xee07be0a:   jmp    0xee07beb1
  0xee07be0f:   push   %ebx
  0xee07be10:   lea    0x8(%esp),%eax
  0xee07be14:   mov    %esi,-0x20(%ebp)
  0xee07be17:   cmpl   $0x0,-0x8(%ebp)
  0xee07be1b:   je     0xee07be32
  0xee07be21:   push   $0xf78569d8
  0xee07be26:   call   0xee07be2b
  0xee07be2b:   pusha  
  0xee07be2c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07be31:   hlt    
  0xee07be32:   push   %eax
  0xee07be33:   push   %edx
  0xee07be34:   push   %ecx
  0xee07be35:   call   0xf704a910 = Thread::current()
  0xee07be3a:   pop    %ecx
  0xee07be3b:   pop    %edx
  0xee07be3c:   mov    %eax,%edi
  0xee07be3e:   pop    %eax
  0xee07be3f:   push   %edi
  0xee07be40:   vzeroupper 
  0xee07be43:   mov    %ebp,0x230(%edi)
  0xee07be49:   mov    %eax,0x228(%edi)
  0xee07be4f:   call   0xf6c166c0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0xee07be54:   add    $0x8,%esp
  0xee07be57:   push   %eax
  0xee07be58:   push   %edx
  0xee07be59:   push   %ecx
  0xee07be5a:   call   0xf704a910 = Thread::current()
  0xee07be5f:   pop    %ecx
  0xee07be60:   pop    %edx
  0xee07be61:   cmp    %eax,%edi
  0xee07be63:   je     0xee07be7a
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07be69:   push   $0xf78b5a48
  0xee07be6e:   call   0xee07be73
  0xee07be73:   pusha  
  0xee07be74:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07be79:   hlt    
  0xee07be7a:   pop    %eax
  0xee07be7b:   movl   $0x0,0x228(%edi)
  0xee07be85:   movl   $0x0,0x230(%edi)
  0xee07be8f:   movl   $0x0,0x22c(%edi)
  0xee07be99:   vzeroupper 
  0xee07be9c:   cmpl   $0x0,0x4(%edi)
  0xee07bea0:   jne    0xee05bbe0
  0xee07bea6:   mov    -0x20(%ebp),%esi
  0xee07bea9:   mov    -0x1c(%ebp),%edi
  0xee07beac:   lea    0x0(%ebp,%edi,4),%edi
  0xee07beb0:   ret    
  0xee07beb1:   mov    0x1(%esi),%edx               ;; 2677:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee07beb4:   not    %edx
  0xee07beb6:   mov    -0x18(%ebp),%ecx
  0xee07beb9:   shl    $0x2,%edx
  0xee07bebc:   mov    0x20(%ecx,%edx,4),%ebx       ;; 2679:   __ bind(resolved);
                                                    ;; 2748:   __ load_resolved_method_at_index(byte_no, method, cache, index);
  0xee07bec0:   mov    0x24(%ecx,%edx,4),%eax       ;; 2752:     __ movptr(itable_index, Address(cache, index, Address::times_ptr, index_offset));
  0xee07bec4:   mov    0x28(%ecx,%edx,4),%edx       ;; 2754:   __ movl(flags, Address(cache, index, Address::times_ptr, flags_offset));
  0xee07bec8:   test   $0x1000000,%edx              ;; 3575:     __ testl(flags, (1 << ConstantPoolCacheEntry::has_appendix_shift));
  0xee07bece:   je     0xee07beee                   ;; 3576:     __ jcc(Assembler::zero, L_no_push);
  0xee07bed4:   push   %ebx                         ;; 3580:     __ push(rbx);
  0xee07bed5:   mov    %eax,%ebx                    ;; 3581:     __ mov(rbx, index);
  0xee07bed7:   mov    -0xc(%ebp),%eax              ;; 3582:     __ load_resolved_reference_at_index(index, rbx);
  0xee07beda:   mov    0x8(%eax),%eax
  0xee07bedd:   mov    0x8(%eax),%eax
  0xee07bee0:   mov    0xc(%eax),%eax
  0xee07bee3:   mov    0x8(%eax),%eax
  0xee07bee6:   mov    (%eax),%eax
  0xee07bee8:   mov    0xc(%eax,%ebx,4),%eax
  0xee07beec:   pop    %ebx                         ;; 3583:     __ pop(rbx);
  0xee07beed:   push   %eax                         ;; 3584:     __ push(index);  // push appendix (MethodType, CallSite, etc.)
  0xee07beee:   shr    $0x1c,%edx                   ;; 3585:     __ bind(L_no_push);
                                                    ;; 3605:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee07bef1:   mov    -0x833c6a0(,%edx,4),%edx     ;; 3616:     __ movptr(flags, ArrayAddress(table, Address(noreg, flags, Address::times_ptr)));
  0xee07bef8:   push   %edx                         ;; 3621:   __ push(flags);
  0xee07bef9:   mov    -0x14(%ebp),%esi             ;; 3905:   __ profile_call(rbcp);
  0xee07befc:   test   %esi,%esi
  0xee07befe:   je     0xee07bf12
  0xee07bf04:   addl   $0x1,0x8(%esi)
  0xee07bf08:   sbbl   $0x0,0x8(%esi)
  0xee07bf0c:   add    $0xc,%esi
  0xee07bf0f:   mov    %esi,-0x14(%ebp)
  0xee07bf12:   mov    -0x14(%ebp),%edx             ;; 3906:   __ profile_arguments_type(rdx, rbx_method, rbcp, false);
  0xee07bf15:   test   %edx,%edx
  0xee07bf17:   je     0xee07bffc
  0xee07bf1d:   cmpb   $0xa,-0xc(%edx)
  0xee07bf21:   jne    0xee07bffc
  0xee07bf27:   add    $0x4,%edx
  0xee07bf2a:   mov    -0x4(%edx),%esi
  0xee07bf2d:   sub    $0x0,%esi
  0xee07bf30:   cmp    $0x2,%esi
  0xee07bf33:   jl     0xee07bff4
  0xee07bf39:   mov    0x8(%ebx),%esi
  0xee07bf3c:   movzwl 0x24(%esi),%esi
  0xee07bf40:   sub    (%edx),%esi
  0xee07bf42:   sub    $0x1,%esi
  0xee07bf45:   mov    0x4(%esp,%esi,4),%esi
  0xee07bf49:   test   %esi,%esi
  0xee07bf4b:   jne    0xee07bf53
  0xee07bf4d:   orl    $0x1,0x4(%edx)
  0xee07bf51:   jmp    0xee07bf89
  0xee07bf53:   mov    0x4(%esi),%esi
  0xee07bf56:   xor    0x4(%edx),%esi
  0xee07bf59:   test   $0xfffffffc,%esi
  0xee07bf5f:   je     0xee07bf89
  0xee07bf61:   test   $0x2,%esi
  0xee07bf67:   jne    0xee07bf89
  0xee07bf69:   cmpl   $0x0,0x4(%edx)
  0xee07bf6d:   je     0xee07bf86
  0xee07bf6f:   cmpl   $0x1,0x4(%edx)
  0xee07bf73:   je     0xee07bf86
  0xee07bf75:   xor    0x4(%edx),%esi
  0xee07bf78:   test   $0xfffffffc,%esi
  0xee07bf7e:   je     0xee07bf89
  0xee07bf80:   orl    $0x2,0x4(%edx)
  0xee07bf84:   jmp    0xee07bf89
  0xee07bf86:   mov    %esi,0x4(%edx)
  0xee07bf89:   add    $0x8,%edx
  0xee07bf8c:   mov    -0xc(%edx),%esi
  0xee07bf8f:   sub    $0x2,%esi
  0xee07bf92:   cmp    $0x2,%esi
  0xee07bf95:   jl     0xee07bff4
  0xee07bf9b:   mov    0x8(%ebx),%esi
  0xee07bf9e:   movzwl 0x24(%esi),%esi
  0xee07bfa2:   sub    (%edx),%esi
  0xee07bfa4:   sub    $0x1,%esi
  0xee07bfa7:   mov    0x4(%esp,%esi,4),%esi
  0xee07bfab:   test   %esi,%esi
  0xee07bfad:   jne    0xee07bfb5
  0xee07bfaf:   orl    $0x1,0x4(%edx)
  0xee07bfb3:   jmp    0xee07bfeb
  0xee07bfb5:   mov    0x4(%esi),%esi
  0xee07bfb8:   xor    0x4(%edx),%esi
  0xee07bfbb:   test   $0xfffffffc,%esi
  0xee07bfc1:   je     0xee07bfeb
  0xee07bfc3:   test   $0x2,%esi
  0xee07bfc9:   jne    0xee07bfeb
  0xee07bfcb:   cmpl   $0x0,0x4(%edx)
  0xee07bfcf:   je     0xee07bfe8
  0xee07bfd1:   cmpl   $0x1,0x4(%edx)
  0xee07bfd5:   je     0xee07bfe8
  0xee07bfd7:   xor    0x4(%edx),%esi
  0xee07bfda:   test   $0xfffffffc,%esi
  0xee07bfe0:   je     0xee07bfeb
  0xee07bfe2:   orl    $0x2,0x4(%edx)
  0xee07bfe6:   jmp    0xee07bfeb
  0xee07bfe8:   mov    %esi,0x4(%edx)
  0xee07bfeb:   add    $0x8,%edx
  0xee07bfee:   mov    -0x14(%edx),%esi
  0xee07bff1:   sub    $0x4,%esi
  0xee07bff4:   shl    $0x2,%esi
  0xee07bff7:   add    %esi,%edx
  0xee07bff9:   mov    %edx,-0x14(%ebp)
  0xee07bffc:   lea    0x4(%esp),%esi               ;; 3908:   __ verify_oop(rax_callsite);
                                                    ;; 3910:   __ jump_from_interpreted(rbx_method, rdx);
  0xee07c000:   mov    %esi,-0x8(%ebp)
  0xee07c003:   jmp    *0x40(%ebx)
  0xee07c006:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee07c00b:   call   0xee07c010
  0xee07c010:   pusha  
  0xee07c011:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07c016:   hlt    
  0xee07c017:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
new  187 new  [0xee07c040, 0xee07c218]  472 bytes

--------------------------------------------------------------------------------
  0xee07c040:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07c043:   vmovss %xmm0,(%esp)
  0xee07c048:   jmp    0xee07c059                   ;; 1751:       __ jmpb(L);
  0xee07c04a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07c04d:   vmovsd %xmm0,(%esp)
  0xee07c052:   jmp    0xee07c059                   ;; 1754:       __ jmpb(L);
  0xee07c054:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07c055:   push   %eax
  0xee07c056:   jmp    0xee07c059                   ;; 1765:       __ jmpb(L);
  0xee07c058:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07c059:   movzwl 0x1(%esi),%edx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3918:   __ get_unsigned_2_byte_index_at_bcp(rdx, 1);
  0xee07c05d:   bswap  %edx
  0xee07c05f:   shr    $0x10,%edx
  0xee07c062:   mov    -0xc(%ebp),%ecx              ;; 3924:   __ get_cpool_and_tags(rcx, rax);
  0xee07c065:   mov    0x8(%ecx),%ecx
  0xee07c068:   mov    0x8(%ecx),%ecx
  0xee07c06b:   mov    0x8(%ecx),%eax
  0xee07c06e:   cmpb   $0x7,0x4(%eax,%edx,1)        ;; 3930:   __ cmpb(Address(rax, rdx, Address::times_1, tags_offset), JVM_CONSTANT_Class);
  0xee07c073:   jne    0xee07c139                   ;; 3931:   __ jcc(Assembler::notEqual, slow_case_no_pop);
  0xee07c079:   mov    0x30(%ecx,%edx,4),%dx        ;; 3934:   __ load_resolved_klass_at_index(rcx, rcx, rdx);
  0xee07c07e:   mov    0x18(%ecx),%ecx
  0xee07c081:   mov    0x4(%ecx,%edx,4),%ecx
  0xee07c085:   push   %ecx                         ;; 3935:   __ push(rcx);  // save the contexts of klass for initializing the header
  0xee07c086:   cmpb   $0x5,0xb3(%ecx)              ;; 3939:   __ cmpb(Address(rcx, InstanceKlass::init_state_offset()), InstanceKlass::fully_initialized);
  0xee07c08d:   jne    0xee07c138                   ;; 3940:   __ jcc(Assembler::notEqual, slow_case);
  0xee07c093:   mov    0x8(%ecx),%edx               ;; 3943:   __ movl(rdx, Address(rcx, Klass::layout_helper_offset()));
  0xee07c096:   test   $0x1,%dl                     ;; 3945:   __ testl(rdx, Klass::_lh_instance_slow_path_bit);
  0xee07c099:   jne    0xee07c138                   ;; 3946:   __ jcc(Assembler::notZero, slow_case);
  0xee07c09f:   push   %eax                         ;; 3960:     NOT_LP64(__ get_thread(thread);)
  0xee07c0a0:   push   %edx
  0xee07c0a1:   push   %ecx
  0xee07c0a2:   call   0xf704a910 = Thread::current()
  0xee07c0a7:   pop    %ecx
  0xee07c0a8:   pop    %edx
  0xee07c0a9:   mov    %eax,%ecx
  0xee07c0ab:   pop    %eax
  0xee07c0ac:   mov    0xd8(%ecx),%eax              ;; 3961:     __ tlab_allocate(thread, rax, rdx, 0, rcx, rbx, slow_case);
  0xee07c0b2:   lea    (%eax,%edx,1),%ebx
  0xee07c0b5:   cmp    0xe0(%ecx),%ebx
  0xee07c0bb:   ja     0xee07c138
  0xee07c0c1:   mov    %ebx,0xd8(%ecx)
  0xee07c0c7:   sub    $0x8,%edx                    ;; 3969:     __ decrement(rdx, sizeof(oopDesc));
  0xee07c0ca:   je     0xee07c0f6                   ;; 3970:     __ jcc(Assembler::zero, initialize_header);
  0xee07c0d0:   xor    %ecx,%ecx                    ;; 3974:     __ xorl(rcx, rcx);    // use zero reg to clear memory (shorter code)
  0xee07c0d2:   shr    $0x3,%edx                    ;; 3975:     __ shrl(rdx, LogBytesPerLong); // divide by 2*oopSize and set carry flag if odd
  0xee07c0d5:   jae    0xee07c0ec                   ;; 3982:     __ jcc(Assembler::carryClear, L);
  0xee07c0db:   push   $0xf7924e94                  ;; 3983:     __ stop("object size is not multiple of 2 - adjust this code");
  0xee07c0e0:   call   0xee07c0e5
  0xee07c0e5:   pusha  
  0xee07c0e6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07c0eb:   hlt    
  0xee07c0ec:   mov    %ecx,0x4(%eax,%edx,8)        ;; 3984:     __ bind(L);
                                                    ;; 3990:     __ bind(loop);
                                                    ;; 3991:     __ movptr(Address(rax, rdx, Address::times_8, sizeof(oopDesc) - 1*oopSize), rcx);
  0xee07c0f0:   mov    %ecx,(%eax,%edx,8)           ;; 3992:     NOT_LP64(__ movptr(Address(rax, rdx, Address::times_8, sizeof(oopDesc) - 2*oopSize), rcx));
  0xee07c0f3:   dec    %edx                         ;; 3993:     __ decrement(rdx);
  0xee07c0f4:   jne    0xee07c0ec                   ;; 3994:     __ jcc(Assembler::notZero, loop);
  0xee07c0f6:   movl   $0x1,(%eax)                  ;; 3998:     __ bind(initialize_header);
                                                    ;; 3999:     __ movptr(Address(rax, oopDesc::mark_offset_in_bytes()),
  0xee07c0fc:   pop    %ecx                         ;; 4001:     __ pop(rcx);   // get saved klass back in the register.
  0xee07c0fd:   mov    %ecx,0x4(%eax)               ;; 4006:     __ store_klass(rax, rcx, rscratch1);  // klass
  0xee07c100:   cmpb   $0x0,0xf7ca3a0c
  0xee07c107:   je     0xee07c133
  0xee07c10d:   push   %eax                         ;; 4011:       __ push(atos);
  0xee07c10e:   push   %eax                         ;; 4012:       __ call_VM_leaf(
  0xee07c10f:   cmpl   $0x0,-0x8(%ebp)
  0xee07c113:   je     0xee07c12a
  0xee07c119:   push   $0xf785694c
  0xee07c11e:   call   0xee07c123
  0xee07c123:   pusha  
  0xee07c124:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07c129:   hlt    
  0xee07c12a:   call   0xf739a430 = SharedRuntime::dtrace_object_alloc(oopDesc*)
  0xee07c12f:   add    $0x4,%esp
  0xee07c132:   pop    %eax                         ;; 4014:       __ pop(atos);
  0xee07c133:   jmp    0xee07c208                   ;; 4017:     __ jmp(done);
  0xee07c138:   pop    %ecx                         ;; 4021:   __ bind(slow_case);
                                                    ;; 4022:   __ pop(rcx);   // restore stack pointer to what it was when we came in.
  0xee07c139:   mov    -0xc(%ebp),%eax              ;; 4023:   __ bind(slow_case_no_pop);
                                                    ;; 4028:   __ get_constant_pool(rarg1);
  0xee07c13c:   mov    0x8(%eax),%eax
  0xee07c13f:   mov    0x8(%eax),%eax
  0xee07c142:   movzwl 0x1(%esi),%edx               ;; 4029:   __ get_unsigned_2_byte_index_at_bcp(rarg2, 1);
  0xee07c146:   bswap  %edx
  0xee07c148:   shr    $0x10,%edx
  0xee07c14b:   call   0xee07c155
  0xee07c150:   jmp    0xee07c208
  0xee07c155:   push   %edx
  0xee07c156:   push   %eax
  0xee07c157:   lea    0xc(%esp),%eax
  0xee07c15b:   mov    %esi,-0x20(%ebp)
  0xee07c15e:   cmpl   $0x0,-0x8(%ebp)
  0xee07c162:   je     0xee07c179
  0xee07c168:   push   $0xf78569d8
  0xee07c16d:   call   0xee07c172
  0xee07c172:   pusha  
  0xee07c173:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07c178:   hlt    
  0xee07c179:   push   %eax
  0xee07c17a:   push   %edx
  0xee07c17b:   push   %ecx
  0xee07c17c:   call   0xf704a910 = Thread::current()
  0xee07c181:   pop    %ecx
  0xee07c182:   pop    %edx
  0xee07c183:   mov    %eax,%edi
  0xee07c185:   pop    %eax
  0xee07c186:   push   %edi
  0xee07c187:   vzeroupper 
  0xee07c18a:   mov    %ebp,0x230(%edi)
  0xee07c190:   mov    %eax,0x228(%edi)
  0xee07c196:   call   0xf6c12a70 = InterpreterRuntime::_new(JavaThread*, ConstantPool*, int)
  0xee07c19b:   add    $0xc,%esp
  0xee07c19e:   push   %eax
  0xee07c19f:   push   %edx
  0xee07c1a0:   push   %ecx
  0xee07c1a1:   call   0xf704a910 = Thread::current()
  0xee07c1a6:   pop    %ecx
  0xee07c1a7:   pop    %edx
  0xee07c1a8:   cmp    %eax,%edi
  0xee07c1aa:   je     0xee07c1c1
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07c1b0:   push   $0xf78b5a48
  0xee07c1b5:   call   0xee07c1ba
  0xee07c1ba:   pusha  
  0xee07c1bb:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07c1c0:   hlt    
  0xee07c1c1:   pop    %eax
  0xee07c1c2:   movl   $0x0,0x228(%edi)
  0xee07c1cc:   movl   $0x0,0x230(%edi)
  0xee07c1d6:   movl   $0x0,0x22c(%edi)
  0xee07c1e0:   vzeroupper 
  0xee07c1e3:   cmpl   $0x0,0x4(%edi)
  0xee07c1e7:   jne    0xee05bbe0
  0xee07c1ed:   mov    0x254(%edi),%eax
  0xee07c1f3:   movl   $0x0,0x254(%edi)
  0xee07c1fd:   mov    -0x20(%ebp),%esi
  0xee07c200:   mov    -0x1c(%ebp),%edi
  0xee07c203:   lea    0x0(%ebp,%edi,4),%edi
  0xee07c207:   ret    
  0xee07c208:   movzbl 0x3(%esi),%ebx               ;; 4031:    __ verify_oop(rax);
                                                    ;; 4034:   __ bind(done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07c20c:   add    $0x3,%esi
  0xee07c20f:   jmp    *-0x833cea0(,%ebx,4)
  0xee07c216:   nop
  0xee07c217:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
newarray  188 newarray  [0xee07c240, 0xee07c310]  208 bytes

--------------------------------------------------------------------------------
  0xee07c240:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee07c241:   movzbl 0x1(%esi),%edx               ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 4040:   __ load_unsigned_byte(rarg1, at_bcp(1));
  0xee07c245:   call   0xee07c24f
  0xee07c24a:   jmp    0xee07c302
  0xee07c24f:   push   %eax
  0xee07c250:   push   %edx
  0xee07c251:   lea    0xc(%esp),%eax
  0xee07c255:   mov    %esi,-0x20(%ebp)
  0xee07c258:   cmpl   $0x0,-0x8(%ebp)
  0xee07c25c:   je     0xee07c273
  0xee07c262:   push   $0xf78569d8
  0xee07c267:   call   0xee07c26c
  0xee07c26c:   pusha  
  0xee07c26d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07c272:   hlt    
  0xee07c273:   push   %eax
  0xee07c274:   push   %edx
  0xee07c275:   push   %ecx
  0xee07c276:   call   0xf704a910 = Thread::current()
  0xee07c27b:   pop    %ecx
  0xee07c27c:   pop    %edx
  0xee07c27d:   mov    %eax,%edi
  0xee07c27f:   pop    %eax
  0xee07c280:   push   %edi
  0xee07c281:   vzeroupper 
  0xee07c284:   mov    %ebp,0x230(%edi)
  0xee07c28a:   mov    %eax,0x228(%edi)
  0xee07c290:   call   0xf6c0a9b0 = InterpreterRuntime::newarray(JavaThread*, BasicType, int)
  0xee07c295:   add    $0xc,%esp
  0xee07c298:   push   %eax
  0xee07c299:   push   %edx
  0xee07c29a:   push   %ecx
  0xee07c29b:   call   0xf704a910 = Thread::current()
  0xee07c2a0:   pop    %ecx
  0xee07c2a1:   pop    %edx
  0xee07c2a2:   cmp    %eax,%edi
  0xee07c2a4:   je     0xee07c2bb
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07c2aa:   push   $0xf78b5a48
  0xee07c2af:   call   0xee07c2b4
  0xee07c2b4:   pusha  
  0xee07c2b5:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07c2ba:   hlt    
  0xee07c2bb:   pop    %eax
  0xee07c2bc:   movl   $0x0,0x228(%edi)
  0xee07c2c6:   movl   $0x0,0x230(%edi)
  0xee07c2d0:   movl   $0x0,0x22c(%edi)
  0xee07c2da:   vzeroupper 
  0xee07c2dd:   cmpl   $0x0,0x4(%edi)
  0xee07c2e1:   jne    0xee05bbe0
  0xee07c2e7:   mov    0x254(%edi),%eax
  0xee07c2ed:   movl   $0x0,0x254(%edi)
  0xee07c2f7:   mov    -0x20(%ebp),%esi
  0xee07c2fa:   mov    -0x1c(%ebp),%edi
  0xee07c2fd:   lea    0x0(%ebp,%edi,4),%edi
  0xee07c301:   ret    
  0xee07c302:   movzbl 0x2(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07c306:   add    $0x2,%esi
  0xee07c309:   jmp    *-0x833cea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
anewarray  189 anewarray  [0xee07c340, 0xee07c420]  224 bytes

--------------------------------------------------------------------------------
  0xee07c340:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee07c341:   movzwl 0x1(%esi),%edx               ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 4051:   __ get_unsigned_2_byte_index_at_bcp(rarg2, 1);
  0xee07c345:   bswap  %edx
  0xee07c347:   shr    $0x10,%edx
  0xee07c34a:   mov    -0xc(%ebp),%ecx              ;; 4052:   __ get_constant_pool(rarg1);
  0xee07c34d:   mov    0x8(%ecx),%ecx
  0xee07c350:   mov    0x8(%ecx),%ecx
  0xee07c353:   call   0xee07c35d
  0xee07c358:   jmp    0xee07c411
  0xee07c35d:   push   %eax
  0xee07c35e:   push   %edx
  0xee07c35f:   push   %ecx
  0xee07c360:   lea    0x10(%esp),%eax
  0xee07c364:   mov    %esi,-0x20(%ebp)
  0xee07c367:   cmpl   $0x0,-0x8(%ebp)
  0xee07c36b:   je     0xee07c382
  0xee07c371:   push   $0xf78569d8
  0xee07c376:   call   0xee07c37b
  0xee07c37b:   pusha  
  0xee07c37c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07c381:   hlt    
  0xee07c382:   push   %eax
  0xee07c383:   push   %edx
  0xee07c384:   push   %ecx
  0xee07c385:   call   0xf704a910 = Thread::current()
  0xee07c38a:   pop    %ecx
  0xee07c38b:   pop    %edx
  0xee07c38c:   mov    %eax,%edi
  0xee07c38e:   pop    %eax
  0xee07c38f:   push   %edi
  0xee07c390:   vzeroupper 
  0xee07c393:   mov    %ebp,0x230(%edi)
  0xee07c399:   mov    %eax,0x228(%edi)
  0xee07c39f:   call   0xf6c124c0 = InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int)
  0xee07c3a4:   add    $0x10,%esp
  0xee07c3a7:   push   %eax
  0xee07c3a8:   push   %edx
  0xee07c3a9:   push   %ecx
  0xee07c3aa:   call   0xf704a910 = Thread::current()
  0xee07c3af:   pop    %ecx
  0xee07c3b0:   pop    %edx
  0xee07c3b1:   cmp    %eax,%edi
  0xee07c3b3:   je     0xee07c3ca
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07c3b9:   push   $0xf78b5a48
  0xee07c3be:   call   0xee07c3c3
  0xee07c3c3:   pusha  
  0xee07c3c4:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07c3c9:   hlt    
  0xee07c3ca:   pop    %eax
  0xee07c3cb:   movl   $0x0,0x228(%edi)
  0xee07c3d5:   movl   $0x0,0x230(%edi)
  0xee07c3df:   movl   $0x0,0x22c(%edi)
  0xee07c3e9:   vzeroupper 
  0xee07c3ec:   cmpl   $0x0,0x4(%edi)
  0xee07c3f0:   jne    0xee05bbe0
  0xee07c3f6:   mov    0x254(%edi),%eax
  0xee07c3fc:   movl   $0x0,0x254(%edi)
  0xee07c406:   mov    -0x20(%ebp),%esi
  0xee07c409:   mov    -0x1c(%ebp),%edi
  0xee07c40c:   lea    0x0(%ebp,%edi,4),%edi
  0xee07c410:   ret    
  0xee07c411:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07c415:   add    $0x3,%esi
  0xee07c418:   jmp    *-0x833cea0(,%ebx,4)
  0xee07c41f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
arraylength  190 arraylength  [0xee07c440, 0xee07c450]  16 bytes

--------------------------------------------------------------------------------
  0xee07c440:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee07c441:   mov    0x8(%eax),%eax               ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 4059:   __ null_check(rax, arrayOopDesc::length_offset_in_bytes());
                                                    ;; 4060:   __ movl(rax, Address(rax, arrayOopDesc::length_offset_in_bytes()));
  0xee07c444:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07c448:   inc    %esi
  0xee07c449:   jmp    *-0x833dea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
athrow  191 athrow  [0xee07c480, 0xee07c49c]  28 bytes

--------------------------------------------------------------------------------
  0xee07c480:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee07c481:   cmp    (%eax),%eax                  ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 4226:   __ null_check(rax);
  0xee07c483:   jmp    0xee06cc71                   ;; 4227:   __ jump(ExternalAddress(Interpreter::throw_exception_entry()));
  0xee07c488:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee07c48d:   call   0xee07c492
  0xee07c492:   pusha  
  0xee07c493:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07c498:   hlt    
  0xee07c499:   nop
  0xee07c49a:   nop
  0xee07c49b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
checkcast  192 checkcast  [0xee07c4c0, 0xee07c728]  616 bytes

--------------------------------------------------------------------------------
  0xee07c4c0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee07c4c1:   push   %eax                         ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee07c4c2:   push   %ebx
  0xee07c4c3:   push   %ecx
  0xee07c4c4:   push   %edx
  0xee07c4c5:   mov    -0x14(%ebp),%ecx
  0xee07c4c8:   test   %ecx,%ecx
  0xee07c4ca:   je     0xee07c50b
  0xee07c4d0:   mov    -0xc(%ebp),%ebx
  0xee07c4d3:   movzwl 0x2(%ecx),%edx
  0xee07c4d7:   add    0x8(%ebx),%edx
  0xee07c4da:   lea    0x2c(%edx),%edx
  0xee07c4dd:   cmp    %esi,%edx
  0xee07c4df:   je     0xee07c50b
  0xee07c4e5:   push   %ecx
  0xee07c4e6:   push   %esi
  0xee07c4e7:   push   %ebx
  0xee07c4e8:   cmpl   $0x0,-0x8(%ebp)
  0xee07c4ec:   je     0xee07c503
  0xee07c4f2:   push   $0xf785694c
  0xee07c4f7:   call   0xee07c4fc
  0xee07c4fc:   pusha  
  0xee07c4fd:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07c502:   hlt    
  0xee07c503:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee07c508:   add    $0xc,%esp
  0xee07c50b:   pop    %edx
  0xee07c50c:   pop    %ecx
  0xee07c50d:   pop    %ebx
  0xee07c50e:   pop    %eax
  0xee07c50f:   test   %eax,%eax                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 4066:   __ testptr(rax, rax); // object is in rax
  0xee07c511:   je     0xee07c705                   ;; 4067:   __ jcc(Assembler::zero, is_null);
  0xee07c517:   mov    -0xc(%ebp),%ecx              ;; 4070:   __ get_cpool_and_tags(rcx, rdx); // rcx=cpool, rdx=tags array
  0xee07c51a:   mov    0x8(%ecx),%ecx
  0xee07c51d:   mov    0x8(%ecx),%ecx
  0xee07c520:   mov    0x8(%ecx),%edx
  0xee07c523:   movzwl 0x1(%esi),%ebx               ;; 4071:   __ get_unsigned_2_byte_index_at_bcp(rbx, 1); // rbx=index
  0xee07c527:   bswap  %ebx
  0xee07c529:   shr    $0x10,%ebx
  0xee07c52c:   cmpb   $0x7,0x4(%edx,%ebx,1)        ;; 4073:   __ cmpb(Address(rdx, rbx,
  0xee07c531:   je     0xee07c60a                   ;; 4077:   __ jcc(Assembler::equal, quicked);
  0xee07c537:   push   %eax                         ;; 4078:   __ push(atos); // save receiver for result, and for GC
  0xee07c538:   call   0xee07c542
  0xee07c53d:   jmp    0xee07c5e3
  0xee07c542:   lea    0x4(%esp),%eax
  0xee07c546:   mov    %esi,-0x20(%ebp)
  0xee07c549:   cmpl   $0x0,-0x8(%ebp)
  0xee07c54d:   je     0xee07c564
  0xee07c553:   push   $0xf78569d8
  0xee07c558:   call   0xee07c55d
  0xee07c55d:   pusha  
  0xee07c55e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07c563:   hlt    
  0xee07c564:   push   %eax
  0xee07c565:   push   %edx
  0xee07c566:   push   %ecx
  0xee07c567:   call   0xf704a910 = Thread::current()
  0xee07c56c:   pop    %ecx
  0xee07c56d:   pop    %edx
  0xee07c56e:   mov    %eax,%edi
  0xee07c570:   pop    %eax
  0xee07c571:   push   %edi
  0xee07c572:   vzeroupper 
  0xee07c575:   mov    %ebp,0x230(%edi)
  0xee07c57b:   mov    %eax,0x228(%edi)
  0xee07c581:   call   0xf6c12220 = InterpreterRuntime::quicken_io_cc(JavaThread*)
  0xee07c586:   add    $0x4,%esp
  0xee07c589:   push   %eax
  0xee07c58a:   push   %edx
  0xee07c58b:   push   %ecx
  0xee07c58c:   call   0xf704a910 = Thread::current()
  0xee07c591:   pop    %ecx
  0xee07c592:   pop    %edx
  0xee07c593:   cmp    %eax,%edi
  0xee07c595:   je     0xee07c5ac
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07c59b:   push   $0xf78b5a48
  0xee07c5a0:   call   0xee07c5a5
  0xee07c5a5:   pusha  
  0xee07c5a6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07c5ab:   hlt    
  0xee07c5ac:   pop    %eax
  0xee07c5ad:   movl   $0x0,0x228(%edi)
  0xee07c5b7:   movl   $0x0,0x230(%edi)
  0xee07c5c1:   movl   $0x0,0x22c(%edi)
  0xee07c5cb:   vzeroupper 
  0xee07c5ce:   cmpl   $0x0,0x4(%edi)
  0xee07c5d2:   jne    0xee05bbe0
  0xee07c5d8:   mov    -0x20(%ebp),%esi
  0xee07c5db:   mov    -0x1c(%ebp),%edi
  0xee07c5de:   lea    0x0(%ebp,%edi,4),%edi
  0xee07c5e2:   ret    
  0xee07c5e3:   push   %eax                         ;; 4084:   __ get_thread(rdi);
  0xee07c5e4:   push   %edx
  0xee07c5e5:   push   %ecx
  0xee07c5e6:   call   0xf704a910 = Thread::current()
  0xee07c5eb:   pop    %ecx
  0xee07c5ec:   pop    %edx
  0xee07c5ed:   mov    %eax,%edi
  0xee07c5ef:   pop    %eax
  0xee07c5f0:   mov    0x258(%edi),%eax             ;; 4085:   __ get_vm_result_2(rax, rdi);
  0xee07c5f6:   movl   $0x0,0x258(%edi)
  0xee07c600:   mov    -0x1c(%ebp),%edi             ;; 4086:   __ restore_locals();
  0xee07c603:   lea    0x0(%ebp,%edi,4),%edi
  0xee07c607:   pop    %edx                         ;; 4091:   __ pop_ptr(rdx); // restore receiver
  0xee07c608:   jmp    0xee07c618                   ;; 4092:   __ jmpb(resolved);
  0xee07c60a:   mov    %eax,%edx                    ;; 4095:   __ bind(quicked);
                                                    ;; 4096:   __ mov(rdx, rax); // Save object in rdx; rax needed for subtype check
  0xee07c60c:   mov    0x30(%ecx,%ebx,4),%bx        ;; 4097:   __ load_resolved_klass_at_index(rax, rcx, rbx);
  0xee07c611:   mov    0x18(%ecx),%ecx
  0xee07c614:   mov    0x4(%ecx,%ebx,4),%eax
  0xee07c618:   mov    0x4(%edx),%ebx               ;; 4099:   __ bind(resolved);
                                                    ;; 4100:   __ load_klass(rbx, rdx, rscratch1);
  0xee07c61b:   mov    -0x14(%ebp),%ecx             ;; 4104:   __ gen_subtype_check(rbx, ok_is_subtype);
  0xee07c61e:   test   %ecx,%ecx
  0xee07c620:   je     0xee07c6a4
  0xee07c626:   mov    0xc(%ecx),%edi
  0xee07c629:   cmp    %ebx,%edi
  0xee07c62b:   jne    0xee07c63e
  0xee07c631:   addl   $0x1,0x10(%ecx)
  0xee07c635:   sbbl   $0x0,0x10(%ecx)
  0xee07c639:   jmp    0xee07c697
  0xee07c63e:   test   %edi,%edi
  0xee07c640:   je     0xee07c676
  0xee07c646:   mov    0x14(%ecx),%edi
  0xee07c649:   cmp    %ebx,%edi
  0xee07c64b:   jne    0xee07c65e
  0xee07c651:   addl   $0x1,0x18(%ecx)
  0xee07c655:   sbbl   $0x0,0x18(%ecx)
  0xee07c659:   jmp    0xee07c697
  0xee07c65e:   test   %edi,%edi
  0xee07c660:   jne    0xee07c697
  0xee07c666:   mov    %ebx,0x14(%ecx)
  0xee07c669:   mov    $0x1,%edi
  0xee07c66e:   mov    %edi,0x18(%ecx)
  0xee07c671:   jmp    0xee07c697
  0xee07c676:   cmp    0x14(%ecx),%ebx
  0xee07c679:   jne    0xee07c68c
  0xee07c67f:   addl   $0x1,0x18(%ecx)
  0xee07c683:   sbbl   $0x0,0x18(%ecx)
  0xee07c687:   jmp    0xee07c697
  0xee07c68c:   mov    %ebx,0xc(%ecx)
  0xee07c68f:   mov    $0x1,%edi
  0xee07c694:   mov    %edi,0x10(%ecx)
  0xee07c697:   mov    -0x1c(%ebp),%edi
  0xee07c69a:   lea    0x0(%ebp,%edi,4),%edi
  0xee07c69e:   add    $0x1c,%ecx
  0xee07c6a1:   mov    %ecx,-0x14(%ebp)
  0xee07c6a4:   cmp    %eax,%ebx
  0xee07c6a6:   je     0xee07c6fe
  0xee07c6ac:   mov    0x14(%eax),%ecx
  0xee07c6af:   cmp    (%ebx,%ecx,1),%eax
  0xee07c6b2:   je     0xee07c6fe
  0xee07c6b8:   cmp    $0x1c,%ecx
  0xee07c6bb:   jne    0xee07c6df
  0xee07c6c1:   push   %edi
  0xee07c6c2:   incl   0xf7cb5bc0
  0xee07c6c8:   mov    0x20(%ebx),%edi
  0xee07c6cb:   mov    (%edi),%ecx
  0xee07c6cd:   add    $0x4,%edi
  0xee07c6d0:   test   %eax,%eax
  0xee07c6d2:   repnz scas %es:(%edi),%eax
  0xee07c6d4:   pop    %edi
  0xee07c6d5:   jne    0xee07c6df
  0xee07c6d7:   mov    %eax,0x1c(%ebx)
  0xee07c6da:   jmp    0xee07c6fe
  0xee07c6df:   mov    -0x14(%ebp),%ecx
  0xee07c6e2:   test   %ecx,%ecx
  0xee07c6e4:   je     0xee07c6f8
  0xee07c6ea:   addl   $0xffffffff,-0x14(%ecx)
  0xee07c6ee:   js     0xee07c6f8
  0xee07c6f4:   addl   $0x1,-0x14(%ecx)
  0xee07c6f8:   push   %edx                         ;; 4107:   __ push_ptr(rdx);
  0xee07c6f9:   jmp    0xee06dc25                   ;; 4109:   __ jump(ExternalAddress(Interpreter::_throw_ClassCastException_entry));
  0xee07c6fe:   mov    %edx,%eax                    ;; 4112:   __ bind(ok_is_subtype);
                                                    ;; 4113:   __ mov(rax, rdx); // Restore object in rdx
  0xee07c700:   jmp    0xee07c71a                   ;; 4117:     __ jmp(done);
  0xee07c705:   mov    -0x14(%ebp),%ecx             ;; 4118:     __ bind(is_null);
                                                    ;; 4119:     __ profile_null_seen(rcx);
  0xee07c708:   test   %ecx,%ecx
  0xee07c70a:   je     0xee07c71a
  0xee07c710:   orb    $0x1,0x1(%ecx)
  0xee07c714:   add    $0x1c,%ecx
  0xee07c717:   mov    %ecx,-0x14(%ebp)
  0xee07c71a:   movzbl 0x3(%esi),%ebx               ;; 4123:   __ bind(done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07c71e:   add    $0x3,%esi
  0xee07c721:   jmp    *-0x833cea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
instanceof  193 instanceof  [0xee07c740, 0xee07c9ac]  620 bytes

--------------------------------------------------------------------------------
  0xee07c740:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee07c741:   push   %eax                         ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee07c742:   push   %ebx
  0xee07c743:   push   %ecx
  0xee07c744:   push   %edx
  0xee07c745:   mov    -0x14(%ebp),%ecx
  0xee07c748:   test   %ecx,%ecx
  0xee07c74a:   je     0xee07c78b
  0xee07c750:   mov    -0xc(%ebp),%ebx
  0xee07c753:   movzwl 0x2(%ecx),%edx
  0xee07c757:   add    0x8(%ebx),%edx
  0xee07c75a:   lea    0x2c(%edx),%edx
  0xee07c75d:   cmp    %esi,%edx
  0xee07c75f:   je     0xee07c78b
  0xee07c765:   push   %ecx
  0xee07c766:   push   %esi
  0xee07c767:   push   %ebx
  0xee07c768:   cmpl   $0x0,-0x8(%ebp)
  0xee07c76c:   je     0xee07c783
  0xee07c772:   push   $0xf785694c
  0xee07c777:   call   0xee07c77c
  0xee07c77c:   pusha  
  0xee07c77d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07c782:   hlt    
  0xee07c783:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee07c788:   add    $0xc,%esp
  0xee07c78b:   pop    %edx
  0xee07c78c:   pop    %ecx
  0xee07c78d:   pop    %ebx
  0xee07c78e:   pop    %eax
  0xee07c78f:   test   %eax,%eax                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 4129:   __ testptr(rax, rax);
  0xee07c791:   je     0xee07c987                   ;; 4130:   __ jcc(Assembler::zero, is_null);
  0xee07c797:   mov    -0xc(%ebp),%ecx              ;; 4133:   __ get_cpool_and_tags(rcx, rdx); // rcx=cpool, rdx=tags array
  0xee07c79a:   mov    0x8(%ecx),%ecx
  0xee07c79d:   mov    0x8(%ecx),%ecx
  0xee07c7a0:   mov    0x8(%ecx),%edx
  0xee07c7a3:   movzwl 0x1(%esi),%ebx               ;; 4134:   __ get_unsigned_2_byte_index_at_bcp(rbx, 1); // rbx=index
  0xee07c7a7:   bswap  %ebx
  0xee07c7a9:   shr    $0x10,%ebx
  0xee07c7ac:   cmpb   $0x7,0x4(%edx,%ebx,1)        ;; 4136:   __ cmpb(Address(rdx, rbx,
  0xee07c7b1:   je     0xee07c88d                   ;; 4140:   __ jcc(Assembler::equal, quicked);
  0xee07c7b7:   push   %eax                         ;; 4142:   __ push(atos); // save receiver for result, and for GC
  0xee07c7b8:   call   0xee07c7c2
  0xee07c7bd:   jmp    0xee07c863
  0xee07c7c2:   lea    0x4(%esp),%eax
  0xee07c7c6:   mov    %esi,-0x20(%ebp)
  0xee07c7c9:   cmpl   $0x0,-0x8(%ebp)
  0xee07c7cd:   je     0xee07c7e4
  0xee07c7d3:   push   $0xf78569d8
  0xee07c7d8:   call   0xee07c7dd
  0xee07c7dd:   pusha  
  0xee07c7de:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07c7e3:   hlt    
  0xee07c7e4:   push   %eax
  0xee07c7e5:   push   %edx
  0xee07c7e6:   push   %ecx
  0xee07c7e7:   call   0xf704a910 = Thread::current()
  0xee07c7ec:   pop    %ecx
  0xee07c7ed:   pop    %edx
  0xee07c7ee:   mov    %eax,%edi
  0xee07c7f0:   pop    %eax
  0xee07c7f1:   push   %edi
  0xee07c7f2:   vzeroupper 
  0xee07c7f5:   mov    %ebp,0x230(%edi)
  0xee07c7fb:   mov    %eax,0x228(%edi)
  0xee07c801:   call   0xf6c12220 = InterpreterRuntime::quicken_io_cc(JavaThread*)
  0xee07c806:   add    $0x4,%esp
  0xee07c809:   push   %eax
  0xee07c80a:   push   %edx
  0xee07c80b:   push   %ecx
  0xee07c80c:   call   0xf704a910 = Thread::current()
  0xee07c811:   pop    %ecx
  0xee07c812:   pop    %edx
  0xee07c813:   cmp    %eax,%edi
  0xee07c815:   je     0xee07c82c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07c81b:   push   $0xf78b5a48
  0xee07c820:   call   0xee07c825
  0xee07c825:   pusha  
  0xee07c826:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07c82b:   hlt    
  0xee07c82c:   pop    %eax
  0xee07c82d:   movl   $0x0,0x228(%edi)
  0xee07c837:   movl   $0x0,0x230(%edi)
  0xee07c841:   movl   $0x0,0x22c(%edi)
  0xee07c84b:   vzeroupper 
  0xee07c84e:   cmpl   $0x0,0x4(%edi)
  0xee07c852:   jne    0xee05bbe0
  0xee07c858:   mov    -0x20(%ebp),%esi
  0xee07c85b:   mov    -0x1c(%ebp),%edi
  0xee07c85e:   lea    0x0(%ebp,%edi,4),%edi
  0xee07c862:   ret    
  0xee07c863:   push   %eax                         ;; 4148:   __ get_thread(rdi);
  0xee07c864:   push   %edx
  0xee07c865:   push   %ecx
  0xee07c866:   call   0xf704a910 = Thread::current()
  0xee07c86b:   pop    %ecx
  0xee07c86c:   pop    %edx
  0xee07c86d:   mov    %eax,%edi
  0xee07c86f:   pop    %eax
  0xee07c870:   mov    0x258(%edi),%eax             ;; 4149:   __ get_vm_result_2(rax, rdi);
  0xee07c876:   movl   $0x0,0x258(%edi)
  0xee07c880:   mov    -0x1c(%ebp),%edi             ;; 4150:   __ restore_locals();
  0xee07c883:   lea    0x0(%ebp,%edi,4),%edi
  0xee07c887:   pop    %edx                         ;; 4155:   __ pop_ptr(rdx); // restore receiver
  0xee07c888:   mov    0x4(%edx),%edx               ;; 4156:   __ verify_oop(rdx);
                                                    ;; 4157:   __ load_klass(rdx, rdx, rscratch1);
  0xee07c88b:   jmp    0xee07c89c                   ;; 4158:   __ jmpb(resolved);
  0xee07c88d:   mov    0x4(%eax),%edx               ;; 4161:   __ bind(quicked);
                                                    ;; 4162:   __ load_klass(rdx, rax, rscratch1);
  0xee07c890:   mov    0x30(%ecx,%ebx,4),%bx        ;; 4163:   __ load_resolved_klass_at_index(rax, rcx, rbx);
  0xee07c895:   mov    0x18(%ecx),%ecx
  0xee07c898:   mov    0x4(%ecx,%ebx,4),%eax
  0xee07c89c:   mov    -0x14(%ebp),%ecx             ;; 4165:   __ bind(resolved);
                                                    ;; 4169:   __ gen_subtype_check(rdx, ok_is_subtype);
  0xee07c89f:   test   %ecx,%ecx
  0xee07c8a1:   je     0xee07c925
  0xee07c8a7:   mov    0xc(%ecx),%edi
  0xee07c8aa:   cmp    %edx,%edi
  0xee07c8ac:   jne    0xee07c8bf
  0xee07c8b2:   addl   $0x1,0x10(%ecx)
  0xee07c8b6:   sbbl   $0x0,0x10(%ecx)
  0xee07c8ba:   jmp    0xee07c918
  0xee07c8bf:   test   %edi,%edi
  0xee07c8c1:   je     0xee07c8f7
  0xee07c8c7:   mov    0x14(%ecx),%edi
  0xee07c8ca:   cmp    %edx,%edi
  0xee07c8cc:   jne    0xee07c8df
  0xee07c8d2:   addl   $0x1,0x18(%ecx)
  0xee07c8d6:   sbbl   $0x0,0x18(%ecx)
  0xee07c8da:   jmp    0xee07c918
  0xee07c8df:   test   %edi,%edi
  0xee07c8e1:   jne    0xee07c918
  0xee07c8e7:   mov    %edx,0x14(%ecx)
  0xee07c8ea:   mov    $0x1,%edi
  0xee07c8ef:   mov    %edi,0x18(%ecx)
  0xee07c8f2:   jmp    0xee07c918
  0xee07c8f7:   cmp    0x14(%ecx),%edx
  0xee07c8fa:   jne    0xee07c90d
  0xee07c900:   addl   $0x1,0x18(%ecx)
  0xee07c904:   sbbl   $0x0,0x18(%ecx)
  0xee07c908:   jmp    0xee07c918
  0xee07c90d:   mov    %edx,0xc(%ecx)
  0xee07c910:   mov    $0x1,%edi
  0xee07c915:   mov    %edi,0x10(%ecx)
  0xee07c918:   mov    -0x1c(%ebp),%edi
  0xee07c91b:   lea    0x0(%ebp,%edi,4),%edi
  0xee07c91f:   add    $0x1c,%ecx
  0xee07c922:   mov    %ecx,-0x14(%ebp)
  0xee07c925:   cmp    %eax,%edx
  0xee07c927:   je     0xee07c97d
  0xee07c92d:   mov    0x14(%eax),%ecx
  0xee07c930:   cmp    (%edx,%ecx,1),%eax
  0xee07c933:   je     0xee07c97d
  0xee07c939:   cmp    $0x1c,%ecx
  0xee07c93c:   jne    0xee07c960
  0xee07c942:   push   %edi
  0xee07c943:   incl   0xf7cb5bc0
  0xee07c949:   mov    0x20(%edx),%edi
  0xee07c94c:   mov    (%edi),%ecx
  0xee07c94e:   add    $0x4,%edi
  0xee07c951:   test   %eax,%eax
  0xee07c953:   repnz scas %es:(%edi),%eax
  0xee07c955:   pop    %edi
  0xee07c956:   jne    0xee07c960
  0xee07c958:   mov    %eax,0x1c(%edx)
  0xee07c95b:   jmp    0xee07c97d
  0xee07c960:   mov    -0x14(%ebp),%ecx
  0xee07c963:   test   %ecx,%ecx
  0xee07c965:   je     0xee07c979
  0xee07c96b:   addl   $0xffffffff,-0x14(%ecx)
  0xee07c96f:   js     0xee07c979
  0xee07c975:   addl   $0x1,-0x14(%ecx)
  0xee07c979:   xor    %eax,%eax                    ;; 4172:   __ xorl(rax, rax);
  0xee07c97b:   jmp    0xee07c99c                   ;; 4173:   __ jmpb(done);
  0xee07c97d:   mov    $0x1,%eax                    ;; 4175:   __ bind(ok_is_subtype);
                                                    ;; 4176:   __ movl(rax, 1);
  0xee07c982:   jmp    0xee07c99c                   ;; 4180:     __ jmp(done);
  0xee07c987:   mov    -0x14(%ebp),%ecx             ;; 4181:     __ bind(is_null);
                                                    ;; 4182:     __ profile_null_seen(rcx);
  0xee07c98a:   test   %ecx,%ecx
  0xee07c98c:   je     0xee07c99c
  0xee07c992:   orb    $0x1,0x1(%ecx)
  0xee07c996:   add    $0x1c,%ecx
  0xee07c999:   mov    %ecx,-0x14(%ebp)
  0xee07c99c:   movzbl 0x3(%esi),%ebx               ;; 4186:   __ bind(done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07c9a0:   add    $0x3,%esi
  0xee07c9a3:   jmp    *-0x833dea0(,%ebx,4)
  0xee07c9aa:   nop
  0xee07c9ab:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
monitorenter  194 monitorenter  [0xee07c9c0, 0xee07cb18]  344 bytes

--------------------------------------------------------------------------------
  0xee07c9c0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee07c9c1:   cmp    (%eax),%eax                  ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 4251:   __ null_check(rax);
  0xee07c9c3:   xor    %edx,%edx                    ;; 4266:   __ xorl(rmon, rmon); // points to free slot or NULL
  0xee07c9c5:   mov    -0x24(%ebp),%ecx             ;; 4271:     __ movptr(rtop, monitor_block_top); // points to current entry,
  0xee07c9c8:   lea    -0x24(%ebp),%ebx             ;; 4273:     __ lea(rbot, monitor_block_bot);    // points to word before bottom
  0xee07c9cb:   jmp    0xee07c9dc                   ;; 4275:     __ jmpb(entry);
  0xee07c9cd:   cmpl   $0x0,0x4(%ecx)               ;; 4277:     __ bind(loop);
                                                    ;; 4279:     __ cmpptr(Address(rtop, BasicObjectLock::obj_offset_in_bytes()), NULL_WORD);
  0xee07c9d1:   cmove  %ecx,%edx                    ;; 4281:     __ cmovptr(Assembler::equal, rmon, rtop);   // cmov => cmovptr
  0xee07c9d4:   cmp    0x4(%ecx),%eax               ;; 4283:     __ cmpptr(rax, Address(rtop, BasicObjectLock::obj_offset_in_bytes()));
  0xee07c9d7:   je     0xee07c9e0                   ;; 4285:     __ jccb(Assembler::equal, exit);
  0xee07c9d9:   add    $0x8,%ecx                    ;; 4287:     __ addptr(rtop, entry_size);
  0xee07c9dc:   cmp    %ebx,%ecx                    ;; 4288:     __ bind(entry);
                                                    ;; 4290:     __ cmpptr(rtop, rbot);
  0xee07c9de:   jne    0xee07c9cd                   ;; 4292:     __ jcc(Assembler::notEqual, loop);
  0xee07c9e0:   test   %edx,%edx                    ;; 4293:     __ bind(exit);
                                                    ;; 4296:   __ testptr(rmon, rmon); // check if a slot has been found
  0xee07c9e2:   jne    0xee07ca07                   ;; 4297:   __ jcc(Assembler::notZero, allocated); // if found, continue with that one
  0xee07c9e8:   mov    -0x24(%ebp),%edx             ;; 4303:     __ movptr(rmon, monitor_block_bot); // rmon: old expression stack bottom
  0xee07c9eb:   sub    $0x8,%esp                    ;; 4304:     __ subptr(rsp, entry_size);         // move expression stack top
  0xee07c9ee:   sub    $0x8,%edx                    ;; 4305:     __ subptr(rmon, entry_size);        // move expression stack bottom
  0xee07c9f1:   mov    %esp,%ecx                    ;; 4306:     __ mov(rtop, rsp);                  // set start value for copy loop
  0xee07c9f3:   mov    %edx,-0x24(%ebp)             ;; 4307:     __ movptr(monitor_block_bot, rmon); // set new monitor block bottom
  0xee07c9f6:   jmp    0xee07ca03                   ;; 4308:     __ jmp(entry);
  0xee07c9fb:   mov    0x8(%ecx),%ebx               ;; 4310:     __ bind(loop);
                                                    ;; 4311:     __ movptr(rbot, Address(rtop, entry_size)); // load expression stack
  0xee07c9fe:   mov    %ebx,(%ecx)                  ;; 4313:     __ movptr(Address(rtop, 0), rbot);          // and store it at new location
  0xee07ca00:   add    $0x4,%ecx                    ;; 4314:     __ addptr(rtop, wordSize);                  // advance to next word
  0xee07ca03:   cmp    %edx,%ecx                    ;; 4315:     __ bind(entry);
                                                    ;; 4316:     __ cmpptr(rtop, rmon);                      // check if bottom reached
  0xee07ca05:   jne    0xee07c9fb                   ;; 4317:     __ jcc(Assembler::notEqual, loop);          // if not at bottom then
  0xee07ca07:   inc    %esi                         ;; 4323:   __ bind(allocated);
                                                    ;; 4329:   __ increment(rbcp);
  0xee07ca08:   mov    %eax,0x4(%edx)               ;; 4332:   __ movptr(Address(rmon, BasicObjectLock::obj_offset_in_bytes()), rax);
  0xee07ca0b:   mov    0x4(%edx),%ecx               ;; 4333:   __ lock_object(rmon);
  0xee07ca0e:   mov    $0x1,%eax
  0xee07ca13:   or     (%ecx),%eax
  0xee07ca15:   mov    %eax,(%edx)
  0xee07ca17:   lock cmpxchg %edx,(%ecx)
  0xee07ca1b:   je     0xee07ca30
  0xee07ca21:   sub    %esp,%eax
  0xee07ca23:   and    $0xfffff003,%eax
  0xee07ca28:   mov    %eax,(%edx)
  0xee07ca2a:   jne    0xee07ca46
  0xee07ca30:   push   %eax
  0xee07ca31:   push   %edx
  0xee07ca32:   push   %ecx
  0xee07ca33:   call   0xf704a910 = Thread::current()
  0xee07ca38:   pop    %ecx
  0xee07ca39:   pop    %edx
  0xee07ca3a:   incl   0x308(%eax)
  0xee07ca40:   pop    %eax
  0xee07ca41:   jmp    0xee07caf2
  0xee07ca46:   call   0xee07ca50
  0xee07ca4b:   jmp    0xee07caf2
  0xee07ca50:   push   %edx
  0xee07ca51:   lea    0x8(%esp),%eax
  0xee07ca55:   mov    %esi,-0x20(%ebp)
  0xee07ca58:   cmpl   $0x0,-0x8(%ebp)
  0xee07ca5c:   je     0xee07ca73
  0xee07ca62:   push   $0xf78569d8
  0xee07ca67:   call   0xee07ca6c
  0xee07ca6c:   pusha  
  0xee07ca6d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07ca72:   hlt    
  0xee07ca73:   push   %eax
  0xee07ca74:   push   %edx
  0xee07ca75:   push   %ecx
  0xee07ca76:   call   0xf704a910 = Thread::current()
  0xee07ca7b:   pop    %ecx
  0xee07ca7c:   pop    %edx
  0xee07ca7d:   mov    %eax,%edi
  0xee07ca7f:   pop    %eax
  0xee07ca80:   push   %edi
  0xee07ca81:   vzeroupper 
  0xee07ca84:   mov    %ebp,0x230(%edi)
  0xee07ca8a:   mov    %eax,0x228(%edi)
  0xee07ca90:   call   0xf6c0c3c0 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0xee07ca95:   add    $0x8,%esp
  0xee07ca98:   push   %eax
  0xee07ca99:   push   %edx
  0xee07ca9a:   push   %ecx
  0xee07ca9b:   call   0xf704a910 = Thread::current()
  0xee07caa0:   pop    %ecx
  0xee07caa1:   pop    %edx
  0xee07caa2:   cmp    %eax,%edi
  0xee07caa4:   je     0xee07cabb
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07caaa:   push   $0xf78b5a48
  0xee07caaf:   call   0xee07cab4
  0xee07cab4:   pusha  
  0xee07cab5:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07caba:   hlt    
  0xee07cabb:   pop    %eax
  0xee07cabc:   movl   $0x0,0x228(%edi)
  0xee07cac6:   movl   $0x0,0x230(%edi)
  0xee07cad0:   movl   $0x0,0x22c(%edi)
  0xee07cada:   vzeroupper 
  0xee07cadd:   cmpl   $0x0,0x4(%edi)
  0xee07cae1:   jne    0xee05bbe0
  0xee07cae7:   mov    -0x20(%ebp),%esi
  0xee07caea:   mov    -0x1c(%ebp),%edi
  0xee07caed:   lea    0x0(%ebp,%edi,4),%edi
  0xee07caf1:   ret    
  0xee07caf2:   mov    %esi,-0x20(%ebp)             ;; 4336:   __ save_bcp();  // in case of exception
  0xee07caf5:   mov    %eax,-0x9000(%esp)           ;; 4337:   __ generate_stack_overflow_check(0);
  0xee07cafc:   movzbl (%esi),%ebx                  ;; 4341:   __ dispatch_next(vtos);
  0xee07caff:   jmp    *-0x833caa0(,%ebx,4)
  0xee07cb06:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee07cb0b:   call   0xee07cb10
  0xee07cb10:   pusha  
  0xee07cb11:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07cb16:   hlt    
  0xee07cb17:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
monitorexit  195 monitorexit  [0xee07cb40, 0xee07cc88]  328 bytes

--------------------------------------------------------------------------------
  0xee07cb40:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee07cb41:   cmp    (%eax),%eax                  ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 4348:   __ null_check(rax);
  0xee07cb43:   mov    -0x24(%ebp),%edx             ;; 4364:     __ movptr(rtop, monitor_block_top); // points to current entry,
  0xee07cb46:   lea    -0x24(%ebp),%ebx             ;; 4366:     __ lea(rbot, monitor_block_bot);    // points to word before bottom
  0xee07cb49:   jmp    0xee07cb57                   ;; 4368:     __ jmpb(entry);
  0xee07cb4b:   cmp    0x4(%edx),%eax               ;; 4370:     __ bind(loop);
                                                    ;; 4372:     __ cmpptr(rax, Address(rtop, BasicObjectLock::obj_offset_in_bytes()));
  0xee07cb4e:   je     0xee07cc17                   ;; 4374:     __ jcc(Assembler::equal, found);
  0xee07cb54:   add    $0x8,%edx                    ;; 4376:     __ addptr(rtop, entry_size);
  0xee07cb57:   cmp    %ebx,%edx                    ;; 4377:     __ bind(entry);
                                                    ;; 4379:     __ cmpptr(rtop, rbot);
  0xee07cb59:   jne    0xee07cb4b                   ;; 4381:     __ jcc(Assembler::notEqual, loop);
  0xee07cb5b:   call   0xee07cb65                   ;; 4385:   __ call_VM(noreg, CAST_FROM_FN_PTR(address,
  0xee07cb60:   jmp    0xee07cc06
  0xee07cb65:   lea    0x4(%esp),%eax
  0xee07cb69:   mov    %esi,-0x20(%ebp)
  0xee07cb6c:   cmpl   $0x0,-0x8(%ebp)
  0xee07cb70:   je     0xee07cb87
  0xee07cb76:   push   $0xf78569d8
  0xee07cb7b:   call   0xee07cb80
  0xee07cb80:   pusha  
  0xee07cb81:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07cb86:   hlt    
  0xee07cb87:   push   %eax
  0xee07cb88:   push   %edx
  0xee07cb89:   push   %ecx
  0xee07cb8a:   call   0xf704a910 = Thread::current()
  0xee07cb8f:   pop    %ecx
  0xee07cb90:   pop    %edx
  0xee07cb91:   mov    %eax,%edi
  0xee07cb93:   pop    %eax
  0xee07cb94:   push   %edi
  0xee07cb95:   vzeroupper 
  0xee07cb98:   mov    %ebp,0x230(%edi)
  0xee07cb9e:   mov    %eax,0x228(%edi)
  0xee07cba4:   call   0xf6c0c900 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0xee07cba9:   add    $0x4,%esp
  0xee07cbac:   push   %eax
  0xee07cbad:   push   %edx
  0xee07cbae:   push   %ecx
  0xee07cbaf:   call   0xf704a910 = Thread::current()
  0xee07cbb4:   pop    %ecx
  0xee07cbb5:   pop    %edx
  0xee07cbb6:   cmp    %eax,%edi
  0xee07cbb8:   je     0xee07cbcf
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07cbbe:   push   $0xf78b5a48
  0xee07cbc3:   call   0xee07cbc8
  0xee07cbc8:   pusha  
  0xee07cbc9:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07cbce:   hlt    
  0xee07cbcf:   pop    %eax
  0xee07cbd0:   movl   $0x0,0x228(%edi)
  0xee07cbda:   movl   $0x0,0x230(%edi)
  0xee07cbe4:   movl   $0x0,0x22c(%edi)
  0xee07cbee:   vzeroupper 
  0xee07cbf1:   cmpl   $0x0,0x4(%edi)
  0xee07cbf5:   jne    0xee05bbe0
  0xee07cbfb:   mov    -0x20(%ebp),%esi
  0xee07cbfe:   mov    -0x1c(%ebp),%edi
  0xee07cc01:   lea    0x0(%ebp,%edi,4),%edi
  0xee07cc05:   ret    
  0xee07cc06:   push   $0xf77a6b02                  ;; 4387:   __ should_not_reach_here();
  0xee07cc0b:   call   0xee07cc10
  0xee07cc10:   pusha  
  0xee07cc11:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07cc16:   hlt    
  0xee07cc17:   push   %eax                         ;; 4390:   __ bind(found);
                                                    ;; 4391:   __ push_ptr(rax); // make sure object is on stack (contract with oopMaps)
  0xee07cc18:   mov    %esi,-0x20(%ebp)             ;; 4392:   __ unlock_object(rtop);
  0xee07cc1b:   lea    (%edx),%eax
  0xee07cc1d:   mov    0x4(%edx),%ecx
  0xee07cc20:   movl   $0x0,0x4(%edx)
  0xee07cc27:   mov    (%eax),%ebx
  0xee07cc29:   test   %ebx,%ebx
  0xee07cc2b:   je     0xee07cc3b
  0xee07cc31:   lock cmpxchg %ebx,(%ecx)
  0xee07cc35:   jne    0xee07cc51
  0xee07cc3b:   push   %eax
  0xee07cc3c:   push   %edx
  0xee07cc3d:   push   %ecx
  0xee07cc3e:   call   0xf704a910 = Thread::current()
  0xee07cc43:   pop    %ecx
  0xee07cc44:   pop    %edx
  0xee07cc45:   decl   0x308(%eax)
  0xee07cc4b:   pop    %eax
  0xee07cc4c:   jmp    0xee07cc78
  0xee07cc51:   mov    %ecx,0x4(%edx)
  0xee07cc54:   push   %edx
  0xee07cc55:   cmpl   $0x0,-0x8(%ebp)
  0xee07cc59:   je     0xee07cc70
  0xee07cc5f:   push   $0xf785694c
  0xee07cc64:   call   0xee07cc69
  0xee07cc69:   pusha  
  0xee07cc6a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07cc6f:   hlt    
  0xee07cc70:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee07cc75:   add    $0x4,%esp
  0xee07cc78:   mov    -0x20(%ebp),%esi
  0xee07cc7b:   pop    %eax                         ;; 4393:   __ pop_ptr(rax); // discard object
  0xee07cc7c:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07cc80:   inc    %esi
  0xee07cc81:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
wide  196 wide  [0xee07cca0, 0xee07ccd8]  56 bytes

--------------------------------------------------------------------------------
  0xee07cca0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07cca3:   vmovss %xmm0,(%esp)
  0xee07cca8:   jmp    0xee07ccb9                   ;; 1751:       __ jmpb(L);
  0xee07ccaa:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07ccad:   vmovsd %xmm0,(%esp)
  0xee07ccb2:   jmp    0xee07ccb9                   ;; 1754:       __ jmpb(L);
  0xee07ccb4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07ccb5:   push   %eax
  0xee07ccb6:   jmp    0xee07ccb9                   ;; 1765:       __ jmpb(L);
  0xee07ccb8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07ccb9:   movzbl 0x1(%esi),%ebx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 4399:   __ load_unsigned_byte(rbx, at_bcp(1));
  0xee07ccbd:   jmp    *-0x83442a0(,%ebx,4)         ;; 4401:   __ jump(ArrayAddress(wtable, Address(noreg, rbx, Address::times_ptr)), rscratch1);
  0xee07ccc4:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee07ccc9:   call   0xee07ccce
  0xee07ccce:   pusha  
  0xee07cccf:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07ccd4:   hlt    
  0xee07ccd5:   nop
  0xee07ccd6:   nop
  0xee07ccd7:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
multianewarray  197 multianewarray  [0xee07cd00, 0xee07cdf4]  244 bytes

--------------------------------------------------------------------------------
  0xee07cd00:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07cd03:   vmovss %xmm0,(%esp)
  0xee07cd08:   jmp    0xee07cd19                   ;; 1751:       __ jmpb(L);
  0xee07cd0a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07cd0d:   vmovsd %xmm0,(%esp)
  0xee07cd12:   jmp    0xee07cd19                   ;; 1754:       __ jmpb(L);
  0xee07cd14:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07cd15:   push   %eax
  0xee07cd16:   jmp    0xee07cd19                   ;; 1765:       __ jmpb(L);
  0xee07cd18:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07cd19:   movzbl 0x3(%esi),%eax               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 4410:   __ load_unsigned_byte(rax, at_bcp(3)); // get number of dimensions
  0xee07cd1d:   lea    -0x4(%esp,%eax,4),%eax       ;; 4414:   __ lea(rarg, Address(rsp, rax, Interpreter::stackElementScale(), -wordSize));
  0xee07cd21:   call   0xee07cd2b
  0xee07cd26:   jmp    0xee07cddd
  0xee07cd2b:   push   %eax
  0xee07cd2c:   lea    0x8(%esp),%eax
  0xee07cd30:   mov    %esi,-0x20(%ebp)
  0xee07cd33:   cmpl   $0x0,-0x8(%ebp)
  0xee07cd37:   je     0xee07cd4e
  0xee07cd3d:   push   $0xf78569d8
  0xee07cd42:   call   0xee07cd47
  0xee07cd47:   pusha  
  0xee07cd48:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07cd4d:   hlt    
  0xee07cd4e:   push   %eax
  0xee07cd4f:   push   %edx
  0xee07cd50:   push   %ecx
  0xee07cd51:   call   0xf704a910 = Thread::current()
  0xee07cd56:   pop    %ecx
  0xee07cd57:   pop    %edx
  0xee07cd58:   mov    %eax,%edi
  0xee07cd5a:   pop    %eax
  0xee07cd5b:   push   %edi
  0xee07cd5c:   vzeroupper 
  0xee07cd5f:   mov    %ebp,0x230(%edi)
  0xee07cd65:   mov    %eax,0x228(%edi)
  0xee07cd6b:   call   0xf6c11670 = InterpreterRuntime::multianewarray(JavaThread*, int*)
  0xee07cd70:   add    $0x8,%esp
  0xee07cd73:   push   %eax
  0xee07cd74:   push   %edx
  0xee07cd75:   push   %ecx
  0xee07cd76:   call   0xf704a910 = Thread::current()
  0xee07cd7b:   pop    %ecx
  0xee07cd7c:   pop    %edx
  0xee07cd7d:   cmp    %eax,%edi
  0xee07cd7f:   je     0xee07cd96
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07cd85:   push   $0xf78b5a48
  0xee07cd8a:   call   0xee07cd8f
  0xee07cd8f:   pusha  
  0xee07cd90:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07cd95:   hlt    
  0xee07cd96:   pop    %eax
  0xee07cd97:   movl   $0x0,0x228(%edi)
  0xee07cda1:   movl   $0x0,0x230(%edi)
  0xee07cdab:   movl   $0x0,0x22c(%edi)
  0xee07cdb5:   vzeroupper 
  0xee07cdb8:   cmpl   $0x0,0x4(%edi)
  0xee07cdbc:   jne    0xee05bbe0
  0xee07cdc2:   mov    0x254(%edi),%eax
  0xee07cdc8:   movl   $0x0,0x254(%edi)
  0xee07cdd2:   mov    -0x20(%ebp),%esi
  0xee07cdd5:   mov    -0x1c(%ebp),%edi
  0xee07cdd8:   lea    0x0(%ebp,%edi,4),%edi
  0xee07cddc:   ret    
  0xee07cddd:   movzbl 0x3(%esi),%ebx               ;; 4416:   __ load_unsigned_byte(rbx, at_bcp(3));
  0xee07cde1:   lea    (%esp,%ebx,4),%esp           ;; 4417:   __ lea(rsp, Address(rsp, rbx, Interpreter::stackElementScale()));  // get rid of counts
  0xee07cde4:   movzbl 0x4(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07cde8:   add    $0x4,%esi
  0xee07cdeb:   jmp    *-0x833cea0(,%ebx,4)
  0xee07cdf2:   nop
  0xee07cdf3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ifnull  198 ifnull  [0xee07ce20, 0xee07d190]  880 bytes

--------------------------------------------------------------------------------
  0xee07ce20:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee07ce21:   push   %eax                         ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee07ce22:   push   %ebx
  0xee07ce23:   push   %ecx
  0xee07ce24:   push   %edx
  0xee07ce25:   mov    -0x14(%ebp),%ecx
  0xee07ce28:   test   %ecx,%ecx
  0xee07ce2a:   je     0xee07ce6b
  0xee07ce30:   mov    -0xc(%ebp),%ebx
  0xee07ce33:   movzwl 0x2(%ecx),%edx
  0xee07ce37:   add    0x8(%ebx),%edx
  0xee07ce3a:   lea    0x2c(%edx),%edx
  0xee07ce3d:   cmp    %esi,%edx
  0xee07ce3f:   je     0xee07ce6b
  0xee07ce45:   push   %ecx
  0xee07ce46:   push   %esi
  0xee07ce47:   push   %ebx
  0xee07ce48:   cmpl   $0x0,-0x8(%ebp)
  0xee07ce4c:   je     0xee07ce63
  0xee07ce52:   push   $0xf785694c
  0xee07ce57:   call   0xee07ce5c
  0xee07ce5c:   pusha  
  0xee07ce5d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07ce62:   hlt    
  0xee07ce63:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee07ce68:   add    $0xc,%esp
  0xee07ce6b:   pop    %edx
  0xee07ce6c:   pop    %ecx
  0xee07ce6d:   pop    %ebx
  0xee07ce6e:   pop    %eax
  0xee07ce6f:   test   %eax,%eax                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2323:   __ testptr(rax, rax);
  0xee07ce71:   jne    0xee07d167                   ;; 2324:   __ jcc(j_not(cc), not_taken);
  0xee07ce77:   mov    -0xc(%ebp),%ecx              ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee07ce7a:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee07ce7d:   test   %eax,%eax
  0xee07ce7f:   je     0xee07ce97
  0xee07ce85:   mov    0x8(%eax),%ebx
  0xee07ce88:   add    $0x1,%ebx
  0xee07ce8b:   sbb    $0x0,%ebx
  0xee07ce8e:   mov    %ebx,0x8(%eax)
  0xee07ce91:   add    0xc(%eax),%eax
  0xee07ce94:   mov    %eax,-0x14(%ebp)
  0xee07ce97:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee07ce9b:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee07ce9d:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee07cea0:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee07cea2:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee07cea4:   jns    0xee07cfac                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee07ceaa:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee07cead:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee07ceaf:   jne    0xee07cf70                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee07ceb5:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee07ceb6:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee07ceb7:   call   0xee07cec1                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee07cebc:   jmp    0xee07cf63
  0xee07cec1:   push   %ecx
  0xee07cec2:   lea    0x8(%esp),%eax
  0xee07cec6:   mov    %esi,-0x20(%ebp)
  0xee07cec9:   cmpl   $0x0,-0x8(%ebp)
  0xee07cecd:   je     0xee07cee4
  0xee07ced3:   push   $0xf78569d8
  0xee07ced8:   call   0xee07cedd
  0xee07cedd:   pusha  
  0xee07cede:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07cee3:   hlt    
  0xee07cee4:   push   %eax
  0xee07cee5:   push   %edx
  0xee07cee6:   push   %ecx
  0xee07cee7:   call   0xf704a910 = Thread::current()
  0xee07ceec:   pop    %ecx
  0xee07ceed:   pop    %edx
  0xee07ceee:   mov    %eax,%edi
  0xee07cef0:   pop    %eax
  0xee07cef1:   push   %edi
  0xee07cef2:   vzeroupper 
  0xee07cef5:   mov    %ebp,0x230(%edi)
  0xee07cefb:   mov    %eax,0x228(%edi)
  0xee07cf01:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee07cf06:   add    $0x8,%esp
  0xee07cf09:   push   %eax
  0xee07cf0a:   push   %edx
  0xee07cf0b:   push   %ecx
  0xee07cf0c:   call   0xf704a910 = Thread::current()
  0xee07cf11:   pop    %ecx
  0xee07cf12:   pop    %edx
  0xee07cf13:   cmp    %eax,%edi
  0xee07cf15:   je     0xee07cf2c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07cf1b:   push   $0xf78b5a48
  0xee07cf20:   call   0xee07cf25
  0xee07cf25:   pusha  
  0xee07cf26:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07cf2b:   hlt    
  0xee07cf2c:   pop    %eax
  0xee07cf2d:   movl   $0x0,0x228(%edi)
  0xee07cf37:   movl   $0x0,0x230(%edi)
  0xee07cf41:   movl   $0x0,0x22c(%edi)
  0xee07cf4b:   vzeroupper 
  0xee07cf4e:   cmpl   $0x0,0x4(%edi)
  0xee07cf52:   jne    0xee05bbe0
  0xee07cf58:   mov    -0x20(%ebp),%esi
  0xee07cf5b:   mov    -0x1c(%ebp),%edi
  0xee07cf5e:   lea    0x0(%ebp,%edi,4),%edi
  0xee07cf62:   ret    
  0xee07cf63:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee07cf64:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee07cf65:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee07cf68:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee07cf6a:   je     0xee07cfac                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee07cf70:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee07cf73:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee07cf75:   je     0xee07cf97                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee07cf77:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee07cf7d:   add    $0x2,%eax
  0xee07cf80:   mov    %eax,0xb8(%ebx)
  0xee07cf86:   and    0xcc(%ebx),%eax
  0xee07cf8c:   je     0xee07cfd3
  0xee07cf92:   jmp    0xee07cfac                   ;; 2212:       __ jmp(dispatch);
  0xee07cf97:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee07cf9a:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee07cf9d:   add    $0x2,%eax
  0xee07cfa0:   mov    %eax,0xc(%ecx)
  0xee07cfa3:   and    0x20(%ecx),%eax
  0xee07cfa6:   je     0xee07cfd3
  0xee07cfac:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee07cfaf:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee07cfb0:   push   %edx
  0xee07cfb1:   push   %ecx
  0xee07cfb2:   call   0xf704a910 = Thread::current()
  0xee07cfb7:   pop    %ecx
  0xee07cfb8:   pop    %edx
  0xee07cfb9:   mov    %eax,%ecx
  0xee07cfbb:   pop    %eax
  0xee07cfbc:   testb  $0x1,0x288(%ecx)
  0xee07cfc3:   je     0xee07cfcc
  0xee07cfc5:   jmp    *-0x8341aa0(,%ebx,4)
  0xee07cfcc:   jmp    *-0x833caa0(,%ebx,4)
  0xee07cfd3:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee07cfd5:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee07cfd7:   call   0xee07cfe1                   ;; 2240:       __ call_VM(noreg,
  0xee07cfdc:   jmp    0xee07d083
  0xee07cfe1:   push   %edx
  0xee07cfe2:   lea    0x8(%esp),%eax
  0xee07cfe6:   mov    %esi,-0x20(%ebp)
  0xee07cfe9:   cmpl   $0x0,-0x8(%ebp)
  0xee07cfed:   je     0xee07d004
  0xee07cff3:   push   $0xf78569d8
  0xee07cff8:   call   0xee07cffd
  0xee07cffd:   pusha  
  0xee07cffe:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d003:   hlt    
  0xee07d004:   push   %eax
  0xee07d005:   push   %edx
  0xee07d006:   push   %ecx
  0xee07d007:   call   0xf704a910 = Thread::current()
  0xee07d00c:   pop    %ecx
  0xee07d00d:   pop    %edx
  0xee07d00e:   mov    %eax,%edi
  0xee07d010:   pop    %eax
  0xee07d011:   push   %edi
  0xee07d012:   vzeroupper 
  0xee07d015:   mov    %ebp,0x230(%edi)
  0xee07d01b:   mov    %eax,0x228(%edi)
  0xee07d021:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee07d026:   add    $0x8,%esp
  0xee07d029:   push   %eax
  0xee07d02a:   push   %edx
  0xee07d02b:   push   %ecx
  0xee07d02c:   call   0xf704a910 = Thread::current()
  0xee07d031:   pop    %ecx
  0xee07d032:   pop    %edx
  0xee07d033:   cmp    %eax,%edi
  0xee07d035:   je     0xee07d04c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07d03b:   push   $0xf78b5a48
  0xee07d040:   call   0xee07d045
  0xee07d045:   pusha  
  0xee07d046:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d04b:   hlt    
  0xee07d04c:   pop    %eax
  0xee07d04d:   movl   $0x0,0x228(%edi)
  0xee07d057:   movl   $0x0,0x230(%edi)
  0xee07d061:   movl   $0x0,0x22c(%edi)
  0xee07d06b:   vzeroupper 
  0xee07d06e:   cmpl   $0x0,0x4(%edi)
  0xee07d072:   jne    0xee05bbe0
  0xee07d078:   mov    -0x20(%ebp),%esi
  0xee07d07b:   mov    -0x1c(%ebp),%edi
  0xee07d07e:   lea    0x0(%ebp,%edi,4),%edi
  0xee07d082:   ret    
  0xee07d083:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee07d085:   je     0xee07cfac                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee07d08b:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee07d092:   jne    0xee07cfac                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee07d098:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee07d09a:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee07d09b:   push   %edx
  0xee07d09c:   push   %ecx
  0xee07d09d:   call   0xf704a910 = Thread::current()
  0xee07d0a2:   pop    %ecx
  0xee07d0a3:   pop    %edx
  0xee07d0a4:   mov    %eax,%ecx
  0xee07d0a6:   pop    %eax
  0xee07d0a7:   call   0xee07d0b1
  0xee07d0ac:   jmp    0xee07d152
  0xee07d0b1:   lea    0x4(%esp),%eax
  0xee07d0b5:   mov    %esi,-0x20(%ebp)
  0xee07d0b8:   cmpl   $0x0,-0x8(%ebp)
  0xee07d0bc:   je     0xee07d0d3
  0xee07d0c2:   push   $0xf78569d8
  0xee07d0c7:   call   0xee07d0cc
  0xee07d0cc:   pusha  
  0xee07d0cd:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d0d2:   hlt    
  0xee07d0d3:   push   %eax
  0xee07d0d4:   push   %edx
  0xee07d0d5:   push   %ecx
  0xee07d0d6:   call   0xf704a910 = Thread::current()
  0xee07d0db:   pop    %ecx
  0xee07d0dc:   pop    %edx
  0xee07d0dd:   mov    %eax,%edi
  0xee07d0df:   pop    %eax
  0xee07d0e0:   push   %edi
  0xee07d0e1:   vzeroupper 
  0xee07d0e4:   mov    %ebp,0x230(%edi)
  0xee07d0ea:   mov    %eax,0x228(%edi)
  0xee07d0f0:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee07d0f5:   add    $0x4,%esp
  0xee07d0f8:   push   %eax
  0xee07d0f9:   push   %edx
  0xee07d0fa:   push   %ecx
  0xee07d0fb:   call   0xf704a910 = Thread::current()
  0xee07d100:   pop    %ecx
  0xee07d101:   pop    %edx
  0xee07d102:   cmp    %eax,%edi
  0xee07d104:   je     0xee07d11b
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07d10a:   push   $0xf78b5a48
  0xee07d10f:   call   0xee07d114
  0xee07d114:   pusha  
  0xee07d115:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d11a:   hlt    
  0xee07d11b:   pop    %eax
  0xee07d11c:   movl   $0x0,0x228(%edi)
  0xee07d126:   movl   $0x0,0x230(%edi)
  0xee07d130:   movl   $0x0,0x22c(%edi)
  0xee07d13a:   vzeroupper 
  0xee07d13d:   cmpl   $0x0,0x4(%edi)
  0xee07d141:   jne    0xee05bbe0
  0xee07d147:   mov    -0x20(%ebp),%esi
  0xee07d14a:   mov    -0x1c(%ebp),%edi
  0xee07d14d:   lea    0x0(%ebp,%edi,4),%edi
  0xee07d151:   ret    
  0xee07d152:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee07d154:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee07d157:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee07d159:   pop    %ebp
  0xee07d15a:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee07d15b:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee07d15d:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee07d160:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee07d161:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee07d167:   mov    -0x14(%ebp),%eax             ;; 2326:   __ bind(not_taken);
                                                    ;; 2327:   __ profile_not_taken_branch(rax);
  0xee07d16a:   test   %eax,%eax
  0xee07d16c:   je     0xee07d180
  0xee07d172:   addl   $0x1,0x10(%eax)
  0xee07d176:   sbbl   $0x0,0x10(%eax)
  0xee07d17a:   add    $0x14,%eax
  0xee07d17d:   mov    %eax,-0x14(%ebp)
  0xee07d180:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07d184:   add    $0x3,%esi
  0xee07d187:   jmp    *-0x833caa0(,%ebx,4)
  0xee07d18e:   nop
  0xee07d18f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
ifnonnull  199 ifnonnull  [0xee07d1c0, 0xee07d530]  880 bytes

--------------------------------------------------------------------------------
  0xee07d1c0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee07d1c1:   push   %eax                         ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee07d1c2:   push   %ebx
  0xee07d1c3:   push   %ecx
  0xee07d1c4:   push   %edx
  0xee07d1c5:   mov    -0x14(%ebp),%ecx
  0xee07d1c8:   test   %ecx,%ecx
  0xee07d1ca:   je     0xee07d20b
  0xee07d1d0:   mov    -0xc(%ebp),%ebx
  0xee07d1d3:   movzwl 0x2(%ecx),%edx
  0xee07d1d7:   add    0x8(%ebx),%edx
  0xee07d1da:   lea    0x2c(%edx),%edx
  0xee07d1dd:   cmp    %esi,%edx
  0xee07d1df:   je     0xee07d20b
  0xee07d1e5:   push   %ecx
  0xee07d1e6:   push   %esi
  0xee07d1e7:   push   %ebx
  0xee07d1e8:   cmpl   $0x0,-0x8(%ebp)
  0xee07d1ec:   je     0xee07d203
  0xee07d1f2:   push   $0xf785694c
  0xee07d1f7:   call   0xee07d1fc
  0xee07d1fc:   pusha  
  0xee07d1fd:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d202:   hlt    
  0xee07d203:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee07d208:   add    $0xc,%esp
  0xee07d20b:   pop    %edx
  0xee07d20c:   pop    %ecx
  0xee07d20d:   pop    %ebx
  0xee07d20e:   pop    %eax
  0xee07d20f:   test   %eax,%eax                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2323:   __ testptr(rax, rax);
  0xee07d211:   je     0xee07d507                   ;; 2324:   __ jcc(j_not(cc), not_taken);
  0xee07d217:   mov    -0xc(%ebp),%ecx              ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee07d21a:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee07d21d:   test   %eax,%eax
  0xee07d21f:   je     0xee07d237
  0xee07d225:   mov    0x8(%eax),%ebx
  0xee07d228:   add    $0x1,%ebx
  0xee07d22b:   sbb    $0x0,%ebx
  0xee07d22e:   mov    %ebx,0x8(%eax)
  0xee07d231:   add    0xc(%eax),%eax
  0xee07d234:   mov    %eax,-0x14(%ebp)
  0xee07d237:   movswl 0x1(%esi),%edx               ;; 2136:     __ load_signed_short(rdx, at_bcp(1));
  0xee07d23b:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee07d23d:   sar    $0x10,%edx                   ;; 2141:     __ sarl(rdx, 16);
  0xee07d240:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee07d242:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee07d244:   jns    0xee07d34c                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee07d24a:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee07d24d:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee07d24f:   jne    0xee07d310                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee07d255:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee07d256:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee07d257:   call   0xee07d261                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee07d25c:   jmp    0xee07d303
  0xee07d261:   push   %ecx
  0xee07d262:   lea    0x8(%esp),%eax
  0xee07d266:   mov    %esi,-0x20(%ebp)
  0xee07d269:   cmpl   $0x0,-0x8(%ebp)
  0xee07d26d:   je     0xee07d284
  0xee07d273:   push   $0xf78569d8
  0xee07d278:   call   0xee07d27d
  0xee07d27d:   pusha  
  0xee07d27e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d283:   hlt    
  0xee07d284:   push   %eax
  0xee07d285:   push   %edx
  0xee07d286:   push   %ecx
  0xee07d287:   call   0xf704a910 = Thread::current()
  0xee07d28c:   pop    %ecx
  0xee07d28d:   pop    %edx
  0xee07d28e:   mov    %eax,%edi
  0xee07d290:   pop    %eax
  0xee07d291:   push   %edi
  0xee07d292:   vzeroupper 
  0xee07d295:   mov    %ebp,0x230(%edi)
  0xee07d29b:   mov    %eax,0x228(%edi)
  0xee07d2a1:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee07d2a6:   add    $0x8,%esp
  0xee07d2a9:   push   %eax
  0xee07d2aa:   push   %edx
  0xee07d2ab:   push   %ecx
  0xee07d2ac:   call   0xf704a910 = Thread::current()
  0xee07d2b1:   pop    %ecx
  0xee07d2b2:   pop    %edx
  0xee07d2b3:   cmp    %eax,%edi
  0xee07d2b5:   je     0xee07d2cc
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07d2bb:   push   $0xf78b5a48
  0xee07d2c0:   call   0xee07d2c5
  0xee07d2c5:   pusha  
  0xee07d2c6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d2cb:   hlt    
  0xee07d2cc:   pop    %eax
  0xee07d2cd:   movl   $0x0,0x228(%edi)
  0xee07d2d7:   movl   $0x0,0x230(%edi)
  0xee07d2e1:   movl   $0x0,0x22c(%edi)
  0xee07d2eb:   vzeroupper 
  0xee07d2ee:   cmpl   $0x0,0x4(%edi)
  0xee07d2f2:   jne    0xee05bbe0
  0xee07d2f8:   mov    -0x20(%ebp),%esi
  0xee07d2fb:   mov    -0x1c(%ebp),%edi
  0xee07d2fe:   lea    0x0(%ebp,%edi,4),%edi
  0xee07d302:   ret    
  0xee07d303:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee07d304:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee07d305:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee07d308:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee07d30a:   je     0xee07d34c                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee07d310:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee07d313:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee07d315:   je     0xee07d337                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee07d317:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee07d31d:   add    $0x2,%eax
  0xee07d320:   mov    %eax,0xb8(%ebx)
  0xee07d326:   and    0xcc(%ebx),%eax
  0xee07d32c:   je     0xee07d373
  0xee07d332:   jmp    0xee07d34c                   ;; 2212:       __ jmp(dispatch);
  0xee07d337:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee07d33a:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee07d33d:   add    $0x2,%eax
  0xee07d340:   mov    %eax,0xc(%ecx)
  0xee07d343:   and    0x20(%ecx),%eax
  0xee07d346:   je     0xee07d373
  0xee07d34c:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee07d34f:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee07d350:   push   %edx
  0xee07d351:   push   %ecx
  0xee07d352:   call   0xf704a910 = Thread::current()
  0xee07d357:   pop    %ecx
  0xee07d358:   pop    %edx
  0xee07d359:   mov    %eax,%ecx
  0xee07d35b:   pop    %eax
  0xee07d35c:   testb  $0x1,0x288(%ecx)
  0xee07d363:   je     0xee07d36c
  0xee07d365:   jmp    *-0x8341aa0(,%ebx,4)
  0xee07d36c:   jmp    *-0x833caa0(,%ebx,4)
  0xee07d373:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee07d375:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee07d377:   call   0xee07d381                   ;; 2240:       __ call_VM(noreg,
  0xee07d37c:   jmp    0xee07d423
  0xee07d381:   push   %edx
  0xee07d382:   lea    0x8(%esp),%eax
  0xee07d386:   mov    %esi,-0x20(%ebp)
  0xee07d389:   cmpl   $0x0,-0x8(%ebp)
  0xee07d38d:   je     0xee07d3a4
  0xee07d393:   push   $0xf78569d8
  0xee07d398:   call   0xee07d39d
  0xee07d39d:   pusha  
  0xee07d39e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d3a3:   hlt    
  0xee07d3a4:   push   %eax
  0xee07d3a5:   push   %edx
  0xee07d3a6:   push   %ecx
  0xee07d3a7:   call   0xf704a910 = Thread::current()
  0xee07d3ac:   pop    %ecx
  0xee07d3ad:   pop    %edx
  0xee07d3ae:   mov    %eax,%edi
  0xee07d3b0:   pop    %eax
  0xee07d3b1:   push   %edi
  0xee07d3b2:   vzeroupper 
  0xee07d3b5:   mov    %ebp,0x230(%edi)
  0xee07d3bb:   mov    %eax,0x228(%edi)
  0xee07d3c1:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee07d3c6:   add    $0x8,%esp
  0xee07d3c9:   push   %eax
  0xee07d3ca:   push   %edx
  0xee07d3cb:   push   %ecx
  0xee07d3cc:   call   0xf704a910 = Thread::current()
  0xee07d3d1:   pop    %ecx
  0xee07d3d2:   pop    %edx
  0xee07d3d3:   cmp    %eax,%edi
  0xee07d3d5:   je     0xee07d3ec
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07d3db:   push   $0xf78b5a48
  0xee07d3e0:   call   0xee07d3e5
  0xee07d3e5:   pusha  
  0xee07d3e6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d3eb:   hlt    
  0xee07d3ec:   pop    %eax
  0xee07d3ed:   movl   $0x0,0x228(%edi)
  0xee07d3f7:   movl   $0x0,0x230(%edi)
  0xee07d401:   movl   $0x0,0x22c(%edi)
  0xee07d40b:   vzeroupper 
  0xee07d40e:   cmpl   $0x0,0x4(%edi)
  0xee07d412:   jne    0xee05bbe0
  0xee07d418:   mov    -0x20(%ebp),%esi
  0xee07d41b:   mov    -0x1c(%ebp),%edi
  0xee07d41e:   lea    0x0(%ebp,%edi,4),%edi
  0xee07d422:   ret    
  0xee07d423:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee07d425:   je     0xee07d34c                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee07d42b:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee07d432:   jne    0xee07d34c                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee07d438:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee07d43a:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee07d43b:   push   %edx
  0xee07d43c:   push   %ecx
  0xee07d43d:   call   0xf704a910 = Thread::current()
  0xee07d442:   pop    %ecx
  0xee07d443:   pop    %edx
  0xee07d444:   mov    %eax,%ecx
  0xee07d446:   pop    %eax
  0xee07d447:   call   0xee07d451
  0xee07d44c:   jmp    0xee07d4f2
  0xee07d451:   lea    0x4(%esp),%eax
  0xee07d455:   mov    %esi,-0x20(%ebp)
  0xee07d458:   cmpl   $0x0,-0x8(%ebp)
  0xee07d45c:   je     0xee07d473
  0xee07d462:   push   $0xf78569d8
  0xee07d467:   call   0xee07d46c
  0xee07d46c:   pusha  
  0xee07d46d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d472:   hlt    
  0xee07d473:   push   %eax
  0xee07d474:   push   %edx
  0xee07d475:   push   %ecx
  0xee07d476:   call   0xf704a910 = Thread::current()
  0xee07d47b:   pop    %ecx
  0xee07d47c:   pop    %edx
  0xee07d47d:   mov    %eax,%edi
  0xee07d47f:   pop    %eax
  0xee07d480:   push   %edi
  0xee07d481:   vzeroupper 
  0xee07d484:   mov    %ebp,0x230(%edi)
  0xee07d48a:   mov    %eax,0x228(%edi)
  0xee07d490:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee07d495:   add    $0x4,%esp
  0xee07d498:   push   %eax
  0xee07d499:   push   %edx
  0xee07d49a:   push   %ecx
  0xee07d49b:   call   0xf704a910 = Thread::current()
  0xee07d4a0:   pop    %ecx
  0xee07d4a1:   pop    %edx
  0xee07d4a2:   cmp    %eax,%edi
  0xee07d4a4:   je     0xee07d4bb
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07d4aa:   push   $0xf78b5a48
  0xee07d4af:   call   0xee07d4b4
  0xee07d4b4:   pusha  
  0xee07d4b5:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d4ba:   hlt    
  0xee07d4bb:   pop    %eax
  0xee07d4bc:   movl   $0x0,0x228(%edi)
  0xee07d4c6:   movl   $0x0,0x230(%edi)
  0xee07d4d0:   movl   $0x0,0x22c(%edi)
  0xee07d4da:   vzeroupper 
  0xee07d4dd:   cmpl   $0x0,0x4(%edi)
  0xee07d4e1:   jne    0xee05bbe0
  0xee07d4e7:   mov    -0x20(%ebp),%esi
  0xee07d4ea:   mov    -0x1c(%ebp),%edi
  0xee07d4ed:   lea    0x0(%ebp,%edi,4),%edi
  0xee07d4f1:   ret    
  0xee07d4f2:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee07d4f4:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee07d4f7:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee07d4f9:   pop    %ebp
  0xee07d4fa:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee07d4fb:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee07d4fd:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee07d500:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee07d501:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee07d507:   mov    -0x14(%ebp),%eax             ;; 2326:   __ bind(not_taken);
                                                    ;; 2327:   __ profile_not_taken_branch(rax);
  0xee07d50a:   test   %eax,%eax
  0xee07d50c:   je     0xee07d520
  0xee07d512:   addl   $0x1,0x10(%eax)
  0xee07d516:   sbbl   $0x0,0x10(%eax)
  0xee07d51a:   add    $0x14,%eax
  0xee07d51d:   mov    %eax,-0x14(%ebp)
  0xee07d520:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07d524:   add    $0x3,%esi
  0xee07d527:   jmp    *-0x833caa0(,%ebx,4)
  0xee07d52e:   nop
  0xee07d52f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
goto_w  200 goto_w  [0xee07d560, 0xee07d8c4]  868 bytes

--------------------------------------------------------------------------------
  0xee07d560:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07d563:   vmovss %xmm0,(%esp)
  0xee07d568:   jmp    0xee07d579                   ;; 1751:       __ jmpb(L);
  0xee07d56a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07d56d:   vmovsd %xmm0,(%esp)
  0xee07d572:   jmp    0xee07d579                   ;; 1754:       __ jmpb(L);
  0xee07d574:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07d575:   push   %eax
  0xee07d576:   jmp    0xee07d579                   ;; 1765:       __ jmpb(L);
  0xee07d578:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07d579:   push   %eax                         ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee07d57a:   push   %ebx
  0xee07d57b:   push   %ecx
  0xee07d57c:   push   %edx
  0xee07d57d:   mov    -0x14(%ebp),%ecx
  0xee07d580:   test   %ecx,%ecx
  0xee07d582:   je     0xee07d5c3
  0xee07d588:   mov    -0xc(%ebp),%ebx
  0xee07d58b:   movzwl 0x2(%ecx),%edx
  0xee07d58f:   add    0x8(%ebx),%edx
  0xee07d592:   lea    0x2c(%edx),%edx
  0xee07d595:   cmp    %esi,%edx
  0xee07d597:   je     0xee07d5c3
  0xee07d59d:   push   %ecx
  0xee07d59e:   push   %esi
  0xee07d59f:   push   %ebx
  0xee07d5a0:   cmpl   $0x0,-0x8(%ebp)
  0xee07d5a4:   je     0xee07d5bb
  0xee07d5aa:   push   $0xf785694c
  0xee07d5af:   call   0xee07d5b4
  0xee07d5b4:   pusha  
  0xee07d5b5:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d5ba:   hlt    
  0xee07d5bb:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee07d5c0:   add    $0xc,%esp
  0xee07d5c3:   pop    %edx
  0xee07d5c4:   pop    %ecx
  0xee07d5c5:   pop    %ebx
  0xee07d5c6:   pop    %eax
  0xee07d5c7:   mov    -0xc(%ebp),%ecx              ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee07d5ca:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee07d5cd:   test   %eax,%eax
  0xee07d5cf:   je     0xee07d5e7
  0xee07d5d5:   mov    0x8(%eax),%ebx
  0xee07d5d8:   add    $0x1,%ebx
  0xee07d5db:   sbb    $0x0,%ebx
  0xee07d5de:   mov    %ebx,0x8(%eax)
  0xee07d5e1:   add    0xc(%eax),%eax
  0xee07d5e4:   mov    %eax,-0x14(%ebp)
  0xee07d5e7:   mov    0x1(%esi),%edx               ;; 2134:     __ movl(rdx, at_bcp(1));
  0xee07d5ea:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee07d5ec:   add    %edx,%esi                    ;; 2167:   __ addptr(rbcp, rdx);
  0xee07d5ee:   test   %edx,%edx                    ;; 2181:     __ testl(rdx, rdx);             // check if forward or backward branch
  0xee07d5f0:   jns    0xee07d6f8                   ;; 2182:     __ jcc(Assembler::positive, dispatch); // count only if backward branch
  0xee07d5f6:   mov    0x10(%ecx),%eax              ;; 2186:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee07d5f9:   test   %eax,%eax                    ;; 2187:     __ testptr(rax, rax);
  0xee07d5fb:   jne    0xee07d6bc                   ;; 2188:     __ jcc(Assembler::notZero, has_counters);
  0xee07d601:   push   %edx                         ;; 2189:     __ push(rdx);
  0xee07d602:   push   %ecx                         ;; 2190:     __ push(rcx);
  0xee07d603:   call   0xee07d60d                   ;; 2191:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::build_method_counters),
  0xee07d608:   jmp    0xee07d6af
  0xee07d60d:   push   %ecx
  0xee07d60e:   lea    0x8(%esp),%eax
  0xee07d612:   mov    %esi,-0x20(%ebp)
  0xee07d615:   cmpl   $0x0,-0x8(%ebp)
  0xee07d619:   je     0xee07d630
  0xee07d61f:   push   $0xf78569d8
  0xee07d624:   call   0xee07d629
  0xee07d629:   pusha  
  0xee07d62a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d62f:   hlt    
  0xee07d630:   push   %eax
  0xee07d631:   push   %edx
  0xee07d632:   push   %ecx
  0xee07d633:   call   0xf704a910 = Thread::current()
  0xee07d638:   pop    %ecx
  0xee07d639:   pop    %edx
  0xee07d63a:   mov    %eax,%edi
  0xee07d63c:   pop    %eax
  0xee07d63d:   push   %edi
  0xee07d63e:   vzeroupper 
  0xee07d641:   mov    %ebp,0x230(%edi)
  0xee07d647:   mov    %eax,0x228(%edi)
  0xee07d64d:   call   0xf6c0dc60 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0xee07d652:   add    $0x8,%esp
  0xee07d655:   push   %eax
  0xee07d656:   push   %edx
  0xee07d657:   push   %ecx
  0xee07d658:   call   0xf704a910 = Thread::current()
  0xee07d65d:   pop    %ecx
  0xee07d65e:   pop    %edx
  0xee07d65f:   cmp    %eax,%edi
  0xee07d661:   je     0xee07d678
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07d667:   push   $0xf78b5a48
  0xee07d66c:   call   0xee07d671
  0xee07d671:   pusha  
  0xee07d672:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d677:   hlt    
  0xee07d678:   pop    %eax
  0xee07d679:   movl   $0x0,0x228(%edi)
  0xee07d683:   movl   $0x0,0x230(%edi)
  0xee07d68d:   movl   $0x0,0x22c(%edi)
  0xee07d697:   vzeroupper 
  0xee07d69a:   cmpl   $0x0,0x4(%edi)
  0xee07d69e:   jne    0xee05bbe0
  0xee07d6a4:   mov    -0x20(%ebp),%esi
  0xee07d6a7:   mov    -0x1c(%ebp),%edi
  0xee07d6aa:   lea    0x0(%ebp,%edi,4),%edi
  0xee07d6ae:   ret    
  0xee07d6af:   pop    %ecx                         ;; 2193:     __ pop(rcx);
  0xee07d6b0:   pop    %edx                         ;; 2194:     __ pop(rdx);
  0xee07d6b1:   mov    0x10(%ecx),%eax              ;; 2195:     __ movptr(rax, Address(rcx, Method::method_counters_offset()));
  0xee07d6b4:   test   %eax,%eax                    ;; 2196:     __ testptr(rax, rax);
  0xee07d6b6:   je     0xee07d6f8                   ;; 2197:     __ jcc(Assembler::zero, dispatch);
  0xee07d6bc:   mov    0xc(%ecx),%ebx               ;; 2198:     __ bind(has_counters);
                                                    ;; 2203:       __ movptr(rbx, Address(rcx, in_bytes(Method::method_data_offset())));
  0xee07d6bf:   test   %ebx,%ebx                    ;; 2204:       __ testptr(rbx, rbx);
  0xee07d6c1:   je     0xee07d6e3                   ;; 2205:       __ jccb(Assembler::zero, no_mdo);
  0xee07d6c3:   mov    0xb8(%ebx),%eax              ;; 2210:       __ increment_mask_and_jump(mdo_backedge_counter, mask, rax,
  0xee07d6c9:   add    $0x2,%eax
  0xee07d6cc:   mov    %eax,0xb8(%ebx)
  0xee07d6d2:   and    0xcc(%ebx),%eax
  0xee07d6d8:   je     0xee07d71f
  0xee07d6de:   jmp    0xee07d6f8                   ;; 2212:       __ jmp(dispatch);
  0xee07d6e3:   mov    0x10(%ecx),%ecx              ;; 2214:     __ bind(no_mdo);
                                                    ;; 2216:     __ movptr(rcx, Address(rcx, Method::method_counters_offset()));
  0xee07d6e6:   mov    0xc(%ecx),%eax               ;; 2218:     __ increment_mask_and_jump(Address(rcx, be_offset), mask, rax,
  0xee07d6e9:   add    $0x2,%eax
  0xee07d6ec:   mov    %eax,0xc(%ecx)
  0xee07d6ef:   and    0x20(%ecx),%eax
  0xee07d6f2:   je     0xee07d71f
  0xee07d6f8:   movzbl (%esi),%ebx                  ;; 2220:     __ bind(dispatch);
                                                    ;; 2224:   __ load_unsigned_byte(rbx, Address(rbcp, 0));
 ;; Thread-local Safepoint poll
  0xee07d6fb:   push   %eax                         ;; 2230:   __ dispatch_only(vtos, true);
  0xee07d6fc:   push   %edx
  0xee07d6fd:   push   %ecx
  0xee07d6fe:   call   0xf704a910 = Thread::current()
  0xee07d703:   pop    %ecx
  0xee07d704:   pop    %edx
  0xee07d705:   mov    %eax,%ecx
  0xee07d707:   pop    %eax
  0xee07d708:   testb  $0x1,0x288(%ecx)
  0xee07d70f:   je     0xee07d718
  0xee07d711:   jmp    *-0x8341aa0(,%ebx,4)
  0xee07d718:   jmp    *-0x833caa0(,%ebx,4)
  0xee07d71f:   neg    %edx                         ;; 2236:       __ bind(backedge_counter_overflow);
                                                    ;; 2237:       __ negptr(rdx);
  0xee07d721:   add    %esi,%edx                    ;; 2238:       __ addptr(rdx, rbcp); // branch bcp
  0xee07d723:   call   0xee07d72d                   ;; 2240:       __ call_VM(noreg,
  0xee07d728:   jmp    0xee07d7cf
  0xee07d72d:   push   %edx
  0xee07d72e:   lea    0x8(%esp),%eax
  0xee07d732:   mov    %esi,-0x20(%ebp)
  0xee07d735:   cmpl   $0x0,-0x8(%ebp)
  0xee07d739:   je     0xee07d750
  0xee07d73f:   push   $0xf78569d8
  0xee07d744:   call   0xee07d749
  0xee07d749:   pusha  
  0xee07d74a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d74f:   hlt    
  0xee07d750:   push   %eax
  0xee07d751:   push   %edx
  0xee07d752:   push   %ecx
  0xee07d753:   call   0xf704a910 = Thread::current()
  0xee07d758:   pop    %ecx
  0xee07d759:   pop    %edx
  0xee07d75a:   mov    %eax,%edi
  0xee07d75c:   pop    %eax
  0xee07d75d:   push   %edi
  0xee07d75e:   vzeroupper 
  0xee07d761:   mov    %ebp,0x230(%edi)
  0xee07d767:   mov    %eax,0x228(%edi)
  0xee07d76d:   call   0xf6c16be0 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0xee07d772:   add    $0x8,%esp
  0xee07d775:   push   %eax
  0xee07d776:   push   %edx
  0xee07d777:   push   %ecx
  0xee07d778:   call   0xf704a910 = Thread::current()
  0xee07d77d:   pop    %ecx
  0xee07d77e:   pop    %edx
  0xee07d77f:   cmp    %eax,%edi
  0xee07d781:   je     0xee07d798
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07d787:   push   $0xf78b5a48
  0xee07d78c:   call   0xee07d791
  0xee07d791:   pusha  
  0xee07d792:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d797:   hlt    
  0xee07d798:   pop    %eax
  0xee07d799:   movl   $0x0,0x228(%edi)
  0xee07d7a3:   movl   $0x0,0x230(%edi)
  0xee07d7ad:   movl   $0x0,0x22c(%edi)
  0xee07d7b7:   vzeroupper 
  0xee07d7ba:   cmpl   $0x0,0x4(%edi)
  0xee07d7be:   jne    0xee05bbe0
  0xee07d7c4:   mov    -0x20(%ebp),%esi
  0xee07d7c7:   mov    -0x1c(%ebp),%edi
  0xee07d7ca:   lea    0x0(%ebp,%edi,4),%edi
  0xee07d7ce:   ret    
  0xee07d7cf:   test   %eax,%eax                    ;; 2249:       __ testptr(rax, rax);                        // test result
  0xee07d7d1:   je     0xee07d6f8                   ;; 2250:       __ jcc(Assembler::zero, dispatch);         // no osr if null
  0xee07d7d7:   cmpb   $0x0,0xdc(%eax)              ;; 2252:       __ cmpb(Address(rax, nmethod::state_offset()), nmethod::in_use);
  0xee07d7de:   jne    0xee07d6f8                   ;; 2253:       __ jcc(Assembler::notEqual, dispatch);
  0xee07d7e4:   mov    %eax,%ebx                    ;; 2260:       __ mov(rbx, rax);
  0xee07d7e6:   push   %eax                         ;; 2262:       NOT_LP64(__ get_thread(rcx));
  0xee07d7e7:   push   %edx
  0xee07d7e8:   push   %ecx
  0xee07d7e9:   call   0xf704a910 = Thread::current()
  0xee07d7ee:   pop    %ecx
  0xee07d7ef:   pop    %edx
  0xee07d7f0:   mov    %eax,%ecx
  0xee07d7f2:   pop    %eax
  0xee07d7f3:   call   0xee07d7fd
  0xee07d7f8:   jmp    0xee07d89e
  0xee07d7fd:   lea    0x4(%esp),%eax
  0xee07d801:   mov    %esi,-0x20(%ebp)
  0xee07d804:   cmpl   $0x0,-0x8(%ebp)
  0xee07d808:   je     0xee07d81f
  0xee07d80e:   push   $0xf78569d8
  0xee07d813:   call   0xee07d818
  0xee07d818:   pusha  
  0xee07d819:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d81e:   hlt    
  0xee07d81f:   push   %eax
  0xee07d820:   push   %edx
  0xee07d821:   push   %ecx
  0xee07d822:   call   0xf704a910 = Thread::current()
  0xee07d827:   pop    %ecx
  0xee07d828:   pop    %edx
  0xee07d829:   mov    %eax,%edi
  0xee07d82b:   pop    %eax
  0xee07d82c:   push   %edi
  0xee07d82d:   vzeroupper 
  0xee07d830:   mov    %ebp,0x230(%edi)
  0xee07d836:   mov    %eax,0x228(%edi)
  0xee07d83c:   call   0xf73a0120 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0xee07d841:   add    $0x4,%esp
  0xee07d844:   push   %eax
  0xee07d845:   push   %edx
  0xee07d846:   push   %ecx
  0xee07d847:   call   0xf704a910 = Thread::current()
  0xee07d84c:   pop    %ecx
  0xee07d84d:   pop    %edx
  0xee07d84e:   cmp    %eax,%edi
  0xee07d850:   je     0xee07d867
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07d856:   push   $0xf78b5a48
  0xee07d85b:   call   0xee07d860
  0xee07d860:   pusha  
  0xee07d861:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d866:   hlt    
  0xee07d867:   pop    %eax
  0xee07d868:   movl   $0x0,0x228(%edi)
  0xee07d872:   movl   $0x0,0x230(%edi)
  0xee07d87c:   movl   $0x0,0x22c(%edi)
  0xee07d886:   vzeroupper 
  0xee07d889:   cmpl   $0x0,0x4(%edi)
  0xee07d88d:   jne    0xee05bbe0
  0xee07d893:   mov    -0x20(%ebp),%esi
  0xee07d896:   mov    -0x1c(%ebp),%edi
  0xee07d899:   lea    0x0(%ebp,%edi,4),%edi
  0xee07d89d:   ret    
  0xee07d89e:   mov    %eax,%ecx                    ;; 2268:       NOT_LP64(__ mov(rcx, rax));
  0xee07d8a0:   mov    -0x4(%ebp),%edx              ;; 2277:       __ movptr(sender_sp, Address(rbp, frame::interpreter_frame_sender_sp_offset * wordSize)); // get sender sp
  0xee07d8a3:   mov    %ebp,%esp                    ;; 2278:       __ leave();                                // remove frame anchor
  0xee07d8a5:   pop    %ebp
  0xee07d8a6:   pop    %edi                         ;; 2279:       __ pop(retaddr);                           // get return address
  0xee07d8a7:   mov    %edx,%esp                    ;; 2280:       __ mov(rsp, sender_sp);                   // set sp to sender sp
  0xee07d8a9:   and    $0xfffffff0,%esp             ;; 2282:       __ andptr(rsp, -(StackAlignmentInBytes));
  0xee07d8ac:   push   %edi                         ;; 2288:       __ push(retaddr);
  0xee07d8ad:   jmp    *0x88(%ebx)                  ;; 2291:       __ jmp(Address(rbx, nmethod::osr_entry_point_offset()));
  0xee07d8b3:   movzbl 0x5(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07d8b7:   add    $0x5,%esi
  0xee07d8ba:   jmp    *-0x833caa0(,%ebx,4)
  0xee07d8c1:   nop
  0xee07d8c2:   nop
  0xee07d8c3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
jsr_w  201 jsr_w  [0xee07d8e0, 0xee07d9ac]  204 bytes

--------------------------------------------------------------------------------
  0xee07d8e0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07d8e3:   vmovss %xmm0,(%esp)
  0xee07d8e8:   jmp    0xee07d8f9                   ;; 1751:       __ jmpb(L);
  0xee07d8ea:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07d8ed:   vmovsd %xmm0,(%esp)
  0xee07d8f2:   jmp    0xee07d8f9                   ;; 1754:       __ jmpb(L);
  0xee07d8f4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07d8f5:   push   %eax
  0xee07d8f6:   jmp    0xee07d8f9                   ;; 1765:       __ jmpb(L);
  0xee07d8f8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07d8f9:   push   %eax                         ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  380:       __ verify_method_data_pointer();
  0xee07d8fa:   push   %ebx
  0xee07d8fb:   push   %ecx
  0xee07d8fc:   push   %edx
  0xee07d8fd:   mov    -0x14(%ebp),%ecx
  0xee07d900:   test   %ecx,%ecx
  0xee07d902:   je     0xee07d943
  0xee07d908:   mov    -0xc(%ebp),%ebx
  0xee07d90b:   movzwl 0x2(%ecx),%edx
  0xee07d90f:   add    0x8(%ebx),%edx
  0xee07d912:   lea    0x2c(%edx),%edx
  0xee07d915:   cmp    %esi,%edx
  0xee07d917:   je     0xee07d943
  0xee07d91d:   push   %ecx
  0xee07d91e:   push   %esi
  0xee07d91f:   push   %ebx
  0xee07d920:   cmpl   $0x0,-0x8(%ebp)
  0xee07d924:   je     0xee07d93b
  0xee07d92a:   push   $0xf785694c
  0xee07d92f:   call   0xee07d934
  0xee07d934:   pusha  
  0xee07d935:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07d93a:   hlt    
  0xee07d93b:   call   0xf6c0d6c0 = InterpreterRuntime::verify_mdp(Method*, unsigned char*, unsigned char*)
  0xee07d940:   add    $0xc,%esp
  0xee07d943:   pop    %edx
  0xee07d944:   pop    %ecx
  0xee07d945:   pop    %ebx
  0xee07d946:   pop    %eax
  0xee07d947:   mov    -0xc(%ebp),%ecx              ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2123:   __ get_method(rcx); // rcx holds method
  0xee07d94a:   mov    -0x14(%ebp),%eax             ;; 2124:   __ profile_taken_branch(rax, rbx); // rax holds updated MDP, rbx
  0xee07d94d:   test   %eax,%eax
  0xee07d94f:   je     0xee07d967
  0xee07d955:   mov    0x8(%eax),%ebx
  0xee07d958:   add    $0x1,%ebx
  0xee07d95b:   sbb    $0x0,%ebx
  0xee07d95e:   mov    %ebx,0x8(%eax)
  0xee07d961:   add    0xc(%eax),%eax
  0xee07d964:   mov    %eax,-0x14(%ebp)
  0xee07d967:   mov    0x1(%esi),%edx               ;; 2134:     __ movl(rdx, at_bcp(1));
  0xee07d96a:   bswap  %edx                         ;; 2138:   __ bswapl(rdx);
  0xee07d96c:   movzbl (%esi,%edx,1),%ebx           ;; 2150:     __ load_unsigned_byte(rbx, Address(rbcp, rdx, Address::times_1, 0));
  0xee07d970:   lea    -0x27(%esi),%eax             ;; 2153:     __ lea(rax, at_bcp((is_wide ? 5 : 3) -
  0xee07d973:   sub    0x8(%ecx),%eax               ;; 2155:     __ subptr(rax, Address(rcx, Method::const_offset()));
  0xee07d976:   add    %edx,%esi                    ;; 2157:     __ addptr(rbcp, rdx);
  0xee07d978:   push   %eax                         ;; 2159:     __ push_i(rax);
 ;; Thread-local Safepoint poll
  0xee07d979:   push   %eax                         ;; 2160:     __ dispatch_only(vtos, true);
  0xee07d97a:   push   %edx
  0xee07d97b:   push   %ecx
  0xee07d97c:   call   0xf704a910 = Thread::current()
  0xee07d981:   pop    %ecx
  0xee07d982:   pop    %edx
  0xee07d983:   mov    %eax,%ecx
  0xee07d985:   pop    %eax
  0xee07d986:   testb  $0x1,0x288(%ecx)
  0xee07d98d:   je     0xee07d996
  0xee07d98f:   jmp    *-0x8341aa0(,%ebx,4)
  0xee07d996:   jmp    *-0x833caa0(,%ebx,4)
  0xee07d99d:   movzbl 0x5(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07d9a1:   add    $0x5,%esi
  0xee07d9a4:   jmp    *-0x833caa0(,%ebx,4)
  0xee07d9ab:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
breakpoint  202 breakpoint  [0xee07d9c0, 0xee07db54]  404 bytes

--------------------------------------------------------------------------------
  0xee07d9c0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07d9c3:   vmovss %xmm0,(%esp)
  0xee07d9c8:   jmp    0xee07d9d9                   ;; 1751:       __ jmpb(L);
  0xee07d9ca:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07d9cd:   vmovsd %xmm0,(%esp)
  0xee07d9d2:   jmp    0xee07d9d9                   ;; 1754:       __ jmpb(L);
  0xee07d9d4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07d9d5:   push   %eax
  0xee07d9d6:   jmp    0xee07d9d9                   ;; 1765:       __ jmpb(L);
  0xee07d9d8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07d9d9:   mov    -0xc(%ebp),%ecx              ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 4204:   __ get_method(rarg);
  0xee07d9dc:   call   0xee07d9e6                   ;; 4205:   __ call_VM(noreg,
  0xee07d9e1:   jmp    0xee07da89
  0xee07d9e6:   push   %esi
  0xee07d9e7:   push   %ecx
  0xee07d9e8:   lea    0xc(%esp),%eax
  0xee07d9ec:   mov    %esi,-0x20(%ebp)
  0xee07d9ef:   cmpl   $0x0,-0x8(%ebp)
  0xee07d9f3:   je     0xee07da0a
  0xee07d9f9:   push   $0xf78569d8
  0xee07d9fe:   call   0xee07da03
  0xee07da03:   pusha  
  0xee07da04:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07da09:   hlt    
  0xee07da0a:   push   %eax
  0xee07da0b:   push   %edx
  0xee07da0c:   push   %ecx
  0xee07da0d:   call   0xf704a910 = Thread::current()
  0xee07da12:   pop    %ecx
  0xee07da13:   pop    %edx
  0xee07da14:   mov    %eax,%edi
  0xee07da16:   pop    %eax
  0xee07da17:   push   %edi
  0xee07da18:   vzeroupper 
  0xee07da1b:   mov    %ebp,0x230(%edi)
  0xee07da21:   mov    %eax,0x228(%edi)
  0xee07da27:   call   0xf6c0cf30 = InterpreterRuntime::get_original_bytecode_at(JavaThread*, Method*, unsigned char*)
  0xee07da2c:   add    $0xc,%esp
  0xee07da2f:   push   %eax
  0xee07da30:   push   %edx
  0xee07da31:   push   %ecx
  0xee07da32:   call   0xf704a910 = Thread::current()
  0xee07da37:   pop    %ecx
  0xee07da38:   pop    %edx
  0xee07da39:   cmp    %eax,%edi
  0xee07da3b:   je     0xee07da52
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07da41:   push   $0xf78b5a48
  0xee07da46:   call   0xee07da4b
  0xee07da4b:   pusha  
  0xee07da4c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07da51:   hlt    
  0xee07da52:   pop    %eax
  0xee07da53:   movl   $0x0,0x228(%edi)
  0xee07da5d:   movl   $0x0,0x230(%edi)
  0xee07da67:   movl   $0x0,0x22c(%edi)
  0xee07da71:   vzeroupper 
  0xee07da74:   cmpl   $0x0,0x4(%edi)
  0xee07da78:   jne    0xee05bbe0
  0xee07da7e:   mov    -0x20(%ebp),%esi
  0xee07da81:   mov    -0x1c(%ebp),%edi
  0xee07da84:   lea    0x0(%ebp,%edi,4),%edi
  0xee07da88:   ret    
  0xee07da89:   mov    %eax,%ebx                    ;; 4209:   __ mov(rbx, rax);  // why?
  0xee07da8b:   mov    -0xc(%ebp),%ecx              ;; 4212:   __ get_method(rarg);
  0xee07da8e:   call   0xee07da98                   ;; 4213:   __ call_VM(noreg,
  0xee07da93:   jmp    0xee07db3b
  0xee07da98:   push   %esi
  0xee07da99:   push   %ecx
  0xee07da9a:   lea    0xc(%esp),%eax
  0xee07da9e:   mov    %esi,-0x20(%ebp)
  0xee07daa1:   cmpl   $0x0,-0x8(%ebp)
  0xee07daa5:   je     0xee07dabc
  0xee07daab:   push   $0xf78569d8
  0xee07dab0:   call   0xee07dab5
  0xee07dab5:   pusha  
  0xee07dab6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07dabb:   hlt    
  0xee07dabc:   push   %eax
  0xee07dabd:   push   %edx
  0xee07dabe:   push   %ecx
  0xee07dabf:   call   0xf704a910 = Thread::current()
  0xee07dac4:   pop    %ecx
  0xee07dac5:   pop    %edx
  0xee07dac6:   mov    %eax,%edi
  0xee07dac8:   pop    %eax
  0xee07dac9:   push   %edi
  0xee07daca:   vzeroupper 
  0xee07dacd:   mov    %ebp,0x230(%edi)
  0xee07dad3:   mov    %eax,0x228(%edi)
  0xee07dad9:   call   0xf6c0d3b0 = InterpreterRuntime::_breakpoint(JavaThread*, Method*, unsigned char*)
  0xee07dade:   add    $0xc,%esp
  0xee07dae1:   push   %eax
  0xee07dae2:   push   %edx
  0xee07dae3:   push   %ecx
  0xee07dae4:   call   0xf704a910 = Thread::current()
  0xee07dae9:   pop    %ecx
  0xee07daea:   pop    %edx
  0xee07daeb:   cmp    %eax,%edi
  0xee07daed:   je     0xee07db04
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07daf3:   push   $0xf78b5a48
  0xee07daf8:   call   0xee07dafd
  0xee07dafd:   pusha  
  0xee07dafe:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07db03:   hlt    
  0xee07db04:   pop    %eax
  0xee07db05:   movl   $0x0,0x228(%edi)
  0xee07db0f:   movl   $0x0,0x230(%edi)
  0xee07db19:   movl   $0x0,0x22c(%edi)
  0xee07db23:   vzeroupper 
  0xee07db26:   cmpl   $0x0,0x4(%edi)
  0xee07db2a:   jne    0xee05bbe0
  0xee07db30:   mov    -0x20(%ebp),%esi
  0xee07db33:   mov    -0x1c(%ebp),%edi
  0xee07db36:   lea    0x0(%ebp,%edi,4),%edi
  0xee07db3a:   ret    
  0xee07db3b:   jmp    *-0x833f2a0(,%ebx,4)         ;; 4218:   __ dispatch_only_normal(vtos);
  0xee07db42:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee07db47:   call   0xee07db4c
  0xee07db4c:   pusha  
  0xee07db4d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07db52:   hlt    
  0xee07db53:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_agetfield  203 fast_agetfield  [0xee07db80, 0xee07dba4]  36 bytes

--------------------------------------------------------------------------------
  0xee07db80:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee07db81:   movzwl 0x1(%esi),%ebx               ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3434:   __ get_cache_and_index_at_bcp(rcx, rbx, 1);
  0xee07db85:   mov    -0x18(%ebp),%ecx
  0xee07db88:   shl    $0x2,%ebx
  0xee07db8b:   mov    0x24(%ecx,%ebx,4),%ebx       ;; 3443:   __ movptr(rbx, Address(rcx, rbx, Address::times_ptr,
  0xee07db8f:   cmp    (%eax),%eax                  ;; 3448:   __ verify_oop(rax);
                                                    ;; 3449:   __ null_check(rax);
  0xee07db91:   mov    (%eax,%ebx,1),%eax           ;;  165:   __ load_heap_oop(dst, src, rdx, rbx, decorators);
  0xee07db94:   movzbl 0x3(%esi),%ebx               ;; 3456:     __ verify_oop(rax);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07db98:   add    $0x3,%esi
  0xee07db9b:   jmp    *-0x833cea0(,%ebx,4)
  0xee07dba2:   nop
  0xee07dba3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_bgetfield  204 fast_bgetfield  [0xee07dbc0, 0xee07dbe4]  36 bytes

--------------------------------------------------------------------------------
  0xee07dbc0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee07dbc1:   movzwl 0x1(%esi),%ebx               ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3434:   __ get_cache_and_index_at_bcp(rcx, rbx, 1);
  0xee07dbc5:   mov    -0x18(%ebp),%ecx
  0xee07dbc8:   shl    $0x2,%ebx
  0xee07dbcb:   mov    0x24(%ecx,%ebx,4),%ebx       ;; 3443:   __ movptr(rbx, Address(rcx, rbx, Address::times_ptr,
  0xee07dbcf:   cmp    (%eax),%eax                  ;; 3448:   __ verify_oop(rax);
                                                    ;; 3449:   __ null_check(rax);
  0xee07dbd1:   movsbl (%eax,%ebx,1),%eax           ;; 3469:     __ access_load_at(T_BYTE, IN_HEAP, rax, field, noreg, noreg);
  0xee07dbd5:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07dbd9:   add    $0x3,%esi
  0xee07dbdc:   jmp    *-0x833dea0(,%ebx,4)
  0xee07dbe3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_cgetfield  205 fast_cgetfield  [0xee07dc00, 0xee07dc24]  36 bytes

--------------------------------------------------------------------------------
  0xee07dc00:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee07dc01:   movzwl 0x1(%esi),%ebx               ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3434:   __ get_cache_and_index_at_bcp(rcx, rbx, 1);
  0xee07dc05:   mov    -0x18(%ebp),%ecx
  0xee07dc08:   shl    $0x2,%ebx
  0xee07dc0b:   mov    0x24(%ecx,%ebx,4),%ebx       ;; 3443:   __ movptr(rbx, Address(rcx, rbx, Address::times_ptr,
  0xee07dc0f:   cmp    (%eax),%eax                  ;; 3448:   __ verify_oop(rax);
                                                    ;; 3449:   __ null_check(rax);
  0xee07dc11:   movzwl (%eax,%ebx,1),%eax           ;; 3475:     __ access_load_at(T_CHAR, IN_HEAP, rax, field, noreg, noreg);
  0xee07dc15:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07dc19:   add    $0x3,%esi
  0xee07dc1c:   jmp    *-0x833dea0(,%ebx,4)
  0xee07dc23:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_dgetfield  206 fast_dgetfield  [0xee07dc40, 0xee07dc64]  36 bytes

--------------------------------------------------------------------------------
  0xee07dc40:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee07dc41:   movzwl 0x1(%esi),%ebx               ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3434:   __ get_cache_and_index_at_bcp(rcx, rbx, 1);
  0xee07dc45:   mov    -0x18(%ebp),%ecx
  0xee07dc48:   shl    $0x2,%ebx
  0xee07dc4b:   mov    0x24(%ecx,%ebx,4),%ebx       ;; 3443:   __ movptr(rbx, Address(rcx, rbx, Address::times_ptr,
  0xee07dc4f:   cmp    (%eax),%eax                  ;; 3448:   __ verify_oop(rax);
                                                    ;; 3449:   __ null_check(rax);
  0xee07dc51:   vmovsd (%eax,%ebx,1),%xmm0          ;; 3481:     __ access_load_at(T_DOUBLE, IN_HEAP, noreg /* dtos */, field, noreg, noreg);
  0xee07dc56:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07dc5a:   add    $0x3,%esi
  0xee07dc5d:   jmp    *-0x833d2a0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_fgetfield  207 fast_fgetfield  [0xee07dc80, 0xee07dca4]  36 bytes

--------------------------------------------------------------------------------
  0xee07dc80:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee07dc81:   movzwl 0x1(%esi),%ebx               ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3434:   __ get_cache_and_index_at_bcp(rcx, rbx, 1);
  0xee07dc85:   mov    -0x18(%ebp),%ecx
  0xee07dc88:   shl    $0x2,%ebx
  0xee07dc8b:   mov    0x24(%ecx,%ebx,4),%ebx       ;; 3443:   __ movptr(rbx, Address(rcx, rbx, Address::times_ptr,
  0xee07dc8f:   cmp    (%eax),%eax                  ;; 3448:   __ verify_oop(rax);
                                                    ;; 3449:   __ null_check(rax);
  0xee07dc91:   vmovss (%eax,%ebx,1),%xmm0          ;; 3478:     __ access_load_at(T_FLOAT, IN_HEAP, noreg /* ftos */, field, noreg, noreg);
  0xee07dc96:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07dc9a:   add    $0x3,%esi
  0xee07dc9d:   jmp    *-0x833d6a0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_igetfield  208 fast_igetfield  [0xee07dcc0, 0xee07dce4]  36 bytes

--------------------------------------------------------------------------------
  0xee07dcc0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee07dcc1:   movzwl 0x1(%esi),%ebx               ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3434:   __ get_cache_and_index_at_bcp(rcx, rbx, 1);
  0xee07dcc5:   mov    -0x18(%ebp),%ecx
  0xee07dcc8:   shl    $0x2,%ebx
  0xee07dccb:   mov    0x24(%ecx,%ebx,4),%ebx       ;; 3443:   __ movptr(rbx, Address(rcx, rbx, Address::times_ptr,
  0xee07dccf:   cmp    (%eax),%eax                  ;; 3448:   __ verify_oop(rax);
                                                    ;; 3449:   __ null_check(rax);
  0xee07dcd1:   mov    (%eax,%ebx,1),%eax           ;; 3466:     __ access_load_at(T_INT, IN_HEAP, rax, field, noreg, noreg);
  0xee07dcd4:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07dcd8:   add    $0x3,%esi
  0xee07dcdb:   jmp    *-0x833dea0(,%ebx,4)
  0xee07dce2:   nop
  0xee07dce3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_lgetfield  209 fast_lgetfield  [0xee07dd00, 0xee07dd30]  48 bytes

--------------------------------------------------------------------------------
  0xee07dd00:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee07dd01:   movzwl 0x1(%esi),%ebx               ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3434:   __ get_cache_and_index_at_bcp(rcx, rbx, 1);
  0xee07dd05:   mov    -0x18(%ebp),%ecx
  0xee07dd08:   shl    $0x2,%ebx
  0xee07dd0b:   mov    0x24(%ecx,%ebx,4),%ebx       ;; 3443:   __ movptr(rbx, Address(rcx, rbx, Address::times_ptr,
  0xee07dd0f:   cmp    (%eax),%eax                  ;; 3448:   __ verify_oop(rax);
                                                    ;; 3449:   __ null_check(rax);
  0xee07dd11:   push   $0xf7925013                  ;; 3462:   __ stop("should not be rewritten");
  0xee07dd16:   call   0xee07dd1b
  0xee07dd1b:   pusha  
  0xee07dd1c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07dd21:   hlt    
  0xee07dd22:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07dd26:   add    $0x3,%esi
  0xee07dd29:   jmp    *-0x833daa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_sgetfield  210 fast_sgetfield  [0xee07dd60, 0xee07dd84]  36 bytes

--------------------------------------------------------------------------------
  0xee07dd60:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee07dd61:   movzwl 0x1(%esi),%ebx               ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3434:   __ get_cache_and_index_at_bcp(rcx, rbx, 1);
  0xee07dd65:   mov    -0x18(%ebp),%ecx
  0xee07dd68:   shl    $0x2,%ebx
  0xee07dd6b:   mov    0x24(%ecx,%ebx,4),%ebx       ;; 3443:   __ movptr(rbx, Address(rcx, rbx, Address::times_ptr,
  0xee07dd6f:   cmp    (%eax),%eax                  ;; 3448:   __ verify_oop(rax);
                                                    ;; 3449:   __ null_check(rax);
  0xee07dd71:   movswl (%eax,%ebx,1),%eax           ;; 3472:     __ access_load_at(T_SHORT, IN_HEAP, rax, field, noreg, noreg);
  0xee07dd75:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07dd79:   add    $0x3,%esi
  0xee07dd7c:   jmp    *-0x833dea0(,%ebx,4)
  0xee07dd83:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_aputfield  211 fast_aputfield  [0xee07dda0, 0xee07e0dc]  828 bytes

--------------------------------------------------------------------------------
  0xee07dda0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
  0xee07dda1:   movzwl 0x1(%esi),%ebx               ;;  348:     case atos: vep = __ pc(); __ pop(atos); aep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3328:   __ get_cache_and_index_at_bcp(rcx, rbx, 1);
  0xee07dda5:   mov    -0x18(%ebp),%ecx
  0xee07dda8:   shl    $0x2,%ebx
  0xee07ddab:   mov    0x28(%ecx,%ebx,4),%edx       ;; 3331:   __ movl(rdx, Address(rcx, rbx, Address::times_ptr,
  0xee07ddaf:   mov    0x24(%ecx,%ebx,4),%ebx       ;; 3336:   __ movptr(rbx, Address(rcx, rbx, Address::times_ptr,
  0xee07ddb3:   shr    $0x15,%edx                   ;; 3344:   __ shrl(rdx, ConstantPoolCacheEntry::is_volatile_shift);
  0xee07ddb6:   and    $0x1,%edx                    ;; 3345:   __ andl(rdx, 0x1);
  0xee07ddb9:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07ddba:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07ddbc:   test   %edx,%edx                    ;; 2795:   __ verify_oop(r);
                                                    ;; 3354:   __ testl(rdx, rdx);
  0xee07ddbe:   je     0xee07df4d                   ;; 3355:   __ jcc(Assembler::zero, notVolatile);
  0xee07ddc4:   lea    (%ecx,%ebx,1),%edx           ;;  155:   __ store_heap_oop(dst, val,
  0xee07ddc7:   push   %eax
  0xee07ddc8:   push   %edx
  0xee07ddc9:   push   %ecx
  0xee07ddca:   call   0xf704a910 = Thread::current()
  0xee07ddcf:   pop    %ecx
  0xee07ddd0:   pop    %edx
  0xee07ddd1:   mov    %eax,%ecx
  0xee07ddd3:   pop    %eax
  0xee07ddd4:   mov    %esi,-0x20(%ebp)
  0xee07ddd7:   cmpb   $0x0,0x24(%ecx)
  0xee07dddb:   je     0xee07deac
  0xee07dde1:   mov    (%edx),%ebx
  0xee07dde3:   cmp    $0x0,%ebx
  0xee07dde6:   je     0xee07deac
  0xee07ddec:   mov    0x18(%ecx),%esi
  0xee07ddef:   cmp    $0x0,%esi
  0xee07ddf2:   je     0xee07de08
  0xee07ddf8:   sub    $0x4,%esi
  0xee07ddfb:   mov    %esi,0x18(%ecx)
  0xee07ddfe:   add    0x20(%ecx),%esi
  0xee07de01:   mov    %ebx,(%esi)
  0xee07de03:   jmp    0xee07deac
 ;; push_call_clobbered_registers start
  0xee07de08:   sub    $0x50,%esp
  0xee07de0b:   mov    %eax,(%esp)
  0xee07de0e:   mov    %ecx,0x4(%esp)
  0xee07de12:   mov    %edx,0x8(%esp)
  0xee07de16:   vmovsd %xmm0,0x10(%esp)
  0xee07de1c:   vmovsd %xmm1,0x18(%esp)
  0xee07de22:   vmovsd %xmm2,0x20(%esp)
  0xee07de28:   vmovsd %xmm3,0x28(%esp)
  0xee07de2e:   vmovsd %xmm4,0x30(%esp)
  0xee07de34:   vmovsd %xmm5,0x38(%esp)
  0xee07de3a:   vmovsd %xmm6,0x40(%esp)
  0xee07de40:   vmovsd %xmm7,0x48(%esp)
 ;; push_call_clobbered_registers end
  0xee07de46:   push   %ecx
  0xee07de47:   push   %ebx
  0xee07de48:   cmpl   $0x0,-0x8(%ebp)
  0xee07de4c:   je     0xee07de63
  0xee07de52:   push   $0xf785694c
  0xee07de57:   call   0xee07de5c
  0xee07de5c:   pusha  
  0xee07de5d:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07de62:   hlt    
  0xee07de63:   call   0xf6a17f10 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0xee07de68:   add    $0x8,%esp
 ;; pop_call_clobbered_registers start
  0xee07de6b:   vmovsd 0x48(%esp),%xmm7
  0xee07de71:   vmovsd 0x40(%esp),%xmm6
  0xee07de77:   vmovsd 0x38(%esp),%xmm5
  0xee07de7d:   vmovsd 0x30(%esp),%xmm4
  0xee07de83:   vmovsd 0x28(%esp),%xmm3
  0xee07de89:   vmovsd 0x20(%esp),%xmm2
  0xee07de8f:   vmovsd 0x18(%esp),%xmm1
  0xee07de95:   vmovsd 0x10(%esp),%xmm0
  0xee07de9b:   mov    0x8(%esp),%edx
  0xee07de9f:   mov    0x4(%esp),%ecx
  0xee07dea3:   mov    (%esp),%eax
  0xee07dea6:   add    $0x50,%esp
  0xee07dea9:   vzeroupper 
 ;; pop_call_clobbered_registers end
  0xee07deac:   mov    %eax,(%edx)
  0xee07deae:   mov    %edx,%esi
  0xee07deb0:   xor    %eax,%esi
  0xee07deb2:   shr    $0x14,%esi
  0xee07deb5:   je     0xee07df3f
  0xee07debb:   cmp    $0x0,%eax
  0xee07debe:   je     0xee07df3f
  0xee07dec4:   mov    %edx,%esi
  0xee07dec6:   shr    $0x9,%esi
  0xee07dec9:   mov    $0xa5ecc000,%ebx
  0xee07dece:   add    %ebx,%esi
  0xee07ded0:   cmpb   $0x2,(%esi)
  0xee07ded3:   je     0xee07df3f
  0xee07ded9:   lock addl $0x0,-0x40(%esp)
  0xee07dedf:   cmpb   $0x0,(%esi)
  0xee07dee2:   je     0xee07df3f
  0xee07dee8:   movb   $0x0,(%esi)
  0xee07deeb:   mov    0x28(%ecx),%ebx
  0xee07deee:   test   %ebx,%ebx
  0xee07def0:   je     0xee07df06
  0xee07def6:   sub    $0x4,%ebx
  0xee07def9:   mov    %ebx,0x28(%ecx)
  0xee07defc:   add    0x30(%ecx),%ebx
  0xee07deff:   mov    %esi,(%ebx)
  0xee07df01:   jmp    0xee07df3f
  0xee07df06:   sub    $0x10,%esp
  0xee07df09:   mov    %ecx,(%esp)
  0xee07df0c:   mov    %edx,0x4(%esp)
  0xee07df10:   push   %ecx
  0xee07df11:   push   %esi
  0xee07df12:   cmpl   $0x0,-0x8(%ebp)
  0xee07df16:   je     0xee07df2d
  0xee07df1c:   push   $0xf785694c
  0xee07df21:   call   0xee07df26
  0xee07df26:   pusha  
  0xee07df27:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07df2c:   hlt    
  0xee07df2d:   call   0xf6a181d0 = G1BarrierSetRuntime::write_ref_field_post_entry(unsigned char volatile*, JavaThread*)
  0xee07df32:   add    $0x8,%esp
  0xee07df35:   mov    0x4(%esp),%edx
  0xee07df39:   mov    (%esp),%ecx
  0xee07df3c:   add    $0x10,%esp
  0xee07df3f:   mov    -0x20(%ebp),%esi
  0xee07df42:   lock addl $0x0,-0x40(%esp)          ;; 2645:   __ membar(order_constraint);
  0xee07df48:   jmp    0xee07e0cb                   ;; 3360:   __ jmp(Done);
  0xee07df4d:   lea    (%ecx,%ebx,1),%edx           ;; 3361:   __ bind(notVolatile);
                                                    ;;  155:   __ store_heap_oop(dst, val,
  0xee07df50:   push   %eax
  0xee07df51:   push   %edx
  0xee07df52:   push   %ecx
  0xee07df53:   call   0xf704a910 = Thread::current()
  0xee07df58:   pop    %ecx
  0xee07df59:   pop    %edx
  0xee07df5a:   mov    %eax,%ecx
  0xee07df5c:   pop    %eax
  0xee07df5d:   mov    %esi,-0x20(%ebp)
  0xee07df60:   cmpb   $0x0,0x24(%ecx)
  0xee07df64:   je     0xee07e035
  0xee07df6a:   mov    (%edx),%ebx
  0xee07df6c:   cmp    $0x0,%ebx
  0xee07df6f:   je     0xee07e035
  0xee07df75:   mov    0x18(%ecx),%esi
  0xee07df78:   cmp    $0x0,%esi
  0xee07df7b:   je     0xee07df91
  0xee07df81:   sub    $0x4,%esi
  0xee07df84:   mov    %esi,0x18(%ecx)
  0xee07df87:   add    0x20(%ecx),%esi
  0xee07df8a:   mov    %ebx,(%esi)
  0xee07df8c:   jmp    0xee07e035
 ;; push_call_clobbered_registers start
  0xee07df91:   sub    $0x50,%esp
  0xee07df94:   mov    %eax,(%esp)
  0xee07df97:   mov    %ecx,0x4(%esp)
  0xee07df9b:   mov    %edx,0x8(%esp)
  0xee07df9f:   vmovsd %xmm0,0x10(%esp)
  0xee07dfa5:   vmovsd %xmm1,0x18(%esp)
  0xee07dfab:   vmovsd %xmm2,0x20(%esp)
  0xee07dfb1:   vmovsd %xmm3,0x28(%esp)
  0xee07dfb7:   vmovsd %xmm4,0x30(%esp)
  0xee07dfbd:   vmovsd %xmm5,0x38(%esp)
  0xee07dfc3:   vmovsd %xmm6,0x40(%esp)
  0xee07dfc9:   vmovsd %xmm7,0x48(%esp)
 ;; push_call_clobbered_registers end
  0xee07dfcf:   push   %ecx
  0xee07dfd0:   push   %ebx
  0xee07dfd1:   cmpl   $0x0,-0x8(%ebp)
  0xee07dfd5:   je     0xee07dfec
  0xee07dfdb:   push   $0xf785694c
  0xee07dfe0:   call   0xee07dfe5
  0xee07dfe5:   pusha  
  0xee07dfe6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07dfeb:   hlt    
  0xee07dfec:   call   0xf6a17f10 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0xee07dff1:   add    $0x8,%esp
 ;; pop_call_clobbered_registers start
  0xee07dff4:   vmovsd 0x48(%esp),%xmm7
  0xee07dffa:   vmovsd 0x40(%esp),%xmm6
  0xee07e000:   vmovsd 0x38(%esp),%xmm5
  0xee07e006:   vmovsd 0x30(%esp),%xmm4
  0xee07e00c:   vmovsd 0x28(%esp),%xmm3
  0xee07e012:   vmovsd 0x20(%esp),%xmm2
  0xee07e018:   vmovsd 0x18(%esp),%xmm1
  0xee07e01e:   vmovsd 0x10(%esp),%xmm0
  0xee07e024:   mov    0x8(%esp),%edx
  0xee07e028:   mov    0x4(%esp),%ecx
  0xee07e02c:   mov    (%esp),%eax
  0xee07e02f:   add    $0x50,%esp
  0xee07e032:   vzeroupper 
 ;; pop_call_clobbered_registers end
  0xee07e035:   mov    %eax,(%edx)
  0xee07e037:   mov    %edx,%esi
  0xee07e039:   xor    %eax,%esi
  0xee07e03b:   shr    $0x14,%esi
  0xee07e03e:   je     0xee07e0c8
  0xee07e044:   cmp    $0x0,%eax
  0xee07e047:   je     0xee07e0c8
  0xee07e04d:   mov    %edx,%esi
  0xee07e04f:   shr    $0x9,%esi
  0xee07e052:   mov    $0xa5ecc000,%ebx
  0xee07e057:   add    %ebx,%esi
  0xee07e059:   cmpb   $0x2,(%esi)
  0xee07e05c:   je     0xee07e0c8
  0xee07e062:   lock addl $0x0,-0x40(%esp)
  0xee07e068:   cmpb   $0x0,(%esi)
  0xee07e06b:   je     0xee07e0c8
  0xee07e071:   movb   $0x0,(%esi)
  0xee07e074:   mov    0x28(%ecx),%ebx
  0xee07e077:   test   %ebx,%ebx
  0xee07e079:   je     0xee07e08f
  0xee07e07f:   sub    $0x4,%ebx
  0xee07e082:   mov    %ebx,0x28(%ecx)
  0xee07e085:   add    0x30(%ecx),%ebx
  0xee07e088:   mov    %esi,(%ebx)
  0xee07e08a:   jmp    0xee07e0c8
  0xee07e08f:   sub    $0x10,%esp
  0xee07e092:   mov    %ecx,(%esp)
  0xee07e095:   mov    %edx,0x4(%esp)
  0xee07e099:   push   %ecx
  0xee07e09a:   push   %esi
  0xee07e09b:   cmpl   $0x0,-0x8(%ebp)
  0xee07e09f:   je     0xee07e0b6
  0xee07e0a5:   push   $0xf785694c
  0xee07e0aa:   call   0xee07e0af
  0xee07e0af:   pusha  
  0xee07e0b0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07e0b5:   hlt    
  0xee07e0b6:   call   0xf6a181d0 = G1BarrierSetRuntime::write_ref_field_post_entry(unsigned char volatile*, JavaThread*)
  0xee07e0bb:   add    $0x8,%esp
  0xee07e0be:   mov    0x4(%esp),%edx
  0xee07e0c2:   mov    (%esp),%ecx
  0xee07e0c5:   add    $0x10,%esp
  0xee07e0c8:   mov    -0x20(%ebp),%esi
  0xee07e0cb:   movzbl 0x3(%esi),%ebx               ;; 3365:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07e0cf:   add    $0x3,%esi
  0xee07e0d2:   jmp    *-0x833caa0(,%ebx,4)
  0xee07e0d9:   nop
  0xee07e0da:   nop
  0xee07e0db:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_bputfield  212 fast_bputfield  [0xee07e100, 0xee07e144]  68 bytes

--------------------------------------------------------------------------------
  0xee07e100:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee07e101:   movzwl 0x1(%esi),%ebx               ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3328:   __ get_cache_and_index_at_bcp(rcx, rbx, 1);
  0xee07e105:   mov    -0x18(%ebp),%ecx
  0xee07e108:   shl    $0x2,%ebx
  0xee07e10b:   mov    0x28(%ecx,%ebx,4),%edx       ;; 3331:   __ movl(rdx, Address(rcx, rbx, Address::times_ptr,
  0xee07e10f:   mov    0x24(%ecx,%ebx,4),%ebx       ;; 3336:   __ movptr(rbx, Address(rcx, rbx, Address::times_ptr,
  0xee07e113:   shr    $0x15,%edx                   ;; 3344:   __ shrl(rdx, ConstantPoolCacheEntry::is_volatile_shift);
  0xee07e116:   and    $0x1,%edx                    ;; 3345:   __ andl(rdx, 0x1);
  0xee07e119:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07e11a:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07e11c:   test   %edx,%edx                    ;; 2795:   __ verify_oop(r);
                                                    ;; 3354:   __ testl(rdx, rdx);
  0xee07e11e:   je     0xee07e132                   ;; 3355:   __ jcc(Assembler::zero, notVolatile);
  0xee07e124:   mov    %al,(%ecx,%ebx,1)            ;; 3389:     __ access_store_at(T_BYTE, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07e127:   lock addl $0x0,-0x40(%esp)          ;; 2645:   __ membar(order_constraint);
  0xee07e12d:   jmp    0xee07e135                   ;; 3360:   __ jmp(Done);
  0xee07e132:   mov    %al,(%ecx,%ebx,1)            ;; 3361:   __ bind(notVolatile);
                                                    ;; 3389:     __ access_store_at(T_BYTE, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07e135:   movzbl 0x3(%esi),%ebx               ;; 3365:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07e139:   add    $0x3,%esi
  0xee07e13c:   jmp    *-0x833caa0(,%ebx,4)
  0xee07e143:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_zputfield  213 fast_zputfield  [0xee07e160, 0xee07e1ac]  76 bytes

--------------------------------------------------------------------------------
  0xee07e160:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee07e161:   movzwl 0x1(%esi),%ebx               ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3328:   __ get_cache_and_index_at_bcp(rcx, rbx, 1);
  0xee07e165:   mov    -0x18(%ebp),%ecx
  0xee07e168:   shl    $0x2,%ebx
  0xee07e16b:   mov    0x28(%ecx,%ebx,4),%edx       ;; 3331:   __ movl(rdx, Address(rcx, rbx, Address::times_ptr,
  0xee07e16f:   mov    0x24(%ecx,%ebx,4),%ebx       ;; 3336:   __ movptr(rbx, Address(rcx, rbx, Address::times_ptr,
  0xee07e173:   shr    $0x15,%edx                   ;; 3344:   __ shrl(rdx, ConstantPoolCacheEntry::is_volatile_shift);
  0xee07e176:   and    $0x1,%edx                    ;; 3345:   __ andl(rdx, 0x1);
  0xee07e179:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07e17a:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07e17c:   test   %edx,%edx                    ;; 2795:   __ verify_oop(r);
                                                    ;; 3354:   __ testl(rdx, rdx);
  0xee07e17e:   je     0xee07e195                   ;; 3355:   __ jcc(Assembler::zero, notVolatile);
  0xee07e184:   and    $0x1,%eax                    ;; 3386:     __ access_store_at(T_BOOLEAN, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07e187:   mov    %al,(%ecx,%ebx,1)
  0xee07e18a:   lock addl $0x0,-0x40(%esp)          ;; 2645:   __ membar(order_constraint);
  0xee07e190:   jmp    0xee07e19b                   ;; 3360:   __ jmp(Done);
  0xee07e195:   and    $0x1,%eax                    ;; 3361:   __ bind(notVolatile);
                                                    ;; 3386:     __ access_store_at(T_BOOLEAN, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07e198:   mov    %al,(%ecx,%ebx,1)
  0xee07e19b:   movzbl 0x3(%esi),%ebx               ;; 3365:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07e19f:   add    $0x3,%esi
  0xee07e1a2:   jmp    *-0x833caa0(,%ebx,4)
  0xee07e1a9:   nop
  0xee07e1aa:   nop
  0xee07e1ab:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_cputfield  214 fast_cputfield  [0xee07e1c0, 0xee07e208]  72 bytes

--------------------------------------------------------------------------------
  0xee07e1c0:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee07e1c1:   movzwl 0x1(%esi),%ebx               ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3328:   __ get_cache_and_index_at_bcp(rcx, rbx, 1);
  0xee07e1c5:   mov    -0x18(%ebp),%ecx
  0xee07e1c8:   shl    $0x2,%ebx
  0xee07e1cb:   mov    0x28(%ecx,%ebx,4),%edx       ;; 3331:   __ movl(rdx, Address(rcx, rbx, Address::times_ptr,
  0xee07e1cf:   mov    0x24(%ecx,%ebx,4),%ebx       ;; 3336:   __ movptr(rbx, Address(rcx, rbx, Address::times_ptr,
  0xee07e1d3:   shr    $0x15,%edx                   ;; 3344:   __ shrl(rdx, ConstantPoolCacheEntry::is_volatile_shift);
  0xee07e1d6:   and    $0x1,%edx                    ;; 3345:   __ andl(rdx, 0x1);
  0xee07e1d9:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07e1da:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07e1dc:   test   %edx,%edx                    ;; 2795:   __ verify_oop(r);
                                                    ;; 3354:   __ testl(rdx, rdx);
  0xee07e1de:   je     0xee07e1f3                   ;; 3355:   __ jcc(Assembler::zero, notVolatile);
  0xee07e1e4:   mov    %ax,(%ecx,%ebx,1)            ;; 3395:     __ access_store_at(T_CHAR, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07e1e8:   lock addl $0x0,-0x40(%esp)          ;; 2645:   __ membar(order_constraint);
  0xee07e1ee:   jmp    0xee07e1f7                   ;; 3360:   __ jmp(Done);
  0xee07e1f3:   mov    %ax,(%ecx,%ebx,1)            ;; 3361:   __ bind(notVolatile);
                                                    ;; 3395:     __ access_store_at(T_CHAR, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07e1f7:   movzbl 0x3(%esi),%ebx               ;; 3365:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07e1fb:   add    $0x3,%esi
  0xee07e1fe:   jmp    *-0x833caa0(,%ebx,4)
  0xee07e205:   nop
  0xee07e206:   nop
  0xee07e207:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_dputfield  215 fast_dputfield  [0xee07e220, 0xee07e270]  80 bytes

--------------------------------------------------------------------------------
  0xee07e220:   vmovsd (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
  0xee07e225:   add    $0x8,%esp
  0xee07e228:   movzwl 0x1(%esi),%ebx               ;;  352:     case dtos: vep = __ pc(); __ pop(dtos); dep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3328:   __ get_cache_and_index_at_bcp(rcx, rbx, 1);
  0xee07e22c:   mov    -0x18(%ebp),%ecx
  0xee07e22f:   shl    $0x2,%ebx
  0xee07e232:   mov    0x28(%ecx,%ebx,4),%edx       ;; 3331:   __ movl(rdx, Address(rcx, rbx, Address::times_ptr,
  0xee07e236:   mov    0x24(%ecx,%ebx,4),%ebx       ;; 3336:   __ movptr(rbx, Address(rcx, rbx, Address::times_ptr,
  0xee07e23a:   shr    $0x15,%edx                   ;; 3344:   __ shrl(rdx, ConstantPoolCacheEntry::is_volatile_shift);
  0xee07e23d:   and    $0x1,%edx                    ;; 3345:   __ andl(rdx, 0x1);
  0xee07e240:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07e241:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07e243:   test   %edx,%edx                    ;; 2795:   __ verify_oop(r);
                                                    ;; 3354:   __ testl(rdx, rdx);
  0xee07e245:   je     0xee07e25b                   ;; 3355:   __ jcc(Assembler::zero, notVolatile);
  0xee07e24b:   vmovsd %xmm0,(%ecx,%ebx,1)          ;; 3401:     __ access_store_at(T_DOUBLE, IN_HEAP, field, noreg /* dtos*/, noreg, noreg, noreg);
  0xee07e250:   lock addl $0x0,-0x40(%esp)          ;; 2645:   __ membar(order_constraint);
  0xee07e256:   jmp    0xee07e260                   ;; 3360:   __ jmp(Done);
  0xee07e25b:   vmovsd %xmm0,(%ecx,%ebx,1)          ;; 3361:   __ bind(notVolatile);
                                                    ;; 3401:     __ access_store_at(T_DOUBLE, IN_HEAP, field, noreg /* dtos*/, noreg, noreg, noreg);
  0xee07e260:   movzbl 0x3(%esi),%ebx               ;; 3365:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07e264:   add    $0x3,%esi
  0xee07e267:   jmp    *-0x833caa0(,%ebx,4)
  0xee07e26e:   nop
  0xee07e26f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_fputfield  216 fast_fputfield  [0xee07e2a0, 0xee07e2f0]  80 bytes

--------------------------------------------------------------------------------
  0xee07e2a0:   vmovss (%esp),%xmm0                 ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
  0xee07e2a5:   add    $0x4,%esp
  0xee07e2a8:   movzwl 0x1(%esi),%ebx               ;;  351:     case ftos: vep = __ pc(); __ pop(ftos); fep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3328:   __ get_cache_and_index_at_bcp(rcx, rbx, 1);
  0xee07e2ac:   mov    -0x18(%ebp),%ecx
  0xee07e2af:   shl    $0x2,%ebx
  0xee07e2b2:   mov    0x28(%ecx,%ebx,4),%edx       ;; 3331:   __ movl(rdx, Address(rcx, rbx, Address::times_ptr,
  0xee07e2b6:   mov    0x24(%ecx,%ebx,4),%ebx       ;; 3336:   __ movptr(rbx, Address(rcx, rbx, Address::times_ptr,
  0xee07e2ba:   shr    $0x15,%edx                   ;; 3344:   __ shrl(rdx, ConstantPoolCacheEntry::is_volatile_shift);
  0xee07e2bd:   and    $0x1,%edx                    ;; 3345:   __ andl(rdx, 0x1);
  0xee07e2c0:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07e2c1:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07e2c3:   test   %edx,%edx                    ;; 2795:   __ verify_oop(r);
                                                    ;; 3354:   __ testl(rdx, rdx);
  0xee07e2c5:   je     0xee07e2db                   ;; 3355:   __ jcc(Assembler::zero, notVolatile);
  0xee07e2cb:   vmovss %xmm0,(%ecx,%ebx,1)          ;; 3398:     __ access_store_at(T_FLOAT, IN_HEAP, field, noreg /* ftos*/, noreg, noreg, noreg);
  0xee07e2d0:   lock addl $0x0,-0x40(%esp)          ;; 2645:   __ membar(order_constraint);
  0xee07e2d6:   jmp    0xee07e2e0                   ;; 3360:   __ jmp(Done);
  0xee07e2db:   vmovss %xmm0,(%ecx,%ebx,1)          ;; 3361:   __ bind(notVolatile);
                                                    ;; 3398:     __ access_store_at(T_FLOAT, IN_HEAP, field, noreg /* ftos*/, noreg, noreg, noreg);
  0xee07e2e0:   movzbl 0x3(%esi),%ebx               ;; 3365:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07e2e4:   add    $0x3,%esi
  0xee07e2e7:   jmp    *-0x833caa0(,%ebx,4)
  0xee07e2ee:   nop
  0xee07e2ef:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_iputfield  217 fast_iputfield  [0xee07e320, 0xee07e364]  68 bytes

--------------------------------------------------------------------------------
  0xee07e320:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee07e321:   movzwl 0x1(%esi),%ebx               ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3328:   __ get_cache_and_index_at_bcp(rcx, rbx, 1);
  0xee07e325:   mov    -0x18(%ebp),%ecx
  0xee07e328:   shl    $0x2,%ebx
  0xee07e32b:   mov    0x28(%ecx,%ebx,4),%edx       ;; 3331:   __ movl(rdx, Address(rcx, rbx, Address::times_ptr,
  0xee07e32f:   mov    0x24(%ecx,%ebx,4),%ebx       ;; 3336:   __ movptr(rbx, Address(rcx, rbx, Address::times_ptr,
  0xee07e333:   shr    $0x15,%edx                   ;; 3344:   __ shrl(rdx, ConstantPoolCacheEntry::is_volatile_shift);
  0xee07e336:   and    $0x1,%edx                    ;; 3345:   __ andl(rdx, 0x1);
  0xee07e339:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07e33a:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07e33c:   test   %edx,%edx                    ;; 2795:   __ verify_oop(r);
                                                    ;; 3354:   __ testl(rdx, rdx);
  0xee07e33e:   je     0xee07e352                   ;; 3355:   __ jcc(Assembler::zero, notVolatile);
  0xee07e344:   mov    %eax,(%ecx,%ebx,1)           ;; 3383:     __ access_store_at(T_INT, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07e347:   lock addl $0x0,-0x40(%esp)          ;; 2645:   __ membar(order_constraint);
  0xee07e34d:   jmp    0xee07e355                   ;; 3360:   __ jmp(Done);
  0xee07e352:   mov    %eax,(%ecx,%ebx,1)           ;; 3361:   __ bind(notVolatile);
                                                    ;; 3383:     __ access_store_at(T_INT, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07e355:   movzbl 0x3(%esi),%ebx               ;; 3365:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07e359:   add    $0x3,%esi
  0xee07e35c:   jmp    *-0x833caa0(,%ebx,4)
  0xee07e363:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_lputfield  218 fast_lputfield  [0xee07e380, 0xee07e3e0]  96 bytes

--------------------------------------------------------------------------------
  0xee07e380:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
  0xee07e381:   pop    %edx
  0xee07e382:   movzwl 0x1(%esi),%ebx               ;;  350:     case ltos: vep = __ pc(); __ pop(ltos); lep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3328:   __ get_cache_and_index_at_bcp(rcx, rbx, 1);
  0xee07e386:   mov    -0x18(%ebp),%ecx
  0xee07e389:   shl    $0x2,%ebx
  0xee07e38c:   mov    0x28(%ecx,%ebx,4),%edx       ;; 3331:   __ movl(rdx, Address(rcx, rbx, Address::times_ptr,
  0xee07e390:   mov    0x24(%ecx,%ebx,4),%ebx       ;; 3336:   __ movptr(rbx, Address(rcx, rbx, Address::times_ptr,
  0xee07e394:   shr    $0x15,%edx                   ;; 3344:   __ shrl(rdx, ConstantPoolCacheEntry::is_volatile_shift);
  0xee07e397:   and    $0x1,%edx                    ;; 3345:   __ andl(rdx, 0x1);
  0xee07e39a:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07e39b:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07e39d:   test   %edx,%edx                    ;; 2795:   __ verify_oop(r);
                                                    ;; 3354:   __ testl(rdx, rdx);
  0xee07e39f:   je     0xee07e3c1                   ;; 3355:   __ jcc(Assembler::zero, notVolatile);
  0xee07e3a5:   push   $0xf7925013                  ;; 3379:   __ stop("should not be rewritten");
  0xee07e3aa:   call   0xee07e3af
  0xee07e3af:   pusha  
  0xee07e3b0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07e3b5:   hlt    
  0xee07e3b6:   lock addl $0x0,-0x40(%esp)          ;; 2645:   __ membar(order_constraint);
  0xee07e3bc:   jmp    0xee07e3d2                   ;; 3360:   __ jmp(Done);
  0xee07e3c1:   push   $0xf7925013                  ;; 3361:   __ bind(notVolatile);
                                                    ;; 3379:   __ stop("should not be rewritten");
  0xee07e3c6:   call   0xee07e3cb
  0xee07e3cb:   pusha  
  0xee07e3cc:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07e3d1:   hlt    
  0xee07e3d2:   movzbl 0x3(%esi),%ebx               ;; 3365:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07e3d6:   add    $0x3,%esi
  0xee07e3d9:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_sputfield  219 fast_sputfield  [0xee07e400, 0xee07e448]  72 bytes

--------------------------------------------------------------------------------
  0xee07e400:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee07e401:   movzwl 0x1(%esi),%ebx               ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3328:   __ get_cache_and_index_at_bcp(rcx, rbx, 1);
  0xee07e405:   mov    -0x18(%ebp),%ecx
  0xee07e408:   shl    $0x2,%ebx
  0xee07e40b:   mov    0x28(%ecx,%ebx,4),%edx       ;; 3331:   __ movl(rdx, Address(rcx, rbx, Address::times_ptr,
  0xee07e40f:   mov    0x24(%ecx,%ebx,4),%ebx       ;; 3336:   __ movptr(rbx, Address(rcx, rbx, Address::times_ptr,
  0xee07e413:   shr    $0x15,%edx                   ;; 3344:   __ shrl(rdx, ConstantPoolCacheEntry::is_volatile_shift);
  0xee07e416:   and    $0x1,%edx                    ;; 3345:   __ andl(rdx, 0x1);
  0xee07e419:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07e41a:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07e41c:   test   %edx,%edx                    ;; 2795:   __ verify_oop(r);
                                                    ;; 3354:   __ testl(rdx, rdx);
  0xee07e41e:   je     0xee07e433                   ;; 3355:   __ jcc(Assembler::zero, notVolatile);
  0xee07e424:   mov    %ax,(%ecx,%ebx,1)            ;; 3392:     __ access_store_at(T_SHORT, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07e428:   lock addl $0x0,-0x40(%esp)          ;; 2645:   __ membar(order_constraint);
  0xee07e42e:   jmp    0xee07e437                   ;; 3360:   __ jmp(Done);
  0xee07e433:   mov    %ax,(%ecx,%ebx,1)            ;; 3361:   __ bind(notVolatile);
                                                    ;; 3392:     __ access_store_at(T_SHORT, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07e437:   movzbl 0x3(%esi),%ebx               ;; 3365:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07e43b:   add    $0x3,%esi
  0xee07e43e:   jmp    *-0x833caa0(,%ebx,4)
  0xee07e445:   nop
  0xee07e446:   nop
  0xee07e447:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_aload_0  220 fast_aload_0  [0xee07e460, 0xee07e488]  40 bytes

--------------------------------------------------------------------------------
  0xee07e460:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07e463:   vmovss %xmm0,(%esp)
  0xee07e468:   jmp    0xee07e479                   ;; 1751:       __ jmpb(L);
  0xee07e46a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07e46d:   vmovsd %xmm0,(%esp)
  0xee07e472:   jmp    0xee07e479                   ;; 1754:       __ jmpb(L);
  0xee07e474:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07e475:   push   %eax
  0xee07e476:   jmp    0xee07e479                   ;; 1765:       __ jmpb(L);
  0xee07e478:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07e479:   mov    (%edi),%eax                  ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  904:   __ movptr(rax, aaddress(n));
  0xee07e47b:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07e47f:   inc    %esi
  0xee07e480:   jmp    *-0x833cea0(,%ebx,4)
  0xee07e487:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_iaccess_0  221 fast_iaccess_0  [0xee07e4a0, 0xee07e4e0]  64 bytes

--------------------------------------------------------------------------------
  0xee07e4a0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07e4a3:   vmovss %xmm0,(%esp)
  0xee07e4a8:   jmp    0xee07e4b9                   ;; 1751:       __ jmpb(L);
  0xee07e4aa:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07e4ad:   vmovsd %xmm0,(%esp)
  0xee07e4b2:   jmp    0xee07e4b9                   ;; 1754:       __ jmpb(L);
  0xee07e4b4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07e4b5:   push   %eax
  0xee07e4b6:   jmp    0xee07e4b9                   ;; 1765:       __ jmpb(L);
  0xee07e4b8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07e4b9:   mov    (%edi),%eax                  ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3498:   __ movptr(rax, aaddress(0));
  0xee07e4bb:   movzwl 0x2(%esi),%edx               ;; 3500:   __ get_cache_and_index_at_bcp(rcx, rdx, 2);
  0xee07e4bf:   mov    -0x18(%ebp),%ecx
  0xee07e4c2:   shl    $0x2,%edx
  0xee07e4c5:   mov    0x24(%ecx,%edx,4),%ebx       ;; 3501:   __ movptr(rbx,
  0xee07e4c9:   inc    %esi                         ;; 3507:   __ increment(rbcp);
  0xee07e4ca:   cmp    (%eax),%eax                  ;; 3508:   __ null_check(rax);
  0xee07e4cc:   mov    (%eax,%ebx,1),%eax           ;; 3512:     __ access_load_at(T_INT, IN_HEAP, rax, field, noreg, noreg);
  0xee07e4cf:   dec    %esi                         ;; 3536:   __ decrement(rbcp);
  0xee07e4d0:   movzbl 0x4(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07e4d4:   add    $0x4,%esi
  0xee07e4d7:   jmp    *-0x833dea0(,%ebx,4)
  0xee07e4de:   nop
  0xee07e4df:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_aaccess_0  222 fast_aaccess_0  [0xee07e500, 0xee07e540]  64 bytes

--------------------------------------------------------------------------------
  0xee07e500:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07e503:   vmovss %xmm0,(%esp)
  0xee07e508:   jmp    0xee07e519                   ;; 1751:       __ jmpb(L);
  0xee07e50a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07e50d:   vmovsd %xmm0,(%esp)
  0xee07e512:   jmp    0xee07e519                   ;; 1754:       __ jmpb(L);
  0xee07e514:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07e515:   push   %eax
  0xee07e516:   jmp    0xee07e519                   ;; 1765:       __ jmpb(L);
  0xee07e518:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07e519:   mov    (%edi),%eax                  ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3498:   __ movptr(rax, aaddress(0));
  0xee07e51b:   movzwl 0x2(%esi),%edx               ;; 3500:   __ get_cache_and_index_at_bcp(rcx, rdx, 2);
  0xee07e51f:   mov    -0x18(%ebp),%ecx
  0xee07e522:   shl    $0x2,%edx
  0xee07e525:   mov    0x24(%ecx,%edx,4),%ebx       ;; 3501:   __ movptr(rbx,
  0xee07e529:   inc    %esi                         ;; 3507:   __ increment(rbcp);
  0xee07e52a:   cmp    (%eax),%eax                  ;; 3508:   __ null_check(rax);
  0xee07e52c:   mov    (%eax,%ebx,1),%eax           ;;  165:   __ load_heap_oop(dst, src, rdx, rbx, decorators);
  0xee07e52f:   dec    %esi                         ;; 3516:     __ verify_oop(rax);
                                                    ;; 3536:   __ decrement(rbcp);
  0xee07e530:   movzbl 0x4(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07e534:   add    $0x4,%esi
  0xee07e537:   jmp    *-0x833cea0(,%ebx,4)
  0xee07e53e:   nop
  0xee07e53f:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_faccess_0  223 fast_faccess_0  [0xee07e560, 0xee07e5a0]  64 bytes

--------------------------------------------------------------------------------
  0xee07e560:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07e563:   vmovss %xmm0,(%esp)
  0xee07e568:   jmp    0xee07e579                   ;; 1751:       __ jmpb(L);
  0xee07e56a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07e56d:   vmovsd %xmm0,(%esp)
  0xee07e572:   jmp    0xee07e579                   ;; 1754:       __ jmpb(L);
  0xee07e574:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07e575:   push   %eax
  0xee07e576:   jmp    0xee07e579                   ;; 1765:       __ jmpb(L);
  0xee07e578:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07e579:   mov    (%edi),%eax                  ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3498:   __ movptr(rax, aaddress(0));
  0xee07e57b:   movzwl 0x2(%esi),%edx               ;; 3500:   __ get_cache_and_index_at_bcp(rcx, rdx, 2);
  0xee07e57f:   mov    -0x18(%ebp),%ecx
  0xee07e582:   shl    $0x2,%edx
  0xee07e585:   mov    0x24(%ecx,%edx,4),%ebx       ;; 3501:   __ movptr(rbx,
  0xee07e589:   inc    %esi                         ;; 3507:   __ increment(rbcp);
  0xee07e58a:   cmp    (%eax),%eax                  ;; 3508:   __ null_check(rax);
  0xee07e58c:   vmovss (%eax,%ebx,1),%xmm0          ;; 3519:     __ access_load_at(T_FLOAT, IN_HEAP, noreg /* ftos */, field, noreg, noreg);
  0xee07e591:   dec    %esi                         ;; 3536:   __ decrement(rbcp);
  0xee07e592:   movzbl 0x4(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07e596:   add    $0x4,%esi
  0xee07e599:   jmp    *-0x833d6a0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_iload  224 fast_iload  [0xee07e5c0, 0xee07e5f0]  48 bytes

--------------------------------------------------------------------------------
  0xee07e5c0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07e5c3:   vmovss %xmm0,(%esp)
  0xee07e5c8:   jmp    0xee07e5d9                   ;; 1751:       __ jmpb(L);
  0xee07e5ca:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07e5cd:   vmovsd %xmm0,(%esp)
  0xee07e5d2:   jmp    0xee07e5d9                   ;; 1754:       __ jmpb(L);
  0xee07e5d4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07e5d5:   push   %eax
  0xee07e5d6:   jmp    0xee07e5d9                   ;; 1765:       __ jmpb(L);
  0xee07e5d8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07e5d9:   movzbl 0x1(%esi),%ebx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  613:   __ load_unsigned_byte(reg, at_bcp(offset));
  0xee07e5dd:   neg    %ebx                         ;;  614:   __ negptr(reg);
  0xee07e5df:   mov    (%edi,%ebx,4),%eax           ;;  679:   __ movl(rax, iaddress(rbx));
  0xee07e5e2:   movzbl 0x2(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07e5e6:   add    $0x2,%esi
  0xee07e5e9:   jmp    *-0x833dea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_iload2  225 fast_iload2  [0xee07e620, 0xee07e65c]  60 bytes

--------------------------------------------------------------------------------
  0xee07e620:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07e623:   vmovss %xmm0,(%esp)
  0xee07e628:   jmp    0xee07e639                   ;; 1751:       __ jmpb(L);
  0xee07e62a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07e62d:   vmovsd %xmm0,(%esp)
  0xee07e632:   jmp    0xee07e639                   ;; 1754:       __ jmpb(L);
  0xee07e634:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07e635:   push   %eax
  0xee07e636:   jmp    0xee07e639                   ;; 1765:       __ jmpb(L);
  0xee07e638:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07e639:   movzbl 0x1(%esi),%ebx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  613:   __ load_unsigned_byte(reg, at_bcp(offset));
  0xee07e63d:   neg    %ebx                         ;;  614:   __ negptr(reg);
  0xee07e63f:   mov    (%edi,%ebx,4),%eax           ;;  670:   __ movl(rax, iaddress(rbx));
  0xee07e642:   push   %eax                         ;;  671:   __ push(itos);
  0xee07e643:   movzbl 0x3(%esi),%ebx               ;;  613:   __ load_unsigned_byte(reg, at_bcp(offset));
  0xee07e647:   neg    %ebx                         ;;  614:   __ negptr(reg);
  0xee07e649:   mov    (%edi,%ebx,4),%eax           ;;  673:   __ movl(rax, iaddress(rbx));
  0xee07e64c:   movzbl 0x4(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07e650:   add    $0x4,%esi
  0xee07e653:   jmp    *-0x833dea0(,%ebx,4)
  0xee07e65a:   nop
  0xee07e65b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_icaload  226 fast_icaload  [0xee07e680, 0xee07e6c4]  68 bytes

--------------------------------------------------------------------------------
  0xee07e680:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07e683:   vmovss %xmm0,(%esp)
  0xee07e688:   jmp    0xee07e699                   ;; 1751:       __ jmpb(L);
  0xee07e68a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07e68d:   vmovsd %xmm0,(%esp)
  0xee07e692:   jmp    0xee07e699                   ;; 1754:       __ jmpb(L);
  0xee07e694:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07e695:   push   %eax
  0xee07e696:   jmp    0xee07e699                   ;; 1765:       __ jmpb(L);
  0xee07e698:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07e699:   movzbl 0x1(%esi),%ebx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  613:   __ load_unsigned_byte(reg, at_bcp(offset));
  0xee07e69d:   neg    %ebx                         ;;  614:   __ negptr(reg);
  0xee07e69f:   mov    (%edi,%ebx,4),%eax           ;;  860:   __ movl(rax, iaddress(rbx));
  0xee07e6a2:   pop    %edx                         ;;  747:   __ pop_ptr(array);
  0xee07e6a3:   cmp    0x8(%edx),%eax               ;;  754:   __ null_check(array, arrayOopDesc::length_offset_in_bytes());
                                                    ;;  756:   __ movl2ptr(index, index);
                                                    ;;  758:   __ cmpl(index, Address(array, arrayOopDesc::length_offset_in_bytes()));
  0xee07e6a6:   mov    %eax,%ebx                    ;;  762:     __ movl(rbx, index);
  0xee07e6a8:   jb     0xee07e6b1                   ;;  765:   __ jccb(Assembler::below, skip);
  0xee07e6aa:   mov    %edx,%eax                    ;;  767:   __ mov(NOT_LP64(rax) LP64_ONLY(c_rarg1), array);
  0xee07e6ac:   jmp    0xee06d9c0                   ;;  768:   __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));
  0xee07e6b1:   movzwl 0xc(%edx,%eax,2),%eax        ;;  769:   __ bind(skip);
                                                    ;;  865:   __ access_load_at(T_CHAR, IN_HEAP | IS_ARRAY, rax,
  0xee07e6b6:   movzbl 0x3(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07e6ba:   add    $0x3,%esi
  0xee07e6bd:   jmp    *-0x833dea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_invokevfinal  227 fast_invokevfinal  [0xee07e6e0, 0xee07e71c]  60 bytes

--------------------------------------------------------------------------------
  0xee07e6e0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07e6e3:   vmovss %xmm0,(%esp)
  0xee07e6e8:   jmp    0xee07e6f9                   ;; 1751:       __ jmpb(L);
  0xee07e6ea:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07e6ed:   vmovsd %xmm0,(%esp)
  0xee07e6f2:   jmp    0xee07e6f9                   ;; 1754:       __ jmpb(L);
  0xee07e6f4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07e6f5:   push   %eax
  0xee07e6f6:   jmp    0xee07e6f9                   ;; 1765:       __ jmpb(L);
  0xee07e6f8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07e6f9:   push   $0xf7924e70                  ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3717:   __ stop("fast_invokevfinal not used on x86");
  0xee07e6fe:   call   0xee07e703
  0xee07e703:   pusha  
  0xee07e704:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07e709:   hlt    
  0xee07e70a:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee07e70f:   call   0xee07e714
  0xee07e714:   pusha  
  0xee07e715:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07e71a:   hlt    
  0xee07e71b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_linearswitch  228 fast_linearswitch  [0xee07e740, 0xee07e7e4]  164 bytes

--------------------------------------------------------------------------------
  0xee07e740:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee07e741:   bswap  %eax                         ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2410:   __ bswapl(rax);
  0xee07e743:   lea    0x4(%esi),%ebx               ;; 2412:   __ lea(rbx, at_bcp(BytesPerInt)); // btw: should be able to get rid of
  0xee07e746:   and    $0xfffffffc,%ebx             ;; 2415:   __ andptr(rbx, -BytesPerInt);
  0xee07e749:   mov    0x4(%ebx),%ecx               ;; 2417:   __ movl(rcx, Address(rbx, BytesPerInt));
  0xee07e74c:   bswap  %ecx                         ;; 2418:   __ bswapl(rcx);
  0xee07e74e:   jmp    0xee07e75a                   ;; 2419:   __ jmpb(loop_entry);
  0xee07e750:   cmp    0x8(%ebx,%ecx,8),%eax        ;; 2421:   __ bind(loop);
                                                    ;; 2422:   __ cmpl(rax, Address(rbx, rcx, Address::times_8, 2 * BytesPerInt));
  0xee07e754:   je     0xee07e77d                   ;; 2423:   __ jcc(Assembler::equal, found);
  0xee07e75a:   dec    %ecx                         ;; 2424:   __ bind(loop_entry);
                                                    ;; 2425:   __ decrementl(rcx);
  0xee07e75b:   jge    0xee07e750                   ;; 2426:   __ jcc(Assembler::greaterEqual, loop);
  0xee07e75d:   mov    -0x14(%ebp),%eax             ;; 2428:   __ profile_switch_default(rax);
  0xee07e760:   test   %eax,%eax
  0xee07e762:   je     0xee07e776
  0xee07e768:   addl   $0x1,0xc(%eax)
  0xee07e76c:   sbbl   $0x0,0xc(%eax)
  0xee07e770:   add    0x10(%eax),%eax
  0xee07e773:   mov    %eax,-0x14(%ebp)
  0xee07e776:   mov    (%ebx),%edx                  ;; 2429:   __ movl(rdx, Address(rbx, 0));
  0xee07e778:   jmp    0xee07e7a6                   ;; 2430:   __ jmp(continue_execution);
  0xee07e77d:   mov    0xc(%ebx,%ecx,8),%edx        ;; 2432:   __ bind(found);
                                                    ;; 2433:   __ movl(rdx, Address(rbx, rcx, Address::times_8, 3 * BytesPerInt));
  0xee07e781:   mov    -0x14(%ebp),%eax             ;; 2434:   __ profile_switch_case(rcx, rax, rbx);
  0xee07e784:   test   %eax,%eax
  0xee07e786:   je     0xee07e7a6
  0xee07e78c:   mov    $0x8,%ebx
  0xee07e791:   imul   %ebx,%ecx
  0xee07e794:   add    $0x14,%ecx
  0xee07e797:   addl   $0x1,(%eax,%ecx,1)
  0xee07e79b:   sbbl   $0x0,(%eax,%ecx,1)
  0xee07e79f:   add    0x4(%eax,%ecx,1),%eax
  0xee07e7a3:   mov    %eax,-0x14(%ebp)
  0xee07e7a6:   bswap  %edx                         ;; 2436:   __ bind(continue_execution);
                                                    ;; 2437:   __ bswapl(rdx);
  0xee07e7a8:   movzbl (%esi,%edx,1),%ebx           ;; 2438:   __ movl2ptr(rdx, rdx);
                                                    ;; 2439:   __ load_unsigned_byte(rbx, Address(rbcp, rdx, Address::times_1));
  0xee07e7ac:   add    %edx,%esi                    ;; 2440:   __ addptr(rbcp, rdx);
 ;; Thread-local Safepoint poll
  0xee07e7ae:   push   %eax                         ;; 2441:   __ dispatch_only(vtos, true);
  0xee07e7af:   push   %edx
  0xee07e7b0:   push   %ecx
  0xee07e7b1:   call   0xf704a910 = Thread::current()
  0xee07e7b6:   pop    %ecx
  0xee07e7b7:   pop    %edx
  0xee07e7b8:   mov    %eax,%ecx
  0xee07e7ba:   pop    %eax
  0xee07e7bb:   testb  $0x1,0x288(%ecx)
  0xee07e7c2:   je     0xee07e7cb
  0xee07e7c4:   jmp    *-0x8341aa0(,%ebx,4)
  0xee07e7cb:   jmp    *-0x833caa0(,%ebx,4)
  0xee07e7d2:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee07e7d7:   call   0xee07e7dc
  0xee07e7dc:   pusha  
  0xee07e7dd:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07e7e2:   hlt    
  0xee07e7e3:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_binaryswitch  229 fast_binaryswitch  [0xee07e800, 0xee07e900]  256 bytes

--------------------------------------------------------------------------------
  0xee07e800:   pop    %eax                         ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
  0xee07e801:   mov    %esi,-0x20(%ebp)             ;;  349:     case itos: vep = __ pc(); __ pop(itos); iep = __ pc(); generate_and_dispatch(t); break;
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2480:   NOT_LP64(__ save_bcp());
  0xee07e804:   lea    0xc(%esi),%ebx               ;; 2482:   __ lea(array, at_bcp(3 * BytesPerInt)); // btw: should be able to
  0xee07e807:   and    $0xfffffffc,%ebx             ;; 2486:   __ andptr(array, -BytesPerInt);
  0xee07e80a:   xor    %ecx,%ecx                    ;; 2489:   __ xorl(i, i);                            // i = 0;
  0xee07e80c:   mov    -0x4(%ebx),%edx              ;; 2490:   __ movl(j, Address(array, -BytesPerInt)); // j = length(array);
  0xee07e80f:   bswap  %edx                         ;; 2493:   __ bswapl(j);
  0xee07e811:   jmp    0xee07e828                   ;; 2497:   __ jmp(entry);
  0xee07e816:   lea    (%ecx,%edx,1),%edi           ;; 2502:     __ bind(loop);
                                                    ;; 2504:     __ leal(h, Address(i, j, Address::times_1)); // h = i + j;
  0xee07e819:   sar    %edi                         ;; 2505:     __ sarl(h, 1);                               // h = (i + j) >> 1;
  0xee07e81b:   mov    (%ebx,%edi,8),%esi           ;; 2512:     __ movl(temp, Address(array, h, Address::times_8));
  0xee07e81e:   bswap  %esi                         ;; 2513:     __ bswapl(temp);
  0xee07e820:   cmp    %esi,%eax                    ;; 2514:     __ cmpl(key, temp);
  0xee07e822:   cmovl  %edi,%edx                    ;; 2516:     __ cmov32(Assembler::less, j, h);
  0xee07e825:   cmovge %edi,%ecx                    ;; 2518:     __ cmov32(Assembler::greaterEqual, i, h);
  0xee07e828:   lea    0x1(%ecx),%edi               ;; 2520:     __ bind(entry);
                                                    ;; 2521:     __ leal(h, Address(i, 1)); // i+1
  0xee07e82b:   cmp    %edx,%edi                    ;; 2522:     __ cmpl(h, j);             // i+1 < j
  0xee07e82d:   jl     0xee07e816                   ;; 2523:     __ jcc(Assembler::less, loop);
  0xee07e82f:   mov    (%ebx,%ecx,8),%esi           ;; 2529:   __ movl(temp, Address(array, i, Address::times_8));
  0xee07e832:   bswap  %esi                         ;; 2530:   __ bswapl(temp);
  0xee07e834:   cmp    %esi,%eax                    ;; 2531:   __ cmpl(key, temp);
  0xee07e836:   jne    0xee07e89b                   ;; 2532:   __ jcc(Assembler::notEqual, default_case);
  0xee07e83c:   mov    0x4(%ebx,%ecx,8),%edx        ;; 2535:   __ movl(j , Address(array, i, Address::times_8, BytesPerInt));
  0xee07e840:   mov    -0x14(%ebp),%eax             ;; 2536:   __ profile_switch_case(i, key, array);
  0xee07e843:   test   %eax,%eax
  0xee07e845:   je     0xee07e865
  0xee07e84b:   mov    $0x8,%ebx
  0xee07e850:   imul   %ebx,%ecx
  0xee07e853:   add    $0x14,%ecx
  0xee07e856:   addl   $0x1,(%eax,%ecx,1)
  0xee07e85a:   sbbl   $0x0,(%eax,%ecx,1)
  0xee07e85e:   add    0x4(%eax,%ecx,1),%eax
  0xee07e862:   mov    %eax,-0x14(%ebp)
  0xee07e865:   bswap  %edx                         ;; 2537:   __ bswapl(j);
  0xee07e867:   mov    -0x20(%ebp),%esi             ;; 2540:   NOT_LP64(__ restore_bcp());
  0xee07e86a:   mov    -0x1c(%ebp),%edi             ;; 2541:   NOT_LP64(__ restore_locals());                           // restore rdi
  0xee07e86d:   lea    0x0(%ebp,%edi,4),%edi
  0xee07e871:   movzbl (%esi,%edx,1),%ebx           ;; 2543:   __ load_unsigned_byte(rbx, Address(rbcp, j, Address::times_1));
  0xee07e875:   add    %edx,%esi                    ;; 2544:   __ addptr(rbcp, j);
 ;; Thread-local Safepoint poll
  0xee07e877:   push   %eax                         ;; 2545:   __ dispatch_only(vtos, true);
  0xee07e878:   push   %edx
  0xee07e879:   push   %ecx
  0xee07e87a:   call   0xf704a910 = Thread::current()
  0xee07e87f:   pop    %ecx
  0xee07e880:   pop    %edx
  0xee07e881:   mov    %eax,%ecx
  0xee07e883:   pop    %eax
  0xee07e884:   testb  $0x1,0x288(%ecx)
  0xee07e88b:   je     0xee07e894
  0xee07e88d:   jmp    *-0x8341aa0(,%ebx,4)
  0xee07e894:   jmp    *-0x833caa0(,%ebx,4)
  0xee07e89b:   mov    -0x14(%ebp),%ecx             ;; 2548:   __ bind(default_case);
                                                    ;; 2549:   __ profile_switch_default(i);
  0xee07e89e:   test   %ecx,%ecx
  0xee07e8a0:   je     0xee07e8b4
  0xee07e8a6:   addl   $0x1,0xc(%ecx)
  0xee07e8aa:   sbbl   $0x0,0xc(%ecx)
  0xee07e8ae:   add    0x10(%ecx),%ecx
  0xee07e8b1:   mov    %ecx,-0x14(%ebp)
  0xee07e8b4:   mov    -0x8(%ebx),%edx              ;; 2550:   __ movl(j, Address(array, -2 * BytesPerInt));
  0xee07e8b7:   bswap  %edx                         ;; 2551:   __ bswapl(j);
  0xee07e8b9:   mov    -0x20(%ebp),%esi             ;; 2554:   NOT_LP64(__ restore_bcp());
  0xee07e8bc:   mov    -0x1c(%ebp),%edi             ;; 2555:   NOT_LP64(__ restore_locals());
  0xee07e8bf:   lea    0x0(%ebp,%edi,4),%edi
  0xee07e8c3:   movzbl (%esi,%edx,1),%ebx           ;; 2557:   __ load_unsigned_byte(rbx, Address(rbcp, j, Address::times_1));
  0xee07e8c7:   add    %edx,%esi                    ;; 2558:   __ addptr(rbcp, j);
 ;; Thread-local Safepoint poll
  0xee07e8c9:   push   %eax                         ;; 2559:   __ dispatch_only(vtos, true);
  0xee07e8ca:   push   %edx
  0xee07e8cb:   push   %ecx
  0xee07e8cc:   call   0xf704a910 = Thread::current()
  0xee07e8d1:   pop    %ecx
  0xee07e8d2:   pop    %edx
  0xee07e8d3:   mov    %eax,%ecx
  0xee07e8d5:   pop    %eax
  0xee07e8d6:   testb  $0x1,0x288(%ecx)
  0xee07e8dd:   je     0xee07e8e6
  0xee07e8df:   jmp    *-0x8341aa0(,%ebx,4)
  0xee07e8e6:   jmp    *-0x833caa0(,%ebx,4)
  0xee07e8ed:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee07e8f2:   call   0xee07e8f7
  0xee07e8f7:   pusha  
  0xee07e8f8:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07e8fd:   hlt    
  0xee07e8fe:   nop
  0xee07e8ff:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_aldc  230 fast_aldc  [0xee07e920, 0xee07ea38]  280 bytes

--------------------------------------------------------------------------------
  0xee07e920:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07e923:   vmovss %xmm0,(%esp)
  0xee07e928:   jmp    0xee07e939                   ;; 1751:       __ jmpb(L);
  0xee07e92a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07e92d:   vmovsd %xmm0,(%esp)
  0xee07e932:   jmp    0xee07e939                   ;; 1754:       __ jmpb(L);
  0xee07e934:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07e935:   push   %eax
  0xee07e936:   jmp    0xee07e939                   ;; 1765:       __ jmpb(L);
  0xee07e938:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07e939:   movzbl 0x1(%esi),%edx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  434:   __ get_cache_index_at_bcp(tmp, 1, index_size);
  0xee07e93d:   mov    -0xc(%ebp),%eax              ;;  435:   __ load_resolved_reference_at_index(result, tmp);
  0xee07e940:   mov    0x8(%eax),%eax
  0xee07e943:   mov    0x8(%eax),%eax
  0xee07e946:   mov    0xc(%eax),%eax
  0xee07e949:   mov    0x8(%eax),%eax
  0xee07e94c:   mov    (%eax),%eax
  0xee07e94e:   mov    0xc(%eax,%edx,4),%eax
  0xee07e952:   test   %eax,%eax                    ;;  436:   __ testptr(result, result);
  0xee07e954:   jne    0xee07ea1b                   ;;  437:   __ jcc(Assembler::notZero, resolved);
  0xee07e95a:   mov    $0xe6,%ecx                   ;;  442:   __ movl(rarg, (int)bytecode());
  0xee07e95f:   call   0xee07e969                   ;;  443:   __ call_VM(result, entry, rarg);
  0xee07e964:   jmp    0xee07ea1b
  0xee07e969:   push   %ecx
  0xee07e96a:   lea    0x8(%esp),%eax
  0xee07e96e:   mov    %esi,-0x20(%ebp)
  0xee07e971:   cmpl   $0x0,-0x8(%ebp)
  0xee07e975:   je     0xee07e98c
  0xee07e97b:   push   $0xf78569d8
  0xee07e980:   call   0xee07e985
  0xee07e985:   pusha  
  0xee07e986:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07e98b:   hlt    
  0xee07e98c:   push   %eax
  0xee07e98d:   push   %edx
  0xee07e98e:   push   %ecx
  0xee07e98f:   call   0xf704a910 = Thread::current()
  0xee07e994:   pop    %ecx
  0xee07e995:   pop    %edx
  0xee07e996:   mov    %eax,%edi
  0xee07e998:   pop    %eax
  0xee07e999:   push   %edi
  0xee07e99a:   vzeroupper 
  0xee07e99d:   mov    %ebp,0x230(%edi)
  0xee07e9a3:   mov    %eax,0x228(%edi)
  0xee07e9a9:   call   0xf6c12d70 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0xee07e9ae:   add    $0x8,%esp
  0xee07e9b1:   push   %eax
  0xee07e9b2:   push   %edx
  0xee07e9b3:   push   %ecx
  0xee07e9b4:   call   0xf704a910 = Thread::current()
  0xee07e9b9:   pop    %ecx
  0xee07e9ba:   pop    %edx
  0xee07e9bb:   cmp    %eax,%edi
  0xee07e9bd:   je     0xee07e9d4
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07e9c3:   push   $0xf78b5a48
  0xee07e9c8:   call   0xee07e9cd
  0xee07e9cd:   pusha  
  0xee07e9ce:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07e9d3:   hlt    
  0xee07e9d4:   pop    %eax
  0xee07e9d5:   movl   $0x0,0x228(%edi)
  0xee07e9df:   movl   $0x0,0x230(%edi)
  0xee07e9e9:   movl   $0x0,0x22c(%edi)
  0xee07e9f3:   vzeroupper 
  0xee07e9f6:   cmpl   $0x0,0x4(%edi)
  0xee07e9fa:   jne    0xee05bbe0
  0xee07ea00:   mov    0x254(%edi),%eax
  0xee07ea06:   movl   $0x0,0x254(%edi)
  0xee07ea10:   mov    -0x20(%ebp),%esi
  0xee07ea13:   mov    -0x1c(%ebp),%edi
  0xee07ea16:   lea    0x0(%ebp,%edi,4),%edi
  0xee07ea1a:   ret    
  0xee07ea1b:   mov    0xf7cc69bc,%edx              ;;  444:   __ bind(resolved);
                                                    ;;  451:     __ movptr(tmp, null_sentinel);
  0xee07ea21:   mov    (%edx),%edx                  ;;  452:     __ resolve_oop_handle(tmp, rscratch2);
  0xee07ea23:   cmp    %eax,%edx                    ;;  453:     __ cmpoop(tmp, result);
  0xee07ea25:   jne    0xee07ea29                   ;;  454:     __ jccb(Assembler::notEqual, notNull);
  0xee07ea27:   xor    %eax,%eax                    ;;  455:     __ xorptr(result, result);  // NULL object reference
  0xee07ea29:   movzbl 0x2(%esi),%ebx               ;;  456:     __ bind(notNull);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07ea2d:   add    $0x2,%esi
  0xee07ea30:   jmp    *-0x833cea0(,%ebx,4)
  0xee07ea37:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
fast_aldc_w  231 fast_aldc_w  [0xee07ea60, 0xee07eb78]  280 bytes

--------------------------------------------------------------------------------
  0xee07ea60:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07ea63:   vmovss %xmm0,(%esp)
  0xee07ea68:   jmp    0xee07ea79                   ;; 1751:       __ jmpb(L);
  0xee07ea6a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07ea6d:   vmovsd %xmm0,(%esp)
  0xee07ea72:   jmp    0xee07ea79                   ;; 1754:       __ jmpb(L);
  0xee07ea74:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07ea75:   push   %eax
  0xee07ea76:   jmp    0xee07ea79                   ;; 1765:       __ jmpb(L);
  0xee07ea78:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07ea79:   movzwl 0x1(%esi),%edx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  434:   __ get_cache_index_at_bcp(tmp, 1, index_size);
  0xee07ea7d:   mov    -0xc(%ebp),%eax              ;;  435:   __ load_resolved_reference_at_index(result, tmp);
  0xee07ea80:   mov    0x8(%eax),%eax
  0xee07ea83:   mov    0x8(%eax),%eax
  0xee07ea86:   mov    0xc(%eax),%eax
  0xee07ea89:   mov    0x8(%eax),%eax
  0xee07ea8c:   mov    (%eax),%eax
  0xee07ea8e:   mov    0xc(%eax,%edx,4),%eax
  0xee07ea92:   test   %eax,%eax                    ;;  436:   __ testptr(result, result);
  0xee07ea94:   jne    0xee07eb5b                   ;;  437:   __ jcc(Assembler::notZero, resolved);
  0xee07ea9a:   mov    $0xe7,%ecx                   ;;  442:   __ movl(rarg, (int)bytecode());
  0xee07ea9f:   call   0xee07eaa9                   ;;  443:   __ call_VM(result, entry, rarg);
  0xee07eaa4:   jmp    0xee07eb5b
  0xee07eaa9:   push   %ecx
  0xee07eaaa:   lea    0x8(%esp),%eax
  0xee07eaae:   mov    %esi,-0x20(%ebp)
  0xee07eab1:   cmpl   $0x0,-0x8(%ebp)
  0xee07eab5:   je     0xee07eacc
  0xee07eabb:   push   $0xf78569d8
  0xee07eac0:   call   0xee07eac5
  0xee07eac5:   pusha  
  0xee07eac6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07eacb:   hlt    
  0xee07eacc:   push   %eax
  0xee07eacd:   push   %edx
  0xee07eace:   push   %ecx
  0xee07eacf:   call   0xf704a910 = Thread::current()
  0xee07ead4:   pop    %ecx
  0xee07ead5:   pop    %edx
  0xee07ead6:   mov    %eax,%edi
  0xee07ead8:   pop    %eax
  0xee07ead9:   push   %edi
  0xee07eada:   vzeroupper 
  0xee07eadd:   mov    %ebp,0x230(%edi)
  0xee07eae3:   mov    %eax,0x228(%edi)
  0xee07eae9:   call   0xf6c12d70 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0xee07eaee:   add    $0x8,%esp
  0xee07eaf1:   push   %eax
  0xee07eaf2:   push   %edx
  0xee07eaf3:   push   %ecx
  0xee07eaf4:   call   0xf704a910 = Thread::current()
  0xee07eaf9:   pop    %ecx
  0xee07eafa:   pop    %edx
  0xee07eafb:   cmp    %eax,%edi
  0xee07eafd:   je     0xee07eb14
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07eb03:   push   $0xf78b5a48
  0xee07eb08:   call   0xee07eb0d
  0xee07eb0d:   pusha  
  0xee07eb0e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07eb13:   hlt    
  0xee07eb14:   pop    %eax
  0xee07eb15:   movl   $0x0,0x228(%edi)
  0xee07eb1f:   movl   $0x0,0x230(%edi)
  0xee07eb29:   movl   $0x0,0x22c(%edi)
  0xee07eb33:   vzeroupper 
  0xee07eb36:   cmpl   $0x0,0x4(%edi)
  0xee07eb3a:   jne    0xee05bbe0
  0xee07eb40:   mov    0x254(%edi),%eax
  0xee07eb46:   movl   $0x0,0x254(%edi)
  0xee07eb50:   mov    -0x20(%ebp),%esi
  0xee07eb53:   mov    -0x1c(%ebp),%edi
  0xee07eb56:   lea    0x0(%ebp,%edi,4),%edi
  0xee07eb5a:   ret    
  0xee07eb5b:   mov    0xf7cc69bc,%edx              ;;  444:   __ bind(resolved);
                                                    ;;  451:     __ movptr(tmp, null_sentinel);
  0xee07eb61:   mov    (%edx),%edx                  ;;  452:     __ resolve_oop_handle(tmp, rscratch2);
  0xee07eb63:   cmp    %eax,%edx                    ;;  453:     __ cmpoop(tmp, result);
  0xee07eb65:   jne    0xee07eb69                   ;;  454:     __ jccb(Assembler::notEqual, notNull);
  0xee07eb67:   xor    %eax,%eax                    ;;  455:     __ xorptr(result, result);  // NULL object reference
  0xee07eb69:   movzbl 0x3(%esi),%ebx               ;;  456:     __ bind(notNull);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07eb6d:   add    $0x3,%esi
  0xee07eb70:   jmp    *-0x833cea0(,%ebx,4)
  0xee07eb77:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
return_register_finalizer  232 return_register_finalizer  [0xee07eba0, 0xee07f07c]  1244 bytes

--------------------------------------------------------------------------------
  0xee07eba0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07eba3:   vmovss %xmm0,(%esp)
  0xee07eba8:   jmp    0xee07ebb9                   ;; 1751:       __ jmpb(L);
  0xee07ebaa:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07ebad:   vmovsd %xmm0,(%esp)
  0xee07ebb2:   jmp    0xee07ebb9                   ;; 1754:       __ jmpb(L);
  0xee07ebb4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07ebb5:   push   %eax
  0xee07ebb6:   jmp    0xee07ebb9                   ;; 1765:       __ jmpb(L);
  0xee07ebb8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07ebb9:   mov    (%edi),%eax                  ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2571:     __ movptr(robj, aaddress(0));
  0xee07ebbb:   mov    0x4(%eax),%edi               ;; 2572:     __ load_klass(rdi, robj, rscratch1);
  0xee07ebbe:   mov    0x60(%edi),%edi              ;; 2573:     __ movl(rdi, Address(rdi, Klass::access_flags_offset()));
  0xee07ebc1:   test   $0x40000000,%edi             ;; 2574:     __ testl(rdi, JVM_ACC_HAS_FINALIZER);
  0xee07ebc7:   je     0xee07ec79                   ;; 2576:     __ jcc(Assembler::zero, skip_register_finalizer);
  0xee07ebcd:   call   0xee07ebd7                   ;; 2578:     __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::register_finalizer), robj);
  0xee07ebd2:   jmp    0xee07ec79
  0xee07ebd7:   push   %eax
  0xee07ebd8:   lea    0x8(%esp),%eax
  0xee07ebdc:   mov    %esi,-0x20(%ebp)
  0xee07ebdf:   cmpl   $0x0,-0x8(%ebp)
  0xee07ebe3:   je     0xee07ebfa
  0xee07ebe9:   push   $0xf78569d8
  0xee07ebee:   call   0xee07ebf3
  0xee07ebf3:   pusha  
  0xee07ebf4:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07ebf9:   hlt    
  0xee07ebfa:   push   %eax
  0xee07ebfb:   push   %edx
  0xee07ebfc:   push   %ecx
  0xee07ebfd:   call   0xf704a910 = Thread::current()
  0xee07ec02:   pop    %ecx
  0xee07ec03:   pop    %edx
  0xee07ec04:   mov    %eax,%edi
  0xee07ec06:   pop    %eax
  0xee07ec07:   push   %edi
  0xee07ec08:   vzeroupper 
  0xee07ec0b:   mov    %ebp,0x230(%edi)
  0xee07ec11:   mov    %eax,0x228(%edi)
  0xee07ec17:   call   0xf6c0ab50 = InterpreterRuntime::register_finalizer(JavaThread*, oopDesc*)
  0xee07ec1c:   add    $0x8,%esp
  0xee07ec1f:   push   %eax
  0xee07ec20:   push   %edx
  0xee07ec21:   push   %ecx
  0xee07ec22:   call   0xf704a910 = Thread::current()
  0xee07ec27:   pop    %ecx
  0xee07ec28:   pop    %edx
  0xee07ec29:   cmp    %eax,%edi
  0xee07ec2b:   je     0xee07ec42
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07ec31:   push   $0xf78b5a48
  0xee07ec36:   call   0xee07ec3b
  0xee07ec3b:   pusha  
  0xee07ec3c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07ec41:   hlt    
  0xee07ec42:   pop    %eax
  0xee07ec43:   movl   $0x0,0x228(%edi)
  0xee07ec4d:   movl   $0x0,0x230(%edi)
  0xee07ec57:   movl   $0x0,0x22c(%edi)
  0xee07ec61:   vzeroupper 
  0xee07ec64:   cmpl   $0x0,0x4(%edi)
  0xee07ec68:   jne    0xee05bbe0
  0xee07ec6e:   mov    -0x20(%ebp),%esi
  0xee07ec71:   mov    -0x1c(%ebp),%edi
  0xee07ec74:   lea    0x0(%ebp,%edi,4),%edi
  0xee07ec78:   ret    
  0xee07ec79:   push   %eax                         ;; 2580:     __ bind(skip_register_finalizer);
                                                    ;; 2609:   __ remove_activation(state, rbcp);
  0xee07ec7a:   push   %edx
  0xee07ec7b:   push   %ecx
  0xee07ec7c:   call   0xf704a910 = Thread::current()
  0xee07ec81:   pop    %ecx
  0xee07ec82:   pop    %edx
  0xee07ec83:   mov    %eax,%ecx
  0xee07ec85:   pop    %eax
  0xee07ec86:   cmp    0x288(%ecx),%ebp
  0xee07ec8c:   ja     0xee07ec97
  0xee07ec92:   jmp    0xee07ece7
  0xee07ec97:   vzeroupper 
  0xee07ec9a:   mov    %ebp,0x230(%ecx)
  0xee07eca0:   movl   $0xee07ec97,0x22c(%ecx)
  0xee07ecaa:   mov    %esp,0x228(%ecx)
  0xee07ecb0:   push   %ecx
  0xee07ecb1:   call   0xf6c0e120 = InterpreterRuntime::at_unwind(JavaThread*)
  0xee07ecb6:   add    $0x4,%esp
  0xee07ecb9:   push   %eax
  0xee07ecba:   push   %edx
  0xee07ecbb:   push   %ecx
  0xee07ecbc:   call   0xf704a910 = Thread::current()
  0xee07ecc1:   pop    %ecx
  0xee07ecc2:   pop    %edx
  0xee07ecc3:   mov    %eax,%ecx
  0xee07ecc5:   pop    %eax
  0xee07ecc6:   movl   $0x0,0x228(%ecx)
  0xee07ecd0:   movl   $0x0,0x230(%ecx)
  0xee07ecda:   movl   $0x0,0x22c(%ecx)
  0xee07ece4:   vzeroupper 
  0xee07ece7:   mov    0x2b1(%ecx),%bl
  0xee07eced:   movb   $0x0,0x2b1(%ecx)
  0xee07ecf4:   mov    -0xc(%ebp),%ecx
  0xee07ecf7:   mov    0x18(%ecx),%ecx
  0xee07ecfa:   test   $0x20,%cl
  0xee07ecfd:   je     0xee07ee3b
  0xee07ed03:   test   $0xff,%bl
  0xee07ed06:   jne    0xee07ef15
  0xee07ed0c:   lea    -0x2c(%ebp),%edx
  0xee07ed0f:   mov    0x4(%edx),%eax
  0xee07ed12:   test   %eax,%eax
  0xee07ed14:   jne    0xee07edd8
  0xee07ed1a:   emms   
  0xee07ed1c:   call   0xee07ed26
  0xee07ed21:   jmp    0xee07edc7
  0xee07ed26:   lea    0x4(%esp),%eax
  0xee07ed2a:   mov    %esi,-0x20(%ebp)
  0xee07ed2d:   cmpl   $0x0,-0x8(%ebp)
  0xee07ed31:   je     0xee07ed48
  0xee07ed37:   push   $0xf78569d8
  0xee07ed3c:   call   0xee07ed41
  0xee07ed41:   pusha  
  0xee07ed42:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07ed47:   hlt    
  0xee07ed48:   push   %eax
  0xee07ed49:   push   %edx
  0xee07ed4a:   push   %ecx
  0xee07ed4b:   call   0xf704a910 = Thread::current()
  0xee07ed50:   pop    %ecx
  0xee07ed51:   pop    %edx
  0xee07ed52:   mov    %eax,%edi
  0xee07ed54:   pop    %eax
  0xee07ed55:   push   %edi
  0xee07ed56:   vzeroupper 
  0xee07ed59:   mov    %ebp,0x230(%edi)
  0xee07ed5f:   mov    %eax,0x228(%edi)
  0xee07ed65:   call   0xf6c0c900 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0xee07ed6a:   add    $0x4,%esp
  0xee07ed6d:   push   %eax
  0xee07ed6e:   push   %edx
  0xee07ed6f:   push   %ecx
  0xee07ed70:   call   0xf704a910 = Thread::current()
  0xee07ed75:   pop    %ecx
  0xee07ed76:   pop    %edx
  0xee07ed77:   cmp    %eax,%edi
  0xee07ed79:   je     0xee07ed90
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07ed7f:   push   $0xf78b5a48
  0xee07ed84:   call   0xee07ed89
  0xee07ed89:   pusha  
  0xee07ed8a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07ed8f:   hlt    
  0xee07ed90:   pop    %eax
  0xee07ed91:   movl   $0x0,0x228(%edi)
  0xee07ed9b:   movl   $0x0,0x230(%edi)
  0xee07eda5:   movl   $0x0,0x22c(%edi)
  0xee07edaf:   vzeroupper 
  0xee07edb2:   cmpl   $0x0,0x4(%edi)
  0xee07edb6:   jne    0xee05bbe0
  0xee07edbc:   mov    -0x20(%ebp),%esi
  0xee07edbf:   mov    -0x1c(%ebp),%edi
  0xee07edc2:   lea    0x0(%ebp,%edi,4),%edi
  0xee07edc6:   ret    
  0xee07edc7:   push   $0xf77a6b02
  0xee07edcc:   call   0xee07edd1
  0xee07edd1:   pusha  
  0xee07edd2:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07edd7:   hlt    
  0xee07edd8:   mov    %esi,-0x20(%ebp)
  0xee07eddb:   lea    (%edx),%eax
  0xee07eddd:   mov    0x4(%edx),%ecx
  0xee07ede0:   movl   $0x0,0x4(%edx)
  0xee07ede7:   mov    (%eax),%ebx
  0xee07ede9:   test   %ebx,%ebx
  0xee07edeb:   je     0xee07edfb
  0xee07edf1:   lock cmpxchg %ebx,(%ecx)
  0xee07edf5:   jne    0xee07ee11
  0xee07edfb:   push   %eax
  0xee07edfc:   push   %edx
  0xee07edfd:   push   %ecx
  0xee07edfe:   call   0xf704a910 = Thread::current()
  0xee07ee03:   pop    %ecx
  0xee07ee04:   pop    %edx
  0xee07ee05:   decl   0x308(%eax)
  0xee07ee0b:   pop    %eax
  0xee07ee0c:   jmp    0xee07ee38
  0xee07ee11:   mov    %ecx,0x4(%edx)
  0xee07ee14:   push   %edx
  0xee07ee15:   cmpl   $0x0,-0x8(%ebp)
  0xee07ee19:   je     0xee07ee30
  0xee07ee1f:   push   $0xf785694c
  0xee07ee24:   call   0xee07ee29
  0xee07ee29:   pusha  
  0xee07ee2a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07ee2f:   hlt    
  0xee07ee30:   call   0xf6c0c710 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0xee07ee35:   add    $0x4,%esp
  0xee07ee38:   mov    -0x20(%ebp),%esi
  0xee07ee3b:   mov    -0x24(%ebp),%ecx
  0xee07ee3e:   lea    -0x24(%ebp),%ebx
  0xee07ee41:   jmp    0xee07ef11
  0xee07ee46:   emms   
  0xee07ee48:   call   0xee07ee52
  0xee07ee4d:   jmp    0xee07eef3
  0xee07ee52:   lea    0x4(%esp),%eax
  0xee07ee56:   mov    %esi,-0x20(%ebp)
  0xee07ee59:   cmpl   $0x0,-0x8(%ebp)
  0xee07ee5d:   je     0xee07ee74
  0xee07ee63:   push   $0xf78569d8
  0xee07ee68:   call   0xee07ee6d
  0xee07ee6d:   pusha  
  0xee07ee6e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07ee73:   hlt    
  0xee07ee74:   push   %eax
  0xee07ee75:   push   %edx
  0xee07ee76:   push   %ecx
  0xee07ee77:   call   0xf704a910 = Thread::current()
  0xee07ee7c:   pop    %ecx
  0xee07ee7d:   pop    %edx
  0xee07ee7e:   mov    %eax,%edi
  0xee07ee80:   pop    %eax
  0xee07ee81:   push   %edi
  0xee07ee82:   vzeroupper 
  0xee07ee85:   mov    %ebp,0x230(%edi)
  0xee07ee8b:   mov    %eax,0x228(%edi)
  0xee07ee91:   call   0xf6c0c900 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0xee07ee96:   add    $0x4,%esp
  0xee07ee99:   push   %eax
  0xee07ee9a:   push   %edx
  0xee07ee9b:   push   %ecx
  0xee07ee9c:   call   0xf704a910 = Thread::current()
  0xee07eea1:   pop    %ecx
  0xee07eea2:   pop    %edx
  0xee07eea3:   cmp    %eax,%edi
  0xee07eea5:   je     0xee07eebc
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07eeab:   push   $0xf78b5a48
  0xee07eeb0:   call   0xee07eeb5
  0xee07eeb5:   pusha  
  0xee07eeb6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07eebb:   hlt    
  0xee07eebc:   pop    %eax
  0xee07eebd:   movl   $0x0,0x228(%edi)
  0xee07eec7:   movl   $0x0,0x230(%edi)
  0xee07eed1:   movl   $0x0,0x22c(%edi)
  0xee07eedb:   vzeroupper 
  0xee07eede:   cmpl   $0x0,0x4(%edi)
  0xee07eee2:   jne    0xee05bbe0
  0xee07eee8:   mov    -0x20(%ebp),%esi
  0xee07eeeb:   mov    -0x1c(%ebp),%edi
  0xee07eeee:   lea    0x0(%ebp,%edi,4),%edi
  0xee07eef2:   ret    
  0xee07eef3:   push   $0xf77a6b02
  0xee07eef8:   call   0xee07eefd
  0xee07eefd:   pusha  
  0xee07eefe:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07ef03:   hlt    
  0xee07ef04:   cmpl   $0x0,0x4(%ecx)
  0xee07ef08:   jne    0xee07ee46
  0xee07ef0e:   add    $0x8,%ecx
  0xee07ef11:   cmp    %ebx,%ecx
  0xee07ef13:   jne    0xee07ef04
  0xee07ef15:   cmpb   $0x0,0xf7ca3a0d
  0xee07ef1c:   je     0xee07ef57
  0xee07ef22:   push   %eax
  0xee07ef23:   push   %edx
  0xee07ef24:   push   %ecx
  0xee07ef25:   call   0xf704a910 = Thread::current()
  0xee07ef2a:   pop    %ecx
  0xee07ef2b:   pop    %edx
  0xee07ef2c:   mov    %eax,%ecx
  0xee07ef2e:   pop    %eax
  0xee07ef2f:   mov    -0xc(%ebp),%ebx
  0xee07ef32:   push   %ebx
  0xee07ef33:   push   %ecx
  0xee07ef34:   cmpl   $0x0,-0x8(%ebp)
  0xee07ef38:   je     0xee07ef4f
  0xee07ef3e:   push   $0xf785694c
  0xee07ef43:   call   0xee07ef48
  0xee07ef48:   pusha  
  0xee07ef49:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07ef4e:   hlt    
  0xee07ef4f:   call   0xf739aa30 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0xee07ef54:   add    $0x8,%esp
  0xee07ef57:   mov    -0x4(%ebp),%ebx
  0xee07ef5a:   push   %eax
  0xee07ef5b:   push   %edx
  0xee07ef5c:   push   %ecx
  0xee07ef5d:   call   0xf704a910 = Thread::current()
  0xee07ef62:   pop    %ecx
  0xee07ef63:   pop    %edx
  0xee07ef64:   mov    %eax,%ecx
  0xee07ef66:   pop    %eax
  0xee07ef67:   cmpl   $0x3,0x2bc(%ecx)
  0xee07ef6e:   je     0xee07f060
  0xee07ef74:   cmp    0x2c4(%ecx),%ebx
  0xee07ef7a:   jle    0xee07f060
  0xee07ef80:   push   %ecx
  0xee07ef81:   cmpl   $0x0,-0x8(%ebp)
  0xee07ef85:   je     0xee07ef9c
  0xee07ef8b:   push   $0xf785694c
  0xee07ef90:   call   0xee07ef95
  0xee07ef95:   pusha  
  0xee07ef96:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07ef9b:   hlt    
  0xee07ef9c:   call   0xf739fd80 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0xee07efa1:   add    $0x4,%esp
  0xee07efa4:   call   0xee07efae
  0xee07efa9:   jmp    0xee07f04f
  0xee07efae:   lea    0x4(%esp),%eax
  0xee07efb2:   mov    %esi,-0x20(%ebp)
  0xee07efb5:   cmpl   $0x0,-0x8(%ebp)
  0xee07efb9:   je     0xee07efd0
  0xee07efbf:   push   $0xf78569d8
  0xee07efc4:   call   0xee07efc9
  0xee07efc9:   pusha  
  0xee07efca:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07efcf:   hlt    
  0xee07efd0:   push   %eax
  0xee07efd1:   push   %edx
  0xee07efd2:   push   %ecx
  0xee07efd3:   call   0xf704a910 = Thread::current()
  0xee07efd8:   pop    %ecx
  0xee07efd9:   pop    %edx
  0xee07efda:   mov    %eax,%edi
  0xee07efdc:   pop    %eax
  0xee07efdd:   push   %edi
  0xee07efde:   vzeroupper 
  0xee07efe1:   mov    %ebp,0x230(%edi)
  0xee07efe7:   mov    %eax,0x228(%edi)
  0xee07efed:   call   0xf6c0b0b0 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0xee07eff2:   add    $0x4,%esp
  0xee07eff5:   push   %eax
  0xee07eff6:   push   %edx
  0xee07eff7:   push   %ecx
  0xee07eff8:   call   0xf704a910 = Thread::current()
  0xee07effd:   pop    %ecx
  0xee07effe:   pop    %edx
  0xee07efff:   cmp    %eax,%edi
  0xee07f001:   je     0xee07f018
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07f007:   push   $0xf78b5a48
  0xee07f00c:   call   0xee07f011
  0xee07f011:   pusha  
  0xee07f012:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07f017:   hlt    
  0xee07f018:   pop    %eax
  0xee07f019:   movl   $0x0,0x228(%edi)
  0xee07f023:   movl   $0x0,0x230(%edi)
  0xee07f02d:   movl   $0x0,0x22c(%edi)
  0xee07f037:   vzeroupper 
  0xee07f03a:   cmpl   $0x0,0x4(%edi)
  0xee07f03e:   jne    0xee05bbe0
  0xee07f044:   mov    -0x20(%ebp),%esi
  0xee07f047:   mov    -0x1c(%ebp),%edi
  0xee07f04a:   lea    0x0(%ebp,%edi,4),%edi
  0xee07f04e:   ret    
  0xee07f04f:   push   $0xf77a6b02
  0xee07f054:   call   0xee07f059
  0xee07f059:   pusha  
  0xee07f05a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07f05f:   hlt    
  0xee07f060:   mov    %ebp,%esp
  0xee07f062:   pop    %ebp
  0xee07f063:   pop    %esi
  0xee07f064:   mov    %ebx,%esp
  0xee07f066:   jmp    *%esi                        ;; 2611:   __ jmp(rbcp);
  0xee07f068:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee07f06d:   call   0xee07f072
  0xee07f072:   pusha  
  0xee07f073:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07f078:   hlt    
  0xee07f079:   nop
  0xee07f07a:   nop
  0xee07f07b:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
invokehandle  233 invokehandle  [0xee07f0a0, 0xee07f304]  612 bytes

--------------------------------------------------------------------------------
  0xee07f0a0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07f0a3:   vmovss %xmm0,(%esp)
  0xee07f0a8:   jmp    0xee07f0b9                   ;; 1751:       __ jmpb(L);
  0xee07f0aa:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07f0ad:   vmovsd %xmm0,(%esp)
  0xee07f0b2:   jmp    0xee07f0b9                   ;; 1754:       __ jmpb(L);
  0xee07f0b4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07f0b5:   push   %eax
  0xee07f0b6:   jmp    0xee07f0b9                   ;; 1765:       __ jmpb(L);
  0xee07f0b8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07f0b9:   mov    %esi,-0x20(%ebp)             ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 3568:   __ save_bcp();
  0xee07f0bc:   movzwl 0x1(%esi),%edx               ;; 2666:   __ get_cache_and_index_and_bytecode_at_bcp(cache, index, temp, byte_no, 1, index_size);
  0xee07f0c0:   mov    -0x18(%ebp),%ecx
  0xee07f0c3:   shl    $0x2,%edx
  0xee07f0c6:   mov    0x1c(%ecx,%edx,4),%ebx
  0xee07f0ca:   shr    $0x10,%ebx
  0xee07f0cd:   and    $0xff,%ebx
  0xee07f0d3:   cmp    $0xe9,%ebx                   ;; 2667:   __ cmpl(temp, code);  // have we resolved this bytecode?
  0xee07f0d9:   je     0xee07f19a                   ;; 2668:   __ jcc(Assembler::equal, resolved);
  0xee07f0df:   mov    $0xe9,%ebx                   ;; 2672:   __ bind(L_clinit_barrier_slow);
                                                    ;; 2674:   __ movl(temp, code);
  0xee07f0e4:   call   0xee07f0ee                   ;; 2675:   __ call_VM(noreg, entry, temp);
  0xee07f0e9:   jmp    0xee07f190
  0xee07f0ee:   push   %ebx
  0xee07f0ef:   lea    0x8(%esp),%eax
  0xee07f0f3:   mov    %esi,-0x20(%ebp)
  0xee07f0f6:   cmpl   $0x0,-0x8(%ebp)
  0xee07f0fa:   je     0xee07f111
  0xee07f100:   push   $0xf78569d8
  0xee07f105:   call   0xee07f10a
  0xee07f10a:   pusha  
  0xee07f10b:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07f110:   hlt    
  0xee07f111:   push   %eax
  0xee07f112:   push   %edx
  0xee07f113:   push   %ecx
  0xee07f114:   call   0xf704a910 = Thread::current()
  0xee07f119:   pop    %ecx
  0xee07f11a:   pop    %edx
  0xee07f11b:   mov    %eax,%edi
  0xee07f11d:   pop    %eax
  0xee07f11e:   push   %edi
  0xee07f11f:   vzeroupper 
  0xee07f122:   mov    %ebp,0x230(%edi)
  0xee07f128:   mov    %eax,0x228(%edi)
  0xee07f12e:   call   0xf6c166c0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0xee07f133:   add    $0x8,%esp
  0xee07f136:   push   %eax
  0xee07f137:   push   %edx
  0xee07f138:   push   %ecx
  0xee07f139:   call   0xf704a910 = Thread::current()
  0xee07f13e:   pop    %ecx
  0xee07f13f:   pop    %edx
  0xee07f140:   cmp    %eax,%edi
  0xee07f142:   je     0xee07f159
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07f148:   push   $0xf78b5a48
  0xee07f14d:   call   0xee07f152
  0xee07f152:   pusha  
  0xee07f153:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07f158:   hlt    
  0xee07f159:   pop    %eax
  0xee07f15a:   movl   $0x0,0x228(%edi)
  0xee07f164:   movl   $0x0,0x230(%edi)
  0xee07f16e:   movl   $0x0,0x22c(%edi)
  0xee07f178:   vzeroupper 
  0xee07f17b:   cmpl   $0x0,0x4(%edi)
  0xee07f17f:   jne    0xee05bbe0
  0xee07f185:   mov    -0x20(%ebp),%esi
  0xee07f188:   mov    -0x1c(%ebp),%edi
  0xee07f18b:   lea    0x0(%ebp,%edi,4),%edi
  0xee07f18f:   ret    
  0xee07f190:   movzwl 0x1(%esi),%edx               ;; 2677:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee07f194:   mov    -0x18(%ebp),%ecx
  0xee07f197:   shl    $0x2,%edx
  0xee07f19a:   mov    0x20(%ecx,%edx,4),%ebx       ;; 2679:   __ bind(resolved);
                                                    ;; 2748:   __ load_resolved_method_at_index(byte_no, method, cache, index);
  0xee07f19e:   mov    0x24(%ecx,%edx,4),%eax       ;; 2752:     __ movptr(itable_index, Address(cache, index, Address::times_ptr, index_offset));
  0xee07f1a2:   mov    0x28(%ecx,%edx,4),%edx       ;; 2754:   __ movl(flags, Address(cache, index, Address::times_ptr, flags_offset));
  0xee07f1a6:   test   $0x1000000,%edx              ;; 3575:     __ testl(flags, (1 << ConstantPoolCacheEntry::has_appendix_shift));
  0xee07f1ac:   je     0xee07f1cc                   ;; 3576:     __ jcc(Assembler::zero, L_no_push);
  0xee07f1b2:   push   %ebx                         ;; 3580:     __ push(rbx);
  0xee07f1b3:   mov    %eax,%ebx                    ;; 3581:     __ mov(rbx, index);
  0xee07f1b5:   mov    -0xc(%ebp),%eax              ;; 3582:     __ load_resolved_reference_at_index(index, rbx);
  0xee07f1b8:   mov    0x8(%eax),%eax
  0xee07f1bb:   mov    0x8(%eax),%eax
  0xee07f1be:   mov    0xc(%eax),%eax
  0xee07f1c1:   mov    0x8(%eax),%eax
  0xee07f1c4:   mov    (%eax),%eax
  0xee07f1c6:   mov    0xc(%eax,%ebx,4),%eax
  0xee07f1ca:   pop    %ebx                         ;; 3583:     __ pop(rbx);
  0xee07f1cb:   push   %eax                         ;; 3584:     __ push(index);  // push appendix (MethodType, CallSite, etc.)
  0xee07f1cc:   mov    %edx,%ecx                    ;; 3585:     __ bind(L_no_push);
                                                    ;; 3591:     __ movl(recv, flags);
  0xee07f1ce:   and    $0xff,%ecx                   ;; 3592:     __ andl(recv, ConstantPoolCacheEntry::parameter_size_mask);
  0xee07f1d4:   mov    -0x4(%esp,%ecx,4),%ecx       ;; 3595:     Address recv_addr = __ argument_address(recv, no_return_pc_pushed_yet + receiver_is_at_end);
                                                    ;; 3596:     __ movptr(recv, recv_addr);
  0xee07f1d8:   shr    $0x1c,%edx                   ;; 3597:     __ verify_oop(recv);
                                                    ;; 3605:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee07f1db:   mov    -0x833c620(,%edx,4),%edx     ;; 3616:     __ movptr(flags, ArrayAddress(table, Address(noreg, flags, Address::times_ptr)));
  0xee07f1e2:   push   %edx                         ;; 3621:   __ push(flags);
  0xee07f1e3:   cmp    (%ecx),%eax                  ;; 3873:   __ verify_method_ptr(rbx_method);
                                                    ;; 3874:   __ verify_oop(rcx_recv);
                                                    ;; 3875:   __ null_check(rcx_recv);
  0xee07f1e5:   mov    -0x14(%ebp),%eax             ;; 3883:   __ profile_final_call(rax);
  0xee07f1e8:   test   %eax,%eax
  0xee07f1ea:   je     0xee07f1fe
  0xee07f1f0:   addl   $0x1,0x8(%eax)
  0xee07f1f4:   sbbl   $0x0,0x8(%eax)
  0xee07f1f8:   add    $0x1c,%eax
  0xee07f1fb:   mov    %eax,-0x14(%ebp)
  0xee07f1fe:   mov    -0x14(%ebp),%edx             ;; 3884:   __ profile_arguments_type(rdx, rbx_method, rbcp, true);
  0xee07f201:   test   %edx,%edx
  0xee07f203:   je     0xee07f2e8
  0xee07f209:   cmpb   $0xb,-0x1c(%edx)
  0xee07f20d:   jne    0xee07f2e8
  0xee07f213:   add    $0x4,%edx
  0xee07f216:   mov    -0x4(%edx),%esi
  0xee07f219:   sub    $0x0,%esi
  0xee07f21c:   cmp    $0x2,%esi
  0xee07f21f:   jl     0xee07f2e0
  0xee07f225:   mov    0x8(%ebx),%esi
  0xee07f228:   movzwl 0x24(%esi),%esi
  0xee07f22c:   sub    (%edx),%esi
  0xee07f22e:   sub    $0x1,%esi
  0xee07f231:   mov    0x4(%esp,%esi,4),%esi
  0xee07f235:   test   %esi,%esi
  0xee07f237:   jne    0xee07f23f
  0xee07f239:   orl    $0x1,0x4(%edx)
  0xee07f23d:   jmp    0xee07f275
  0xee07f23f:   mov    0x4(%esi),%esi
  0xee07f242:   xor    0x4(%edx),%esi
  0xee07f245:   test   $0xfffffffc,%esi
  0xee07f24b:   je     0xee07f275
  0xee07f24d:   test   $0x2,%esi
  0xee07f253:   jne    0xee07f275
  0xee07f255:   cmpl   $0x0,0x4(%edx)
  0xee07f259:   je     0xee07f272
  0xee07f25b:   cmpl   $0x1,0x4(%edx)
  0xee07f25f:   je     0xee07f272
  0xee07f261:   xor    0x4(%edx),%esi
  0xee07f264:   test   $0xfffffffc,%esi
  0xee07f26a:   je     0xee07f275
  0xee07f26c:   orl    $0x2,0x4(%edx)
  0xee07f270:   jmp    0xee07f275
  0xee07f272:   mov    %esi,0x4(%edx)
  0xee07f275:   add    $0x8,%edx
  0xee07f278:   mov    -0xc(%edx),%esi
  0xee07f27b:   sub    $0x2,%esi
  0xee07f27e:   cmp    $0x2,%esi
  0xee07f281:   jl     0xee07f2e0
  0xee07f287:   mov    0x8(%ebx),%esi
  0xee07f28a:   movzwl 0x24(%esi),%esi
  0xee07f28e:   sub    (%edx),%esi
  0xee07f290:   sub    $0x1,%esi
  0xee07f293:   mov    0x4(%esp,%esi,4),%esi
  0xee07f297:   test   %esi,%esi
  0xee07f299:   jne    0xee07f2a1
  0xee07f29b:   orl    $0x1,0x4(%edx)
  0xee07f29f:   jmp    0xee07f2d7
  0xee07f2a1:   mov    0x4(%esi),%esi
  0xee07f2a4:   xor    0x4(%edx),%esi
  0xee07f2a7:   test   $0xfffffffc,%esi
  0xee07f2ad:   je     0xee07f2d7
  0xee07f2af:   test   $0x2,%esi
  0xee07f2b5:   jne    0xee07f2d7
  0xee07f2b7:   cmpl   $0x0,0x4(%edx)
  0xee07f2bb:   je     0xee07f2d4
  0xee07f2bd:   cmpl   $0x1,0x4(%edx)
  0xee07f2c1:   je     0xee07f2d4
  0xee07f2c3:   xor    0x4(%edx),%esi
  0xee07f2c6:   test   $0xfffffffc,%esi
  0xee07f2cc:   je     0xee07f2d7
  0xee07f2ce:   orl    $0x2,0x4(%edx)
  0xee07f2d2:   jmp    0xee07f2d7
  0xee07f2d4:   mov    %esi,0x4(%edx)
  0xee07f2d7:   add    $0x8,%edx
  0xee07f2da:   mov    -0x14(%edx),%esi
  0xee07f2dd:   sub    $0x4,%esi
  0xee07f2e0:   shl    $0x2,%esi
  0xee07f2e3:   add    %esi,%edx
  0xee07f2e5:   mov    %edx,-0x14(%ebp)
  0xee07f2e8:   lea    0x4(%esp),%esi               ;; 3886:   __ jump_from_interpreted(rbx_method, rdx);
  0xee07f2ec:   mov    %esi,-0x8(%ebp)
  0xee07f2ef:   jmp    *0x40(%ebx)
  0xee07f2f2:   push   $0xf77a6b02                  ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  390:     __ should_not_reach_here();
  0xee07f2f7:   call   0xee07f2fc
  0xee07f2fc:   pusha  
  0xee07f2fd:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07f302:   hlt    
  0xee07f303:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
nofast_getfield  234 nofast_getfield  [0xee07f320, 0xee07f508]  488 bytes

--------------------------------------------------------------------------------
  0xee07f320:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07f323:   vmovss %xmm0,(%esp)
  0xee07f328:   jmp    0xee07f339                   ;; 1751:       __ jmpb(L);
  0xee07f32a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07f32d:   vmovsd %xmm0,(%esp)
  0xee07f332:   jmp    0xee07f339                   ;; 1754:       __ jmpb(L);
  0xee07f334:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07f335:   push   %eax
  0xee07f336:   jmp    0xee07f339                   ;; 1765:       __ jmpb(L);
  0xee07f338:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07f339:   movzwl 0x1(%esi),%edx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2666:   __ get_cache_and_index_and_bytecode_at_bcp(cache, index, temp, byte_no, 1, index_size);
  0xee07f33d:   mov    -0x18(%ebp),%ecx
  0xee07f340:   shl    $0x2,%edx
  0xee07f343:   mov    0x1c(%ecx,%edx,4),%ebx
  0xee07f347:   shr    $0x10,%ebx
  0xee07f34a:   and    $0xff,%ebx
  0xee07f350:   cmp    $0xb4,%ebx                   ;; 2667:   __ cmpl(temp, code);  // have we resolved this bytecode?
  0xee07f356:   je     0xee07f417                   ;; 2668:   __ jcc(Assembler::equal, resolved);
  0xee07f35c:   mov    $0xb4,%ebx                   ;; 2672:   __ bind(L_clinit_barrier_slow);
                                                    ;; 2674:   __ movl(temp, code);
  0xee07f361:   call   0xee07f36b                   ;; 2675:   __ call_VM(noreg, entry, temp);
  0xee07f366:   jmp    0xee07f40d
  0xee07f36b:   push   %ebx
  0xee07f36c:   lea    0x8(%esp),%eax
  0xee07f370:   mov    %esi,-0x20(%ebp)
  0xee07f373:   cmpl   $0x0,-0x8(%ebp)
  0xee07f377:   je     0xee07f38e
  0xee07f37d:   push   $0xf78569d8
  0xee07f382:   call   0xee07f387
  0xee07f387:   pusha  
  0xee07f388:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07f38d:   hlt    
  0xee07f38e:   push   %eax
  0xee07f38f:   push   %edx
  0xee07f390:   push   %ecx
  0xee07f391:   call   0xf704a910 = Thread::current()
  0xee07f396:   pop    %ecx
  0xee07f397:   pop    %edx
  0xee07f398:   mov    %eax,%edi
  0xee07f39a:   pop    %eax
  0xee07f39b:   push   %edi
  0xee07f39c:   vzeroupper 
  0xee07f39f:   mov    %ebp,0x230(%edi)
  0xee07f3a5:   mov    %eax,0x228(%edi)
  0xee07f3ab:   call   0xf6c166c0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0xee07f3b0:   add    $0x8,%esp
  0xee07f3b3:   push   %eax
  0xee07f3b4:   push   %edx
  0xee07f3b5:   push   %ecx
  0xee07f3b6:   call   0xf704a910 = Thread::current()
  0xee07f3bb:   pop    %ecx
  0xee07f3bc:   pop    %edx
  0xee07f3bd:   cmp    %eax,%edi
  0xee07f3bf:   je     0xee07f3d6
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07f3c5:   push   $0xf78b5a48
  0xee07f3ca:   call   0xee07f3cf
  0xee07f3cf:   pusha  
  0xee07f3d0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07f3d5:   hlt    
  0xee07f3d6:   pop    %eax
  0xee07f3d7:   movl   $0x0,0x228(%edi)
  0xee07f3e1:   movl   $0x0,0x230(%edi)
  0xee07f3eb:   movl   $0x0,0x22c(%edi)
  0xee07f3f5:   vzeroupper 
  0xee07f3f8:   cmpl   $0x0,0x4(%edi)
  0xee07f3fc:   jne    0xee05bbe0
  0xee07f402:   mov    -0x20(%ebp),%esi
  0xee07f405:   mov    -0x1c(%ebp),%edi
  0xee07f408:   lea    0x0(%ebp,%edi,4),%edi
  0xee07f40c:   ret    
  0xee07f40d:   movzwl 0x1(%esi),%edx               ;; 2677:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee07f411:   mov    -0x18(%ebp),%ecx
  0xee07f414:   shl    $0x2,%edx
  0xee07f417:   mov    0x24(%ecx,%edx,4),%ebx       ;; 2679:   __ bind(resolved);
                                                    ;; 2705:   __ movptr(off, Address(cache, index, Address::times_ptr,
  0xee07f41b:   mov    0x28(%ecx,%edx,4),%eax       ;; 2709:   __ movl(flags, Address(cache, index, Address::times_ptr,
  0xee07f41f:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07f420:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07f422:   shr    $0x1c,%eax                   ;; 2795:   __ verify_oop(r);
                                                    ;; 2818:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee07f425:   and    $0xf,%eax                    ;; 2822:   __ andl(flags, ConstantPoolCacheEntry::tos_state_mask);
  0xee07f428:   jne    0xee07f438                   ;; 2824:   __ jcc(Assembler::notZero, notByte);
  0xee07f42e:   movsbl (%ecx,%ebx,1),%eax           ;; 2826:   __ access_load_at(T_BYTE, IN_HEAP, rax, field, noreg, noreg);
  0xee07f432:   push   %eax                         ;; 2827:   __ push(btos);
  0xee07f433:   jmp    0xee07f4f7                   ;; 2832:   __ jmp(Done);
  0xee07f438:   cmp    $0x1,%eax                    ;; 2834:   __ bind(notByte);
                                                    ;; 2835:   __ cmpl(flags, ztos);
  0xee07f43b:   jne    0xee07f44b                   ;; 2836:   __ jcc(Assembler::notEqual, notBool);
  0xee07f441:   movzbl (%ecx,%ebx,1),%eax           ;; 2839:   __ access_load_at(T_BOOLEAN, IN_HEAP, rax, field, noreg, noreg);
  0xee07f445:   push   %eax                         ;; 2840:   __ push(ztos);
  0xee07f446:   jmp    0xee07f4f7                   ;; 2846:   __ jmp(Done);
  0xee07f44b:   cmp    $0x8,%eax                    ;; 2848:   __ bind(notBool);
                                                    ;; 2849:   __ cmpl(flags, atos);
  0xee07f44e:   jne    0xee07f45d                   ;; 2850:   __ jcc(Assembler::notEqual, notObj);
  0xee07f454:   mov    (%ecx,%ebx,1),%eax           ;;  165:   __ load_heap_oop(dst, src, rdx, rbx, decorators);
  0xee07f457:   push   %eax                         ;; 2853:   __ push(atos);
  0xee07f458:   jmp    0xee07f4f7                   ;; 2857:   __ jmp(Done);
  0xee07f45d:   cmp    $0x4,%eax                    ;; 2859:   __ bind(notObj);
                                                    ;; 2860:   __ cmpl(flags, itos);
  0xee07f460:   jne    0xee07f46f                   ;; 2861:   __ jcc(Assembler::notEqual, notInt);
  0xee07f466:   mov    (%ecx,%ebx,1),%eax           ;; 2863:   __ access_load_at(T_INT, IN_HEAP, rax, field, noreg, noreg);
  0xee07f469:   push   %eax                         ;; 2864:   __ push(itos);
  0xee07f46a:   jmp    0xee07f4f7                   ;; 2869:   __ jmp(Done);
  0xee07f46f:   cmp    $0x2,%eax                    ;; 2871:   __ bind(notInt);
                                                    ;; 2872:   __ cmpl(flags, ctos);
  0xee07f472:   jne    0xee07f482                   ;; 2873:   __ jcc(Assembler::notEqual, notChar);
  0xee07f478:   movzwl (%ecx,%ebx,1),%eax           ;; 2875:   __ access_load_at(T_CHAR, IN_HEAP, rax, field, noreg, noreg);
  0xee07f47c:   push   %eax                         ;; 2876:   __ push(ctos);
  0xee07f47d:   jmp    0xee07f4f7                   ;; 2881:   __ jmp(Done);
  0xee07f482:   cmp    $0x3,%eax                    ;; 2883:   __ bind(notChar);
                                                    ;; 2884:   __ cmpl(flags, stos);
  0xee07f485:   jne    0xee07f495                   ;; 2885:   __ jcc(Assembler::notEqual, notShort);
  0xee07f48b:   movswl (%ecx,%ebx,1),%eax           ;; 2887:   __ access_load_at(T_SHORT, IN_HEAP, rax, field, noreg, noreg);
  0xee07f48f:   push   %eax                         ;; 2888:   __ push(stos);
  0xee07f490:   jmp    0xee07f4f7                   ;; 2893:   __ jmp(Done);
  0xee07f495:   cmp    $0x5,%eax                    ;; 2895:   __ bind(notShort);
                                                    ;; 2896:   __ cmpl(flags, ltos);
  0xee07f498:   jne    0xee07f4b0                   ;; 2897:   __ jcc(Assembler::notEqual, notLong);
  0xee07f49e:   fildll (%ecx,%ebx,1)                ;; 2901:   __ access_load_at(T_LONG, IN_HEAP | MO_RELAXED, noreg /* ltos */, field, noreg, noreg);
  0xee07f4a1:   sub    $0x8,%esp
  0xee07f4a4:   fistpll (%esp)
  0xee07f4a7:   pop    %eax
  0xee07f4a8:   pop    %edx
  0xee07f4a9:   push   %edx                         ;; 2902:   __ push(ltos);
  0xee07f4aa:   push   %eax
  0xee07f4ab:   jmp    0xee07f4f7                   ;; 2905:   __ jmp(Done);
  0xee07f4b0:   cmp    $0x6,%eax                    ;; 2907:   __ bind(notLong);
                                                    ;; 2908:   __ cmpl(flags, ftos);
  0xee07f4b3:   jne    0xee07f4cb                   ;; 2909:   __ jcc(Assembler::notEqual, notFloat);
  0xee07f4b9:   vmovss (%ecx,%ebx,1),%xmm0          ;; 2912:   __ access_load_at(T_FLOAT, IN_HEAP, noreg /* ftos */, field, noreg, noreg);
  0xee07f4be:   sub    $0x4,%esp                    ;; 2913:   __ push(ftos);
  0xee07f4c1:   vmovss %xmm0,(%esp)
  0xee07f4c6:   jmp    0xee07f4f7                   ;; 2918:   __ jmp(Done);
  0xee07f4cb:   cmp    $0x7,%eax                    ;; 2920:   __ bind(notFloat);
                                                    ;; 2923:   __ cmpl(flags, dtos);
  0xee07f4ce:   jne    0xee07f4e6                   ;; 2924:   __ jcc(Assembler::notEqual, notDouble);
  0xee07f4d4:   vmovsd (%ecx,%ebx,1),%xmm0          ;; 2928:   __ access_load_at(T_DOUBLE, IN_HEAP | MO_RELAXED, noreg /* dtos */, field, noreg, noreg);
  0xee07f4d9:   sub    $0x8,%esp                    ;; 2929:   __ push(dtos);
  0xee07f4dc:   vmovsd %xmm0,(%esp)
  0xee07f4e1:   jmp    0xee07f4f7                   ;; 2935:   __ jmp(Done);
  0xee07f4e6:   push   $0xf7924fde                  ;; 2937:   __ bind(notDouble);
                                                    ;; 2938:   __ stop("Bad state");
  0xee07f4eb:   call   0xee07f4f0
  0xee07f4f0:   pusha  
  0xee07f4f1:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07f4f6:   hlt    
  0xee07f4f7:   movzbl 0x3(%esi),%ebx               ;; 2941:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07f4fb:   add    $0x3,%esi
  0xee07f4fe:   jmp    *-0x833caa0(,%ebx,4)
  0xee07f505:   nop
  0xee07f506:   nop
  0xee07f507:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
nofast_putfield  235 nofast_putfield  [0xee07f520, 0xee07fb20]  1536 bytes

--------------------------------------------------------------------------------
  0xee07f520:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07f523:   vmovss %xmm0,(%esp)
  0xee07f528:   jmp    0xee07f539                   ;; 1751:       __ jmpb(L);
  0xee07f52a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07f52d:   vmovsd %xmm0,(%esp)
  0xee07f532:   jmp    0xee07f539                   ;; 1754:       __ jmpb(L);
  0xee07f534:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07f535:   push   %eax
  0xee07f536:   jmp    0xee07f539                   ;; 1765:       __ jmpb(L);
  0xee07f538:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07f539:   movzwl 0x1(%esi),%edx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;; 2666:   __ get_cache_and_index_and_bytecode_at_bcp(cache, index, temp, byte_no, 1, index_size);
  0xee07f53d:   mov    -0x18(%ebp),%ecx
  0xee07f540:   shl    $0x2,%edx
  0xee07f543:   mov    0x1c(%ecx,%edx,4),%ebx
  0xee07f547:   shr    $0x18,%ebx
  0xee07f54a:   and    $0xff,%ebx
  0xee07f550:   cmp    $0xb5,%ebx                   ;; 2667:   __ cmpl(temp, code);  // have we resolved this bytecode?
  0xee07f556:   je     0xee07f617                   ;; 2668:   __ jcc(Assembler::equal, resolved);
  0xee07f55c:   mov    $0xb5,%ebx                   ;; 2672:   __ bind(L_clinit_barrier_slow);
                                                    ;; 2674:   __ movl(temp, code);
  0xee07f561:   call   0xee07f56b                   ;; 2675:   __ call_VM(noreg, entry, temp);
  0xee07f566:   jmp    0xee07f60d
  0xee07f56b:   push   %ebx
  0xee07f56c:   lea    0x8(%esp),%eax
  0xee07f570:   mov    %esi,-0x20(%ebp)
  0xee07f573:   cmpl   $0x0,-0x8(%ebp)
  0xee07f577:   je     0xee07f58e
  0xee07f57d:   push   $0xf78569d8
  0xee07f582:   call   0xee07f587
  0xee07f587:   pusha  
  0xee07f588:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07f58d:   hlt    
  0xee07f58e:   push   %eax
  0xee07f58f:   push   %edx
  0xee07f590:   push   %ecx
  0xee07f591:   call   0xf704a910 = Thread::current()
  0xee07f596:   pop    %ecx
  0xee07f597:   pop    %edx
  0xee07f598:   mov    %eax,%edi
  0xee07f59a:   pop    %eax
  0xee07f59b:   push   %edi
  0xee07f59c:   vzeroupper 
  0xee07f59f:   mov    %ebp,0x230(%edi)
  0xee07f5a5:   mov    %eax,0x228(%edi)
  0xee07f5ab:   call   0xf6c166c0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0xee07f5b0:   add    $0x8,%esp
  0xee07f5b3:   push   %eax
  0xee07f5b4:   push   %edx
  0xee07f5b5:   push   %ecx
  0xee07f5b6:   call   0xf704a910 = Thread::current()
  0xee07f5bb:   pop    %ecx
  0xee07f5bc:   pop    %edx
  0xee07f5bd:   cmp    %eax,%edi
  0xee07f5bf:   je     0xee07f5d6
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07f5c5:   push   $0xf78b5a48
  0xee07f5ca:   call   0xee07f5cf
  0xee07f5cf:   pusha  
  0xee07f5d0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07f5d5:   hlt    
  0xee07f5d6:   pop    %eax
  0xee07f5d7:   movl   $0x0,0x228(%edi)
  0xee07f5e1:   movl   $0x0,0x230(%edi)
  0xee07f5eb:   movl   $0x0,0x22c(%edi)
  0xee07f5f5:   vzeroupper 
  0xee07f5f8:   cmpl   $0x0,0x4(%edi)
  0xee07f5fc:   jne    0xee05bbe0
  0xee07f602:   mov    -0x20(%ebp),%esi
  0xee07f605:   mov    -0x1c(%ebp),%edi
  0xee07f608:   lea    0x0(%ebp,%edi,4),%edi
  0xee07f60c:   ret    
  0xee07f60d:   movzwl 0x1(%esi),%edx               ;; 2677:   __ get_cache_and_index_at_bcp(cache, index, 1, index_size);
  0xee07f611:   mov    -0x18(%ebp),%ecx
  0xee07f614:   shl    $0x2,%edx
  0xee07f617:   mov    0x24(%ecx,%edx,4),%ebx       ;; 2679:   __ bind(resolved);
                                                    ;; 2705:   __ movptr(off, Address(cache, index, Address::times_ptr,
  0xee07f61b:   mov    0x28(%ecx,%edx,4),%eax       ;; 2709:   __ movl(flags, Address(cache, index, Address::times_ptr,
  0xee07f61f:   mov    %eax,%edx                    ;; 3064:   __ movl(rdx, flags);
  0xee07f621:   shr    $0x15,%edx                   ;; 3065:   __ shrl(rdx, ConstantPoolCacheEntry::is_volatile_shift);
  0xee07f624:   and    $0x1,%edx                    ;; 3066:   __ andl(rdx, 0x1);
  0xee07f627:   test   %edx,%edx                    ;; 3069:   __ testl(rdx, rdx);
  0xee07f629:   je     0xee07f8a6                   ;; 3070:   __ jcc(Assembler::zero, notVolatile);
  0xee07f62f:   shr    $0x1c,%eax                   ;; 3096:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee07f632:   and    $0xf,%eax                    ;; 3099:   __ andl(flags, ConstantPoolCacheEntry::tos_state_mask);
  0xee07f635:   jne    0xee07f647                   ;; 3100:   __ jcc(Assembler::notZero, notByte);
  0xee07f63b:   pop    %eax                         ;; 3104:     __ pop(btos);
  0xee07f63c:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07f63d:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07f63f:   mov    %al,(%ecx,%ebx,1)            ;; 2795:   __ verify_oop(r);
                                                    ;; 3106:     __ access_store_at(T_BYTE, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07f642:   jmp    0xee07f89b                   ;; 3110:     __ jmp(Done);
  0xee07f647:   cmp    $0x1,%eax                    ;; 3113:   __ bind(notByte);
                                                    ;; 3114:   __ cmpl(flags, ztos);
  0xee07f64a:   jne    0xee07f65f                   ;; 3115:   __ jcc(Assembler::notEqual, notBool);
  0xee07f650:   pop    %eax                         ;; 3119:     __ pop(ztos);
  0xee07f651:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07f652:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07f654:   and    $0x1,%eax                    ;; 2795:   __ verify_oop(r);
                                                    ;; 3121:     __ access_store_at(T_BOOLEAN, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07f657:   mov    %al,(%ecx,%ebx,1)
  0xee07f65a:   jmp    0xee07f89b                   ;; 3125:     __ jmp(Done);
  0xee07f65f:   cmp    $0x8,%eax                    ;; 3128:   __ bind(notBool);
                                                    ;; 3129:   __ cmpl(flags, atos);
  0xee07f662:   jne    0xee07f7ef                   ;; 3130:   __ jcc(Assembler::notEqual, notObj);
  0xee07f668:   pop    %eax                         ;; 3134:     __ pop(atos);
  0xee07f669:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07f66a:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07f66c:   lea    (%ecx,%ebx,1),%edx           ;; 2795:   __ verify_oop(r);
                                                    ;;  155:   __ store_heap_oop(dst, val,
  0xee07f66f:   push   %eax
  0xee07f670:   push   %edx
  0xee07f671:   push   %ecx
  0xee07f672:   call   0xf704a910 = Thread::current()
  0xee07f677:   pop    %ecx
  0xee07f678:   pop    %edx
  0xee07f679:   mov    %eax,%ecx
  0xee07f67b:   pop    %eax
  0xee07f67c:   mov    %esi,-0x20(%ebp)
  0xee07f67f:   cmpb   $0x0,0x24(%ecx)
  0xee07f683:   je     0xee07f754
  0xee07f689:   mov    (%edx),%ebx
  0xee07f68b:   cmp    $0x0,%ebx
  0xee07f68e:   je     0xee07f754
  0xee07f694:   mov    0x18(%ecx),%esi
  0xee07f697:   cmp    $0x0,%esi
  0xee07f69a:   je     0xee07f6b0
  0xee07f6a0:   sub    $0x4,%esi
  0xee07f6a3:   mov    %esi,0x18(%ecx)
  0xee07f6a6:   add    0x20(%ecx),%esi
  0xee07f6a9:   mov    %ebx,(%esi)
  0xee07f6ab:   jmp    0xee07f754
 ;; push_call_clobbered_registers start
  0xee07f6b0:   sub    $0x50,%esp
  0xee07f6b3:   mov    %eax,(%esp)
  0xee07f6b6:   mov    %ecx,0x4(%esp)
  0xee07f6ba:   mov    %edx,0x8(%esp)
  0xee07f6be:   vmovsd %xmm0,0x10(%esp)
  0xee07f6c4:   vmovsd %xmm1,0x18(%esp)
  0xee07f6ca:   vmovsd %xmm2,0x20(%esp)
  0xee07f6d0:   vmovsd %xmm3,0x28(%esp)
  0xee07f6d6:   vmovsd %xmm4,0x30(%esp)
  0xee07f6dc:   vmovsd %xmm5,0x38(%esp)
  0xee07f6e2:   vmovsd %xmm6,0x40(%esp)
  0xee07f6e8:   vmovsd %xmm7,0x48(%esp)
 ;; push_call_clobbered_registers end
  0xee07f6ee:   push   %ecx
  0xee07f6ef:   push   %ebx
  0xee07f6f0:   cmpl   $0x0,-0x8(%ebp)
  0xee07f6f4:   je     0xee07f70b
  0xee07f6fa:   push   $0xf785694c
  0xee07f6ff:   call   0xee07f704
  0xee07f704:   pusha  
  0xee07f705:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07f70a:   hlt    
  0xee07f70b:   call   0xf6a17f10 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0xee07f710:   add    $0x8,%esp
 ;; pop_call_clobbered_registers start
  0xee07f713:   vmovsd 0x48(%esp),%xmm7
  0xee07f719:   vmovsd 0x40(%esp),%xmm6
  0xee07f71f:   vmovsd 0x38(%esp),%xmm5
  0xee07f725:   vmovsd 0x30(%esp),%xmm4
  0xee07f72b:   vmovsd 0x28(%esp),%xmm3
  0xee07f731:   vmovsd 0x20(%esp),%xmm2
  0xee07f737:   vmovsd 0x18(%esp),%xmm1
  0xee07f73d:   vmovsd 0x10(%esp),%xmm0
  0xee07f743:   mov    0x8(%esp),%edx
  0xee07f747:   mov    0x4(%esp),%ecx
  0xee07f74b:   mov    (%esp),%eax
  0xee07f74e:   add    $0x50,%esp
  0xee07f751:   vzeroupper 
 ;; pop_call_clobbered_registers end
  0xee07f754:   mov    %eax,(%edx)
  0xee07f756:   mov    %edx,%esi
  0xee07f758:   xor    %eax,%esi
  0xee07f75a:   shr    $0x14,%esi
  0xee07f75d:   je     0xee07f7e7
  0xee07f763:   cmp    $0x0,%eax
  0xee07f766:   je     0xee07f7e7
  0xee07f76c:   mov    %edx,%esi
  0xee07f76e:   shr    $0x9,%esi
  0xee07f771:   mov    $0xa5ecc000,%ebx
  0xee07f776:   add    %ebx,%esi
  0xee07f778:   cmpb   $0x2,(%esi)
  0xee07f77b:   je     0xee07f7e7
  0xee07f781:   lock addl $0x0,-0x40(%esp)
  0xee07f787:   cmpb   $0x0,(%esi)
  0xee07f78a:   je     0xee07f7e7
  0xee07f790:   movb   $0x0,(%esi)
  0xee07f793:   mov    0x28(%ecx),%ebx
  0xee07f796:   test   %ebx,%ebx
  0xee07f798:   je     0xee07f7ae
  0xee07f79e:   sub    $0x4,%ebx
  0xee07f7a1:   mov    %ebx,0x28(%ecx)
  0xee07f7a4:   add    0x30(%ecx),%ebx
  0xee07f7a7:   mov    %esi,(%ebx)
  0xee07f7a9:   jmp    0xee07f7e7
  0xee07f7ae:   sub    $0x10,%esp
  0xee07f7b1:   mov    %ecx,(%esp)
  0xee07f7b4:   mov    %edx,0x4(%esp)
  0xee07f7b8:   push   %ecx
  0xee07f7b9:   push   %esi
  0xee07f7ba:   cmpl   $0x0,-0x8(%ebp)
  0xee07f7be:   je     0xee07f7d5
  0xee07f7c4:   push   $0xf785694c
  0xee07f7c9:   call   0xee07f7ce
  0xee07f7ce:   pusha  
  0xee07f7cf:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07f7d4:   hlt    
  0xee07f7d5:   call   0xf6a181d0 = G1BarrierSetRuntime::write_ref_field_post_entry(unsigned char volatile*, JavaThread*)
  0xee07f7da:   add    $0x8,%esp
  0xee07f7dd:   mov    0x4(%esp),%edx
  0xee07f7e1:   mov    (%esp),%ecx
  0xee07f7e4:   add    $0x10,%esp
  0xee07f7e7:   mov    -0x20(%ebp),%esi
  0xee07f7ea:   jmp    0xee07f89b                   ;; 3141:     __ jmp(Done);
  0xee07f7ef:   cmp    $0x4,%eax                    ;; 3144:   __ bind(notObj);
                                                    ;; 3145:   __ cmpl(flags, itos);
  0xee07f7f2:   jne    0xee07f804                   ;; 3146:   __ jcc(Assembler::notEqual, notInt);
  0xee07f7f8:   pop    %eax                         ;; 3150:     __ pop(itos);
  0xee07f7f9:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07f7fa:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07f7fc:   mov    %eax,(%ecx,%ebx,1)           ;; 2795:   __ verify_oop(r);
                                                    ;; 3152:     __ access_store_at(T_INT, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07f7ff:   jmp    0xee07f89b                   ;; 3156:     __ jmp(Done);
  0xee07f804:   cmp    $0x2,%eax                    ;; 3159:   __ bind(notInt);
                                                    ;; 3160:   __ cmpl(flags, ctos);
  0xee07f807:   jne    0xee07f81a                   ;; 3161:   __ jcc(Assembler::notEqual, notChar);
  0xee07f80d:   pop    %eax                         ;; 3165:     __ pop(ctos);
  0xee07f80e:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07f80f:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07f811:   mov    %ax,(%ecx,%ebx,1)            ;; 2795:   __ verify_oop(r);
                                                    ;; 3167:     __ access_store_at(T_CHAR, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07f815:   jmp    0xee07f89b                   ;; 3171:     __ jmp(Done);
  0xee07f81a:   cmp    $0x3,%eax                    ;; 3174:   __ bind(notChar);
                                                    ;; 3175:   __ cmpl(flags, stos);
  0xee07f81d:   jne    0xee07f830                   ;; 3176:   __ jcc(Assembler::notEqual, notShort);
  0xee07f823:   pop    %eax                         ;; 3180:     __ pop(stos);
  0xee07f824:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07f825:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07f827:   mov    %ax,(%ecx,%ebx,1)            ;; 2795:   __ verify_oop(r);
                                                    ;; 3182:     __ access_store_at(T_SHORT, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07f82b:   jmp    0xee07f89b                   ;; 3186:     __ jmp(Done);
  0xee07f830:   cmp    $0x5,%eax                    ;; 3189:   __ bind(notShort);
                                                    ;; 3190:   __ cmpl(flags, ltos);
  0xee07f833:   jne    0xee07f84e                   ;; 3191:   __ jcc(Assembler::notEqual, notLong);
  0xee07f839:   pop    %eax                         ;; 3195:     __ pop(ltos);
  0xee07f83a:   pop    %edx
  0xee07f83b:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07f83c:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07f83e:   push   %edx                         ;; 2795:   __ verify_oop(r);
                                                    ;; 3198:     __ access_store_at(T_LONG, IN_HEAP | MO_RELAXED, field, noreg /* ltos*/, noreg, noreg, noreg);
  0xee07f83f:   push   %eax
  0xee07f840:   fildll (%esp)
  0xee07f843:   fistpll (%ecx,%ebx,1)
  0xee07f846:   add    $0x8,%esp
  0xee07f849:   jmp    0xee07f89b                   ;; 3204:     __ jmp(Done);
  0xee07f84e:   cmp    $0x6,%eax                    ;; 3207:   __ bind(notLong);
                                                    ;; 3208:   __ cmpl(flags, ftos);
  0xee07f851:   jne    0xee07f86c                   ;; 3209:   __ jcc(Assembler::notEqual, notFloat);
  0xee07f857:   vmovss (%esp),%xmm0                 ;; 3213:     __ pop(ftos);
  0xee07f85c:   add    $0x4,%esp
  0xee07f85f:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07f860:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07f862:   vmovss %xmm0,(%ecx,%ebx,1)          ;; 2795:   __ verify_oop(r);
                                                    ;; 3215:     __ access_store_at(T_FLOAT, IN_HEAP, field, noreg /* ftos */, noreg, noreg, noreg);
  0xee07f867:   jmp    0xee07f89b                   ;; 3219:     __ jmp(Done);
  0xee07f86c:   cmp    $0x7,%eax                    ;; 3222:   __ bind(notFloat);
                                                    ;; 3225:   __ cmpl(flags, dtos);
  0xee07f86f:   jne    0xee07f88a                   ;; 3226:   __ jcc(Assembler::notEqual, notDouble);
  0xee07f875:   vmovsd (%esp),%xmm0                 ;; 3231:     __ pop(dtos);
  0xee07f87a:   add    $0x8,%esp
  0xee07f87d:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07f87e:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07f880:   vmovsd %xmm0,(%ecx,%ebx,1)          ;; 2795:   __ verify_oop(r);
                                                    ;; 3234:     __ access_store_at(T_DOUBLE, IN_HEAP | MO_RELAXED, field, noreg /* dtos */, noreg, noreg, noreg);
  0xee07f885:   jmp    0xee07f89b                   ;; 3241:   __ jmp(Done);
  0xee07f88a:   push   $0xf7924fde                  ;; 3243:   __ bind(notDouble);
                                                    ;; 3244:   __ stop("Bad state");
  0xee07f88f:   call   0xee07f894
  0xee07f894:   pusha  
  0xee07f895:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07f89a:   hlt    
  0xee07f89b:   lock addl $0x0,-0x40(%esp)          ;; 3247:   __ bind(Done);
                                                    ;; 2645:   __ membar(order_constraint);
  0xee07f8a1:   jmp    0xee07fb12                   ;; 3075:   __ jmp(Done);
  0xee07f8a6:   shr    $0x1c,%eax                   ;; 3076:   __ bind(notVolatile);
                                                    ;; 3096:   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
  0xee07f8a9:   and    $0xf,%eax                    ;; 3099:   __ andl(flags, ConstantPoolCacheEntry::tos_state_mask);
  0xee07f8ac:   jne    0xee07f8be                   ;; 3100:   __ jcc(Assembler::notZero, notByte);
  0xee07f8b2:   pop    %eax                         ;; 3104:     __ pop(btos);
  0xee07f8b3:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07f8b4:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07f8b6:   mov    %al,(%ecx,%ebx,1)            ;; 2795:   __ verify_oop(r);
                                                    ;; 3106:     __ access_store_at(T_BYTE, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07f8b9:   jmp    0xee07fb12                   ;; 3110:     __ jmp(Done);
  0xee07f8be:   cmp    $0x1,%eax                    ;; 3113:   __ bind(notByte);
                                                    ;; 3114:   __ cmpl(flags, ztos);
  0xee07f8c1:   jne    0xee07f8d6                   ;; 3115:   __ jcc(Assembler::notEqual, notBool);
  0xee07f8c7:   pop    %eax                         ;; 3119:     __ pop(ztos);
  0xee07f8c8:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07f8c9:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07f8cb:   and    $0x1,%eax                    ;; 2795:   __ verify_oop(r);
                                                    ;; 3121:     __ access_store_at(T_BOOLEAN, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07f8ce:   mov    %al,(%ecx,%ebx,1)
  0xee07f8d1:   jmp    0xee07fb12                   ;; 3125:     __ jmp(Done);
  0xee07f8d6:   cmp    $0x8,%eax                    ;; 3128:   __ bind(notBool);
                                                    ;; 3129:   __ cmpl(flags, atos);
  0xee07f8d9:   jne    0xee07fa66                   ;; 3130:   __ jcc(Assembler::notEqual, notObj);
  0xee07f8df:   pop    %eax                         ;; 3134:     __ pop(atos);
  0xee07f8e0:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07f8e1:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07f8e3:   lea    (%ecx,%ebx,1),%edx           ;; 2795:   __ verify_oop(r);
                                                    ;;  155:   __ store_heap_oop(dst, val,
  0xee07f8e6:   push   %eax
  0xee07f8e7:   push   %edx
  0xee07f8e8:   push   %ecx
  0xee07f8e9:   call   0xf704a910 = Thread::current()
  0xee07f8ee:   pop    %ecx
  0xee07f8ef:   pop    %edx
  0xee07f8f0:   mov    %eax,%ecx
  0xee07f8f2:   pop    %eax
  0xee07f8f3:   mov    %esi,-0x20(%ebp)
  0xee07f8f6:   cmpb   $0x0,0x24(%ecx)
  0xee07f8fa:   je     0xee07f9cb
  0xee07f900:   mov    (%edx),%ebx
  0xee07f902:   cmp    $0x0,%ebx
  0xee07f905:   je     0xee07f9cb
  0xee07f90b:   mov    0x18(%ecx),%esi
  0xee07f90e:   cmp    $0x0,%esi
  0xee07f911:   je     0xee07f927
  0xee07f917:   sub    $0x4,%esi
  0xee07f91a:   mov    %esi,0x18(%ecx)
  0xee07f91d:   add    0x20(%ecx),%esi
  0xee07f920:   mov    %ebx,(%esi)
  0xee07f922:   jmp    0xee07f9cb
 ;; push_call_clobbered_registers start
  0xee07f927:   sub    $0x50,%esp
  0xee07f92a:   mov    %eax,(%esp)
  0xee07f92d:   mov    %ecx,0x4(%esp)
  0xee07f931:   mov    %edx,0x8(%esp)
  0xee07f935:   vmovsd %xmm0,0x10(%esp)
  0xee07f93b:   vmovsd %xmm1,0x18(%esp)
  0xee07f941:   vmovsd %xmm2,0x20(%esp)
  0xee07f947:   vmovsd %xmm3,0x28(%esp)
  0xee07f94d:   vmovsd %xmm4,0x30(%esp)
  0xee07f953:   vmovsd %xmm5,0x38(%esp)
  0xee07f959:   vmovsd %xmm6,0x40(%esp)
  0xee07f95f:   vmovsd %xmm7,0x48(%esp)
 ;; push_call_clobbered_registers end
  0xee07f965:   push   %ecx
  0xee07f966:   push   %ebx
  0xee07f967:   cmpl   $0x0,-0x8(%ebp)
  0xee07f96b:   je     0xee07f982
  0xee07f971:   push   $0xf785694c
  0xee07f976:   call   0xee07f97b
  0xee07f97b:   pusha  
  0xee07f97c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07f981:   hlt    
  0xee07f982:   call   0xf6a17f10 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0xee07f987:   add    $0x8,%esp
 ;; pop_call_clobbered_registers start
  0xee07f98a:   vmovsd 0x48(%esp),%xmm7
  0xee07f990:   vmovsd 0x40(%esp),%xmm6
  0xee07f996:   vmovsd 0x38(%esp),%xmm5
  0xee07f99c:   vmovsd 0x30(%esp),%xmm4
  0xee07f9a2:   vmovsd 0x28(%esp),%xmm3
  0xee07f9a8:   vmovsd 0x20(%esp),%xmm2
  0xee07f9ae:   vmovsd 0x18(%esp),%xmm1
  0xee07f9b4:   vmovsd 0x10(%esp),%xmm0
  0xee07f9ba:   mov    0x8(%esp),%edx
  0xee07f9be:   mov    0x4(%esp),%ecx
  0xee07f9c2:   mov    (%esp),%eax
  0xee07f9c5:   add    $0x50,%esp
  0xee07f9c8:   vzeroupper 
 ;; pop_call_clobbered_registers end
  0xee07f9cb:   mov    %eax,(%edx)
  0xee07f9cd:   mov    %edx,%esi
  0xee07f9cf:   xor    %eax,%esi
  0xee07f9d1:   shr    $0x14,%esi
  0xee07f9d4:   je     0xee07fa5e
  0xee07f9da:   cmp    $0x0,%eax
  0xee07f9dd:   je     0xee07fa5e
  0xee07f9e3:   mov    %edx,%esi
  0xee07f9e5:   shr    $0x9,%esi
  0xee07f9e8:   mov    $0xa5ecc000,%ebx
  0xee07f9ed:   add    %ebx,%esi
  0xee07f9ef:   cmpb   $0x2,(%esi)
  0xee07f9f2:   je     0xee07fa5e
  0xee07f9f8:   lock addl $0x0,-0x40(%esp)
  0xee07f9fe:   cmpb   $0x0,(%esi)
  0xee07fa01:   je     0xee07fa5e
  0xee07fa07:   movb   $0x0,(%esi)
  0xee07fa0a:   mov    0x28(%ecx),%ebx
  0xee07fa0d:   test   %ebx,%ebx
  0xee07fa0f:   je     0xee07fa25
  0xee07fa15:   sub    $0x4,%ebx
  0xee07fa18:   mov    %ebx,0x28(%ecx)
  0xee07fa1b:   add    0x30(%ecx),%ebx
  0xee07fa1e:   mov    %esi,(%ebx)
  0xee07fa20:   jmp    0xee07fa5e
  0xee07fa25:   sub    $0x10,%esp
  0xee07fa28:   mov    %ecx,(%esp)
  0xee07fa2b:   mov    %edx,0x4(%esp)
  0xee07fa2f:   push   %ecx
  0xee07fa30:   push   %esi
  0xee07fa31:   cmpl   $0x0,-0x8(%ebp)
  0xee07fa35:   je     0xee07fa4c
  0xee07fa3b:   push   $0xf785694c
  0xee07fa40:   call   0xee07fa45
  0xee07fa45:   pusha  
  0xee07fa46:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07fa4b:   hlt    
  0xee07fa4c:   call   0xf6a181d0 = G1BarrierSetRuntime::write_ref_field_post_entry(unsigned char volatile*, JavaThread*)
  0xee07fa51:   add    $0x8,%esp
  0xee07fa54:   mov    0x4(%esp),%edx
  0xee07fa58:   mov    (%esp),%ecx
  0xee07fa5b:   add    $0x10,%esp
  0xee07fa5e:   mov    -0x20(%ebp),%esi
  0xee07fa61:   jmp    0xee07fb12                   ;; 3141:     __ jmp(Done);
  0xee07fa66:   cmp    $0x4,%eax                    ;; 3144:   __ bind(notObj);
                                                    ;; 3145:   __ cmpl(flags, itos);
  0xee07fa69:   jne    0xee07fa7b                   ;; 3146:   __ jcc(Assembler::notEqual, notInt);
  0xee07fa6f:   pop    %eax                         ;; 3150:     __ pop(itos);
  0xee07fa70:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07fa71:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07fa73:   mov    %eax,(%ecx,%ebx,1)           ;; 2795:   __ verify_oop(r);
                                                    ;; 3152:     __ access_store_at(T_INT, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07fa76:   jmp    0xee07fb12                   ;; 3156:     __ jmp(Done);
  0xee07fa7b:   cmp    $0x2,%eax                    ;; 3159:   __ bind(notInt);
                                                    ;; 3160:   __ cmpl(flags, ctos);
  0xee07fa7e:   jne    0xee07fa91                   ;; 3161:   __ jcc(Assembler::notEqual, notChar);
  0xee07fa84:   pop    %eax                         ;; 3165:     __ pop(ctos);
  0xee07fa85:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07fa86:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07fa88:   mov    %ax,(%ecx,%ebx,1)            ;; 2795:   __ verify_oop(r);
                                                    ;; 3167:     __ access_store_at(T_CHAR, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07fa8c:   jmp    0xee07fb12                   ;; 3171:     __ jmp(Done);
  0xee07fa91:   cmp    $0x3,%eax                    ;; 3174:   __ bind(notChar);
                                                    ;; 3175:   __ cmpl(flags, stos);
  0xee07fa94:   jne    0xee07faa7                   ;; 3176:   __ jcc(Assembler::notEqual, notShort);
  0xee07fa9a:   pop    %eax                         ;; 3180:     __ pop(stos);
  0xee07fa9b:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07fa9c:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07fa9e:   mov    %ax,(%ecx,%ebx,1)            ;; 2795:   __ verify_oop(r);
                                                    ;; 3182:     __ access_store_at(T_SHORT, IN_HEAP, field, rax, noreg, noreg, noreg);
  0xee07faa2:   jmp    0xee07fb12                   ;; 3186:     __ jmp(Done);
  0xee07faa7:   cmp    $0x5,%eax                    ;; 3189:   __ bind(notShort);
                                                    ;; 3190:   __ cmpl(flags, ltos);
  0xee07faaa:   jne    0xee07fac5                   ;; 3191:   __ jcc(Assembler::notEqual, notLong);
  0xee07fab0:   pop    %eax                         ;; 3195:     __ pop(ltos);
  0xee07fab1:   pop    %edx
  0xee07fab2:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07fab3:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07fab5:   push   %edx                         ;; 2795:   __ verify_oop(r);
                                                    ;; 3198:     __ access_store_at(T_LONG, IN_HEAP | MO_RELAXED, field, noreg /* ltos*/, noreg, noreg, noreg);
  0xee07fab6:   push   %eax
  0xee07fab7:   fildll (%esp)
  0xee07faba:   fistpll (%ecx,%ebx,1)
  0xee07fabd:   add    $0x8,%esp
  0xee07fac0:   jmp    0xee07fb12                   ;; 3204:     __ jmp(Done);
  0xee07fac5:   cmp    $0x6,%eax                    ;; 3207:   __ bind(notLong);
                                                    ;; 3208:   __ cmpl(flags, ftos);
  0xee07fac8:   jne    0xee07fae3                   ;; 3209:   __ jcc(Assembler::notEqual, notFloat);
  0xee07face:   vmovss (%esp),%xmm0                 ;; 3213:     __ pop(ftos);
  0xee07fad3:   add    $0x4,%esp
  0xee07fad6:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07fad7:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07fad9:   vmovss %xmm0,(%ecx,%ebx,1)          ;; 2795:   __ verify_oop(r);
                                                    ;; 3215:     __ access_store_at(T_FLOAT, IN_HEAP, field, noreg /* ftos */, noreg, noreg, noreg);
  0xee07fade:   jmp    0xee07fb12                   ;; 3219:     __ jmp(Done);
  0xee07fae3:   cmp    $0x7,%eax                    ;; 3222:   __ bind(notFloat);
                                                    ;; 3225:   __ cmpl(flags, dtos);
  0xee07fae6:   jne    0xee07fb01                   ;; 3226:   __ jcc(Assembler::notEqual, notDouble);
  0xee07faec:   vmovsd (%esp),%xmm0                 ;; 3231:     __ pop(dtos);
  0xee07faf1:   add    $0x8,%esp
  0xee07faf4:   pop    %ecx                         ;; 2793:   __ pop_ptr(r);
  0xee07faf5:   cmp    (%ecx),%eax                  ;; 2794:   __ null_check(r);  // for field access must check obj.
  0xee07faf7:   vmovsd %xmm0,(%ecx,%ebx,1)          ;; 2795:   __ verify_oop(r);
                                                    ;; 3234:     __ access_store_at(T_DOUBLE, IN_HEAP | MO_RELAXED, field, noreg /* dtos */, noreg, noreg, noreg);
  0xee07fafc:   jmp    0xee07fb12                   ;; 3241:   __ jmp(Done);
  0xee07fb01:   push   $0xf7924fde                  ;; 3243:   __ bind(notDouble);
                                                    ;; 3244:   __ stop("Bad state");
  0xee07fb06:   call   0xee07fb0b
  0xee07fb0b:   pusha  
  0xee07fb0c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07fb11:   hlt    
  0xee07fb12:   movzbl 0x3(%esi),%ebx               ;; 3247:   __ bind(Done);
                                                    ;; 3080:   __ bind(Done);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07fb16:   add    $0x3,%esi
  0xee07fb19:   jmp    *-0x833caa0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
nofast_aload_0  236 nofast_aload_0  [0xee07fb40, 0xee07fb68]  40 bytes

--------------------------------------------------------------------------------
  0xee07fb40:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07fb43:   vmovss %xmm0,(%esp)
  0xee07fb48:   jmp    0xee07fb59                   ;; 1751:       __ jmpb(L);
  0xee07fb4a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07fb4d:   vmovsd %xmm0,(%esp)
  0xee07fb52:   jmp    0xee07fb59                   ;; 1754:       __ jmpb(L);
  0xee07fb54:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07fb55:   push   %eax
  0xee07fb56:   jmp    0xee07fb59                   ;; 1765:       __ jmpb(L);
  0xee07fb58:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07fb59:   mov    (%edi),%eax                  ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  904:   __ movptr(rax, aaddress(n));
  0xee07fb5b:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07fb5f:   inc    %esi
  0xee07fb60:   jmp    *-0x833cea0(,%ebx,4)
  0xee07fb67:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
nofast_iload  237 nofast_iload  [0xee07fb80, 0xee07fbb0]  48 bytes

--------------------------------------------------------------------------------
  0xee07fb80:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07fb83:   vmovss %xmm0,(%esp)
  0xee07fb88:   jmp    0xee07fb99                   ;; 1751:       __ jmpb(L);
  0xee07fb8a:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07fb8d:   vmovsd %xmm0,(%esp)
  0xee07fb92:   jmp    0xee07fb99                   ;; 1754:       __ jmpb(L);
  0xee07fb94:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07fb95:   push   %eax
  0xee07fb96:   jmp    0xee07fb99                   ;; 1765:       __ jmpb(L);
  0xee07fb98:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07fb99:   movzbl 0x1(%esi),%ebx               ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  613:   __ load_unsigned_byte(reg, at_bcp(offset));
  0xee07fb9d:   neg    %ebx                         ;;  614:   __ negptr(reg);
  0xee07fb9f:   mov    (%edi,%ebx,4),%eax           ;;  664:   __ movl(rax, iaddress(rbx));
  0xee07fba2:   movzbl 0x2(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07fba6:   add    $0x2,%esi
  0xee07fba9:   jmp    *-0x833dea0(,%ebx,4)
--------------------------------------------------------------------------------

----------------------------------------------------------------------
_shouldnotreachhere  238 _shouldnotreachhere  [0xee07fbe0, 0xee07fc18]  56 bytes

--------------------------------------------------------------------------------
  0xee07fbe0:   sub    $0x4,%esp                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;; 1749:   fep = __ pc();     // ftos entry point
                                                    ;; 1750:       __ push(ftos);
  0xee07fbe3:   vmovss %xmm0,(%esp)
  0xee07fbe8:   jmp    0xee07fbf9                   ;; 1751:       __ jmpb(L);
  0xee07fbea:   sub    $0x8,%esp                    ;; 1752:   dep = __ pc();     // dtos entry point
                                                    ;; 1753:       __ push(dtos);
  0xee07fbed:   vmovsd %xmm0,(%esp)
  0xee07fbf2:   jmp    0xee07fbf9                   ;; 1754:       __ jmpb(L);
  0xee07fbf4:   push   %edx                         ;; 1763:   lep = __ pc();     // ltos entry point
                                                    ;; 1764:       __ push_l();
  0xee07fbf5:   push   %eax
  0xee07fbf6:   jmp    0xee07fbf9                   ;; 1765:       __ jmpb(L);
  0xee07fbf8:   push   %eax                         ;; 1766:   aep = bep = cep = sep = iep = __ pc();      // [abcsi]tos entry point
                                                    ;; 1767:       __ push_i_or_ptr();
  0xee07fbf9:   push   $0xf7924f2c                  ;; 1768:   vep = __ pc();    // vtos entry point
                                                    ;; 1769:   __ bind(L);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  369:   __ verify_FPU(1, t->tos_in());
                                                    ;;  382:     __ dispatch_prolog(tos_out, step);
                                                    ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateTable_x86.cpp
                                                    ;;  254:   __ stop("shouldnotreachhere bytecode");
  0xee07fbfe:   call   0xee07fc03
  0xee07fc03:   pusha  
  0xee07fc04:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07fc09:   hlt    
  0xee07fc0a:   movzbl 0x1(%esi),%ebx               ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
                                                    ;;  394:     __ dispatch_epilog(tos_out, step);
  0xee07fc0e:   inc    %esi
  0xee07fc0f:   jmp    *-0x833caa0(,%ebx,4)
  0xee07fc16:   nop
  0xee07fc17:   nop
--------------------------------------------------------------------------------

----------------------------------------------------------------------
deoptimization entry points  [0xee07fc40, 0xee082014]  9172 bytes

--------------------------------------------------------------------------------
  0xee07fc40:   movl   $0x0,-0x8(%ebp)              ;;@FILE: /home/jatinbha/sandboxes/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                    ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee07fc47:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee07fc4a:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee07fc4d:   lea    0x0(%ebp,%edi,4),%edi
  0xee07fc51:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee07fc52:   push   %edx
  0xee07fc53:   push   %ecx
  0xee07fc54:   call   0xf704a910 = Thread::current()
  0xee07fc59:   pop    %ecx
  0xee07fc5a:   pop    %edx
  0xee07fc5b:   mov    %eax,%ecx
  0xee07fc5d:   pop    %eax
  0xee07fc5e:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee07fc62:   je     0xee07fd24                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee07fc68:   call   0xee07fc72                   ;;  294:     __ call_VM(noreg,
  0xee07fc6d:   jmp    0xee07fd13
  0xee07fc72:   lea    0x4(%esp),%eax
  0xee07fc76:   mov    %esi,-0x20(%ebp)
  0xee07fc79:   cmpl   $0x0,-0x8(%ebp)
  0xee07fc7d:   je     0xee07fc94
  0xee07fc83:   push   $0xf78569d8
  0xee07fc88:   call   0xee07fc8d
  0xee07fc8d:   pusha  
  0xee07fc8e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07fc93:   hlt    
  0xee07fc94:   push   %eax
  0xee07fc95:   push   %edx
  0xee07fc96:   push   %ecx
  0xee07fc97:   call   0xf704a910 = Thread::current()
  0xee07fc9c:   pop    %ecx
  0xee07fc9d:   pop    %edx
  0xee07fc9e:   mov    %eax,%edi
  0xee07fca0:   pop    %eax
  0xee07fca1:   push   %edi
  0xee07fca2:   vzeroupper 
  0xee07fca5:   mov    %ebp,0x230(%edi)
  0xee07fcab:   mov    %eax,0x228(%edi)
  0xee07fcb1:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee07fcb6:   add    $0x4,%esp
  0xee07fcb9:   push   %eax
  0xee07fcba:   push   %edx
  0xee07fcbb:   push   %ecx
  0xee07fcbc:   call   0xf704a910 = Thread::current()
  0xee07fcc1:   pop    %ecx
  0xee07fcc2:   pop    %edx
  0xee07fcc3:   cmp    %eax,%edi
  0xee07fcc5:   je     0xee07fcdc
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07fccb:   push   $0xf78b5a48
  0xee07fcd0:   call   0xee07fcd5
  0xee07fcd5:   pusha  
  0xee07fcd6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07fcdb:   hlt    
  0xee07fcdc:   pop    %eax
  0xee07fcdd:   movl   $0x0,0x228(%edi)
  0xee07fce7:   movl   $0x0,0x230(%edi)
  0xee07fcf1:   movl   $0x0,0x22c(%edi)
  0xee07fcfb:   vzeroupper 
  0xee07fcfe:   cmpl   $0x0,0x4(%edi)
  0xee07fd02:   jne    0xee05bbe0
  0xee07fd08:   mov    -0x20(%ebp),%esi
  0xee07fd0b:   mov    -0x1c(%ebp),%edi
  0xee07fd0e:   lea    0x0(%ebp,%edi,4),%edi
  0xee07fd12:   ret    
  0xee07fd13:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee07fd18:   call   0xee07fd1d
  0xee07fd1d:   pusha  
  0xee07fd1e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07fd23:   hlt    
  0xee07fd24:   movzbl (%esi),%ebx                  ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee07fd27:   jmp    *-0x833caa0(,%ebx,4)
  0xee07fd2e:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee07fd35:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee07fd38:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee07fd3b:   lea    0x0(%ebp,%edi,4),%edi
  0xee07fd3f:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee07fd40:   push   %edx
  0xee07fd41:   push   %ecx
  0xee07fd42:   call   0xf704a910 = Thread::current()
  0xee07fd47:   pop    %ecx
  0xee07fd48:   pop    %edx
  0xee07fd49:   mov    %eax,%ecx
  0xee07fd4b:   pop    %eax
  0xee07fd4c:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee07fd50:   je     0xee07fe12                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee07fd56:   call   0xee07fd60                   ;;  294:     __ call_VM(noreg,
  0xee07fd5b:   jmp    0xee07fe01
  0xee07fd60:   lea    0x4(%esp),%eax
  0xee07fd64:   mov    %esi,-0x20(%ebp)
  0xee07fd67:   cmpl   $0x0,-0x8(%ebp)
  0xee07fd6b:   je     0xee07fd82
  0xee07fd71:   push   $0xf78569d8
  0xee07fd76:   call   0xee07fd7b
  0xee07fd7b:   pusha  
  0xee07fd7c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07fd81:   hlt    
  0xee07fd82:   push   %eax
  0xee07fd83:   push   %edx
  0xee07fd84:   push   %ecx
  0xee07fd85:   call   0xf704a910 = Thread::current()
  0xee07fd8a:   pop    %ecx
  0xee07fd8b:   pop    %edx
  0xee07fd8c:   mov    %eax,%edi
  0xee07fd8e:   pop    %eax
  0xee07fd8f:   push   %edi
  0xee07fd90:   vzeroupper 
  0xee07fd93:   mov    %ebp,0x230(%edi)
  0xee07fd99:   mov    %eax,0x228(%edi)
  0xee07fd9f:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee07fda4:   add    $0x4,%esp
  0xee07fda7:   push   %eax
  0xee07fda8:   push   %edx
  0xee07fda9:   push   %ecx
  0xee07fdaa:   call   0xf704a910 = Thread::current()
  0xee07fdaf:   pop    %ecx
  0xee07fdb0:   pop    %edx
  0xee07fdb1:   cmp    %eax,%edi
  0xee07fdb3:   je     0xee07fdca
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07fdb9:   push   $0xf78b5a48
  0xee07fdbe:   call   0xee07fdc3
  0xee07fdc3:   pusha  
  0xee07fdc4:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07fdc9:   hlt    
  0xee07fdca:   pop    %eax
  0xee07fdcb:   movl   $0x0,0x228(%edi)
  0xee07fdd5:   movl   $0x0,0x230(%edi)
  0xee07fddf:   movl   $0x0,0x22c(%edi)
  0xee07fde9:   vzeroupper 
  0xee07fdec:   cmpl   $0x0,0x4(%edi)
  0xee07fdf0:   jne    0xee05bbe0
  0xee07fdf6:   mov    -0x20(%ebp),%esi
  0xee07fdf9:   mov    -0x1c(%ebp),%edi
  0xee07fdfc:   lea    0x0(%ebp,%edi,4),%edi
  0xee07fe00:   ret    
  0xee07fe01:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee07fe06:   call   0xee07fe0b
  0xee07fe0b:   pusha  
  0xee07fe0c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07fe11:   hlt    
  0xee07fe12:   movzbl 0x1(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee07fe16:   inc    %esi
  0xee07fe17:   jmp    *-0x833caa0(,%ebx,4)
  0xee07fe1e:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  253:     __ MacroAssembler::verify_FPU(UseSSE >= 2 ? 0 : 1, "generate_deopt_entry_for in interpreter");
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee07fe25:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee07fe28:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee07fe2b:   lea    0x0(%ebp,%edi,4),%edi
  0xee07fe2f:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee07fe30:   push   %edx
  0xee07fe31:   push   %ecx
  0xee07fe32:   call   0xf704a910 = Thread::current()
  0xee07fe37:   pop    %ecx
  0xee07fe38:   pop    %edx
  0xee07fe39:   mov    %eax,%ecx
  0xee07fe3b:   pop    %eax
  0xee07fe3c:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee07fe40:   je     0xee07ff02                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee07fe46:   call   0xee07fe50                   ;;  294:     __ call_VM(noreg,
  0xee07fe4b:   jmp    0xee07fef1
  0xee07fe50:   lea    0x4(%esp),%eax
  0xee07fe54:   mov    %esi,-0x20(%ebp)
  0xee07fe57:   cmpl   $0x0,-0x8(%ebp)
  0xee07fe5b:   je     0xee07fe72
  0xee07fe61:   push   $0xf78569d8
  0xee07fe66:   call   0xee07fe6b
  0xee07fe6b:   pusha  
  0xee07fe6c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07fe71:   hlt    
  0xee07fe72:   push   %eax
  0xee07fe73:   push   %edx
  0xee07fe74:   push   %ecx
  0xee07fe75:   call   0xf704a910 = Thread::current()
  0xee07fe7a:   pop    %ecx
  0xee07fe7b:   pop    %edx
  0xee07fe7c:   mov    %eax,%edi
  0xee07fe7e:   pop    %eax
  0xee07fe7f:   push   %edi
  0xee07fe80:   vzeroupper 
  0xee07fe83:   mov    %ebp,0x230(%edi)
  0xee07fe89:   mov    %eax,0x228(%edi)
  0xee07fe8f:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee07fe94:   add    $0x4,%esp
  0xee07fe97:   push   %eax
  0xee07fe98:   push   %edx
  0xee07fe99:   push   %ecx
  0xee07fe9a:   call   0xf704a910 = Thread::current()
  0xee07fe9f:   pop    %ecx
  0xee07fea0:   pop    %edx
  0xee07fea1:   cmp    %eax,%edi
  0xee07fea3:   je     0xee07feba
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07fea9:   push   $0xf78b5a48
  0xee07feae:   call   0xee07feb3
  0xee07feb3:   pusha  
  0xee07feb4:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07feb9:   hlt    
  0xee07feba:   pop    %eax
  0xee07febb:   movl   $0x0,0x228(%edi)
  0xee07fec5:   movl   $0x0,0x230(%edi)
  0xee07fecf:   movl   $0x0,0x22c(%edi)
  0xee07fed9:   vzeroupper 
  0xee07fedc:   cmpl   $0x0,0x4(%edi)
  0xee07fee0:   jne    0xee05bbe0
  0xee07fee6:   mov    -0x20(%ebp),%esi
  0xee07fee9:   mov    -0x1c(%ebp),%edi
  0xee07feec:   lea    0x0(%ebp,%edi,4),%edi
  0xee07fef0:   ret    
  0xee07fef1:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee07fef6:   call   0xee07fefb
  0xee07fefb:   pusha  
  0xee07fefc:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07ff01:   hlt    
  0xee07ff02:   movzbl 0x1(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee07ff06:   inc    %esi
  0xee07ff07:   jmp    *-0x833d2a0(,%ebx,4)
  0xee07ff0e:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  251:     __ MacroAssembler::verify_FPU(UseSSE >= 1 ? 0 : 1, "generate_deopt_entry_for in interpreter");
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee07ff15:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee07ff18:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee07ff1b:   lea    0x0(%ebp,%edi,4),%edi
  0xee07ff1f:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee07ff20:   push   %edx
  0xee07ff21:   push   %ecx
  0xee07ff22:   call   0xf704a910 = Thread::current()
  0xee07ff27:   pop    %ecx
  0xee07ff28:   pop    %edx
  0xee07ff29:   mov    %eax,%ecx
  0xee07ff2b:   pop    %eax
  0xee07ff2c:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee07ff30:   je     0xee07fff2                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee07ff36:   call   0xee07ff40                   ;;  294:     __ call_VM(noreg,
  0xee07ff3b:   jmp    0xee07ffe1
  0xee07ff40:   lea    0x4(%esp),%eax
  0xee07ff44:   mov    %esi,-0x20(%ebp)
  0xee07ff47:   cmpl   $0x0,-0x8(%ebp)
  0xee07ff4b:   je     0xee07ff62
  0xee07ff51:   push   $0xf78569d8
  0xee07ff56:   call   0xee07ff5b
  0xee07ff5b:   pusha  
  0xee07ff5c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07ff61:   hlt    
  0xee07ff62:   push   %eax
  0xee07ff63:   push   %edx
  0xee07ff64:   push   %ecx
  0xee07ff65:   call   0xf704a910 = Thread::current()
  0xee07ff6a:   pop    %ecx
  0xee07ff6b:   pop    %edx
  0xee07ff6c:   mov    %eax,%edi
  0xee07ff6e:   pop    %eax
  0xee07ff6f:   push   %edi
  0xee07ff70:   vzeroupper 
  0xee07ff73:   mov    %ebp,0x230(%edi)
  0xee07ff79:   mov    %eax,0x228(%edi)
  0xee07ff7f:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee07ff84:   add    $0x4,%esp
  0xee07ff87:   push   %eax
  0xee07ff88:   push   %edx
  0xee07ff89:   push   %ecx
  0xee07ff8a:   call   0xf704a910 = Thread::current()
  0xee07ff8f:   pop    %ecx
  0xee07ff90:   pop    %edx
  0xee07ff91:   cmp    %eax,%edi
  0xee07ff93:   je     0xee07ffaa
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee07ff99:   push   $0xf78b5a48
  0xee07ff9e:   call   0xee07ffa3
  0xee07ffa3:   pusha  
  0xee07ffa4:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07ffa9:   hlt    
  0xee07ffaa:   pop    %eax
  0xee07ffab:   movl   $0x0,0x228(%edi)
  0xee07ffb5:   movl   $0x0,0x230(%edi)
  0xee07ffbf:   movl   $0x0,0x22c(%edi)
  0xee07ffc9:   vzeroupper 
  0xee07ffcc:   cmpl   $0x0,0x4(%edi)
  0xee07ffd0:   jne    0xee05bbe0
  0xee07ffd6:   mov    -0x20(%ebp),%esi
  0xee07ffd9:   mov    -0x1c(%ebp),%edi
  0xee07ffdc:   lea    0x0(%ebp,%edi,4),%edi
  0xee07ffe0:   ret    
  0xee07ffe1:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee07ffe6:   call   0xee07ffeb
  0xee07ffeb:   pusha  
  0xee07ffec:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee07fff1:   hlt    
  0xee07fff2:   movzbl 0x1(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee07fff6:   inc    %esi
  0xee07fff7:   jmp    *-0x833d6a0(,%ebx,4)
  0xee07fffe:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee080005:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee080008:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee08000b:   lea    0x0(%ebp,%edi,4),%edi
  0xee08000f:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee080010:   push   %edx
  0xee080011:   push   %ecx
  0xee080012:   call   0xf704a910 = Thread::current()
  0xee080017:   pop    %ecx
  0xee080018:   pop    %edx
  0xee080019:   mov    %eax,%ecx
  0xee08001b:   pop    %eax
  0xee08001c:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee080020:   je     0xee0800e2                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee080026:   call   0xee080030                   ;;  294:     __ call_VM(noreg,
  0xee08002b:   jmp    0xee0800d1
  0xee080030:   lea    0x4(%esp),%eax
  0xee080034:   mov    %esi,-0x20(%ebp)
  0xee080037:   cmpl   $0x0,-0x8(%ebp)
  0xee08003b:   je     0xee080052
  0xee080041:   push   $0xf78569d8
  0xee080046:   call   0xee08004b
  0xee08004b:   pusha  
  0xee08004c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080051:   hlt    
  0xee080052:   push   %eax
  0xee080053:   push   %edx
  0xee080054:   push   %ecx
  0xee080055:   call   0xf704a910 = Thread::current()
  0xee08005a:   pop    %ecx
  0xee08005b:   pop    %edx
  0xee08005c:   mov    %eax,%edi
  0xee08005e:   pop    %eax
  0xee08005f:   push   %edi
  0xee080060:   vzeroupper 
  0xee080063:   mov    %ebp,0x230(%edi)
  0xee080069:   mov    %eax,0x228(%edi)
  0xee08006f:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee080074:   add    $0x4,%esp
  0xee080077:   push   %eax
  0xee080078:   push   %edx
  0xee080079:   push   %ecx
  0xee08007a:   call   0xf704a910 = Thread::current()
  0xee08007f:   pop    %ecx
  0xee080080:   pop    %edx
  0xee080081:   cmp    %eax,%edi
  0xee080083:   je     0xee08009a
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee080089:   push   $0xf78b5a48
  0xee08008e:   call   0xee080093
  0xee080093:   pusha  
  0xee080094:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080099:   hlt    
  0xee08009a:   pop    %eax
  0xee08009b:   movl   $0x0,0x228(%edi)
  0xee0800a5:   movl   $0x0,0x230(%edi)
  0xee0800af:   movl   $0x0,0x22c(%edi)
  0xee0800b9:   vzeroupper 
  0xee0800bc:   cmpl   $0x0,0x4(%edi)
  0xee0800c0:   jne    0xee05bbe0
  0xee0800c6:   mov    -0x20(%ebp),%esi
  0xee0800c9:   mov    -0x1c(%ebp),%edi
  0xee0800cc:   lea    0x0(%ebp,%edi,4),%edi
  0xee0800d0:   ret    
  0xee0800d1:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee0800d6:   call   0xee0800db
  0xee0800db:   pusha  
  0xee0800dc:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0800e1:   hlt    
  0xee0800e2:   movzbl 0x1(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee0800e6:   inc    %esi
  0xee0800e7:   jmp    *-0x833daa0(,%ebx,4)
  0xee0800ee:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee0800f5:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee0800f8:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee0800fb:   lea    0x0(%ebp,%edi,4),%edi
  0xee0800ff:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee080100:   push   %edx
  0xee080101:   push   %ecx
  0xee080102:   call   0xf704a910 = Thread::current()
  0xee080107:   pop    %ecx
  0xee080108:   pop    %edx
  0xee080109:   mov    %eax,%ecx
  0xee08010b:   pop    %eax
  0xee08010c:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee080110:   je     0xee0801d2                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee080116:   call   0xee080120                   ;;  294:     __ call_VM(noreg,
  0xee08011b:   jmp    0xee0801c1
  0xee080120:   lea    0x4(%esp),%eax
  0xee080124:   mov    %esi,-0x20(%ebp)
  0xee080127:   cmpl   $0x0,-0x8(%ebp)
  0xee08012b:   je     0xee080142
  0xee080131:   push   $0xf78569d8
  0xee080136:   call   0xee08013b
  0xee08013b:   pusha  
  0xee08013c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080141:   hlt    
  0xee080142:   push   %eax
  0xee080143:   push   %edx
  0xee080144:   push   %ecx
  0xee080145:   call   0xf704a910 = Thread::current()
  0xee08014a:   pop    %ecx
  0xee08014b:   pop    %edx
  0xee08014c:   mov    %eax,%edi
  0xee08014e:   pop    %eax
  0xee08014f:   push   %edi
  0xee080150:   vzeroupper 
  0xee080153:   mov    %ebp,0x230(%edi)
  0xee080159:   mov    %eax,0x228(%edi)
  0xee08015f:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee080164:   add    $0x4,%esp
  0xee080167:   push   %eax
  0xee080168:   push   %edx
  0xee080169:   push   %ecx
  0xee08016a:   call   0xf704a910 = Thread::current()
  0xee08016f:   pop    %ecx
  0xee080170:   pop    %edx
  0xee080171:   cmp    %eax,%edi
  0xee080173:   je     0xee08018a
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee080179:   push   $0xf78b5a48
  0xee08017e:   call   0xee080183
  0xee080183:   pusha  
  0xee080184:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080189:   hlt    
  0xee08018a:   pop    %eax
  0xee08018b:   movl   $0x0,0x228(%edi)
  0xee080195:   movl   $0x0,0x230(%edi)
  0xee08019f:   movl   $0x0,0x22c(%edi)
  0xee0801a9:   vzeroupper 
  0xee0801ac:   cmpl   $0x0,0x4(%edi)
  0xee0801b0:   jne    0xee05bbe0
  0xee0801b6:   mov    -0x20(%ebp),%esi
  0xee0801b9:   mov    -0x1c(%ebp),%edi
  0xee0801bc:   lea    0x0(%ebp,%edi,4),%edi
  0xee0801c0:   ret    
  0xee0801c1:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee0801c6:   call   0xee0801cb
  0xee0801cb:   pusha  
  0xee0801cc:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0801d1:   hlt    
  0xee0801d2:   movzbl 0x1(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee0801d6:   inc    %esi
  0xee0801d7:   jmp    *-0x833dea0(,%ebx,4)
  0xee0801de:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee0801e5:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee0801e8:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee0801eb:   lea    0x0(%ebp,%edi,4),%edi
  0xee0801ef:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee0801f0:   push   %edx
  0xee0801f1:   push   %ecx
  0xee0801f2:   call   0xf704a910 = Thread::current()
  0xee0801f7:   pop    %ecx
  0xee0801f8:   pop    %edx
  0xee0801f9:   mov    %eax,%ecx
  0xee0801fb:   pop    %eax
  0xee0801fc:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee080200:   je     0xee0802c2                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee080206:   call   0xee080210                   ;;  294:     __ call_VM(noreg,
  0xee08020b:   jmp    0xee0802b1
  0xee080210:   lea    0x4(%esp),%eax
  0xee080214:   mov    %esi,-0x20(%ebp)
  0xee080217:   cmpl   $0x0,-0x8(%ebp)
  0xee08021b:   je     0xee080232
  0xee080221:   push   $0xf78569d8
  0xee080226:   call   0xee08022b
  0xee08022b:   pusha  
  0xee08022c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080231:   hlt    
  0xee080232:   push   %eax
  0xee080233:   push   %edx
  0xee080234:   push   %ecx
  0xee080235:   call   0xf704a910 = Thread::current()
  0xee08023a:   pop    %ecx
  0xee08023b:   pop    %edx
  0xee08023c:   mov    %eax,%edi
  0xee08023e:   pop    %eax
  0xee08023f:   push   %edi
  0xee080240:   vzeroupper 
  0xee080243:   mov    %ebp,0x230(%edi)
  0xee080249:   mov    %eax,0x228(%edi)
  0xee08024f:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee080254:   add    $0x4,%esp
  0xee080257:   push   %eax
  0xee080258:   push   %edx
  0xee080259:   push   %ecx
  0xee08025a:   call   0xf704a910 = Thread::current()
  0xee08025f:   pop    %ecx
  0xee080260:   pop    %edx
  0xee080261:   cmp    %eax,%edi
  0xee080263:   je     0xee08027a
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee080269:   push   $0xf78b5a48
  0xee08026e:   call   0xee080273
  0xee080273:   pusha  
  0xee080274:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080279:   hlt    
  0xee08027a:   pop    %eax
  0xee08027b:   movl   $0x0,0x228(%edi)
  0xee080285:   movl   $0x0,0x230(%edi)
  0xee08028f:   movl   $0x0,0x22c(%edi)
  0xee080299:   vzeroupper 
  0xee08029c:   cmpl   $0x0,0x4(%edi)
  0xee0802a0:   jne    0xee05bbe0
  0xee0802a6:   mov    -0x20(%ebp),%esi
  0xee0802a9:   mov    -0x1c(%ebp),%edi
  0xee0802ac:   lea    0x0(%ebp,%edi,4),%edi
  0xee0802b0:   ret    
  0xee0802b1:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee0802b6:   call   0xee0802bb
  0xee0802bb:   pusha  
  0xee0802bc:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0802c1:   hlt    
  0xee0802c2:   movzbl 0x1(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee0802c6:   inc    %esi
  0xee0802c7:   jmp    *-0x833cea0(,%ebx,4)
  0xee0802ce:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee0802d5:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee0802d8:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee0802db:   lea    0x0(%ebp,%edi,4),%edi
  0xee0802df:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee0802e0:   push   %edx
  0xee0802e1:   push   %ecx
  0xee0802e2:   call   0xf704a910 = Thread::current()
  0xee0802e7:   pop    %ecx
  0xee0802e8:   pop    %edx
  0xee0802e9:   mov    %eax,%ecx
  0xee0802eb:   pop    %eax
  0xee0802ec:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee0802f0:   je     0xee0803b2                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee0802f6:   call   0xee080300                   ;;  294:     __ call_VM(noreg,
  0xee0802fb:   jmp    0xee0803a1
  0xee080300:   lea    0x4(%esp),%eax
  0xee080304:   mov    %esi,-0x20(%ebp)
  0xee080307:   cmpl   $0x0,-0x8(%ebp)
  0xee08030b:   je     0xee080322
  0xee080311:   push   $0xf78569d8
  0xee080316:   call   0xee08031b
  0xee08031b:   pusha  
  0xee08031c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080321:   hlt    
  0xee080322:   push   %eax
  0xee080323:   push   %edx
  0xee080324:   push   %ecx
  0xee080325:   call   0xf704a910 = Thread::current()
  0xee08032a:   pop    %ecx
  0xee08032b:   pop    %edx
  0xee08032c:   mov    %eax,%edi
  0xee08032e:   pop    %eax
  0xee08032f:   push   %edi
  0xee080330:   vzeroupper 
  0xee080333:   mov    %ebp,0x230(%edi)
  0xee080339:   mov    %eax,0x228(%edi)
  0xee08033f:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee080344:   add    $0x4,%esp
  0xee080347:   push   %eax
  0xee080348:   push   %edx
  0xee080349:   push   %ecx
  0xee08034a:   call   0xf704a910 = Thread::current()
  0xee08034f:   pop    %ecx
  0xee080350:   pop    %edx
  0xee080351:   cmp    %eax,%edi
  0xee080353:   je     0xee08036a
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee080359:   push   $0xf78b5a48
  0xee08035e:   call   0xee080363
  0xee080363:   pusha  
  0xee080364:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080369:   hlt    
  0xee08036a:   pop    %eax
  0xee08036b:   movl   $0x0,0x228(%edi)
  0xee080375:   movl   $0x0,0x230(%edi)
  0xee08037f:   movl   $0x0,0x22c(%edi)
  0xee080389:   vzeroupper 
  0xee08038c:   cmpl   $0x0,0x4(%edi)
  0xee080390:   jne    0xee05bbe0
  0xee080396:   mov    -0x20(%ebp),%esi
  0xee080399:   mov    -0x1c(%ebp),%edi
  0xee08039c:   lea    0x0(%ebp,%edi,4),%edi
  0xee0803a0:   ret    
  0xee0803a1:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee0803a6:   call   0xee0803ab
  0xee0803ab:   pusha  
  0xee0803ac:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0803b1:   hlt    
  0xee0803b2:   movzbl 0x2(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee0803b6:   add    $0x2,%esi
  0xee0803b9:   jmp    *-0x833caa0(,%ebx,4)
  0xee0803c0:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  253:     __ MacroAssembler::verify_FPU(UseSSE >= 2 ? 0 : 1, "generate_deopt_entry_for in interpreter");
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee0803c7:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee0803ca:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee0803cd:   lea    0x0(%ebp,%edi,4),%edi
  0xee0803d1:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee0803d2:   push   %edx
  0xee0803d3:   push   %ecx
  0xee0803d4:   call   0xf704a910 = Thread::current()
  0xee0803d9:   pop    %ecx
  0xee0803da:   pop    %edx
  0xee0803db:   mov    %eax,%ecx
  0xee0803dd:   pop    %eax
  0xee0803de:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee0803e2:   je     0xee0804a4                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee0803e8:   call   0xee0803f2                   ;;  294:     __ call_VM(noreg,
  0xee0803ed:   jmp    0xee080493
  0xee0803f2:   lea    0x4(%esp),%eax
  0xee0803f6:   mov    %esi,-0x20(%ebp)
  0xee0803f9:   cmpl   $0x0,-0x8(%ebp)
  0xee0803fd:   je     0xee080414
  0xee080403:   push   $0xf78569d8
  0xee080408:   call   0xee08040d
  0xee08040d:   pusha  
  0xee08040e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080413:   hlt    
  0xee080414:   push   %eax
  0xee080415:   push   %edx
  0xee080416:   push   %ecx
  0xee080417:   call   0xf704a910 = Thread::current()
  0xee08041c:   pop    %ecx
  0xee08041d:   pop    %edx
  0xee08041e:   mov    %eax,%edi
  0xee080420:   pop    %eax
  0xee080421:   push   %edi
  0xee080422:   vzeroupper 
  0xee080425:   mov    %ebp,0x230(%edi)
  0xee08042b:   mov    %eax,0x228(%edi)
  0xee080431:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee080436:   add    $0x4,%esp
  0xee080439:   push   %eax
  0xee08043a:   push   %edx
  0xee08043b:   push   %ecx
  0xee08043c:   call   0xf704a910 = Thread::current()
  0xee080441:   pop    %ecx
  0xee080442:   pop    %edx
  0xee080443:   cmp    %eax,%edi
  0xee080445:   je     0xee08045c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee08044b:   push   $0xf78b5a48
  0xee080450:   call   0xee080455
  0xee080455:   pusha  
  0xee080456:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee08045b:   hlt    
  0xee08045c:   pop    %eax
  0xee08045d:   movl   $0x0,0x228(%edi)
  0xee080467:   movl   $0x0,0x230(%edi)
  0xee080471:   movl   $0x0,0x22c(%edi)
  0xee08047b:   vzeroupper 
  0xee08047e:   cmpl   $0x0,0x4(%edi)
  0xee080482:   jne    0xee05bbe0
  0xee080488:   mov    -0x20(%ebp),%esi
  0xee08048b:   mov    -0x1c(%ebp),%edi
  0xee08048e:   lea    0x0(%ebp,%edi,4),%edi
  0xee080492:   ret    
  0xee080493:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee080498:   call   0xee08049d
  0xee08049d:   pusha  
  0xee08049e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0804a3:   hlt    
  0xee0804a4:   movzbl 0x2(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee0804a8:   add    $0x2,%esi
  0xee0804ab:   jmp    *-0x833d2a0(,%ebx,4)
  0xee0804b2:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  251:     __ MacroAssembler::verify_FPU(UseSSE >= 1 ? 0 : 1, "generate_deopt_entry_for in interpreter");
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee0804b9:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee0804bc:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee0804bf:   lea    0x0(%ebp,%edi,4),%edi
  0xee0804c3:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee0804c4:   push   %edx
  0xee0804c5:   push   %ecx
  0xee0804c6:   call   0xf704a910 = Thread::current()
  0xee0804cb:   pop    %ecx
  0xee0804cc:   pop    %edx
  0xee0804cd:   mov    %eax,%ecx
  0xee0804cf:   pop    %eax
  0xee0804d0:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee0804d4:   je     0xee080596                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee0804da:   call   0xee0804e4                   ;;  294:     __ call_VM(noreg,
  0xee0804df:   jmp    0xee080585
  0xee0804e4:   lea    0x4(%esp),%eax
  0xee0804e8:   mov    %esi,-0x20(%ebp)
  0xee0804eb:   cmpl   $0x0,-0x8(%ebp)
  0xee0804ef:   je     0xee080506
  0xee0804f5:   push   $0xf78569d8
  0xee0804fa:   call   0xee0804ff
  0xee0804ff:   pusha  
  0xee080500:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080505:   hlt    
  0xee080506:   push   %eax
  0xee080507:   push   %edx
  0xee080508:   push   %ecx
  0xee080509:   call   0xf704a910 = Thread::current()
  0xee08050e:   pop    %ecx
  0xee08050f:   pop    %edx
  0xee080510:   mov    %eax,%edi
  0xee080512:   pop    %eax
  0xee080513:   push   %edi
  0xee080514:   vzeroupper 
  0xee080517:   mov    %ebp,0x230(%edi)
  0xee08051d:   mov    %eax,0x228(%edi)
  0xee080523:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee080528:   add    $0x4,%esp
  0xee08052b:   push   %eax
  0xee08052c:   push   %edx
  0xee08052d:   push   %ecx
  0xee08052e:   call   0xf704a910 = Thread::current()
  0xee080533:   pop    %ecx
  0xee080534:   pop    %edx
  0xee080535:   cmp    %eax,%edi
  0xee080537:   je     0xee08054e
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee08053d:   push   $0xf78b5a48
  0xee080542:   call   0xee080547
  0xee080547:   pusha  
  0xee080548:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee08054d:   hlt    
  0xee08054e:   pop    %eax
  0xee08054f:   movl   $0x0,0x228(%edi)
  0xee080559:   movl   $0x0,0x230(%edi)
  0xee080563:   movl   $0x0,0x22c(%edi)
  0xee08056d:   vzeroupper 
  0xee080570:   cmpl   $0x0,0x4(%edi)
  0xee080574:   jne    0xee05bbe0
  0xee08057a:   mov    -0x20(%ebp),%esi
  0xee08057d:   mov    -0x1c(%ebp),%edi
  0xee080580:   lea    0x0(%ebp,%edi,4),%edi
  0xee080584:   ret    
  0xee080585:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee08058a:   call   0xee08058f
  0xee08058f:   pusha  
  0xee080590:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080595:   hlt    
  0xee080596:   movzbl 0x2(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee08059a:   add    $0x2,%esi
  0xee08059d:   jmp    *-0x833d6a0(,%ebx,4)
  0xee0805a4:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee0805ab:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee0805ae:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee0805b1:   lea    0x0(%ebp,%edi,4),%edi
  0xee0805b5:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee0805b6:   push   %edx
  0xee0805b7:   push   %ecx
  0xee0805b8:   call   0xf704a910 = Thread::current()
  0xee0805bd:   pop    %ecx
  0xee0805be:   pop    %edx
  0xee0805bf:   mov    %eax,%ecx
  0xee0805c1:   pop    %eax
  0xee0805c2:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee0805c6:   je     0xee080688                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee0805cc:   call   0xee0805d6                   ;;  294:     __ call_VM(noreg,
  0xee0805d1:   jmp    0xee080677
  0xee0805d6:   lea    0x4(%esp),%eax
  0xee0805da:   mov    %esi,-0x20(%ebp)
  0xee0805dd:   cmpl   $0x0,-0x8(%ebp)
  0xee0805e1:   je     0xee0805f8
  0xee0805e7:   push   $0xf78569d8
  0xee0805ec:   call   0xee0805f1
  0xee0805f1:   pusha  
  0xee0805f2:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0805f7:   hlt    
  0xee0805f8:   push   %eax
  0xee0805f9:   push   %edx
  0xee0805fa:   push   %ecx
  0xee0805fb:   call   0xf704a910 = Thread::current()
  0xee080600:   pop    %ecx
  0xee080601:   pop    %edx
  0xee080602:   mov    %eax,%edi
  0xee080604:   pop    %eax
  0xee080605:   push   %edi
  0xee080606:   vzeroupper 
  0xee080609:   mov    %ebp,0x230(%edi)
  0xee08060f:   mov    %eax,0x228(%edi)
  0xee080615:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee08061a:   add    $0x4,%esp
  0xee08061d:   push   %eax
  0xee08061e:   push   %edx
  0xee08061f:   push   %ecx
  0xee080620:   call   0xf704a910 = Thread::current()
  0xee080625:   pop    %ecx
  0xee080626:   pop    %edx
  0xee080627:   cmp    %eax,%edi
  0xee080629:   je     0xee080640
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee08062f:   push   $0xf78b5a48
  0xee080634:   call   0xee080639
  0xee080639:   pusha  
  0xee08063a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee08063f:   hlt    
  0xee080640:   pop    %eax
  0xee080641:   movl   $0x0,0x228(%edi)
  0xee08064b:   movl   $0x0,0x230(%edi)
  0xee080655:   movl   $0x0,0x22c(%edi)
  0xee08065f:   vzeroupper 
  0xee080662:   cmpl   $0x0,0x4(%edi)
  0xee080666:   jne    0xee05bbe0
  0xee08066c:   mov    -0x20(%ebp),%esi
  0xee08066f:   mov    -0x1c(%ebp),%edi
  0xee080672:   lea    0x0(%ebp,%edi,4),%edi
  0xee080676:   ret    
  0xee080677:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee08067c:   call   0xee080681
  0xee080681:   pusha  
  0xee080682:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080687:   hlt    
  0xee080688:   movzbl 0x2(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee08068c:   add    $0x2,%esi
  0xee08068f:   jmp    *-0x833daa0(,%ebx,4)
  0xee080696:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee08069d:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee0806a0:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee0806a3:   lea    0x0(%ebp,%edi,4),%edi
  0xee0806a7:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee0806a8:   push   %edx
  0xee0806a9:   push   %ecx
  0xee0806aa:   call   0xf704a910 = Thread::current()
  0xee0806af:   pop    %ecx
  0xee0806b0:   pop    %edx
  0xee0806b1:   mov    %eax,%ecx
  0xee0806b3:   pop    %eax
  0xee0806b4:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee0806b8:   je     0xee08077a                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee0806be:   call   0xee0806c8                   ;;  294:     __ call_VM(noreg,
  0xee0806c3:   jmp    0xee080769
  0xee0806c8:   lea    0x4(%esp),%eax
  0xee0806cc:   mov    %esi,-0x20(%ebp)
  0xee0806cf:   cmpl   $0x0,-0x8(%ebp)
  0xee0806d3:   je     0xee0806ea
  0xee0806d9:   push   $0xf78569d8
  0xee0806de:   call   0xee0806e3
  0xee0806e3:   pusha  
  0xee0806e4:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0806e9:   hlt    
  0xee0806ea:   push   %eax
  0xee0806eb:   push   %edx
  0xee0806ec:   push   %ecx
  0xee0806ed:   call   0xf704a910 = Thread::current()
  0xee0806f2:   pop    %ecx
  0xee0806f3:   pop    %edx
  0xee0806f4:   mov    %eax,%edi
  0xee0806f6:   pop    %eax
  0xee0806f7:   push   %edi
  0xee0806f8:   vzeroupper 
  0xee0806fb:   mov    %ebp,0x230(%edi)
  0xee080701:   mov    %eax,0x228(%edi)
  0xee080707:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee08070c:   add    $0x4,%esp
  0xee08070f:   push   %eax
  0xee080710:   push   %edx
  0xee080711:   push   %ecx
  0xee080712:   call   0xf704a910 = Thread::current()
  0xee080717:   pop    %ecx
  0xee080718:   pop    %edx
  0xee080719:   cmp    %eax,%edi
  0xee08071b:   je     0xee080732
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee080721:   push   $0xf78b5a48
  0xee080726:   call   0xee08072b
  0xee08072b:   pusha  
  0xee08072c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080731:   hlt    
  0xee080732:   pop    %eax
  0xee080733:   movl   $0x0,0x228(%edi)
  0xee08073d:   movl   $0x0,0x230(%edi)
  0xee080747:   movl   $0x0,0x22c(%edi)
  0xee080751:   vzeroupper 
  0xee080754:   cmpl   $0x0,0x4(%edi)
  0xee080758:   jne    0xee05bbe0
  0xee08075e:   mov    -0x20(%ebp),%esi
  0xee080761:   mov    -0x1c(%ebp),%edi
  0xee080764:   lea    0x0(%ebp,%edi,4),%edi
  0xee080768:   ret    
  0xee080769:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee08076e:   call   0xee080773
  0xee080773:   pusha  
  0xee080774:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080779:   hlt    
  0xee08077a:   movzbl 0x2(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee08077e:   add    $0x2,%esi
  0xee080781:   jmp    *-0x833dea0(,%ebx,4)
  0xee080788:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee08078f:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee080792:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee080795:   lea    0x0(%ebp,%edi,4),%edi
  0xee080799:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee08079a:   push   %edx
  0xee08079b:   push   %ecx
  0xee08079c:   call   0xf704a910 = Thread::current()
  0xee0807a1:   pop    %ecx
  0xee0807a2:   pop    %edx
  0xee0807a3:   mov    %eax,%ecx
  0xee0807a5:   pop    %eax
  0xee0807a6:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee0807aa:   je     0xee08086c                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee0807b0:   call   0xee0807ba                   ;;  294:     __ call_VM(noreg,
  0xee0807b5:   jmp    0xee08085b
  0xee0807ba:   lea    0x4(%esp),%eax
  0xee0807be:   mov    %esi,-0x20(%ebp)
  0xee0807c1:   cmpl   $0x0,-0x8(%ebp)
  0xee0807c5:   je     0xee0807dc
  0xee0807cb:   push   $0xf78569d8
  0xee0807d0:   call   0xee0807d5
  0xee0807d5:   pusha  
  0xee0807d6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0807db:   hlt    
  0xee0807dc:   push   %eax
  0xee0807dd:   push   %edx
  0xee0807de:   push   %ecx
  0xee0807df:   call   0xf704a910 = Thread::current()
  0xee0807e4:   pop    %ecx
  0xee0807e5:   pop    %edx
  0xee0807e6:   mov    %eax,%edi
  0xee0807e8:   pop    %eax
  0xee0807e9:   push   %edi
  0xee0807ea:   vzeroupper 
  0xee0807ed:   mov    %ebp,0x230(%edi)
  0xee0807f3:   mov    %eax,0x228(%edi)
  0xee0807f9:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee0807fe:   add    $0x4,%esp
  0xee080801:   push   %eax
  0xee080802:   push   %edx
  0xee080803:   push   %ecx
  0xee080804:   call   0xf704a910 = Thread::current()
  0xee080809:   pop    %ecx
  0xee08080a:   pop    %edx
  0xee08080b:   cmp    %eax,%edi
  0xee08080d:   je     0xee080824
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee080813:   push   $0xf78b5a48
  0xee080818:   call   0xee08081d
  0xee08081d:   pusha  
  0xee08081e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080823:   hlt    
  0xee080824:   pop    %eax
  0xee080825:   movl   $0x0,0x228(%edi)
  0xee08082f:   movl   $0x0,0x230(%edi)
  0xee080839:   movl   $0x0,0x22c(%edi)
  0xee080843:   vzeroupper 
  0xee080846:   cmpl   $0x0,0x4(%edi)
  0xee08084a:   jne    0xee05bbe0
  0xee080850:   mov    -0x20(%ebp),%esi
  0xee080853:   mov    -0x1c(%ebp),%edi
  0xee080856:   lea    0x0(%ebp,%edi,4),%edi
  0xee08085a:   ret    
  0xee08085b:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee080860:   call   0xee080865
  0xee080865:   pusha  
  0xee080866:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee08086b:   hlt    
  0xee08086c:   movzbl 0x2(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee080870:   add    $0x2,%esi
  0xee080873:   jmp    *-0x833cea0(,%ebx,4)
  0xee08087a:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee080881:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee080884:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee080887:   lea    0x0(%ebp,%edi,4),%edi
  0xee08088b:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee08088c:   push   %edx
  0xee08088d:   push   %ecx
  0xee08088e:   call   0xf704a910 = Thread::current()
  0xee080893:   pop    %ecx
  0xee080894:   pop    %edx
  0xee080895:   mov    %eax,%ecx
  0xee080897:   pop    %eax
  0xee080898:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee08089c:   je     0xee08095e                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee0808a2:   call   0xee0808ac                   ;;  294:     __ call_VM(noreg,
  0xee0808a7:   jmp    0xee08094d
  0xee0808ac:   lea    0x4(%esp),%eax
  0xee0808b0:   mov    %esi,-0x20(%ebp)
  0xee0808b3:   cmpl   $0x0,-0x8(%ebp)
  0xee0808b7:   je     0xee0808ce
  0xee0808bd:   push   $0xf78569d8
  0xee0808c2:   call   0xee0808c7
  0xee0808c7:   pusha  
  0xee0808c8:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0808cd:   hlt    
  0xee0808ce:   push   %eax
  0xee0808cf:   push   %edx
  0xee0808d0:   push   %ecx
  0xee0808d1:   call   0xf704a910 = Thread::current()
  0xee0808d6:   pop    %ecx
  0xee0808d7:   pop    %edx
  0xee0808d8:   mov    %eax,%edi
  0xee0808da:   pop    %eax
  0xee0808db:   push   %edi
  0xee0808dc:   vzeroupper 
  0xee0808df:   mov    %ebp,0x230(%edi)
  0xee0808e5:   mov    %eax,0x228(%edi)
  0xee0808eb:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee0808f0:   add    $0x4,%esp
  0xee0808f3:   push   %eax
  0xee0808f4:   push   %edx
  0xee0808f5:   push   %ecx
  0xee0808f6:   call   0xf704a910 = Thread::current()
  0xee0808fb:   pop    %ecx
  0xee0808fc:   pop    %edx
  0xee0808fd:   cmp    %eax,%edi
  0xee0808ff:   je     0xee080916
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee080905:   push   $0xf78b5a48
  0xee08090a:   call   0xee08090f
  0xee08090f:   pusha  
  0xee080910:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080915:   hlt    
  0xee080916:   pop    %eax
  0xee080917:   movl   $0x0,0x228(%edi)
  0xee080921:   movl   $0x0,0x230(%edi)
  0xee08092b:   movl   $0x0,0x22c(%edi)
  0xee080935:   vzeroupper 
  0xee080938:   cmpl   $0x0,0x4(%edi)
  0xee08093c:   jne    0xee05bbe0
  0xee080942:   mov    -0x20(%ebp),%esi
  0xee080945:   mov    -0x1c(%ebp),%edi
  0xee080948:   lea    0x0(%ebp,%edi,4),%edi
  0xee08094c:   ret    
  0xee08094d:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee080952:   call   0xee080957
  0xee080957:   pusha  
  0xee080958:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee08095d:   hlt    
  0xee08095e:   movzbl 0x3(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee080962:   add    $0x3,%esi
  0xee080965:   jmp    *-0x833caa0(,%ebx,4)
  0xee08096c:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  253:     __ MacroAssembler::verify_FPU(UseSSE >= 2 ? 0 : 1, "generate_deopt_entry_for in interpreter");
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee080973:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee080976:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee080979:   lea    0x0(%ebp,%edi,4),%edi
  0xee08097d:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee08097e:   push   %edx
  0xee08097f:   push   %ecx
  0xee080980:   call   0xf704a910 = Thread::current()
  0xee080985:   pop    %ecx
  0xee080986:   pop    %edx
  0xee080987:   mov    %eax,%ecx
  0xee080989:   pop    %eax
  0xee08098a:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee08098e:   je     0xee080a50                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee080994:   call   0xee08099e                   ;;  294:     __ call_VM(noreg,
  0xee080999:   jmp    0xee080a3f
  0xee08099e:   lea    0x4(%esp),%eax
  0xee0809a2:   mov    %esi,-0x20(%ebp)
  0xee0809a5:   cmpl   $0x0,-0x8(%ebp)
  0xee0809a9:   je     0xee0809c0
  0xee0809af:   push   $0xf78569d8
  0xee0809b4:   call   0xee0809b9
  0xee0809b9:   pusha  
  0xee0809ba:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0809bf:   hlt    
  0xee0809c0:   push   %eax
  0xee0809c1:   push   %edx
  0xee0809c2:   push   %ecx
  0xee0809c3:   call   0xf704a910 = Thread::current()
  0xee0809c8:   pop    %ecx
  0xee0809c9:   pop    %edx
  0xee0809ca:   mov    %eax,%edi
  0xee0809cc:   pop    %eax
  0xee0809cd:   push   %edi
  0xee0809ce:   vzeroupper 
  0xee0809d1:   mov    %ebp,0x230(%edi)
  0xee0809d7:   mov    %eax,0x228(%edi)
  0xee0809dd:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee0809e2:   add    $0x4,%esp
  0xee0809e5:   push   %eax
  0xee0809e6:   push   %edx
  0xee0809e7:   push   %ecx
  0xee0809e8:   call   0xf704a910 = Thread::current()
  0xee0809ed:   pop    %ecx
  0xee0809ee:   pop    %edx
  0xee0809ef:   cmp    %eax,%edi
  0xee0809f1:   je     0xee080a08
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee0809f7:   push   $0xf78b5a48
  0xee0809fc:   call   0xee080a01
  0xee080a01:   pusha  
  0xee080a02:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080a07:   hlt    
  0xee080a08:   pop    %eax
  0xee080a09:   movl   $0x0,0x228(%edi)
  0xee080a13:   movl   $0x0,0x230(%edi)
  0xee080a1d:   movl   $0x0,0x22c(%edi)
  0xee080a27:   vzeroupper 
  0xee080a2a:   cmpl   $0x0,0x4(%edi)
  0xee080a2e:   jne    0xee05bbe0
  0xee080a34:   mov    -0x20(%ebp),%esi
  0xee080a37:   mov    -0x1c(%ebp),%edi
  0xee080a3a:   lea    0x0(%ebp,%edi,4),%edi
  0xee080a3e:   ret    
  0xee080a3f:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee080a44:   call   0xee080a49
  0xee080a49:   pusha  
  0xee080a4a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080a4f:   hlt    
  0xee080a50:   movzbl 0x3(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee080a54:   add    $0x3,%esi
  0xee080a57:   jmp    *-0x833d2a0(,%ebx,4)
  0xee080a5e:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  251:     __ MacroAssembler::verify_FPU(UseSSE >= 1 ? 0 : 1, "generate_deopt_entry_for in interpreter");
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee080a65:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee080a68:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee080a6b:   lea    0x0(%ebp,%edi,4),%edi
  0xee080a6f:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee080a70:   push   %edx
  0xee080a71:   push   %ecx
  0xee080a72:   call   0xf704a910 = Thread::current()
  0xee080a77:   pop    %ecx
  0xee080a78:   pop    %edx
  0xee080a79:   mov    %eax,%ecx
  0xee080a7b:   pop    %eax
  0xee080a7c:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee080a80:   je     0xee080b42                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee080a86:   call   0xee080a90                   ;;  294:     __ call_VM(noreg,
  0xee080a8b:   jmp    0xee080b31
  0xee080a90:   lea    0x4(%esp),%eax
  0xee080a94:   mov    %esi,-0x20(%ebp)
  0xee080a97:   cmpl   $0x0,-0x8(%ebp)
  0xee080a9b:   je     0xee080ab2
  0xee080aa1:   push   $0xf78569d8
  0xee080aa6:   call   0xee080aab
  0xee080aab:   pusha  
  0xee080aac:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080ab1:   hlt    
  0xee080ab2:   push   %eax
  0xee080ab3:   push   %edx
  0xee080ab4:   push   %ecx
  0xee080ab5:   call   0xf704a910 = Thread::current()
  0xee080aba:   pop    %ecx
  0xee080abb:   pop    %edx
  0xee080abc:   mov    %eax,%edi
  0xee080abe:   pop    %eax
  0xee080abf:   push   %edi
  0xee080ac0:   vzeroupper 
  0xee080ac3:   mov    %ebp,0x230(%edi)
  0xee080ac9:   mov    %eax,0x228(%edi)
  0xee080acf:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee080ad4:   add    $0x4,%esp
  0xee080ad7:   push   %eax
  0xee080ad8:   push   %edx
  0xee080ad9:   push   %ecx
  0xee080ada:   call   0xf704a910 = Thread::current()
  0xee080adf:   pop    %ecx
  0xee080ae0:   pop    %edx
  0xee080ae1:   cmp    %eax,%edi
  0xee080ae3:   je     0xee080afa
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee080ae9:   push   $0xf78b5a48
  0xee080aee:   call   0xee080af3
  0xee080af3:   pusha  
  0xee080af4:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080af9:   hlt    
  0xee080afa:   pop    %eax
  0xee080afb:   movl   $0x0,0x228(%edi)
  0xee080b05:   movl   $0x0,0x230(%edi)
  0xee080b0f:   movl   $0x0,0x22c(%edi)
  0xee080b19:   vzeroupper 
  0xee080b1c:   cmpl   $0x0,0x4(%edi)
  0xee080b20:   jne    0xee05bbe0
  0xee080b26:   mov    -0x20(%ebp),%esi
  0xee080b29:   mov    -0x1c(%ebp),%edi
  0xee080b2c:   lea    0x0(%ebp,%edi,4),%edi
  0xee080b30:   ret    
  0xee080b31:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee080b36:   call   0xee080b3b
  0xee080b3b:   pusha  
  0xee080b3c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080b41:   hlt    
  0xee080b42:   movzbl 0x3(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee080b46:   add    $0x3,%esi
  0xee080b49:   jmp    *-0x833d6a0(,%ebx,4)
  0xee080b50:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee080b57:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee080b5a:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee080b5d:   lea    0x0(%ebp,%edi,4),%edi
  0xee080b61:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee080b62:   push   %edx
  0xee080b63:   push   %ecx
  0xee080b64:   call   0xf704a910 = Thread::current()
  0xee080b69:   pop    %ecx
  0xee080b6a:   pop    %edx
  0xee080b6b:   mov    %eax,%ecx
  0xee080b6d:   pop    %eax
  0xee080b6e:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee080b72:   je     0xee080c34                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee080b78:   call   0xee080b82                   ;;  294:     __ call_VM(noreg,
  0xee080b7d:   jmp    0xee080c23
  0xee080b82:   lea    0x4(%esp),%eax
  0xee080b86:   mov    %esi,-0x20(%ebp)
  0xee080b89:   cmpl   $0x0,-0x8(%ebp)
  0xee080b8d:   je     0xee080ba4
  0xee080b93:   push   $0xf78569d8
  0xee080b98:   call   0xee080b9d
  0xee080b9d:   pusha  
  0xee080b9e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080ba3:   hlt    
  0xee080ba4:   push   %eax
  0xee080ba5:   push   %edx
  0xee080ba6:   push   %ecx
  0xee080ba7:   call   0xf704a910 = Thread::current()
  0xee080bac:   pop    %ecx
  0xee080bad:   pop    %edx
  0xee080bae:   mov    %eax,%edi
  0xee080bb0:   pop    %eax
  0xee080bb1:   push   %edi
  0xee080bb2:   vzeroupper 
  0xee080bb5:   mov    %ebp,0x230(%edi)
  0xee080bbb:   mov    %eax,0x228(%edi)
  0xee080bc1:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee080bc6:   add    $0x4,%esp
  0xee080bc9:   push   %eax
  0xee080bca:   push   %edx
  0xee080bcb:   push   %ecx
  0xee080bcc:   call   0xf704a910 = Thread::current()
  0xee080bd1:   pop    %ecx
  0xee080bd2:   pop    %edx
  0xee080bd3:   cmp    %eax,%edi
  0xee080bd5:   je     0xee080bec
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee080bdb:   push   $0xf78b5a48
  0xee080be0:   call   0xee080be5
  0xee080be5:   pusha  
  0xee080be6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080beb:   hlt    
  0xee080bec:   pop    %eax
  0xee080bed:   movl   $0x0,0x228(%edi)
  0xee080bf7:   movl   $0x0,0x230(%edi)
  0xee080c01:   movl   $0x0,0x22c(%edi)
  0xee080c0b:   vzeroupper 
  0xee080c0e:   cmpl   $0x0,0x4(%edi)
  0xee080c12:   jne    0xee05bbe0
  0xee080c18:   mov    -0x20(%ebp),%esi
  0xee080c1b:   mov    -0x1c(%ebp),%edi
  0xee080c1e:   lea    0x0(%ebp,%edi,4),%edi
  0xee080c22:   ret    
  0xee080c23:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee080c28:   call   0xee080c2d
  0xee080c2d:   pusha  
  0xee080c2e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080c33:   hlt    
  0xee080c34:   movzbl 0x3(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee080c38:   add    $0x3,%esi
  0xee080c3b:   jmp    *-0x833daa0(,%ebx,4)
  0xee080c42:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee080c49:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee080c4c:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee080c4f:   lea    0x0(%ebp,%edi,4),%edi
  0xee080c53:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee080c54:   push   %edx
  0xee080c55:   push   %ecx
  0xee080c56:   call   0xf704a910 = Thread::current()
  0xee080c5b:   pop    %ecx
  0xee080c5c:   pop    %edx
  0xee080c5d:   mov    %eax,%ecx
  0xee080c5f:   pop    %eax
  0xee080c60:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee080c64:   je     0xee080d26                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee080c6a:   call   0xee080c74                   ;;  294:     __ call_VM(noreg,
  0xee080c6f:   jmp    0xee080d15
  0xee080c74:   lea    0x4(%esp),%eax
  0xee080c78:   mov    %esi,-0x20(%ebp)
  0xee080c7b:   cmpl   $0x0,-0x8(%ebp)
  0xee080c7f:   je     0xee080c96
  0xee080c85:   push   $0xf78569d8
  0xee080c8a:   call   0xee080c8f
  0xee080c8f:   pusha  
  0xee080c90:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080c95:   hlt    
  0xee080c96:   push   %eax
  0xee080c97:   push   %edx
  0xee080c98:   push   %ecx
  0xee080c99:   call   0xf704a910 = Thread::current()
  0xee080c9e:   pop    %ecx
  0xee080c9f:   pop    %edx
  0xee080ca0:   mov    %eax,%edi
  0xee080ca2:   pop    %eax
  0xee080ca3:   push   %edi
  0xee080ca4:   vzeroupper 
  0xee080ca7:   mov    %ebp,0x230(%edi)
  0xee080cad:   mov    %eax,0x228(%edi)
  0xee080cb3:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee080cb8:   add    $0x4,%esp
  0xee080cbb:   push   %eax
  0xee080cbc:   push   %edx
  0xee080cbd:   push   %ecx
  0xee080cbe:   call   0xf704a910 = Thread::current()
  0xee080cc3:   pop    %ecx
  0xee080cc4:   pop    %edx
  0xee080cc5:   cmp    %eax,%edi
  0xee080cc7:   je     0xee080cde
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee080ccd:   push   $0xf78b5a48
  0xee080cd2:   call   0xee080cd7
  0xee080cd7:   pusha  
  0xee080cd8:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080cdd:   hlt    
  0xee080cde:   pop    %eax
  0xee080cdf:   movl   $0x0,0x228(%edi)
  0xee080ce9:   movl   $0x0,0x230(%edi)
  0xee080cf3:   movl   $0x0,0x22c(%edi)
  0xee080cfd:   vzeroupper 
  0xee080d00:   cmpl   $0x0,0x4(%edi)
  0xee080d04:   jne    0xee05bbe0
  0xee080d0a:   mov    -0x20(%ebp),%esi
  0xee080d0d:   mov    -0x1c(%ebp),%edi
  0xee080d10:   lea    0x0(%ebp,%edi,4),%edi
  0xee080d14:   ret    
  0xee080d15:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee080d1a:   call   0xee080d1f
  0xee080d1f:   pusha  
  0xee080d20:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080d25:   hlt    
  0xee080d26:   movzbl 0x3(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee080d2a:   add    $0x3,%esi
  0xee080d2d:   jmp    *-0x833dea0(,%ebx,4)
  0xee080d34:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee080d3b:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee080d3e:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee080d41:   lea    0x0(%ebp,%edi,4),%edi
  0xee080d45:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee080d46:   push   %edx
  0xee080d47:   push   %ecx
  0xee080d48:   call   0xf704a910 = Thread::current()
  0xee080d4d:   pop    %ecx
  0xee080d4e:   pop    %edx
  0xee080d4f:   mov    %eax,%ecx
  0xee080d51:   pop    %eax
  0xee080d52:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee080d56:   je     0xee080e18                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee080d5c:   call   0xee080d66                   ;;  294:     __ call_VM(noreg,
  0xee080d61:   jmp    0xee080e07
  0xee080d66:   lea    0x4(%esp),%eax
  0xee080d6a:   mov    %esi,-0x20(%ebp)
  0xee080d6d:   cmpl   $0x0,-0x8(%ebp)
  0xee080d71:   je     0xee080d88
  0xee080d77:   push   $0xf78569d8
  0xee080d7c:   call   0xee080d81
  0xee080d81:   pusha  
  0xee080d82:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080d87:   hlt    
  0xee080d88:   push   %eax
  0xee080d89:   push   %edx
  0xee080d8a:   push   %ecx
  0xee080d8b:   call   0xf704a910 = Thread::current()
  0xee080d90:   pop    %ecx
  0xee080d91:   pop    %edx
  0xee080d92:   mov    %eax,%edi
  0xee080d94:   pop    %eax
  0xee080d95:   push   %edi
  0xee080d96:   vzeroupper 
  0xee080d99:   mov    %ebp,0x230(%edi)
  0xee080d9f:   mov    %eax,0x228(%edi)
  0xee080da5:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee080daa:   add    $0x4,%esp
  0xee080dad:   push   %eax
  0xee080dae:   push   %edx
  0xee080daf:   push   %ecx
  0xee080db0:   call   0xf704a910 = Thread::current()
  0xee080db5:   pop    %ecx
  0xee080db6:   pop    %edx
  0xee080db7:   cmp    %eax,%edi
  0xee080db9:   je     0xee080dd0
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee080dbf:   push   $0xf78b5a48
  0xee080dc4:   call   0xee080dc9
  0xee080dc9:   pusha  
  0xee080dca:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080dcf:   hlt    
  0xee080dd0:   pop    %eax
  0xee080dd1:   movl   $0x0,0x228(%edi)
  0xee080ddb:   movl   $0x0,0x230(%edi)
  0xee080de5:   movl   $0x0,0x22c(%edi)
  0xee080def:   vzeroupper 
  0xee080df2:   cmpl   $0x0,0x4(%edi)
  0xee080df6:   jne    0xee05bbe0
  0xee080dfc:   mov    -0x20(%ebp),%esi
  0xee080dff:   mov    -0x1c(%ebp),%edi
  0xee080e02:   lea    0x0(%ebp,%edi,4),%edi
  0xee080e06:   ret    
  0xee080e07:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee080e0c:   call   0xee080e11
  0xee080e11:   pusha  
  0xee080e12:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080e17:   hlt    
  0xee080e18:   movzbl 0x3(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee080e1c:   add    $0x3,%esi
  0xee080e1f:   jmp    *-0x833cea0(,%ebx,4)
  0xee080e26:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee080e2d:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee080e30:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee080e33:   lea    0x0(%ebp,%edi,4),%edi
  0xee080e37:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee080e38:   push   %edx
  0xee080e39:   push   %ecx
  0xee080e3a:   call   0xf704a910 = Thread::current()
  0xee080e3f:   pop    %ecx
  0xee080e40:   pop    %edx
  0xee080e41:   mov    %eax,%ecx
  0xee080e43:   pop    %eax
  0xee080e44:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee080e48:   je     0xee080f0a                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee080e4e:   call   0xee080e58                   ;;  294:     __ call_VM(noreg,
  0xee080e53:   jmp    0xee080ef9
  0xee080e58:   lea    0x4(%esp),%eax
  0xee080e5c:   mov    %esi,-0x20(%ebp)
  0xee080e5f:   cmpl   $0x0,-0x8(%ebp)
  0xee080e63:   je     0xee080e7a
  0xee080e69:   push   $0xf78569d8
  0xee080e6e:   call   0xee080e73
  0xee080e73:   pusha  
  0xee080e74:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080e79:   hlt    
  0xee080e7a:   push   %eax
  0xee080e7b:   push   %edx
  0xee080e7c:   push   %ecx
  0xee080e7d:   call   0xf704a910 = Thread::current()
  0xee080e82:   pop    %ecx
  0xee080e83:   pop    %edx
  0xee080e84:   mov    %eax,%edi
  0xee080e86:   pop    %eax
  0xee080e87:   push   %edi
  0xee080e88:   vzeroupper 
  0xee080e8b:   mov    %ebp,0x230(%edi)
  0xee080e91:   mov    %eax,0x228(%edi)
  0xee080e97:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee080e9c:   add    $0x4,%esp
  0xee080e9f:   push   %eax
  0xee080ea0:   push   %edx
  0xee080ea1:   push   %ecx
  0xee080ea2:   call   0xf704a910 = Thread::current()
  0xee080ea7:   pop    %ecx
  0xee080ea8:   pop    %edx
  0xee080ea9:   cmp    %eax,%edi
  0xee080eab:   je     0xee080ec2
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee080eb1:   push   $0xf78b5a48
  0xee080eb6:   call   0xee080ebb
  0xee080ebb:   pusha  
  0xee080ebc:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080ec1:   hlt    
  0xee080ec2:   pop    %eax
  0xee080ec3:   movl   $0x0,0x228(%edi)
  0xee080ecd:   movl   $0x0,0x230(%edi)
  0xee080ed7:   movl   $0x0,0x22c(%edi)
  0xee080ee1:   vzeroupper 
  0xee080ee4:   cmpl   $0x0,0x4(%edi)
  0xee080ee8:   jne    0xee05bbe0
  0xee080eee:   mov    -0x20(%ebp),%esi
  0xee080ef1:   mov    -0x1c(%ebp),%edi
  0xee080ef4:   lea    0x0(%ebp,%edi,4),%edi
  0xee080ef8:   ret    
  0xee080ef9:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee080efe:   call   0xee080f03
  0xee080f03:   pusha  
  0xee080f04:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080f09:   hlt    
  0xee080f0a:   movzbl 0x4(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee080f0e:   add    $0x4,%esi
  0xee080f11:   jmp    *-0x833caa0(,%ebx,4)
  0xee080f18:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  253:     __ MacroAssembler::verify_FPU(UseSSE >= 2 ? 0 : 1, "generate_deopt_entry_for in interpreter");
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee080f1f:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee080f22:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee080f25:   lea    0x0(%ebp,%edi,4),%edi
  0xee080f29:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee080f2a:   push   %edx
  0xee080f2b:   push   %ecx
  0xee080f2c:   call   0xf704a910 = Thread::current()
  0xee080f31:   pop    %ecx
  0xee080f32:   pop    %edx
  0xee080f33:   mov    %eax,%ecx
  0xee080f35:   pop    %eax
  0xee080f36:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee080f3a:   je     0xee080ffc                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee080f40:   call   0xee080f4a                   ;;  294:     __ call_VM(noreg,
  0xee080f45:   jmp    0xee080feb
  0xee080f4a:   lea    0x4(%esp),%eax
  0xee080f4e:   mov    %esi,-0x20(%ebp)
  0xee080f51:   cmpl   $0x0,-0x8(%ebp)
  0xee080f55:   je     0xee080f6c
  0xee080f5b:   push   $0xf78569d8
  0xee080f60:   call   0xee080f65
  0xee080f65:   pusha  
  0xee080f66:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080f6b:   hlt    
  0xee080f6c:   push   %eax
  0xee080f6d:   push   %edx
  0xee080f6e:   push   %ecx
  0xee080f6f:   call   0xf704a910 = Thread::current()
  0xee080f74:   pop    %ecx
  0xee080f75:   pop    %edx
  0xee080f76:   mov    %eax,%edi
  0xee080f78:   pop    %eax
  0xee080f79:   push   %edi
  0xee080f7a:   vzeroupper 
  0xee080f7d:   mov    %ebp,0x230(%edi)
  0xee080f83:   mov    %eax,0x228(%edi)
  0xee080f89:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee080f8e:   add    $0x4,%esp
  0xee080f91:   push   %eax
  0xee080f92:   push   %edx
  0xee080f93:   push   %ecx
  0xee080f94:   call   0xf704a910 = Thread::current()
  0xee080f99:   pop    %ecx
  0xee080f9a:   pop    %edx
  0xee080f9b:   cmp    %eax,%edi
  0xee080f9d:   je     0xee080fb4
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee080fa3:   push   $0xf78b5a48
  0xee080fa8:   call   0xee080fad
  0xee080fad:   pusha  
  0xee080fae:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080fb3:   hlt    
  0xee080fb4:   pop    %eax
  0xee080fb5:   movl   $0x0,0x228(%edi)
  0xee080fbf:   movl   $0x0,0x230(%edi)
  0xee080fc9:   movl   $0x0,0x22c(%edi)
  0xee080fd3:   vzeroupper 
  0xee080fd6:   cmpl   $0x0,0x4(%edi)
  0xee080fda:   jne    0xee05bbe0
  0xee080fe0:   mov    -0x20(%ebp),%esi
  0xee080fe3:   mov    -0x1c(%ebp),%edi
  0xee080fe6:   lea    0x0(%ebp,%edi,4),%edi
  0xee080fea:   ret    
  0xee080feb:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee080ff0:   call   0xee080ff5
  0xee080ff5:   pusha  
  0xee080ff6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee080ffb:   hlt    
  0xee080ffc:   movzbl 0x4(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee081000:   add    $0x4,%esi
  0xee081003:   jmp    *-0x833d2a0(,%ebx,4)
  0xee08100a:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  251:     __ MacroAssembler::verify_FPU(UseSSE >= 1 ? 0 : 1, "generate_deopt_entry_for in interpreter");
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee081011:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee081014:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee081017:   lea    0x0(%ebp,%edi,4),%edi
  0xee08101b:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee08101c:   push   %edx
  0xee08101d:   push   %ecx
  0xee08101e:   call   0xf704a910 = Thread::current()
  0xee081023:   pop    %ecx
  0xee081024:   pop    %edx
  0xee081025:   mov    %eax,%ecx
  0xee081027:   pop    %eax
  0xee081028:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee08102c:   je     0xee0810ee                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee081032:   call   0xee08103c                   ;;  294:     __ call_VM(noreg,
  0xee081037:   jmp    0xee0810dd
  0xee08103c:   lea    0x4(%esp),%eax
  0xee081040:   mov    %esi,-0x20(%ebp)
  0xee081043:   cmpl   $0x0,-0x8(%ebp)
  0xee081047:   je     0xee08105e
  0xee08104d:   push   $0xf78569d8
  0xee081052:   call   0xee081057
  0xee081057:   pusha  
  0xee081058:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee08105d:   hlt    
  0xee08105e:   push   %eax
  0xee08105f:   push   %edx
  0xee081060:   push   %ecx
  0xee081061:   call   0xf704a910 = Thread::current()
  0xee081066:   pop    %ecx
  0xee081067:   pop    %edx
  0xee081068:   mov    %eax,%edi
  0xee08106a:   pop    %eax
  0xee08106b:   push   %edi
  0xee08106c:   vzeroupper 
  0xee08106f:   mov    %ebp,0x230(%edi)
  0xee081075:   mov    %eax,0x228(%edi)
  0xee08107b:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee081080:   add    $0x4,%esp
  0xee081083:   push   %eax
  0xee081084:   push   %edx
  0xee081085:   push   %ecx
  0xee081086:   call   0xf704a910 = Thread::current()
  0xee08108b:   pop    %ecx
  0xee08108c:   pop    %edx
  0xee08108d:   cmp    %eax,%edi
  0xee08108f:   je     0xee0810a6
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee081095:   push   $0xf78b5a48
  0xee08109a:   call   0xee08109f
  0xee08109f:   pusha  
  0xee0810a0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0810a5:   hlt    
  0xee0810a6:   pop    %eax
  0xee0810a7:   movl   $0x0,0x228(%edi)
  0xee0810b1:   movl   $0x0,0x230(%edi)
  0xee0810bb:   movl   $0x0,0x22c(%edi)
  0xee0810c5:   vzeroupper 
  0xee0810c8:   cmpl   $0x0,0x4(%edi)
  0xee0810cc:   jne    0xee05bbe0
  0xee0810d2:   mov    -0x20(%ebp),%esi
  0xee0810d5:   mov    -0x1c(%ebp),%edi
  0xee0810d8:   lea    0x0(%ebp,%edi,4),%edi
  0xee0810dc:   ret    
  0xee0810dd:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee0810e2:   call   0xee0810e7
  0xee0810e7:   pusha  
  0xee0810e8:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0810ed:   hlt    
  0xee0810ee:   movzbl 0x4(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee0810f2:   add    $0x4,%esi
  0xee0810f5:   jmp    *-0x833d6a0(,%ebx,4)
  0xee0810fc:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee081103:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee081106:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee081109:   lea    0x0(%ebp,%edi,4),%edi
  0xee08110d:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee08110e:   push   %edx
  0xee08110f:   push   %ecx
  0xee081110:   call   0xf704a910 = Thread::current()
  0xee081115:   pop    %ecx
  0xee081116:   pop    %edx
  0xee081117:   mov    %eax,%ecx
  0xee081119:   pop    %eax
  0xee08111a:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee08111e:   je     0xee0811e0                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee081124:   call   0xee08112e                   ;;  294:     __ call_VM(noreg,
  0xee081129:   jmp    0xee0811cf
  0xee08112e:   lea    0x4(%esp),%eax
  0xee081132:   mov    %esi,-0x20(%ebp)
  0xee081135:   cmpl   $0x0,-0x8(%ebp)
  0xee081139:   je     0xee081150
  0xee08113f:   push   $0xf78569d8
  0xee081144:   call   0xee081149
  0xee081149:   pusha  
  0xee08114a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee08114f:   hlt    
  0xee081150:   push   %eax
  0xee081151:   push   %edx
  0xee081152:   push   %ecx
  0xee081153:   call   0xf704a910 = Thread::current()
  0xee081158:   pop    %ecx
  0xee081159:   pop    %edx
  0xee08115a:   mov    %eax,%edi
  0xee08115c:   pop    %eax
  0xee08115d:   push   %edi
  0xee08115e:   vzeroupper 
  0xee081161:   mov    %ebp,0x230(%edi)
  0xee081167:   mov    %eax,0x228(%edi)
  0xee08116d:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee081172:   add    $0x4,%esp
  0xee081175:   push   %eax
  0xee081176:   push   %edx
  0xee081177:   push   %ecx
  0xee081178:   call   0xf704a910 = Thread::current()
  0xee08117d:   pop    %ecx
  0xee08117e:   pop    %edx
  0xee08117f:   cmp    %eax,%edi
  0xee081181:   je     0xee081198
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee081187:   push   $0xf78b5a48
  0xee08118c:   call   0xee081191
  0xee081191:   pusha  
  0xee081192:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081197:   hlt    
  0xee081198:   pop    %eax
  0xee081199:   movl   $0x0,0x228(%edi)
  0xee0811a3:   movl   $0x0,0x230(%edi)
  0xee0811ad:   movl   $0x0,0x22c(%edi)
  0xee0811b7:   vzeroupper 
  0xee0811ba:   cmpl   $0x0,0x4(%edi)
  0xee0811be:   jne    0xee05bbe0
  0xee0811c4:   mov    -0x20(%ebp),%esi
  0xee0811c7:   mov    -0x1c(%ebp),%edi
  0xee0811ca:   lea    0x0(%ebp,%edi,4),%edi
  0xee0811ce:   ret    
  0xee0811cf:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee0811d4:   call   0xee0811d9
  0xee0811d9:   pusha  
  0xee0811da:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0811df:   hlt    
  0xee0811e0:   movzbl 0x4(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee0811e4:   add    $0x4,%esi
  0xee0811e7:   jmp    *-0x833daa0(,%ebx,4)
  0xee0811ee:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee0811f5:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee0811f8:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee0811fb:   lea    0x0(%ebp,%edi,4),%edi
  0xee0811ff:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee081200:   push   %edx
  0xee081201:   push   %ecx
  0xee081202:   call   0xf704a910 = Thread::current()
  0xee081207:   pop    %ecx
  0xee081208:   pop    %edx
  0xee081209:   mov    %eax,%ecx
  0xee08120b:   pop    %eax
  0xee08120c:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee081210:   je     0xee0812d2                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee081216:   call   0xee081220                   ;;  294:     __ call_VM(noreg,
  0xee08121b:   jmp    0xee0812c1
  0xee081220:   lea    0x4(%esp),%eax
  0xee081224:   mov    %esi,-0x20(%ebp)
  0xee081227:   cmpl   $0x0,-0x8(%ebp)
  0xee08122b:   je     0xee081242
  0xee081231:   push   $0xf78569d8
  0xee081236:   call   0xee08123b
  0xee08123b:   pusha  
  0xee08123c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081241:   hlt    
  0xee081242:   push   %eax
  0xee081243:   push   %edx
  0xee081244:   push   %ecx
  0xee081245:   call   0xf704a910 = Thread::current()
  0xee08124a:   pop    %ecx
  0xee08124b:   pop    %edx
  0xee08124c:   mov    %eax,%edi
  0xee08124e:   pop    %eax
  0xee08124f:   push   %edi
  0xee081250:   vzeroupper 
  0xee081253:   mov    %ebp,0x230(%edi)
  0xee081259:   mov    %eax,0x228(%edi)
  0xee08125f:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee081264:   add    $0x4,%esp
  0xee081267:   push   %eax
  0xee081268:   push   %edx
  0xee081269:   push   %ecx
  0xee08126a:   call   0xf704a910 = Thread::current()
  0xee08126f:   pop    %ecx
  0xee081270:   pop    %edx
  0xee081271:   cmp    %eax,%edi
  0xee081273:   je     0xee08128a
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee081279:   push   $0xf78b5a48
  0xee08127e:   call   0xee081283
  0xee081283:   pusha  
  0xee081284:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081289:   hlt    
  0xee08128a:   pop    %eax
  0xee08128b:   movl   $0x0,0x228(%edi)
  0xee081295:   movl   $0x0,0x230(%edi)
  0xee08129f:   movl   $0x0,0x22c(%edi)
  0xee0812a9:   vzeroupper 
  0xee0812ac:   cmpl   $0x0,0x4(%edi)
  0xee0812b0:   jne    0xee05bbe0
  0xee0812b6:   mov    -0x20(%ebp),%esi
  0xee0812b9:   mov    -0x1c(%ebp),%edi
  0xee0812bc:   lea    0x0(%ebp,%edi,4),%edi
  0xee0812c0:   ret    
  0xee0812c1:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee0812c6:   call   0xee0812cb
  0xee0812cb:   pusha  
  0xee0812cc:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0812d1:   hlt    
  0xee0812d2:   movzbl 0x4(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee0812d6:   add    $0x4,%esi
  0xee0812d9:   jmp    *-0x833dea0(,%ebx,4)
  0xee0812e0:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee0812e7:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee0812ea:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee0812ed:   lea    0x0(%ebp,%edi,4),%edi
  0xee0812f1:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee0812f2:   push   %edx
  0xee0812f3:   push   %ecx
  0xee0812f4:   call   0xf704a910 = Thread::current()
  0xee0812f9:   pop    %ecx
  0xee0812fa:   pop    %edx
  0xee0812fb:   mov    %eax,%ecx
  0xee0812fd:   pop    %eax
  0xee0812fe:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee081302:   je     0xee0813c4                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee081308:   call   0xee081312                   ;;  294:     __ call_VM(noreg,
  0xee08130d:   jmp    0xee0813b3
  0xee081312:   lea    0x4(%esp),%eax
  0xee081316:   mov    %esi,-0x20(%ebp)
  0xee081319:   cmpl   $0x0,-0x8(%ebp)
  0xee08131d:   je     0xee081334
  0xee081323:   push   $0xf78569d8
  0xee081328:   call   0xee08132d
  0xee08132d:   pusha  
  0xee08132e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081333:   hlt    
  0xee081334:   push   %eax
  0xee081335:   push   %edx
  0xee081336:   push   %ecx
  0xee081337:   call   0xf704a910 = Thread::current()
  0xee08133c:   pop    %ecx
  0xee08133d:   pop    %edx
  0xee08133e:   mov    %eax,%edi
  0xee081340:   pop    %eax
  0xee081341:   push   %edi
  0xee081342:   vzeroupper 
  0xee081345:   mov    %ebp,0x230(%edi)
  0xee08134b:   mov    %eax,0x228(%edi)
  0xee081351:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee081356:   add    $0x4,%esp
  0xee081359:   push   %eax
  0xee08135a:   push   %edx
  0xee08135b:   push   %ecx
  0xee08135c:   call   0xf704a910 = Thread::current()
  0xee081361:   pop    %ecx
  0xee081362:   pop    %edx
  0xee081363:   cmp    %eax,%edi
  0xee081365:   je     0xee08137c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee08136b:   push   $0xf78b5a48
  0xee081370:   call   0xee081375
  0xee081375:   pusha  
  0xee081376:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee08137b:   hlt    
  0xee08137c:   pop    %eax
  0xee08137d:   movl   $0x0,0x228(%edi)
  0xee081387:   movl   $0x0,0x230(%edi)
  0xee081391:   movl   $0x0,0x22c(%edi)
  0xee08139b:   vzeroupper 
  0xee08139e:   cmpl   $0x0,0x4(%edi)
  0xee0813a2:   jne    0xee05bbe0
  0xee0813a8:   mov    -0x20(%ebp),%esi
  0xee0813ab:   mov    -0x1c(%ebp),%edi
  0xee0813ae:   lea    0x0(%ebp,%edi,4),%edi
  0xee0813b2:   ret    
  0xee0813b3:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee0813b8:   call   0xee0813bd
  0xee0813bd:   pusha  
  0xee0813be:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0813c3:   hlt    
  0xee0813c4:   movzbl 0x4(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee0813c8:   add    $0x4,%esi
  0xee0813cb:   jmp    *-0x833cea0(,%ebx,4)
  0xee0813d2:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee0813d9:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee0813dc:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee0813df:   lea    0x0(%ebp,%edi,4),%edi
  0xee0813e3:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee0813e4:   push   %edx
  0xee0813e5:   push   %ecx
  0xee0813e6:   call   0xf704a910 = Thread::current()
  0xee0813eb:   pop    %ecx
  0xee0813ec:   pop    %edx
  0xee0813ed:   mov    %eax,%ecx
  0xee0813ef:   pop    %eax
  0xee0813f0:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee0813f4:   je     0xee0814b6                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee0813fa:   call   0xee081404                   ;;  294:     __ call_VM(noreg,
  0xee0813ff:   jmp    0xee0814a5
  0xee081404:   lea    0x4(%esp),%eax
  0xee081408:   mov    %esi,-0x20(%ebp)
  0xee08140b:   cmpl   $0x0,-0x8(%ebp)
  0xee08140f:   je     0xee081426
  0xee081415:   push   $0xf78569d8
  0xee08141a:   call   0xee08141f
  0xee08141f:   pusha  
  0xee081420:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081425:   hlt    
  0xee081426:   push   %eax
  0xee081427:   push   %edx
  0xee081428:   push   %ecx
  0xee081429:   call   0xf704a910 = Thread::current()
  0xee08142e:   pop    %ecx
  0xee08142f:   pop    %edx
  0xee081430:   mov    %eax,%edi
  0xee081432:   pop    %eax
  0xee081433:   push   %edi
  0xee081434:   vzeroupper 
  0xee081437:   mov    %ebp,0x230(%edi)
  0xee08143d:   mov    %eax,0x228(%edi)
  0xee081443:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee081448:   add    $0x4,%esp
  0xee08144b:   push   %eax
  0xee08144c:   push   %edx
  0xee08144d:   push   %ecx
  0xee08144e:   call   0xf704a910 = Thread::current()
  0xee081453:   pop    %ecx
  0xee081454:   pop    %edx
  0xee081455:   cmp    %eax,%edi
  0xee081457:   je     0xee08146e
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee08145d:   push   $0xf78b5a48
  0xee081462:   call   0xee081467
  0xee081467:   pusha  
  0xee081468:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee08146d:   hlt    
  0xee08146e:   pop    %eax
  0xee08146f:   movl   $0x0,0x228(%edi)
  0xee081479:   movl   $0x0,0x230(%edi)
  0xee081483:   movl   $0x0,0x22c(%edi)
  0xee08148d:   vzeroupper 
  0xee081490:   cmpl   $0x0,0x4(%edi)
  0xee081494:   jne    0xee05bbe0
  0xee08149a:   mov    -0x20(%ebp),%esi
  0xee08149d:   mov    -0x1c(%ebp),%edi
  0xee0814a0:   lea    0x0(%ebp,%edi,4),%edi
  0xee0814a4:   ret    
  0xee0814a5:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee0814aa:   call   0xee0814af
  0xee0814af:   pusha  
  0xee0814b0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0814b5:   hlt    
  0xee0814b6:   movzbl 0x5(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee0814ba:   add    $0x5,%esi
  0xee0814bd:   jmp    *-0x833caa0(,%ebx,4)
  0xee0814c4:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  253:     __ MacroAssembler::verify_FPU(UseSSE >= 2 ? 0 : 1, "generate_deopt_entry_for in interpreter");
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee0814cb:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee0814ce:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee0814d1:   lea    0x0(%ebp,%edi,4),%edi
  0xee0814d5:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee0814d6:   push   %edx
  0xee0814d7:   push   %ecx
  0xee0814d8:   call   0xf704a910 = Thread::current()
  0xee0814dd:   pop    %ecx
  0xee0814de:   pop    %edx
  0xee0814df:   mov    %eax,%ecx
  0xee0814e1:   pop    %eax
  0xee0814e2:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee0814e6:   je     0xee0815a8                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee0814ec:   call   0xee0814f6                   ;;  294:     __ call_VM(noreg,
  0xee0814f1:   jmp    0xee081597
  0xee0814f6:   lea    0x4(%esp),%eax
  0xee0814fa:   mov    %esi,-0x20(%ebp)
  0xee0814fd:   cmpl   $0x0,-0x8(%ebp)
  0xee081501:   je     0xee081518
  0xee081507:   push   $0xf78569d8
  0xee08150c:   call   0xee081511
  0xee081511:   pusha  
  0xee081512:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081517:   hlt    
  0xee081518:   push   %eax
  0xee081519:   push   %edx
  0xee08151a:   push   %ecx
  0xee08151b:   call   0xf704a910 = Thread::current()
  0xee081520:   pop    %ecx
  0xee081521:   pop    %edx
  0xee081522:   mov    %eax,%edi
  0xee081524:   pop    %eax
  0xee081525:   push   %edi
  0xee081526:   vzeroupper 
  0xee081529:   mov    %ebp,0x230(%edi)
  0xee08152f:   mov    %eax,0x228(%edi)
  0xee081535:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee08153a:   add    $0x4,%esp
  0xee08153d:   push   %eax
  0xee08153e:   push   %edx
  0xee08153f:   push   %ecx
  0xee081540:   call   0xf704a910 = Thread::current()
  0xee081545:   pop    %ecx
  0xee081546:   pop    %edx
  0xee081547:   cmp    %eax,%edi
  0xee081549:   je     0xee081560
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee08154f:   push   $0xf78b5a48
  0xee081554:   call   0xee081559
  0xee081559:   pusha  
  0xee08155a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee08155f:   hlt    
  0xee081560:   pop    %eax
  0xee081561:   movl   $0x0,0x228(%edi)
  0xee08156b:   movl   $0x0,0x230(%edi)
  0xee081575:   movl   $0x0,0x22c(%edi)
  0xee08157f:   vzeroupper 
  0xee081582:   cmpl   $0x0,0x4(%edi)
  0xee081586:   jne    0xee05bbe0
  0xee08158c:   mov    -0x20(%ebp),%esi
  0xee08158f:   mov    -0x1c(%ebp),%edi
  0xee081592:   lea    0x0(%ebp,%edi,4),%edi
  0xee081596:   ret    
  0xee081597:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee08159c:   call   0xee0815a1
  0xee0815a1:   pusha  
  0xee0815a2:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0815a7:   hlt    
  0xee0815a8:   movzbl 0x5(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee0815ac:   add    $0x5,%esi
  0xee0815af:   jmp    *-0x833d2a0(,%ebx,4)
  0xee0815b6:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  251:     __ MacroAssembler::verify_FPU(UseSSE >= 1 ? 0 : 1, "generate_deopt_entry_for in interpreter");
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee0815bd:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee0815c0:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee0815c3:   lea    0x0(%ebp,%edi,4),%edi
  0xee0815c7:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee0815c8:   push   %edx
  0xee0815c9:   push   %ecx
  0xee0815ca:   call   0xf704a910 = Thread::current()
  0xee0815cf:   pop    %ecx
  0xee0815d0:   pop    %edx
  0xee0815d1:   mov    %eax,%ecx
  0xee0815d3:   pop    %eax
  0xee0815d4:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee0815d8:   je     0xee08169a                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee0815de:   call   0xee0815e8                   ;;  294:     __ call_VM(noreg,
  0xee0815e3:   jmp    0xee081689
  0xee0815e8:   lea    0x4(%esp),%eax
  0xee0815ec:   mov    %esi,-0x20(%ebp)
  0xee0815ef:   cmpl   $0x0,-0x8(%ebp)
  0xee0815f3:   je     0xee08160a
  0xee0815f9:   push   $0xf78569d8
  0xee0815fe:   call   0xee081603
  0xee081603:   pusha  
  0xee081604:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081609:   hlt    
  0xee08160a:   push   %eax
  0xee08160b:   push   %edx
  0xee08160c:   push   %ecx
  0xee08160d:   call   0xf704a910 = Thread::current()
  0xee081612:   pop    %ecx
  0xee081613:   pop    %edx
  0xee081614:   mov    %eax,%edi
  0xee081616:   pop    %eax
  0xee081617:   push   %edi
  0xee081618:   vzeroupper 
  0xee08161b:   mov    %ebp,0x230(%edi)
  0xee081621:   mov    %eax,0x228(%edi)
  0xee081627:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee08162c:   add    $0x4,%esp
  0xee08162f:   push   %eax
  0xee081630:   push   %edx
  0xee081631:   push   %ecx
  0xee081632:   call   0xf704a910 = Thread::current()
  0xee081637:   pop    %ecx
  0xee081638:   pop    %edx
  0xee081639:   cmp    %eax,%edi
  0xee08163b:   je     0xee081652
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee081641:   push   $0xf78b5a48
  0xee081646:   call   0xee08164b
  0xee08164b:   pusha  
  0xee08164c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081651:   hlt    
  0xee081652:   pop    %eax
  0xee081653:   movl   $0x0,0x228(%edi)
  0xee08165d:   movl   $0x0,0x230(%edi)
  0xee081667:   movl   $0x0,0x22c(%edi)
  0xee081671:   vzeroupper 
  0xee081674:   cmpl   $0x0,0x4(%edi)
  0xee081678:   jne    0xee05bbe0
  0xee08167e:   mov    -0x20(%ebp),%esi
  0xee081681:   mov    -0x1c(%ebp),%edi
  0xee081684:   lea    0x0(%ebp,%edi,4),%edi
  0xee081688:   ret    
  0xee081689:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee08168e:   call   0xee081693
  0xee081693:   pusha  
  0xee081694:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081699:   hlt    
  0xee08169a:   movzbl 0x5(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee08169e:   add    $0x5,%esi
  0xee0816a1:   jmp    *-0x833d6a0(,%ebx,4)
  0xee0816a8:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee0816af:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee0816b2:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee0816b5:   lea    0x0(%ebp,%edi,4),%edi
  0xee0816b9:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee0816ba:   push   %edx
  0xee0816bb:   push   %ecx
  0xee0816bc:   call   0xf704a910 = Thread::current()
  0xee0816c1:   pop    %ecx
  0xee0816c2:   pop    %edx
  0xee0816c3:   mov    %eax,%ecx
  0xee0816c5:   pop    %eax
  0xee0816c6:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee0816ca:   je     0xee08178c                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee0816d0:   call   0xee0816da                   ;;  294:     __ call_VM(noreg,
  0xee0816d5:   jmp    0xee08177b
  0xee0816da:   lea    0x4(%esp),%eax
  0xee0816de:   mov    %esi,-0x20(%ebp)
  0xee0816e1:   cmpl   $0x0,-0x8(%ebp)
  0xee0816e5:   je     0xee0816fc
  0xee0816eb:   push   $0xf78569d8
  0xee0816f0:   call   0xee0816f5
  0xee0816f5:   pusha  
  0xee0816f6:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0816fb:   hlt    
  0xee0816fc:   push   %eax
  0xee0816fd:   push   %edx
  0xee0816fe:   push   %ecx
  0xee0816ff:   call   0xf704a910 = Thread::current()
  0xee081704:   pop    %ecx
  0xee081705:   pop    %edx
  0xee081706:   mov    %eax,%edi
  0xee081708:   pop    %eax
  0xee081709:   push   %edi
  0xee08170a:   vzeroupper 
  0xee08170d:   mov    %ebp,0x230(%edi)
  0xee081713:   mov    %eax,0x228(%edi)
  0xee081719:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee08171e:   add    $0x4,%esp
  0xee081721:   push   %eax
  0xee081722:   push   %edx
  0xee081723:   push   %ecx
  0xee081724:   call   0xf704a910 = Thread::current()
  0xee081729:   pop    %ecx
  0xee08172a:   pop    %edx
  0xee08172b:   cmp    %eax,%edi
  0xee08172d:   je     0xee081744
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee081733:   push   $0xf78b5a48
  0xee081738:   call   0xee08173d
  0xee08173d:   pusha  
  0xee08173e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081743:   hlt    
  0xee081744:   pop    %eax
  0xee081745:   movl   $0x0,0x228(%edi)
  0xee08174f:   movl   $0x0,0x230(%edi)
  0xee081759:   movl   $0x0,0x22c(%edi)
  0xee081763:   vzeroupper 
  0xee081766:   cmpl   $0x0,0x4(%edi)
  0xee08176a:   jne    0xee05bbe0
  0xee081770:   mov    -0x20(%ebp),%esi
  0xee081773:   mov    -0x1c(%ebp),%edi
  0xee081776:   lea    0x0(%ebp,%edi,4),%edi
  0xee08177a:   ret    
  0xee08177b:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee081780:   call   0xee081785
  0xee081785:   pusha  
  0xee081786:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee08178b:   hlt    
  0xee08178c:   movzbl 0x5(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee081790:   add    $0x5,%esi
  0xee081793:   jmp    *-0x833daa0(,%ebx,4)
  0xee08179a:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee0817a1:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee0817a4:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee0817a7:   lea    0x0(%ebp,%edi,4),%edi
  0xee0817ab:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee0817ac:   push   %edx
  0xee0817ad:   push   %ecx
  0xee0817ae:   call   0xf704a910 = Thread::current()
  0xee0817b3:   pop    %ecx
  0xee0817b4:   pop    %edx
  0xee0817b5:   mov    %eax,%ecx
  0xee0817b7:   pop    %eax
  0xee0817b8:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee0817bc:   je     0xee08187e                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee0817c2:   call   0xee0817cc                   ;;  294:     __ call_VM(noreg,
  0xee0817c7:   jmp    0xee08186d
  0xee0817cc:   lea    0x4(%esp),%eax
  0xee0817d0:   mov    %esi,-0x20(%ebp)
  0xee0817d3:   cmpl   $0x0,-0x8(%ebp)
  0xee0817d7:   je     0xee0817ee
  0xee0817dd:   push   $0xf78569d8
  0xee0817e2:   call   0xee0817e7
  0xee0817e7:   pusha  
  0xee0817e8:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0817ed:   hlt    
  0xee0817ee:   push   %eax
  0xee0817ef:   push   %edx
  0xee0817f0:   push   %ecx
  0xee0817f1:   call   0xf704a910 = Thread::current()
  0xee0817f6:   pop    %ecx
  0xee0817f7:   pop    %edx
  0xee0817f8:   mov    %eax,%edi
  0xee0817fa:   pop    %eax
  0xee0817fb:   push   %edi
  0xee0817fc:   vzeroupper 
  0xee0817ff:   mov    %ebp,0x230(%edi)
  0xee081805:   mov    %eax,0x228(%edi)
  0xee08180b:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee081810:   add    $0x4,%esp
  0xee081813:   push   %eax
  0xee081814:   push   %edx
  0xee081815:   push   %ecx
  0xee081816:   call   0xf704a910 = Thread::current()
  0xee08181b:   pop    %ecx
  0xee08181c:   pop    %edx
  0xee08181d:   cmp    %eax,%edi
  0xee08181f:   je     0xee081836
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee081825:   push   $0xf78b5a48
  0xee08182a:   call   0xee08182f
  0xee08182f:   pusha  
  0xee081830:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081835:   hlt    
  0xee081836:   pop    %eax
  0xee081837:   movl   $0x0,0x228(%edi)
  0xee081841:   movl   $0x0,0x230(%edi)
  0xee08184b:   movl   $0x0,0x22c(%edi)
  0xee081855:   vzeroupper 
  0xee081858:   cmpl   $0x0,0x4(%edi)
  0xee08185c:   jne    0xee05bbe0
  0xee081862:   mov    -0x20(%ebp),%esi
  0xee081865:   mov    -0x1c(%ebp),%edi
  0xee081868:   lea    0x0(%ebp,%edi,4),%edi
  0xee08186c:   ret    
  0xee08186d:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee081872:   call   0xee081877
  0xee081877:   pusha  
  0xee081878:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee08187d:   hlt    
  0xee08187e:   movzbl 0x5(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee081882:   add    $0x5,%esi
  0xee081885:   jmp    *-0x833dea0(,%ebx,4)
  0xee08188c:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee081893:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee081896:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee081899:   lea    0x0(%ebp,%edi,4),%edi
  0xee08189d:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee08189e:   push   %edx
  0xee08189f:   push   %ecx
  0xee0818a0:   call   0xf704a910 = Thread::current()
  0xee0818a5:   pop    %ecx
  0xee0818a6:   pop    %edx
  0xee0818a7:   mov    %eax,%ecx
  0xee0818a9:   pop    %eax
  0xee0818aa:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee0818ae:   je     0xee081970                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee0818b4:   call   0xee0818be                   ;;  294:     __ call_VM(noreg,
  0xee0818b9:   jmp    0xee08195f
  0xee0818be:   lea    0x4(%esp),%eax
  0xee0818c2:   mov    %esi,-0x20(%ebp)
  0xee0818c5:   cmpl   $0x0,-0x8(%ebp)
  0xee0818c9:   je     0xee0818e0
  0xee0818cf:   push   $0xf78569d8
  0xee0818d4:   call   0xee0818d9
  0xee0818d9:   pusha  
  0xee0818da:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0818df:   hlt    
  0xee0818e0:   push   %eax
  0xee0818e1:   push   %edx
  0xee0818e2:   push   %ecx
  0xee0818e3:   call   0xf704a910 = Thread::current()
  0xee0818e8:   pop    %ecx
  0xee0818e9:   pop    %edx
  0xee0818ea:   mov    %eax,%edi
  0xee0818ec:   pop    %eax
  0xee0818ed:   push   %edi
  0xee0818ee:   vzeroupper 
  0xee0818f1:   mov    %ebp,0x230(%edi)
  0xee0818f7:   mov    %eax,0x228(%edi)
  0xee0818fd:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee081902:   add    $0x4,%esp
  0xee081905:   push   %eax
  0xee081906:   push   %edx
  0xee081907:   push   %ecx
  0xee081908:   call   0xf704a910 = Thread::current()
  0xee08190d:   pop    %ecx
  0xee08190e:   pop    %edx
  0xee08190f:   cmp    %eax,%edi
  0xee081911:   je     0xee081928
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee081917:   push   $0xf78b5a48
  0xee08191c:   call   0xee081921
  0xee081921:   pusha  
  0xee081922:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081927:   hlt    
  0xee081928:   pop    %eax
  0xee081929:   movl   $0x0,0x228(%edi)
  0xee081933:   movl   $0x0,0x230(%edi)
  0xee08193d:   movl   $0x0,0x22c(%edi)
  0xee081947:   vzeroupper 
  0xee08194a:   cmpl   $0x0,0x4(%edi)
  0xee08194e:   jne    0xee05bbe0
  0xee081954:   mov    -0x20(%ebp),%esi
  0xee081957:   mov    -0x1c(%ebp),%edi
  0xee08195a:   lea    0x0(%ebp,%edi,4),%edi
  0xee08195e:   ret    
  0xee08195f:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee081964:   call   0xee081969
  0xee081969:   pusha  
  0xee08196a:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee08196f:   hlt    
  0xee081970:   movzbl 0x5(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee081974:   add    $0x5,%esi
  0xee081977:   jmp    *-0x833cea0(,%ebx,4)
  0xee08197e:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee081985:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee081988:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee08198b:   lea    0x0(%ebp,%edi,4),%edi
  0xee08198f:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee081990:   push   %edx
  0xee081991:   push   %ecx
  0xee081992:   call   0xf704a910 = Thread::current()
  0xee081997:   pop    %ecx
  0xee081998:   pop    %edx
  0xee081999:   mov    %eax,%ecx
  0xee08199b:   pop    %eax
  0xee08199c:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee0819a0:   je     0xee081a62                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee0819a6:   call   0xee0819b0                   ;;  294:     __ call_VM(noreg,
  0xee0819ab:   jmp    0xee081a51
  0xee0819b0:   lea    0x4(%esp),%eax
  0xee0819b4:   mov    %esi,-0x20(%ebp)
  0xee0819b7:   cmpl   $0x0,-0x8(%ebp)
  0xee0819bb:   je     0xee0819d2
  0xee0819c1:   push   $0xf78569d8
  0xee0819c6:   call   0xee0819cb
  0xee0819cb:   pusha  
  0xee0819cc:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee0819d1:   hlt    
  0xee0819d2:   push   %eax
  0xee0819d3:   push   %edx
  0xee0819d4:   push   %ecx
  0xee0819d5:   call   0xf704a910 = Thread::current()
  0xee0819da:   pop    %ecx
  0xee0819db:   pop    %edx
  0xee0819dc:   mov    %eax,%edi
  0xee0819de:   pop    %eax
  0xee0819df:   push   %edi
  0xee0819e0:   vzeroupper 
  0xee0819e3:   mov    %ebp,0x230(%edi)
  0xee0819e9:   mov    %eax,0x228(%edi)
  0xee0819ef:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee0819f4:   add    $0x4,%esp
  0xee0819f7:   push   %eax
  0xee0819f8:   push   %edx
  0xee0819f9:   push   %ecx
  0xee0819fa:   call   0xf704a910 = Thread::current()
  0xee0819ff:   pop    %ecx
  0xee081a00:   pop    %edx
  0xee081a01:   cmp    %eax,%edi
  0xee081a03:   je     0xee081a1a
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee081a09:   push   $0xf78b5a48
  0xee081a0e:   call   0xee081a13
  0xee081a13:   pusha  
  0xee081a14:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081a19:   hlt    
  0xee081a1a:   pop    %eax
  0xee081a1b:   movl   $0x0,0x228(%edi)
  0xee081a25:   movl   $0x0,0x230(%edi)
  0xee081a2f:   movl   $0x0,0x22c(%edi)
  0xee081a39:   vzeroupper 
  0xee081a3c:   cmpl   $0x0,0x4(%edi)
  0xee081a40:   jne    0xee05bbe0
  0xee081a46:   mov    -0x20(%ebp),%esi
  0xee081a49:   mov    -0x1c(%ebp),%edi
  0xee081a4c:   lea    0x0(%ebp,%edi,4),%edi
  0xee081a50:   ret    
  0xee081a51:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee081a56:   call   0xee081a5b
  0xee081a5b:   pusha  
  0xee081a5c:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081a61:   hlt    
  0xee081a62:   movzbl 0x6(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee081a66:   add    $0x6,%esi
  0xee081a69:   jmp    *-0x833caa0(,%ebx,4)
  0xee081a70:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  253:     __ MacroAssembler::verify_FPU(UseSSE >= 2 ? 0 : 1, "generate_deopt_entry_for in interpreter");
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee081a77:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee081a7a:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee081a7d:   lea    0x0(%ebp,%edi,4),%edi
  0xee081a81:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee081a82:   push   %edx
  0xee081a83:   push   %ecx
  0xee081a84:   call   0xf704a910 = Thread::current()
  0xee081a89:   pop    %ecx
  0xee081a8a:   pop    %edx
  0xee081a8b:   mov    %eax,%ecx
  0xee081a8d:   pop    %eax
  0xee081a8e:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee081a92:   je     0xee081b54                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee081a98:   call   0xee081aa2                   ;;  294:     __ call_VM(noreg,
  0xee081a9d:   jmp    0xee081b43
  0xee081aa2:   lea    0x4(%esp),%eax
  0xee081aa6:   mov    %esi,-0x20(%ebp)
  0xee081aa9:   cmpl   $0x0,-0x8(%ebp)
  0xee081aad:   je     0xee081ac4
  0xee081ab3:   push   $0xf78569d8
  0xee081ab8:   call   0xee081abd
  0xee081abd:   pusha  
  0xee081abe:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081ac3:   hlt    
  0xee081ac4:   push   %eax
  0xee081ac5:   push   %edx
  0xee081ac6:   push   %ecx
  0xee081ac7:   call   0xf704a910 = Thread::current()
  0xee081acc:   pop    %ecx
  0xee081acd:   pop    %edx
  0xee081ace:   mov    %eax,%edi
  0xee081ad0:   pop    %eax
  0xee081ad1:   push   %edi
  0xee081ad2:   vzeroupper 
  0xee081ad5:   mov    %ebp,0x230(%edi)
  0xee081adb:   mov    %eax,0x228(%edi)
  0xee081ae1:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee081ae6:   add    $0x4,%esp
  0xee081ae9:   push   %eax
  0xee081aea:   push   %edx
  0xee081aeb:   push   %ecx
  0xee081aec:   call   0xf704a910 = Thread::current()
  0xee081af1:   pop    %ecx
  0xee081af2:   pop    %edx
  0xee081af3:   cmp    %eax,%edi
  0xee081af5:   je     0xee081b0c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee081afb:   push   $0xf78b5a48
  0xee081b00:   call   0xee081b05
  0xee081b05:   pusha  
  0xee081b06:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081b0b:   hlt    
  0xee081b0c:   pop    %eax
  0xee081b0d:   movl   $0x0,0x228(%edi)
  0xee081b17:   movl   $0x0,0x230(%edi)
  0xee081b21:   movl   $0x0,0x22c(%edi)
  0xee081b2b:   vzeroupper 
  0xee081b2e:   cmpl   $0x0,0x4(%edi)
  0xee081b32:   jne    0xee05bbe0
  0xee081b38:   mov    -0x20(%ebp),%esi
  0xee081b3b:   mov    -0x1c(%ebp),%edi
  0xee081b3e:   lea    0x0(%ebp,%edi,4),%edi
  0xee081b42:   ret    
  0xee081b43:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee081b48:   call   0xee081b4d
  0xee081b4d:   pusha  
  0xee081b4e:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081b53:   hlt    
  0xee081b54:   movzbl 0x6(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee081b58:   add    $0x6,%esi
  0xee081b5b:   jmp    *-0x833d2a0(,%ebx,4)
  0xee081b62:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  251:     __ MacroAssembler::verify_FPU(UseSSE >= 1 ? 0 : 1, "generate_deopt_entry_for in interpreter");
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee081b69:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee081b6c:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee081b6f:   lea    0x0(%ebp,%edi,4),%edi
  0xee081b73:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee081b74:   push   %edx
  0xee081b75:   push   %ecx
  0xee081b76:   call   0xf704a910 = Thread::current()
  0xee081b7b:   pop    %ecx
  0xee081b7c:   pop    %edx
  0xee081b7d:   mov    %eax,%ecx
  0xee081b7f:   pop    %eax
  0xee081b80:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee081b84:   je     0xee081c46                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee081b8a:   call   0xee081b94                   ;;  294:     __ call_VM(noreg,
  0xee081b8f:   jmp    0xee081c35
  0xee081b94:   lea    0x4(%esp),%eax
  0xee081b98:   mov    %esi,-0x20(%ebp)
  0xee081b9b:   cmpl   $0x0,-0x8(%ebp)
  0xee081b9f:   je     0xee081bb6
  0xee081ba5:   push   $0xf78569d8
  0xee081baa:   call   0xee081baf
  0xee081baf:   pusha  
  0xee081bb0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081bb5:   hlt    
  0xee081bb6:   push   %eax
  0xee081bb7:   push   %edx
  0xee081bb8:   push   %ecx
  0xee081bb9:   call   0xf704a910 = Thread::current()
  0xee081bbe:   pop    %ecx
  0xee081bbf:   pop    %edx
  0xee081bc0:   mov    %eax,%edi
  0xee081bc2:   pop    %eax
  0xee081bc3:   push   %edi
  0xee081bc4:   vzeroupper 
  0xee081bc7:   mov    %ebp,0x230(%edi)
  0xee081bcd:   mov    %eax,0x228(%edi)
  0xee081bd3:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee081bd8:   add    $0x4,%esp
  0xee081bdb:   push   %eax
  0xee081bdc:   push   %edx
  0xee081bdd:   push   %ecx
  0xee081bde:   call   0xf704a910 = Thread::current()
  0xee081be3:   pop    %ecx
  0xee081be4:   pop    %edx
  0xee081be5:   cmp    %eax,%edi
  0xee081be7:   je     0xee081bfe
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee081bed:   push   $0xf78b5a48
  0xee081bf2:   call   0xee081bf7
  0xee081bf7:   pusha  
  0xee081bf8:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081bfd:   hlt    
  0xee081bfe:   pop    %eax
  0xee081bff:   movl   $0x0,0x228(%edi)
  0xee081c09:   movl   $0x0,0x230(%edi)
  0xee081c13:   movl   $0x0,0x22c(%edi)
  0xee081c1d:   vzeroupper 
  0xee081c20:   cmpl   $0x0,0x4(%edi)
  0xee081c24:   jne    0xee05bbe0
  0xee081c2a:   mov    -0x20(%ebp),%esi
  0xee081c2d:   mov    -0x1c(%ebp),%edi
  0xee081c30:   lea    0x0(%ebp,%edi,4),%edi
  0xee081c34:   ret    
  0xee081c35:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee081c3a:   call   0xee081c3f
  0xee081c3f:   pusha  
  0xee081c40:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081c45:   hlt    
  0xee081c46:   movzbl 0x6(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee081c4a:   add    $0x6,%esi
  0xee081c4d:   jmp    *-0x833d6a0(,%ebx,4)
  0xee081c54:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee081c5b:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee081c5e:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee081c61:   lea    0x0(%ebp,%edi,4),%edi
  0xee081c65:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee081c66:   push   %edx
  0xee081c67:   push   %ecx
  0xee081c68:   call   0xf704a910 = Thread::current()
  0xee081c6d:   pop    %ecx
  0xee081c6e:   pop    %edx
  0xee081c6f:   mov    %eax,%ecx
  0xee081c71:   pop    %eax
  0xee081c72:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee081c76:   je     0xee081d38                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee081c7c:   call   0xee081c86                   ;;  294:     __ call_VM(noreg,
  0xee081c81:   jmp    0xee081d27
  0xee081c86:   lea    0x4(%esp),%eax
  0xee081c8a:   mov    %esi,-0x20(%ebp)
  0xee081c8d:   cmpl   $0x0,-0x8(%ebp)
  0xee081c91:   je     0xee081ca8
  0xee081c97:   push   $0xf78569d8
  0xee081c9c:   call   0xee081ca1
  0xee081ca1:   pusha  
  0xee081ca2:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081ca7:   hlt    
  0xee081ca8:   push   %eax
  0xee081ca9:   push   %edx
  0xee081caa:   push   %ecx
  0xee081cab:   call   0xf704a910 = Thread::current()
  0xee081cb0:   pop    %ecx
  0xee081cb1:   pop    %edx
  0xee081cb2:   mov    %eax,%edi
  0xee081cb4:   pop    %eax
  0xee081cb5:   push   %edi
  0xee081cb6:   vzeroupper 
  0xee081cb9:   mov    %ebp,0x230(%edi)
  0xee081cbf:   mov    %eax,0x228(%edi)
  0xee081cc5:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee081cca:   add    $0x4,%esp
  0xee081ccd:   push   %eax
  0xee081cce:   push   %edx
  0xee081ccf:   push   %ecx
  0xee081cd0:   call   0xf704a910 = Thread::current()
  0xee081cd5:   pop    %ecx
  0xee081cd6:   pop    %edx
  0xee081cd7:   cmp    %eax,%edi
  0xee081cd9:   je     0xee081cf0
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee081cdf:   push   $0xf78b5a48
  0xee081ce4:   call   0xee081ce9
  0xee081ce9:   pusha  
  0xee081cea:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081cef:   hlt    
  0xee081cf0:   pop    %eax
  0xee081cf1:   movl   $0x0,0x228(%edi)
  0xee081cfb:   movl   $0x0,0x230(%edi)
  0xee081d05:   movl   $0x0,0x22c(%edi)
  0xee081d0f:   vzeroupper 
  0xee081d12:   cmpl   $0x0,0x4(%edi)
  0xee081d16:   jne    0xee05bbe0
  0xee081d1c:   mov    -0x20(%ebp),%esi
  0xee081d1f:   mov    -0x1c(%ebp),%edi
  0xee081d22:   lea    0x0(%ebp,%edi,4),%edi
  0xee081d26:   ret    
  0xee081d27:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee081d2c:   call   0xee081d31
  0xee081d31:   pusha  
  0xee081d32:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081d37:   hlt    
  0xee081d38:   movzbl 0x6(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee081d3c:   add    $0x6,%esi
  0xee081d3f:   jmp    *-0x833daa0(,%ebx,4)
  0xee081d46:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee081d4d:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee081d50:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee081d53:   lea    0x0(%ebp,%edi,4),%edi
  0xee081d57:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee081d58:   push   %edx
  0xee081d59:   push   %ecx
  0xee081d5a:   call   0xf704a910 = Thread::current()
  0xee081d5f:   pop    %ecx
  0xee081d60:   pop    %edx
  0xee081d61:   mov    %eax,%ecx
  0xee081d63:   pop    %eax
  0xee081d64:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee081d68:   je     0xee081e2a                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee081d6e:   call   0xee081d78                   ;;  294:     __ call_VM(noreg,
  0xee081d73:   jmp    0xee081e19
  0xee081d78:   lea    0x4(%esp),%eax
  0xee081d7c:   mov    %esi,-0x20(%ebp)
  0xee081d7f:   cmpl   $0x0,-0x8(%ebp)
  0xee081d83:   je     0xee081d9a
  0xee081d89:   push   $0xf78569d8
  0xee081d8e:   call   0xee081d93
  0xee081d93:   pusha  
  0xee081d94:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081d99:   hlt    
  0xee081d9a:   push   %eax
  0xee081d9b:   push   %edx
  0xee081d9c:   push   %ecx
  0xee081d9d:   call   0xf704a910 = Thread::current()
  0xee081da2:   pop    %ecx
  0xee081da3:   pop    %edx
  0xee081da4:   mov    %eax,%edi
  0xee081da6:   pop    %eax
  0xee081da7:   push   %edi
  0xee081da8:   vzeroupper 
  0xee081dab:   mov    %ebp,0x230(%edi)
  0xee081db1:   mov    %eax,0x228(%edi)
  0xee081db7:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee081dbc:   add    $0x4,%esp
  0xee081dbf:   push   %eax
  0xee081dc0:   push   %edx
  0xee081dc1:   push   %ecx
  0xee081dc2:   call   0xf704a910 = Thread::current()
  0xee081dc7:   pop    %ecx
  0xee081dc8:   pop    %edx
  0xee081dc9:   cmp    %eax,%edi
  0xee081dcb:   je     0xee081de2
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee081dd1:   push   $0xf78b5a48
  0xee081dd6:   call   0xee081ddb
  0xee081ddb:   pusha  
  0xee081ddc:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081de1:   hlt    
  0xee081de2:   pop    %eax
  0xee081de3:   movl   $0x0,0x228(%edi)
  0xee081ded:   movl   $0x0,0x230(%edi)
  0xee081df7:   movl   $0x0,0x22c(%edi)
  0xee081e01:   vzeroupper 
  0xee081e04:   cmpl   $0x0,0x4(%edi)
  0xee081e08:   jne    0xee05bbe0
  0xee081e0e:   mov    -0x20(%ebp),%esi
  0xee081e11:   mov    -0x1c(%ebp),%edi
  0xee081e14:   lea    0x0(%ebp,%edi,4),%edi
  0xee081e18:   ret    
  0xee081e19:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee081e1e:   call   0xee081e23
  0xee081e23:   pusha  
  0xee081e24:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081e29:   hlt    
  0xee081e2a:   movzbl 0x6(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee081e2e:   add    $0x6,%esi
  0xee081e31:   jmp    *-0x833dea0(,%ebx,4)
  0xee081e38:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee081e3f:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee081e42:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee081e45:   lea    0x0(%ebp,%edi,4),%edi
  0xee081e49:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee081e4a:   push   %edx
  0xee081e4b:   push   %ecx
  0xee081e4c:   call   0xf704a910 = Thread::current()
  0xee081e51:   pop    %ecx
  0xee081e52:   pop    %edx
  0xee081e53:   mov    %eax,%ecx
  0xee081e55:   pop    %eax
  0xee081e56:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee081e5a:   je     0xee081f1c                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee081e60:   call   0xee081e6a                   ;;  294:     __ call_VM(noreg,
  0xee081e65:   jmp    0xee081f0b
  0xee081e6a:   lea    0x4(%esp),%eax
  0xee081e6e:   mov    %esi,-0x20(%ebp)
  0xee081e71:   cmpl   $0x0,-0x8(%ebp)
  0xee081e75:   je     0xee081e8c
  0xee081e7b:   push   $0xf78569d8
  0xee081e80:   call   0xee081e85
  0xee081e85:   pusha  
  0xee081e86:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081e8b:   hlt    
  0xee081e8c:   push   %eax
  0xee081e8d:   push   %edx
  0xee081e8e:   push   %ecx
  0xee081e8f:   call   0xf704a910 = Thread::current()
  0xee081e94:   pop    %ecx
  0xee081e95:   pop    %edx
  0xee081e96:   mov    %eax,%edi
  0xee081e98:   pop    %eax
  0xee081e99:   push   %edi
  0xee081e9a:   vzeroupper 
  0xee081e9d:   mov    %ebp,0x230(%edi)
  0xee081ea3:   mov    %eax,0x228(%edi)
  0xee081ea9:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee081eae:   add    $0x4,%esp
  0xee081eb1:   push   %eax
  0xee081eb2:   push   %edx
  0xee081eb3:   push   %ecx
  0xee081eb4:   call   0xf704a910 = Thread::current()
  0xee081eb9:   pop    %ecx
  0xee081eba:   pop    %edx
  0xee081ebb:   cmp    %eax,%edi
  0xee081ebd:   je     0xee081ed4
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee081ec3:   push   $0xf78b5a48
  0xee081ec8:   call   0xee081ecd
  0xee081ecd:   pusha  
  0xee081ece:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081ed3:   hlt    
  0xee081ed4:   pop    %eax
  0xee081ed5:   movl   $0x0,0x228(%edi)
  0xee081edf:   movl   $0x0,0x230(%edi)
  0xee081ee9:   movl   $0x0,0x22c(%edi)
  0xee081ef3:   vzeroupper 
  0xee081ef6:   cmpl   $0x0,0x4(%edi)
  0xee081efa:   jne    0xee05bbe0
  0xee081f00:   mov    -0x20(%ebp),%esi
  0xee081f03:   mov    -0x1c(%ebp),%edi
  0xee081f06:   lea    0x0(%ebp,%edi,4),%edi
  0xee081f0a:   ret    
  0xee081f0b:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee081f10:   call   0xee081f15
  0xee081f15:   pusha  
  0xee081f16:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081f1b:   hlt    
  0xee081f1c:   movzbl 0x6(%esi),%ebx               ;;  298:     __ bind(L);
                                                    ;;  301:     __ dispatch_next(state, step);
  0xee081f20:   add    $0x6,%esi
  0xee081f23:   jmp    *-0x833cea0(,%ebx,4)
  0xee081f2a:   movl   $0x0,-0x8(%ebp)              ;;  247:   address entry = __ pc();
                                                    ;;  258:   __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);
  0xee081f31:   mov    -0x20(%ebp),%esi             ;;  259:   __ restore_bcp();
  0xee081f34:   mov    -0x1c(%ebp),%edi             ;;  260:   __ restore_locals();
  0xee081f37:   lea    0x0(%ebp,%edi,4),%edi
  0xee081f3b:   push   %eax                         ;;  262:   NOT_LP64(__ get_thread(thread));
  0xee081f3c:   push   %edx
  0xee081f3d:   push   %ecx
  0xee081f3e:   call   0xf704a910 = Thread::current()
  0xee081f43:   pop    %ecx
  0xee081f44:   pop    %edx
  0xee081f45:   mov    %eax,%ecx
  0xee081f47:   pop    %eax
  0xee081f48:   cmpl   $0x0,0x4(%ecx)               ;;  292:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0xee081f4c:   je     0xee08200e                   ;;  293:     __ jcc(Assembler::zero, L);
  0xee081f52:   call   0xee081f5c                   ;;  294:     __ call_VM(noreg,
  0xee081f57:   jmp    0xee081ffd
  0xee081f5c:   lea    0x4(%esp),%eax
  0xee081f60:   mov    %esi,-0x20(%ebp)
  0xee081f63:   cmpl   $0x0,-0x8(%ebp)
  0xee081f67:   je     0xee081f7e
  0xee081f6d:   push   $0xf78569d8
  0xee081f72:   call   0xee081f77
  0xee081f77:   pusha  
  0xee081f78:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081f7d:   hlt    
  0xee081f7e:   push   %eax
  0xee081f7f:   push   %edx
  0xee081f80:   push   %ecx
  0xee081f81:   call   0xf704a910 = Thread::current()
  0xee081f86:   pop    %ecx
  0xee081f87:   pop    %edx
  0xee081f88:   mov    %eax,%edi
  0xee081f8a:   pop    %eax
  0xee081f8b:   push   %edi
  0xee081f8c:   vzeroupper 
  0xee081f8f:   mov    %ebp,0x230(%edi)
  0xee081f95:   mov    %eax,0x228(%edi)
  0xee081f9b:   call   0xf6c0b360 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0xee081fa0:   add    $0x4,%esp
  0xee081fa3:   push   %eax
  0xee081fa4:   push   %edx
  0xee081fa5:   push   %ecx
  0xee081fa6:   call   0xf704a910 = Thread::current()
  0xee081fab:   pop    %ecx
  0xee081fac:   pop    %edx
  0xee081fad:   cmp    %eax,%edi
  0xee081faf:   je     0xee081fc6
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xee081fb5:   push   $0xf78b5a48
  0xee081fba:   call   0xee081fbf
  0xee081fbf:   pusha  
  0xee081fc0:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee081fc5:   hlt    
  0xee081fc6:   pop    %eax
  0xee081fc7:   movl   $0x0,0x228(%edi)
  0xee081fd1:   movl   $0x0,0x230(%edi)
  0xee081fdb:   movl   $0x0,0x22c(%edi)
  0xee081fe5:   vzeroupper 
  0xee081fe8:   cmpl   $0x0,0x4(%edi)
  0xee081fec:   jne    0xee05bbe0
  0xee081ff2:   mov    -0x20(%ebp),%esi
  0xee081ff5:   mov    -0x1c(%ebp),%edi
  0xee081ff8:   lea    0x0(%ebp,%edi,4),%edi
  0xee081ffc:   ret    
  0xee081ffd:   push   $0xf77a6b02                  ;;  297:     __ should_not_reach_here();
  0xee082002:   call   0xee082007
  0xee082007:   pusha  
  0xee082008:   call   0xf70233c0 = MacroAssembler::debug32(int, int, int, int, int, int, int, int, int, char*)
  0xee08200d:   hlt    
  0xee08200e:   jmp    0xee079099                   ;;  298:     __ bind(L);
                                                    ;;  303:     __ jump_to_entry(continuation);
  0xee082013:   nop
--------------------------------------------------------------------------------
----------------------------------------------------------------------

2143297536
32257
