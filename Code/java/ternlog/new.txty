CompileCommand: print logic.workload
OpenJDK 64-Bit Server VM warning: printing of assembly code is enabled; turning on DebugNonSafepoints to gain additional output

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 96 ------------------------
{method}
 - this oop:          0x00007fe99bcf24d0
 - method holder:     'logic'
 - constants:         0x00007fe99bcf2090 constant pool [72]/operands[10] {0x00007fe99bcf2090} for 'logic' cache=0x00007fe99bcf2728
 - access:            0xc1000009  public static 
 - name:              'workload'
 - signature:         '([I[I[I[I)V'
 - max stack:         7
 - max locals:        8
 - size of params:    4
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x00007fea005eede0
 - adapters:          AHE@0x00007fe9fc68dfc0: 0xbbbb0000 i2c: 0x00007fea00631ee0 c2i: 0x00007fea00631fcf c2iUV: 0x00007fea00631f96 c2iNCI: 0x00007fea0063200c
 - compiled entry     0x00007fea00631fcf
 - code size:         68
 - code start:        0x00007fe99bcf2480
 - code end (excl):   0x00007fe99bcf24c4
 - method data:       0x00007fe99bcf2918
 - checked ex length: 0
 - linenumber start:  0x00007fe99bcf24c4
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 96 -----------------------
#
#  void ( int[int:>=0]:exact *, int[int:>=0]:exact *, int[int:>=0]:exact *, int[int:>=0]:exact * )
#
#r018 rsi:rsi   : parm 0: int[int:>=0]:exact *
#r016 rdx:rdx   : parm 1: int[int:>=0]:exact *
#r010 rcx:rcx   : parm 2: int[int:>=0]:exact *
#r004 r8:r8   : parm 3: int[int:>=0]:exact *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B28 B27 B26 )  Freq: 1

000     B1: #	out( B28 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (208 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

00c     movl    RAX, [RSI + #12 (8-bit)]	# range
00f     NullCheck RSI

00f     B2: #	out( B26 B3 ) <- in( B1 )  Freq: 0.999999
00f     testl   RAX, RAX	# unsigned
011     jbe,u   B26  P=0.015385 C=368160.000000

017     B3: #	out( B27 B4 ) <- in( B2 )  Freq: 0.984614
017     movl    R10, [RDX + #12 (8-bit)]	# range
01b     NullCheck RDX

01b     B4: #	out( B27 B5 ) <- in( B3 )  Freq: 0.984613
01b     testl   R10, R10	# unsigned
01e     jbe,u   B27  P=0.000001 C=-1.000000

024     B5: #	out( B27 B6 ) <- in( B4 )  Freq: 0.984612
024     movl    R14, RAX	# spill
027     decl    R14	# int
02a     cmpl    R14, R10	# unsigned
02d     jnb,u   B27  P=0.000001 C=-1.000000

033     B6: #	out( B27 B7 ) <- in( B5 )  Freq: 0.984611
033     movl    R10, [RCX + #12 (8-bit)]	# range
037     NullCheck RCX

037     B7: #	out( B27 B8 ) <- in( B6 )  Freq: 0.98461
037     testl   R10, R10	# unsigned
03a     jbe,u   B27  P=0.000001 C=-1.000000

040     B8: #	out( B27 B9 ) <- in( B7 )  Freq: 0.984609
040     cmpl    R14, R10	# unsigned
043     jnb,u   B27  P=0.000001 C=-1.000000

049     B9: #	out( B27 B10 ) <- in( B8 )  Freq: 0.984608
049     movl    R11, [R8 + #12 (8-bit)]	# range
04d     NullCheck R8

04d     B10: #	out( B27 B11 ) <- in( B9 )  Freq: 0.984607
04d     testl   R11, R11	# unsigned
050     jbe,u   B27  P=0.000001 C=-1.000000

056     B11: #	out( B27 B12 ) <- in( B10 )  Freq: 0.984606
056     cmpl    R14, R11	# unsigned
059     jnb,u   B27  P=0.000001 C=-1.000000

05f     B12: #	out( B27 B13 ) <- in( B11 )  Freq: 0.984605
05f     cmpl    R14, RAX	# unsigned
062     jnb,u   B27  P=0.000001 C=-1.000000

068     B13: #	out( B14 ) <- in( B12 )  Freq: 0.984604
068     movl    R9, RSI	# ptr -> int
06b     shrl    R9, #2
06f     andl    R9, #3	# int
073     movl    R10, #-1	# int
079     subl    R10, R9	# int
07c     andl    R10, #3	# int
080     incl    R10	# int
083     cmpl    R10, RAX
086     cmovlgt R10, RAX	# min
08a     xorl    R9, R9	# int

08d     B14: #	out( B14 B15 ) <- in( B13 B14 ) Loop( B14-B14 inner pre of N446) Freq: 1.96921
08d     movl    RBP, [R8 + #16 + R9 << #2]	# int
092     movl    R11, [RCX + #16 + R9 << #2]	# int
097     movl    RDI, [RDX + #16 + R9 << #2]	# int
09c     movl    RBX, RDI	# spill
09e     andl    RBX, R11	# int
0a1     orl     RDI, R11	# int
0a4     andl    RBX, RBP	# int
0a6     orl     RDI, RBP	# int
0a8     xorl    RBX, RDI	# int
0aa     movl    [RSI + #16 + R9 << #2], RBX	# int
0af     incl    R9	# int
0b2     cmpl    R9, R10
0b5     jl,s   B14	# loop end  P=0.500000 C=362496.000000

0b7     B15: #	out( B23 B16 ) <- in( B14 )  Freq: 0.984604
0b7     movl    R10, RAX	# spill
0ba     addl    R10, #-7	# int
0be     movl    RBP, #-2147483648	# int
0c3     cmpl    R14, R10
0c6     cmovll R10, RBP	# signed, int
0ca     cmpl    R9, R10
0cd     jge     B23  P=0.000001 C=-1.000000

0d3     B16: #	out( B17 ) <- in( B15 )  Freq: 0.984603
0d3     # castII of R9
0d3     movl    RBX, #8000	# int
0d8     # TLS is in R15

0d8     B17: #	out( B18 ) <- in( B16 B19 ) Loop( B17-B19 ) Freq: 63.9992
0d8     movl    R11, R10	# spill
0db     subl    R11, R9	# int
0de     cmpl    R11, RBX
0e1     cmovlgt R11, RBX	# min
0e5     addl    R11, R9	# int
        nop 	# 8 bytes pad for loops and calls

0f0     B18: #	out( B18 B19 ) <- in( B17 B18 ) Loop( B18-B18 inner main of N148 strip mined) Freq: 4159.95
0f0     movdqu  XMM0,[R8 + #16 + R9 << #2]	! load vector (16 bytes)
0f7     movdqu  XMM1,[RCX + #16 + R9 << #2]	! load vector (16 bytes)
0fe     movdqu  XMM2,[RDX + #16 + R9 << #2]	! load vector (16 bytes)
105     vpternlogd XMM2,XMM1,XMM0,#126	! vector ternary logic
10c     movdqu  [RSI + #16 + R9 << #2],XMM2	! store vector (16 bytes)
113     movdqu  XMM0,[RDX + #32 + R9 << #2]	! load vector (16 bytes)
11a     movdqu  XMM1,[R8 + #32 + R9 << #2]	! load vector (16 bytes)
121     movdqu  XMM2,[RCX + #32 + R9 << #2]	! load vector (16 bytes)
128     vpternlogd XMM0,XMM2,XMM1,#126	! vector ternary logic
12f     movdqu  [RSI + #32 + R9 << #2],XMM0	! store vector (16 bytes)
136     addl    R9, #8	# int
13a     cmpl    R9, R11
13d     jl,s   B18	# loop end  P=0.984615 C=362496.000000

13f     B19: #	out( B17 B20 ) <- in( B18 )  Freq: 63.9992
13f     movq    R11, [R15 + #296 (32-bit)]	# ptr
146     testl   rax, [R11]	# Safepoint: poll for GC        # logic::workload @ bci:64  L[0]=RSI L[1]=RDX L[2]=RCX L[3]=R8 L[4]=_ L[5]=_ L[6]=_ L[7]=R9
        # OopMap {r8=Oop rcx=Oop rdx=Oop rsi=Oop off=326/0x146}
149     cmpl    R9, R10
14c     jl,s   B17  P=0.984615 C=362496.000000

14e     B20: #	out( B23 B21 ) <- in( B19 )  Freq: 0.984603
14e     movl    R10, RAX	# spill
151     addl    R10, #-3	# int
155     cmpl    R14, R10
158     cmovll R10, RBP	# signed, int
15c     cmpl    R9, R10
15f     jge,s   B23  P=0.500000 C=-1.000000

161     B21: #	out( B22 ) <- in( B20 )  Freq: 0.492302
161     # castII of R9
        nop 	# 3 bytes pad for loops and calls

164     B22: #	out( B22 B23 ) <- in( B21 B22 ) Loop( B22-B22 inner post of N976) Freq: 0.984603
164     movdqu  XMM0,[R8 + #16 + R9 << #2]	! load vector (16 bytes)
16b     movdqu  XMM1,[RCX + #16 + R9 << #2]	! load vector (16 bytes)
172     movdqu  XMM2,[RDX + #16 + R9 << #2]	! load vector (16 bytes)
179     vpternlogd XMM2,XMM1,XMM0,#126	! vector ternary logic
180     movdqu  [RSI + #16 + R9 << #2],XMM2	! store vector (16 bytes)
187     addl    R9, #4	# int
18b     cmpl    R9, R10
18e     jl,s   B22	# loop end  P=0.500000 C=362496.000000

190     B23: #	out( B26 B24 ) <- in( B15 B22 B20 )  Freq: 0.984604
190     cmpl    R9, RAX
193     jge,s   B26  P=0.500000 C=-1.000000

195     B24: #	out( B25 ) <- in( B23 )  Freq: 0.492302
195     # castII of R9
        nop 	# 3 bytes pad for loops and calls

198     B25: #	out( B25 B26 ) <- in( B24 B25 ) Loop( B25-B25 inner post of N446) Freq: 0.984604
198     movl    R10, [R8 + #16 + R9 << #2]	# int
19d     movl    RBP, [RCX + #16 + R9 << #2]	# int
1a2     movl    R11, [RDX + #16 + R9 << #2]	# int
1a7     movl    RDI, R11	# spill
1aa     andl    RDI, RBP	# int
1ac     orl     R11, RBP	# int
1af     andl    RDI, R10	# int
1b2     orl     R11, R10	# int
1b5     xorl    RDI, R11	# int
1b8     movl    [RSI + #16 + R9 << #2], RDI	# int
1bd     incl    R9	# int
1c0     cmpl    R9, RAX
1c3     jl,s   B25	# loop end  P=0.500000 C=362496.000000

1c5     B26: #	out( N1 ) <- in( B25 B23 B2 )  Freq: 0.999989
1c5     addq    rsp, 48	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

1d4     ret

1d5     B27: #	out( N1 ) <- in( B10 B3 B4 B5 B12 B6 B7 B8 B11 B9 )  Freq: 9.93762e-06
1d5     movq    RBP, RSI	# spill
1d8     movq    [rsp + #0], RDX	# spill
1dc     movq    [rsp + #8], RCX	# spill
1e1     movq    [rsp + #16], R8	# spill
1e6     movl    RSI, #-138	# int
1eb     movl    [rsp + #24], RAX	# spill
1ef     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # logic::workload @ bci:25  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ L[5]=_ L[6]=_ L[7]=#0 STK[0]=#0 STK[1]=rsp + #24
        # OopMap {rbp=Oop [0]=Oop [8]=Oop [16]=Oop off=500/0x1f4}
1f4     ud2	# ShouldNotReachHere

208     B28: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
208     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
20f     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # logic::workload @ bci:24  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=532/0x214}
214     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    1391   96             logic::workload (68 bytes)
 total in heap  [0x00007fea00742410,0x00007fea00742ba0] = 1936
 relocation     [0x00007fea00742588,0x00007fea007425b0] = 40
 main code      [0x00007fea007425c0,0x00007fea00742800] = 576
 stub code      [0x00007fea00742800,0x00007fea00742818] = 24
 oops           [0x00007fea00742818,0x00007fea00742820] = 8
 metadata       [0x00007fea00742820,0x00007fea00742828] = 8
 scopes data    [0x00007fea00742828,0x00007fea007428c0] = 152
 scopes pcs     [0x00007fea007428c0,0x00007fea00742b70] = 688
 dependencies   [0x00007fea00742b70,0x00007fea00742b78] = 8
 nul chk table  [0x00007fea00742b78,0x00007fea00742ba0] = 40

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007fe99bcf24d0} 'workload' '([I[I[I[I)V' in 'logic'
  # parm0:    rsi:rsi   = '[I'
  # parm1:    rdx:rdx   = '[I'
  # parm2:    rcx:rcx   = '[I'
  # parm3:    r8:r8     = '[I'
  #           [sp+0x40]  (sp of caller)
 ;; N1: #	out( B1 ) <- in( B28 B27 B26 )  Freq: 1
 ;; B1: #	out( B28 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fea007425c0:   mov    %eax,-0x16000(%rsp)
  0x00007fea007425c7:   push   %rbp
  0x00007fea007425c8:   sub    $0x30,%rsp                   ;*synchronization entry
                                                            ; - logic::workload@-1 (line 7)
  0x00007fea007425cc:   mov    0xc(%rsi),%eax               ; implicit exception: dispatches to 0x00007fea007427c8
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@24 (line 10)
 ;; B2: #	out( B26 B3 ) <- in( B1 )  Freq: 0.999999
  0x00007fea007425cf:   test   %eax,%eax
  0x00007fea007425d1:   jbe    0x00007fea00742785           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@25 (line 10)
 ;; B3: #	out( B27 B4 ) <- in( B2 )  Freq: 0.984614
  0x00007fea007425d7:   mov    0xc(%rdx),%r10d              ; implicit exception: dispatches to 0x00007fea00742795
                                                            ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@34 (line 14)
 ;; B4: #	out( B27 B5 ) <- in( B3 )  Freq: 0.984613
  0x00007fea007425db:   test   %r10d,%r10d
  0x00007fea007425de:   jbe    0x00007fea00742795
 ;; B5: #	out( B27 B6 ) <- in( B4 )  Freq: 0.984612
  0x00007fea007425e4:   mov    %eax,%r14d
  0x00007fea007425e7:   dec    %r14d
  0x00007fea007425ea:   cmp    %r10d,%r14d
  0x00007fea007425ed:   jae    0x00007fea00742795
 ;; B6: #	out( B27 B7 ) <- in( B5 )  Freq: 0.984611
  0x00007fea007425f3:   mov    0xc(%rcx),%r10d              ; implicit exception: dispatches to 0x00007fea00742795
                                                            ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@38 (line 14)
 ;; B7: #	out( B27 B8 ) <- in( B6 )  Freq: 0.98461
  0x00007fea007425f7:   test   %r10d,%r10d
  0x00007fea007425fa:   jbe    0x00007fea00742795
 ;; B8: #	out( B27 B9 ) <- in( B7 )  Freq: 0.984609
  0x00007fea00742600:   cmp    %r10d,%r14d
  0x00007fea00742603:   jae    0x00007fea00742795
 ;; B9: #	out( B27 B10 ) <- in( B8 )  Freq: 0.984608
  0x00007fea00742609:   mov    0xc(%r8),%r11d               ; implicit exception: dispatches to 0x00007fea00742795
                                                            ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@43 (line 14)
 ;; B10: #	out( B27 B11 ) <- in( B9 )  Freq: 0.984607
  0x00007fea0074260d:   test   %r11d,%r11d
  0x00007fea00742610:   jbe    0x00007fea00742795
 ;; B11: #	out( B27 B12 ) <- in( B10 )  Freq: 0.984606
  0x00007fea00742616:   cmp    %r11d,%r14d
  0x00007fea00742619:   jae    0x00007fea00742795
 ;; B12: #	out( B27 B13 ) <- in( B11 )  Freq: 0.984605
  0x00007fea0074261f:   cmp    %eax,%r14d
  0x00007fea00742622:   jae    0x00007fea00742795
 ;; B13: #	out( B14 ) <- in( B12 )  Freq: 0.984604
  0x00007fea00742628:   mov    %esi,%r9d
  0x00007fea0074262b:   shr    $0x2,%r9d
  0x00007fea0074262f:   and    $0x3,%r9d
  0x00007fea00742633:   mov    $0xffffffff,%r10d
  0x00007fea00742639:   sub    %r9d,%r10d
  0x00007fea0074263c:   and    $0x3,%r10d
  0x00007fea00742640:   inc    %r10d
  0x00007fea00742643:   cmp    %eax,%r10d
  0x00007fea00742646:   cmovg  %eax,%r10d
  0x00007fea0074264a:   xor    %r9d,%r9d                    ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@28 (line 14)
 ;; B14: #	out( B14 B15 ) <- in( B13 B14 ) Loop( B14-B14 inner pre of N446) Freq: 1.96921
  0x00007fea0074264d:   mov    0x10(%r8,%r9,4),%ebp         ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@43 (line 14)
  0x00007fea00742652:   mov    0x10(%rcx,%r9,4),%r11d       ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@38 (line 14)
  0x00007fea00742657:   mov    0x10(%rdx,%r9,4),%edi        ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@34 (line 14)
  0x00007fea0074265c:   mov    %edi,%ebx
  0x00007fea0074265e:   and    %r11d,%ebx
  0x00007fea00742661:   or     %r11d,%edi
  0x00007fea00742664:   and    %ebp,%ebx
  0x00007fea00742666:   or     %ebp,%edi
  0x00007fea00742668:   xor    %edi,%ebx
  0x00007fea0074266a:   mov    %ebx,0x10(%rsi,%r9,4)        ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@60 (line 14)
  0x00007fea0074266f:   inc    %r9d                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@61 (line 10)
  0x00007fea00742672:   cmp    %r10d,%r9d
  0x00007fea00742675:   jl     0x00007fea0074264d           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@25 (line 10)
 ;; B15: #	out( B23 B16 ) <- in( B14 )  Freq: 0.984604
  0x00007fea00742677:   mov    %eax,%r10d
  0x00007fea0074267a:   add    $0xfffffff9,%r10d
  0x00007fea0074267e:   mov    $0x80000000,%ebp
  0x00007fea00742683:   cmp    %r10d,%r14d
  0x00007fea00742686:   cmovl  %ebp,%r10d
  0x00007fea0074268a:   cmp    %r10d,%r9d
  0x00007fea0074268d:   jge    0x00007fea00742750
 ;; B16: #	out( B17 ) <- in( B15 )  Freq: 0.984603
  0x00007fea00742693:   mov    $0x1f40,%ebx
 ;; B17: #	out( B18 ) <- in( B16 B19 ) Loop( B17-B19 ) Freq: 63.9992
  0x00007fea00742698:   mov    %r10d,%r11d
  0x00007fea0074269b:   sub    %r9d,%r11d
  0x00007fea0074269e:   cmp    %ebx,%r11d
  0x00007fea007426a1:   cmovg  %ebx,%r11d
  0x00007fea007426a5:   add    %r9d,%r11d
  0x00007fea007426a8:   nop
  0x00007fea007426a9:   nop
  0x00007fea007426aa:   nop
  0x00007fea007426ab:   nop
  0x00007fea007426ac:   nop
  0x00007fea007426ad:   nop
  0x00007fea007426ae:   nop
  0x00007fea007426af:   nop                                 ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@28 (line 14)
 ;; B18: #	out( B18 B19 ) <- in( B17 B18 ) Loop( B18-B18 inner main of N148 strip mined) Freq: 4159.95
  0x00007fea007426b0:   vmovdqu 0x10(%r8,%r9,4),%xmm0       ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@43 (line 14)
  0x00007fea007426b7:   vmovdqu 0x10(%rcx,%r9,4),%xmm1      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@38 (line 14)
  0x00007fea007426be:   vmovdqu 0x10(%rdx,%r9,4),%xmm2
  0x00007fea007426c5:   vpternlogd $0x7e,%xmm0,%xmm1,%xmm2
  0x00007fea007426cc:   vmovdqu %xmm2,0x10(%rsi,%r9,4)      ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@60 (line 14)
  0x00007fea007426d3:   vmovdqu 0x20(%rdx,%r9,4),%xmm0
  0x00007fea007426da:   vmovdqu 0x20(%r8,%r9,4),%xmm1       ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@43 (line 14)
  0x00007fea007426e1:   vmovdqu 0x20(%rcx,%r9,4),%xmm2      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@38 (line 14)
  0x00007fea007426e8:   vpternlogd $0x7e,%xmm1,%xmm2,%xmm0
  0x00007fea007426ef:   vmovdqu %xmm0,0x20(%rsi,%r9,4)      ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@60 (line 14)
  0x00007fea007426f6:   add    $0x8,%r9d                    ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@61 (line 10)
  0x00007fea007426fa:   cmp    %r11d,%r9d
  0x00007fea007426fd:   jl     0x00007fea007426b0           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@64 (line 10)
 ;; B19: #	out( B17 B20 ) <- in( B18 )  Freq: 63.9992
  0x00007fea007426ff:   mov    0x128(%r15),%r11             ; ImmutableOopMap {r8=Oop rcx=Oop rdx=Oop rsi=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) logic::workload@64 (line 10)
  0x00007fea00742706:   test   %eax,(%r11)                  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@64 (line 10)
                                                            ;   {poll}
  0x00007fea00742709:   cmp    %r10d,%r9d
  0x00007fea0074270c:   jl     0x00007fea00742698
 ;; B20: #	out( B23 B21 ) <- in( B19 )  Freq: 0.984603
  0x00007fea0074270e:   mov    %eax,%r10d
  0x00007fea00742711:   add    $0xfffffffd,%r10d
  0x00007fea00742715:   cmp    %r10d,%r14d
  0x00007fea00742718:   cmovl  %ebp,%r10d
  0x00007fea0074271c:   cmp    %r10d,%r9d
  0x00007fea0074271f:   jge    0x00007fea00742750
 ;; B21: #	out( B22 ) <- in( B20 )  Freq: 0.492302
  0x00007fea00742721:   nop
  0x00007fea00742722:   nop
  0x00007fea00742723:   nop                                 ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@28 (line 14)
 ;; B22: #	out( B22 B23 ) <- in( B21 B22 ) Loop( B22-B22 inner post of N976) Freq: 0.984603
  0x00007fea00742724:   vmovdqu 0x10(%r8,%r9,4),%xmm0       ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@43 (line 14)
  0x00007fea0074272b:   vmovdqu 0x10(%rcx,%r9,4),%xmm1      ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@38 (line 14)
  0x00007fea00742732:   vmovdqu 0x10(%rdx,%r9,4),%xmm2
  0x00007fea00742739:   vpternlogd $0x7e,%xmm0,%xmm1,%xmm2
  0x00007fea00742740:   vmovdqu %xmm2,0x10(%rsi,%r9,4)      ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@60 (line 14)
  0x00007fea00742747:   add    $0x4,%r9d                    ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@61 (line 10)
  0x00007fea0074274b:   cmp    %r10d,%r9d
  0x00007fea0074274e:   jl     0x00007fea00742724           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@25 (line 10)
 ;; B23: #	out( B26 B24 ) <- in( B15 B22 B20 )  Freq: 0.984604
  0x00007fea00742750:   cmp    %eax,%r9d
  0x00007fea00742753:   jge    0x00007fea00742785
 ;; B24: #	out( B25 ) <- in( B23 )  Freq: 0.492302
  0x00007fea00742755:   nop
  0x00007fea00742756:   nop
  0x00007fea00742757:   nop                                 ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@28 (line 14)
 ;; B25: #	out( B25 B26 ) <- in( B24 B25 ) Loop( B25-B25 inner post of N446) Freq: 0.984604
  0x00007fea00742758:   mov    0x10(%r8,%r9,4),%r10d        ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@43 (line 14)
  0x00007fea0074275d:   mov    0x10(%rcx,%r9,4),%ebp        ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@38 (line 14)
  0x00007fea00742762:   mov    0x10(%rdx,%r9,4),%r11d       ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@34 (line 14)
  0x00007fea00742767:   mov    %r11d,%edi
  0x00007fea0074276a:   and    %ebp,%edi
  0x00007fea0074276c:   or     %ebp,%r11d
  0x00007fea0074276f:   and    %r10d,%edi
  0x00007fea00742772:   or     %r10d,%r11d
  0x00007fea00742775:   xor    %r11d,%edi
  0x00007fea00742778:   mov    %edi,0x10(%rsi,%r9,4)        ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@60 (line 14)
  0x00007fea0074277d:   inc    %r9d                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@61 (line 10)
  0x00007fea00742780:   cmp    %eax,%r9d
  0x00007fea00742783:   jl     0x00007fea00742758           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@25 (line 10)
 ;; B26: #	out( N1 ) <- in( B25 B23 B2 )  Freq: 0.999989
  0x00007fea00742785:   add    $0x30,%rsp
  0x00007fea00742789:   pop    %rbp
  0x00007fea0074278a:   mov    0x128(%r15),%r10
  0x00007fea00742791:   test   %eax,(%r10)                  ;   {poll_return}
  0x00007fea00742794:   retq   
 ;; B27: #	out( N1 ) <- in( B10 B3 B4 B5 B12 B6 B7 B8 B11 B9 )  Freq: 9.93762e-06
  0x00007fea00742795:   mov    %rsi,%rbp
  0x00007fea00742798:   mov    %rdx,(%rsp)
  0x00007fea0074279c:   mov    %rcx,0x8(%rsp)
  0x00007fea007427a1:   mov    %r8,0x10(%rsp)
  0x00007fea007427a6:   mov    $0xffffff76,%esi
  0x00007fea007427ab:   mov    %eax,0x18(%rsp)
  0x00007fea007427af:   callq  0x00007fea005e5ec0           ; ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop [16]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) logic::workload@25 (line 10)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fea007427b4:   movabs $0x7fea05c9c4b0,%rdi         ;   {external_word}
  0x00007fea007427be:   and    $0xfffffffffffffff0,%rsp
  0x00007fea007427c2:   callq  0x00007fea054f3902           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fea007427c7:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@25 (line 10)
 ;; B28: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
  0x00007fea007427c8:   mov    $0xfffffff6,%esi
  0x00007fea007427cd:   nop
  0x00007fea007427ce:   nop
  0x00007fea007427cf:   callq  0x00007fea005e5ec0           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@24 (line 10)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fea007427d4:   movabs $0x7fea05c9c4b0,%rdi         ;   {external_word}
  0x00007fea007427de:   and    $0xfffffffffffffff0,%rsp
  0x00007fea007427e2:   callq  0x00007fea054f3902           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fea007427e7:   hlt                                 ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - logic::workload@24 (line 10)
  0x00007fea007427e8:   hlt    
  0x00007fea007427e9:   hlt    
  0x00007fea007427ea:   hlt    
  0x00007fea007427eb:   hlt    
  0x00007fea007427ec:   hlt    
  0x00007fea007427ed:   hlt    
  0x00007fea007427ee:   hlt    
  0x00007fea007427ef:   hlt    
  0x00007fea007427f0:   hlt    
  0x00007fea007427f1:   hlt    
  0x00007fea007427f2:   hlt    
  0x00007fea007427f3:   hlt    
  0x00007fea007427f4:   hlt    
  0x00007fea007427f5:   hlt    
  0x00007fea007427f6:   hlt    
  0x00007fea007427f7:   hlt    
  0x00007fea007427f8:   hlt    
  0x00007fea007427f9:   hlt    
  0x00007fea007427fa:   hlt    
  0x00007fea007427fb:   hlt    
  0x00007fea007427fc:   hlt    
  0x00007fea007427fd:   hlt    
  0x00007fea007427fe:   hlt    
  0x00007fea007427ff:   hlt    
[Exception Handler]
  0x00007fea00742800:   jmpq   0x00007fea006171a0           ;   {no_reloc}
[Deopt Handler Code]
  0x00007fea00742805:   callq  0x00007fea0074280a
  0x00007fea0074280a:   subq   $0x5,(%rsp)
  0x00007fea0074280f:   jmpq   0x00007fea006ef2e0           ;   {runtime_call DeoptimizationBlob}
  0x00007fea00742814:   hlt    
  0x00007fea00742815:   hlt    
  0x00007fea00742816:   hlt    
  0x00007fea00742817:   hlt    
--------------------------------------------------------------------------------
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007fea00742818:   0x0000000101d05988 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000101d05988}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007fea00742820:   0x00007fe99bcf24d0 {method} {0x00007fe99bcf24d0} 'workload' '([I[I[I[I)V' in 'logic'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007fea007425bf offset=ffffffff bits=0):
PcDesc(pc=0x00007fea007425cc offset=c bits=0):   logic::workload@-1 (line 7)
PcDesc(pc=0x00007fea007425cf offset=f bits=0):   logic::workload@24 (line 10)
PcDesc(pc=0x00007fea007425d7 offset=17 bits=0):   logic::workload@25 (line 10)
PcDesc(pc=0x00007fea007425db offset=1b bits=0):   logic::workload@34 (line 14)
PcDesc(pc=0x00007fea007425f7 offset=37 bits=0):   logic::workload@38 (line 14)
PcDesc(pc=0x00007fea0074260d offset=4d bits=0):   logic::workload@43 (line 14)
PcDesc(pc=0x00007fea0074264d offset=8d bits=0):   logic::workload@28 (line 14)
PcDesc(pc=0x00007fea00742652 offset=92 bits=0):   logic::workload@43 (line 14)
PcDesc(pc=0x00007fea00742657 offset=97 bits=0):   logic::workload@38 (line 14)
PcDesc(pc=0x00007fea0074265c offset=9c bits=0):   logic::workload@34 (line 14)
PcDesc(pc=0x00007fea0074266f offset=af bits=0):   logic::workload@60 (line 14)
PcDesc(pc=0x00007fea00742672 offset=b2 bits=0):   logic::workload@61 (line 10)
PcDesc(pc=0x00007fea00742677 offset=b7 bits=0):   logic::workload@25 (line 10)
PcDesc(pc=0x00007fea007426b0 offset=f0 bits=0):   logic::workload@28 (line 14)
PcDesc(pc=0x00007fea007426b7 offset=f7 bits=0):   logic::workload@43 (line 14)
PcDesc(pc=0x00007fea007426be offset=fe bits=0):   logic::workload@38 (line 14)
PcDesc(pc=0x00007fea007426d3 offset=113 bits=0):   logic::workload@60 (line 14)
PcDesc(pc=0x00007fea007426e1 offset=121 bits=0):   logic::workload@43 (line 14)
PcDesc(pc=0x00007fea007426e8 offset=128 bits=0):   logic::workload@38 (line 14)
PcDesc(pc=0x00007fea007426f6 offset=136 bits=0):   logic::workload@60 (line 14)
PcDesc(pc=0x00007fea007426fa offset=13a bits=0):   logic::workload@61 (line 10)
PcDesc(pc=0x00007fea007426ff offset=13f bits=0):   logic::workload@64 (line 10)
PcDesc(pc=0x00007fea00742706 offset=146 bits=1):   logic::workload@64 (line 10)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: reg r8 [16],oop
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: reg r9 [18],int
PcDesc(pc=0x00007fea00742709 offset=149 bits=0):   logic::workload@64 (line 10)
PcDesc(pc=0x00007fea00742724 offset=164 bits=0):   logic::workload@28 (line 14)
PcDesc(pc=0x00007fea0074272b offset=16b bits=0):   logic::workload@43 (line 14)
PcDesc(pc=0x00007fea00742732 offset=172 bits=0):   logic::workload@38 (line 14)
PcDesc(pc=0x00007fea00742747 offset=187 bits=0):   logic::workload@60 (line 14)
PcDesc(pc=0x00007fea0074274b offset=18b bits=0):   logic::workload@61 (line 10)
PcDesc(pc=0x00007fea00742750 offset=190 bits=0):   logic::workload@25 (line 10)
PcDesc(pc=0x00007fea00742758 offset=198 bits=0):   logic::workload@28 (line 14)
PcDesc(pc=0x00007fea0074275d offset=19d bits=0):   logic::workload@43 (line 14)
PcDesc(pc=0x00007fea00742762 offset=1a2 bits=0):   logic::workload@38 (line 14)
PcDesc(pc=0x00007fea00742767 offset=1a7 bits=0):   logic::workload@34 (line 14)
PcDesc(pc=0x00007fea0074277d offset=1bd bits=0):   logic::workload@60 (line 14)
PcDesc(pc=0x00007fea00742780 offset=1c0 bits=0):   logic::workload@61 (line 10)
PcDesc(pc=0x00007fea00742785 offset=1c5 bits=0):   logic::workload@25 (line 10)
PcDesc(pc=0x00007fea007427b4 offset=1f4 bits=1):   logic::workload@25 (line 10)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16],oop
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
   Expression stack
    - @0: 0
    - @1: stack[24]
PcDesc(pc=0x00007fea007427c8 offset=208 bits=0):   logic::workload@25 (line 10)
PcDesc(pc=0x00007fea007427d4 offset=214 bits=0):   logic::workload@24 (line 10)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
   Expression stack
    - @0: empty
    - @1: NULL

PcDesc(pc=0x00007fea007427e8 offset=228 bits=0):   logic::workload@24 (line 10)
PcDesc(pc=0x00007fea00742819 offset=259 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 3 OopMaps

ImmutableOopMap {r8=Oop rcx=Oop rdx=Oop rsi=Oop } pc offsets: 326 
ImmutableOopMap {rbp=Oop [0]=Oop [8]=Oop [16]=Oop } pc offsets: 500 
ImmutableOopMap {} pc offsets: 532 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007fea007425cc offset=c):
   logic::workload@-1 (line 7)
ScopeDesc(pc=0x00007fea007425cf offset=f):
   logic::workload@24 (line 10)
ScopeDesc(pc=0x00007fea007425d7 offset=17):
   logic::workload@25 (line 10)
ScopeDesc(pc=0x00007fea007425db offset=1b):
   logic::workload@34 (line 14)
ScopeDesc(pc=0x00007fea007425f7 offset=37):
   logic::workload@38 (line 14)
ScopeDesc(pc=0x00007fea0074260d offset=4d):
   logic::workload@43 (line 14)
ScopeDesc(pc=0x00007fea0074264d offset=8d):
   logic::workload@28 (line 14)
ScopeDesc(pc=0x00007fea00742652 offset=92):
   logic::workload@43 (line 14)
ScopeDesc(pc=0x00007fea00742657 offset=97):
   logic::workload@38 (line 14)
ScopeDesc(pc=0x00007fea0074265c offset=9c):
   logic::workload@34 (line 14)
ScopeDesc(pc=0x00007fea0074266f offset=af):
   logic::workload@60 (line 14)
ScopeDesc(pc=0x00007fea00742672 offset=b2):
   logic::workload@61 (line 10)
ScopeDesc(pc=0x00007fea00742677 offset=b7):
   logic::workload@25 (line 10)
ScopeDesc(pc=0x00007fea007426b0 offset=f0):
   logic::workload@28 (line 14)
ScopeDesc(pc=0x00007fea007426b7 offset=f7):
   logic::workload@43 (line 14)
ScopeDesc(pc=0x00007fea007426be offset=fe):
   logic::workload@38 (line 14)
ScopeDesc(pc=0x00007fea007426d3 offset=113):
   logic::workload@60 (line 14)
ScopeDesc(pc=0x00007fea007426e1 offset=121):
   logic::workload@43 (line 14)
ScopeDesc(pc=0x00007fea007426e8 offset=128):
   logic::workload@38 (line 14)
ScopeDesc(pc=0x00007fea007426f6 offset=136):
   logic::workload@60 (line 14)
ScopeDesc(pc=0x00007fea007426fa offset=13a):
   logic::workload@61 (line 10)
ScopeDesc(pc=0x00007fea007426ff offset=13f):
   logic::workload@64 (line 10)
ScopeDesc(pc=0x00007fea00742706 offset=146):
   logic::workload@64 (line 10)  reexecute=true
   Locals
    - l0: reg rsi [12],oop
    - l1: reg rdx [4],oop
    - l2: reg rcx [2],oop
    - l3: reg r8 [16],oop
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: reg r9 [18],int
ScopeDesc(pc=0x00007fea00742709 offset=149):
   logic::workload@64 (line 10)
ScopeDesc(pc=0x00007fea00742724 offset=164):
   logic::workload@28 (line 14)
ScopeDesc(pc=0x00007fea0074272b offset=16b):
   logic::workload@43 (line 14)
ScopeDesc(pc=0x00007fea00742732 offset=172):
   logic::workload@38 (line 14)
ScopeDesc(pc=0x00007fea00742747 offset=187):
   logic::workload@60 (line 14)
ScopeDesc(pc=0x00007fea0074274b offset=18b):
   logic::workload@61 (line 10)
ScopeDesc(pc=0x00007fea00742750 offset=190):
   logic::workload@25 (line 10)
ScopeDesc(pc=0x00007fea00742758 offset=198):
   logic::workload@28 (line 14)
ScopeDesc(pc=0x00007fea0074275d offset=19d):
   logic::workload@43 (line 14)
ScopeDesc(pc=0x00007fea00742762 offset=1a2):
   logic::workload@38 (line 14)
ScopeDesc(pc=0x00007fea00742767 offset=1a7):
   logic::workload@34 (line 14)
ScopeDesc(pc=0x00007fea0074277d offset=1bd):
   logic::workload@60 (line 14)
ScopeDesc(pc=0x00007fea00742780 offset=1c0):
   logic::workload@61 (line 10)
ScopeDesc(pc=0x00007fea00742785 offset=1c5):
   logic::workload@25 (line 10)
ScopeDesc(pc=0x00007fea007427b4 offset=1f4):
   logic::workload@25 (line 10)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: stack[8],oop
    - l3: stack[16],oop
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: 0
   Expression stack
    - @0: 0
    - @1: stack[24]
ScopeDesc(pc=0x00007fea007427c8 offset=208):
   logic::workload@25 (line 10)
ScopeDesc(pc=0x00007fea007427d4 offset=214):
   logic::workload@24 (line 10)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
   Expression stack
    - @0: empty
    - @1: NULL

ScopeDesc(pc=0x00007fea007427e8 offset=228):
   logic::workload@24 (line 10)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007fea00742588: a146
relocInfo@0x00007fea00742588 [type=10(poll) addr=0x00007fea00742706 offset=326]
         @0x00007fea0074258a: b08b
relocInfo@0x00007fea0074258a [type=11(poll_return) addr=0x00007fea00742791 offset=139]
         @0x00007fea0074258c: 641e
relocInfo@0x00007fea0074258c [type=6(runtime_call) addr=0x00007fea007427af offset=30 format=1] | [destination=0x00007fea005e5ec0]
         @0x00007fea0074258e: f80305c9c4b07fea7005
relocInfo@0x00007fea00742596 [type=7(external_word) addr=0x00007fea007427b4 offset=5 data={05c9c4b07fea}] | [target=0x00007fea05c9c4b0]
         @0x00007fea00742598: 640e
relocInfo@0x00007fea00742598 [type=6(runtime_call) addr=0x00007fea007427c2 offset=14 format=1] | [destination=0x00007fea054f3902]
         @0x00007fea0074259a: 640d
relocInfo@0x00007fea0074259a [type=6(runtime_call) addr=0x00007fea007427cf offset=13 format=1] | [destination=0x00007fea005e5ec0]
         @0x00007fea0074259c: f80305c9c4b07fea7005
relocInfo@0x00007fea007425a4 [type=7(external_word) addr=0x00007fea007427d4 offset=5 data={05c9c4b07fea}] | [target=0x00007fea05c9c4b0]
         @0x00007fea007425a6: 640e
relocInfo@0x00007fea007425a6 [type=6(runtime_call) addr=0x00007fea007427e2 offset=14 format=1] | [destination=0x00007fea054f3902]
         @0x00007fea007425a8: 001e
relocInfo@0x00007fea007425a8 [type=0(none) addr=0x00007fea00742800 offset=30]
         @0x00007fea007425aa: 6400
relocInfo@0x00007fea007425aa [type=6(runtime_call) addr=0x00007fea00742800 offset=0 format=1] | [destination=0x00007fea006171a0]
         @0x00007fea007425ac: 640f
relocInfo@0x00007fea007425ac [type=6(runtime_call) addr=0x00007fea0074280f offset=15 format=1] | [destination=0x00007fea006ef2e0]
         @0x00007fea007425ae: 0000
relocInfo@0x00007fea007425ae [type=0(none) addr=0x00007fea0074280f offset=0]
         @0x00007fea007425b0: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 4 entries, 36 bytes):
{
   < 0x00007fea007425cc, 0x00007fea007427c8 > < 0x00007fea007425d7, 0x00007fea00742795 > < 0x00007fea007425f3, 0x00007fea00742795 > 
   < 0x00007fea00742609, 0x00007fea00742795 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000101d05988 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000101d05988}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x00007fe99bcf24d0 {method} {0x00007fe99bcf24d0} 'workload' '([I[I[I[I)V' in 'logic'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
r[0] = 7
[Time] 4964 us
------------------------------------------------------------------------
static logic::workload([I[I[I[I)V
  interpreter_invocation_count:     7174 
  invocation_counter:               5000 
  backedge_counter:                 5064 
  mdo size: 552 bytes

0 bipush 64
2 newarray int
4 astore #4
6 bipush 64
8 newarray int
10 astore #5
12 bipush 64
14 newarray int
16 astore #6
18 iconst_0
19 istore #7
21 fast_iload #7
23 fast_aload_0
24 arraylength
25 if_icmpge 67
  0   bci: 25   BranchData          taken(7124) displacement(56)
                                    not taken(455887)
28 fast_aload_0
29 fast_iload #7
31 aload_1
32 fast_iload #7
34 iaload
35 aload_2
36 fast_iload #7
38 iaload
39 iand
40 aload_3
41 fast_iload #7
43 iaload
44 iand
45 aload_1
46 fast_iload #7
48 iaload
49 aload_2
50 fast_iload #7
52 iaload
53 ior
54 aload_3
55 fast_iload #7
57 iaload
58 ior
59 ixor
60 iastore
61 iinc #7 1
64 goto 21
  32  bci: 64   JumpData            taken(455887) displacement(-32)
67 return
------------------------------------------------------------------------
Total MDO size: 552 bytes
