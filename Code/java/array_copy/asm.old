CompileCommand: print test.main
OpenJDK 64-Bit Server VM warning: printing of assembly code is enabled; turning on DebugNonSafepoints to gain additional output

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 101 ------------------------
{method}
 - this oop:          0x00007fda79f0b6c0
 - method holder:     'test'
 - constants:         0x00007fda79f0b0a0 constant pool [84]/operands[5] {0x00007fda79f0b0a0} for 'test' cache=0x00007fda79f0b7a8
 - access:            0xc1000009  public static 
 - name:              'main'
 - signature:         '([Ljava/lang/String;)V'
 - max stack:         7
 - max locals:        11
 - size of params:    1
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x00007fdad5010c00
 - adapters:          AHE@0x00007fdad83ce590: 0xb0000000 i2c: 0x00007fdad508b760 c2i: 0x00007fdad508b840 c2iUV: 0x00007fdad508b80a c2iNCI: 0x00007fdad508b87d
 - compiled entry     0x00007fdad508b840
 - code size:         206
 - code start:        0x00007fda79f0b5c0
 - code end (excl):   0x00007fda79f0b68e
 - method data:       0x00007fda79f0b9b8
 - checked ex length: 0
 - linenumber start:  0x00007fda79f0b68e
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 101 -----------------------
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 96 --
#r583 rsp+92: in_preserve
#r582 rsp+88: return address
#r581 rsp+84: in_preserve
#r580 rsp+80: saved fp register
#r579 rsp+76: pad2, stack alignment
#r578 rsp+72: pad2, stack alignment
#r577 rsp+68: Fixed slot 1
#r576 rsp+64: Fixed slot 0
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N271: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B22 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (360 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

01c     movq    RBP, [RSI + #64 (8-bit)]	# ptr
020     movq    R13, [RSI + #56 (8-bit)]	# ptr
024     movl    RBX, [RSI + #40 (8-bit)]	# int
027     movl    R10, [RSI + #48 (8-bit)]	# int
02b     movl    [rsp + #12], R10	# spill
030     movq    RDI, RSI	# spill
        nop 	# 13 bytes pad for loops and calls
040     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
050     testq   RBP, RBP	# ptr
053     je     B22  P=0.001000 C=-1.000000

059     B2: #	out( B25 B3 ) <- in( B1 )  Freq: 0.999
059     movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
060     cmpl    R10, narrowklass: precise klass [B: 0x00007fda5401a400:Constant:exact *	# compressed klass ptr
067     jne,u   B25  P=0.000001 C=-1.000000

06d     B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
06d     movq    R14, RBP	# spill
070     # checkcastPP of R14

070     B4: #	out( B23 B5 ) <- in( B3 B22 )  Freq: 0.999999
070     testq   R13, R13	# ptr
073     je     B23  P=0.001000 C=-1.000000

079     B5: #	out( B25 B6 ) <- in( B4 )  Freq: 0.998999
079     movl    R11, [R13 + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
080     cmpl    R11, narrowklass: precise klass [B: 0x00007fda5401a400:Constant:exact *	# compressed klass ptr
087     jne,u   B25  P=0.000001 C=-1.000000

08d     B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
08d     # checkcastPP of R13

08d     B7: #	out( B24 B8 ) <- in( B6 B23 )  Freq: 0.999998
08d     movl    R8, [R14 + #12 (8-bit)]	# range
091     NullCheck R14

091     B8: #	out( B24 B9 ) <- in( B7 )  Freq: 0.999997
091     movl    RBP, [R13 + #12 (8-bit)]	# range
095     NullCheck R13

095     B9: #	out( B24 B10 ) <- in( B8 )  Freq: 0.999996
095     testl   RBP, RBP	# unsigned
097     jbe,u   B24  P=0.000001 C=-1.000000

09d     B10: #	out( B13 ) <- in( B9 )  Freq: 0.999995
09d     # TLS is in R15
09d     jmp,s   B13
        nop 	# 1 bytes pad for loops and calls

0a0     B11: #	out( B12 ) <- in( B17 B18 ) top-of-loop Freq: 403738
0a0     vector_mask_gen RDX 	! vector mask generator
0b2     vector_masked_load XMM0, [RDI], R10 	! vector masked copy
0bd     vector_masked_store [RSI], XMM0, R10 	! vector masked store

0c8     B12: #	out( B13 ) <- in( B11 B19 B16 ) top-of-loop Freq: 403738
0c8     
0c8     movsbl  R11, [R13 + #16 (8-bit)]	# byte
0cd     movq    R10, [R15 + #296 (32-bit)]	# ptr
0d4     movl    RCX, [rsp + #12]	# spill
0d8     addl    RCX, R11	# int
0db     movl    [rsp + #12], RCX	# spill
0df     incl    RBX	# int
0e1     testl   rax, [R10]	# Safepoint: poll for GC        # test::main @ bci:85  L[0]=_ L[1]=_ L[2]=R14 L[3]=R13 L[4]=RCX L[5]=RBX L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_
        # OopMap {r13=Oop r14=Oop off=225/0xe1}

0e4     B13: #	out( B21 B14 ) <- in( B10 B12 ) Loop( B13-B12 inner ) Freq: 403739
0e4     cmpl    RBX, #9000000
0ea     jge     B21  P=0.000000 C=199383.000000

0f0     B14: #	out( B20 B15 ) <- in( B13 )  Freq: 403739
0f0     movl    R10, RBX	# spill
0f3     andl    R10, #31	# int
0f7     movl    R11, RBX	# spill
0fa     andl    R11, #511	# int
101     movl    R9, R11	# spill
104     addl    R9, R10	# int
107     cmpl    R8, R9	# unsigned
10a     jb,u   B20  P=0.000001 C=-1.000000

110     B15: #	out( B20 B16 ) <- in( B14 )  Freq: 403738
110     cmpl    RBP, R9	# unsigned
113     jb,u   B20  P=0.000001 C=-1.000000

119     B16: #	out( B12 B17 ) <- in( B15 )  Freq: 403738
119     testl   R10, R10
        nop 	# 4 bytes pad for loops and calls
120     je,s   B12  P=0.000001 C=-1.000000

122     B17: #	out( B11 B18 ) <- in( B16 )  Freq: 403738
122     movslq  RDX, R10	# i2l
125     movslq  R10, R11	# i2l
128     leaq    RSI, [R13 + #16 + R10]	# ptr idxoff
12d     movq    R11, R14	# spill
130     addq    R11, R10	# ptr
133     movq    RDI, R11	# spill
136     addq    RDI, #16	# ptr
        nop 	# 6 bytes pad for loops and calls
140     cmpq    RSI, RDI	# ptr
143     jbe,u   B11  P=0.999999 C=-1.000000

149     B18: #	out( B11 B19 ) <- in( B17 )  Freq: 0.409099
149     leaq    R10, [R11 + #16 + RDX]	# ptr idxoff
14e     cmpq    R10, RSI	# ptr
151     jb,u   B11  P=0.999999 C=-1.000000

157     B19: #	out( B12 ) <- in( B18 )  Freq: 4.14531e-07
157     movl    [rsp + #4], R8	# spill
        nop 	# 4 bytes pad for loops and calls
160     call_leaf_nofp,runtime  jbyte_disjoint_arraycopy
        No JVM State Info
        # 
170     movl    R8, [rsp + #4]	# spill
175     jmp     B12

17a     B20: #	out( N271 ) <- in( B14 B15 )  Freq: 0.807477
17a     movl    RSI, #-52	# int
17f     movl    [rsp + #8], RBX	# spill
183     movq    [rsp + #16], R13	# spill
188     movq    [rsp + #24], R14	# spill
18d     movq    [rsp + #40], R13	# spill
192     movl    [rsp + #36], R11	# spill
197     movl    [rsp + #48], R10	# spill
19c     call,static  wrapper for: uncommon_trap(reason='intrinsic_or_type_checked_inlining' action='make_not_entrant' debug_id='0')
        # test::workload @ bci:5  L[0]=rsp + #40 L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #24 STK[1]=rsp + #36 STK[2]=rsp + #16 STK[3]=rsp + #36 STK[4]=rsp + #48
        # test::main @ bci:76  L[0]=_ L[1]=_ L[2]=rsp + #24 L[3]=rsp + #16 L[4]=_ L[5]=rsp + #8 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #12
        # OopMap {[16]=Oop [24]=Oop [40]=Oop off=420/0x1a4}
1a4     stop	# ShouldNotReachHere

1b8     B21: #	out( N271 ) <- in( B13 )  Freq: 0.192518
1b8     movl    RSI, #-187	# int
1bd     movq    RBP, R14	# spill
1c0     movq    [rsp + #0], R13	# spill
1c4     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
1d6     movl    [rsp + #16], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
1dc     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # test::main @ bci:57  L[0]=_ L[1]=_ L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #16 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #16 STK[1]=#9000000
        # OopMap {rbp=Oop [0]=Oop off=484/0x1e4}
1e4     stop	# ShouldNotReachHere

1f8     B22: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
1f8     xorl    R14, R14	# ptr
        nop 	# 5 bytes pad for loops and calls
200     jmp     B4

205     B23: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
205     xorl    R13, R13	# ptr
208     jmp     B7

20d     B24: #	out( N271 ) <- in( B9 B7 B8 )  Freq: 3.02655e-06
20d     movl    RSI, #-138	# int
212     movq    RBP, R14	# spill
215     movq    [rsp + #0], R13	# spill
219     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
22b     movl    [rsp + #12], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
230     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # test::main @ bci:53  L[0]=_ L[1]=_ L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_
        # OopMap {rbp=Oop [0]=Oop off=568/0x238}
238     stop	# ShouldNotReachHere

24c     B25: #	out( N271 ) <- in( B2 B5 )  Freq: 1.998e-06
24c     movl    RSI, #-115	# int
251     movq    [rsp + #0], R13	# spill
255     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
267     movl    [rsp + #12], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
26c     call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret' debug_id='0')
        # test::main @ bci:53  L[0]=_ L[1]=_ L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #8 L[5]=rsp + #12 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_
        # OopMap {rbp=Oop [0]=Oop off=628/0x274}
274     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     647  101 % !         test::main @ 53 (206 bytes)
 total in heap  [0x00007fdad5173490,0x00007fdad5173b60] = 1744
 relocation     [0x00007fdad5173608,0x00007fdad5173658] = 80
 main code      [0x00007fdad5173660,0x00007fdad5173900] = 672
 stub code      [0x00007fdad5173900,0x00007fdad5173918] = 24
 oops           [0x00007fdad5173918,0x00007fdad5173920] = 8
 metadata       [0x00007fdad5173920,0x00007fdad5173938] = 24
 scopes data    [0x00007fdad5173938,0x00007fdad5173a10] = 216
 scopes pcs     [0x00007fdad5173a10,0x00007fdad5173b40] = 304
 dependencies   [0x00007fdad5173b40,0x00007fdad5173b48] = 8
 nul chk table  [0x00007fdad5173b48,0x00007fdad5173b60] = 24

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007fda79f0b6c0} 'main' '([Ljava/lang/String;)V' in 'test'
 ;; N271: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fdad5173660:   callq  0x00007fdadee236d0           ;   {runtime_call os::breakpoint()}
  0x00007fdad5173665:   nop
  0x00007fdad5173666:   nop
  0x00007fdad5173667:   nop
  0x00007fdad5173668:   nop
  0x00007fdad5173669:   nop
  0x00007fdad517366a:   nop
  0x00007fdad517366b:   nop
  0x00007fdad517366c:   nop
  0x00007fdad517366d:   nop
  0x00007fdad517366e:   nop
  0x00007fdad517366f:   nop
 ;; B1: #	out( B22 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fdad5173670:   mov    %eax,-0x16000(%rsp)
  0x00007fdad5173677:   push   %rbp
  0x00007fdad5173678:   sub    $0x50,%rsp
  0x00007fdad517367c:   mov    0x40(%rsi),%rbp
  0x00007fdad5173680:   mov    0x38(%rsi),%r13
  0x00007fdad5173684:   mov    0x28(%rsi),%ebx
  0x00007fdad5173687:   mov    0x30(%rsi),%r10d
  0x00007fdad517368b:   mov    %r10d,0xc(%rsp)
  0x00007fdad5173690:   mov    %rsi,%rdi
  0x00007fdad5173693:   nop
  0x00007fdad5173694:   nop
  0x00007fdad5173695:   nop
  0x00007fdad5173696:   nop
  0x00007fdad5173697:   nop
  0x00007fdad5173698:   nop
  0x00007fdad5173699:   nop
  0x00007fdad517369a:   nop
  0x00007fdad517369b:   nop
  0x00007fdad517369c:   nop
  0x00007fdad517369d:   nop
  0x00007fdad517369e:   nop
  0x00007fdad517369f:   nop
  0x00007fdad51736a0:   vzeroupper 
  0x00007fdad51736a3:   movabs $0x7fdadef47b90,%r10
  0x00007fdad51736ad:   callq  *%r10
  0x00007fdad51736b0:   test   %rbp,%rbp
  0x00007fdad51736b3:   je     0x00007fdad5173858
 ;; B2: #	out( B25 B3 ) <- in( B1 )  Freq: 0.999
  0x00007fdad51736b9:   mov    0x8(%rbp),%r10d
  0x00007fdad51736bd:   nop
  0x00007fdad51736be:   nop
  0x00007fdad51736bf:   nop
  0x00007fdad51736c0:   cmp    $0x860,%r10d                 ;   {metadata({type array byte})}
  0x00007fdad51736c7:   jne    0x00007fdad51738ac
 ;; B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
  0x00007fdad51736cd:   mov    %rbp,%r14
 ;; B4: #	out( B23 B5 ) <- in( B3 B22 )  Freq: 0.999999
  0x00007fdad51736d0:   test   %r13,%r13
  0x00007fdad51736d3:   je     0x00007fdad5173865
 ;; B5: #	out( B25 B6 ) <- in( B4 )  Freq: 0.998999
  0x00007fdad51736d9:   mov    0x8(%r13),%r11d
  0x00007fdad51736dd:   nop
  0x00007fdad51736de:   nop
  0x00007fdad51736df:   nop
  0x00007fdad51736e0:   cmp    $0x860,%r11d                 ;   {metadata({type array byte})}
  0x00007fdad51736e7:   jne    0x00007fdad51738ac           ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@53 (line 32)
 ;; B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
 ;; B7: #	out( B24 B8 ) <- in( B6 B23 )  Freq: 0.999998
  0x00007fdad51736ed:   mov    0xc(%r14),%r8d               ; implicit exception: dispatches to 0x00007fdad517386d
 ;; B8: #	out( B24 B9 ) <- in( B7 )  Freq: 0.999997
  0x00007fdad51736f1:   mov    0xc(%r13),%ebp               ; implicit exception: dispatches to 0x00007fdad517386d
                                                            ;*invokestatic arraycopy {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::workload@5 (line 8)
                                                            ; - test::main@76 (line 33)
 ;; B9: #	out( B24 B10 ) <- in( B8 )  Freq: 0.999996
  0x00007fdad51736f5:   test   %ebp,%ebp
  0x00007fdad51736f7:   jbe    0x00007fdad517386d           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@85 (line 32)
 ;; B10: #	out( B13 ) <- in( B9 )  Freq: 0.999995
  0x00007fdad51736fd:   jmp    0x00007fdad5173744
  0x00007fdad51736ff:   nop
 ;; B11: #	out( B12 ) <- in( B17 B18 ) top-of-loop Freq: 403738
  0x00007fdad5173700:   movabs $0x1,%r10
  0x00007fdad517370a:   shlx   %rdx,%r10,%r10
  0x00007fdad517370f:   dec    %r10
  0x00007fdad5173712:   kmovq  %r10,%k2
  0x00007fdad5173717:   vmovdqu8 (%rdi),%ymm0{%k2}{z}
  0x00007fdad517371d:   kmovq  %r10,%k2
  0x00007fdad5173722:   vmovdqu8 %ymm0,(%rsi){%k2}          ;*invokestatic arraycopy {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::workload@5 (line 8)
                                                            ; - test::main@76 (line 33)
 ;; B12: #	out( B13 ) <- in( B11 B19 B16 ) top-of-loop Freq: 403738
  0x00007fdad5173728:   movsbl 0x10(%r13),%r11d
  0x00007fdad517372d:   mov    0x128(%r15),%r10
  0x00007fdad5173734:   mov    0xc(%rsp),%ecx
  0x00007fdad5173738:   add    %r11d,%ecx                   ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@79 (line 33)
  0x00007fdad517373b:   mov    %ecx,0xc(%rsp)
  0x00007fdad517373f:   inc    %ebx                         ; ImmutableOopMap {r13=Oop r14=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::main@85 (line 32)
  0x00007fdad5173741:   test   %eax,(%r10)                  ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@53 (line 32)
                                                            ;   {poll}
 ;; B13: #	out( B21 B14 ) <- in( B10 B12 ) Loop( B13-B12 inner ) Freq: 403739
  0x00007fdad5173744:   cmp    $0x895440,%ebx
  0x00007fdad517374a:   jge    0x00007fdad5173818           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@57 (line 32)
 ;; B14: #	out( B20 B15 ) <- in( B13 )  Freq: 403739
  0x00007fdad5173750:   mov    %ebx,%r10d
  0x00007fdad5173753:   and    $0x1f,%r10d                  ;*iand {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@74 (line 33)
  0x00007fdad5173757:   mov    %ebx,%r11d
  0x00007fdad517375a:   and    $0x1ff,%r11d                 ;*iand {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@69 (line 33)
  0x00007fdad5173761:   mov    %r11d,%r9d
  0x00007fdad5173764:   add    %r10d,%r9d
  0x00007fdad5173767:   cmp    %r9d,%r8d
  0x00007fdad517376a:   jb     0x00007fdad51737da
 ;; B15: #	out( B20 B16 ) <- in( B14 )  Freq: 403738
  0x00007fdad5173770:   cmp    %r9d,%ebp
  0x00007fdad5173773:   jb     0x00007fdad51737da
 ;; B16: #	out( B12 B17 ) <- in( B15 )  Freq: 403738
  0x00007fdad5173779:   test   %r10d,%r10d
  0x00007fdad517377c:   nop
  0x00007fdad517377d:   nop
  0x00007fdad517377e:   nop
  0x00007fdad517377f:   nop
  0x00007fdad5173780:   je     0x00007fdad5173728
 ;; B17: #	out( B11 B18 ) <- in( B16 )  Freq: 403738
  0x00007fdad5173782:   movslq %r10d,%rdx
  0x00007fdad5173785:   movslq %r11d,%r10
  0x00007fdad5173788:   lea    0x10(%r13,%r10,1),%rsi
  0x00007fdad517378d:   mov    %r14,%r11
  0x00007fdad5173790:   add    %r10,%r11
  0x00007fdad5173793:   mov    %r11,%rdi
  0x00007fdad5173796:   add    $0x10,%rdi
  0x00007fdad517379a:   nop
  0x00007fdad517379b:   nop
  0x00007fdad517379c:   nop
  0x00007fdad517379d:   nop
  0x00007fdad517379e:   nop
  0x00007fdad517379f:   nop
  0x00007fdad51737a0:   cmp    %rdi,%rsi
  0x00007fdad51737a3:   jbe    0x00007fdad5173700
 ;; B18: #	out( B11 B19 ) <- in( B17 )  Freq: 0.409099
  0x00007fdad51737a9:   lea    0x10(%r11,%rdx,1),%r10
  0x00007fdad51737ae:   cmp    %rsi,%r10
  0x00007fdad51737b1:   jb     0x00007fdad5173700
 ;; B19: #	out( B12 ) <- in( B18 )  Freq: 4.14531e-07
  0x00007fdad51737b7:   mov    %r8d,0x4(%rsp)
  0x00007fdad51737bc:   nop
  0x00007fdad51737bd:   nop
  0x00007fdad51737be:   nop
  0x00007fdad51737bf:   nop
  0x00007fdad51737c0:   vzeroupper 
  0x00007fdad51737c3:   movabs $0x7fdad508be20,%r10
  0x00007fdad51737cd:   callq  *%r10
  0x00007fdad51737d0:   mov    0x4(%rsp),%r8d
  0x00007fdad51737d5:   jmpq   0x00007fdad5173728
 ;; B20: #	out( N271 ) <- in( B14 B15 )  Freq: 0.807477
  0x00007fdad51737da:   mov    $0xffffffcc,%esi
  0x00007fdad51737df:   mov    %ebx,0x8(%rsp)
  0x00007fdad51737e3:   mov    %r13,0x10(%rsp)
  0x00007fdad51737e8:   mov    %r14,0x18(%rsp)
  0x00007fdad51737ed:   mov    %r13,0x28(%rsp)
  0x00007fdad51737f2:   mov    %r11d,0x24(%rsp)
  0x00007fdad51737f7:   mov    %r10d,0x30(%rsp)
  0x00007fdad51737fc:   vzeroupper 
  0x00007fdad51737ff:   callq  0x00007fdad5118840           ; ImmutableOopMap {[16]=Oop [24]=Oop [40]=Oop }
                                                            ;*invokestatic arraycopy {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::workload@5 (line 8)
                                                            ; - test::main@76 (line 33)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fdad5173804:   movabs $0x7fdadf3862e8,%rdi         ;   {external_word}
  0x00007fdad517380e:   and    $0xfffffffffffffff0,%rsp
  0x00007fdad5173812:   callq  0x00007fdadec78e90           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fdad5173817:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@57 (line 32)
 ;; B21: #	out( N271 ) <- in( B13 )  Freq: 0.192518
  0x00007fdad5173818:   mov    $0xffffff45,%esi
  0x00007fdad517381d:   mov    %r14,%rbp
  0x00007fdad5173820:   mov    %r13,(%rsp)
  0x00007fdad5173824:   mov    %rax,-0x8(%rsp)
  0x00007fdad5173829:   mov    0xc(%rsp),%eax
  0x00007fdad517382d:   mov    %eax,0x8(%rsp)
  0x00007fdad5173831:   mov    -0x8(%rsp),%rax
  0x00007fdad5173836:   mov    %ebx,0x10(%rsp)
  0x00007fdad517383a:   nop
  0x00007fdad517383b:   nop
  0x00007fdad517383c:   vzeroupper 
  0x00007fdad517383f:   callq  0x00007fdad5118840           ; ImmutableOopMap {rbp=Oop [0]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::main@57 (line 32)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fdad5173844:   movabs $0x7fdadf3862e8,%rdi         ;   {external_word}
  0x00007fdad517384e:   and    $0xfffffffffffffff0,%rsp
  0x00007fdad5173852:   callq  0x00007fdadec78e90           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fdad5173857:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@57 (line 32)
 ;; B22: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
  0x00007fdad5173858:   xor    %r14d,%r14d
  0x00007fdad517385b:   nop
  0x00007fdad517385c:   nop
  0x00007fdad517385d:   nop
  0x00007fdad517385e:   nop
  0x00007fdad517385f:   nop
  0x00007fdad5173860:   jmpq   0x00007fdad51736d0
 ;; B23: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
  0x00007fdad5173865:   xor    %r13d,%r13d
  0x00007fdad5173868:   jmpq   0x00007fdad51736ed
 ;; B24: #	out( N271 ) <- in( B9 B7 B8 )  Freq: 3.02655e-06
  0x00007fdad517386d:   mov    $0xffffff76,%esi
  0x00007fdad5173872:   mov    %r14,%rbp
  0x00007fdad5173875:   mov    %r13,(%rsp)
  0x00007fdad5173879:   mov    %rax,-0x8(%rsp)
  0x00007fdad517387e:   mov    0xc(%rsp),%eax
  0x00007fdad5173882:   mov    %eax,0x8(%rsp)
  0x00007fdad5173886:   mov    -0x8(%rsp),%rax
  0x00007fdad517388b:   mov    %ebx,0xc(%rsp)
  0x00007fdad517388f:   nop
  0x00007fdad5173890:   vzeroupper 
  0x00007fdad5173893:   callq  0x00007fdad5118840           ; ImmutableOopMap {rbp=Oop [0]=Oop }
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@53 (line 32)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fdad5173898:   movabs $0x7fdadf3862e8,%rdi         ;   {external_word}
  0x00007fdad51738a2:   and    $0xfffffffffffffff0,%rsp
  0x00007fdad51738a6:   callq  0x00007fdadec78e90           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fdad51738ab:   hlt    
 ;; B25: #	out( N271 ) <- in( B2 B5 )  Freq: 1.998e-06
  0x00007fdad51738ac:   mov    $0xffffff8d,%esi
  0x00007fdad51738b1:   mov    %r13,(%rsp)
  0x00007fdad51738b5:   mov    %rax,-0x8(%rsp)
  0x00007fdad51738ba:   mov    0xc(%rsp),%eax
  0x00007fdad51738be:   mov    %eax,0x8(%rsp)
  0x00007fdad51738c2:   mov    -0x8(%rsp),%rax
  0x00007fdad51738c7:   mov    %ebx,0xc(%rsp)
  0x00007fdad51738cb:   nop
  0x00007fdad51738cc:   vzeroupper 
  0x00007fdad51738cf:   callq  0x00007fdad5118840           ; ImmutableOopMap {rbp=Oop [0]=Oop }
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@53 (line 32)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fdad51738d4:   movabs $0x7fdadf3862e8,%rdi         ;   {external_word}
  0x00007fdad51738de:   and    $0xfffffffffffffff0,%rsp
  0x00007fdad51738e2:   callq  0x00007fdadec78e90           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fdad51738e7:   hlt                                 ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@53 (line 32)
  0x00007fdad51738e8:   hlt    
  0x00007fdad51738e9:   hlt    
  0x00007fdad51738ea:   hlt    
  0x00007fdad51738eb:   hlt    
  0x00007fdad51738ec:   hlt    
  0x00007fdad51738ed:   hlt    
  0x00007fdad51738ee:   hlt    
  0x00007fdad51738ef:   hlt    
  0x00007fdad51738f0:   hlt    
  0x00007fdad51738f1:   hlt    
  0x00007fdad51738f2:   hlt    
  0x00007fdad51738f3:   hlt    
  0x00007fdad51738f4:   hlt    
  0x00007fdad51738f5:   hlt    
  0x00007fdad51738f6:   hlt    
  0x00007fdad51738f7:   hlt    
  0x00007fdad51738f8:   hlt    
  0x00007fdad51738f9:   hlt    
  0x00007fdad51738fa:   hlt    
  0x00007fdad51738fb:   hlt    
  0x00007fdad51738fc:   hlt    
  0x00007fdad51738fd:   hlt    
  0x00007fdad51738fe:   hlt    
  0x00007fdad51738ff:   hlt    
[Exception Handler]
  0x00007fdad5173900:   jmpq   0x00007fdad503bf20           ;   {no_reloc}
[Deopt Handler Code]
  0x00007fdad5173905:   callq  0x00007fdad517390a
  0x00007fdad517390a:   subq   $0x5,(%rsp)
  0x00007fdad517390f:   jmpq   0x00007fdad5118160           ;   {runtime_call DeoptimizationBlob}
  0x00007fdad5173914:   hlt    
  0x00007fdad5173915:   hlt    
  0x00007fdad5173916:   hlt    
  0x00007fdad5173917:   hlt    
--------------------------------------------------------------------------------
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007fdad5173918:   0x0000000101120aa8 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000101120aa8}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007fdad5173920:   0x0000000800000860 {type array byte}
  0x00007fdad5173928:   0x00007fda79f0b6c0 {method} {0x00007fda79f0b6c0} 'main' '([Ljava/lang/String;)V' in 'test'
  0x00007fdad5173930:   0x00007fda79f0b520 {method} {0x00007fda79f0b520} 'workload' '([B[BIIZ)B' in 'test'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007fdad517365f offset=ffffffff bits=0):
PcDesc(pc=0x00007fdad51736ed offset=8d bits=0):   test::main@53 (line 32)
PcDesc(pc=0x00007fdad51736f5 offset=95 bits=0):   test::workload@5 (line 8)
   test::main@76 (line 33)
PcDesc(pc=0x00007fdad51736fd offset=9d bits=0):   test::main@85 (line 32)
PcDesc(pc=0x00007fdad5173728 offset=c8 bits=0):   test::workload@5 (line 8)
   test::main@76 (line 33)
PcDesc(pc=0x00007fdad517373b offset=db bits=0):   test::main@79 (line 33)
PcDesc(pc=0x00007fdad5173741 offset=e1 bits=1):   test::main@85 (line 32)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: reg r14 [28],oop
    - l3: reg r13 [26],oop
    - l4: reg rcx [2],int
    - l5: reg rbx [6],int
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
PcDesc(pc=0x00007fdad5173744 offset=e4 bits=0):   test::main@53 (line 32)
PcDesc(pc=0x00007fdad5173750 offset=f0 bits=0):   test::main@57 (line 32)
PcDesc(pc=0x00007fdad5173757 offset=f7 bits=0):   test::main@74 (line 33)
PcDesc(pc=0x00007fdad5173761 offset=101 bits=0):   test::main@69 (line 33)
PcDesc(pc=0x00007fdad5173804 offset=1a4 bits=0):   test::workload@5 (line 8)
   Locals
    - l0: stack[40],oop
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[24],oop
    - @1: stack[36]
    - @2: stack[16],oop
    - @3: stack[36]
    - @4: stack[48]
   test::main@76 (line 33)
   Locals
    - l0: empty
    - l1: empty
    - l2: stack[24],oop
    - l3: stack[16],oop
    - l4: empty
    - l5: stack[8]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
   Expression stack
    - @0: stack[12]
PcDesc(pc=0x00007fdad5173818 offset=1b8 bits=0):   test::main@57 (line 32)
PcDesc(pc=0x00007fdad5173844 offset=1e4 bits=1):   test::main@57 (line 32)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: stack[8]
    - l5: stack[16]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
   Expression stack
    - @0: stack[16]
    - @1: 9000000
PcDesc(pc=0x00007fdad5173858 offset=1f8 bits=0):   test::main@57 (line 32)
PcDesc(pc=0x00007fdad5173898 offset=238 bits=0):   test::main@53 (line 32)
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: stack[8]
    - l5: stack[12]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
PcDesc(pc=0x00007fdad51738d4 offset=274 bits=0):   test::main@53 (line 32)
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: stack[8]
    - l5: stack[12]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
PcDesc(pc=0x00007fdad51738e8 offset=288 bits=0):   test::main@53 (line 32)
PcDesc(pc=0x00007fdad5173919 offset=2b9 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 5 OopMaps

ImmutableOopMap {r13=Oop r14=Oop } pc offsets: 225 
ImmutableOopMap {[16]=Oop [24]=Oop [40]=Oop } pc offsets: 420 
ImmutableOopMap {rbp=Oop [0]=Oop } pc offsets: 484 568 628 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007fdad51736ed offset=8d):
   test::main@53 (line 32)
ScopeDesc(pc=0x00007fdad51736f5 offset=95):
   test::workload@5 (line 8)
ScopeDesc(pc=0x00007fdad51736f5 offset=95):
   test::main@76 (line 33)
ScopeDesc(pc=0x00007fdad51736fd offset=9d):
   test::main@85 (line 32)
ScopeDesc(pc=0x00007fdad5173728 offset=c8):
   test::workload@5 (line 8)
ScopeDesc(pc=0x00007fdad5173728 offset=c8):
   test::main@76 (line 33)
ScopeDesc(pc=0x00007fdad517373b offset=db):
   test::main@79 (line 33)
ScopeDesc(pc=0x00007fdad5173741 offset=e1):
   test::main@85 (line 32)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: reg r14 [28],oop
    - l3: reg r13 [26],oop
    - l4: reg rcx [2],int
    - l5: reg rbx [6],int
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
ScopeDesc(pc=0x00007fdad5173744 offset=e4):
   test::main@53 (line 32)
ScopeDesc(pc=0x00007fdad5173750 offset=f0):
   test::main@57 (line 32)
ScopeDesc(pc=0x00007fdad5173757 offset=f7):
   test::main@74 (line 33)
ScopeDesc(pc=0x00007fdad5173761 offset=101):
   test::main@69 (line 33)
ScopeDesc(pc=0x00007fdad5173804 offset=1a4):
   test::workload@5 (line 8)
   Locals
    - l0: stack[40],oop
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[24],oop
    - @1: stack[36]
    - @2: stack[16],oop
    - @3: stack[36]
    - @4: stack[48]
ScopeDesc(pc=0x00007fdad5173804 offset=1a4):
   test::main@76 (line 33)
   Locals
    - l0: empty
    - l1: empty
    - l2: stack[24],oop
    - l3: stack[16],oop
    - l4: empty
    - l5: stack[8]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
   Expression stack
    - @0: stack[12]
ScopeDesc(pc=0x00007fdad5173818 offset=1b8):
   test::main@57 (line 32)
ScopeDesc(pc=0x00007fdad5173844 offset=1e4):
   test::main@57 (line 32)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: stack[8]
    - l5: stack[16]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
   Expression stack
    - @0: stack[16]
    - @1: 9000000
ScopeDesc(pc=0x00007fdad5173858 offset=1f8):
   test::main@57 (line 32)
ScopeDesc(pc=0x00007fdad5173898 offset=238):
   test::main@53 (line 32)
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: stack[8]
    - l5: stack[12]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
ScopeDesc(pc=0x00007fdad51738d4 offset=274):
   test::main@53 (line 32)
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: stack[8]
    - l5: stack[12]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
ScopeDesc(pc=0x00007fdad51738e8 offset=288):
   test::main@53 (line 32)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007fdad5173608: 6400
relocInfo@0x00007fdad5173608 [type=6(runtime_call) addr=0x00007fdad5173660 offset=0 format=1] | [destination=0x00007fdadee236d0]
         @0x00007fdad517360a: f001cc60
relocInfo@0x00007fdad517360c [type=12(metadata) addr=0x00007fdad51736c0 offset=96 format=3 data=1] | [metadata_addr=0x00007fdad5173920 *=0x0000000800000860 offset=0]metadata_value=0x0000000800000860: {type array byte}
         @0x00007fdad517360e: f001cc20
relocInfo@0x00007fdad5173610 [type=12(metadata) addr=0x00007fdad51736e0 offset=32 format=3 data=1] | [metadata_addr=0x00007fdad5173920 *=0x0000000800000860 offset=0]metadata_value=0x0000000800000860: {type array byte}
         @0x00007fdad5173612: a061
relocInfo@0x00007fdad5173612 [type=10(poll) addr=0x00007fdad5173741 offset=97]
         @0x00007fdad5173614: 64be
relocInfo@0x00007fdad5173614 [type=6(runtime_call) addr=0x00007fdad51737ff offset=190 format=1] | [destination=0x00007fdad5118840]
         @0x00007fdad5173616: f803df3862e87fda7005
relocInfo@0x00007fdad517361e [type=7(external_word) addr=0x00007fdad5173804 offset=5 data={df3862e87fda}] | [target=0x00007fdadf3862e8]
         @0x00007fdad5173620: 640e
relocInfo@0x00007fdad5173620 [type=6(runtime_call) addr=0x00007fdad5173812 offset=14 format=1] | [destination=0x00007fdadec78e90]
         @0x00007fdad5173622: 642d
relocInfo@0x00007fdad5173622 [type=6(runtime_call) addr=0x00007fdad517383f offset=45 format=1] | [destination=0x00007fdad5118840]
         @0x00007fdad5173624: f803df3862e87fda7005
relocInfo@0x00007fdad517362c [type=7(external_word) addr=0x00007fdad5173844 offset=5 data={df3862e87fda}] | [target=0x00007fdadf3862e8]
         @0x00007fdad517362e: 640e
relocInfo@0x00007fdad517362e [type=6(runtime_call) addr=0x00007fdad5173852 offset=14 format=1] | [destination=0x00007fdadec78e90]
         @0x00007fdad5173630: 6441
relocInfo@0x00007fdad5173630 [type=6(runtime_call) addr=0x00007fdad5173893 offset=65 format=1] | [destination=0x00007fdad5118840]
         @0x00007fdad5173632: f803df3862e87fda7005
relocInfo@0x00007fdad517363a [type=7(external_word) addr=0x00007fdad5173898 offset=5 data={df3862e87fda}] | [target=0x00007fdadf3862e8]
         @0x00007fdad517363c: 640e
relocInfo@0x00007fdad517363c [type=6(runtime_call) addr=0x00007fdad51738a6 offset=14 format=1] | [destination=0x00007fdadec78e90]
         @0x00007fdad517363e: 6429
relocInfo@0x00007fdad517363e [type=6(runtime_call) addr=0x00007fdad51738cf offset=41 format=1] | [destination=0x00007fdad5118840]
         @0x00007fdad5173640: f803df3862e87fda7005
relocInfo@0x00007fdad5173648 [type=7(external_word) addr=0x00007fdad51738d4 offset=5 data={df3862e87fda}] | [target=0x00007fdadf3862e8]
         @0x00007fdad517364a: 640e
relocInfo@0x00007fdad517364a [type=6(runtime_call) addr=0x00007fdad51738e2 offset=14 format=1] | [destination=0x00007fdadec78e90]
         @0x00007fdad517364c: 001e
relocInfo@0x00007fdad517364c [type=0(none) addr=0x00007fdad5173900 offset=30]
         @0x00007fdad517364e: 6400
relocInfo@0x00007fdad517364e [type=6(runtime_call) addr=0x00007fdad5173900 offset=0 format=1] | [destination=0x00007fdad503bf20]
         @0x00007fdad5173650: 640f
relocInfo@0x00007fdad5173650 [type=6(runtime_call) addr=0x00007fdad517390f offset=15 format=1] | [destination=0x00007fdad5118160]
         @0x00007fdad5173652: 0000
relocInfo@0x00007fdad5173652 [type=0(none) addr=0x00007fdad517390f offset=0]
         @0x00007fdad5173654: 0000
relocInfo@0x00007fdad5173654 [type=0(none) addr=0x00007fdad517390f offset=0]
         @0x00007fdad5173656: 0000
relocInfo@0x00007fdad5173656 [type=0(none) addr=0x00007fdad517390f offset=0]
         @0x00007fdad5173658: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 2 entries, 20 bytes):
{
   < 0x00007fdad51736ed, 0x00007fdad517386d > < 0x00007fdad51736f1, 0x00007fdad517386d > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000101120aa8 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000101120aa8}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000800000860 {type array byte}
#2: 0x00007fda79f0b6c0 {method} {0x00007fda79f0b6c0} 'main' '([Ljava/lang/String;)V' in 'test'
#3: 0x00007fda79f0b520 {method} {0x00007fda79f0b520} 'workload' '([B[BIIZ)B' in 'test'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Go PERF

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 102 ------------------------
{method}
 - this oop:          0x00007fda79f0b6c0
 - method holder:     'test'
 - constants:         0x00007fda79f0b0a0 constant pool [84]/operands[5] {0x00007fda79f0b0a0} for 'test' cache=0x00007fda79f0b7a8
 - access:            0xc1000009  public static 
 - name:              'main'
 - signature:         '([Ljava/lang/String;)V'
 - max stack:         7
 - max locals:        11
 - size of params:    1
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x00007fdad5010c00
 - adapters:          AHE@0x00007fdad83ce590: 0xb0000000 i2c: 0x00007fdad508b760 c2i: 0x00007fdad508b840 c2iUV: 0x00007fdad508b80a c2iNCI: 0x00007fdad508b87d
 - compiled entry     0x00007fdad508b840
 - code size:         206
 - code start:        0x00007fda79f0b5c0
 - code end (excl):   0x00007fda79f0b68e
 - method data:       0x00007fda79f0b9b8
 - checked ex length: 0
 - linenumber start:  0x00007fda79f0b68e
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 102 -----------------------
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 96 --
#r583 rsp+92: in_preserve
#r582 rsp+88: return address
#r581 rsp+84: in_preserve
#r580 rsp+80: saved fp register
#r579 rsp+76: pad2, stack alignment
#r578 rsp+72: pad2, stack alignment
#r577 rsp+68: Fixed slot 1
#r576 rsp+64: Fixed slot 0
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N292: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B21 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (232 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

01c     movq    RBP, [RSI + #64 (8-bit)]	# ptr
020     movq    R13, [RSI + #56 (8-bit)]	# ptr
024     movl    RBX, [RSI + #16 (8-bit)]	# int
027     movq    R10, [RSI + #40 (8-bit)]	# long
02b     movq    [rsp + #24], R10	# spill
030     movl    R14, [RSI + #32 (8-bit)]	# int
034     movl    R11, [RSI + #24 (8-bit)]	# int
038     movl    [rsp + #32], R11	# spill
03d     movq    RDI, RSI	# spill
040     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
050     testq   RBP, RBP	# ptr
053     je     B21  P=0.001000 C=-1.000000

059     B2: #	out( B24 B3 ) <- in( B1 )  Freq: 0.999
059     movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
060     cmpl    R11, narrowklass: precise klass [B: 0x00007fda5401a400:Constant:exact *	# compressed klass ptr
067     jne,u   B24  P=0.000001 C=-1.000000

06d     B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
06d     movq    RDI, RBP	# spill
070     # checkcastPP of RDI

070     B4: #	out( B22 B5 ) <- in( B3 B21 )  Freq: 0.999999
070     testq   R13, R13	# ptr
073     je     B22  P=0.001000 C=-1.000000

079     B5: #	out( B24 B6 ) <- in( B4 )  Freq: 0.998999
079     movl    R10, [R13 + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
080     cmpl    R10, narrowklass: precise klass [B: 0x00007fda5401a400:Constant:exact *	# compressed klass ptr
087     jne,u   B24  P=0.000001 C=-1.000000

08d     B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
08d     # checkcastPP of R13

08d     B7: #	out( B23 B8 ) <- in( B6 B22 )  Freq: 0.999998
08d     movl    R10, [RDI + #12 (8-bit)]	# range
091     NullCheck RDI

091     B8: #	out( B23 B9 ) <- in( B7 )  Freq: 0.999997
091     movl    R9, [R13 + #12 (8-bit)]	# range
095     NullCheck R13

095     B9: #	out( B23 B10 ) <- in( B8 )  Freq: 0.999996
095     movl    R11, [rsp + #32]	# spill
09a     andl    R11, #31	# int
09e     movl    RDX, [rsp + #32]	# spill
0a2     andl    RDX, #511	# int
0a8     movl    R8, RDX	# spill
0ab     addl    R8, R11	# int
0ae     cmpl    R10, R8	# unsigned
0b1     jb,u   B23  P=0.000001 C=-1.000000

0b7     B10: #	out( B23 B11 ) <- in( B9 )  Freq: 0.999995
0b7     cmpl    R9, R8	# unsigned
        nop 	# 6 bytes pad for loops and calls
0c0     jb,u   B23  P=0.000001 C=-1.000000

0c6     B11: #	out( B23 B12 ) <- in( B10 )  Freq: 0.999994
0c6     testl   R9, R9	# unsigned
0c9     jbe,u   B23  P=0.000001 C=-1.000000

0cf     B12: #	out( B15 ) <- in( B11 )  Freq: 0.999993
0cf     movslq  R8, R11	# i2l
0d2     movslq  R10, RDX	# i2l
0d5     leaq    R9, [R13 + #16 + R10]	# ptr idxoff
0da     movq    RCX, RDI	# spill
0dd     addq    RCX, R10	# ptr
0e0     leaq    RDX, [RCX + #16 + R8]	# ptr idxoff
0e5     addq    RCX, #16	# ptr
0e9     # TLS is in R15
0e9     vector_mask_gen R8 	! vector mask generator
0fb     jmp,s   B15
        nop 	# 3 bytes pad for loops and calls

100     B13: #	out( B14 ) <- in( B17 B18 ) top-of-loop Freq: 999991
100     vector_masked_load XMM0, [RCX], RBP 	! vector masked copy
10b     vector_masked_store [R9], XMM0, RBP 	! vector masked store

116     B14: #	out( B15 ) <- in( B13 B19 B16 ) top-of-loop Freq: 999992
116     
116     movsbl  R10, [R13 + #16 (8-bit)]	# byte
11b     movq    RSI, [R15 + #296 (32-bit)]	# ptr
122     addl    R14, R10	# int
125     incl    RBX	# int
127     testl   rax, [RSI]	# Safepoint: poll for GC        # test::main @ bci:150  L[0]=_ L[1]=_ L[2]=RDI L[3]=R13 L[4]=rsp + #24 L[5]=_ L[6]=R14 L[7]=rsp + #32 L[8]=RBX L[9]=_ L[10]=_
        # OopMap {r9=Derived_oop_r13 rcx=Derived_oop_rdi rdi=Oop rdx=Derived_oop_rdi r13=Oop off=295/0x127}

129     B15: #	out( B20 B16 ) <- in( B12 B14 ) Loop( B15-B14 inner ) Freq: 999993
129     cmpl    RBX, #200000
12f     jge     B20  P=0.000000 C=15240.000000

135     B16: #	out( B14 B17 ) <- in( B15 )  Freq: 999992
135     testl   R11, R11
138     je,s   B14  P=0.000001 C=-1.000000

13a     B17: #	out( B13 B18 ) <- in( B16 )  Freq: 999991
        nop 	# 6 bytes pad for loops and calls
140     cmpq    R9, RCX	# ptr
143     jbe,us  B13  P=0.999999 C=-1.000000

145     B18: #	out( B13 B19 ) <- in( B17 )  Freq: 1.01327
145     cmpq    RDX, R9	# ptr
148     jb,us  B13  P=0.999999 C=-1.000000

14a     B19: #	out( B14 ) <- in( B18 )  Freq: 1.02673e-06
14a     movq    [rsp + #48], RDX	# spill
14f     movl    [rsp + #36], R11	# spill
154     movq    [rsp + #40], RDI	# spill
159     movq    [rsp + #16], RCX	# spill
15e     movq    [rsp + #8], R9	# spill
163     movq    [rsp + #0], R8	# spill
167     movq    RDI, RCX	# spill
16a     movq    RSI, R9	# spill
16d     movq    RDX, R8	# spill
        nop 	# 16 bytes pad for loops and calls
180     call_leaf_nofp,runtime  jbyte_disjoint_arraycopy
        No JVM State Info
        # 
190     movq    R8, [rsp + #0]	# spill
194     movq    R9, [rsp + #8]	# spill
199     movq    RCX, [rsp + #16]	# spill
19e     movq    RDI, [rsp + #40]	# spill
1a3     movl    R11, [rsp + #36]	# spill
1a8     movq    RDX, [rsp + #48]	# spill
1ad     jmp     B14

1b2     B20: #	out( N292 ) <- in( B15 )  Freq: 0.999993
1b2     movl    RSI, #-187	# int
1b7     movq    RBP, RDI	# spill
1ba     movq    [rsp + #0], R13	# spill
1be     pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #8]
1c8     movl    [rsp + #16], R14	# spill
1cd     movl    [rsp + #28], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
1d4     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # test::main @ bci:122  L[0]=_ L[1]=_ L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #8 L[5]=_ L[6]=rsp + #16 L[7]=rsp + #32 L[8]=rsp + #28 L[9]=_ L[10]=_ STK[0]=rsp + #28 STK[1]=#200000
        # OopMap {rbp=Oop [0]=Oop off=476/0x1dc}
1dc     stop	# ShouldNotReachHere

1f0     B21: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
1f0     xorl    RDI, RDI	# ptr
1f2     jmp     B4

1f7     B22: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
1f7     xorl    R13, R13	# ptr
1fa     jmp     B7

1ff     B23: #	out( N292 ) <- in( B11 B7 B8 B9 B10 )  Freq: 5.02654e-06
1ff     movl    RSI, #-138	# int
204     movq    RBP, RDI	# spill
207     movq    [rsp + #0], R13	# spill
20b     pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #8]
215     movl    [rsp + #16], R14	# spill
21a     movl    [rsp + #24], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
220     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # test::main @ bci:118  L[0]=_ L[1]=_ L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #8 L[5]=_ L[6]=rsp + #16 L[7]=rsp + #32 L[8]=rsp + #24 L[9]=_ L[10]=_
        # OopMap {rbp=Oop [0]=Oop off=552/0x228}
228     stop	# ShouldNotReachHere

23c     B24: #	out( N292 ) <- in( B2 B5 )  Freq: 1.998e-06
23c     movl    RSI, #-115	# int
241     movq    [rsp + #0], R13	# spill
245     pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #8]
24f     movl    [rsp + #16], R14	# spill
254     movl    [rsp + #24], RBX	# spill
258     call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret' debug_id='0')
        # test::main @ bci:118  L[0]=_ L[1]=_ L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #8 L[5]=_ L[6]=rsp + #16 L[7]=rsp + #32 L[8]=rsp + #24 L[9]=_ L[10]=_
        # OopMap {rbp=Oop [0]=Oop off=608/0x260}
260     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     688  102 % !         test::main @ 118 (206 bytes)
 total in heap  [0x00007fdad5172e10,0x00007fdad5173478] = 1640
 relocation     [0x00007fdad5172f88,0x00007fdad5172fc8] = 64
 main code      [0x00007fdad5172fe0,0x00007fdad5173260] = 640
 stub code      [0x00007fdad5173260,0x00007fdad5173278] = 24
 oops           [0x00007fdad5173278,0x00007fdad5173280] = 8
 metadata       [0x00007fdad5173280,0x00007fdad5173298] = 24
 scopes data    [0x00007fdad5173298,0x00007fdad5173338] = 160
 scopes pcs     [0x00007fdad5173338,0x00007fdad5173458] = 288
 dependencies   [0x00007fdad5173458,0x00007fdad5173460] = 8
 nul chk table  [0x00007fdad5173460,0x00007fdad5173478] = 24

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007fda79f0b6c0} 'main' '([Ljava/lang/String;)V' in 'test'
 ;; N292: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fdad5172fe0:   callq  0x00007fdadee236d0           ;   {runtime_call os::breakpoint()}
  0x00007fdad5172fe5:   nop
  0x00007fdad5172fe6:   nop
  0x00007fdad5172fe7:   nop
  0x00007fdad5172fe8:   nop
  0x00007fdad5172fe9:   nop
  0x00007fdad5172fea:   nop
  0x00007fdad5172feb:   nop
  0x00007fdad5172fec:   nop
  0x00007fdad5172fed:   nop
  0x00007fdad5172fee:   nop
  0x00007fdad5172fef:   nop
 ;; B1: #	out( B21 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fdad5172ff0:   mov    %eax,-0x16000(%rsp)
  0x00007fdad5172ff7:   push   %rbp
  0x00007fdad5172ff8:   sub    $0x50,%rsp
  0x00007fdad5172ffc:   mov    0x40(%rsi),%rbp
  0x00007fdad5173000:   mov    0x38(%rsi),%r13
  0x00007fdad5173004:   mov    0x10(%rsi),%ebx
  0x00007fdad5173007:   mov    0x28(%rsi),%r10
  0x00007fdad517300b:   mov    %r10,0x18(%rsp)
  0x00007fdad5173010:   mov    0x20(%rsi),%r14d
  0x00007fdad5173014:   mov    0x18(%rsi),%r11d
  0x00007fdad5173018:   mov    %r11d,0x20(%rsp)
  0x00007fdad517301d:   mov    %rsi,%rdi
  0x00007fdad5173020:   vzeroupper 
  0x00007fdad5173023:   movabs $0x7fdadef47b90,%r10
  0x00007fdad517302d:   callq  *%r10
  0x00007fdad5173030:   test   %rbp,%rbp
  0x00007fdad5173033:   je     0x00007fdad51731d0
 ;; B2: #	out( B24 B3 ) <- in( B1 )  Freq: 0.999
  0x00007fdad5173039:   mov    0x8(%rbp),%r11d
  0x00007fdad517303d:   nop
  0x00007fdad517303e:   nop
  0x00007fdad517303f:   nop
  0x00007fdad5173040:   cmp    $0x860,%r11d                 ;   {metadata({type array byte})}
  0x00007fdad5173047:   jne    0x00007fdad517321c
 ;; B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
  0x00007fdad517304d:   mov    %rbp,%rdi
 ;; B4: #	out( B22 B5 ) <- in( B3 B21 )  Freq: 0.999999
  0x00007fdad5173050:   test   %r13,%r13
  0x00007fdad5173053:   je     0x00007fdad51731d7
 ;; B5: #	out( B24 B6 ) <- in( B4 )  Freq: 0.998999
  0x00007fdad5173059:   mov    0x8(%r13),%r10d
  0x00007fdad517305d:   nop
  0x00007fdad517305e:   nop
  0x00007fdad517305f:   nop
  0x00007fdad5173060:   cmp    $0x860,%r10d                 ;   {metadata({type array byte})}
  0x00007fdad5173067:   jne    0x00007fdad517321c           ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@118 (line 46)
 ;; B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
 ;; B7: #	out( B23 B8 ) <- in( B6 B22 )  Freq: 0.999998
  0x00007fdad517306d:   mov    0xc(%rdi),%r10d              ; implicit exception: dispatches to 0x00007fdad51731df
 ;; B8: #	out( B23 B9 ) <- in( B7 )  Freq: 0.999997
  0x00007fdad5173071:   mov    0xc(%r13),%r9d               ; implicit exception: dispatches to 0x00007fdad51731df
                                                            ;*invokestatic arraycopy {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::workload@5 (line 8)
                                                            ; - test::main@141 (line 47)
 ;; B9: #	out( B23 B10 ) <- in( B8 )  Freq: 0.999996
  0x00007fdad5173075:   mov    0x20(%rsp),%r11d
  0x00007fdad517307a:   and    $0x1f,%r11d                  ;*iand {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@139 (line 47)
  0x00007fdad517307e:   mov    0x20(%rsp),%edx
  0x00007fdad5173082:   and    $0x1ff,%edx                  ;*iand {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@134 (line 47)
  0x00007fdad5173088:   mov    %edx,%r8d
  0x00007fdad517308b:   add    %r11d,%r8d                   ;*invokestatic arraycopy {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::workload@5 (line 8)
                                                            ; - test::main@141 (line 47)
  0x00007fdad517308e:   cmp    %r8d,%r10d
  0x00007fdad5173091:   jb     0x00007fdad51731df
 ;; B10: #	out( B23 B11 ) <- in( B9 )  Freq: 0.999995
  0x00007fdad5173097:   cmp    %r8d,%r9d
  0x00007fdad517309a:   nop
  0x00007fdad517309b:   nop
  0x00007fdad517309c:   nop
  0x00007fdad517309d:   nop
  0x00007fdad517309e:   nop
  0x00007fdad517309f:   nop
  0x00007fdad51730a0:   jb     0x00007fdad51731df
 ;; B11: #	out( B23 B12 ) <- in( B10 )  Freq: 0.999994
  0x00007fdad51730a6:   test   %r9d,%r9d
  0x00007fdad51730a9:   jbe    0x00007fdad51731df
 ;; B12: #	out( B15 ) <- in( B11 )  Freq: 0.999993
  0x00007fdad51730af:   movslq %r11d,%r8
  0x00007fdad51730b2:   movslq %edx,%r10
  0x00007fdad51730b5:   lea    0x10(%r13,%r10,1),%r9
  0x00007fdad51730ba:   mov    %rdi,%rcx
  0x00007fdad51730bd:   add    %r10,%rcx
  0x00007fdad51730c0:   lea    0x10(%rcx,%r8,1),%rdx
  0x00007fdad51730c5:   add    $0x10,%rcx                   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@150 (line 46)
  0x00007fdad51730c9:   movabs $0x1,%rbp
  0x00007fdad51730d3:   shlx   %r8,%rbp,%rbp
  0x00007fdad51730d8:   dec    %rbp
  0x00007fdad51730db:   jmp    0x00007fdad5173109
  0x00007fdad51730dd:   nop
  0x00007fdad51730de:   nop
  0x00007fdad51730df:   nop
 ;; B13: #	out( B14 ) <- in( B17 B18 ) top-of-loop Freq: 999991
  0x00007fdad51730e0:   kmovq  %rbp,%k2
  0x00007fdad51730e5:   vmovdqu8 (%rcx),%ymm0{%k2}{z}
  0x00007fdad51730eb:   kmovq  %rbp,%k2
  0x00007fdad51730f0:   vmovdqu8 %ymm0,(%r9){%k2}           ;*invokestatic arraycopy {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::workload@5 (line 8)
                                                            ; - test::main@141 (line 47)
 ;; B14: #	out( B15 ) <- in( B13 B19 B16 ) top-of-loop Freq: 999992
  0x00007fdad51730f6:   movsbl 0x10(%r13),%r10d
  0x00007fdad51730fb:   mov    0x128(%r15),%rsi
  0x00007fdad5173102:   add    %r10d,%r14d                  ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@144 (line 47)
  0x00007fdad5173105:   inc    %ebx                         ; ImmutableOopMap {r9=Derived_oop_r13 rcx=Derived_oop_rdi rdi=Oop rdx=Derived_oop_rdi r13=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::main@150 (line 46)
  0x00007fdad5173107:   test   %eax,(%rsi)                  ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@118 (line 46)
                                                            ;   {poll}
 ;; B15: #	out( B20 B16 ) <- in( B12 B14 ) Loop( B15-B14 inner ) Freq: 999993
  0x00007fdad5173109:   cmp    $0x30d40,%ebx
  0x00007fdad517310f:   jge    0x00007fdad5173192
 ;; B16: #	out( B14 B17 ) <- in( B15 )  Freq: 999992
  0x00007fdad5173115:   test   %r11d,%r11d
  0x00007fdad5173118:   je     0x00007fdad51730f6
 ;; B17: #	out( B13 B18 ) <- in( B16 )  Freq: 999991
  0x00007fdad517311a:   nop
  0x00007fdad517311b:   nop
  0x00007fdad517311c:   nop
  0x00007fdad517311d:   nop
  0x00007fdad517311e:   nop
  0x00007fdad517311f:   nop
  0x00007fdad5173120:   cmp    %rcx,%r9
  0x00007fdad5173123:   jbe    0x00007fdad51730e0
 ;; B18: #	out( B13 B19 ) <- in( B17 )  Freq: 1.01327
  0x00007fdad5173125:   cmp    %r9,%rdx
  0x00007fdad5173128:   jb     0x00007fdad51730e0
 ;; B19: #	out( B14 ) <- in( B18 )  Freq: 1.02673e-06
  0x00007fdad517312a:   mov    %rdx,0x30(%rsp)
  0x00007fdad517312f:   mov    %r11d,0x24(%rsp)
  0x00007fdad5173134:   mov    %rdi,0x28(%rsp)
  0x00007fdad5173139:   mov    %rcx,0x10(%rsp)
  0x00007fdad517313e:   mov    %r9,0x8(%rsp)
  0x00007fdad5173143:   mov    %r8,(%rsp)
  0x00007fdad5173147:   mov    %rcx,%rdi
  0x00007fdad517314a:   mov    %r9,%rsi
  0x00007fdad517314d:   mov    %r8,%rdx
  0x00007fdad5173150:   nop
  0x00007fdad5173151:   nop
  0x00007fdad5173152:   nop
  0x00007fdad5173153:   nop
  0x00007fdad5173154:   nop
  0x00007fdad5173155:   nop
  0x00007fdad5173156:   nop
  0x00007fdad5173157:   nop
  0x00007fdad5173158:   nop
  0x00007fdad5173159:   nop
  0x00007fdad517315a:   nop
  0x00007fdad517315b:   nop
  0x00007fdad517315c:   nop
  0x00007fdad517315d:   nop
  0x00007fdad517315e:   nop
  0x00007fdad517315f:   nop
  0x00007fdad5173160:   vzeroupper 
  0x00007fdad5173163:   movabs $0x7fdad508be20,%r10
  0x00007fdad517316d:   callq  *%r10
  0x00007fdad5173170:   mov    (%rsp),%r8
  0x00007fdad5173174:   mov    0x8(%rsp),%r9
  0x00007fdad5173179:   mov    0x10(%rsp),%rcx
  0x00007fdad517317e:   mov    0x28(%rsp),%rdi
  0x00007fdad5173183:   mov    0x24(%rsp),%r11d
  0x00007fdad5173188:   mov    0x30(%rsp),%rdx
  0x00007fdad517318d:   jmpq   0x00007fdad51730f6           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@122 (line 46)
 ;; B20: #	out( N292 ) <- in( B15 )  Freq: 0.999993
  0x00007fdad5173192:   mov    $0xffffff45,%esi
  0x00007fdad5173197:   mov    %rdi,%rbp
  0x00007fdad517319a:   mov    %r13,(%rsp)
  0x00007fdad517319e:   rex.W pushq 0x18(%rsp)
  0x00007fdad51731a3:   rex.W popq 0x8(%rsp)
  0x00007fdad51731a8:   mov    %r14d,0x10(%rsp)
  0x00007fdad51731ad:   mov    %ebx,0x1c(%rsp)
  0x00007fdad51731b1:   nop
  0x00007fdad51731b2:   nop
  0x00007fdad51731b3:   nop
  0x00007fdad51731b4:   vzeroupper 
  0x00007fdad51731b7:   callq  0x00007fdad5118840           ; ImmutableOopMap {rbp=Oop [0]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::main@122 (line 46)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fdad51731bc:   movabs $0x7fdadf3862e8,%rdi         ;   {external_word}
  0x00007fdad51731c6:   and    $0xfffffffffffffff0,%rsp
  0x00007fdad51731ca:   callq  0x00007fdadec78e90           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fdad51731cf:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@122 (line 46)
 ;; B21: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
  0x00007fdad51731d0:   xor    %edi,%edi
  0x00007fdad51731d2:   jmpq   0x00007fdad5173050
 ;; B22: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
  0x00007fdad51731d7:   xor    %r13d,%r13d
  0x00007fdad51731da:   jmpq   0x00007fdad517306d
 ;; B23: #	out( N292 ) <- in( B11 B7 B8 B9 B10 )  Freq: 5.02654e-06
  0x00007fdad51731df:   mov    $0xffffff76,%esi
  0x00007fdad51731e4:   mov    %rdi,%rbp
  0x00007fdad51731e7:   mov    %r13,(%rsp)
  0x00007fdad51731eb:   rex.W pushq 0x18(%rsp)
  0x00007fdad51731f0:   rex.W popq 0x8(%rsp)
  0x00007fdad51731f5:   mov    %r14d,0x10(%rsp)
  0x00007fdad51731fa:   mov    %ebx,0x18(%rsp)
  0x00007fdad51731fe:   nop
  0x00007fdad51731ff:   nop
  0x00007fdad5173200:   vzeroupper 
  0x00007fdad5173203:   callq  0x00007fdad5118840           ; ImmutableOopMap {rbp=Oop [0]=Oop }
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@118 (line 46)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fdad5173208:   movabs $0x7fdadf3862e8,%rdi         ;   {external_word}
  0x00007fdad5173212:   and    $0xfffffffffffffff0,%rsp
  0x00007fdad5173216:   callq  0x00007fdadec78e90           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fdad517321b:   hlt    
 ;; B24: #	out( N292 ) <- in( B2 B5 )  Freq: 1.998e-06
  0x00007fdad517321c:   mov    $0xffffff8d,%esi
  0x00007fdad5173221:   mov    %r13,(%rsp)
  0x00007fdad5173225:   rex.W pushq 0x18(%rsp)
  0x00007fdad517322a:   rex.W popq 0x8(%rsp)
  0x00007fdad517322f:   mov    %r14d,0x10(%rsp)
  0x00007fdad5173234:   mov    %ebx,0x18(%rsp)
  0x00007fdad5173238:   vzeroupper 
  0x00007fdad517323b:   callq  0x00007fdad5118840           ; ImmutableOopMap {rbp=Oop [0]=Oop }
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@118 (line 46)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fdad5173240:   movabs $0x7fdadf3862e8,%rdi         ;   {external_word}
  0x00007fdad517324a:   and    $0xfffffffffffffff0,%rsp
  0x00007fdad517324e:   callq  0x00007fdadec78e90           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fdad5173253:   hlt                                 ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@118 (line 46)
  0x00007fdad5173254:   hlt    
  0x00007fdad5173255:   hlt    
  0x00007fdad5173256:   hlt    
  0x00007fdad5173257:   hlt    
  0x00007fdad5173258:   hlt    
  0x00007fdad5173259:   hlt    
  0x00007fdad517325a:   hlt    
  0x00007fdad517325b:   hlt    
  0x00007fdad517325c:   hlt    
  0x00007fdad517325d:   hlt    
  0x00007fdad517325e:   hlt    
  0x00007fdad517325f:   hlt    
[Exception Handler]
  0x00007fdad5173260:   jmpq   0x00007fdad503bf20           ;   {no_reloc}
[Deopt Handler Code]
  0x00007fdad5173265:   callq  0x00007fdad517326a
  0x00007fdad517326a:   subq   $0x5,(%rsp)
  0x00007fdad517326f:   jmpq   0x00007fdad5118160           ;   {runtime_call DeoptimizationBlob}
  0x00007fdad5173274:   hlt    
  0x00007fdad5173275:   hlt    
  0x00007fdad5173276:   hlt    
  0x00007fdad5173277:   hlt    
--------------------------------------------------------------------------------
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007fdad5173278:   0x0000000101120aa8 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000101120aa8}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007fdad5173280:   0x0000000800000860 {type array byte}
  0x00007fdad5173288:   0x00007fda79f0b6c0 {method} {0x00007fda79f0b6c0} 'main' '([Ljava/lang/String;)V' in 'test'
  0x00007fdad5173290:   0x00007fda79f0b520 {method} {0x00007fda79f0b520} 'workload' '([B[BIIZ)B' in 'test'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007fdad5172fdf offset=ffffffff bits=0):
PcDesc(pc=0x00007fdad517306d offset=8d bits=0):   test::main@118 (line 46)
PcDesc(pc=0x00007fdad5173075 offset=95 bits=0):   test::workload@5 (line 8)
   test::main@141 (line 47)
PcDesc(pc=0x00007fdad517307e offset=9e bits=0):   test::main@139 (line 47)
PcDesc(pc=0x00007fdad5173088 offset=a8 bits=0):   test::main@134 (line 47)
PcDesc(pc=0x00007fdad517308e offset=ae bits=0):   test::workload@5 (line 8)
   test::main@141 (line 47)
PcDesc(pc=0x00007fdad51730c9 offset=e9 bits=0):   test::main@150 (line 46)
PcDesc(pc=0x00007fdad51730f6 offset=116 bits=0):   test::workload@5 (line 8)
   test::main@141 (line 47)
PcDesc(pc=0x00007fdad5173105 offset=125 bits=0):   test::main@144 (line 47)
PcDesc(pc=0x00007fdad5173107 offset=127 bits=1):   test::main@150 (line 46)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rdi [14],oop
    - l3: reg r13 [26],oop
    - l4: 0
    - l5: stack[24],long
    - l6: reg r14 [28],int
    - l7: stack[32]
    - l8: reg rbx [6],int
    - l9: empty
    - l10: empty
PcDesc(pc=0x00007fdad5173109 offset=129 bits=0):   test::main@118 (line 46)
PcDesc(pc=0x00007fdad5173192 offset=1b2 bits=0):   test::main@122 (line 46)
PcDesc(pc=0x00007fdad51731bc offset=1dc bits=1):   test::main@122 (line 46)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: 0
    - l5: stack[8],long
    - l6: stack[16]
    - l7: stack[32]
    - l8: stack[28]
    - l9: empty
    - l10: empty
   Expression stack
    - @0: stack[28]
    - @1: 200000
PcDesc(pc=0x00007fdad51731d0 offset=1f0 bits=0):   test::main@122 (line 46)
PcDesc(pc=0x00007fdad5173208 offset=228 bits=0):   test::main@118 (line 46)
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: 0
    - l5: stack[8],long
    - l6: stack[16]
    - l7: stack[32]
    - l8: stack[24]
    - l9: empty
    - l10: empty
PcDesc(pc=0x00007fdad5173240 offset=260 bits=0):   test::main@118 (line 46)
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: 0
    - l5: stack[8],long
    - l6: stack[16]
    - l7: stack[32]
    - l8: stack[24]
    - l9: empty
    - l10: empty
PcDesc(pc=0x00007fdad5173254 offset=274 bits=0):   test::main@118 (line 46)
PcDesc(pc=0x00007fdad5173279 offset=299 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 4 OopMaps

ImmutableOopMap {r9=Derived_oop_r13 rcx=Derived_oop_rdi rdi=Oop rdx=Derived_oop_rdi r13=Oop } pc offsets: 295 
ImmutableOopMap {rbp=Oop [0]=Oop } pc offsets: 476 552 608 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007fdad517306d offset=8d):
   test::main@118 (line 46)
ScopeDesc(pc=0x00007fdad5173075 offset=95):
   test::workload@5 (line 8)
ScopeDesc(pc=0x00007fdad5173075 offset=95):
   test::main@141 (line 47)
ScopeDesc(pc=0x00007fdad517307e offset=9e):
   test::main@139 (line 47)
ScopeDesc(pc=0x00007fdad5173088 offset=a8):
   test::main@134 (line 47)
ScopeDesc(pc=0x00007fdad517308e offset=ae):
   test::workload@5 (line 8)
ScopeDesc(pc=0x00007fdad517308e offset=ae):
   test::main@141 (line 47)
ScopeDesc(pc=0x00007fdad51730c9 offset=e9):
   test::main@150 (line 46)
ScopeDesc(pc=0x00007fdad51730f6 offset=116):
   test::workload@5 (line 8)
ScopeDesc(pc=0x00007fdad51730f6 offset=116):
   test::main@141 (line 47)
ScopeDesc(pc=0x00007fdad5173105 offset=125):
   test::main@144 (line 47)
ScopeDesc(pc=0x00007fdad5173107 offset=127):
   test::main@150 (line 46)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rdi [14],oop
    - l3: reg r13 [26],oop
    - l4: 0
    - l5: stack[24],long
    - l6: reg r14 [28],int
    - l7: stack[32]
    - l8: reg rbx [6],int
    - l9: empty
    - l10: empty
ScopeDesc(pc=0x00007fdad5173109 offset=129):
   test::main@118 (line 46)
ScopeDesc(pc=0x00007fdad5173192 offset=1b2):
   test::main@122 (line 46)
ScopeDesc(pc=0x00007fdad51731bc offset=1dc):
   test::main@122 (line 46)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: 0
    - l5: stack[8],long
    - l6: stack[16]
    - l7: stack[32]
    - l8: stack[28]
    - l9: empty
    - l10: empty
   Expression stack
    - @0: stack[28]
    - @1: 200000
ScopeDesc(pc=0x00007fdad51731d0 offset=1f0):
   test::main@122 (line 46)
ScopeDesc(pc=0x00007fdad5173208 offset=228):
   test::main@118 (line 46)
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: 0
    - l5: stack[8],long
    - l6: stack[16]
    - l7: stack[32]
    - l8: stack[24]
    - l9: empty
    - l10: empty
ScopeDesc(pc=0x00007fdad5173240 offset=260):
   test::main@118 (line 46)
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: 0
    - l5: stack[8],long
    - l6: stack[16]
    - l7: stack[32]
    - l8: stack[24]
    - l9: empty
    - l10: empty
ScopeDesc(pc=0x00007fdad5173254 offset=274):
   test::main@118 (line 46)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007fdad5172f88: 6400
relocInfo@0x00007fdad5172f88 [type=6(runtime_call) addr=0x00007fdad5172fe0 offset=0 format=1] | [destination=0x00007fdadee236d0]
         @0x00007fdad5172f8a: f001cc60
relocInfo@0x00007fdad5172f8c [type=12(metadata) addr=0x00007fdad5173040 offset=96 format=3 data=1] | [metadata_addr=0x00007fdad5173280 *=0x0000000800000860 offset=0]metadata_value=0x0000000800000860: {type array byte}
         @0x00007fdad5172f8e: f001cc20
relocInfo@0x00007fdad5172f90 [type=12(metadata) addr=0x00007fdad5173060 offset=32 format=3 data=1] | [metadata_addr=0x00007fdad5173280 *=0x0000000800000860 offset=0]metadata_value=0x0000000800000860: {type array byte}
         @0x00007fdad5172f92: a0a7
relocInfo@0x00007fdad5172f92 [type=10(poll) addr=0x00007fdad5173107 offset=167]
         @0x00007fdad5172f94: 64b0
relocInfo@0x00007fdad5172f94 [type=6(runtime_call) addr=0x00007fdad51731b7 offset=176 format=1] | [destination=0x00007fdad5118840]
         @0x00007fdad5172f96: f803df3862e87fda7005
relocInfo@0x00007fdad5172f9e [type=7(external_word) addr=0x00007fdad51731bc offset=5 data={df3862e87fda}] | [target=0x00007fdadf3862e8]
         @0x00007fdad5172fa0: 640e
relocInfo@0x00007fdad5172fa0 [type=6(runtime_call) addr=0x00007fdad51731ca offset=14 format=1] | [destination=0x00007fdadec78e90]
         @0x00007fdad5172fa2: 6439
relocInfo@0x00007fdad5172fa2 [type=6(runtime_call) addr=0x00007fdad5173203 offset=57 format=1] | [destination=0x00007fdad5118840]
         @0x00007fdad5172fa4: f803df3862e87fda7005
relocInfo@0x00007fdad5172fac [type=7(external_word) addr=0x00007fdad5173208 offset=5 data={df3862e87fda}] | [target=0x00007fdadf3862e8]
         @0x00007fdad5172fae: 640e
relocInfo@0x00007fdad5172fae [type=6(runtime_call) addr=0x00007fdad5173216 offset=14 format=1] | [destination=0x00007fdadec78e90]
         @0x00007fdad5172fb0: 6425
relocInfo@0x00007fdad5172fb0 [type=6(runtime_call) addr=0x00007fdad517323b offset=37 format=1] | [destination=0x00007fdad5118840]
         @0x00007fdad5172fb2: f803df3862e87fda7005
relocInfo@0x00007fdad5172fba [type=7(external_word) addr=0x00007fdad5173240 offset=5 data={df3862e87fda}] | [target=0x00007fdadf3862e8]
         @0x00007fdad5172fbc: 640e
relocInfo@0x00007fdad5172fbc [type=6(runtime_call) addr=0x00007fdad517324e offset=14 format=1] | [destination=0x00007fdadec78e90]
         @0x00007fdad5172fbe: 0012
relocInfo@0x00007fdad5172fbe [type=0(none) addr=0x00007fdad5173260 offset=18]
         @0x00007fdad5172fc0: 6400
relocInfo@0x00007fdad5172fc0 [type=6(runtime_call) addr=0x00007fdad5173260 offset=0 format=1] | [destination=0x00007fdad503bf20]
         @0x00007fdad5172fc2: 640f
relocInfo@0x00007fdad5172fc2 [type=6(runtime_call) addr=0x00007fdad517326f offset=15 format=1] | [destination=0x00007fdad5118160]
         @0x00007fdad5172fc4: 0000
relocInfo@0x00007fdad5172fc4 [type=0(none) addr=0x00007fdad517326f offset=0]
         @0x00007fdad5172fc6: 0000
relocInfo@0x00007fdad5172fc6 [type=0(none) addr=0x00007fdad517326f offset=0]
         @0x00007fdad5172fc8: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 2 entries, 20 bytes):
{
   < 0x00007fdad517306d, 0x00007fdad51731df > < 0x00007fdad5173071, 0x00007fdad51731df > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000101120aa8 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000101120aa8}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000800000860 {type array byte}
#2: 0x00007fda79f0b6c0 {method} {0x00007fda79f0b6c0} 'main' '([Ljava/lang/String;)V' in 'test'
#3: 0x00007fda79f0b520 {method} {0x00007fda79f0b520} 'workload' '([B[BIIZ)B' in 'test'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 103 ------------------------
{method}
 - this oop:          0x00007fda79f0b6c0
 - method holder:     'test'
 - constants:         0x00007fda79f0b0a0 constant pool [84]/operands[5] {0x00007fda79f0b0a0} for 'test' cache=0x00007fda79f0b7a8
 - access:            0xc1000009  public static 
 - name:              'main'
 - signature:         '([Ljava/lang/String;)V'
 - max stack:         7
 - max locals:        11
 - size of params:    1
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x00007fdad5010c00
 - adapters:          AHE@0x00007fdad83ce590: 0xb0000000 i2c: 0x00007fdad508b760 c2i: 0x00007fdad508b840 c2iUV: 0x00007fdad508b80a c2iNCI: 0x00007fdad508b87d
 - compiled entry     0x00007fdad508b840
 - code size:         206
 - code start:        0x00007fda79f0b5c0
 - code end (excl):   0x00007fda79f0b68e
 - method data:       0x00007fda79f0b9b8
 - checked ex length: 0
 - linenumber start:  0x00007fda79f0b68e
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 103 -----------------------
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 96 --
#r583 rsp+92: in_preserve
#r582 rsp+88: return address
#r581 rsp+84: in_preserve
#r580 rsp+80: saved fp register
#r579 rsp+76: pad2, stack alignment
#r578 rsp+72: pad2, stack alignment
#r577 rsp+68: Fixed slot 1
#r576 rsp+64: Fixed slot 0
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N603: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B36 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (360 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

01c     movq    RBP, [RSI + #64 (8-bit)]	# ptr
020     movq    R14, [RSI + #56 (8-bit)]	# ptr
024     movl    RBX, [RSI + #16 (8-bit)]	# int
027     movq    R10, [RSI + #40 (8-bit)]	# long
02b     movq    [rsp + #24], R10	# spill
030     movl    R13, [RSI + #32 (8-bit)]	# int
034     movl    R11, [RSI + #24 (8-bit)]	# int
038     movl    [rsp + #32], R11	# spill
03d     movq    RDI, RSI	# spill
040     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
050     testq   RBP, RBP	# ptr
053     je     B36  P=0.001000 C=-1.000000

059     B2: #	out( B46 B3 ) <- in( B1 )  Freq: 0.999
059     movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
060     cmpl    R11, narrowklass: precise klass [B: 0x00007fda5401a400:Constant:exact *	# compressed klass ptr
067     jne,u   B46  P=0.000001 C=-1.000000

06d     B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
06d     movq    R11, RBP	# spill
070     # checkcastPP of R11

070     B4: #	out( B37 B5 ) <- in( B3 B36 )  Freq: 0.999999
070     movq    R10, R14	# spill
073     testq   R14, R14	# ptr
076     je     B37  P=0.001000 C=-1.000000

07c     B5: #	out( B47 B6 ) <- in( B4 )  Freq: 0.998999
07c     movl    R8, [R14 + #8 (8-bit)]	# compressed klass ptr
080     cmpl    R8, narrowklass: precise klass [B: 0x00007fda5401a400:Constant:exact *	# compressed klass ptr
087     jne,u   B47  P=0.000001 C=-1.000000

08d     B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
08d     # checkcastPP of R10

08d     B7: #	out( B19 ) <- in( B6 B37 )  Freq: 0.999998
08d     # TLS is in R15
08d     jmp     B19

092     B8: #	out( B9 ) <- in( B13 B14 ) top-of-loop Freq: 2.12355e+06
092     vector_masked_load XMM0, [RCX], RBP 	! vector masked copy
09d     vector_masked_store [RDX], XMM0, RBP 	! vector masked store

0a8     B9: #	out( B10 ) <- in( B8 B15 ) top-of-loop Freq: 2.12355e+06
0a8     movq    R9, RCX	# spill

0ab     B10: #	out( B11 ) <- in( B9 B33 )  Freq: 2.12356e+06
0ab     
0ab     movq    RSI, [R15 + #296 (32-bit)]	# ptr
0b2     movsbl  RCX, [R10 + #16 (8-bit)]	# byte
0b7     addl    R13, RCX	# int
0ba     incl    RBX	# int
0bc     testl   rax, [RSI]	# Safepoint: poll for GC        # test::main @ bci:150  L[0]=_ L[1]=_ L[2]=R11 L[3]=R10 L[4]=rsp + #24 L[5]=_ L[6]=R13 L[7]=rsp + #32 L[8]=RBX L[9]=_ L[10]=_
        # OopMap {r10=Oop r11=Oop r9=Derived_oop_r11 rdi=Derived_oop_r11 rdx=Derived_oop_r10 off=188/0xbc}
0be     movq    RCX, R9	# spill

0c1     B11: #	out( B17 B12 ) <- in( B32 B10 ) Loop( B11-B10 inner ) Freq: 2.12357e+06
0c1     cmpl    RBX, #200000
0c7     jge     B17  P=0.000005 C=640643.000000

0cd     B12: #	out( B33 B13 ) <- in( B11 )  Freq: 2.12356e+06
0cd     testl   R8, R8
0d0     je     B33  P=0.000001 C=-1.000000

0d6     B13: #	out( B8 B14 ) <- in( B12 )  Freq: 2.12355e+06
0d6     cmpq    RDX, RCX	# ptr
0d9     jbe,us  B8  P=0.999999 C=-1.000000

0db     B14: #	out( B8 B15 ) <- in( B13 )  Freq: 2.15175
        nop 	# 5 bytes pad for loops and calls
0e0     cmpq    RDI, RDX	# ptr
0e3     jb,us  B8  P=0.999999 C=-1.000000

0e5     B15: #	out( B9 ) <- in( B14 )  Freq: 2.18033e-06
0e5     movq    [rsp + #48], RDI	# spill
0ea     movl    [rsp + #36], R8	# spill
0ef     movq    [rsp + #40], R11	# spill
0f4     movq    [rsp + #16], R10	# spill
0f9     movq    [rsp + #8], RCX	# spill
0fe     movq    R14, RDX	# spill
101     movq    RDI, RCX	# spill
104     movq    RSI, RDX	# spill
107     movq    RDX, [rsp + #0]	# spill
10b     call_leaf_nofp,runtime  jbyte_disjoint_arraycopy
        No JVM State Info
        # 
11b     movq    RDX, R14	# spill
11e     movq    RCX, [rsp + #8]	# spill
123     movq    R10, [rsp + #16]	# spill
128     movq    R11, [rsp + #40]	# spill
12d     movl    R8, [rsp + #36]	# spill
132     movq    RDI, [rsp + #48]	# spill
137     jmp     B9

13c     B16: #	out( B17 ) <- in( B28 )  Freq: 4.7085e-05
13c     movl    R13, R14	# spill

13f     B17: #	out( B34 B18 ) <- in( B19 B16 B11 )  Freq: 9.99947
13f     movq    R9, [R15 + #296 (32-bit)]	# ptr
146     movl    R8, [rsp + #32]	# spill
14b     incl    R8	# int
14e     testl   rax, [R9]	# Safepoint: poll for GC        # test::main @ bci:156  L[0]=_ L[1]=_ L[2]=R11 L[3]=R10 L[4]=rsp + #24 L[5]=_ L[6]=R13 L[7]=R8 L[8]=_ L[9]=_ L[10]=_
        # OopMap {r10=Oop r11=Oop off=334/0x14e}
151     cmpl    R8, #5000
158     jge     B34	# loop end  P=0.100000 C=-1.000000

15e     B18: #	out( B19 ) <- in( B17 )  Freq: 8.99953
15e     movl    RBX, #1	# int
163     movl    [rsp + #32], R8	# spill

168     B19: #	out( B17 B20 ) <- in( B7 B18 ) Loop( B19-B18 ) Freq: 9.99953
168     cmpl    RBX, #200000
16e     jge,s   B17  P=0.000005 C=640643.000000

170     B20: #	out( B48 B21 ) <- in( B19 )  Freq: 9.99948
170     movl    R8, [rsp + #32]	# spill
175     andl    R8, #31	# int
179     movl    RBP, [rsp + #32]	# spill
17d     andl    RBP, #511	# int
183     movl    R9, [R11 + #12 (8-bit)]	# range
187     NullCheck R11

187     B21: #	out( B49 B22 ) <- in( B20 )  Freq: 9.99947
187     movl    R14, [R10 + #12 (8-bit)]	# range
18b     NullCheck R10

18b     B22: #	out( B43 B23 ) <- in( B21 )  Freq: 9.99946
18b     movl    RDI, RBP	# spill
18d     addl    RDI, R8	# int
190     cmpl    R9, RDI	# unsigned
193     jb,u   B43  P=0.000001 C=-1.000000

199     B23: #	out( B43 B24 ) <- in( B22 )  Freq: 9.99945
199     cmpl    R14, RDI	# unsigned
        nop 	# 4 bytes pad for loops and calls
1a0     jb,u   B43  P=0.000001 C=-1.000000

1a6     B24: #	out( B38 B25 ) <- in( B23 )  Freq: 9.99944
1a6     movslq  RDX, R8	# i2l
1a9     movslq  RDI, RBP	# i2l
1ac     leaq    R9, [R10 + #16 + RDI]	# ptr idxoff
1b1     movq    RCX, R11	# spill
1b4     addq    RCX, RDI	# ptr
1b7     leaq    RDI, [RCX + #16 + RDX]	# ptr idxoff
1bc     movq    [rsp + #0], RDX	# spill
1c0     addq    RCX, #16	# ptr
1c4     movq    RSI, [rsp + #0]	# spill
1c8     vector_mask_gen RSI 	! vector mask generator
        nop 	# 6 bytes pad for loops and calls
1e0     testl   R8, R8
1e3     je     B38  P=0.000001 C=-1.000000

1e9     B25: #	out( B39 B26 ) <- in( B24 )  Freq: 9.99943
1e9     movq    RDX, R9	# spill
1ec     cmpq    R9, RCX	# ptr
1ef     jnbe,u   B39  P=0.000001 C=-1.000000

1f5     B26: #	out( B27 ) <- in( B25 B39 )  Freq: 9.99943
1f5     vector_masked_load XMM0, [RCX], RBP 	! vector masked copy
200     vector_masked_store [R9], XMM0, RBP 	! vector masked store

20b     B27: #	out( B44 B28 ) <- in( B26 B40 B38 )  Freq: 9.99944
20b     
20b     testl   R14, R14	# unsigned
20e     jbe,u   B44  P=0.000001 C=-1.000000

214     B28: #	out( B16 B29 ) <- in( B27 )  Freq: 9.99943
214     movsbl  R14, [R10 + #16 (8-bit)]	# byte
219     addl    R14, R13	# int
21c     movl    R9, RBX	# spill
21f     incl    R9	# int
222     cmpl    R9, #200000
229     jge     B16  P=0.000005 C=640643.000000

22f     B29: #	out( B32 B30 ) <- in( B28 )  Freq: 9.99938
22f     testl   R8, R8
232     je,s   B32  P=0.000001 C=-1.000000

234     B30: #	out( B41 B31 ) <- in( B29 )  Freq: 9.99937
234     cmpq    RDX, RCX	# ptr
237     jnbe,u   B41  P=0.000001 C=-1.000000

23d     B31: #	out( B32 ) <- in( B30 B41 )  Freq: 9.99937
23d     vector_masked_load XMM0, [RCX], RBP 	! vector masked copy
248     vector_masked_store [RDX], XMM0, RBP 	! vector masked store

253     B32: #	out( B11 ) <- in( B31 B42 B29 )  Freq: 9.99938
253     
253     movsbl  R13, [R10 + #16 (8-bit)]	# byte
258     addl    R13, R14	# int
25b     addl    RBX, #2	# int
        nop 	# 2 bytes pad for loops and calls
260     jmp     B11

265     B33: #	out( B10 ) <- in( B12 )  Freq: 2.15176
265     movq    R9, RCX	# spill
268     jmp     B10

26d     B34: #	out( B45 B35 ) <- in( B17 )  Freq: 0.999948
26d     call_leaf,runtime  currentTimeMillis
        No JVM State Info
        # 
27d     movq    R11, RAX	# spill
280     subq    R11, [RSP + #24 (32-bit)]	# long
285     testq   R11, R11
288     je     B45  P=0.000001 C=-1.000000

28e     B35: #	out( N603 ) <- in( B34 )  Freq: 0.999947
28e     movq    R10, java/lang/Class:exact *	# ptr
298     movl    RBP, [R10 + #116 (8-bit)]	# compressed ptr ! Field: java/lang/System.out
29c     movl    RAX, #10000000	# long (unsigned 32-bit)
2a1     movq    rdx, 0x8000000000000000	# ldiv
	cmpq    rax, rdx
	jne,s   normal
	xorl    rdx, rdx
	cmpq    R11, -1
	je,s    done
normal: cdqq
	idivq   R11
done:
2bd     imulq   R10, RAX, #1000	# long
2c4     cvtsi2sdq XMM0, R10	# l2d
2c9     movl    RSI, #-83	# int
2ce     movl    [rsp + #0], R13	# spill
2d2     movq    [rsp + #8], R11	# spill
2d7     movsd   [rsp + #16], XMM0	# spill
        nop 	# 3 bytes pad for loops and calls
2e0     call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # test::main @ bci:192  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ STK[0]=RBP STK[1]=rsp + #8 STK[2]=_ STK[3]=rsp + #16 STK[4]=_ STK[5]=rsp + #0
        # OopMap {rbp=NarrowOop off=744/0x2e8}
2e8     stop	# ShouldNotReachHere

2fc     B36: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
2fc     xorl    R11, R11	# ptr
        nop 	# 1 bytes pad for loops and calls
300     jmp     B4

305     B37: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
305     xorl    R10, R10	# ptr
308     jmp     B7

30d     B38: #	out( B27 ) <- in( B24 )  Freq: 1.01322e-05
30d     movq    RDX, R9	# spill
310     jmp     B27

315     B39: #	out( B26 B40 ) <- in( B25 )  Freq: 1.01322e-05
315     cmpq    RDI, R9	# ptr
318     jb,u   B26  P=0.999999 C=-1.000000

31e     B40: #	out( B27 ) <- in( B39 )  Freq: 1.02668e-11
31e     movq    [rsp + #56], RDI	# spill
323     movl    [rsp + #36], R8	# spill
328     movq    [rsp + #48], R11	# spill
32d     movq    [rsp + #40], R10	# spill
332     movq    [rsp + #16], RCX	# spill
337     movq    [rsp + #8], R9	# spill
33c     movq    RDI, RCX	# spill
33f     movq    RSI, R9	# spill
342     movq    RDX, [rsp + #0]	# spill
346     call_leaf_nofp,runtime  jbyte_disjoint_arraycopy
        No JVM State Info
        # 
356     movq    RDX, [rsp + #8]	# spill
35b     movq    RCX, [rsp + #16]	# spill
360     movq    R10, [rsp + #40]	# spill
365     movq    R11, [rsp + #48]	# spill
36a     movl    R8, [rsp + #36]	# spill
36f     movq    RDI, [rsp + #56]	# spill
374     jmp     B27

379     B41: #	out( B31 B42 ) <- in( B30 )  Freq: 1.01322e-05
379     cmpq    RDI, RDX	# ptr
        nop 	# 4 bytes pad for loops and calls
380     jb,u   B31  P=0.999999 C=-1.000000

386     B42: #	out( B32 ) <- in( B41 )  Freq: 1.02667e-11
386     movq    [rsp + #48], RDI	# spill
38b     movl    [rsp + #36], R8	# spill
390     movq    [rsp + #40], R11	# spill
395     movq    [rsp + #16], R10	# spill
39a     movq    [rsp + #8], RCX	# spill
39f     movq    R13, RDX	# spill
3a2     movq    RDI, RCX	# spill
3a5     movq    RSI, RDX	# spill
3a8     movq    RDX, [rsp + #0]	# spill
3ac     call_leaf_nofp,runtime  jbyte_disjoint_arraycopy
        No JVM State Info
        # 
3bc     movq    RDX, R13	# spill
3bf     movq    RCX, [rsp + #8]	# spill
3c4     movq    R10, [rsp + #16]	# spill
3c9     movq    R11, [rsp + #40]	# spill
3ce     movl    R8, [rsp + #36]	# spill
3d3     movq    RDI, [rsp + #48]	# spill
3d8     jmp     B32

3dd     B43: #	out( N603 ) <- in( B22 B23 )  Freq: 1.99989e-05
3dd     movl    RSI, #-52	# int
3e2     pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
3ec     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #24], rax
	movq    rax, [rsp - #8]
3fe     movl    [rsp + #28], RBX	# spill
402     movl    [rsp + #32], R13	# spill
407     movq    [rsp + #40], R10	# spill
40c     movq    [rsp + #48], R11	# spill
411     movq    [rsp + #56], R10	# spill
416     movl    [rsp + #36], R8	# spill
        nop 	# 1 bytes pad for loops and calls
41c     call,static  wrapper for: uncommon_trap(reason='intrinsic_or_type_checked_inlining' action='make_not_entrant' debug_id='0')
        # test::workload @ bci:5  L[0]=rsp + #56 L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #48 STK[1]=RBP STK[2]=rsp + #40 STK[3]=RBP STK[4]=rsp + #36
        # test::main @ bci:141  L[0]=_ L[1]=_ L[2]=rsp + #48 L[3]=rsp + #40 L[4]=rsp + #16 L[5]=_ L[6]=_ L[7]=rsp + #24 L[8]=rsp + #28 L[9]=_ L[10]=_ STK[0]=rsp + #32
        # OopMap {[40]=Oop [48]=Oop [56]=Oop off=1060/0x424}
424     stop	# ShouldNotReachHere

438     B44: #	out( N603 ) <- in( B27 )  Freq: 9.99944e-06
438     movl    RSI, #-28	# int
43d     movq    RBP, R11	# spill
440     movq    R11, [rsp + #24]	# spill
445     movq    [rsp + #8], R11	# spill
44a     movl    R8, [rsp + #32]	# spill
44f     movl    [rsp + #16], R8	# spill
454     movl    [rsp + #20], RBX	# spill
458     movl    [rsp + #24], R13	# spill
45d     movq    [rsp + #32], R10	# spill
        nop 	# 2 bytes pad for loops and calls
464     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # test::workload @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #32 STK[1]=#0
        # test::main @ bci:141  L[0]=_ L[1]=_ L[2]=RBP L[3]=rsp + #32 L[4]=rsp + #8 L[5]=_ L[6]=_ L[7]=rsp + #16 L[8]=rsp + #20 L[9]=_ L[10]=_ STK[0]=rsp + #24
        # OopMap {rbp=Oop [32]=Oop off=1132/0x46c}
46c     stop	# ShouldNotReachHere

480     B45: #	out( N603 ) <- in( B34 )  Freq: 1.01323e-06
480     movl    RSI, #-122	# int
485     movq    RBP, [rsp + #24]	# spill
48a     movl    [rsp + #0], R13	# spill
48e     movq    [rsp + #8], RAX	# spill
        nop 	# 1 bytes pad for loops and calls
494     call,static  wrapper for: uncommon_trap(reason='div0_check' action='maybe_recompile' debug_id='0')
        # test::main @ bci:172  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=RBP L[5]=_ L[6]=rsp + #0 L[7]=rsp + #8 L[8]=_ L[9]=_ L[10]=_ STK[0]=#10000000 STK[1]=_ STK[2]=#0 STK[3]=_
        # OopMap {off=1180/0x49c}
49c     stop	# ShouldNotReachHere

4b0     B46: #	out( B47 ) <- in( B2 )  Freq: 9.99e-07
4b0     movq    R10, R14	# spill

4b3     B47: #	out( N603 ) <- in( B46 B5 )  Freq: 1.998e-06
4b3     movl    RSI, #-115	# int
4b8     movq    [rsp + #0], R10	# spill
4bc     movq    R10, [rsp + #24]	# spill
4c1     movq    [rsp + #8], R10	# spill
4c6     movl    [rsp + #16], R13	# spill
4cb     movl    [rsp + #24], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
4d0     call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret' debug_id='0')
        # test::main @ bci:118  L[0]=_ L[1]=_ L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #8 L[5]=_ L[6]=rsp + #16 L[7]=rsp + #32 L[8]=rsp + #24 L[9]=_ L[10]=_
        # OopMap {rbp=Oop [0]=Oop off=1240/0x4d8}
4d8     stop	# ShouldNotReachHere

4ec     B48: #	out( N603 ) <- in( B20 )  Freq: 1.01323e-05
4ec     movl    RSI, #-10	# int
4f1     movq    [rsp + #0], R11	# spill
4f5     pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
4ff     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #24], rax
	movq    rax, [rsp - #8]
511     movl    [rsp + #28], RBX	# spill
515     movl    [rsp + #32], R13	# spill
51a     movq    [rsp + #40], R10	# spill
51f     movl    [rsp + #36], R8	# spill
524     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # test::workload @ bci:5  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #40 STK[3]=RBP STK[4]=rsp + #36
        # test::main @ bci:141  L[0]=_ L[1]=_ L[2]=rsp + #0 L[3]=rsp + #40 L[4]=rsp + #16 L[5]=_ L[6]=_ L[7]=rsp + #24 L[8]=rsp + #28 L[9]=_ L[10]=_ STK[0]=rsp + #32
        # OopMap {[0]=Oop [40]=Oop off=1324/0x52c}
52c     stop	# ShouldNotReachHere

540     B49: #	out( N603 ) <- in( B21 )  Freq: 1.01323e-05
540     movl    RSI, #-10	# int
545     movq    [rsp + #8], R10	# spill
54a     pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
554     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #24], rax
	movq    rax, [rsp - #8]
566     movl    [rsp + #28], RBX	# spill
56a     movl    [rsp + #32], R13	# spill
56f     movq    [rsp + #40], R11	# spill
574     movl    [rsp + #36], R8	# spill
        nop 	# 3 bytes pad for loops and calls
57c     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # test::workload @ bci:5  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #40 STK[1]=RBP STK[2]=#NULL STK[3]=RBP STK[4]=rsp + #36
        # test::main @ bci:141  L[0]=_ L[1]=_ L[2]=rsp + #40 L[3]=rsp + #8 L[4]=rsp + #16 L[5]=_ L[6]=_ L[7]=rsp + #24 L[8]=rsp + #28 L[9]=_ L[10]=_ STK[0]=rsp + #32
        # OopMap {[8]=Oop [40]=Oop off=1412/0x584}
584     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     727  103 % !         test::main @ 118 (206 bytes)
 total in heap  [0x00007fdad5172110,0x00007fdad5172da0] = 3216
 relocation     [0x00007fdad5172288,0x00007fdad5172300] = 120
 main code      [0x00007fdad5172300,0x00007fdad51728a0] = 1440
 stub code      [0x00007fdad51728a0,0x00007fdad51728b8] = 24
 oops           [0x00007fdad51728b8,0x00007fdad51728c0] = 8
 metadata       [0x00007fdad51728c0,0x00007fdad51728d8] = 24
 scopes data    [0x00007fdad51728d8,0x00007fdad5172b00] = 552
 scopes pcs     [0x00007fdad5172b00,0x00007fdad5172d80] = 640
 dependencies   [0x00007fdad5172d80,0x00007fdad5172d88] = 8
 nul chk table  [0x00007fdad5172d88,0x00007fdad5172da0] = 24

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007fda79f0b6c0} 'main' '([Ljava/lang/String;)V' in 'test'
 ;; N603: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fdad5172300:   callq  0x00007fdadee236d0           ;   {runtime_call os::breakpoint()}
  0x00007fdad5172305:   nop
  0x00007fdad5172306:   nop
  0x00007fdad5172307:   nop
  0x00007fdad5172308:   nop
  0x00007fdad5172309:   nop
  0x00007fdad517230a:   nop
  0x00007fdad517230b:   nop
  0x00007fdad517230c:   nop
  0x00007fdad517230d:   nop
  0x00007fdad517230e:   nop
  0x00007fdad517230f:   nop
 ;; B1: #	out( B36 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fdad5172310:   mov    %eax,-0x16000(%rsp)
  0x00007fdad5172317:   push   %rbp
  0x00007fdad5172318:   sub    $0x50,%rsp
  0x00007fdad517231c:   mov    0x40(%rsi),%rbp
  0x00007fdad5172320:   mov    0x38(%rsi),%r14
  0x00007fdad5172324:   mov    0x10(%rsi),%ebx
  0x00007fdad5172327:   mov    0x28(%rsi),%r10
  0x00007fdad517232b:   mov    %r10,0x18(%rsp)
  0x00007fdad5172330:   mov    0x20(%rsi),%r13d
  0x00007fdad5172334:   mov    0x18(%rsi),%r11d
  0x00007fdad5172338:   mov    %r11d,0x20(%rsp)
  0x00007fdad517233d:   mov    %rsi,%rdi
  0x00007fdad5172340:   vzeroupper 
  0x00007fdad5172343:   movabs $0x7fdadef47b90,%r10
  0x00007fdad517234d:   callq  *%r10
  0x00007fdad5172350:   test   %rbp,%rbp
  0x00007fdad5172353:   je     0x00007fdad51725fc
 ;; B2: #	out( B46 B3 ) <- in( B1 )  Freq: 0.999
  0x00007fdad5172359:   mov    0x8(%rbp),%r11d
  0x00007fdad517235d:   nop
  0x00007fdad517235e:   nop
  0x00007fdad517235f:   nop
  0x00007fdad5172360:   cmp    $0x860,%r11d                 ;   {metadata({type array byte})}
  0x00007fdad5172367:   jne    0x00007fdad51727b0
 ;; B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
  0x00007fdad517236d:   mov    %rbp,%r11
 ;; B4: #	out( B37 B5 ) <- in( B3 B36 )  Freq: 0.999999
  0x00007fdad5172370:   mov    %r14,%r10
  0x00007fdad5172373:   test   %r14,%r14
  0x00007fdad5172376:   je     0x00007fdad5172605
 ;; B5: #	out( B47 B6 ) <- in( B4 )  Freq: 0.998999
  0x00007fdad517237c:   mov    0x8(%r14),%r8d
  0x00007fdad5172380:   cmp    $0x860,%r8d                  ;   {metadata({type array byte})}
  0x00007fdad5172387:   jne    0x00007fdad51727b3           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@150 (line 46)
 ;; B6: #	out( B7 ) <- in( B5 )  Freq: 0.998998
 ;; B7: #	out( B19 ) <- in( B6 B37 )  Freq: 0.999998
  0x00007fdad517238d:   jmpq   0x00007fdad5172468
 ;; B8: #	out( B9 ) <- in( B13 B14 ) top-of-loop Freq: 2.12355e+06
  0x00007fdad5172392:   kmovq  %rbp,%k2
  0x00007fdad5172397:   vmovdqu8 (%rcx),%ymm0{%k2}{z}
  0x00007fdad517239d:   kmovq  %rbp,%k2
  0x00007fdad51723a2:   vmovdqu8 %ymm0,(%rdx){%k2}
 ;; B9: #	out( B10 ) <- in( B8 B15 ) top-of-loop Freq: 2.12355e+06
  0x00007fdad51723a8:   mov    %rcx,%r9                     ;*invokestatic arraycopy {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::workload@5 (line 8)
                                                            ; - test::main@141 (line 47)
 ;; B10: #	out( B11 ) <- in( B9 B33 )  Freq: 2.12356e+06
  0x00007fdad51723ab:   mov    0x128(%r15),%rsi
  0x00007fdad51723b2:   movsbl 0x10(%r10),%ecx
  0x00007fdad51723b7:   add    %ecx,%r13d                   ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@144 (line 47)
  0x00007fdad51723ba:   inc    %ebx                         ; ImmutableOopMap {r10=Oop r11=Oop r9=Derived_oop_r11 rdi=Derived_oop_r11 rdx=Derived_oop_r10 }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::main@150 (line 46)
  0x00007fdad51723bc:   test   %eax,(%rsi)                  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@150 (line 46)
                                                            ;   {poll}
  0x00007fdad51723be:   mov    %r9,%rcx                     ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@118 (line 46)
 ;; B11: #	out( B17 B12 ) <- in( B32 B10 ) Loop( B11-B10 inner ) Freq: 2.12357e+06
  0x00007fdad51723c1:   cmp    $0x30d40,%ebx
  0x00007fdad51723c7:   jge    0x00007fdad517243f           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@122 (line 46)
 ;; B12: #	out( B33 B13 ) <- in( B11 )  Freq: 2.12356e+06
  0x00007fdad51723cd:   test   %r8d,%r8d
  0x00007fdad51723d0:   je     0x00007fdad5172565
 ;; B13: #	out( B8 B14 ) <- in( B12 )  Freq: 2.12355e+06
  0x00007fdad51723d6:   cmp    %rcx,%rdx
  0x00007fdad51723d9:   jbe    0x00007fdad5172392
 ;; B14: #	out( B8 B15 ) <- in( B13 )  Freq: 2.15175
  0x00007fdad51723db:   nop
  0x00007fdad51723dc:   nop
  0x00007fdad51723dd:   nop
  0x00007fdad51723de:   nop
  0x00007fdad51723df:   nop
  0x00007fdad51723e0:   cmp    %rdx,%rdi
  0x00007fdad51723e3:   jb     0x00007fdad5172392
 ;; B15: #	out( B9 ) <- in( B14 )  Freq: 2.18033e-06
  0x00007fdad51723e5:   mov    %rdi,0x30(%rsp)
  0x00007fdad51723ea:   mov    %r8d,0x24(%rsp)
  0x00007fdad51723ef:   mov    %r11,0x28(%rsp)
  0x00007fdad51723f4:   mov    %r10,0x10(%rsp)
  0x00007fdad51723f9:   mov    %rcx,0x8(%rsp)
  0x00007fdad51723fe:   mov    %rdx,%r14
  0x00007fdad5172401:   mov    %rcx,%rdi
  0x00007fdad5172404:   mov    %rdx,%rsi
  0x00007fdad5172407:   mov    (%rsp),%rdx
  0x00007fdad517240b:   vzeroupper 
  0x00007fdad517240e:   movabs $0x7fdad508be20,%r10
  0x00007fdad5172418:   callq  *%r10
  0x00007fdad517241b:   mov    %r14,%rdx
  0x00007fdad517241e:   mov    0x8(%rsp),%rcx
  0x00007fdad5172423:   mov    0x10(%rsp),%r10
  0x00007fdad5172428:   mov    0x28(%rsp),%r11
  0x00007fdad517242d:   mov    0x24(%rsp),%r8d
  0x00007fdad5172432:   mov    0x30(%rsp),%rdi
  0x00007fdad5172437:   jmpq   0x00007fdad51723a8
 ;; B16: #	out( B17 ) <- in( B28 )  Freq: 4.7085e-05
  0x00007fdad517243c:   mov    %r14d,%r13d                  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@156 (line 45)
 ;; B17: #	out( B34 B18 ) <- in( B19 B16 B11 )  Freq: 9.99947
  0x00007fdad517243f:   mov    0x128(%r15),%r9
  0x00007fdad5172446:   mov    0x20(%rsp),%r8d
  0x00007fdad517244b:   inc    %r8d                         ; ImmutableOopMap {r10=Oop r11=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::main@156 (line 45)
  0x00007fdad517244e:   test   %eax,(%r9)                   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@156 (line 45)
                                                            ;   {poll}
  0x00007fdad5172451:   cmp    $0x1388,%r8d
  0x00007fdad5172458:   jge    0x00007fdad517256d           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@112 (line 45)
 ;; B18: #	out( B19 ) <- in( B17 )  Freq: 8.99953
  0x00007fdad517245e:   mov    $0x1,%ebx
  0x00007fdad5172463:   mov    %r8d,0x20(%rsp)              ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@118 (line 46)
 ;; B19: #	out( B17 B20 ) <- in( B7 B18 ) Loop( B19-B18 ) Freq: 9.99953
  0x00007fdad5172468:   cmp    $0x30d40,%ebx
  0x00007fdad517246e:   jge    0x00007fdad517243f           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@122 (line 46)
 ;; B20: #	out( B48 B21 ) <- in( B19 )  Freq: 9.99948
  0x00007fdad5172470:   mov    0x20(%rsp),%r8d
  0x00007fdad5172475:   and    $0x1f,%r8d                   ;*iand {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@139 (line 47)
  0x00007fdad5172479:   mov    0x20(%rsp),%ebp
  0x00007fdad517247d:   and    $0x1ff,%ebp                  ;*iand {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@134 (line 47)
  0x00007fdad5172483:   mov    0xc(%r11),%r9d               ; implicit exception: dispatches to 0x00007fdad51727ec
 ;; B21: #	out( B49 B22 ) <- in( B20 )  Freq: 9.99947
  0x00007fdad5172487:   mov    0xc(%r10),%r14d              ; implicit exception: dispatches to 0x00007fdad5172840
 ;; B22: #	out( B43 B23 ) <- in( B21 )  Freq: 9.99946
  0x00007fdad517248b:   mov    %ebp,%edi
  0x00007fdad517248d:   add    %r8d,%edi
  0x00007fdad5172490:   cmp    %edi,%r9d
  0x00007fdad5172493:   jb     0x00007fdad51726dd
 ;; B23: #	out( B43 B24 ) <- in( B22 )  Freq: 9.99945
  0x00007fdad5172499:   cmp    %edi,%r14d
  0x00007fdad517249c:   nop
  0x00007fdad517249d:   nop
  0x00007fdad517249e:   nop
  0x00007fdad517249f:   nop
  0x00007fdad51724a0:   jb     0x00007fdad51726dd
 ;; B24: #	out( B38 B25 ) <- in( B23 )  Freq: 9.99944
  0x00007fdad51724a6:   movslq %r8d,%rdx
  0x00007fdad51724a9:   movslq %ebp,%rdi
  0x00007fdad51724ac:   lea    0x10(%r10,%rdi,1),%r9
  0x00007fdad51724b1:   mov    %r11,%rcx
  0x00007fdad51724b4:   add    %rdi,%rcx
  0x00007fdad51724b7:   lea    0x10(%rcx,%rdx,1),%rdi
  0x00007fdad51724bc:   mov    %rdx,(%rsp)
  0x00007fdad51724c0:   add    $0x10,%rcx
  0x00007fdad51724c4:   mov    (%rsp),%rsi
  0x00007fdad51724c8:   movabs $0x1,%rbp
  0x00007fdad51724d2:   shlx   %rsi,%rbp,%rbp
  0x00007fdad51724d7:   dec    %rbp
  0x00007fdad51724da:   nop
  0x00007fdad51724db:   nop
  0x00007fdad51724dc:   nop
  0x00007fdad51724dd:   nop
  0x00007fdad51724de:   nop
  0x00007fdad51724df:   nop
  0x00007fdad51724e0:   test   %r8d,%r8d
  0x00007fdad51724e3:   je     0x00007fdad517260d
 ;; B25: #	out( B39 B26 ) <- in( B24 )  Freq: 9.99943
  0x00007fdad51724e9:   mov    %r9,%rdx
  0x00007fdad51724ec:   cmp    %rcx,%r9
  0x00007fdad51724ef:   ja     0x00007fdad5172615
 ;; B26: #	out( B27 ) <- in( B25 B39 )  Freq: 9.99943
  0x00007fdad51724f5:   kmovq  %rbp,%k2
  0x00007fdad51724fa:   vmovdqu8 (%rcx),%ymm0{%k2}{z}
  0x00007fdad5172500:   kmovq  %rbp,%k2
  0x00007fdad5172505:   vmovdqu8 %ymm0,(%r9){%k2}           ;*invokestatic arraycopy {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::workload@5 (line 8)
                                                            ; - test::main@141 (line 47)
 ;; B27: #	out( B44 B28 ) <- in( B26 B40 B38 )  Freq: 9.99944
  0x00007fdad517250b:   test   %r14d,%r14d
  0x00007fdad517250e:   jbe    0x00007fdad5172738
 ;; B28: #	out( B16 B29 ) <- in( B27 )  Freq: 9.99943
  0x00007fdad5172514:   movsbl 0x10(%r10),%r14d
  0x00007fdad5172519:   add    %r13d,%r14d                  ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@144 (line 47)
  0x00007fdad517251c:   mov    %ebx,%r9d
  0x00007fdad517251f:   inc    %r9d
  0x00007fdad5172522:   cmp    $0x30d40,%r9d
  0x00007fdad5172529:   jge    0x00007fdad517243c           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@122 (line 46)
 ;; B29: #	out( B32 B30 ) <- in( B28 )  Freq: 9.99938
  0x00007fdad517252f:   test   %r8d,%r8d
  0x00007fdad5172532:   je     0x00007fdad5172553
 ;; B30: #	out( B41 B31 ) <- in( B29 )  Freq: 9.99937
  0x00007fdad5172534:   cmp    %rcx,%rdx
  0x00007fdad5172537:   ja     0x00007fdad5172679
 ;; B31: #	out( B32 ) <- in( B30 B41 )  Freq: 9.99937
  0x00007fdad517253d:   kmovq  %rbp,%k2
  0x00007fdad5172542:   vmovdqu8 (%rcx),%ymm0{%k2}{z}
  0x00007fdad5172548:   kmovq  %rbp,%k2
  0x00007fdad517254d:   vmovdqu8 %ymm0,(%rdx){%k2}          ;*invokestatic arraycopy {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::workload@5 (line 8)
                                                            ; - test::main@141 (line 47)
 ;; B32: #	out( B11 ) <- in( B31 B42 B29 )  Freq: 9.99938
  0x00007fdad5172553:   movsbl 0x10(%r10),%r13d
  0x00007fdad5172558:   add    %r14d,%r13d                  ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@144 (line 47)
  0x00007fdad517255b:   add    $0x2,%ebx                    ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@147 (line 46)
  0x00007fdad517255e:   nop
  0x00007fdad517255f:   nop
  0x00007fdad5172560:   jmpq   0x00007fdad51723c1
 ;; B33: #	out( B10 ) <- in( B12 )  Freq: 2.15176
  0x00007fdad5172565:   mov    %rcx,%r9
  0x00007fdad5172568:   jmpq   0x00007fdad51723ab           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@112 (line 45)
 ;; B34: #	out( B45 B35 ) <- in( B17 )  Freq: 0.999948
  0x00007fdad517256d:   vzeroupper 
  0x00007fdad5172570:   movabs $0x7fdadee25d30,%r10
  0x00007fdad517257a:   callq  *%r10                        ;*invokestatic currentTimeMillis {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@159 (line 51)
  0x00007fdad517257d:   mov    %rax,%r11
  0x00007fdad5172580:   sub    0x18(%rsp),%r11              ;*lsub {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@171 (line 52)
  0x00007fdad5172585:   test   %r11,%r11
  0x00007fdad5172588:   je     0x00007fdad5172780           ;*invokestatic currentTimeMillis {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@159 (line 51)
 ;; B35: #	out( N603 ) <- in( B34 )  Freq: 0.999947
  0x00007fdad517258e:   movabs $0x101000f58,%r10            ;   {oop(a 'java/lang/Class'{0x0000000101000f58} = 'java/lang/System')}
  0x00007fdad5172598:   mov    0x74(%r10),%ebp              ;*getstatic out {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@180 (line 53)
  0x00007fdad517259c:   mov    $0x989680,%eax
  0x00007fdad51725a1:   movabs $0x8000000000000000,%rdx
  0x00007fdad51725ab:   cmp    %rdx,%rax
  0x00007fdad51725ae:   jne    0x00007fdad51725b8
  0x00007fdad51725b0:   xor    %edx,%edx
  0x00007fdad51725b2:   cmp    $0xffffffffffffffff,%r11
  0x00007fdad51725b6:   je     0x00007fdad51725bd
  0x00007fdad51725b8:   cqto   
  0x00007fdad51725ba:   idiv   %r11
  0x00007fdad51725bd:   imul   $0x3e8,%rax,%r10
  0x00007fdad51725c4:   vcvtsi2sd %r10,%xmm0,%xmm0          ;*l2d {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@177 (line 52)
  0x00007fdad51725c9:   mov    $0xffffffad,%esi
  0x00007fdad51725ce:   mov    %r13d,(%rsp)
  0x00007fdad51725d2:   mov    %r11,0x8(%rsp)
  0x00007fdad51725d7:   vmovsd %xmm0,0x10(%rsp)
  0x00007fdad51725dd:   nop
  0x00007fdad51725de:   nop
  0x00007fdad51725df:   nop
  0x00007fdad51725e0:   vzeroupper 
  0x00007fdad51725e3:   callq  0x00007fdad5118840           ; ImmutableOopMap {rbp=NarrowOop }
                                                            ;*invokedynamic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@192 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fdad51725e8:   movabs $0x7fdadf3862e8,%rdi         ;   {external_word}
  0x00007fdad51725f2:   and    $0xfffffffffffffff0,%rsp
  0x00007fdad51725f6:   callq  0x00007fdadec78e90           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fdad51725fb:   hlt                                 ;*invokedynamic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@192 (line 53)
 ;; B36: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
  0x00007fdad51725fc:   xor    %r11d,%r11d
  0x00007fdad51725ff:   nop
  0x00007fdad5172600:   jmpq   0x00007fdad5172370
 ;; B37: #	out( B7 ) <- in( B4 )  Freq: 0.000999986
  0x00007fdad5172605:   xor    %r10d,%r10d
  0x00007fdad5172608:   jmpq   0x00007fdad517238d
 ;; B38: #	out( B27 ) <- in( B24 )  Freq: 1.01322e-05
  0x00007fdad517260d:   mov    %r9,%rdx
  0x00007fdad5172610:   jmpq   0x00007fdad517250b
 ;; B39: #	out( B26 B40 ) <- in( B25 )  Freq: 1.01322e-05
  0x00007fdad5172615:   cmp    %r9,%rdi
  0x00007fdad5172618:   jb     0x00007fdad51724f5
 ;; B40: #	out( B27 ) <- in( B39 )  Freq: 1.02668e-11
  0x00007fdad517261e:   mov    %rdi,0x38(%rsp)
  0x00007fdad5172623:   mov    %r8d,0x24(%rsp)
  0x00007fdad5172628:   mov    %r11,0x30(%rsp)
  0x00007fdad517262d:   mov    %r10,0x28(%rsp)
  0x00007fdad5172632:   mov    %rcx,0x10(%rsp)
  0x00007fdad5172637:   mov    %r9,0x8(%rsp)
  0x00007fdad517263c:   mov    %rcx,%rdi
  0x00007fdad517263f:   mov    %r9,%rsi
  0x00007fdad5172642:   mov    (%rsp),%rdx
  0x00007fdad5172646:   vzeroupper 
  0x00007fdad5172649:   movabs $0x7fdad508be20,%r10
  0x00007fdad5172653:   callq  *%r10
  0x00007fdad5172656:   mov    0x8(%rsp),%rdx
  0x00007fdad517265b:   mov    0x10(%rsp),%rcx
  0x00007fdad5172660:   mov    0x28(%rsp),%r10
  0x00007fdad5172665:   mov    0x30(%rsp),%r11
  0x00007fdad517266a:   mov    0x24(%rsp),%r8d
  0x00007fdad517266f:   mov    0x38(%rsp),%rdi
  0x00007fdad5172674:   jmpq   0x00007fdad517250b
 ;; B41: #	out( B31 B42 ) <- in( B30 )  Freq: 1.01322e-05
  0x00007fdad5172679:   cmp    %rdx,%rdi
  0x00007fdad517267c:   nop
  0x00007fdad517267d:   nop
  0x00007fdad517267e:   nop
  0x00007fdad517267f:   nop
  0x00007fdad5172680:   jb     0x00007fdad517253d
 ;; B42: #	out( B32 ) <- in( B41 )  Freq: 1.02667e-11
  0x00007fdad5172686:   mov    %rdi,0x30(%rsp)
  0x00007fdad517268b:   mov    %r8d,0x24(%rsp)
  0x00007fdad5172690:   mov    %r11,0x28(%rsp)
  0x00007fdad5172695:   mov    %r10,0x10(%rsp)
  0x00007fdad517269a:   mov    %rcx,0x8(%rsp)
  0x00007fdad517269f:   mov    %rdx,%r13
  0x00007fdad51726a2:   mov    %rcx,%rdi
  0x00007fdad51726a5:   mov    %rdx,%rsi
  0x00007fdad51726a8:   mov    (%rsp),%rdx
  0x00007fdad51726ac:   vzeroupper 
  0x00007fdad51726af:   movabs $0x7fdad508be20,%r10
  0x00007fdad51726b9:   callq  *%r10
  0x00007fdad51726bc:   mov    %r13,%rdx
  0x00007fdad51726bf:   mov    0x8(%rsp),%rcx
  0x00007fdad51726c4:   mov    0x10(%rsp),%r10
  0x00007fdad51726c9:   mov    0x28(%rsp),%r11
  0x00007fdad51726ce:   mov    0x24(%rsp),%r8d
  0x00007fdad51726d3:   mov    0x30(%rsp),%rdi
  0x00007fdad51726d8:   jmpq   0x00007fdad5172553
 ;; B43: #	out( N603 ) <- in( B22 B23 )  Freq: 1.99989e-05
  0x00007fdad51726dd:   mov    $0xffffffcc,%esi
  0x00007fdad51726e2:   rex.W pushq 0x18(%rsp)
  0x00007fdad51726e7:   rex.W popq 0x10(%rsp)
  0x00007fdad51726ec:   mov    %rax,-0x8(%rsp)
  0x00007fdad51726f1:   mov    0x20(%rsp),%eax
  0x00007fdad51726f5:   mov    %eax,0x18(%rsp)
  0x00007fdad51726f9:   mov    -0x8(%rsp),%rax
  0x00007fdad51726fe:   mov    %ebx,0x1c(%rsp)
  0x00007fdad5172702:   mov    %r13d,0x20(%rsp)
  0x00007fdad5172707:   mov    %r10,0x28(%rsp)
  0x00007fdad517270c:   mov    %r11,0x30(%rsp)
  0x00007fdad5172711:   mov    %r10,0x38(%rsp)
  0x00007fdad5172716:   mov    %r8d,0x24(%rsp)
  0x00007fdad517271b:   nop
  0x00007fdad517271c:   vzeroupper 
  0x00007fdad517271f:   callq  0x00007fdad5118840           ; ImmutableOopMap {[40]=Oop [48]=Oop [56]=Oop }
                                                            ;*invokestatic arraycopy {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::workload@5 (line 8)
                                                            ; - test::main@141 (line 47)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fdad5172724:   movabs $0x7fdadf3862e8,%rdi         ;   {external_word}
  0x00007fdad517272e:   and    $0xfffffffffffffff0,%rsp
  0x00007fdad5172732:   callq  0x00007fdadec78e90           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fdad5172737:   hlt                                 ;*invokestatic arraycopy {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::workload@5 (line 8)
                                                            ; - test::main@141 (line 47)
 ;; B44: #	out( N603 ) <- in( B27 )  Freq: 9.99944e-06
  0x00007fdad5172738:   mov    $0xffffffe4,%esi
  0x00007fdad517273d:   mov    %r11,%rbp
  0x00007fdad5172740:   mov    0x18(%rsp),%r11
  0x00007fdad5172745:   mov    %r11,0x8(%rsp)
  0x00007fdad517274a:   mov    0x20(%rsp),%r8d
  0x00007fdad517274f:   mov    %r8d,0x10(%rsp)
  0x00007fdad5172754:   mov    %ebx,0x14(%rsp)
  0x00007fdad5172758:   mov    %r13d,0x18(%rsp)
  0x00007fdad517275d:   mov    %r10,0x20(%rsp)
  0x00007fdad5172762:   nop
  0x00007fdad5172763:   nop
  0x00007fdad5172764:   vzeroupper 
  0x00007fdad5172767:   callq  0x00007fdad5118840           ; ImmutableOopMap {rbp=Oop [32]=Oop }
                                                            ;*baload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::workload@10 (line 10)
                                                            ; - test::main@141 (line 47)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fdad517276c:   movabs $0x7fdadf3862e8,%rdi         ;   {external_word}
  0x00007fdad5172776:   and    $0xfffffffffffffff0,%rsp
  0x00007fdad517277a:   callq  0x00007fdadec78e90           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fdad517277f:   hlt    
 ;; B45: #	out( N603 ) <- in( B34 )  Freq: 1.01323e-06
  0x00007fdad5172780:   mov    $0xffffff86,%esi
  0x00007fdad5172785:   mov    0x18(%rsp),%rbp
  0x00007fdad517278a:   mov    %r13d,(%rsp)
  0x00007fdad517278e:   mov    %rax,0x8(%rsp)
  0x00007fdad5172793:   nop
  0x00007fdad5172794:   vzeroupper 
  0x00007fdad5172797:   callq  0x00007fdad5118840           ; ImmutableOopMap {}
                                                            ;*ldiv {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@172 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fdad517279c:   movabs $0x7fdadf3862e8,%rdi         ;   {external_word}
  0x00007fdad51727a6:   and    $0xfffffffffffffff0,%rsp
  0x00007fdad51727aa:   callq  0x00007fdadec78e90           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fdad51727af:   hlt                                 ;*ldiv {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@172 (line 52)
 ;; B46: #	out( B47 ) <- in( B2 )  Freq: 9.99e-07
  0x00007fdad51727b0:   mov    %r14,%r10
 ;; B47: #	out( N603 ) <- in( B46 B5 )  Freq: 1.998e-06
  0x00007fdad51727b3:   mov    $0xffffff8d,%esi
  0x00007fdad51727b8:   mov    %r10,(%rsp)
  0x00007fdad51727bc:   mov    0x18(%rsp),%r10
  0x00007fdad51727c1:   mov    %r10,0x8(%rsp)
  0x00007fdad51727c6:   mov    %r13d,0x10(%rsp)
  0x00007fdad51727cb:   mov    %ebx,0x18(%rsp)
  0x00007fdad51727cf:   nop
  0x00007fdad51727d0:   vzeroupper 
  0x00007fdad51727d3:   callq  0x00007fdad5118840           ; ImmutableOopMap {rbp=Oop [0]=Oop }
                                                            ;*iload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::main@118 (line 46)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fdad51727d8:   movabs $0x7fdadf3862e8,%rdi         ;   {external_word}
  0x00007fdad51727e2:   and    $0xfffffffffffffff0,%rsp
  0x00007fdad51727e6:   callq  0x00007fdadec78e90           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fdad51727eb:   hlt    
 ;; B48: #	out( N603 ) <- in( B20 )  Freq: 1.01323e-05
  0x00007fdad51727ec:   mov    $0xfffffff6,%esi
  0x00007fdad51727f1:   mov    %r11,(%rsp)
  0x00007fdad51727f5:   rex.W pushq 0x18(%rsp)
  0x00007fdad51727fa:   rex.W popq 0x10(%rsp)
  0x00007fdad51727ff:   mov    %rax,-0x8(%rsp)
  0x00007fdad5172804:   mov    0x20(%rsp),%eax
  0x00007fdad5172808:   mov    %eax,0x18(%rsp)
  0x00007fdad517280c:   mov    -0x8(%rsp),%rax
  0x00007fdad5172811:   mov    %ebx,0x1c(%rsp)
  0x00007fdad5172815:   mov    %r13d,0x20(%rsp)
  0x00007fdad517281a:   mov    %r10,0x28(%rsp)
  0x00007fdad517281f:   mov    %r8d,0x24(%rsp)
  0x00007fdad5172824:   vzeroupper 
  0x00007fdad5172827:   callq  0x00007fdad5118840           ; ImmutableOopMap {[0]=Oop [40]=Oop }
                                                            ;*invokestatic arraycopy {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::workload@5 (line 8)
                                                            ; - test::main@141 (line 47)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fdad517282c:   movabs $0x7fdadf3862e8,%rdi         ;   {external_word}
  0x00007fdad5172836:   and    $0xfffffffffffffff0,%rsp
  0x00007fdad517283a:   callq  0x00007fdadec78e90           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fdad517283f:   hlt    
 ;; B49: #	out( N603 ) <- in( B21 )  Freq: 1.01323e-05
  0x00007fdad5172840:   mov    $0xfffffff6,%esi
  0x00007fdad5172845:   mov    %r10,0x8(%rsp)
  0x00007fdad517284a:   rex.W pushq 0x18(%rsp)
  0x00007fdad517284f:   rex.W popq 0x10(%rsp)
  0x00007fdad5172854:   mov    %rax,-0x8(%rsp)
  0x00007fdad5172859:   mov    0x20(%rsp),%eax
  0x00007fdad517285d:   mov    %eax,0x18(%rsp)
  0x00007fdad5172861:   mov    -0x8(%rsp),%rax
  0x00007fdad5172866:   mov    %ebx,0x1c(%rsp)
  0x00007fdad517286a:   mov    %r13d,0x20(%rsp)
  0x00007fdad517286f:   mov    %r11,0x28(%rsp)
  0x00007fdad5172874:   mov    %r8d,0x24(%rsp)
  0x00007fdad5172879:   nop
  0x00007fdad517287a:   nop
  0x00007fdad517287b:   nop
  0x00007fdad517287c:   vzeroupper 
  0x00007fdad517287f:   callq  0x00007fdad5118840           ; ImmutableOopMap {[8]=Oop [40]=Oop }
                                                            ;*invokestatic arraycopy {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::workload@5 (line 8)
                                                            ; - test::main@141 (line 47)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fdad5172884:   movabs $0x7fdadf3862e8,%rdi         ;   {external_word}
  0x00007fdad517288e:   and    $0xfffffffffffffff0,%rsp
  0x00007fdad5172892:   callq  0x00007fdadec78e90           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fdad5172897:   hlt                                 ;*invokestatic arraycopy {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::workload@5 (line 8)
                                                            ; - test::main@141 (line 47)
  0x00007fdad5172898:   hlt    
  0x00007fdad5172899:   hlt    
  0x00007fdad517289a:   hlt    
  0x00007fdad517289b:   hlt    
  0x00007fdad517289c:   hlt    
  0x00007fdad517289d:   hlt    
  0x00007fdad517289e:   hlt    
  0x00007fdad517289f:   hlt    
[Exception Handler]
  0x00007fdad51728a0:   jmpq   0x00007fdad503bf20           ;   {no_reloc}
[Deopt Handler Code]
  0x00007fdad51728a5:   callq  0x00007fdad51728aa
  0x00007fdad51728aa:   subq   $0x5,(%rsp)
  0x00007fdad51728af:   jmpq   0x00007fdad5118160           ;   {runtime_call DeoptimizationBlob}
  0x00007fdad51728b4:   hlt    
  0x00007fdad51728b5:   hlt    
  0x00007fdad51728b6:   hlt    
  0x00007fdad51728b7:   hlt    
--------------------------------------------------------------------------------
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007fdad51728b8:   0x0000000101120aa8 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000101120aa8}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007fdad51728c0:   0x0000000800000860 {type array byte}
  0x00007fdad51728c8:   0x00007fda79f0b6c0 {method} {0x00007fda79f0b6c0} 'main' '([Ljava/lang/String;)V' in 'test'
  0x00007fdad51728d0:   0x00007fda79f0b520 {method} {0x00007fda79f0b520} 'workload' '([B[BIIZ)B' in 'test'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007fdad51722ff offset=ffffffff bits=0):
PcDesc(pc=0x00007fdad517238d offset=8d bits=0):   test::main@150 (line 46)
PcDesc(pc=0x00007fdad51723ab offset=ab bits=0):   test::workload@5 (line 8)
   test::main@141 (line 47)
PcDesc(pc=0x00007fdad51723ba offset=ba bits=0):   test::main@144 (line 47)
PcDesc(pc=0x00007fdad51723bc offset=bc bits=1):   test::main@150 (line 46)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: reg r11 [22],oop
    - l3: reg r10 [20],oop
    - l4: 0
    - l5: stack[24],long
    - l6: reg r13 [26],int
    - l7: stack[32]
    - l8: reg rbx [6],int
    - l9: empty
    - l10: empty
PcDesc(pc=0x00007fdad51723be offset=be bits=0):   test::main@150 (line 46)
PcDesc(pc=0x00007fdad51723c1 offset=c1 bits=0):   test::main@118 (line 46)
PcDesc(pc=0x00007fdad51723cd offset=cd bits=0):   test::main@122 (line 46)
PcDesc(pc=0x00007fdad517243f offset=13f bits=0):   test::main@156 (line 45)
PcDesc(pc=0x00007fdad517244e offset=14e bits=1):   test::main@156 (line 45)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: reg r11 [22],oop
    - l3: reg r10 [20],oop
    - l4: 0
    - l5: stack[24],long
    - l6: reg r13 [26],int
    - l7: reg r8 [16],int
    - l8: empty
    - l9: empty
    - l10: empty
PcDesc(pc=0x00007fdad5172451 offset=151 bits=0):   test::main@156 (line 45)
PcDesc(pc=0x00007fdad517245e offset=15e bits=0):   test::main@112 (line 45)
PcDesc(pc=0x00007fdad5172468 offset=168 bits=0):   test::main@118 (line 46)
PcDesc(pc=0x00007fdad5172470 offset=170 bits=0):   test::main@122 (line 46)
PcDesc(pc=0x00007fdad5172479 offset=179 bits=0):   test::main@139 (line 47)
PcDesc(pc=0x00007fdad5172483 offset=183 bits=0):   test::main@134 (line 47)
PcDesc(pc=0x00007fdad517250b offset=20b bits=0):   test::workload@5 (line 8)
   test::main@141 (line 47)
PcDesc(pc=0x00007fdad517251c offset=21c bits=0):   test::main@144 (line 47)
PcDesc(pc=0x00007fdad517252f offset=22f bits=0):   test::main@122 (line 46)
PcDesc(pc=0x00007fdad5172553 offset=253 bits=0):   test::workload@5 (line 8)
   test::main@141 (line 47)
PcDesc(pc=0x00007fdad517255b offset=25b bits=0):   test::main@144 (line 47)
PcDesc(pc=0x00007fdad517255e offset=25e bits=0):   test::main@147 (line 46)
PcDesc(pc=0x00007fdad517256d offset=26d bits=0):   test::main@112 (line 45)
PcDesc(pc=0x00007fdad517257d offset=27d bits=0):   test::main@159 (line 51)
PcDesc(pc=0x00007fdad5172585 offset=285 bits=0):   test::main@171 (line 52)
PcDesc(pc=0x00007fdad517258e offset=28e bits=0):   test::main@159 (line 51)
PcDesc(pc=0x00007fdad517259c offset=29c bits=0):   test::main@180 (line 53)
PcDesc(pc=0x00007fdad51725c9 offset=2c9 bits=0):   test::main@177 (line 52)
PcDesc(pc=0x00007fdad51725e8 offset=2e8 bits=0):   test::main@192 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
    - @1: 0
    - @2: stack[8],long
    - @3: 0
    - @4: stack[16],double
    - @5: stack[0]
PcDesc(pc=0x00007fdad51725fc offset=2fc bits=0):   test::main@192 (line 53)
PcDesc(pc=0x00007fdad5172724 offset=424 bits=0):   test::workload@5 (line 8)
   Locals
    - l0: stack[56],oop
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[48],oop
    - @1: reg rbp [10],int
    - @2: stack[40],oop
    - @3: reg rbp [10],int
    - @4: stack[36]
   test::main@141 (line 47)
   Locals
    - l0: empty
    - l1: empty
    - l2: stack[48],oop
    - l3: stack[40],oop
    - l4: 0
    - l5: stack[16],long
    - l6: empty
    - l7: stack[24]
    - l8: stack[28]
    - l9: empty
    - l10: empty
   Expression stack
    - @0: stack[32]
PcDesc(pc=0x00007fdad5172738 offset=438 bits=0):   test::workload@5 (line 8)
   test::main@141 (line 47)
PcDesc(pc=0x00007fdad517276c offset=46c bits=0):   test::workload@10 (line 10)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[32],oop
    - @1: 0
   test::main@141 (line 47)
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: stack[32],oop
    - l4: 0
    - l5: stack[8],long
    - l6: empty
    - l7: stack[16]
    - l8: stack[20]
    - l9: empty
    - l10: empty
   Expression stack
    - @0: stack[24]
PcDesc(pc=0x00007fdad517279c offset=49c bits=0):   test::main@172 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: 0
    - l5: reg rbp [10],long
    - l6: stack[0]
    - l7: 0
    - l8: stack[8],long
    - l9: empty
    - l10: empty
   Expression stack
    - @0: 0
    - @1: 10000000
    - @2: 0
    - @3: 0
PcDesc(pc=0x00007fdad51727b0 offset=4b0 bits=0):   test::main@172 (line 52)
PcDesc(pc=0x00007fdad51727d8 offset=4d8 bits=0):   test::main@118 (line 46)
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: 0
    - l5: stack[8],long
    - l6: stack[16]
    - l7: stack[32]
    - l8: stack[24]
    - l9: empty
    - l10: empty
PcDesc(pc=0x00007fdad517282c offset=52c bits=0):   test::workload@5 (line 8)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL

    - @1: reg rbp [10],int
    - @2: stack[40],oop
    - @3: reg rbp [10],int
    - @4: stack[36]
   test::main@141 (line 47)
   Locals
    - l0: empty
    - l1: empty
    - l2: stack[0],oop
    - l3: stack[40],oop
    - l4: 0
    - l5: stack[16],long
    - l6: empty
    - l7: stack[24]
    - l8: stack[28]
    - l9: empty
    - l10: empty
   Expression stack
    - @0: stack[32]
PcDesc(pc=0x00007fdad5172884 offset=584 bits=0):   test::workload@5 (line 8)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[40],oop
    - @1: reg rbp [10],int
    - @2: NULL

    - @3: reg rbp [10],int
    - @4: stack[36]
   test::main@141 (line 47)
   Locals
    - l0: empty
    - l1: empty
    - l2: stack[40],oop
    - l3: stack[8],oop
    - l4: 0
    - l5: stack[16],long
    - l6: empty
    - l7: stack[24]
    - l8: stack[28]
    - l9: empty
    - l10: empty
   Expression stack
    - @0: stack[32]
PcDesc(pc=0x00007fdad5172898 offset=598 bits=0):   test::workload@5 (line 8)
   test::main@141 (line 47)
PcDesc(pc=0x00007fdad51728b9 offset=5b9 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 9 OopMaps

ImmutableOopMap {r10=Oop r11=Oop r9=Derived_oop_r11 rdi=Derived_oop_r11 rdx=Derived_oop_r10 } pc offsets: 188 
ImmutableOopMap {r10=Oop r11=Oop } pc offsets: 334 
ImmutableOopMap {rbp=NarrowOop } pc offsets: 744 
ImmutableOopMap {[40]=Oop [48]=Oop [56]=Oop } pc offsets: 1060 
ImmutableOopMap {rbp=Oop [32]=Oop } pc offsets: 1132 
ImmutableOopMap {} pc offsets: 1180 
ImmutableOopMap {rbp=Oop [0]=Oop } pc offsets: 1240 
ImmutableOopMap {[0]=Oop [40]=Oop } pc offsets: 1324 
ImmutableOopMap {[8]=Oop [40]=Oop } pc offsets: 1412 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007fdad517238d offset=8d):
   test::main@150 (line 46)
ScopeDesc(pc=0x00007fdad51723ab offset=ab):
   test::workload@5 (line 8)
ScopeDesc(pc=0x00007fdad51723ab offset=ab):
   test::main@141 (line 47)
ScopeDesc(pc=0x00007fdad51723ba offset=ba):
   test::main@144 (line 47)
ScopeDesc(pc=0x00007fdad51723bc offset=bc):
   test::main@150 (line 46)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: reg r11 [22],oop
    - l3: reg r10 [20],oop
    - l4: 0
    - l5: stack[24],long
    - l6: reg r13 [26],int
    - l7: stack[32]
    - l8: reg rbx [6],int
    - l9: empty
    - l10: empty
ScopeDesc(pc=0x00007fdad51723be offset=be):
   test::main@150 (line 46)
ScopeDesc(pc=0x00007fdad51723c1 offset=c1):
   test::main@118 (line 46)
ScopeDesc(pc=0x00007fdad51723cd offset=cd):
   test::main@122 (line 46)
ScopeDesc(pc=0x00007fdad517243f offset=13f):
   test::main@156 (line 45)
ScopeDesc(pc=0x00007fdad517244e offset=14e):
   test::main@156 (line 45)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: reg r11 [22],oop
    - l3: reg r10 [20],oop
    - l4: 0
    - l5: stack[24],long
    - l6: reg r13 [26],int
    - l7: reg r8 [16],int
    - l8: empty
    - l9: empty
    - l10: empty
ScopeDesc(pc=0x00007fdad5172451 offset=151):
   test::main@156 (line 45)
ScopeDesc(pc=0x00007fdad517245e offset=15e):
   test::main@112 (line 45)
ScopeDesc(pc=0x00007fdad5172468 offset=168):
   test::main@118 (line 46)
ScopeDesc(pc=0x00007fdad5172470 offset=170):
   test::main@122 (line 46)
ScopeDesc(pc=0x00007fdad5172479 offset=179):
   test::main@139 (line 47)
ScopeDesc(pc=0x00007fdad5172483 offset=183):
   test::main@134 (line 47)
ScopeDesc(pc=0x00007fdad517250b offset=20b):
   test::workload@5 (line 8)
ScopeDesc(pc=0x00007fdad517250b offset=20b):
   test::main@141 (line 47)
ScopeDesc(pc=0x00007fdad517251c offset=21c):
   test::main@144 (line 47)
ScopeDesc(pc=0x00007fdad517252f offset=22f):
   test::main@122 (line 46)
ScopeDesc(pc=0x00007fdad5172553 offset=253):
   test::workload@5 (line 8)
ScopeDesc(pc=0x00007fdad5172553 offset=253):
   test::main@141 (line 47)
ScopeDesc(pc=0x00007fdad517255b offset=25b):
   test::main@144 (line 47)
ScopeDesc(pc=0x00007fdad517255e offset=25e):
   test::main@147 (line 46)
ScopeDesc(pc=0x00007fdad517256d offset=26d):
   test::main@112 (line 45)
ScopeDesc(pc=0x00007fdad517257d offset=27d):
   test::main@159 (line 51)
ScopeDesc(pc=0x00007fdad5172585 offset=285):
   test::main@171 (line 52)
ScopeDesc(pc=0x00007fdad517258e offset=28e):
   test::main@159 (line 51)
ScopeDesc(pc=0x00007fdad517259c offset=29c):
   test::main@180 (line 53)
ScopeDesc(pc=0x00007fdad51725c9 offset=2c9):
   test::main@177 (line 52)
ScopeDesc(pc=0x00007fdad51725e8 offset=2e8):
   test::main@192 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
    - @1: 0
    - @2: stack[8],long
    - @3: 0
    - @4: stack[16],double
    - @5: stack[0]
ScopeDesc(pc=0x00007fdad51725fc offset=2fc):
   test::main@192 (line 53)
ScopeDesc(pc=0x00007fdad5172724 offset=424):
   test::workload@5 (line 8)
   Locals
    - l0: stack[56],oop
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[48],oop
    - @1: reg rbp [10],int
    - @2: stack[40],oop
    - @3: reg rbp [10],int
    - @4: stack[36]
ScopeDesc(pc=0x00007fdad5172724 offset=424):
   test::main@141 (line 47)
   Locals
    - l0: empty
    - l1: empty
    - l2: stack[48],oop
    - l3: stack[40],oop
    - l4: 0
    - l5: stack[16],long
    - l6: empty
    - l7: stack[24]
    - l8: stack[28]
    - l9: empty
    - l10: empty
   Expression stack
    - @0: stack[32]
ScopeDesc(pc=0x00007fdad5172738 offset=438):
   test::workload@5 (line 8)
ScopeDesc(pc=0x00007fdad5172738 offset=438):
   test::main@141 (line 47)
ScopeDesc(pc=0x00007fdad517276c offset=46c):
   test::workload@10 (line 10)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[32],oop
    - @1: 0
ScopeDesc(pc=0x00007fdad517276c offset=46c):
   test::main@141 (line 47)
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: stack[32],oop
    - l4: 0
    - l5: stack[8],long
    - l6: empty
    - l7: stack[16]
    - l8: stack[20]
    - l9: empty
    - l10: empty
   Expression stack
    - @0: stack[24]
ScopeDesc(pc=0x00007fdad517279c offset=49c):
   test::main@172 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: 0
    - l5: reg rbp [10],long
    - l6: stack[0]
    - l7: 0
    - l8: stack[8],long
    - l9: empty
    - l10: empty
   Expression stack
    - @0: 0
    - @1: 10000000
    - @2: 0
    - @3: 0
ScopeDesc(pc=0x00007fdad51727b0 offset=4b0):
   test::main@172 (line 52)
ScopeDesc(pc=0x00007fdad51727d8 offset=4d8):
   test::main@118 (line 46)
   Locals
    - l0: empty
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: stack[0],oop
    - l4: 0
    - l5: stack[8],long
    - l6: stack[16]
    - l7: stack[32]
    - l8: stack[24]
    - l9: empty
    - l10: empty
ScopeDesc(pc=0x00007fdad517282c offset=52c):
   test::workload@5 (line 8)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL

    - @1: reg rbp [10],int
    - @2: stack[40],oop
    - @3: reg rbp [10],int
    - @4: stack[36]
ScopeDesc(pc=0x00007fdad517282c offset=52c):
   test::main@141 (line 47)
   Locals
    - l0: empty
    - l1: empty
    - l2: stack[0],oop
    - l3: stack[40],oop
    - l4: 0
    - l5: stack[16],long
    - l6: empty
    - l7: stack[24]
    - l8: stack[28]
    - l9: empty
    - l10: empty
   Expression stack
    - @0: stack[32]
ScopeDesc(pc=0x00007fdad5172884 offset=584):
   test::workload@5 (line 8)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[40],oop
    - @1: reg rbp [10],int
    - @2: NULL

    - @3: reg rbp [10],int
    - @4: stack[36]
ScopeDesc(pc=0x00007fdad5172884 offset=584):
   test::main@141 (line 47)
   Locals
    - l0: empty
    - l1: empty
    - l2: stack[40],oop
    - l3: stack[8],oop
    - l4: 0
    - l5: stack[16],long
    - l6: empty
    - l7: stack[24]
    - l8: stack[28]
    - l9: empty
    - l10: empty
   Expression stack
    - @0: stack[32]
ScopeDesc(pc=0x00007fdad5172898 offset=598):
   test::workload@5 (line 8)
ScopeDesc(pc=0x00007fdad5172898 offset=598):
   test::main@141 (line 47)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007fdad5172288: 6400
relocInfo@0x00007fdad5172288 [type=6(runtime_call) addr=0x00007fdad5172300 offset=0 format=1] | [destination=0x00007fdadee236d0]
         @0x00007fdad517228a: f001cc60
relocInfo@0x00007fdad517228c [type=12(metadata) addr=0x00007fdad5172360 offset=96 format=3 data=1] | [metadata_addr=0x00007fdad51728c0 *=0x0000000800000860 offset=0]metadata_value=0x0000000800000860: {type array byte}
         @0x00007fdad517228e: f001cc20
relocInfo@0x00007fdad5172290 [type=12(metadata) addr=0x00007fdad5172380 offset=32 format=3 data=1] | [metadata_addr=0x00007fdad51728c0 *=0x0000000800000860 offset=0]metadata_value=0x0000000800000860: {type array byte}
         @0x00007fdad5172292: a03c
relocInfo@0x00007fdad5172292 [type=10(poll) addr=0x00007fdad51723bc offset=60]
         @0x00007fdad5172294: a092
relocInfo@0x00007fdad5172294 [type=10(poll) addr=0x00007fdad517244e offset=146]
         @0x00007fdad5172296: 1140
relocInfo@0x00007fdad5172296 [type=1(oop) addr=0x00007fdad517258e offset=320] | [oop_addr=0x00007fdad5172590 *=0x0000000101000f58 offset=0]
         @0x00007fdad5172298: 6455
relocInfo@0x00007fdad5172298 [type=6(runtime_call) addr=0x00007fdad51725e3 offset=85 format=1] | [destination=0x00007fdad5118840]
         @0x00007fdad517229a: f803df3862e87fda7005
relocInfo@0x00007fdad51722a2 [type=7(external_word) addr=0x00007fdad51725e8 offset=5 data={df3862e87fda}] | [target=0x00007fdadf3862e8]
         @0x00007fdad51722a4: 640e
relocInfo@0x00007fdad51722a4 [type=6(runtime_call) addr=0x00007fdad51725f6 offset=14 format=1] | [destination=0x00007fdadec78e90]
         @0x00007fdad51722a6: 6529
relocInfo@0x00007fdad51722a6 [type=6(runtime_call) addr=0x00007fdad517271f offset=297 format=1] | [destination=0x00007fdad5118840]
         @0x00007fdad51722a8: f803df3862e87fda7005
relocInfo@0x00007fdad51722b0 [type=7(external_word) addr=0x00007fdad5172724 offset=5 data={df3862e87fda}] | [target=0x00007fdadf3862e8]
         @0x00007fdad51722b2: 640e
relocInfo@0x00007fdad51722b2 [type=6(runtime_call) addr=0x00007fdad5172732 offset=14 format=1] | [destination=0x00007fdadec78e90]
         @0x00007fdad51722b4: 6435
relocInfo@0x00007fdad51722b4 [type=6(runtime_call) addr=0x00007fdad5172767 offset=53 format=1] | [destination=0x00007fdad5118840]
         @0x00007fdad51722b6: f803df3862e87fda7005
relocInfo@0x00007fdad51722be [type=7(external_word) addr=0x00007fdad517276c offset=5 data={df3862e87fda}] | [target=0x00007fdadf3862e8]
         @0x00007fdad51722c0: 640e
relocInfo@0x00007fdad51722c0 [type=6(runtime_call) addr=0x00007fdad517277a offset=14 format=1] | [destination=0x00007fdadec78e90]
         @0x00007fdad51722c2: 641d
relocInfo@0x00007fdad51722c2 [type=6(runtime_call) addr=0x00007fdad5172797 offset=29 format=1] | [destination=0x00007fdad5118840]
         @0x00007fdad51722c4: f803df3862e87fda7005
relocInfo@0x00007fdad51722cc [type=7(external_word) addr=0x00007fdad517279c offset=5 data={df3862e87fda}] | [target=0x00007fdadf3862e8]
         @0x00007fdad51722ce: 640e
relocInfo@0x00007fdad51722ce [type=6(runtime_call) addr=0x00007fdad51727aa offset=14 format=1] | [destination=0x00007fdadec78e90]
         @0x00007fdad51722d0: 6429
relocInfo@0x00007fdad51722d0 [type=6(runtime_call) addr=0x00007fdad51727d3 offset=41 format=1] | [destination=0x00007fdad5118840]
         @0x00007fdad51722d2: f803df3862e87fda7005
relocInfo@0x00007fdad51722da [type=7(external_word) addr=0x00007fdad51727d8 offset=5 data={df3862e87fda}] | [target=0x00007fdadf3862e8]
         @0x00007fdad51722dc: 640e
relocInfo@0x00007fdad51722dc [type=6(runtime_call) addr=0x00007fdad51727e6 offset=14 format=1] | [destination=0x00007fdadec78e90]
         @0x00007fdad51722de: 6441
relocInfo@0x00007fdad51722de [type=6(runtime_call) addr=0x00007fdad5172827 offset=65 format=1] | [destination=0x00007fdad5118840]
         @0x00007fdad51722e0: f803df3862e87fda7005
relocInfo@0x00007fdad51722e8 [type=7(external_word) addr=0x00007fdad517282c offset=5 data={df3862e87fda}] | [target=0x00007fdadf3862e8]
         @0x00007fdad51722ea: 640e
relocInfo@0x00007fdad51722ea [type=6(runtime_call) addr=0x00007fdad517283a offset=14 format=1] | [destination=0x00007fdadec78e90]
         @0x00007fdad51722ec: 6445
relocInfo@0x00007fdad51722ec [type=6(runtime_call) addr=0x00007fdad517287f offset=69 format=1] | [destination=0x00007fdad5118840]
         @0x00007fdad51722ee: f803df3862e87fda7005
relocInfo@0x00007fdad51722f6 [type=7(external_word) addr=0x00007fdad5172884 offset=5 data={df3862e87fda}] | [target=0x00007fdadf3862e8]
         @0x00007fdad51722f8: 640e
relocInfo@0x00007fdad51722f8 [type=6(runtime_call) addr=0x00007fdad5172892 offset=14 format=1] | [destination=0x00007fdadec78e90]
         @0x00007fdad51722fa: 000e
relocInfo@0x00007fdad51722fa [type=0(none) addr=0x00007fdad51728a0 offset=14]
         @0x00007fdad51722fc: 6400
relocInfo@0x00007fdad51722fc [type=6(runtime_call) addr=0x00007fdad51728a0 offset=0 format=1] | [destination=0x00007fdad503bf20]
         @0x00007fdad51722fe: 640f
relocInfo@0x00007fdad51722fe [type=6(runtime_call) addr=0x00007fdad51728af offset=15 format=1] | [destination=0x00007fdad5118160]
         @0x00007fdad5172300: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 2 entries, 20 bytes):
{
   < 0x00007fdad5172483, 0x00007fdad51727ec > < 0x00007fdad5172487, 0x00007fdad5172840 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000101120aa8 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x0000000101120aa8}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000800000860 {type array byte}
#2: 0x00007fda79f0b6c0 {method} {0x00007fda79f0b6c0} 'main' '([Ljava/lang/String;)V' in 'test'
#3: 0x00007fda79f0b520 {method} {0x00007fda79f0b520} 'workload' '([B[BIIZ)B' in 'test'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[Time] 1787 ms : [TPS] : 5595000.0 Res =  0
------------------------------------------------------------------------
static test::main([Ljava/lang/String;)V
  interpreter_invocation_count:        1 
  invocation_counter:              10000 
  backedge_counter:                    1 
  mdo size: 960 bytes

0 new 13 <java/util/Random>
3 dup
4 ldc2_w 100
7 invokespecial 17 <java/util/Random.<init>(J)V> 
  0   bci: 7    CounterData         count(0)
10 astore_1
11 sipush 1024
14 newarray byte
16 astore_2
17 sipush 1024
20 newarray byte
22 astore_3
23 iconst_0
24 istore #4
26 iconst_0
27 istore #5
29 fast_iload #5
31 sipush 1024
34 if_icmpge 50
  16  bci: 34   BranchData          taken(0) displacement(56)
                                    not taken(0)
37 aload_2
38 fast_iload2 #5
40 fast_iload #5
42 i2b
43 bastore
44 iinc #5 1
47 goto 29
  48  bci: 47   JumpData            taken(0) displacement(-32)
50 iconst_1
51 istore #5
53 fast_iload #5
55 ldc 9000000
57 if_icmpge 88
  72  bci: 57   BranchData          trap(intrinsic_or_type_checked_inlining recompiled) taken(1) displacement(72)
                                    not taken(459776)
60 fast_iload #4
62 aload_3
63 aload_2
64 fast_iload #5
66 sipush 511
69 iand
70 fast_iload #5
72 bipush 31
74 iand
75 iconst_0
76 invokestatic 23 <test.workload([B[BIIZ)B> 
  104 bci: 76   CounterData         count(459776)
79 iadd
80 istore #4
82 iinc #5 1
85 goto 53
  120 bci: 85   JumpData            taken(459776) displacement(-48)
88 getstatic 27 <java/lang/System.out/Ljava/io/PrintStream;> 
91 fast_aldc Go PERF
93 invokevirtual 33 <java/io/PrintStream.println(Ljava/lang/String;)V> 
  144 bci: 93   VirtualCallData     count(0) nonprofiled_count(0) entries(1)
                                    'java/io/PrintStream'(1 1.00)
96 invokestatic 39 <java/lang/System.currentTimeMillis()J> 
  200 bci: 96   CounterData         count(1)
99 lstore #4
101 iconst_0
102 istore #6
104 iconst_0
105 istore #7
107 fast_iload #7
109 sipush 5000
112 if_icmpge 159
  216 bci: 112  BranchData          taken(0) displacement(128)
                                    not taken(8)
115 iconst_1
116 istore #8
118 fast_iload #8
120 ldc 200000
122 if_icmpge 153
  248 bci: 122  BranchData          trap(intrinsic_or_type_checked_inlining recompiled) taken(7) displacement(72)
                                    not taken(1374208)
125 fast_iload #6
127 aload_3
128 aload_2
129 fast_iload #7
131 sipush 511
134 iand
135 fast_iload #7
137 bipush 31
139 iand
140 iconst_0
141 invokestatic 23 <test.workload([B[BIIZ)B> 
  280 bci: 141  CounterData         count(1374208)
144 iadd
145 istore #6
147 iinc #8 1
150 goto 118
  296 bci: 150  JumpData            taken(1374208) displacement(-48)
153 iinc #7 1
156 goto 107
  320 bci: 156  JumpData            taken(7) displacement(-104)
159 invokestatic 39 <java/lang/System.currentTimeMillis()J> 
  344 bci: 159  CounterData         count(0)
162 lstore #7
164 ldc2_w 10000000
167 lload #7
169 lload #4
171 lsub
172 ldiv
173 ldc2_w 1000
176 lmul
177 l2d
178 dstore #9
180 getstatic 27 <java/lang/System.out/Ljava/io/PrintStream;> 
183 lload #7
185 lload #4
187 lsub
188 dload #9
190 iload #6
192 invokedynamic bsm=70 48 <makeConcatWithConstants(JDI)Ljava/lang/String;>
  360 bci: 192  CounterData         count(1)
                return type         'java/lang/String'
197 invokevirtual 33 <java/io/PrintStream.println(Ljava/lang/String;)V> 
  392 bci: 197  VirtualCallData     count(0) nonprofiled_count(0) entries(1)
                                    'java/io/PrintStream'(1 1.00)
200 goto 205
  448 bci: 200  JumpData            taken(1) displacement(24)
203 astore #4
205 return
------------------------------------------------------------------------
Total MDO size: 960 bytes
