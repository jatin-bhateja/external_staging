CompileCommand: compileonly test.micro bool compileonly = true
CompileCommand: print test.micro bool print = true

============================= C2-compiled nmethod ==============================
#r024 rsi:rsi   : parm 0: int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
#r022 rdx   : parm 1: int
# -- Old rsp -- Framesize: 96 --
#r623 rsp+92: in_preserve
#r622 rsp+88: return address
#r621 rsp+84: in_preserve
#r620 rsp+80: saved fp register
#r619 rsp+76: pad2, stack alignment
#r618 rsp+72: pad2, stack alignment
#r617 rsp+68: Fixed slot 1
#r616 rsp+64: Fixed slot 0
#r639 rsp+60: spill
#r638 rsp+56: spill
#r637 rsp+52: spill
#r636 rsp+48: spill
#r635 rsp+44: spill
#r634 rsp+40: spill
#r633 rsp+36: spill
#r632 rsp+32: spill
#r631 rsp+28: spill
#r630 rsp+24: spill
#r629 rsp+20: spill
#r628 rsp+16: spill
#r627 rsp+12: spill
#r626 rsp+ 8: spill
#r625 rsp+ 4: spill
#r624 rsp+ 0: spill
#
----------------------- MetaData before Compile_id = 3 ------------------------
{method}
 - this oop:          0x00007fcee0400490
 - method holder:     'test'
 - constants:         0x00007fcee0400050 constant pool [66]/operands[5] {0x00007fcee0400050} for 'test' cache=0x00007fcee0400790
 - access:            0x9  public static 
 - flags:             0x6080  queued_for_compilation has_loops_flag has_loops_flag_init 
 - name:              'micro'
 - signature:         '([II)I'
 - max stack:         5
 - max locals:        8
 - size of params:    2
 - method size:       14
 - vtable index:      -2
 - i2i entry:         0x00007fcf88577f60
 - adapters:          AHE@0x00007fcf942c6d00: 0xba i2c: 0x00007fcf885d9680 c2i: 0x00007fcf885d975f c2iUV: 0x00007fcf885d973e c2iNCI: 0x00007fcf885d979a
 - compiled entry     0x00007fcf885d975f
 - code size:         111
 - code start:        0x00007fcee0400410
 - code end (excl):   0x00007fcee040047f
 - method data:       0x00007fcee0400c20
 - checked ex length: 0
 - linenumber start:  0x00007fcee040047f
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 3 -----------------------
#
#  int ( int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *, int )
#
000     N1: #	out( B1 ) <- in( B25 B21 B18 B24 )  Freq: 1

000     B1: #	out( B25 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (192 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

01a     movdq   XMM0, RSI	# spill
01f     movl    [rsp + #20], RDX	# spill
023     leal    R13, [RDX + #10]
027     leal    R11, [RDX + #3]
02b     leal    R8, [RDX + #13]
02f     leal    R10, [RDX + #2]
033     leal    RCX, [RDX + #12]
036     leal    RBX, [RDX + #1]
039     leal    R14, [RDX + #11]
03d     movdl   XMM3, R14	# spill
042     movl    RDI, [RSI + #12 (8-bit)]	# range
045     NullCheck RSI

045     B2: #	out( B22 B3 ) <- in( B1 )  Freq: 0.999999
045     testl   RDI, RDI	# unsigned
047     jbe,u   B22  P=0.000001 C=-1.000000

04d     B3: #	out( B5 ) <- in( B2 )  Freq: 0.999998
04d     movl    R9, [RSI + #16 (8-bit)]	# int
051     movl    RDX, #1	# int
056     # TLS is in R15
056     jmp,s   B5

058     B4: #	out( B5 ) <- in( B14 ) top-of-loop Freq: 14.0795
058     movdl   RBX, XMM1	# spill

05c     B5: #	out( B6 ) <- in( B3 B4 ) Loop( B5-B4 ) Freq: 15.0795
05c     movl    RBP, #9993	# int
061     subl    RBP, RDX	# int
063     cmpl    RBP, #8000	# unsigned
069     movl    R14, #8000	# int
06f     cmovla RBP, R14	# unsigned, int
073     addl    RBP, RDX	# int
075     movdl   XMM1, RBX	# spill
        nop 	# 7 bytes pad for loops and calls

080     B6: #	out( B19 B7 ) <- in( B5 B13 ) Loop( B6-B13 inner main of N84 strip mined) Freq: 140787
080     movl    R14, RDX	# spill
083     andl    R14, #3	# int
087     cmpl    R14, RDI	# unsigned
08a     jae,u   B19  P=0.000001 C=-1.000000

090     B7: #	out( B20 B8 ) <- in( B6 )  Freq: 140786
090     movdq   RBX, XMM0	# spill
095     movl    RBX, [RBX + #16 + R14 << #2]	# int
09a     leal    RAX, [RDX + #1]
09d     addl    R9, RBX	# int
0a0     movl    R14, RAX	# spill
0a3     andl    R14, #3	# int
0a7     cmpl    R14, RDI	# unsigned
0aa     jae,u   B20  P=0.000001 C=-1.000000

0b0     B8: #	out( B20 B9 ) <- in( B7 )  Freq: 140786
0b0     movdq   RSI, XMM0	# spill
0b5     addl    R9, [RSI + #16 + R14 << #2]	# int
0ba     leal    RAX, [RDX + #2]
0bd     movl    R14, RAX	# spill
0c0     andl    R14, #3	# int
0c4     cmpl    R14, RDI	# unsigned
0c7     jae,u   B20  P=0.000001 C=-1.000000

0cd     B9: #	out( B20 B10 ) <- in( B8 )  Freq: 140786
0cd     addl    R9, [RSI + #16 + R14 << #2]	# int
0d2     leal    RAX, [RDX + #3]
0d5     movl    R14, RAX	# spill
0d8     andl    R14, #3	# int
        nop 	# 4 bytes pad for loops and calls
0e0     cmpl    R14, RDI	# unsigned
0e3     jae,u   B20  P=0.000001 C=-1.000000

0e9     B10: #	out( B20 B11 ) <- in( B9 )  Freq: 140786
0e9     addl    R9, [RSI + #16 + R14 << #2]	# int
0ee     addl    R9, RBX	# int
0f1     leal    RAX, [RDX + #5]
0f4     movl    R14, RAX	# spill
0f7     andl    R14, #3	# int
        nop 	# 5 bytes pad for loops and calls
100     cmpl    R14, RDI	# unsigned
103     jae,u   B20  P=0.000001 C=-1.000000

109     B11: #	out( B20 B12 ) <- in( B10 )  Freq: 140786
109     addl    R9, [RSI + #16 + R14 << #2]	# int
10e     leal    RAX, [RDX + #6]
111     movl    R14, RAX	# spill
114     andl    R14, #3	# int
        nop 	# 8 bytes pad for loops and calls
120     cmpl    R14, RDI	# unsigned
123     jae,u   B20  P=0.000001 C=-1.000000

129     B12: #	out( B20 B13 ) <- in( B11 )  Freq: 140786
129     addl    R9, [RSI + #16 + R14 << #2]	# int
12e     leal    RAX, [RDX + #7]
131     movl    R14, RAX	# spill
134     andl    R14, #3	# int
        nop 	# 8 bytes pad for loops and calls
140     cmpl    R14, RDI	# unsigned
143     jae,u   B20  P=0.000001 C=-1.000000

149     B13: #	out( B6 B14 ) <- in( B12 )  Freq: 140786
149     addl    R9, [RSI + #16 + R14 << #2]	# int
14e     addl    RDX, #8	# int
151     cmpl    RDX, RBP
153     jl     B6	# loop end  P=0.999900 C=7680000.000000

159     B14: #	out( B4 B15 ) <- in( B13 )  Freq: 14.0809
159     movq    RSI, [R15 + #48 (8-bit)]	# ptr
15d     testl   rax, [RSI]	# Safepoint: poll for GC        # test::micro @ bci:70 (line 22) L[0]=XMM0 L[1]=_ L[2]=R9 L[3]=#ScObj0 L[4]=#ScObj1 L[5]=#ScObj2 L[6]=#ScObj3 L[7]=RDX
        # ScObj0 ABC={ [field1 :0]=rsp + #20, [field2 :1]=R13 }
        # ScObj1 ABC={ [field1 :0]=XMM1, [field2 :1]=XMM3 }
        # ScObj2 ABC={ [field1 :0]=R10, [field2 :1]=RCX }
        # ScObj3 ABC={ [field1 :0]=R11, [field2 :1]=R8 }
        # OopMap {xmm0=Oop off=349/0x15d}
        nop 	# 1 bytes pad for loops and calls
160     cmpl    RDX, #9993
166     jl     B4  P=0.999900 C=7680000.000000

16c     B15: #	out( B23 B16 ) <- in( B14 B16 ) Loop( B15-B16 inner post of N629) Freq: 0.00281664
16c     movl    R14, RDX	# spill
16f     andl    R14, #3	# int
173     cmpl    R14, RDI	# unsigned
176     jae,u   B23  P=0.000001 C=-1.000000

17c     B16: #	out( B15 B17 ) <- in( B15 )  Freq: 0.00281664
17c     movdq   RBX, XMM0	# spill
181     addl    R9, [RBX + #16 + R14 << #2]	# int
186     incl    RDX	# int
188     cmpl    RDX, #10000
18e     jl,s   B15	# loop end  P=0.500000 C=7680000.000000

190     B17: #	out( B24 B18 ) <- in( B16 )  Freq: 0.00140832
190     cmpl    R9, #10
194     jl     B24  P=0.000000 C=768.000000

19a     B18: #	out( N1 ) <- in( B17 )  Freq: 0.00140832
19a     movl    R14, [rsp + #20]	# spill
19f     addl    R14, R14	# int
1a2     leal    RAX, [R14 + R9]
1a6     addl    RAX, R14	# int
1a9     addl    RAX, R14	# int
1ac     addl    RAX, R14	# int
1af     addl    RAX, #52	# int
1b2     addq    rsp, 80	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

1c1     ret

1c2     B19: #	out( B20 ) <- in( B6 )  Freq: 0.142656
1c2     movl    RAX, RDX	# spill

1c4     B20: #	out( B21 ) <- in( B19 B8 B11 B7 B10 B9 B12 )  Freq: 0.99859
1c4     movdl   RBX, XMM1	# spill

1c8     B21: #	out( N1 ) <- in( B23 B22 B20 )  Freq: 0.998591
1c8     movl    RSI, #-28	# int
1cd     movl    [rsp + #0], RAX	# spill
1d0     movl    [rsp + #4], R9	# spill
1d5     movsd   [rsp + #8], XMM0	# spill
1db     movl    [rsp + #16], R14	# spill
1e0     movl    [rsp + #24], R11	# spill
1e5     movl    [rsp + #28], R8	# spill
1ea     movl    [rsp + #32], R10	# spill
1ef     movl    [rsp + #36], RCX	# spill
1f3     movl    [rsp + #40], RBX	# spill
1f7     movl    [rsp + #44], R13	# spill
1fc     movss   [rsp + #48], XMM3	# spill
        nop 	# 1 bytes pad for loops and calls
203     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # test::micro @ bci:64 (line 23) L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=#ScObj1 L[5]=#ScObj2 L[6]=#ScObj3 L[7]=rsp + #0 STK[0]=rsp + #4 STK[1]=rsp + #8 STK[2]=rsp + #16
        # ScObj0 ABC={ [field1 :0]=rsp + #20, [field2 :1]=rsp + #44 }
        # ScObj1 ABC={ [field1 :0]=rsp + #40, [field2 :1]=rsp + #48 }
        # ScObj2 ABC={ [field1 :0]=rsp + #32, [field2 :1]=rsp + #36 }
        # ScObj3 ABC={ [field1 :0]=rsp + #24, [field2 :1]=rsp + #28 }
        # OopMap {[8]=Oop off=520/0x208}
210     stop	# ShouldNotReachHere

224     B22: #	out( B21 ) <- in( B2 )  Freq: 9.99999e-07
224     xorl    RAX, RAX	# int
226     xorl    R9, R9	# int
229     xorl    R14, R14	# int
22c     jmp,s   B21

22e     B23: #	out( B21 ) <- in( B15 )  Freq: 2.85405e-09
22e     movl    RAX, RDX	# spill
230     movdl   RBX, XMM1	# spill
234     jmp,s   B21

236     B24: #	out( N1 ) <- in( B17 )  Freq: 6.7154e-10
236     movl    RSI, #-187	# int
23b     movdq   RBP, XMM0	# spill
240     movl    [rsp + #4], R9	# spill
245     movl    [rsp + #8], R11	# spill
24a     movl    [rsp + #12], R8	# spill
24f     movl    [rsp + #16], R10	# spill
254     movl    [rsp + #24], RCX	# spill
258     movss   [rsp + #28], XMM1	# spill
25e     movl    [rsp + #32], R13	# spill
263     movss   [rsp + #36], XMM3	# spill
        nop 	# 2 bytes pad for loops and calls
26b     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # test::micro @ bci:76 (line 25) L[0]=RBP L[1]=_ L[2]=rsp + #4 L[3]=#ScObj0 L[4]=#ScObj1 L[5]=#ScObj2 L[6]=#ScObj3 L[7]=_ STK[0]=rsp + #4 STK[1]=#10
        # ScObj0 ABC={ [field1 :0]=rsp + #20, [field2 :1]=rsp + #32 }
        # ScObj1 ABC={ [field1 :0]=rsp + #28, [field2 :1]=rsp + #36 }
        # ScObj2 ABC={ [field1 :0]=rsp + #16, [field2 :1]=rsp + #24 }
        # ScObj3 ABC={ [field1 :0]=rsp + #8, [field2 :1]=rsp + #12 }
        # OopMap {rbp=Oop off=624/0x270}
278     stop	# ShouldNotReachHere

28c     B25: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
28c     movl    RSI, #-146	# int
291     movdq   RBP, XMM0	# spill
296     movl    [rsp + #0], R11	# spill
29a     movl    [rsp + #4], R8	# spill
29f     movl    [rsp + #8], R10	# spill
2a4     movl    [rsp + #12], RCX	# spill
2a8     movl    [rsp + #16], RBX	# spill
2ac     movl    [rsp + #24], R13	# spill
2b1     movss   [rsp + #28], XMM3	# spill
2b7     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # test::micro @ bci:55 (line 22) L[0]=RBP L[1]=_ L[2]=#0 L[3]=#ScObj0 L[4]=#ScObj1 L[5]=#ScObj2 L[6]=#ScObj3 L[7]=#0 STK[0]=#0 STK[1]=#10000
        # ScObj0 ABC={ [field1 :0]=rsp + #20, [field2 :1]=rsp + #24 }
        # ScObj1 ABC={ [field1 :0]=rsp + #16, [field2 :1]=rsp + #28 }
        # ScObj2 ABC={ [field1 :0]=rsp + #8, [field2 :1]=rsp + #12 }
        # ScObj3 ABC={ [field1 :0]=rsp + #0, [field2 :1]=rsp + #4 }
        # OopMap {rbp=Oop off=700/0x2bc}
2c4     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2) 570    3             test::micro (111 bytes)
 total in heap  [0x00007fcf886a7688,0x00007fcf886a7ae8] = 1120
 relocation     [0x00007fcf886a7768,0x00007fcf886a77a0] = 56
 main code      [0x00007fcf886a77a0,0x00007fcf886a7a98] = 760
 stub code      [0x00007fcf886a7a98,0x00007fcf886a7ab0] = 24
 oops           [0x00007fcf886a7ab0,0x00007fcf886a7ac0] = 16
 metadata       [0x00007fcf886a7ac0,0x00007fcf886a7ae8] = 40
 immutable data [0x00007fcedc129160,0x00007fcedc129578] = 1048
 dependencies   [0x00007fcedc129160,0x00007fcedc129170] = 16
 nul chk table  [0x00007fcedc129170,0x00007fcedc129180] = 16
 scopes pcs     [0x00007fcedc129180,0x00007fcedc1293f0] = 624
 scopes data    [0x00007fcedc1293f0,0x00007fcedc129578] = 392

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007fcee0400490} 'micro' '([II)I' in 'test'
  # parm0:    rsi:rsi   = '[I'
  # parm1:    rdx       = int
  #           [sp+0x60]  (sp of caller)
 ;; N1: #	out( B1 ) <- in( B25 B21 B18 B24 )  Freq: 1
 ;; B1: #	out( B25 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fcf886a77a0:   mov    %eax,-0x18000(%rsp)
  0x00007fcf886a77a7:   push   %rbp
  0x00007fcf886a77a8:   sub    $0x50,%rsp
  0x00007fcf886a77ac:   cmpl   $0x0,0x20(%r15)
  0x00007fcf886a77b4:   jne    0x00007fcf886a7a8e           ;*synchronization entry
                                                            ; - test::micro@-1 (line 17)
  0x00007fcf886a77ba:   vmovq  %rsi,%xmm0
  0x00007fcf886a77bf:   mov    %edx,0x14(%rsp)
  0x00007fcf886a77c3:   lea    0xa(%rdx),%r13d
  0x00007fcf886a77c7:   lea    0x3(%rdx),%r11d
  0x00007fcf886a77cb:   lea    0xd(%rdx),%r8d
  0x00007fcf886a77cf:   lea    0x2(%rdx),%r10d
  0x00007fcf886a77d3:   lea    0xc(%rdx),%ecx
  0x00007fcf886a77d6:   lea    0x1(%rdx),%ebx
  0x00007fcf886a77d9:   lea    0xb(%rdx),%r14d
  0x00007fcf886a77dd:   vmovd  %r14d,%xmm3
  0x00007fcf886a77e2:   mov    0xc(%rsi),%edi               ; implicit exception: dispatches to 0x00007fcf886a7a2c
 ;; B2: #	out( B22 B3 ) <- in( B1 )  Freq: 0.999999
  0x00007fcf886a77e5:   test   %edi,%edi
  0x00007fcf886a77e7:   jbe    0x00007fcf886a79c4
 ;; B3: #	out( B5 ) <- in( B2 )  Freq: 0.999998
  0x00007fcf886a77ed:   mov    0x10(%rsi),%r9d              ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@64 (line 23)
  0x00007fcf886a77f1:   mov    $0x1,%edx                    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@70 (line 22)
  0x00007fcf886a77f6:   jmp    0x00007fcf886a77fc
 ;; B4: #	out( B5 ) <- in( B14 ) top-of-loop Freq: 14.0795
  0x00007fcf886a77f8:   vmovd  %xmm1,%ebx
 ;; B5: #	out( B6 ) <- in( B3 B4 ) Loop( B5-B4 ) Freq: 15.0795
  0x00007fcf886a77fc:   mov    $0x2709,%ebp
  0x00007fcf886a7801:   sub    %edx,%ebp
  0x00007fcf886a7803:   cmp    $0x1f40,%ebp
  0x00007fcf886a7809:   mov    $0x1f40,%r14d
  0x00007fcf886a780f:   cmova  %r14d,%ebp
  0x00007fcf886a7813:   add    %edx,%ebp
  0x00007fcf886a7815:   vmovd  %ebx,%xmm1
  0x00007fcf886a7819:   nop
  0x00007fcf886a781a:   nop
  0x00007fcf886a781b:   nop
  0x00007fcf886a781c:   nop
  0x00007fcf886a781d:   nop
  0x00007fcf886a781e:   nop
  0x00007fcf886a781f:   nop                                 ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@58 (line 23)
 ;; B6: #	out( B19 B7 ) <- in( B5 B13 ) Loop( B6-B13 inner main of N84 strip mined) Freq: 140787
  0x00007fcf886a7820:   mov    %edx,%r14d
  0x00007fcf886a7823:   and    $0x3,%r14d                   ;*iand {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@63 (line 23)
  0x00007fcf886a7827:   cmp    %edi,%r14d
  0x00007fcf886a782a:   jae    0x00007fcf886a7962
 ;; B7: #	out( B20 B8 ) <- in( B6 )  Freq: 140786
  0x00007fcf886a7830:   vmovq  %xmm0,%rbx
  0x00007fcf886a7835:   mov    0x10(%rbx,%r14,4),%ebx       ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@64 (line 23)
  0x00007fcf886a783a:   lea    0x1(%rdx),%eax
  0x00007fcf886a783d:   add    %ebx,%r9d                    ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@65 (line 23)
  0x00007fcf886a7840:   mov    %eax,%r14d
  0x00007fcf886a7843:   and    $0x3,%r14d                   ;*iand {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@63 (line 23)
  0x00007fcf886a7847:   cmp    %edi,%r14d
  0x00007fcf886a784a:   jae    0x00007fcf886a7964
 ;; B8: #	out( B20 B9 ) <- in( B7 )  Freq: 140786
  0x00007fcf886a7850:   vmovq  %xmm0,%rsi
  0x00007fcf886a7855:   add    0x10(%rsi,%r14,4),%r9d       ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@65 (line 23)
  0x00007fcf886a785a:   lea    0x2(%rdx),%eax
  0x00007fcf886a785d:   mov    %eax,%r14d
  0x00007fcf886a7860:   and    $0x3,%r14d                   ;*iand {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@63 (line 23)
  0x00007fcf886a7864:   cmp    %edi,%r14d
  0x00007fcf886a7867:   jae    0x00007fcf886a7964
 ;; B9: #	out( B20 B10 ) <- in( B8 )  Freq: 140786
  0x00007fcf886a786d:   add    0x10(%rsi,%r14,4),%r9d       ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@65 (line 23)
  0x00007fcf886a7872:   lea    0x3(%rdx),%eax
  0x00007fcf886a7875:   mov    %eax,%r14d
  0x00007fcf886a7878:   and    $0x3,%r14d                   ;*iand {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@63 (line 23)
  0x00007fcf886a787c:   nop
  0x00007fcf886a787d:   nop
  0x00007fcf886a787e:   nop
  0x00007fcf886a787f:   nop
  0x00007fcf886a7880:   cmp    %edi,%r14d
  0x00007fcf886a7883:   jae    0x00007fcf886a7964
 ;; B10: #	out( B20 B11 ) <- in( B9 )  Freq: 140786
  0x00007fcf886a7889:   add    0x10(%rsi,%r14,4),%r9d
  0x00007fcf886a788e:   add    %ebx,%r9d                    ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@65 (line 23)
  0x00007fcf886a7891:   lea    0x5(%rdx),%eax
  0x00007fcf886a7894:   mov    %eax,%r14d
  0x00007fcf886a7897:   and    $0x3,%r14d                   ;*iand {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@63 (line 23)
  0x00007fcf886a789b:   nop
  0x00007fcf886a789c:   nop
  0x00007fcf886a789d:   nop
  0x00007fcf886a789e:   nop
  0x00007fcf886a789f:   nop                                 ;   {no_reloc}
  0x00007fcf886a78a0:   cmp    %edi,%r14d
  0x00007fcf886a78a3:   jae    0x00007fcf886a7964
 ;; B11: #	out( B20 B12 ) <- in( B10 )  Freq: 140786
  0x00007fcf886a78a9:   add    0x10(%rsi,%r14,4),%r9d       ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@65 (line 23)
  0x00007fcf886a78ae:   lea    0x6(%rdx),%eax
  0x00007fcf886a78b1:   mov    %eax,%r14d
  0x00007fcf886a78b4:   and    $0x3,%r14d                   ;*iand {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@63 (line 23)
  0x00007fcf886a78b8:   nop
  0x00007fcf886a78b9:   nop
  0x00007fcf886a78ba:   nop
  0x00007fcf886a78bb:   nop
  0x00007fcf886a78bc:   nop
  0x00007fcf886a78bd:   nop
  0x00007fcf886a78be:   nop
  0x00007fcf886a78bf:   nop
  0x00007fcf886a78c0:   cmp    %edi,%r14d
  0x00007fcf886a78c3:   jae    0x00007fcf886a7964
 ;; B12: #	out( B20 B13 ) <- in( B11 )  Freq: 140786
  0x00007fcf886a78c9:   add    0x10(%rsi,%r14,4),%r9d       ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@65 (line 23)
  0x00007fcf886a78ce:   lea    0x7(%rdx),%eax
  0x00007fcf886a78d1:   mov    %eax,%r14d
  0x00007fcf886a78d4:   and    $0x3,%r14d                   ;*iand {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@63 (line 23)
  0x00007fcf886a78d8:   nop
  0x00007fcf886a78d9:   nop
  0x00007fcf886a78da:   nop
  0x00007fcf886a78db:   nop
  0x00007fcf886a78dc:   nop
  0x00007fcf886a78dd:   nop
  0x00007fcf886a78de:   nop
  0x00007fcf886a78df:   nop
  0x00007fcf886a78e0:   cmp    %edi,%r14d
  0x00007fcf886a78e3:   jae    0x00007fcf886a7964
 ;; B13: #	out( B6 B14 ) <- in( B12 )  Freq: 140786
  0x00007fcf886a78e9:   add    0x10(%rsi,%r14,4),%r9d       ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@65 (line 23)
  0x00007fcf886a78ee:   add    $0x8,%edx                    ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@67 (line 22)
  0x00007fcf886a78f1:   cmp    %ebp,%edx
  0x00007fcf886a78f3:   jl     0x00007fcf886a7820           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@55 (line 22)
 ;; B14: #	out( B4 B15 ) <- in( B13 )  Freq: 14.0809
  0x00007fcf886a78f9:   mov    0x30(%r15),%rsi              ; ImmutableOopMap {xmm0=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::micro@70 (line 22)
  0x00007fcf886a78fd:   test   %eax,(%rsi)                  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@70 (line 22)
                                                            ;   {poll}
  0x00007fcf886a78ff:   nop
  0x00007fcf886a7900:   cmp    $0x2709,%edx
  0x00007fcf886a7906:   jl     0x00007fcf886a77f8           ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@58 (line 23)
 ;; B15: #	out( B23 B16 ) <- in( B14 B16 ) Loop( B15-B16 inner post of N629) Freq: 0.00281664
  0x00007fcf886a790c:   mov    %edx,%r14d
  0x00007fcf886a790f:   and    $0x3,%r14d                   ;*iand {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@63 (line 23)
  0x00007fcf886a7913:   cmp    %edi,%r14d
  0x00007fcf886a7916:   jae    0x00007fcf886a79ce
 ;; B16: #	out( B15 B17 ) <- in( B15 )  Freq: 0.00281664
  0x00007fcf886a791c:   vmovq  %xmm0,%rbx
  0x00007fcf886a7921:   add    0x10(%rbx,%r14,4),%r9d       ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@65 (line 23)
  0x00007fcf886a7926:   inc    %edx                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@67 (line 22)
  0x00007fcf886a7928:   cmp    $0x2710,%edx
  0x00007fcf886a792e:   jl     0x00007fcf886a790c           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@55 (line 22)
 ;; B17: #	out( B24 B18 ) <- in( B16 )  Freq: 0.00140832
  0x00007fcf886a7930:   cmp    $0xa,%r9d
  0x00007fcf886a7934:   jl     0x00007fcf886a79d6           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@76 (line 25)
 ;; B18: #	out( N1 ) <- in( B17 )  Freq: 0.00140832
  0x00007fcf886a793a:   mov    0x14(%rsp),%r14d
  0x00007fcf886a793f:   add    %r14d,%r14d                  ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ABC::<init>@13 (line 10)
                                                            ; - test::micro@42 (line 21)
  0x00007fcf886a7942:   lea    (%r14,%r9,1),%eax
  0x00007fcf886a7946:   add    %r14d,%eax
  0x00007fcf886a7949:   add    %r14d,%eax
  0x00007fcf886a794c:   add    %r14d,%eax
  0x00007fcf886a794f:   add    $0x34,%eax                   ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@109 (line 28)
  0x00007fcf886a7952:   add    $0x50,%rsp
  0x00007fcf886a7956:   pop    %rbp
  0x00007fcf886a7957:   cmp    0x28(%r15),%rsp              ;   {poll_return}
  0x00007fcf886a795b:   ja     0x00007fcf886a7a78
  0x00007fcf886a7961:   retq   
 ;; B19: #	out( B20 ) <- in( B6 )  Freq: 0.142656
  0x00007fcf886a7962:   mov    %edx,%eax
 ;; B20: #	out( B21 ) <- in( B19 B8 B11 B7 B10 B9 B12 )  Freq: 0.99859
  0x00007fcf886a7964:   vmovd  %xmm1,%ebx
 ;; B21: #	out( N1 ) <- in( B23 B22 B20 )  Freq: 0.998591
  0x00007fcf886a7968:   mov    $0xffffffe4,%esi
  0x00007fcf886a796d:   mov    %eax,(%rsp)
  0x00007fcf886a7970:   mov    %r9d,0x4(%rsp)
  0x00007fcf886a7975:   vmovsd %xmm0,0x8(%rsp)
  0x00007fcf886a797b:   mov    %r14d,0x10(%rsp)
  0x00007fcf886a7980:   mov    %r11d,0x18(%rsp)
  0x00007fcf886a7985:   mov    %r8d,0x1c(%rsp)
  0x00007fcf886a798a:   mov    %r10d,0x20(%rsp)
  0x00007fcf886a798f:   mov    %ecx,0x24(%rsp)
  0x00007fcf886a7993:   mov    %ebx,0x28(%rsp)
  0x00007fcf886a7997:   mov    %r13d,0x2c(%rsp)
  0x00007fcf886a799c:   vmovss %xmm3,0x30(%rsp)
  0x00007fcf886a79a2:   nop
  0x00007fcf886a79a3:   callq  0x00007fcf88681ae0           ; ImmutableOopMap {[8]=Oop }
                                                            ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@64 (line 23)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fcf886a79a8:   nopl   0x1000320(%rax,%rax,1)       ;   {post_call_nop}
  0x00007fcf886a79b0:   movabs $0x7fcf9a66ba88,%rdi         ;   {external_word}
  0x00007fcf886a79ba:   and    $0xfffffffffffffff0,%rsp
  0x00007fcf886a79be:   callq  0x00007fcf99ac9dfe           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fcf886a79c3:   hlt                                 ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@64 (line 23)
 ;; B22: #	out( B21 ) <- in( B2 )  Freq: 9.99999e-07
  0x00007fcf886a79c4:   xor    %eax,%eax
  0x00007fcf886a79c6:   xor    %r9d,%r9d
  0x00007fcf886a79c9:   xor    %r14d,%r14d
  0x00007fcf886a79cc:   jmp    0x00007fcf886a7968
 ;; B23: #	out( B21 ) <- in( B15 )  Freq: 2.85405e-09
  0x00007fcf886a79ce:   mov    %edx,%eax
  0x00007fcf886a79d0:   vmovd  %xmm1,%ebx
  0x00007fcf886a79d4:   jmp    0x00007fcf886a7968
 ;; B24: #	out( N1 ) <- in( B17 )  Freq: 6.7154e-10
  0x00007fcf886a79d6:   mov    $0xffffff45,%esi
  0x00007fcf886a79db:   vmovq  %xmm0,%rbp
  0x00007fcf886a79e0:   mov    %r9d,0x4(%rsp)
  0x00007fcf886a79e5:   mov    %r11d,0x8(%rsp)
  0x00007fcf886a79ea:   mov    %r8d,0xc(%rsp)
  0x00007fcf886a79ef:   mov    %r10d,0x10(%rsp)
  0x00007fcf886a79f4:   mov    %ecx,0x18(%rsp)
  0x00007fcf886a79f8:   vmovss %xmm1,0x1c(%rsp)
  0x00007fcf886a79fe:   mov    %r13d,0x20(%rsp)
  0x00007fcf886a7a03:   vmovss %xmm3,0x24(%rsp)
  0x00007fcf886a7a09:   nop
  0x00007fcf886a7a0a:   nop
  0x00007fcf886a7a0b:   callq  0x00007fcf88681ae0           ; ImmutableOopMap {rbp=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::micro@76 (line 25)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fcf886a7a10:   nopl   0x2000388(%rax,%rax,1)       ;   {post_call_nop}
  0x00007fcf886a7a18:   movabs $0x7fcf9a66ba88,%rdi         ;   {external_word}
  0x00007fcf886a7a22:   and    $0xfffffffffffffff0,%rsp
  0x00007fcf886a7a26:   callq  0x00007fcf99ac9dfe           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fcf886a7a2b:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@76 (line 25)
 ;; B25: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
  0x00007fcf886a7a2c:   mov    $0xffffff6e,%esi
  0x00007fcf886a7a31:   vmovq  %xmm0,%rbp
  0x00007fcf886a7a36:   mov    %r11d,(%rsp)
  0x00007fcf886a7a3a:   mov    %r8d,0x4(%rsp)
  0x00007fcf886a7a3f:   mov    %r10d,0x8(%rsp)
  0x00007fcf886a7a44:   mov    %ecx,0xc(%rsp)
  0x00007fcf886a7a48:   mov    %ebx,0x10(%rsp)
  0x00007fcf886a7a4c:   mov    %r13d,0x18(%rsp)
  0x00007fcf886a7a51:   vmovss %xmm3,0x1c(%rsp)
  0x00007fcf886a7a57:   callq  0x00007fcf88681ae0           ; ImmutableOopMap {rbp=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::micro@55 (line 22)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fcf886a7a5c:   nopl   0x30003d4(%rax,%rax,1)       ;   {post_call_nop}
  0x00007fcf886a7a64:   movabs $0x7fcf9a66ba88,%rdi         ;   {external_word}
  0x00007fcf886a7a6e:   and    $0xfffffffffffffff0,%rsp
  0x00007fcf886a7a72:   callq  0x00007fcf99ac9dfe           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fcf886a7a77:   hlt                                 ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::micro@64 (line 23)
  0x00007fcf886a7a78:   movabs $0x7fcf886a7957,%r10         ;   {internal_word}
  0x00007fcf886a7a82:   mov    %r10,0x498(%r15)
  0x00007fcf886a7a89:   jmpq   0x00007fcf8868b760           ;   {runtime_call SafepointBlob}
  0x00007fcf886a7a8e:   callq  Stub::method_entry_barrier   ;   {runtime_call StubRoutines (finalstubs)}
  0x00007fcf886a7a93:   jmpq   0x00007fcf886a77ba
[Exception Handler]
  0x00007fcf886a7a98:   jmpq   0x00007fcf8868bc60           ;   {no_reloc}
[Deopt Handler Code]
  0x00007fcf886a7a9d:   callq  0x00007fcf886a7aa2
  0x00007fcf886a7aa2:   subq   $0x5,(%rsp)
  0x00007fcf886a7aa7:   jmpq   0x00007fcf88689ea0           ;   {runtime_call DeoptimizationBlob}
  0x00007fcf886a7aac:   hlt    
  0x00007fcf886a7aad:   hlt    
  0x00007fcf886a7aae:   hlt    
  0x00007fcf886a7aaf:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007fcf886a7ab0:   0x000000011f018550 a 'java/lang/Class'{0x000000011f018550} = 'ABC'
  0x00007fcf886a7ab8:   0x00000007ff01eec0 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000007ff01eec0}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007fcf886a7ac0:   0x00007fcee0400490 {method} {0x00007fcee0400490} 'micro' '([II)I' in 'test'
  0x00007fcf886a7ac8:   0x00007fcee04009e0 {method} {0x00007fcee04009e0} '<init>' '(I)V' in 'ABC'
  0x00007fcf886a7ad0:   0x00007fcee0400a98 {method} {0x00007fcee0400a98} 'getAccum' '()I' in 'ABC'
  0x00007fcf886a7ad8:   0x00007fcefa54db08 {method} {0x00007fcefa54db08} '<init>' '()V' in 'java/lang/Object'
  0x00007fcf886a7ae0:   0x00007fcefb000a18 'ABC'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007fcf886a779f offset=ffffffff bits=0):
PcDesc(pc=0x00007fcf886a77ba offset=1a bits=0):
   test::micro@-1 (line 17)
PcDesc(pc=0x00007fcf886a77f1 offset=51 bits=0):
   test::micro@64 (line 23)
PcDesc(pc=0x00007fcf886a77f6 offset=56 bits=0):
   test::micro@70 (line 22)
PcDesc(pc=0x00007fcf886a7820 offset=80 bits=0):
   test::micro@58 (line 23)
PcDesc(pc=0x00007fcf886a7827 offset=87 bits=0):
   test::micro@63 (line 23)
PcDesc(pc=0x00007fcf886a783a offset=9a bits=0):
   test::micro@64 (line 23)
PcDesc(pc=0x00007fcf886a7840 offset=a0 bits=0):
   test::micro@65 (line 23)
PcDesc(pc=0x00007fcf886a7847 offset=a7 bits=0):
   test::micro@63 (line 23)
PcDesc(pc=0x00007fcf886a785a offset=ba bits=0):
   test::micro@65 (line 23)
PcDesc(pc=0x00007fcf886a7864 offset=c4 bits=0):
   test::micro@63 (line 23)
PcDesc(pc=0x00007fcf886a7872 offset=d2 bits=0):
   test::micro@65 (line 23)
PcDesc(pc=0x00007fcf886a787c offset=dc bits=0):
   test::micro@63 (line 23)
PcDesc(pc=0x00007fcf886a7891 offset=f1 bits=0):
   test::micro@65 (line 23)
PcDesc(pc=0x00007fcf886a789b offset=fb bits=0):
   test::micro@63 (line 23)
PcDesc(pc=0x00007fcf886a78ae offset=10e bits=0):
   test::micro@65 (line 23)
PcDesc(pc=0x00007fcf886a78b8 offset=118 bits=0):
   test::micro@63 (line 23)
PcDesc(pc=0x00007fcf886a78ce offset=12e bits=0):
   test::micro@65 (line 23)
PcDesc(pc=0x00007fcf886a78d8 offset=138 bits=0):
   test::micro@63 (line 23)
PcDesc(pc=0x00007fcf886a78ee offset=14e bits=0):
   test::micro@65 (line 23)
PcDesc(pc=0x00007fcf886a78f1 offset=151 bits=0):
   test::micro@67 (line 22)
PcDesc(pc=0x00007fcf886a78f9 offset=159 bits=0):
   test::micro@55 (line 22)
PcDesc(pc=0x00007fcf886a78fd offset=15d bits=1):
   test::micro@70 (line 22)  reexecute=true
   Locals
    - l0: reg xmm0 [80],oop
    - l1: empty
    - l2: reg r9 [18],int
    - l3: obj[148]
    - l4: obj[149]
    - l5: obj[150]
    - l6: obj[151]
    - l7: reg rdx [4],int
   Objects
    - 0: R obj[148], ABC
        Fields: stack[20], reg r13 [26],int
    - 1: R obj[149], ABC
        Fields: reg xmm1 [96],int, reg xmm3 [128],int
    - 2: R obj[150], ABC
        Fields: reg r10 [20],int, reg rcx [2],int
    - 3: R obj[151], ABC
        Fields: reg r11 [22],int, reg r8 [16],int
PcDesc(pc=0x00007fcf886a78ff offset=15f bits=0):
   test::micro@70 (line 22)
PcDesc(pc=0x00007fcf886a790c offset=16c bits=0):
   test::micro@58 (line 23)
PcDesc(pc=0x00007fcf886a7913 offset=173 bits=0):
   test::micro@63 (line 23)
PcDesc(pc=0x00007fcf886a7926 offset=186 bits=0):
   test::micro@65 (line 23)
PcDesc(pc=0x00007fcf886a7928 offset=188 bits=0):
   test::micro@67 (line 22)
PcDesc(pc=0x00007fcf886a7930 offset=190 bits=0):
   test::micro@55 (line 22)
PcDesc(pc=0x00007fcf886a793a offset=19a bits=0):
   test::micro@76 (line 25)
PcDesc(pc=0x00007fcf886a7942 offset=1a2 bits=0):
   ABC::<init>@13 (line 10)
   test::micro@42 (line 21)
PcDesc(pc=0x00007fcf886a7952 offset=1b2 bits=0):
   test::micro@109 (line 28)
PcDesc(pc=0x00007fcf886a79a8 offset=208 bits=0):
   test::micro@64 (line 23)
   Locals
    - l0: stack[8],oop
    - l1: empty
    - l2: empty
    - l3: obj[177]
    - l4: obj[178]
    - l5: obj[179]
    - l6: obj[180]
    - l7: stack[0]
   Expression stack
    - @0: stack[4]
    - @1: stack[8],oop
    - @2: stack[16]
   Objects
    - 0: R obj[177], ABC
        Fields: stack[20], stack[44]
    - 1: R obj[178], ABC
        Fields: stack[40], stack[48]
    - 2: R obj[179], ABC
        Fields: stack[32], stack[36]
    - 3: R obj[180], ABC
        Fields: stack[24], stack[28]
PcDesc(pc=0x00007fcf886a79c4 offset=224 bits=0):
   test::micro@64 (line 23)
PcDesc(pc=0x00007fcf886a7a10 offset=270 bits=1):
   test::micro@76 (line 25)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: empty
    - l2: stack[4]
    - l3: obj[234]
    - l4: obj[235]
    - l5: obj[236]
    - l6: obj[237]
    - l7: empty
   Expression stack
    - @0: stack[4]
    - @1: 10
   Objects
    - 0: R obj[234], ABC
        Fields: stack[20], stack[32]
    - 1: R obj[235], ABC
        Fields: stack[28], stack[36]
    - 2: R obj[236], ABC
        Fields: stack[16], stack[24]
    - 3: R obj[237], ABC
        Fields: stack[8], stack[12]
PcDesc(pc=0x00007fcf886a7a2c offset=28c bits=0):
   test::micro@76 (line 25)
PcDesc(pc=0x00007fcf886a7a5c offset=2bc bits=1):
   test::micro@55 (line 22)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: empty
    - l2: 0
    - l3: obj[21]
    - l4: obj[22]
    - l5: obj[23]
    - l6: obj[24]
    - l7: 0
   Expression stack
    - @0: 0
    - @1: 10000
   Objects
    - 0: R obj[21], ABC
        Fields: stack[20], stack[24]
    - 1: R obj[22], ABC
        Fields: stack[16], stack[28]
    - 2: R obj[23], ABC
        Fields: stack[8], stack[12]
    - 3: R obj[24], ABC
        Fields: stack[0], stack[4]
PcDesc(pc=0x00007fcf886a7a78 offset=2d8 bits=0):
   test::micro@64 (line 23)
PcDesc(pc=0x00007fcf886a7ab1 offset=311 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 4 OopMaps

ImmutableOopMap {xmm0=Oop } pc offsets: 349 
ImmutableOopMap {[8]=Oop } pc offsets: 520 
ImmutableOopMap {rbp=Oop } pc offsets: 624 700 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007fcf886a77ba offset=1a):
   test::micro@-1 (line 17)
ScopeDesc(pc=0x00007fcf886a77f1 offset=51):
   test::micro@64 (line 23)
ScopeDesc(pc=0x00007fcf886a77f6 offset=56):
   test::micro@70 (line 22)
ScopeDesc(pc=0x00007fcf886a7820 offset=80):
   test::micro@58 (line 23)
ScopeDesc(pc=0x00007fcf886a7827 offset=87):
   test::micro@63 (line 23)
ScopeDesc(pc=0x00007fcf886a783a offset=9a):
   test::micro@64 (line 23)
ScopeDesc(pc=0x00007fcf886a7840 offset=a0):
   test::micro@65 (line 23)
ScopeDesc(pc=0x00007fcf886a7847 offset=a7):
   test::micro@63 (line 23)
ScopeDesc(pc=0x00007fcf886a785a offset=ba):
   test::micro@65 (line 23)
ScopeDesc(pc=0x00007fcf886a7864 offset=c4):
   test::micro@63 (line 23)
ScopeDesc(pc=0x00007fcf886a7872 offset=d2):
   test::micro@65 (line 23)
ScopeDesc(pc=0x00007fcf886a787c offset=dc):
   test::micro@63 (line 23)
ScopeDesc(pc=0x00007fcf886a7891 offset=f1):
   test::micro@65 (line 23)
ScopeDesc(pc=0x00007fcf886a789b offset=fb):
   test::micro@63 (line 23)
ScopeDesc(pc=0x00007fcf886a78ae offset=10e):
   test::micro@65 (line 23)
ScopeDesc(pc=0x00007fcf886a78b8 offset=118):
   test::micro@63 (line 23)
ScopeDesc(pc=0x00007fcf886a78ce offset=12e):
   test::micro@65 (line 23)
ScopeDesc(pc=0x00007fcf886a78d8 offset=138):
   test::micro@63 (line 23)
ScopeDesc(pc=0x00007fcf886a78ee offset=14e):
   test::micro@65 (line 23)
ScopeDesc(pc=0x00007fcf886a78f1 offset=151):
   test::micro@67 (line 22)
ScopeDesc(pc=0x00007fcf886a78f9 offset=159):
   test::micro@55 (line 22)
ScopeDesc(pc=0x00007fcf886a78fd offset=15d):
   test::micro@70 (line 22)  reexecute=true
   Locals
    - l0: reg xmm0 [80],oop
    - l1: empty
    - l2: reg r9 [18],int
    - l3: obj[148]
    - l4: obj[149]
    - l5: obj[150]
    - l6: obj[151]
    - l7: reg rdx [4],int
   Objects
    - 0: R obj[148], ABC
        Fields: stack[20], reg r13 [26],int
    - 1: R obj[149], ABC
        Fields: reg xmm1 [96],int, reg xmm3 [128],int
    - 2: R obj[150], ABC
        Fields: reg r10 [20],int, reg rcx [2],int
    - 3: R obj[151], ABC
        Fields: reg r11 [22],int, reg r8 [16],int
ScopeDesc(pc=0x00007fcf886a78ff offset=15f):
   test::micro@70 (line 22)
ScopeDesc(pc=0x00007fcf886a790c offset=16c):
   test::micro@58 (line 23)
ScopeDesc(pc=0x00007fcf886a7913 offset=173):
   test::micro@63 (line 23)
ScopeDesc(pc=0x00007fcf886a7926 offset=186):
   test::micro@65 (line 23)
ScopeDesc(pc=0x00007fcf886a7928 offset=188):
   test::micro@67 (line 22)
ScopeDesc(pc=0x00007fcf886a7930 offset=190):
   test::micro@55 (line 22)
ScopeDesc(pc=0x00007fcf886a793a offset=19a):
   test::micro@76 (line 25)
ScopeDesc(pc=0x00007fcf886a7942 offset=1a2):
   ABC::<init>@13 (line 10)
ScopeDesc(pc=0x00007fcf886a7942 offset=1a2):
   test::micro@42 (line 21)
ScopeDesc(pc=0x00007fcf886a7952 offset=1b2):
   test::micro@109 (line 28)
ScopeDesc(pc=0x00007fcf886a79a8 offset=208):
   test::micro@64 (line 23)
   Locals
    - l0: stack[8],oop
    - l1: empty
    - l2: empty
    - l3: obj[177]
    - l4: obj[178]
    - l5: obj[179]
    - l6: obj[180]
    - l7: stack[0]
   Expression stack
    - @0: stack[4]
    - @1: stack[8],oop
    - @2: stack[16]
   Objects
    - 0: R obj[177], ABC
        Fields: stack[20], stack[44]
    - 1: R obj[178], ABC
        Fields: stack[40], stack[48]
    - 2: R obj[179], ABC
        Fields: stack[32], stack[36]
    - 3: R obj[180], ABC
        Fields: stack[24], stack[28]
ScopeDesc(pc=0x00007fcf886a79c4 offset=224):
   test::micro@64 (line 23)
ScopeDesc(pc=0x00007fcf886a7a10 offset=270):
   test::micro@76 (line 25)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: empty
    - l2: stack[4]
    - l3: obj[234]
    - l4: obj[235]
    - l5: obj[236]
    - l6: obj[237]
    - l7: empty
   Expression stack
    - @0: stack[4]
    - @1: 10
   Objects
    - 0: R obj[234], ABC
        Fields: stack[20], stack[32]
    - 1: R obj[235], ABC
        Fields: stack[28], stack[36]
    - 2: R obj[236], ABC
        Fields: stack[16], stack[24]
    - 3: R obj[237], ABC
        Fields: stack[8], stack[12]
ScopeDesc(pc=0x00007fcf886a7a2c offset=28c):
   test::micro@76 (line 25)
ScopeDesc(pc=0x00007fcf886a7a5c offset=2bc):
   test::micro@55 (line 22)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: empty
    - l2: 0
    - l3: obj[21]
    - l4: obj[22]
    - l5: obj[23]
    - l6: obj[24]
    - l7: 0
   Expression stack
    - @0: 0
    - @1: 10000
   Objects
    - 0: R obj[21], ABC
        Fields: stack[20], stack[24]
    - 1: R obj[22], ABC
        Fields: stack[16], stack[28]
    - 2: R obj[23], ABC
        Fields: stack[8], stack[12]
    - 3: R obj[24], ABC
        Fields: stack[0], stack[4]
ScopeDesc(pc=0x00007fcf886a7a78 offset=2d8):
   test::micro@64 (line 23)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007fcf886a7768: 00ff
relocInfo@0x00007fcf886a7768 [type=0(none) addr=0x00007fcf886a789f offset=255]
         @0x00007fcf886a776a: 505e
relocInfo@0x00007fcf886a776a [type=10(poll) addr=0x00007fcf886a78fd offset=94]
         @0x00007fcf886a776c: 585a
relocInfo@0x00007fcf886a776c [type=11(poll_return) addr=0x00007fcf886a7957 offset=90]
         @0x00007fcf886a776e: 314c
relocInfo@0x00007fcf886a776e [type=6(runtime_call) addr=0x00007fcf886a79a3 offset=76 format=1] | [destination=0x00007fcf88681ae0]
         @0x00007fcf886a7770: 8005
relocInfo@0x00007fcf886a7770 [type=16(post_call_nop) addr=0x00007fcf886a79a8 offset=5]
         @0x00007fcf886a7772: 780c3808
relocInfo@0x00007fcf886a7774 [type=7(external_word) addr=0x00007fcf886a79b0 offset=8 data=12] | [target=0x00007fcf9a66ba88]
         @0x00007fcf886a7776: 310e
relocInfo@0x00007fcf886a7776 [type=6(runtime_call) addr=0x00007fcf886a79be offset=14 format=1] | [destination=0x00007fcf99ac9dfe]
         @0x00007fcf886a7778: 314d
relocInfo@0x00007fcf886a7778 [type=6(runtime_call) addr=0x00007fcf886a7a0b offset=77 format=1] | [destination=0x00007fcf88681ae0]
         @0x00007fcf886a777a: 8005
relocInfo@0x00007fcf886a777a [type=16(post_call_nop) addr=0x00007fcf886a7a10 offset=5]
         @0x00007fcf886a777c: 780c3808
relocInfo@0x00007fcf886a777e [type=7(external_word) addr=0x00007fcf886a7a18 offset=8 data=12] | [target=0x00007fcf9a66ba88]
         @0x00007fcf886a7780: 310e
relocInfo@0x00007fcf886a7780 [type=6(runtime_call) addr=0x00007fcf886a7a26 offset=14 format=1] | [destination=0x00007fcf99ac9dfe]
         @0x00007fcf886a7782: 3131
relocInfo@0x00007fcf886a7782 [type=6(runtime_call) addr=0x00007fcf886a7a57 offset=49 format=1] | [destination=0x00007fcf88681ae0]
         @0x00007fcf886a7784: 8005
relocInfo@0x00007fcf886a7784 [type=16(post_call_nop) addr=0x00007fcf886a7a5c offset=5]
         @0x00007fcf886a7786: 780c3808
relocInfo@0x00007fcf886a7788 [type=7(external_word) addr=0x00007fcf886a7a64 offset=8 data=12] | [target=0x00007fcf9a66ba88]
         @0x00007fcf886a778a: 310e
relocInfo@0x00007fcf886a778a [type=6(runtime_call) addr=0x00007fcf886a7a72 offset=14 format=1] | [destination=0x00007fcf99ac9dfe]
         @0x00007fcf886a778c: 79214006
relocInfo@0x00007fcf886a778e [type=8(internal_word) addr=0x00007fcf886a7a78 offset=6 data=289] | [target=0x00007fcf886a7957]
         @0x00007fcf886a7790: 3111
relocInfo@0x00007fcf886a7790 [type=6(runtime_call) addr=0x00007fcf886a7a89 offset=17 format=1] | [destination=0x00007fcf8868b760]
         @0x00007fcf886a7792: 3105
relocInfo@0x00007fcf886a7792 [type=6(runtime_call) addr=0x00007fcf886a7a8e offset=5 format=1] | [destination=0x00007fcf885e9100]
         @0x00007fcf886a7794: 000a
relocInfo@0x00007fcf886a7794 [type=0(none) addr=0x00007fcf886a7a98 offset=10]
         @0x00007fcf886a7796: 3100
relocInfo@0x00007fcf886a7796 [type=6(runtime_call) addr=0x00007fcf886a7a98 offset=0 format=1] | [destination=0x00007fcf8868bc60]
         @0x00007fcf886a7798: 310f
relocInfo@0x00007fcf886a7798 [type=6(runtime_call) addr=0x00007fcf886a7aa7 offset=15 format=1] | [destination=0x00007fcf88689ea0]
         @0x00007fcf886a779a: 0000
relocInfo@0x00007fcf886a779a [type=0(none) addr=0x00007fcf886a7aa7 offset=0]
         @0x00007fcf886a779c: 0000
relocInfo@0x00007fcf886a779c [type=0(none) addr=0x00007fcf886a7aa7 offset=0]
         @0x00007fcf886a779e: 0000
relocInfo@0x00007fcf886a779e [type=0(none) addr=0x00007fcf886a7aa7 offset=0]
         @0x00007fcf886a77a0: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type evol_method
  method  = *{method} {0x00007fcee0400490} 'micro' '([II)I' in 'test'
Dependency of type evol_method
  method  = {method} {0x00007fcee04009e0} '<init>' '(I)V' in 'ABC'
Dependency of type evol_method
  method  = {method} {0x00007fcee0400a98} 'getAccum' '()I' in 'ABC'
Dependency of type evol_method
  method  = {method} {0x00007fcefa54db08} '<init>' '()V' in 'java/lang/Object'
Dependency of type unique_concrete_method_4
  context = ABC
  method  = {method} {0x00007fcee0400a98} 'getAccum' '()I' in 'ABC'
  class   = ABC
  method  = {method} {0x00007fcee0400a98} 'getAccum' '()I' in 'ABC'
   [nmethod<=klass]ABC
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 1 entries, 12 bytes):
{
   < 0x00007fcf886a77e2, 0x00007fcf886a7a2c > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 nullptr-oop
#1: 0x000000011f018550 a 'java/lang/Class'{0x000000011f018550} = 'ABC'
#2: 0x00000007ff01eec0 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000007ff01eec0}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 nullptr-oop
#1: 0x00007fcee0400490 {method} {0x00007fcee0400490} 'micro' '([II)I' in 'test'
#2: 0x00007fcee04009e0 {method} {0x00007fcee04009e0} '<init>' '(I)V' in 'ABC'
#3: 0x00007fcee0400a98 {method} {0x00007fcee0400a98} 'getAccum' '()I' in 'ABC'
#4: 0x00007fcefa54db08 {method} {0x00007fcefa54db08} '<init>' '()V' in 'java/lang/Object'
#5: 0x00007fcefb000a18 'ABC'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[res] 663643648
------------------------------------------------------------------------
static test::micro([II)I
  interpreter_invocation_count:         768
  invocation_counter:                   768
  backedge_counter:                 7680000
  decompile_count:                        0
  mdo size: 816 bytes

   0 iconst_0
   1 istore_2
   2 new 7 <ABC>
   5 dup
   6 iload_1
   7 invokespecial 9 <ABC.<init>(I)V> 
  0    bci: 7    CounterData        count(641)
  10 astore_3
  11 new 7 <ABC>
  14 dup
  15 iload_1
  16 iconst_1
  17 iadd
  18 invokespecial 9 <ABC.<init>(I)V> 
  16   bci: 18   CounterData        count(641)
  21 astore #4
  23 new 7 <ABC>
  26 dup
  27 iload_1
  28 iconst_2
  29 iadd
  30 invokespecial 9 <ABC.<init>(I)V> 
  32   bci: 30   CounterData        count(641)
  33 astore #5
  35 new 7 <ABC>
  38 dup
  39 iload_1
  40 iconst_3
  41 iadd
  42 invokespecial 9 <ABC.<init>(I)V> 
  48   bci: 42   CounterData        count(641)
  45 astore #6
  47 iconst_0
  48 istore #7
  50 fast_iload #7
  52 sipush 10000
  55 if_icmpge 73
  64   bci: 55   BranchData         taken(641) displacement(56)
                                    not taken(6410000)
  58 iload_2
  59 fast_aload_0
  60 fast_iload #7
  62 iconst_3
  63 iand
  64 iaload
  65 iadd
  66 istore_2
  67 iinc #7 1
  70 goto 50
  96   bci: 70   JumpData           taken(6410000) displacement(-32)
  73 iload_2
  74 bipush 10
  76 if_icmpge 86
  120  bci: 76   BranchData         taken(641) displacement(80)
                                    not taken(0)
  79 getstatic 12 <java/lang/System.out:Ljava/io/PrintStream;> 
  82 aload_0
  83 invokevirtual 18 <java/io/PrintStream.println(Ljava/lang/Object;)V> 
  152  bci: 83   VirtualCallData    count(0) entries(0)
  86 iload_2
  87 aload_3
  88 invokevirtual 24 <ABC.getAccum()I> 
  200  bci: 88   VirtualCallData    count(0) entries(1)
                                    'ABC'(641 1.00)
  91 iadd
  92 aload #4
  94 invokevirtual 24 <ABC.getAccum()I> 
  248  bci: 94   VirtualCallData    count(0) entries(1)
                                    'ABC'(641 1.00)
  97 iadd
  98 aload #5
 100 invokevirtual 24 <ABC.getAccum()I> 
  296  bci: 100  VirtualCallData    count(0) entries(1)
                                    'ABC'(641 1.00)
 103 iadd
 104 aload #6
 106 invokevirtual 24 <ABC.getAccum()I> 
  344  bci: 106  VirtualCallData    count(0) entries(1)
                                    'ABC'(641 1.00)
 109 iadd
 110 ireturn
------------------------------------------------------------------------
Total MDO size: 816 bytes
