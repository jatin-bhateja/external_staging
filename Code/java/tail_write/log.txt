CompileCommand: print test.copyMem_base bool print = true

============================= C2-compiled nmethod ==============================
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 128 --
#r591 rsp+124: in_preserve
#r590 rsp+120: return address
#r589 rsp+116: in_preserve
#r588 rsp+112: saved fp register
#r587 rsp+108: pad2, stack alignment
#r586 rsp+104: pad2, stack alignment
#r585 rsp+100: Fixed slot 1
#r584 rsp+96: Fixed slot 0
#r615 rsp+92: spill
#r614 rsp+88: spill
#r613 rsp+84: spill
#r612 rsp+80: spill
#r611 rsp+76: spill
#r610 rsp+72: spill
#r609 rsp+68: spill
#r608 rsp+64: spill
#r607 rsp+60: spill
#r606 rsp+56: spill
#r605 rsp+52: spill
#r604 rsp+48: spill
#r603 rsp+44: spill
#r602 rsp+40: spill
#r601 rsp+36: spill
#r600 rsp+32: spill
#r599 rsp+28: spill
#r598 rsp+24: spill
#r597 rsp+20: spill
#r596 rsp+16: spill
#r595 rsp+12: spill
#r594 rsp+ 8: spill
#r593 rsp+ 4: spill
#r592 rsp+ 0: spill
#
----------------------- MetaData before Compile_id = 285 ------------------------
{method}
 - this oop:          0x00007fc2fc603650
 - method holder:     'test'
 - constants:         0x00007fc2fc603080 constant pool [114]/operands[5] {0x00007fc2fc603080} for 'test' cache=0x00007fc2fc603980
 - access:            0x9  public static 
 - flags:             0x6080   queued_for_compilation  has_loops_flag  has_loops_flag_init 
 - name:              'copyMem_base'
 - signature:         '([B[B)V'
 - max stack:         5
 - max locals:        5
 - size of params:    2
 - method size:       14
 - vtable index:      -2
 - i2i entry:         0x00007fc34808b740
 - adapters:          AHE@0x00007fc34438fe10: 0xbb i2c: 0x00007fc3480e0a00 c2i: 0x00007fc3480e0af1 c2iUV: 0x00007fc3480e0abf c2iNCI: 0x00007fc3480e0b2b
 - compiled entry     0x00007fc3480e0af1
 - code size:         84
 - code start:        0x00007fc2fc6035e8
 - code end (excl):   0x00007fc2fc60363c
 - method data:       0x00007fc2fc603c90
 - checked ex length: 0
 - linenumber start:  0x00007fc2fc60363c
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 285 -----------------------
#
#  void ( rawptr:BotPTR )
#
000     N626: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B34 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (624 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #112	# Create frame

02a     movq    R13, [RSI + #32 (8-bit)]	# ptr
02e     movq    RBX, [RSI + #24 (8-bit)]	# ptr
032     movl    RBP, [RSI + #16 (8-bit)]	# int
035     movq    RDI, RSI	# spill
038     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
050     testq   R13, R13	# ptr
053     je     B34  P=0.001000 C=-1.000000

059     B2: #	out( B40 B3 ) <- in( B1 )  Freq: 0.999
059     movl    R10, [R13 + #8 (8-bit)]	# compressed klass ptr
        nop 	# 3 bytes pad for loops and calls
060     cmpl    R10, narrowklass: precise [byte (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
067     jne,u   B40  P=0.000001 C=-1.000000

06d     B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
06d     movq    R11, R13	# spill
070     # checkcastPP of R11

070     B4: #	out( B44 B5 ) <- in( B3 B34 )  Freq: 0.999999
070     movl    R10, [RBX + #8 (8-bit)]	# compressed klass ptr
074     NullCheck RBX

074     B5: #	out( B40 B6 ) <- in( B4 )  Freq: 0.999998
        nop 	# 12 bytes pad for loops and calls
080     cmpl    R10, narrowklass: precise [byte (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
087     jne,u   B40  P=0.000001 C=-1.000000

08d     B6: #	out( B41 B7 ) <- in( B5 )  Freq: 0.999997
08d     # checkcastPP of RBX
08d     movl    R10, [RBX + #12 (8-bit)]	# range
091     leal    RCX, [R10 + #-31]
095     testl   RCX, RCX
097     jl     B41  P=0.000001 C=-1.000000

09d     B7: #	out( B41 B8 ) <- in( B6 )  Freq: 0.999996
        nop 	# 3 bytes pad for loops and calls
0a0     movl    RSI, [R11 + #12 (8-bit)]	# range
0a4     NullCheck R11

0a4     B8: #	out( B41 B9 ) <- in( B7 )  Freq: 0.999995
0a4     leal    R8, [RSI + #-31]
0a8     testl   R8, R8
0ab     jl     B41  P=0.000001 C=-1.000000

0b1     B9: #	out( B11 ) <- in( B8 )  Freq: 0.999994
0b1     movl    RDI, R10	# spill
0b4     andl    RDI, #-32	# int
0b7     movl    R9, RBP	# spill
0ba     jmp,s   B11
        nop 	# 4 bytes pad for loops and calls

0c0     B10: #	out( B11 ) <- in( B13 ) top-of-loop Freq: 257.019
0c0     store_vector [R11 + #16 + RDX],XMM0
	
0c7     # TLS is in R15
0c7     movq    RDX, [R15 + #960 (32-bit)]	# ptr
0ce     addl    R9, #32	# int
0d2     testl   rax, [RDX]	# Safepoint: poll for GC        # test::copyMem_base @ bci:40 (line 11) L[0]=R11 L[1]=RBX L[2]=R9 L[3]=_ L[4]=_
        # OopMap {r11=Oop rbx=Oop off=210/0xd2}

0d4     B11: #	out( B15 B12 ) <- in( B9 B10 ) Loop( B11-B10 inner ) Freq: 258.019
0d4     cmpl    R9, RDI
0d7     jge     B15  P=0.003874 C=23234.000000

0dd     B12: #	out( B35 B13 ) <- in( B11 )  Freq: 257.019
        nop 	# 3 bytes pad for loops and calls
0e0     cmpl    R9, RCX	# unsigned
0e3     jae,u   B35  P=0.000001 C=-1.000000

0e9     B13: #	out( B10 B14 ) <- in( B12 )  Freq: 257.019
0e9     # castII of R9
0e9     movslq  RDX, R9	# i2l
0ec     load_vector XMM0,[RBX + #16 + RDX]
0f2     cmpl    R9, R8	# unsigned
0f5     jb,us  B10  P=0.999999 C=-1.000000

0f7     B14: #	out( N626 ) <- in( B13 )  Freq: 0.000260432
0f7     movl    RSI, #-28	# int
0fc     movl    [rsp + #0], R9	# spill
100     movq    [rsp + #16], RBX	# spill
105     movq    [rsp + #24], R11	# spill
10a     movl    [rsp + #4], R8	# spill
10f     vmovdqu [rsp + 32],XMM0	# spill
        nop 	# 3 bytes pad for loops and calls
118     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 385) L[0]=_ L[1]=_ STK[0]=rsp + #0 STK[1]=rsp + #4 STK[2]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.ByteVector::intoArray @ bci:7 (line 3364) L[0]=#ScObj0 L[1]=rsp + #24 L[2]=_ L[3]=_
        # ScObj0 jdk/incubator/vector/Byte256Vector={ [payload :0]=rsp + #32 }
        # test::copyMem_base @ bci:26 (line 13) L[0]=rsp + #24 L[1]=rsp + #16 L[2]=rsp + #0 L[3]=_ L[4]=_
        # OopMap {[16]=Oop [24]=Oop off=288/0x120}
128     stop	# ShouldNotReachHere

13c     B15: #	out( B43 B16 ) <- in( B11 )  Freq: 0.999473
13c     movl    RBP, R10	# spill
13f     subl    RBP, R9	# int
142     testl   RBP, RBP
144     jle     B43  P=0.000000 C=90.000000

14a     B16: #	out( B36 B17 ) <- in( B15 )  Freq: 0.999473
14a     # TLS is in R15
14a     movq    RDX, [R15 + #264 (32-bit)]	# ptr
151     movq    RAX, RDX	# spill
154     addq    RAX, #48	# ptr
158     movl    RCX, #1	# int
15d     shlxl   RDI, RCX, RBP
162     decl    RDI	# int
164     movl    RCX, RDI	# i2l zero-extend
	
166     movq    [rsp + #48], RCX	# spill
16b     # TLS is in R15
16b     cmpq    RAX, [R15 + #280 (32-bit)]	# raw ptr
172     jae,u   B36  P=0.000100 C=-1.000000

178     B17: #	out( B18 ) <- in( B16 )  Freq: 0.999373
178     # TLS is in R15
178     movq    [R15 + #264 (32-bit)], RAX	# ptr
17f     PREFETCHW [RAX + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
186     movq    [RDX], #1	# long
18d     PREFETCHW [RAX + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
194     movl    [RDX + #8 (8-bit)], narrowklass: precise [bool (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
19b     PREFETCHW [RAX + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1a2     movl    [RDX + #12 (8-bit)], #32	# int
1a9     PREFETCHW [RAX + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1b0     movq    RDI, RDX	# spill
1b3     addq    RDI, #16	# ptr
1b7     clear_mem_imm RDI , #4  
	

1c1     B18: #	out( B38 B19 ) <- in( B37 B17 )  Freq: 0.999473
1c1     
1c1     MEMBAR-storestore (empty encoding)
1c1     # checkcastPP of RDX
1c1     # TLS is in R15
1c1     movq    RAX, [R15 + #264 (32-bit)]	# ptr
1c8     movq    RCX, RAX	# spill
1cb     addq    RCX, #16	# ptr
1cf     movq    RDI, [rsp + #48]	# spill
1d4     long_to_mask_evex K7, RDI	!
1d9     vector_store_mask XMM0, K7 	! elem size is #1 byte[s]
1e4     store_vector [RDX + #16 (8-bit)],XMM0
	
1e9     # TLS is in R15
1e9     cmpq    RCX, [R15 + #280 (32-bit)]	# raw ptr
1f0     jae,u   B38  P=0.000100 C=-1.000000

1f6     B19: #	out( B20 ) <- in( B18 )  Freq: 0.999373
1f6     # TLS is in R15
1f6     movq    [R15 + #264 (32-bit)], RCX	# ptr
1fd     PREFETCHW [RCX + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
204     movq    [RAX], #1	# long
20b     movl    [RAX + #8 (8-bit)], narrowklass: precise jdk/incubator/vector/Byte256Vector$Byte256Mask: 0x00007fc2e0244bd0:Constant:exact *	# compressed klass ptr

212     B20: #	out( B23 B21 ) <- in( B39 B19 )  Freq: 0.999473
212     encode_heap_oop_not_null RCX,RDX
257     movl    [RAX + #12 (8-bit)], RCX	# compressed ptr
25a     
25a     MEMBAR-storestore (empty encoding)
25a     # checkcastPP of RAX
25a     movslq  RBP, R9	# i2l
        nop 	# 3 bytes pad for loops and calls
260     testl   R9, R9
263     jl,s   B23  P=0.500000 C=-1.000000

265     B21: #	out( B23 B22 ) <- in( B20 )  Freq: 0.499736
265     movslq  RCX, R10	# i2l
268     addq    RCX, #-32	# long
26c     cmpq    RBP, RCX
26f     jg,s   B23  P=0.500000 C=-1.000000

271     B22: #	out( B25 ) <- in( B21 )  Freq: 0.249868
271     movq    R10, [rsp + #48]	# spill
276     long_to_mask_evex K7, R10	!
27b     vector_masked_load XMM0, [RBX + #16 + RBP], K7 	! vector masked copy
286     vmovdqu [rsp + 64],XMM0	# spill
28c     jmp,s   B25

28e     B23: #	out( B49 B24 ) <- in( B21 B20 )  Freq: 0.749604
28e     movq    [rsp + #32], RAX	# spill
293     movl    [rsp + #24], R9	# spill
298     movl    [rsp + #20], R8	# spill
29d     movl    [rsp + #16], RSI	# spill
2a1     movq    [rsp + #8], R11	# spill
2a6     movq    [rsp + #0], RBX	# spill
2aa     movl    RSI, R9	# spill
2ad     movq    RDX, jdk/incubator/vector/ByteVector$ByteSpecies (jdk/incubator/vector/VectorSpecies):exact *	# ptr
2b7     movq    RCX, RAX	# spill
2ba     movl    R8, #1	# int
2c0     movl    R9, R10	# spill
        nop 	# 1 bytes pad for loops and calls
2c4     call,static  jdk.incubator.vector.ByteVector::checkMaskFromIndexSize
        # jdk.incubator.vector.ByteVector::fromArray @ bci:43 (line 2999) L[0]=_ L[1]=rsp + #0 L[2]=rsp + #24 L[3]=rsp + #32 L[4]=#Ptr0x00007fc2c804c410
        # test::copyMem_base @ bci:73 (line 18) L[0]=rsp + #8 L[1]=_ L[2]=rsp + #24 L[3]=_ L[4]=rsp + #32
        # OopMap {[0]=Oop [8]=Oop [32]=Oop off=716/0x2cc}

2d4     B24: #	out( B25 ) <- in( B23 )  Freq: 0.749589
        # Block is sole successor of call
2d4     movq    R10, [rsp + #0]	# spill
2d8     movq    R11, [rsp + #48]	# spill
2dd     long_to_mask_evex K7, R11	!
2e2     vector_masked_load XMM0, [R10 + #16 + RBP], K7 	! vector masked copy
2ed     vmovdqu [rsp + 64],XMM0	# spill
2f3     movq    R11, [rsp + #8]	# spill
2f8     movl    RSI, [rsp + #16]	# spill
2fc     movl    R8, [rsp + #20]	# spill
301     movl    R9, [rsp + #24]	# spill
306     movq    RAX, [rsp + #32]	# spill

30b     B25: #	out( B29 B26 ) <- in( B22 B24 )  Freq: 0.999458
30b     movq    R10, [rsp + #48]	# spill
310     long_to_mask_evex K7, R10	!
315     long_to_mask_evex K6, R10	!
        nop 	# 6 bytes pad for loops and calls
320     ktest_ge8  K7, K6
	
325     jae,us  B29  P=0.100000 C=-1.000000

327     B26: #	out( B42 B27 ) <- in( B25 )  Freq: 0.899512
327     cmpl    R9, R8	# unsigned
32a     jae,u   B42  P=0.000001 C=-1.000000

330     B27: #	out( B28 ) <- in( B26 )  Freq: 0.899511
330     # castII of R9
330     vmovdqu XMM0,[rsp + 64]	# spill
336     store_vector [R11 + #16 + R9],XMM0
	

33d     B28: #	out( N626 ) <- in( B33 B27 )  Freq: 0.999455
33d     vzeroupper
	addq    rsp, 112	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

352     ret

353     B29: #	out( B31 B30 ) <- in( B25 )  Freq: 0.0999458
353     testl   R9, R9
356     jl,s   B31  P=0.500000 C=-1.000000

358     B30: #	out( B33 B31 ) <- in( B29 )  Freq: 0.0499729
358     movslq  R10, RSI	# i2l
35b     addq    R10, #-32	# long
        nop 	# 1 bytes pad for loops and calls
360     cmpq    RBP, R10
363     jle,s   B33  P=0.500000 C=-1.000000

365     B31: #	out( B48 B32 ) <- in( B30 B29 )  Freq: 0.0749593
365     pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #24]
36f     movq    RCX, RAX	# spill
372     movl    RBX, RSI	# spill
374     movq    [rsp + #8], R11	# spill
379     movl    [rsp + #0], R9	# spill
37d     movl    RSI, R9	# spill
380     movq    RDX, jdk/incubator/vector/ByteVector$ByteSpecies (jdk/incubator/vector/VectorSpecies):exact *	# ptr
38a     movl    R8, #1	# int
390     movl    R9, RBX	# spill
393     movq    [rsp + #16], RAX	# spill
398     call,static  jdk.incubator.vector.ByteVector::checkMaskFromIndexSize
        # jdk.incubator.vector.ByteVector::intoArray @ bci:46 (line 3409) L[0]=#ScObj0 L[1]=rsp + #8 L[2]=rsp + #0 L[3]=rsp + #16 L[4]=_
        # ScObj0 jdk/incubator/vector/Byte256Vector={ [payload :0]=rsp + #64 }
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {[8]=Oop [16]=Oop off=928/0x3a0}

3a8     B32: #	out( B33 ) <- in( B31 )  Freq: 0.0749578
        # Block is sole successor of call
3a8     movq    R11, [rsp + #8]	# spill
3ad     pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #48]

3b7     B33: #	out( B28 ) <- in( B32 B30 )  Freq: 0.0999443
3b7     vmovdqu XMM0,[rsp + 64]	# spill
3bd     movq    R10, [rsp + #48]	# spill
3c2     long_to_mask_evex K7, R10	!
3c7     vector_masked_store [R11 + #16 + RBP], XMM0, K7 	! vector masked store
3d2     jmp     B28

3d7     B34: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
3d7     xorl    R11, R11	# ptr
3da     jmp     B4

3df     B35: #	out( N626 ) <- in( B12 )  Freq: 0.000260432
3df     movl    RSI, #-28	# int
3e4     movl    [rsp + #0], R9	# spill
3e8     movq    [rsp + #8], R11	# spill
3ed     movq    [rsp + #24], RBX	# spill
3f2     movl    [rsp + #4], RCX	# spill
        nop 	# 2 bytes pad for loops and calls
3f8     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 385) L[0]=_ L[1]=_ STK[0]=rsp + #0 STK[1]=rsp + #4 STK[2]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.ByteVector::fromArray @ bci:9 (line 2963) L[0]=#Ptr0x00007fc2c804c410 L[1]=rsp + #24 L[2]=_ L[3]=_
        # test::copyMem_base @ bci:21 (line 12) L[0]=rsp + #8 L[1]=rsp + #24 L[2]=rsp + #0 L[3]=_ L[4]=_
        # OopMap {[8]=Oop [24]=Oop off=1024/0x400}
408     stop	# ShouldNotReachHere

41c     B36: #	out( B46 B37 ) <- in( B16 )  Freq: 9.99638e-05
41c     movl    [rsp + #20], R9	# spill
421     movl    [rsp + #16], R8	# spill
426     movl    [rsp + #12], RSI	# spill
42a     movl    [rsp + #8], R10	# spill
42f     movq    [rsp + #0], R11	# spill
433     movq    RBP, RBX	# spill
436     movq    RSI, precise [bool (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# ptr
440     movl    RDX, #32	# int
        nop 	# 3 bytes pad for loops and calls
448     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.VectorMask::fromLong @ bci:39 (line 242) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007fc2e023fd90 STK[1]=#Ptr0x00007fc2b40130f0 STK[2]=#32 STK[3]=rsp + #48 STK[4]=_ STK[5]=#1 STK[6]=#Ptr0x00007fc2c804c410 STK[7]=#Ptr0x00007fc2e0240658
        # test::copyMem_base @ bci:61 (line 17) L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #20 L[3]=_ L[4]=_
        # OopMap {rbp=Oop [0]=Oop off=1104/0x450}

458     B37: #	out( B18 ) <- in( B36 )  Freq: 9.99618e-05
        # Block is sole successor of call
458     movq    RBX, RBP	# spill
45b     movq    R11, [rsp + #0]	# spill
45f     movl    R10, [rsp + #8]	# spill
464     movl    RSI, [rsp + #12]	# spill
468     movl    R8, [rsp + #16]	# spill
46d     movl    R9, [rsp + #20]	# spill
472     movq    RDX, RAX	# spill
475     jmp     B18

47a     B38: #	out( B45 B39 ) <- in( B18 )  Freq: 9.99638e-05
47a     movq    [rsp + #24], RDX	# spill
47f     movl    [rsp + #20], R9	# spill
484     movl    [rsp + #16], R8	# spill
489     movl    [rsp + #12], RSI	# spill
48d     movl    [rsp + #8], R10	# spill
492     movq    [rsp + #0], R11	# spill
496     movq    RBP, RBX	# spill
499     movq    RSI, precise jdk/incubator/vector/Byte256Vector$Byte256Mask: 0x00007fc2e0244bd0:Constant:exact *	# ptr
        nop 	# 1 bytes pad for loops and calls
4a4     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.VectorMask::fromLong @ bci:39 (line 242) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007fc2e023fd90 STK[1]=#Ptr0x00007fc2b40130f0 STK[2]=#32 STK[3]=rsp + #48 STK[4]=_ STK[5]=#1 STK[6]=#Ptr0x00007fc2c804c410 STK[7]=#Ptr0x00007fc2e0240658
        # test::copyMem_base @ bci:61 (line 17) L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #20 L[3]=_ L[4]=_
        # OopMap {rbp=Oop [0]=Oop [24]=Oop off=1196/0x4ac}

4b4     B39: #	out( B20 ) <- in( B38 )  Freq: 9.99618e-05
        # Block is sole successor of call
4b4     movq    RBX, RBP	# spill
4b7     movq    R11, [rsp + #0]	# spill
4bb     movl    R10, [rsp + #8]	# spill
4c0     movl    RSI, [rsp + #12]	# spill
4c4     movl    R8, [rsp + #16]	# spill
4c9     movl    R9, [rsp + #20]	# spill
4ce     movq    RDX, [rsp + #24]	# spill
4d3     jmp     B20

4d8     B40: #	out( N626 ) <- in( B2 B5 )  Freq: 1.999e-06
4d8     movl    RSI, #-115	# int
4dd     movq    [rsp + #0], R13	# spill
4e1     movq    [rsp + #8], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
4e8     call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret' debug_id='0')
        # test::copyMem_base @ bci:2 (line 11) L[0]=rsp + #0 L[1]=rsp + #8 L[2]=RBP L[3]=_ L[4]=_
        # OopMap {[0]=Oop [8]=Oop off=1264/0x4f0}
4f8     stop	# ShouldNotReachHere

50c     B41: #	out( N626 ) <- in( B8 B6 B7 )  Freq: 3.01327e-06
50c     movl    RSI, #-66	# int
511     movq    [rsp + #0], R11	# spill
515     movq    [rsp + #8], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
51c     call,static  wrapper for: uncommon_trap(reason='profile_predicate' action='maybe_recompile' debug_id='0')
        # test::copyMem_base @ bci:2 (line 11) L[0]=rsp + #0 L[1]=rsp + #8 L[2]=RBP L[3]=_ L[4]=_
        # OopMap {[0]=Oop [8]=Oop off=1316/0x524}
52c     stop	# ShouldNotReachHere

540     B42: #	out( N626 ) <- in( B26 )  Freq: 9.11456e-07
540     movl    RSI, #-28	# int
545     movl    RBP, R9	# spill
548     movq    [rsp + #0], R11	# spill
54c     movl    [rsp + #8], R8	# spill
        nop 	# 3 bytes pad for loops and calls
554     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 385) L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #8 STK[2]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.ByteVector::intoArray @ bci:7 (line 3364) L[0]=#ScObj0 L[1]=rsp + #0 L[2]=_ L[3]=_
        # ScObj0 jdk/incubator/vector/Byte256Vector={ [payload :0]=rsp + #64 }
        # jdk.incubator.vector.ByteVector::intoArray @ bci:10 (line 3405) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {[0]=Oop off=1372/0x55c}
564     stop	# ShouldNotReachHere

578     B43: #	out( N626 ) <- in( B15 )  Freq: 4.99737e-07
578     movl    RSI, #-187	# int
        nop 	# 3 bytes pad for loops and calls
580     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # test::copyMem_base @ bci:49 (line 16) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP
        # OopMap {off=1416/0x588}
590     stop	# ShouldNotReachHere

5a4     B44: #	out( N626 ) <- in( B4 )  Freq: 1.01328e-06
5a4     movl    RSI, #-138	# int
5a9     movq    [rsp + #0], R11	# spill
        nop 	# 3 bytes pad for loops and calls
5b0     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # test::copyMem_base @ bci:2 (line 11) L[0]=rsp + #0 L[1]=#null L[2]=RBP L[3]=_ L[4]=_
        # OopMap {[0]=Oop off=1464/0x5b8}
5c0     stop	# ShouldNotReachHere

5d4     B45: #	out( B47 ) <- in( B38 )  Freq: 9.99638e-10
5d4     # exception oop is in rax; no code emitted
5d4     jmp,s   B47

5d6     B46: #	out( B47 ) <- in( B36 )  Freq: 9.99638e-10
5d6     # exception oop is in rax; no code emitted

5d6     B47: #	out( B50 ) <- in( B46 B45 )  Freq: 1.99928e-09
5d6     movq    RSI, RAX	# spill
5d9     jmp,s   B50

5db     B48: #	out( B50 ) <- in( B31 )  Freq: 7.49593e-07
5db     # exception oop is in rax; no code emitted
5db     movq    RSI, RAX	# spill
        nop 	# 2 bytes pad for loops and calls
5e0     jmp,s   B50

5e2     B49: #	out( B50 ) <- in( B23 )  Freq: 7.49604e-06
5e2     # exception oop is in rax; no code emitted
5e2     movq    RSI, RAX	# spill

5e5     B50: #	out( N626 ) <- in( B49 B48 B47 )  Freq: 8.24764e-06
5e5     vzeroupper
	addq    rsp, 112	# Destroy frame
	popq    rbp

5ed     jmp     rethrow_stub

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     596  285 %           test::copyMem_base @ 2 (84 bytes)
 total in heap  [0x00007fc348289910,0x00007fc34828aae0] = 4560
 relocation     [0x00007fc348289a80,0x00007fc348289b68] = 232
 main code      [0x00007fc348289b80,0x00007fc34828a198] = 1560
 stub code      [0x00007fc34828a198,0x00007fc34828a1c0] = 40
 oops           [0x00007fc34828a1c0,0x00007fc34828a1f0] = 48
 metadata       [0x00007fc34828a1f0,0x00007fc34828a2e8] = 248
 scopes data    [0x00007fc34828a2e8,0x00007fc34828a570] = 648
 scopes pcs     [0x00007fc34828a570,0x00007fc34828aa50] = 1248
 dependencies   [0x00007fc34828aa50,0x00007fc34828aa68] = 24
 handler table  [0x00007fc34828aa68,0x00007fc34828aac8] = 96
 nul chk table  [0x00007fc34828aac8,0x00007fc34828aae0] = 24

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007fc2fc603650} 'copyMem_base' '([B[B)V' in 'test'
 ;; N626: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fc348289b80:   callq  0x00007fc34c80dd50           ;   {runtime_call os::breakpoint()}
  0x00007fc348289b85:   nop
  0x00007fc348289b86:   nop
  0x00007fc348289b87:   nop
  0x00007fc348289b88:   nop
  0x00007fc348289b89:   nop
  0x00007fc348289b8a:   nop
  0x00007fc348289b8b:   nop
  0x00007fc348289b8c:   nop
  0x00007fc348289b8d:   nop
  0x00007fc348289b8e:   nop
  0x00007fc348289b8f:   nop
 ;; B1: #	out( B34 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fc348289b90:   mov    %eax,-0x18000(%rsp)
  0x00007fc348289b97:   push   %rbp
  0x00007fc348289b98:   sub    $0x70,%rsp
  0x00007fc348289b9c:   cmpl   $0x1,0x20(%r15)
  0x00007fc348289ba4:   jne    0x00007fc34828a188
  0x00007fc348289baa:   mov    0x20(%rsi),%r13
  0x00007fc348289bae:   mov    0x18(%rsi),%rbx
  0x00007fc348289bb2:   mov    0x10(%rsi),%ebp              ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
  0x00007fc348289bb5:   mov    %rsi,%rdi
  0x00007fc348289bb8:   vzeroupper 
  0x00007fc348289bbb:   movabs $0x7fc34c985980,%r10
  0x00007fc348289bc5:   callq  *%r10
  0x00007fc348289bc8:   nopl   0x0(%rax,%rax,1)             ;   {other}
  0x00007fc348289bd0:   test   %r13,%r13                    ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289bd3:   je     0x00007fc348289f57
 ;; B2: #	out( B40 B3 ) <- in( B1 )  Freq: 0.999
  0x00007fc348289bd9:   mov    0x8(%r13),%r10d
  0x00007fc348289bdd:   nop
  0x00007fc348289bde:   nop
  0x00007fc348289bdf:   nop
  0x00007fc348289be0:   cmp    $0x40a00,%r10d               ;   {metadata({type array byte})}
  0x00007fc348289be7:   jne    0x00007fc34828a058
 ;; B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
  0x00007fc348289bed:   mov    %r13,%r11
 ;; B4: #	out( B44 B5 ) <- in( B3 B34 )  Freq: 0.999999
  0x00007fc348289bf0:   mov    0x8(%rbx),%r10d              ; implicit exception: dispatches to 0x00007fc34828a124
 ;; B5: #	out( B40 B6 ) <- in( B4 )  Freq: 0.999998
  0x00007fc348289bf4:   nop
  0x00007fc348289bf5:   nop
  0x00007fc348289bf6:   nop
  0x00007fc348289bf7:   nop
  0x00007fc348289bf8:   nop
  0x00007fc348289bf9:   nop
  0x00007fc348289bfa:   nop
  0x00007fc348289bfb:   nop
  0x00007fc348289bfc:   nop
  0x00007fc348289bfd:   nop
  0x00007fc348289bfe:   nop
  0x00007fc348289bff:   nop
  0x00007fc348289c00:   cmp    $0x40a00,%r10d               ;   {metadata({type array byte})}
  0x00007fc348289c07:   jne    0x00007fc34828a058           ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
 ;; B6: #	out( B41 B7 ) <- in( B5 )  Freq: 0.999997
  0x00007fc348289c0d:   mov    0xc(%rbx),%r10d              ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@7 (line 11)
  0x00007fc348289c11:   lea    -0x1f(%r10),%ecx
  0x00007fc348289c15:   test   %ecx,%ecx
  0x00007fc348289c17:   jl     0x00007fc34828a08c
 ;; B7: #	out( B41 B8 ) <- in( B6 )  Freq: 0.999996
  0x00007fc348289c1d:   nop
  0x00007fc348289c1e:   nop
  0x00007fc348289c1f:   nop
  0x00007fc348289c20:   mov    0xc(%r11),%esi               ; implicit exception: dispatches to 0x00007fc34828a08c
 ;; B8: #	out( B41 B9 ) <- in( B7 )  Freq: 0.999995
  0x00007fc348289c24:   lea    -0x1f(%rsi),%r8d
  0x00007fc348289c28:   test   %r8d,%r8d
  0x00007fc348289c2b:   jl     0x00007fc34828a08c
 ;; B9: #	out( B11 ) <- in( B8 )  Freq: 0.999994
  0x00007fc348289c31:   mov    %r10d,%edi
  0x00007fc348289c34:   and    $0xffffffe0,%edi
  0x00007fc348289c37:   mov    %ebp,%r9d
  0x00007fc348289c3a:   jmp    0x00007fc348289c54
  0x00007fc348289c3c:   nop
  0x00007fc348289c3d:   nop
  0x00007fc348289c3e:   nop
  0x00007fc348289c3f:   nop                                 ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B10: #	out( B11 ) <- in( B13 ) top-of-loop Freq: 257.019
  0x00007fc348289c40:   vmovdqu %ymm0,0x10(%r11,%rdx,1)     ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
  0x00007fc348289c47:   mov    0x3c0(%r15),%rdx             ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289c4e:   add    $0x20,%r9d                   ; ImmutableOopMap {r11=Oop rbx=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::copyMem_base@40 (line 11)
  0x00007fc348289c52:   test   %eax,(%rdx)                  ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
                                                            ;   {poll}
 ;; B11: #	out( B15 B12 ) <- in( B9 B10 ) Loop( B11-B10 inner ) Freq: 258.019
  0x00007fc348289c54:   cmp    %edi,%r9d                    ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289c57:   jge    0x00007fc348289cbc
 ;; B12: #	out( B35 B13 ) <- in( B11 )  Freq: 257.019
  0x00007fc348289c5d:   nop
  0x00007fc348289c5e:   nop
  0x00007fc348289c5f:   nop
  0x00007fc348289c60:   cmp    %ecx,%r9d
  0x00007fc348289c63:   jae    0x00007fc348289f5f           ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
                                                            ; - test::copyMem_base@21 (line 12)
 ;; B13: #	out( B10 B14 ) <- in( B12 )  Freq: 257.019
  0x00007fc348289c69:   movslq %r9d,%rdx                    ;*i2l {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::arrayAddress@4 (line 3956)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@20 (line 3732)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
                                                            ; - test::copyMem_base@21 (line 12)
  0x00007fc348289c6c:   vmovdqu 0x10(%rbx,%rdx,1),%ymm0     ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@32 (line 3730)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
                                                            ; - test::copyMem_base@21 (line 12)
  0x00007fc348289c72:   cmp    %r8d,%r9d
  0x00007fc348289c75:   jb     0x00007fc348289c40           ;*invokedynamic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@27 (line 3732)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
                                                            ; - test::copyMem_base@21 (line 12)
 ;; B14: #	out( N626 ) <- in( B13 )  Freq: 0.000260432
  0x00007fc348289c77:   mov    $0xffffffe4,%esi
  0x00007fc348289c7c:   mov    %r9d,(%rsp)
  0x00007fc348289c80:   mov    %rbx,0x10(%rsp)
  0x00007fc348289c85:   mov    %r11,0x18(%rsp)
  0x00007fc348289c8a:   mov    %r8d,0x4(%rsp)
  0x00007fc348289c8f:   vmovdqu %ymm0,0x20(%rsp)            ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289c95:   nop
  0x00007fc348289c96:   nop
  0x00007fc348289c97:   nop
  0x00007fc348289c98:   vzeroupper 
  0x00007fc348289c9b:   callq  0x00007fc34819fb20           ; ImmutableOopMap {[16]=Oop [24]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
                                                            ; - test::copyMem_base@26 (line 13)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fc348289ca0:   nopl   0x1000390(%rax,%rax,1)       ;   {other}
  0x00007fc348289ca8:   movabs $0x7fc34cf214a0,%rdi         ;   {external_word}
  0x00007fc348289cb2:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348289cb6:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348289cbb:   hlt    
 ;; B15: #	out( B43 B16 ) <- in( B11 )  Freq: 0.999473
  0x00007fc348289cbc:   mov    %r10d,%ebp
  0x00007fc348289cbf:   sub    %r9d,%ebp
  0x00007fc348289cc2:   test   %ebp,%ebp                    ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289cc4:   jle    0x00007fc34828a0f8           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B16: #	out( B36 B17 ) <- in( B15 )  Freq: 0.999473
  0x00007fc348289cca:   mov    0x108(%r15),%rdx
  0x00007fc348289cd1:   mov    %rdx,%rax
  0x00007fc348289cd4:   add    $0x30,%rax
  0x00007fc348289cd8:   mov    $0x1,%ecx
  0x00007fc348289cdd:   shlx   %ebp,%ecx,%edi
  0x00007fc348289ce2:   dec    %edi                         ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289ce4:   mov    %edi,%ecx                    ;*land {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@17 (line 241)
                                                            ; - test::copyMem_base@61 (line 17)
  0x00007fc348289ce6:   mov    %rcx,0x30(%rsp)
  0x00007fc348289ceb:   cmp    0x118(%r15),%rax
  0x00007fc348289cf2:   jae    0x00007fc348289f9c
 ;; B17: #	out( B18 ) <- in( B16 )  Freq: 0.999373
  0x00007fc348289cf8:   mov    %rax,0x108(%r15)
  0x00007fc348289cff:   prefetchw 0xc0(%rax)
  0x00007fc348289d06:   movq   $0x1,(%rdx)
  0x00007fc348289d0d:   prefetchw 0x100(%rax)
  0x00007fc348289d14:   movl   $0x40200,0x8(%rdx)           ;   {metadata({type array bool})}
  0x00007fc348289d1b:   prefetchw 0x140(%rax)
  0x00007fc348289d22:   movl   $0x20,0xc(%rdx)
  0x00007fc348289d29:   prefetchw 0x180(%rax)
  0x00007fc348289d30:   mov    %rdx,%rdi
  0x00007fc348289d33:   add    $0x10,%rdi
  0x00007fc348289d37:   vpxor  %ymm0,%ymm0,%ymm0
  0x00007fc348289d3b:   vmovdqu64 %ymm0,(%rdi)              ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B18: #	out( B38 B19 ) <- in( B37 B17 )  Freq: 0.999473
  0x00007fc348289d41:   mov    0x108(%r15),%rax
  0x00007fc348289d48:   mov    %rax,%rcx
  0x00007fc348289d4b:   add    $0x10,%rcx
  0x00007fc348289d4f:   mov    0x30(%rsp),%rdi              ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289d54:   kmovq  %rdi,%k7                     ;*invokestatic fromBitsCoerced {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
  0x00007fc348289d59:   vpmovm2b %k7,%ymm0
  0x00007fc348289d5f:   vpabsb %ymm0,%ymm0
  0x00007fc348289d64:   vmovdqu %ymm0,0x10(%rdx)
  0x00007fc348289d69:   cmp    0x118(%r15),%rcx
  0x00007fc348289d70:   jae    0x00007fc348289ffa           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B19: #	out( B20 ) <- in( B18 )  Freq: 0.999373
  0x00007fc348289d76:   mov    %rcx,0x108(%r15)
  0x00007fc348289d7d:   prefetchw 0xc0(%rcx)
  0x00007fc348289d84:   movq   $0x1,(%rax)
  0x00007fc348289d8b:   movl   $0xde750,0x8(%rax)           ;   {metadata('jdk/incubator/vector/Byte256Vector$Byte256Mask')}
 ;; B20: #	out( B23 B21 ) <- in( B39 B19 )  Freq: 0.999473
  0x00007fc348289d92:   cmp    0x5146217(%rip),%r12        # 0x00007fc34d3cffb0
                                                            ;   {external_word}
  0x00007fc348289d99:   je     0x00007fc348289db3
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007fc348289d9f:   movabs $0x7fc34cfa4df8,%rdi         ;   {external_word}
  0x00007fc348289da9:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348289dad:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348289db2:   hlt    
  0x00007fc348289db3:   test   %rdx,%rdx
  0x00007fc348289db6:   jne    0x00007fc348289dd0
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007fc348289dbc:   movabs $0x7fc34cfa4e38,%rdi         ;   {external_word}
  0x00007fc348289dc6:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348289dca:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348289dcf:   hlt    
  0x00007fc348289dd0:   mov    %rdx,%rcx
  0x00007fc348289dd3:   shr    $0x3,%rcx
  0x00007fc348289dd7:   mov    %ecx,0xc(%rax)               ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289dda:   movslq %r9d,%rbp                    ;*i2l {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@7 (line 2995)
                                                            ; - test::copyMem_base@73 (line 18)
  0x00007fc348289ddd:   nop
  0x00007fc348289dde:   nop
  0x00007fc348289ddf:   nop
  0x00007fc348289de0:   test   %r9d,%r9d
  0x00007fc348289de3:   jl     0x00007fc348289e0e
 ;; B21: #	out( B23 B22 ) <- in( B20 )  Freq: 0.499736
  0x00007fc348289de5:   movslq %r10d,%rcx
  0x00007fc348289de8:   add    $0xffffffffffffffe0,%rcx
  0x00007fc348289dec:   cmp    %rcx,%rbp
  0x00007fc348289def:   jg     0x00007fc348289e0e
 ;; B22: #	out( B25 ) <- in( B21 )  Freq: 0.249868
  0x00007fc348289df1:   mov    0x30(%rsp),%r10              ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289df6:   kmovq  %r10,%k7                     ;*invokestatic fromBitsCoerced {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
  0x00007fc348289dfb:   vmovdqu8 0x10(%rbx,%rbp,1),%ymm0{%k7}{z};*invokestatic loadMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
                                                            ; - test::copyMem_base@73 (line 18)
  0x00007fc348289e06:   vmovdqu %ymm0,0x40(%rsp)
  0x00007fc348289e0c:   jmp    0x00007fc348289e8b           ;*iconst_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@17 (line 2995)
                                                            ; - test::copyMem_base@73 (line 18)
 ;; B23: #	out( B49 B24 ) <- in( B21 B20 )  Freq: 0.749604
  0x00007fc348289e0e:   mov    %rax,0x20(%rsp)
  0x00007fc348289e13:   mov    %r9d,0x18(%rsp)
  0x00007fc348289e18:   mov    %r8d,0x14(%rsp)
  0x00007fc348289e1d:   mov    %esi,0x10(%rsp)
  0x00007fc348289e21:   mov    %r11,0x8(%rsp)
  0x00007fc348289e26:   mov    %rbx,(%rsp)
  0x00007fc348289e2a:   mov    %r9d,%esi
  0x00007fc348289e2d:   movabs $0x11f9499c8,%rdx            ;   {oop(a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8})}
  0x00007fc348289e37:   mov    %rax,%rcx
  0x00007fc348289e3a:   mov    $0x1,%r8d
  0x00007fc348289e40:   mov    %r10d,%r9d                   ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289e43:   nop
  0x00007fc348289e44:   vzeroupper 
  0x00007fc348289e47:   callq  0x00007fc34828a198           ; ImmutableOopMap {[0]=Oop [8]=Oop [32]=Oop }
                                                            ;*invokestatic checkMaskFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
                                                            ; - test::copyMem_base@73 (line 18)
                                                            ;   {static_call}
  0x00007fc348289e4c:   nopl   0x200053c(%rax,%rax,1)       ;   {other}
 ;; B24: #	out( B25 ) <- in( B23 )  Freq: 0.749589
  0x00007fc348289e54:   mov    (%rsp),%r10
  0x00007fc348289e58:   mov    0x30(%rsp),%r11              ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289e5d:   kmovq  %r11,%k7                     ;*invokestatic fromBitsCoerced {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
  0x00007fc348289e62:   vmovdqu8 0x10(%r10,%rbp,1),%ymm0{%k7}{z};*invokestatic loadMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
                                                            ; - test::copyMem_base@73 (line 18)
  0x00007fc348289e6d:   vmovdqu %ymm0,0x40(%rsp)
  0x00007fc348289e73:   mov    0x8(%rsp),%r11
  0x00007fc348289e78:   mov    0x10(%rsp),%esi
  0x00007fc348289e7c:   mov    0x14(%rsp),%r8d
  0x00007fc348289e81:   mov    0x18(%rsp),%r9d
  0x00007fc348289e86:   mov    0x20(%rsp),%rax
 ;; B25: #	out( B29 B26 ) <- in( B22 B24 )  Freq: 0.999458
  0x00007fc348289e8b:   mov    0x30(%rsp),%r10              ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289e90:   kmovq  %r10,%k7
  0x00007fc348289e95:   kmovq  %r10,%k6                     ;*invokestatic fromBitsCoerced {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
  0x00007fc348289e9a:   nop
  0x00007fc348289e9b:   nop
  0x00007fc348289e9c:   nop
  0x00007fc348289e9d:   nop
  0x00007fc348289e9e:   nop
  0x00007fc348289e9f:   nop
  0x00007fc348289ea0:   kortestd %k7,%k7
  0x00007fc348289ea5:   jae    0x00007fc348289ed3
 ;; B26: #	out( B42 B27 ) <- in( B25 )  Freq: 0.899512
  0x00007fc348289ea7:   cmp    %r8d,%r9d
  0x00007fc348289eaa:   jae    0x00007fc34828a0c0
 ;; B27: #	out( B28 ) <- in( B26 )  Freq: 0.899511
  0x00007fc348289eb0:   vmovdqu 0x40(%rsp),%ymm0            ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289eb6:   vmovdqu %ymm0,0x10(%r11,%r9,1)      ;*return {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@56 (line 3413)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B28: #	out( N626 ) <- in( B33 B27 )  Freq: 0.999455
  0x00007fc348289ebd:   vzeroupper 
  0x00007fc348289ec0:   add    $0x70,%rsp
  0x00007fc348289ec4:   pop    %rbp
  0x00007fc348289ec5:   cmp    0x3b8(%r15),%rsp             ;   {poll_return}
  0x00007fc348289ecc:   ja     0x00007fc34828a172
  0x00007fc348289ed2:   retq   
 ;; B29: #	out( B31 B30 ) <- in( B25 )  Freq: 0.0999458
  0x00007fc348289ed3:   test   %r9d,%r9d
  0x00007fc348289ed6:   jl     0x00007fc348289ee5
 ;; B30: #	out( B33 B31 ) <- in( B29 )  Freq: 0.0499729
  0x00007fc348289ed8:   movslq %esi,%r10
  0x00007fc348289edb:   add    $0xffffffffffffffe0,%r10
  0x00007fc348289edf:   nop
  0x00007fc348289ee0:   cmp    %r10,%rbp                    ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289ee3:   jle    0x00007fc348289f37           ;*iconst_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@33 (line 3408)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B31: #	out( B48 B32 ) <- in( B30 B29 )  Freq: 0.0749593
  0x00007fc348289ee5:   rex.W pushq 0x30(%rsp)
  0x00007fc348289eea:   rex.W popq 0x18(%rsp)
  0x00007fc348289eef:   mov    %rax,%rcx
  0x00007fc348289ef2:   mov    %esi,%ebx
  0x00007fc348289ef4:   mov    %r11,0x8(%rsp)
  0x00007fc348289ef9:   mov    %r9d,(%rsp)
  0x00007fc348289efd:   mov    %r9d,%esi
  0x00007fc348289f00:   movabs $0x11f9499c8,%rdx            ;   {oop(a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8})}
  0x00007fc348289f0a:   mov    $0x1,%r8d
  0x00007fc348289f10:   mov    %ebx,%r9d
  0x00007fc348289f13:   mov    %rax,0x10(%rsp)
  0x00007fc348289f18:   vzeroupper 
  0x00007fc348289f1b:   callq  0x00007fc34828a198           ; ImmutableOopMap {[8]=Oop [16]=Oop }
                                                            ;*invokestatic checkMaskFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {static_call}
  0x00007fc348289f20:   nopl   0x3000610(%rax,%rax,1)       ;   {other}
 ;; B32: #	out( B33 ) <- in( B31 )  Freq: 0.0749578
  0x00007fc348289f28:   mov    0x8(%rsp),%r11
  0x00007fc348289f2d:   rex.W pushq 0x18(%rsp)
  0x00007fc348289f32:   rex.W popq 0x30(%rsp)
 ;; B33: #	out( B28 ) <- in( B32 B30 )  Freq: 0.0999443
  0x00007fc348289f37:   vmovdqu 0x40(%rsp),%ymm0
  0x00007fc348289f3d:   mov    0x30(%rsp),%r10              ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289f42:   kmovq  %r10,%k7                     ;*invokestatic fromBitsCoerced {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
  0x00007fc348289f47:   vmovdqu8 %ymm0,0x10(%r11,%rbp,1){%k7};*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289f52:   jmpq   0x00007fc348289ebd
 ;; B34: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
  0x00007fc348289f57:   xor    %r11d,%r11d
  0x00007fc348289f5a:   jmpq   0x00007fc348289bf0           ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
                                                            ; - test::copyMem_base@21 (line 12)
 ;; B35: #	out( N626 ) <- in( B12 )  Freq: 0.000260432
  0x00007fc348289f5f:   mov    $0xffffffe4,%esi
  0x00007fc348289f64:   mov    %r9d,(%rsp)
  0x00007fc348289f68:   mov    %r11,0x8(%rsp)
  0x00007fc348289f6d:   mov    %rbx,0x18(%rsp)
  0x00007fc348289f72:   mov    %ecx,0x4(%rsp)               ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289f76:   nop
  0x00007fc348289f77:   nop
  0x00007fc348289f78:   vzeroupper 
  0x00007fc348289f7b:   callq  0x00007fc34819fb20           ; ImmutableOopMap {[8]=Oop [24]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
                                                            ; - test::copyMem_base@21 (line 12)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fc348289f80:   nopl   0x4000670(%rax,%rax,1)       ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
  0x00007fc348289f88:   movabs $0x7fc34cf214a0,%rdi         ;   {external_word}
  0x00007fc348289f92:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348289f96:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348289f9b:   hlt    
 ;; B36: #	out( B46 B37 ) <- in( B16 )  Freq: 9.99638e-05
  0x00007fc348289f9c:   mov    %r9d,0x14(%rsp)
  0x00007fc348289fa1:   mov    %r8d,0x10(%rsp)
  0x00007fc348289fa6:   mov    %esi,0xc(%rsp)
  0x00007fc348289faa:   mov    %r10d,0x8(%rsp)
  0x00007fc348289faf:   mov    %r11,(%rsp)
  0x00007fc348289fb3:   mov    %rbx,%rbp                    ;*invokedynamic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@34 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
  0x00007fc348289fb6:   movabs $0x800040200,%rsi            ;   {metadata({type array bool})}
  0x00007fc348289fc0:   mov    $0x20,%edx                   ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348289fc5:   nop
  0x00007fc348289fc6:   nop
  0x00007fc348289fc7:   nop
  0x00007fc348289fc8:   vzeroupper 
  0x00007fc348289fcb:   callq  0x00007fc3481c3620           ; ImmutableOopMap {rbp=Oop [0]=Oop }
                                                            ;*invokestatic fromBitsCoerced {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
                                                            ;   {runtime_call _new_array_Java}
  0x00007fc348289fd0:   nopl   0x50006c0(%rax,%rax,1)       ;   {other}
 ;; B37: #	out( B18 ) <- in( B36 )  Freq: 9.99618e-05
  0x00007fc348289fd8:   mov    %rbp,%rbx
  0x00007fc348289fdb:   mov    (%rsp),%r11
  0x00007fc348289fdf:   mov    0x8(%rsp),%r10d
  0x00007fc348289fe4:   mov    0xc(%rsp),%esi
  0x00007fc348289fe8:   mov    0x10(%rsp),%r8d
  0x00007fc348289fed:   mov    0x14(%rsp),%r9d
  0x00007fc348289ff2:   mov    %rax,%rdx
  0x00007fc348289ff5:   jmpq   0x00007fc348289d41
 ;; B38: #	out( B45 B39 ) <- in( B18 )  Freq: 9.99638e-05
  0x00007fc348289ffa:   mov    %rdx,0x18(%rsp)
  0x00007fc348289fff:   mov    %r9d,0x14(%rsp)
  0x00007fc34828a004:   mov    %r8d,0x10(%rsp)
  0x00007fc34828a009:   mov    %esi,0xc(%rsp)
  0x00007fc34828a00d:   mov    %r10d,0x8(%rsp)
  0x00007fc34828a012:   mov    %r11,(%rsp)
  0x00007fc34828a016:   mov    %rbx,%rbp
  0x00007fc34828a019:   movabs $0x8000de750,%rsi            ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {metadata('jdk/incubator/vector/Byte256Vector$Byte256Mask')}
  0x00007fc34828a023:   nop
  0x00007fc34828a024:   vzeroupper 
  0x00007fc34828a027:   callq  0x00007fc3481c3920           ; ImmutableOopMap {rbp=Oop [0]=Oop [24]=Oop }
                                                            ;*invokestatic fromBitsCoerced {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
                                                            ;   {runtime_call _new_instance_Java}
  0x00007fc34828a02c:   nopl   0x600071c(%rax,%rax,1)       ;   {other}
 ;; B39: #	out( B20 ) <- in( B38 )  Freq: 9.99618e-05
  0x00007fc34828a034:   mov    %rbp,%rbx
  0x00007fc34828a037:   mov    (%rsp),%r11
  0x00007fc34828a03b:   mov    0x8(%rsp),%r10d
  0x00007fc34828a040:   mov    0xc(%rsp),%esi
  0x00007fc34828a044:   mov    0x10(%rsp),%r8d
  0x00007fc34828a049:   mov    0x14(%rsp),%r9d
  0x00007fc34828a04e:   mov    0x18(%rsp),%rdx
  0x00007fc34828a053:   jmpq   0x00007fc348289d92           ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
 ;; B40: #	out( N626 ) <- in( B2 B5 )  Freq: 1.999e-06
  0x00007fc34828a058:   mov    $0xffffff8d,%esi
  0x00007fc34828a05d:   mov    %r13,(%rsp)
  0x00007fc34828a061:   mov    %rbx,0x8(%rsp)               ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc34828a066:   nop
  0x00007fc34828a067:   nop
  0x00007fc34828a068:   vzeroupper 
  0x00007fc34828a06b:   callq  0x00007fc34819fb20           ; ImmutableOopMap {[0]=Oop [8]=Oop }
                                                            ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fc34828a070:   nopl   0x7000760(%rax,%rax,1)       ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
  0x00007fc34828a078:   movabs $0x7fc34cf214a0,%rdi         ;   {external_word}
  0x00007fc34828a082:   and    $0xfffffffffffffff0,%rsp
  0x00007fc34828a086:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc34828a08b:   hlt                                 ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
 ;; B41: #	out( N626 ) <- in( B8 B6 B7 )  Freq: 3.01327e-06
  0x00007fc34828a08c:   mov    $0xffffffbe,%esi
  0x00007fc34828a091:   mov    %r11,(%rsp)
  0x00007fc34828a095:   mov    %rbx,0x8(%rsp)               ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc34828a09a:   nop
  0x00007fc34828a09b:   nop
  0x00007fc34828a09c:   vzeroupper 
  0x00007fc34828a09f:   callq  0x00007fc34819fb20           ; ImmutableOopMap {[0]=Oop [8]=Oop }
                                                            ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fc34828a0a4:   nopl   0x8000794(%rax,%rax,1)       ;   {other}
  0x00007fc34828a0ac:   movabs $0x7fc34cf214a0,%rdi         ;   {external_word}
  0x00007fc34828a0b6:   and    $0xfffffffffffffff0,%rsp
  0x00007fc34828a0ba:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc34828a0bf:   hlt    
 ;; B42: #	out( N626 ) <- in( B26 )  Freq: 9.11456e-07
  0x00007fc34828a0c0:   mov    $0xffffffe4,%esi
  0x00007fc34828a0c5:   mov    %r9d,%ebp
  0x00007fc34828a0c8:   mov    %r11,(%rsp)
  0x00007fc34828a0cc:   mov    %r8d,0x8(%rsp)               ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc34828a0d1:   nop
  0x00007fc34828a0d2:   nop
  0x00007fc34828a0d3:   nop
  0x00007fc34828a0d4:   vzeroupper 
  0x00007fc34828a0d7:   callq  0x00007fc34819fb20           ; ImmutableOopMap {[0]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fc34828a0dc:   nopl   0x90007cc(%rax,%rax,1)       ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
  0x00007fc34828a0e4:   movabs $0x7fc34cf214a0,%rdi         ;   {external_word}
  0x00007fc34828a0ee:   and    $0xfffffffffffffff0,%rsp
  0x00007fc34828a0f2:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc34828a0f7:   hlt                                 ;*ifle {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@49 (line 16)
 ;; B43: #	out( N626 ) <- in( B15 )  Freq: 4.99737e-07
  0x00007fc34828a0f8:   mov    $0xffffff45,%esi             ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc34828a0fd:   nop
  0x00007fc34828a0fe:   nop
  0x00007fc34828a0ff:   nop
  0x00007fc34828a100:   vzeroupper 
  0x00007fc34828a103:   callq  0x00007fc34819fb20           ; ImmutableOopMap {}
                                                            ;*ifle {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::copyMem_base@49 (line 16)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fc34828a108:   nopl   0xa0007f8(%rax,%rax,1)       ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
  0x00007fc34828a110:   movabs $0x7fc34cf214a0,%rdi         ;   {external_word}
  0x00007fc34828a11a:   and    $0xfffffffffffffff0,%rsp
  0x00007fc34828a11e:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc34828a123:   hlt                                 ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
 ;; B44: #	out( N626 ) <- in( B4 )  Freq: 1.01328e-06
  0x00007fc34828a124:   mov    $0xffffff76,%esi
  0x00007fc34828a129:   mov    %r11,(%rsp)                  ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc34828a12d:   nop
  0x00007fc34828a12e:   nop
  0x00007fc34828a12f:   nop
  0x00007fc34828a130:   vzeroupper 
  0x00007fc34828a133:   callq  0x00007fc34819fb20           ; ImmutableOopMap {[0]=Oop }
                                                            ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fc34828a138:   nopl   0xb000828(%rax,%rax,1)       ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
  0x00007fc34828a140:   movabs $0x7fc34cf214a0,%rdi         ;   {external_word}
  0x00007fc34828a14a:   and    $0xfffffffffffffff0,%rsp
  0x00007fc34828a14e:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc34828a153:   hlt    
 ;; B45: #	out( B47 ) <- in( B38 )  Freq: 9.99638e-10
  0x00007fc34828a154:   jmp    0x00007fc34828a156
 ;; B46: #	out( B47 ) <- in( B36 )  Freq: 9.99638e-10
 ;; B47: #	out( B50 ) <- in( B46 B45 )  Freq: 1.99928e-09
  0x00007fc34828a156:   mov    %rax,%rsi
  0x00007fc34828a159:   jmp    0x00007fc34828a165           ;*invokestatic checkMaskFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B48: #	out( B50 ) <- in( B31 )  Freq: 7.49593e-07
  0x00007fc34828a15b:   mov    %rax,%rsi
  0x00007fc34828a15e:   nop
  0x00007fc34828a15f:   nop
  0x00007fc34828a160:   jmp    0x00007fc34828a165           ;*invokestatic checkMaskFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
                                                            ; - test::copyMem_base@73 (line 18)
 ;; B49: #	out( B50 ) <- in( B23 )  Freq: 7.49604e-06
  0x00007fc34828a162:   mov    %rax,%rsi                    ;*invokevirtual intoArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@26 (line 13)
 ;; B50: #	out( N626 ) <- in( B49 B48 B47 )  Freq: 8.24764e-06
  0x00007fc34828a165:   vzeroupper 
  0x00007fc34828a168:   add    $0x70,%rsp
  0x00007fc34828a16c:   pop    %rbp
  0x00007fc34828a16d:   jmpq   0x00007fc3481cc4a0           ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call _rethrow_Java}
  0x00007fc34828a172:   movabs $0x7fc348289ec5,%r10         ;   {internal_word}
  0x00007fc34828a17c:   mov    %r10,0x3d0(%r15)
  0x00007fc34828a183:   jmpq   0x00007fc34819e9a0           ;   {runtime_call SafepointBlob}
  0x00007fc34828a188:   callq  Stub::nmethod_entry_barrier  ;   {runtime_call StubRoutines (final stubs)}
  0x00007fc34828a18d:   jmpq   0x00007fc348289baa
  0x00007fc34828a192:   hlt    
  0x00007fc34828a193:   hlt    
  0x00007fc34828a194:   hlt    
  0x00007fc34828a195:   hlt    
  0x00007fc34828a196:   hlt    
  0x00007fc34828a197:   hlt    
[Stub Code]
  0x00007fc34828a198:   movabs $0x7fc2fc7872b8,%rbx         ;   {no_reloc}
  0x00007fc34828a1a2:   jmpq   0x00007fc34824307c           ;   {runtime_call I2C/C2I adapters}
[Exception Handler]
  0x00007fc34828a1a7:   jmpq   0x00007fc3480aa4a0           ;   {runtime_call ExceptionBlob}
[Deopt Handler Code]
  0x00007fc34828a1ac:   callq  0x00007fc34828a1b1
  0x00007fc34828a1b1:   subq   $0x5,(%rsp)
  0x00007fc34828a1b6:   jmpq   0x00007fc34819fe40           ;   {runtime_call DeoptimizationBlob}
  0x00007fc34828a1bb:   hlt    
  0x00007fc34828a1bc:   hlt    
  0x00007fc34828a1bd:   hlt    
  0x00007fc34828a1be:   hlt    
  0x00007fc34828a1bf:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007fc34828a1c0:   0x000000011f949a18 a 'java/lang/Class'{0x000000011f949a18} = 'jdk/incubator/vector/Byte256Vector'
  0x00007fc34828a1c8:   0x000000011f9499c8 a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
  0x00007fc34828a1d0:   0x000000011f949aa8 a 'java/lang/Class'{0x000000011f949aa8} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
  0x00007fc34828a1d8:   0x000000011f0001c0 a 'java/lang/Class'{0x000000011f0001c0} = byte
  0x00007fc34828a1e0:   0x000000011f977080 a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977080}
  0x00007fc34828a1e8:   0x000000011f81fec8 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f81fec8}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007fc34828a1f0:   0x00007fc2fc603650 {method} {0x00007fc2fc603650} 'copyMem_base' '([B[B)V' in 'test'
  0x00007fc34828a1f8:   0x00007fc2fc7852f8 {method} {0x00007fc2fc7852f8} 'intoArray' '([BILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/ByteVector'
  0x00007fc34828a200:   0x0000000800040a00 {type array byte}
  0x00007fc34828a208:   0x00007fc2fc784540 {method} {0x00007fc2fc784540} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
  0x00007fc34828a210:   0x00007fc2fc6d48e8 {method} {0x00007fc2fc6d48e8} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
  0x00007fc34828a218:   0x00007fc2fc1a0cb0 {method} {0x00007fc2fc1a0cb0} 'checkIndex' '(II)I' in 'java/util/Objects'
  0x00007fc34828a220:   0x00007fc2fc6a2e18 {method} {0x00007fc2fc6a2e18} 'fromArray0' '([BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/Byte256Vector'
  0x00007fc34828a228:   0x00007fc2fc785ed8 {method} {0x00007fc2fc785ed8} 'fromArray0Template' '([BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
  0x00007fc34828a230:   0x00007fc2fc7876f8 {method} {0x00007fc2fc7876f8} 'arrayAddress' '([BI)J' in 'jdk/incubator/vector/ByteVector'
  0x00007fc34828a238:   0x00007fc2fc7851b0 {method} {0x00007fc2fc7851b0} 'intoArray' '([BI)V' in 'jdk/incubator/vector/ByteVector'
  0x00007fc34828a240:   0x00007fc2fc681bd8 {method} {0x00007fc2fc681bd8} 'fromLong' '(Ljdk/incubator/vector/VectorSpecies;J)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
  0x00007fc34828a248:   0x0000000800040200 {type array bool}
  0x00007fc34828a250:   0x00000008000de750 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
  0x00007fc34828a258:   0x00007fc2fc784688 {method} {0x00007fc2fc784688} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[BILjdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
  0x00007fc34828a260:   0x00007fc2fc6a2f30 {method} {0x00007fc2fc6a2f30} 'fromArray0' '([BILjdk/incubator/vector/VectorMask;I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/Byte256Vector'
  0x00007fc34828a268:   0x00007fc2fc7860e8 {method} {0x00007fc2fc7860e8} 'fromArray0Template' '(Ljava/lang/Class;[BILjdk/incubator/vector/VectorMask;I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
  0x00007fc34828a270:   0x00007fc2fc6d47b0 {method} {0x00007fc2fc6d47b0} 'indexInRange' '(JJJ)Z' in 'jdk/incubator/vector/VectorIntrinsics'
  0x00007fc34828a278:   0x00007fc2fc6a3550 {method} {0x00007fc2fc6a3550} 'intoArray0' '([BILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/Byte256Vector'
  0x00007fc34828a280:   0x00007fc2fc786c70 {method} {0x00007fc2fc786c70} 'intoArray0Template' '(Ljava/lang/Class;[BILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/ByteVector'
  0x00007fc34828a288:   0x00000008000d9bc0 'jdk/incubator/vector/AbstractSpecies'
  0x00007fc34828a290:   0x00000008000d9fb0 'jdk/incubator/vector/ByteVector$ByteSpecies'
  0x00007fc34828a298:   0x00007fc2fc7e3cf0 {method} {0x00007fc2fc7e3cf0} 'loopBound' '(I)I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007fc34828a2a0:   0x00000008000d97a8 'jdk/incubator/vector/VectorSpecies'
  0x00007fc34828a2a8:   0x00007fc2fc7e1750 {method} {0x00007fc2fc7e1750} 'loopBound' '(I)I' in 'jdk/incubator/vector/VectorSpecies'
  0x00007fc34828a2b0:   0x00007fc2fc7e30d0 {method} {0x00007fc2fc7e30d0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007fc34828a2b8:   0x00007fc2fc7e1558 {method} {0x00007fc2fc7e1558} 'length' '()I' in 'jdk/incubator/vector/VectorSpecies'
  0x00007fc34828a2c0:   0x00000008000dbee0 'jdk/incubator/vector/VectorMask'
  0x00007fc34828a2c8:   0x00007fc2fc6aa5c0 {method} {0x00007fc2fc6aa5c0} 'allTrue' '()Z' in 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
  0x00007fc34828a2d0:   0x00007fc2fc681fe0 {method} {0x00007fc2fc681fe0} 'allTrue' '()Z' in 'jdk/incubator/vector/VectorMask'
  0x00007fc34828a2d8:   0x00007fc2fc7fec78 {method} {0x00007fc2fc7fec78} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
  0x00007fc34828a2e0:   0x00007fc2fc682a10 {method} {0x00007fc2fc682a10} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007fc348289b7f offset=ffffffff bits=0):
PcDesc(pc=0x00007fc348289bb5 offset=35 bits=0):
   test::copyMem_base@2 (line 11)
PcDesc(pc=0x00007fc348289bd3 offset=53 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289c0d offset=8d bits=0):
   test::copyMem_base@2 (line 11)
PcDesc(pc=0x00007fc348289c11 offset=91 bits=0):
   test::copyMem_base@7 (line 11)
PcDesc(pc=0x00007fc348289c40 offset=c0 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289c47 offset=c7 bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fc348289c4e offset=ce bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289c52 offset=d2 bits=1):
   test::copyMem_base@40 (line 11)  reexecute=true
   Locals
    - l0: reg r11 [22],oop
    - l1: reg rbx [6],oop
    - l2: reg r9 [18],int
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fc348289c54 offset=d4 bits=0):
   test::copyMem_base@2 (line 11)
PcDesc(pc=0x00007fc348289c57 offset=d7 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289c69 offset=e9 bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
   test::copyMem_base@21 (line 12)
PcDesc(pc=0x00007fc348289c6c offset=ec bits=0):
   jdk.incubator.vector.ByteVector::arrayAddress@4 (line 3956)
   jdk.incubator.vector.ByteVector::fromArray0Template@20 (line 3732)
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
   test::copyMem_base@21 (line 12)
PcDesc(pc=0x00007fc348289c72 offset=f2 bits=0):
   jdk.incubator.vector.ByteVector::fromArray0Template@32 (line 3730)
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
   test::copyMem_base@21 (line 12)
PcDesc(pc=0x00007fc348289c77 offset=f7 bits=0):
   jdk.incubator.vector.ByteVector::fromArray0Template@27 (line 3732)
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
   test::copyMem_base@21 (line 12)
PcDesc(pc=0x00007fc348289c95 offset=115 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289ca0 offset=120 bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[0]
    - @1: stack[4]
    - @2: nullptr
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
   Locals
    - l0: obj[112]
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
   test::copyMem_base@26 (line 13)
   Locals
    - l0: stack[24],oop
    - l1: stack[16],oop
    - l2: stack[0]
    - l3: empty
    - l4: empty
   Objects
    - 112: jdk.incubator.vector.Byte256Vector stack[32],vector
PcDesc(pc=0x00007fc348289cc4 offset=144 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289cca offset=14a bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fc348289ce4 offset=164 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289ce6 offset=166 bits=0):
   jdk.incubator.vector.VectorMask::fromLong@17 (line 241)
   test::copyMem_base@61 (line 17)
PcDesc(pc=0x00007fc348289d41 offset=1c1 bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fc348289d54 offset=1d4 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289d59 offset=1d9 bits=0):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
   test::copyMem_base@61 (line 17)
PcDesc(pc=0x00007fc348289d76 offset=1f6 bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fc348289dda offset=25a bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289ddd offset=25d bits=0):
   jdk.incubator.vector.ByteVector::fromArray@7 (line 2995)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fc348289df6 offset=276 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289dfb offset=27b bits=0):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
   test::copyMem_base@61 (line 17)
PcDesc(pc=0x00007fc348289e06 offset=286 bits=0):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fc348289e0e offset=28e bits=0):
   jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
   jdk.incubator.vector.ByteVector::fromArray@17 (line 2995)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fc348289e43 offset=2c3 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289e4c offset=2cc bits=0):
   jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
   Locals
    - l0: empty
    - l1: stack[0],oop
    - l2: stack[24]
    - l3: stack[32],oop
    - l4: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[8],oop
    - l1: empty
    - l2: stack[24]
    - l3: empty
    - l4: stack[32],oop
PcDesc(pc=0x00007fc348289e5d offset=2dd bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289e62 offset=2e2 bits=0):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
   test::copyMem_base@61 (line 17)
PcDesc(pc=0x00007fc348289e6d offset=2ed bits=0):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fc348289e90 offset=310 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289e9a offset=31a bits=0):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
   test::copyMem_base@61 (line 17)
PcDesc(pc=0x00007fc348289eb6 offset=336 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289ebd offset=33d bits=0):
   jdk.incubator.vector.ByteVector::intoArray@56 (line 3413)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289ee3 offset=363 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289ee5 offset=365 bits=0):
   jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
   jdk.incubator.vector.ByteVector::intoArray@33 (line 3408)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289f20 offset=3a0 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
   Locals
    - l0: obj[269]
    - l1: stack[8],oop
    - l2: stack[0]
    - l3: stack[16],oop
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 269: jdk.incubator.vector.Byte256Vector stack[64],vector
PcDesc(pc=0x00007fc348289f42 offset=3c2 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289f47 offset=3c7 bits=0):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
   test::copyMem_base@61 (line 17)
PcDesc(pc=0x00007fc348289f52 offset=3d2 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289f5f offset=3df bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
   test::copyMem_base@21 (line 12)
PcDesc(pc=0x00007fc348289f76 offset=3f6 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289f80 offset=400 bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[0]
    - @1: stack[4]
    - @2: nullptr
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
   test::copyMem_base@21 (line 12)
   Locals
    - l0: stack[8],oop
    - l1: stack[24],oop
    - l2: stack[0]
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fc348289f88 offset=408 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289fb6 offset=436 bits=0):
   jdk.incubator.vector.VectorMask::fromLong@34 (line 242)
   test::copyMem_base@61 (line 17)
PcDesc(pc=0x00007fc348289fc5 offset=445 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348289fd0 offset=450 bits=5):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949aa8} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @1: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @2: 32
    - @3: 0
    - @4: stack[48],long
    - @5: 1
    - @6: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
    - @7: a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977080}
   test::copyMem_base@61 (line 17)
   Locals
    - l0: stack[0],oop
    - l1: reg rbp [10],oop
    - l2: stack[20]
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fc34828a023 offset=4a3 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34828a02c offset=4ac bits=5):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949aa8} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @1: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @2: 32
    - @3: 0
    - @4: stack[48],long
    - @5: 1
    - @6: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
    - @7: a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977080}
   test::copyMem_base@61 (line 17)
   Locals
    - l0: stack[0],oop
    - l1: reg rbp [10],oop
    - l2: stack[20]
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fc34828a058 offset=4d8 bits=0):
   test::copyMem_base@2 (line 11)
PcDesc(pc=0x00007fc34828a066 offset=4e6 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34828a070 offset=4f0 bits=0):
   test::copyMem_base@2 (line 11)
   Locals
    - l0: stack[0],oop
    - l1: stack[8],oop
    - l2: reg rbp [10],int
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fc34828a078 offset=4f8 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34828a08c offset=50c bits=0):
   test::copyMem_base@2 (line 11)
PcDesc(pc=0x00007fc34828a09a offset=51a bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34828a0a4 offset=524 bits=0):
   test::copyMem_base@2 (line 11)
   Locals
    - l0: stack[0],oop
    - l1: stack[8],oop
    - l2: reg rbp [10],int
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fc34828a0d1 offset=551 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34828a0dc offset=55c bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: reg rbp [10],int
    - @1: stack[8]
    - @2: nullptr
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
   Locals
    - l0: obj[296]
    - l1: stack[0],oop
    - l2: empty
    - l3: empty
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 296: jdk.incubator.vector.Byte256Vector stack[64],vector
PcDesc(pc=0x00007fc34828a0e4 offset=564 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34828a0f8 offset=578 bits=0):
   test::copyMem_base@49 (line 16)
PcDesc(pc=0x00007fc34828a0fd offset=57d bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34828a108 offset=588 bits=1):
   test::copyMem_base@49 (line 16)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],int
PcDesc(pc=0x00007fc34828a110 offset=590 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34828a124 offset=5a4 bits=0):
   test::copyMem_base@2 (line 11)
PcDesc(pc=0x00007fc34828a12d offset=5ad bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34828a138 offset=5b8 bits=0):
   test::copyMem_base@2 (line 11)
   Locals
    - l0: stack[0],oop
    - l1: nullptr
    - l2: reg rbp [10],int
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fc34828a140 offset=5c0 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34828a15b offset=5db bits=0):
   jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34828a162 offset=5e2 bits=0):
   jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fc34828a165 offset=5e5 bits=0):
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc34828a172 offset=5f2 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34828a1c1 offset=641 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 12 OopMaps

ImmutableOopMap {r11=Oop rbx=Oop } pc offsets: 210 
ImmutableOopMap {[16]=Oop [24]=Oop } pc offsets: 288 
ImmutableOopMap {[0]=Oop [8]=Oop [32]=Oop } pc offsets: 716 
ImmutableOopMap {[8]=Oop [16]=Oop } pc offsets: 928 
ImmutableOopMap {[8]=Oop [24]=Oop } pc offsets: 1024 
ImmutableOopMap {rbp=Oop [0]=Oop } pc offsets: 1104 
ImmutableOopMap {rbp=Oop [0]=Oop [24]=Oop } pc offsets: 1196 
ImmutableOopMap {[0]=Oop [8]=Oop } pc offsets: 1264 1316 
ImmutableOopMap {[0]=Oop } pc offsets: 1372 
ImmutableOopMap {} pc offsets: 1416 
ImmutableOopMap {[0]=Oop } pc offsets: 1464 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007fc348289bb5 offset=35):
   test::copyMem_base@2 (line 11)
ScopeDesc(pc=0x00007fc348289bd3 offset=53):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289bd3 offset=53):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289c0d offset=8d):
   test::copyMem_base@2 (line 11)
ScopeDesc(pc=0x00007fc348289c11 offset=91):
   test::copyMem_base@7 (line 11)
ScopeDesc(pc=0x00007fc348289c40 offset=c0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289c40 offset=c0):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289c47 offset=c7):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fc348289c4e offset=ce):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289c4e offset=ce):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289c52 offset=d2):
   test::copyMem_base@40 (line 11)  reexecute=true
   Locals
    - l0: reg r11 [22],oop
    - l1: reg rbx [6],oop
    - l2: reg r9 [18],int
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fc348289c54 offset=d4):
   test::copyMem_base@2 (line 11)
ScopeDesc(pc=0x00007fc348289c57 offset=d7):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289c57 offset=d7):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289c69 offset=e9):
   java.util.Objects::checkIndex@3 (line 385)
ScopeDesc(pc=0x00007fc348289c69 offset=e9):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
ScopeDesc(pc=0x00007fc348289c69 offset=e9):
   jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
ScopeDesc(pc=0x00007fc348289c69 offset=e9):
   test::copyMem_base@21 (line 12)
ScopeDesc(pc=0x00007fc348289c6c offset=ec):
   jdk.incubator.vector.ByteVector::arrayAddress@4 (line 3956)
ScopeDesc(pc=0x00007fc348289c6c offset=ec):
   jdk.incubator.vector.ByteVector::fromArray0Template@20 (line 3732)
ScopeDesc(pc=0x00007fc348289c6c offset=ec):
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
ScopeDesc(pc=0x00007fc348289c6c offset=ec):
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
ScopeDesc(pc=0x00007fc348289c6c offset=ec):
   test::copyMem_base@21 (line 12)
ScopeDesc(pc=0x00007fc348289c72 offset=f2):
   jdk.incubator.vector.ByteVector::fromArray0Template@32 (line 3730)
ScopeDesc(pc=0x00007fc348289c72 offset=f2):
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
ScopeDesc(pc=0x00007fc348289c72 offset=f2):
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
ScopeDesc(pc=0x00007fc348289c72 offset=f2):
   test::copyMem_base@21 (line 12)
ScopeDesc(pc=0x00007fc348289c77 offset=f7):
   jdk.incubator.vector.ByteVector::fromArray0Template@27 (line 3732)
ScopeDesc(pc=0x00007fc348289c77 offset=f7):
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
ScopeDesc(pc=0x00007fc348289c77 offset=f7):
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
ScopeDesc(pc=0x00007fc348289c77 offset=f7):
   test::copyMem_base@21 (line 12)
ScopeDesc(pc=0x00007fc348289c95 offset=115):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289c95 offset=115):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289ca0 offset=120):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[0]
    - @1: stack[4]
    - @2: nullptr
ScopeDesc(pc=0x00007fc348289ca0 offset=120):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007fc348289ca0 offset=120):
   jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
   Locals
    - l0: obj[112]
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fc348289ca0 offset=120):
   test::copyMem_base@26 (line 13)
   Locals
    - l0: stack[24],oop
    - l1: stack[16],oop
    - l2: stack[0]
    - l3: empty
    - l4: empty
   Objects
    - 112: jdk.incubator.vector.Byte256Vector stack[32],vector
ScopeDesc(pc=0x00007fc348289cc4 offset=144):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289cc4 offset=144):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289cca offset=14a):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fc348289ce4 offset=164):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289ce4 offset=164):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289ce6 offset=166):
   jdk.incubator.vector.VectorMask::fromLong@17 (line 241)
ScopeDesc(pc=0x00007fc348289ce6 offset=166):
   test::copyMem_base@61 (line 17)
ScopeDesc(pc=0x00007fc348289d41 offset=1c1):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fc348289d54 offset=1d4):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289d54 offset=1d4):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289d59 offset=1d9):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
ScopeDesc(pc=0x00007fc348289d59 offset=1d9):
   test::copyMem_base@61 (line 17)
ScopeDesc(pc=0x00007fc348289d76 offset=1f6):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fc348289dda offset=25a):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289dda offset=25a):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289ddd offset=25d):
   jdk.incubator.vector.ByteVector::fromArray@7 (line 2995)
ScopeDesc(pc=0x00007fc348289ddd offset=25d):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fc348289df6 offset=276):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289df6 offset=276):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289dfb offset=27b):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
ScopeDesc(pc=0x00007fc348289dfb offset=27b):
   test::copyMem_base@61 (line 17)
ScopeDesc(pc=0x00007fc348289e06 offset=286):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
ScopeDesc(pc=0x00007fc348289e06 offset=286):
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
ScopeDesc(pc=0x00007fc348289e06 offset=286):
   jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
ScopeDesc(pc=0x00007fc348289e06 offset=286):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fc348289e0e offset=28e):
   jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
ScopeDesc(pc=0x00007fc348289e0e offset=28e):
   jdk.incubator.vector.ByteVector::fromArray@17 (line 2995)
ScopeDesc(pc=0x00007fc348289e0e offset=28e):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fc348289e43 offset=2c3):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289e43 offset=2c3):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289e4c offset=2cc):
   jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
   Locals
    - l0: empty
    - l1: stack[0],oop
    - l2: stack[24]
    - l3: stack[32],oop
    - l4: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
ScopeDesc(pc=0x00007fc348289e4c offset=2cc):
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[8],oop
    - l1: empty
    - l2: stack[24]
    - l3: empty
    - l4: stack[32],oop
ScopeDesc(pc=0x00007fc348289e5d offset=2dd):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289e5d offset=2dd):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289e62 offset=2e2):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
ScopeDesc(pc=0x00007fc348289e62 offset=2e2):
   test::copyMem_base@61 (line 17)
ScopeDesc(pc=0x00007fc348289e6d offset=2ed):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
ScopeDesc(pc=0x00007fc348289e6d offset=2ed):
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
ScopeDesc(pc=0x00007fc348289e6d offset=2ed):
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
ScopeDesc(pc=0x00007fc348289e6d offset=2ed):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fc348289e90 offset=310):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289e90 offset=310):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289e9a offset=31a):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
ScopeDesc(pc=0x00007fc348289e9a offset=31a):
   test::copyMem_base@61 (line 17)
ScopeDesc(pc=0x00007fc348289eb6 offset=336):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289eb6 offset=336):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289ebd offset=33d):
   jdk.incubator.vector.ByteVector::intoArray@56 (line 3413)
ScopeDesc(pc=0x00007fc348289ebd offset=33d):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289ee3 offset=363):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289ee3 offset=363):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289ee5 offset=365):
   jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
ScopeDesc(pc=0x00007fc348289ee5 offset=365):
   jdk.incubator.vector.ByteVector::intoArray@33 (line 3408)
ScopeDesc(pc=0x00007fc348289ee5 offset=365):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289f20 offset=3a0):
   jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
   Locals
    - l0: obj[269]
    - l1: stack[8],oop
    - l2: stack[0]
    - l3: stack[16],oop
    - l4: empty
ScopeDesc(pc=0x00007fc348289f20 offset=3a0):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 269: jdk.incubator.vector.Byte256Vector stack[64],vector
ScopeDesc(pc=0x00007fc348289f42 offset=3c2):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289f42 offset=3c2):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289f47 offset=3c7):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
ScopeDesc(pc=0x00007fc348289f47 offset=3c7):
   test::copyMem_base@61 (line 17)
ScopeDesc(pc=0x00007fc348289f52 offset=3d2):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348289f52 offset=3d2):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348289f52 offset=3d2):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348289f52 offset=3d2):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289f5f offset=3df):
   java.util.Objects::checkIndex@3 (line 385)
ScopeDesc(pc=0x00007fc348289f5f offset=3df):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
ScopeDesc(pc=0x00007fc348289f5f offset=3df):
   jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
ScopeDesc(pc=0x00007fc348289f5f offset=3df):
   test::copyMem_base@21 (line 12)
ScopeDesc(pc=0x00007fc348289f76 offset=3f6):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289f76 offset=3f6):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289f80 offset=400):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[0]
    - @1: stack[4]
    - @2: nullptr
ScopeDesc(pc=0x00007fc348289f80 offset=400):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007fc348289f80 offset=400):
   jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fc348289f80 offset=400):
   test::copyMem_base@21 (line 12)
   Locals
    - l0: stack[8],oop
    - l1: stack[24],oop
    - l2: stack[0]
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fc348289f88 offset=408):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289f88 offset=408):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289fb6 offset=436):
   jdk.incubator.vector.VectorMask::fromLong@34 (line 242)
ScopeDesc(pc=0x00007fc348289fb6 offset=436):
   test::copyMem_base@61 (line 17)
ScopeDesc(pc=0x00007fc348289fc5 offset=445):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc348289fc5 offset=445):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348289fd0 offset=450):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949aa8} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @1: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @2: 32
    - @3: 0
    - @4: stack[48],long
    - @5: 1
    - @6: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
    - @7: a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977080}
ScopeDesc(pc=0x00007fc348289fd0 offset=450):
   test::copyMem_base@61 (line 17)
   Locals
    - l0: stack[0],oop
    - l1: reg rbp [10],oop
    - l2: stack[20]
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fc34828a023 offset=4a3):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc34828a023 offset=4a3):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc34828a02c offset=4ac):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949aa8} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @1: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @2: 32
    - @3: 0
    - @4: stack[48],long
    - @5: 1
    - @6: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
    - @7: a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977080}
ScopeDesc(pc=0x00007fc34828a02c offset=4ac):
   test::copyMem_base@61 (line 17)
   Locals
    - l0: stack[0],oop
    - l1: reg rbp [10],oop
    - l2: stack[20]
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fc34828a058 offset=4d8):
   test::copyMem_base@2 (line 11)
ScopeDesc(pc=0x00007fc34828a066 offset=4e6):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc34828a066 offset=4e6):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc34828a070 offset=4f0):
   test::copyMem_base@2 (line 11)
   Locals
    - l0: stack[0],oop
    - l1: stack[8],oop
    - l2: reg rbp [10],int
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fc34828a078 offset=4f8):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc34828a078 offset=4f8):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc34828a08c offset=50c):
   test::copyMem_base@2 (line 11)
ScopeDesc(pc=0x00007fc34828a09a offset=51a):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc34828a09a offset=51a):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc34828a0a4 offset=524):
   test::copyMem_base@2 (line 11)
   Locals
    - l0: stack[0],oop
    - l1: stack[8],oop
    - l2: reg rbp [10],int
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fc34828a0d1 offset=551):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc34828a0d1 offset=551):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc34828a0dc offset=55c):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: reg rbp [10],int
    - @1: stack[8]
    - @2: nullptr
ScopeDesc(pc=0x00007fc34828a0dc offset=55c):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007fc34828a0dc offset=55c):
   jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
   Locals
    - l0: obj[296]
    - l1: stack[0],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fc34828a0dc offset=55c):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fc34828a0dc offset=55c):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 296: jdk.incubator.vector.Byte256Vector stack[64],vector
ScopeDesc(pc=0x00007fc34828a0e4 offset=564):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc34828a0e4 offset=564):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc34828a0f8 offset=578):
   test::copyMem_base@49 (line 16)
ScopeDesc(pc=0x00007fc34828a0fd offset=57d):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc34828a0fd offset=57d):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc34828a108 offset=588):
   test::copyMem_base@49 (line 16)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x00007fc34828a110 offset=590):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc34828a110 offset=590):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc34828a124 offset=5a4):
   test::copyMem_base@2 (line 11)
ScopeDesc(pc=0x00007fc34828a12d offset=5ad):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc34828a12d offset=5ad):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc34828a138 offset=5b8):
   test::copyMem_base@2 (line 11)
   Locals
    - l0: stack[0],oop
    - l1: nullptr
    - l2: reg rbp [10],int
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fc34828a140 offset=5c0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc34828a140 offset=5c0):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc34828a15b offset=5db):
   jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
ScopeDesc(pc=0x00007fc34828a15b offset=5db):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc34828a162 offset=5e2):
   jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
ScopeDesc(pc=0x00007fc34828a162 offset=5e2):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fc34828a165 offset=5e5):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc34828a172 offset=5f2):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fc34828a172 offset=5f2):
   test::copyMem_base@80 (line 19)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007fc348289a80: 3200
relocInfo@0x00007fc348289a80 [type=6(runtime_call) addr=0x00007fc348289b80 offset=0 format=1] | [destination=0x00007fc34c80dd50]
         @0x00007fc348289a82: 8048
relocInfo@0x00007fc348289a82 [type=16(post_call_nop) addr=0x00007fc348289bc8 offset=72]
         @0x00007fc348289a84: 78036618
relocInfo@0x00007fc348289a86 [type=12(metadata) addr=0x00007fc348289be0 offset=24 format=3 data=3] | [metadata_addr=0x00007fc34828a200 *=0x0000000800040a00 offset=0]metadata_value=0x0000000800040a00: {type array byte}
         @0x00007fc348289a88: 78036620
relocInfo@0x00007fc348289a8a [type=12(metadata) addr=0x00007fc348289c00 offset=32 format=3 data=3] | [metadata_addr=0x00007fc34828a200 *=0x0000000800040a00 offset=0]metadata_value=0x0000000800040a00: {type array byte}
         @0x00007fc348289a8c: 5052
relocInfo@0x00007fc348289a8c [type=10(poll) addr=0x00007fc348289c52 offset=82]
         @0x00007fc348289a8e: 3249
relocInfo@0x00007fc348289a8e [type=6(runtime_call) addr=0x00007fc348289c9b offset=73 format=1] | [destination=0x00007fc34819fb20]
         @0x00007fc348289a90: 8005
relocInfo@0x00007fc348289a90 [type=16(post_call_nop) addr=0x00007fc348289ca0 offset=5]
         @0x00007fc348289a92: 7c034cf214a07fc33808
relocInfo@0x00007fc348289a9a [type=7(external_word) addr=0x00007fc348289ca8 offset=8 data={4cf214a07fc3}] | [target=0x00007fc34cf214a0]
         @0x00007fc348289a9c: 320e
relocInfo@0x00007fc348289a9c [type=6(runtime_call) addr=0x00007fc348289cb6 offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348289a9e: 780c665e
relocInfo@0x00007fc348289aa0 [type=12(metadata) addr=0x00007fc348289d14 offset=94 format=3 data=12] | [metadata_addr=0x00007fc34828a248 *=0x0000000800040200 offset=0]metadata_value=0x0000000800040200: {type array bool}
         @0x00007fc348289aa2: 780d6677
relocInfo@0x00007fc348289aa4 [type=12(metadata) addr=0x00007fc348289d8b offset=119 format=3 data=13] | [metadata_addr=0x00007fc34828a250 *=0x00000008000de750 offset=0]metadata_value=0x00000008000de750: 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
         @0x00007fc348289aa6: 7c034d3cffb07fc33a07
relocInfo@0x00007fc348289aae [type=7(external_word) addr=0x00007fc348289d92 offset=7 format=1 data={4d3cffb07fc3}] | [target=0x00007fc34d3cffb0]
         @0x00007fc348289ab0: 7c034cfa4df87fc3380d
relocInfo@0x00007fc348289ab8 [type=7(external_word) addr=0x00007fc348289d9f offset=13 data={4cfa4df87fc3}] | [target=0x00007fc34cfa4df8]
         @0x00007fc348289aba: 320e
relocInfo@0x00007fc348289aba [type=6(runtime_call) addr=0x00007fc348289dad offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348289abc: 7c034cfa4e387fc3380f
relocInfo@0x00007fc348289ac4 [type=7(external_word) addr=0x00007fc348289dbc offset=15 data={4cfa4e387fc3}] | [target=0x00007fc34cfa4e38]
         @0x00007fc348289ac6: 320e
relocInfo@0x00007fc348289ac6 [type=6(runtime_call) addr=0x00007fc348289dca offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348289ac8: 0863
relocInfo@0x00007fc348289ac8 [type=1(oop) addr=0x00007fc348289e2d offset=99] | [oop_addr=0x00007fc348289e2f *=0x000000011f9499c8 offset=0]
         @0x00007fc348289aca: 221a
relocInfo@0x00007fc348289aca [type=4(static_call) addr=0x00007fc348289e47 offset=26 format=1] | [destination=0x00007fc34828a198 metadata=0x0000000000000000]
         @0x00007fc348289acc: 8005
relocInfo@0x00007fc348289acc [type=16(post_call_nop) addr=0x00007fc348289e4c offset=5]
         @0x00007fc348289ace: 5879
relocInfo@0x00007fc348289ace [type=11(poll_return) addr=0x00007fc348289ec5 offset=121]
         @0x00007fc348289ad0: 083b
relocInfo@0x00007fc348289ad0 [type=1(oop) addr=0x00007fc348289f00 offset=59] | [oop_addr=0x00007fc348289f02 *=0x000000011f9499c8 offset=0]
         @0x00007fc348289ad2: 221b
relocInfo@0x00007fc348289ad2 [type=4(static_call) addr=0x00007fc348289f1b offset=27 format=1] | [destination=0x00007fc34828a198 metadata=0x0000000000000000]
         @0x00007fc348289ad4: 8005
relocInfo@0x00007fc348289ad4 [type=16(post_call_nop) addr=0x00007fc348289f20 offset=5]
         @0x00007fc348289ad6: 325b
relocInfo@0x00007fc348289ad6 [type=6(runtime_call) addr=0x00007fc348289f7b offset=91 format=1] | [destination=0x00007fc34819fb20]
         @0x00007fc348289ad8: 8005
relocInfo@0x00007fc348289ad8 [type=16(post_call_nop) addr=0x00007fc348289f80 offset=5]
         @0x00007fc348289ada: 7c034cf214a07fc33808
relocInfo@0x00007fc348289ae2 [type=7(external_word) addr=0x00007fc348289f88 offset=8 data={4cf214a07fc3}] | [target=0x00007fc34cf214a0]
         @0x00007fc348289ae4: 320e
relocInfo@0x00007fc348289ae4 [type=6(runtime_call) addr=0x00007fc348289f96 offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348289ae6: 6020
relocInfo@0x00007fc348289ae6 [type=12(metadata) addr=0x00007fc348289fb6 offset=32] | [metadata_addr=0x00007fc348289fb8 *=0x0000000800040200 offset=0]metadata_value=0x0000000800040200: {type array bool}
         @0x00007fc348289ae8: 3215
relocInfo@0x00007fc348289ae8 [type=6(runtime_call) addr=0x00007fc348289fcb offset=21 format=1] | [destination=0x00007fc3481c3620]
         @0x00007fc348289aea: 8005
relocInfo@0x00007fc348289aea [type=16(post_call_nop) addr=0x00007fc348289fd0 offset=5]
         @0x00007fc348289aec: 6049
relocInfo@0x00007fc348289aec [type=12(metadata) addr=0x00007fc34828a019 offset=73] | [metadata_addr=0x00007fc34828a01b *=0x00000008000de750 offset=0]metadata_value=0x00000008000de750: 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
         @0x00007fc348289aee: 320e
relocInfo@0x00007fc348289aee [type=6(runtime_call) addr=0x00007fc34828a027 offset=14 format=1] | [destination=0x00007fc3481c3920]
         @0x00007fc348289af0: 8005
relocInfo@0x00007fc348289af0 [type=16(post_call_nop) addr=0x00007fc34828a02c offset=5]
         @0x00007fc348289af2: 323f
relocInfo@0x00007fc348289af2 [type=6(runtime_call) addr=0x00007fc34828a06b offset=63 format=1] | [destination=0x00007fc34819fb20]
         @0x00007fc348289af4: 8005
relocInfo@0x00007fc348289af4 [type=16(post_call_nop) addr=0x00007fc34828a070 offset=5]
         @0x00007fc348289af6: 7c034cf214a07fc33808
relocInfo@0x00007fc348289afe [type=7(external_word) addr=0x00007fc34828a078 offset=8 data={4cf214a07fc3}] | [target=0x00007fc34cf214a0]
         @0x00007fc348289b00: 320e
relocInfo@0x00007fc348289b00 [type=6(runtime_call) addr=0x00007fc34828a086 offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348289b02: 3219
relocInfo@0x00007fc348289b02 [type=6(runtime_call) addr=0x00007fc34828a09f offset=25 format=1] | [destination=0x00007fc34819fb20]
         @0x00007fc348289b04: 8005
relocInfo@0x00007fc348289b04 [type=16(post_call_nop) addr=0x00007fc34828a0a4 offset=5]
         @0x00007fc348289b06: 7c034cf214a07fc33808
relocInfo@0x00007fc348289b0e [type=7(external_word) addr=0x00007fc34828a0ac offset=8 data={4cf214a07fc3}] | [target=0x00007fc34cf214a0]
         @0x00007fc348289b10: 320e
relocInfo@0x00007fc348289b10 [type=6(runtime_call) addr=0x00007fc34828a0ba offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348289b12: 321d
relocInfo@0x00007fc348289b12 [type=6(runtime_call) addr=0x00007fc34828a0d7 offset=29 format=1] | [destination=0x00007fc34819fb20]
         @0x00007fc348289b14: 8005
relocInfo@0x00007fc348289b14 [type=16(post_call_nop) addr=0x00007fc34828a0dc offset=5]
         @0x00007fc348289b16: 7c034cf214a07fc33808
relocInfo@0x00007fc348289b1e [type=7(external_word) addr=0x00007fc34828a0e4 offset=8 data={4cf214a07fc3}] | [target=0x00007fc34cf214a0]
         @0x00007fc348289b20: 320e
relocInfo@0x00007fc348289b20 [type=6(runtime_call) addr=0x00007fc34828a0f2 offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348289b22: 3211
relocInfo@0x00007fc348289b22 [type=6(runtime_call) addr=0x00007fc34828a103 offset=17 format=1] | [destination=0x00007fc34819fb20]
         @0x00007fc348289b24: 8005
relocInfo@0x00007fc348289b24 [type=16(post_call_nop) addr=0x00007fc34828a108 offset=5]
         @0x00007fc348289b26: 7c034cf214a07fc33808
relocInfo@0x00007fc348289b2e [type=7(external_word) addr=0x00007fc34828a110 offset=8 data={4cf214a07fc3}] | [target=0x00007fc34cf214a0]
         @0x00007fc348289b30: 320e
relocInfo@0x00007fc348289b30 [type=6(runtime_call) addr=0x00007fc34828a11e offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348289b32: 3215
relocInfo@0x00007fc348289b32 [type=6(runtime_call) addr=0x00007fc34828a133 offset=21 format=1] | [destination=0x00007fc34819fb20]
         @0x00007fc348289b34: 8005
relocInfo@0x00007fc348289b34 [type=16(post_call_nop) addr=0x00007fc34828a138 offset=5]
         @0x00007fc348289b36: 7c034cf214a07fc33808
relocInfo@0x00007fc348289b3e [type=7(external_word) addr=0x00007fc34828a140 offset=8 data={4cf214a07fc3}] | [target=0x00007fc34cf214a0]
         @0x00007fc348289b40: 320e
relocInfo@0x00007fc348289b40 [type=6(runtime_call) addr=0x00007fc34828a14e offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348289b42: 321f
relocInfo@0x00007fc348289b42 [type=6(runtime_call) addr=0x00007fc34828a16d offset=31 format=1] | [destination=0x00007fc3481cc4a0]
         @0x00007fc348289b44: 7aad4005
relocInfo@0x00007fc348289b46 [type=8(internal_word) addr=0x00007fc34828a172 offset=5 data=685] | [target=0x00007fc348289ec5]
         @0x00007fc348289b48: 3211
relocInfo@0x00007fc348289b48 [type=6(runtime_call) addr=0x00007fc34828a183 offset=17 format=1] | [destination=0x00007fc34819e9a0]
         @0x00007fc348289b4a: 3205
relocInfo@0x00007fc348289b4a [type=6(runtime_call) addr=0x00007fc34828a188 offset=5 format=1] | [destination=0x00007fc3480e9d00]
         @0x00007fc348289b4c: 0010
relocInfo@0x00007fc348289b4c [type=0(none) addr=0x00007fc34828a198 offset=16]
         @0x00007fc348289b4e: 7c01fd392800
relocInfo@0x00007fc348289b52 [type=5(static_stub) addr=0x00007fc34828a198 offset=0 data=-711] | [static_call=0x00007fc348289e47]
         @0x00007fc348289b54: 7c01fc652800
relocInfo@0x00007fc348289b58 [type=5(static_stub) addr=0x00007fc34828a198 offset=0 data=-923] | [static_call=0x00007fc348289f1b]
         @0x00007fc348289b5a: 6000
relocInfo@0x00007fc348289b5a [type=12(metadata) addr=0x00007fc34828a198 offset=0] | [metadata_addr=0x00007fc34828a19a *=0x00007fc2fc7872b8 offset=0]metadata_value=0x00007fc2fc7872b8: {method} {0x00007fc2fc7872b8} 'checkMaskFromIndexSize' '(ILjdk/incubator/vector/ByteVector$ByteSpecies;Ljdk/incubator/vector/VectorMask;II)V' in 'jdk/incubator/vector/ByteVector'
         @0x00007fc348289b5c: 320a
relocInfo@0x00007fc348289b5c [type=6(runtime_call) addr=0x00007fc34828a1a2 offset=10 format=1] | [destination=0x00007fc34824307c]
         @0x00007fc348289b5e: 3205
relocInfo@0x00007fc348289b5e [type=6(runtime_call) addr=0x00007fc34828a1a7 offset=5 format=1] | [destination=0x00007fc3480aa4a0]
         @0x00007fc348289b60: 320f
relocInfo@0x00007fc348289b60 [type=6(runtime_call) addr=0x00007fc34828a1b6 offset=15 format=1] | [destination=0x00007fc34819fe40]
         @0x00007fc348289b62: 0000
relocInfo@0x00007fc348289b62 [type=0(none) addr=0x00007fc34828a1b6 offset=0]
         @0x00007fc348289b64: 0000
relocInfo@0x00007fc348289b64 [type=0(none) addr=0x00007fc34828a1b6 offset=0]
         @0x00007fc348289b66: 0000
relocInfo@0x00007fc348289b66 [type=0(none) addr=0x00007fc34828a1b6 offset=0]
         @0x00007fc348289b68: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type abstract_with_unique_concrete_subtype
  context = *jdk.incubator.vector.AbstractSpecies
  class   = jdk.incubator.vector.ByteVector$ByteSpecies
   [nmethod<=klass]jdk.incubator.vector.AbstractSpecies
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.ByteVector$ByteSpecies
  method  = {method} {0x00007fc2fc7e3cf0} 'loopBound' '(I)I' in 'jdk/incubator/vector/AbstractSpecies'
  class   = jdk.incubator.vector.VectorSpecies
  method  = *{method} {0x00007fc2fc7e1750} 'loopBound' '(I)I' in 'jdk/incubator/vector/VectorSpecies'
   [nmethod<=klass]jdk.incubator.vector.ByteVector$ByteSpecies
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.ByteVector$ByteSpecies
  method  = {method} {0x00007fc2fc7e30d0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  class   = jdk.incubator.vector.VectorSpecies
  method  = *{method} {0x00007fc2fc7e1558} 'length' '()I' in 'jdk/incubator/vector/VectorSpecies'
   [nmethod<=klass]jdk.incubator.vector.ByteVector$ByteSpecies
Dependency of type unique_concrete_method_4
  context = *jdk.incubator.vector.VectorMask
  method  = {method} {0x00007fc2fc6aa5c0} 'allTrue' '()Z' in 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
  class   = jdk.incubator.vector.VectorMask
  method  = *{method} {0x00007fc2fc681fe0} 'allTrue' '()Z' in 'jdk/incubator/vector/VectorMask'
   [nmethod<=klass]jdk.incubator.vector.VectorMask
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.Byte256Vector$Byte256Mask
  method  = {method} {0x00007fc2fc7fec78} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
  class   = jdk.incubator.vector.VectorMask
  method  = *{method} {0x00007fc2fc682a10} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
   [nmethod<=klass]jdk.incubator.vector.Byte256Vector$Byte256Mask
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 96 bytes)
catch_pco = 716 (pc=0x00007fc348289e4c, 1 entries)
  bci -1 at scope depth 0 -> pco 1506 (pc=0x00007fc34828a162)
catch_pco = 928 (pc=0x00007fc348289f20, 1 entries)
  bci -1 at scope depth 0 -> pco 1499 (pc=0x00007fc34828a15b)
catch_pco = 1104 (pc=0x00007fc348289fd0, 1 entries)
  bci -1 at scope depth 0 -> pco 1494 (pc=0x00007fc34828a156)
catch_pco = 1196 (pc=0x00007fc34828a02c, 1 entries)
  bci -1 at scope depth 0 -> pco 1492 (pc=0x00007fc34828a154)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 2 entries, 20 bytes):
{
   < 0x00007fc348289bf0, 0x00007fc34828a124 > < 0x00007fc348289c20, 0x00007fc34828a08c > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 nullptr-oop
#1: 0x000000011f949a18 a 'java/lang/Class'{0x000000011f949a18} = 'jdk/incubator/vector/Byte256Vector'
#2: 0x000000011f9499c8 a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
#3: 0x000000011f949aa8 a 'java/lang/Class'{0x000000011f949aa8} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
#4: 0x000000011f0001c0 a 'java/lang/Class'{0x000000011f0001c0} = byte
#5: 0x000000011f977080 a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977080}
#6: 0x000000011f81fec8 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f81fec8}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
# 0: 0x0000000000000000 nullptr-oop
# 1: 0x00007fc2fc603650 {method} {0x00007fc2fc603650} 'copyMem_base' '([B[B)V' in 'test'
# 2: 0x00007fc2fc7852f8 {method} {0x00007fc2fc7852f8} 'intoArray' '([BILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/ByteVector'
# 3: 0x0000000800040a00 {type array byte}
# 4: 0x00007fc2fc784540 {method} {0x00007fc2fc784540} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
# 5: 0x00007fc2fc6d48e8 {method} {0x00007fc2fc6d48e8} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
# 6: 0x00007fc2fc1a0cb0 {method} {0x00007fc2fc1a0cb0} 'checkIndex' '(II)I' in 'java/util/Objects'
# 7: 0x00007fc2fc6a2e18 {method} {0x00007fc2fc6a2e18} 'fromArray0' '([BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/Byte256Vector'
# 8: 0x00007fc2fc785ed8 {method} {0x00007fc2fc785ed8} 'fromArray0Template' '([BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
# 9: 0x00007fc2fc7876f8 {method} {0x00007fc2fc7876f8} 'arrayAddress' '([BI)J' in 'jdk/incubator/vector/ByteVector'
#10: 0x00007fc2fc7851b0 {method} {0x00007fc2fc7851b0} 'intoArray' '([BI)V' in 'jdk/incubator/vector/ByteVector'
#11: 0x00007fc2fc681bd8 {method} {0x00007fc2fc681bd8} 'fromLong' '(Ljdk/incubator/vector/VectorSpecies;J)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
#12: 0x0000000800040200 {type array bool}
#13: 0x00000008000de750 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
#14: 0x00007fc2fc784688 {method} {0x00007fc2fc784688} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[BILjdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
#15: 0x00007fc2fc6a2f30 {method} {0x00007fc2fc6a2f30} 'fromArray0' '([BILjdk/incubator/vector/VectorMask;I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/Byte256Vector'
#16: 0x00007fc2fc7860e8 {method} {0x00007fc2fc7860e8} 'fromArray0Template' '(Ljava/lang/Class;[BILjdk/incubator/vector/VectorMask;I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
#17: 0x00007fc2fc6d47b0 {method} {0x00007fc2fc6d47b0} 'indexInRange' '(JJJ)Z' in 'jdk/incubator/vector/VectorIntrinsics'
#18: 0x00007fc2fc6a3550 {method} {0x00007fc2fc6a3550} 'intoArray0' '([BILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/Byte256Vector'
#19: 0x00007fc2fc786c70 {method} {0x00007fc2fc786c70} 'intoArray0Template' '(Ljava/lang/Class;[BILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/ByteVector'
#20: 0x00000008000d9bc0 'jdk/incubator/vector/AbstractSpecies'
#21: 0x00000008000d9fb0 'jdk/incubator/vector/ByteVector$ByteSpecies'
#22: 0x00007fc2fc7e3cf0 {method} {0x00007fc2fc7e3cf0} 'loopBound' '(I)I' in 'jdk/incubator/vector/AbstractSpecies'
#23: 0x00000008000d97a8 'jdk/incubator/vector/VectorSpecies'
#24: 0x00007fc2fc7e1750 {method} {0x00007fc2fc7e1750} 'loopBound' '(I)I' in 'jdk/incubator/vector/VectorSpecies'
#25: 0x00007fc2fc7e30d0 {method} {0x00007fc2fc7e30d0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
#26: 0x00007fc2fc7e1558 {method} {0x00007fc2fc7e1558} 'length' '()I' in 'jdk/incubator/vector/VectorSpecies'
#27: 0x00000008000dbee0 'jdk/incubator/vector/VectorMask'
#28: 0x00007fc2fc6aa5c0 {method} {0x00007fc2fc6aa5c0} 'allTrue' '()Z' in 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
#29: 0x00007fc2fc681fe0 {method} {0x00007fc2fc681fe0} 'allTrue' '()Z' in 'jdk/incubator/vector/VectorMask'
#30: 0x00007fc2fc7fec78 {method} {0x00007fc2fc7fec78} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
#31: 0x00007fc2fc682a10 {method} {0x00007fc2fc682a10} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

============================= C2-compiled nmethod ==============================
#r018 rsi:rsi   : parm 0: byte[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
#r016 rdx:rdx   : parm 1: byte[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
# -- Old rsp -- Framesize: 112 --
#r591 rsp+108: in_preserve
#r590 rsp+104: return address
#r589 rsp+100: in_preserve
#r588 rsp+96: saved fp register
#r587 rsp+92: pad2, stack alignment
#r586 rsp+88: pad2, stack alignment
#r585 rsp+84: Fixed slot 1
#r584 rsp+80: Fixed slot 0
#r611 rsp+76: spill
#r610 rsp+72: spill
#r609 rsp+68: spill
#r608 rsp+64: spill
#r607 rsp+60: spill
#r606 rsp+56: spill
#r605 rsp+52: spill
#r604 rsp+48: spill
#r603 rsp+44: spill
#r602 rsp+40: spill
#r601 rsp+36: spill
#r600 rsp+32: spill
#r599 rsp+28: spill
#r598 rsp+24: spill
#r597 rsp+20: spill
#r596 rsp+16: spill
#r595 rsp+12: spill
#r594 rsp+ 8: spill
#r593 rsp+ 4: spill
#r592 rsp+ 0: spill
#
----------------------- MetaData before Compile_id = 309 ------------------------
{method}
 - this oop:          0x00007fc2fc603650
 - method holder:     'test'
 - constants:         0x00007fc2fc603080 constant pool [114]/operands[5] {0x00007fc2fc603080} for 'test' cache=0x00007fc2fc603980
 - access:            0x9  public static 
 - flags:             0x6080   queued_for_compilation  has_loops_flag  has_loops_flag_init 
 - name:              'copyMem_base'
 - signature:         '([B[B)V'
 - max stack:         5
 - max locals:        5
 - size of params:    2
 - method size:       14
 - vtable index:      -2
 - i2i entry:         0x00007fc34808b740
 - adapters:          AHE@0x00007fc34438fe10: 0xbb i2c: 0x00007fc3480e0a00 c2i: 0x00007fc3480e0af1 c2iUV: 0x00007fc3480e0abf c2iNCI: 0x00007fc3480e0b2b
 - compiled entry     0x00007fc3480e0af1
 - code size:         84
 - code start:        0x00007fc2fc6035e8
 - code end (excl):   0x00007fc2fc60363c
 - method data:       0x00007fc2fc603c90
 - checked ex length: 0
 - linenumber start:  0x00007fc2fc60363c
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 309 -----------------------
#
#  void ( byte[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *, byte[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact * )
#
000     N1: #	out( B1 ) <- in( B76 B60 B74 B62 B77 B70 B84 B69 B78 B47 B75 B65 B68 B71 B72 B66 B67 B73 )  Freq: 1

000     B1: #	out( B76 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (624 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

01a     movq    RDI, RDX	# spill
        nop 	# 3 bytes pad for loops and calls
020     movl    R14, [RDX + #12 (8-bit)]	# range
024     NullCheck RDX

024     B2: #	out( B54 B3 ) <- in( B1 )  Freq: 0.999999
024     movslq  R10, R14	# i2l
027     movdq   XMM1, R10	# spill
02c     movl    RAX, R14	# spill
02f     andl    RAX, #-32	# int
032     xorl    R10, R10	# int
035     testl   RAX, RAX
037     jle     B54  P=0.003899 C=153629.000000

03d     B3: #	out( B64 B4 ) <- in( B2 )  Freq: 0.9961
03d     leal    R8, [R14 + #-31]
041     testl   R8, R8
044     jl     B64  P=0.000001 C=-1.000000

04a     B4: #	out( B59 B5 ) <- in( B3 )  Freq: 0.996099
04a     cmpl    R14, #31
04e     je     B59  P=0.000001 C=-1.000000

054     B5: #	out( B61 B6 ) <- in( B4 )  Freq: 0.996098
054     movdq   R11, XMM1	# spill
059     addq    R11, #-31	# long
05d     movslq  R9, RAX	# i2l
060     leaq    RCX, [R9 + #31]
064     andq    RCX, #-32	# long
068     movl    RCX, RCX	# l2i
06a     movslq  RDX, RCX	# i2l
06d     addq    RDX, #-32	# long
071     cmpq    RDX, R11	# unsigned
074     jae,u   B61  P=0.000001 C=-1.000000

07a     B6: #	out( B60 B7 ) <- in( B5 )  Freq: 0.996097
07a     movq    RBX, RSI	# spill
        nop 	# 3 bytes pad for loops and calls
080     movl    RCX, [RSI + #12 (8-bit)]	# range
083     NullCheck RSI

083     B7: #	out( B60 B8 ) <- in( B6 )  Freq: 0.996096
083     leal    R11, [RCX + #-31]
087     testl   R11, R11
08a     jl     B60  P=0.000001 C=-1.000000

090     B8: #	out( B60 B9 ) <- in( B7 )  Freq: 0.996095
090     cmpl    RCX, #31
093     je     B60  P=0.000001 C=-1.000000

099     B9: #	out( B60 B10 ) <- in( B8 )  Freq: 0.996094
099     movslq  RCX, RCX	# i2l
09c     addq    RCX, #-31	# long
0a0     cmpq    RDX, RCX	# unsigned
0a3     jae,u   B60  P=0.000001 C=-1.000000

0a9     B10: #	out( B62 B11 ) <- in( B9 )  Freq: 0.996093
0a9     cmpl    RAX, #2147483616
0ae     jg     B62  P=0.000001 C=-1.000000

0b4     B11: #	out( B63 B12 ) <- in( B10 )  Freq: 0.996092
0b4     load_vector XMM0,[RDI + #16 (8-bit)]
0b9     store_vector [RSI + #16 (8-bit)],XMM0
	
0be     addq    R9, #-480	# long
0c5     movq    RCX, #-2147483648	# long (32-bit)
0cc     cmpq    R9, #-2147483648
0d3     cmovql R9, RCX	# signed, long
0d7     movl    RCX, R9	# l2i
        nop 	# 6 bytes pad for loops and calls
0e0     cmpl    RCX, #32
0e3     jle     B63  P=0.000001 C=-1.000000

0e9     B12: #	out( B65 B13 ) <- in( B11 )  Freq: 0.996091
0e9     cmpl    R11, #32	# unsigned
0ed     jbe,u   B65  P=0.000001 C=-1.000000

0f3     B13: #	out( B66 B14 ) <- in( B12 )  Freq: 0.99609
0f3     cmpl    R8, #32	# unsigned
0f7     jbe,u   B66  P=0.000001 C=-1.000000

0fd     B14: #	out( B67 B15 ) <- in( B13 )  Freq: 0.996089
        nop 	# 3 bytes pad for loops and calls
100     cmpl    R8, #512	# unsigned
107     jbe,u   B67  P=0.000001 C=-1.000000

10d     B15: #	out( B68 B16 ) <- in( B14 )  Freq: 0.996088
10d     cmpl    R11, #512	# unsigned
114     jbe,u   B68  P=0.000001 C=-1.000000

11a     B16: #	out( B21 ) <- in( B15 )  Freq: 0.996087
11a     movl    R9, #512000	# int
120     movl    RDX, #32	# int
125     jmp     B21
        nop 	# 6 bytes pad for loops and calls

130     B17: #	out( B18 ) <- in( B18 ) top-of-loop Freq: 65267.8
130     movl    RDX, RSI	# spill

132     B18: #	out( B17 B19 ) <- in( B21 B17 ) Loop( B18-B17 inner main of N125 strip mined) Freq: 65523.3
132     movslq  RSI, RDX	# i2l
135     load_vector XMM2,[RDI + #16 + RSI]
13b     store_vector [RBX + #16 + RSI],XMM2
	
141     load_vector XMM2,[RDI + #48 + RSI]
147     store_vector [RBX + #48 + RSI],XMM2
	
14d     load_vector XMM2,[RDI + #80 + RSI]
153     store_vector [RBX + #80 + RSI],XMM2
	
159     load_vector XMM2,[RDI + #112 + RSI]
15f     store_vector [RBX + #112 + RSI],XMM2
	
165     load_vector XMM2,[RDI + #144 + RSI]
16e     store_vector [RBX + #144 + RSI],XMM2
	
177     load_vector XMM2,[RDI + #176 + RSI]
180     store_vector [RBX + #176 + RSI],XMM2
	
189     load_vector XMM2,[RDI + #208 + RSI]
192     store_vector [RBX + #208 + RSI],XMM2
	
19b     load_vector XMM2,[RDI + #240 + RSI]
1a4     store_vector [RBX + #240 + RSI],XMM2
	
1ad     load_vector XMM2,[RDI + #272 + RSI]
1b6     store_vector [RBX + #272 + RSI],XMM2
	
1bf     load_vector XMM2,[RDI + #304 + RSI]
1c8     store_vector [RBX + #304 + RSI],XMM2
	
1d1     load_vector XMM2,[RDI + #336 + RSI]
1da     store_vector [RBX + #336 + RSI],XMM2
	
1e3     load_vector XMM2,[RDI + #368 + RSI]
1ec     store_vector [RBX + #368 + RSI],XMM2
	
1f5     load_vector XMM2,[RDI + #400 + RSI]
1fe     store_vector [RBX + #400 + RSI],XMM2
	
207     load_vector XMM2,[RDI + #432 + RSI]
210     store_vector [RBX + #432 + RSI],XMM2
	
219     load_vector XMM2,[RDI + #464 + RSI]
222     store_vector [RBX + #464 + RSI],XMM2
	
22b     load_vector XMM2,[RDI + #496 + RSI]
234     store_vector [RBX + #496 + RSI],XMM2
	
23d     leal    RSI, [RDX + #512]
243     cmpl    RSI, R13
246     jl     B17	# loop end  P=0.996101 C=153029.000000

24c     B19: #	out( B22 B20 ) <- in( B18 )  Freq: 255.474
24c     # TLS is in R15
24c     movq    RAX, [R15 + #960 (32-bit)]	# ptr
253     testl   rax, [RAX]	# Safepoint: poll for GC        # test::copyMem_base @ bci:40 (line 11) L[0]=RBX L[1]=RDI L[2]=RSI L[3]=_ L[4]=_
        # OopMap {rbx=Oop rdi=Oop off=595/0x253}
255     cmpl    RSI, RCX
257     jge,s   B22  P=0.003899 C=153029.000000

259     B20: #	out( B21 ) <- in( B19 )  Freq: 254.478
259     movl    RDX, RSI	# spill
25b     movdl   RAX, XMM0	# spill

25f     B21: #	out( B18 ) <- in( B16 B20 ) Loop( B21-B20 ) Freq: 255.474
25f     movl    R13, RCX	# spill
262     subl    R13, RDX	# int
265     cmpl    RCX, RDX
267     cmovll R13, R10	# signed, int
26b     cmpl    R13, #512000	# unsigned
272     cmovla R13, R9	# unsigned, int
276     addl    R13, RDX	# int
279     movdl   XMM0, RAX	# spill
        nop 	# 3 bytes pad for loops and calls
280     jmp     B18

285     B22: #	out( B23 ) <- in( B19 )  Freq: 0.996087
285     addl    RDX, #480	# int
28b     movdl   RAX, XMM0	# spill

28f     B23: #	out( B30 B24 ) <- in( B63 B22 )  Freq: 0.996088
28f     cmpl    RSI, RAX
291     jge     B30  P=0.500000 C=-1.000000

297     B24: #	out( B71 B25 ) <- in( B23 )  Freq: 0.498044
297     # castII of RSI
297     cmpl    RSI, R8	# unsigned
        nop 	# 6 bytes pad for loops and calls
2a0     jae,u   B71  P=0.000001 C=-1.000000

2a6     B25: #	out( B72 B26 ) <- in( B24 )  Freq: 0.498043
2a6     movl    R10, RSI	# spill
2a9     # castII of R10
2a9     cmpl    R10, R8	# unsigned
2ac     jae,u   B72  P=0.000001 C=-1.000000

2b2     B26: #	out( B73 B27 ) <- in( B25 )  Freq: 0.498043
2b2     cmpl    RSI, R11	# unsigned
2b5     jae,u   B73  P=0.000001 C=-1.000000

2bb     B27: #	out( B74 B28 ) <- in( B26 )  Freq: 0.498042
        nop 	# 5 bytes pad for loops and calls
2c0     cmpl    R10, R11	# unsigned
2c3     jae,u   B74  P=0.000001 C=-1.000000
        nop 	# 3 bytes pad for loops and calls

2cc     B28: #	out( B31 B29 ) <- in( B27 B29 ) Loop( B28-B29 inner post of N352) Freq: 0.996084
2cc     movslq  R10, RSI	# i2l
2cf     load_vector XMM0,[RDI + #16 + R10]
2d6     store_vector [RBX + #16 + R10],XMM0
	
2dd     leal    R10, [RSI + #32]
2e1     cmpl    R10, RAX
2e4     jge,s   B31	# loop end  P=0.500000 C=153029.000000

2e6     B29: #	out( B28 ) <- in( B28 )  Freq: 0.498042
2e6     movl    RSI, R10	# spill
2e9     jmp,s   B28

2eb     B30: #	out( B31 ) <- in( B23 )  Freq: 0.498044
2eb     movl    R10, RSI	# spill
2ee     movl    RSI, RDX	# spill

2f0     B31: #	out( B32 ) <- in( B28 B30 )  Freq: 0.996086
2f0     movl    RBP, R14	# spill
2f3     subl    RBP, RSI	# int
2f5     addl    RBP, #-32	# int

2f8     B32: #	out( B75 B33 ) <- in( B31 B54 )  Freq: 0.999985
2f8     testl   RBP, RBP
        nop 	# 6 bytes pad for loops and calls
300     jle     B75  P=0.000000 C=599.000000

306     B33: #	out( B55 B34 ) <- in( B32 )  Freq: 0.999984
306     # TLS is in R15
306     movq    R9, [R15 + #264 (32-bit)]	# ptr
30d     movq    R8, R9	# spill
310     addq    R8, #48	# ptr
314     movl    R11, #1	# int
31a     shlxl   R11, R11, RBP
31f     decl    R11	# int
322     movl    R11, R11	# i2l zero-extend
	
322     movq    [rsp + #64], R11	# spill
327     # TLS is in R15
327     cmpq    R8, [R15 + #280 (32-bit)]	# raw ptr
32e     jae,u   B55  P=0.000100 C=-1.000000

334     B34: #	out( B35 ) <- in( B33 )  Freq: 0.999884
334     # TLS is in R15
334     movq    [R15 + #264 (32-bit)], R8	# ptr
33b     PREFETCHW [R8 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
343     movq    [R9], #1	# long
34a     PREFETCHW [R8 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
352     movl    [R9 + #8 (8-bit)], narrowklass: precise [bool (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
35a     PREFETCHW [R8 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
362     movl    [R9 + #12 (8-bit)], #32	# int
36a     PREFETCHW [R8 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
372     movq    R11, R9	# spill
375     addq    R11, #16	# ptr
379     clear_mem_imm R11 , #4  
	

383     B35: #	out( B57 B36 ) <- in( B56 B34 )  Freq: 0.999984
383     
383     MEMBAR-storestore (empty encoding)
383     # checkcastPP of R9
383     # TLS is in R15
383     movq    RAX, [R15 + #264 (32-bit)]	# ptr
38a     movq    R11, RAX	# spill
38d     addq    R11, #16	# ptr
391     movq    R8, [rsp + #64]	# spill
396     long_to_mask_evex K7, R8	!
39b     vector_store_mask XMM0, K7 	! elem size is #1 byte[s]
3a6     store_vector [R9 + #16 (8-bit)],XMM0
	
3ac     # TLS is in R15
3ac     cmpq    R11, [R15 + #280 (32-bit)]	# raw ptr
3b3     jae,u   B57  P=0.000100 C=-1.000000

3b9     B36: #	out( B37 ) <- in( B35 )  Freq: 0.999884
3b9     # TLS is in R15
3b9     movq    [R15 + #264 (32-bit)], R11	# ptr
3c0     PREFETCHW [R11 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
3c8     movq    [RAX], #1	# long
3cf     movl    [RAX + #8 (8-bit)], narrowklass: precise jdk/incubator/vector/Byte256Vector$Byte256Mask: 0x00007fc2c0100e80:Constant:exact *	# compressed klass ptr

3d6     B37: #	out( B40 B38 ) <- in( B58 B36 )  Freq: 0.999984
3d6     encode_heap_oop_not_null R11,R9
41b     movl    [RAX + #12 (8-bit)], R11	# compressed ptr
41f     
41f     MEMBAR-storestore (empty encoding)
41f     # checkcastPP of RAX
41f     movslq  RBP, R10	# i2l
422     testl   R10, R10
425     jl,s   B40  P=0.500000 C=-1.000000

427     B38: #	out( B40 B39 ) <- in( B37 )  Freq: 0.499992
427     movdq   R11, XMM1	# spill
42c     addq    R11, #-32	# long
430     cmpq    RBP, R11
433     jg,s   B40  P=0.500000 C=-1.000000

435     B39: #	out( B42 ) <- in( B38 )  Freq: 0.249996
435     movq    R11, [rsp + #64]	# spill
43a     long_to_mask_evex K7, R11	!
43f     vector_masked_load XMM0, [RDI + #16 + RBP], K7 	! vector masked copy
44a     vmovdqu [rsp + 32],XMM0	# spill
450     jmp,s   B42

452     B40: #	out( B83 B41 ) <- in( B38 B37 )  Freq: 0.749988
452     movq    [rsp + #24], RAX	# spill
457     movl    [rsp + #16], R10	# spill
45c     movq    [rsp + #8], RBX	# spill
461     movq    [rsp + #0], RDI	# spill
465     movl    RSI, R10	# spill
468     movq    RDX, jdk/incubator/vector/ByteVector$ByteSpecies (jdk/incubator/vector/VectorSpecies):exact *	# ptr
472     movq    RCX, RAX	# spill
475     movl    R8, #1	# int
47b     movl    R9, R14	# spill
        nop 	# 2 bytes pad for loops and calls
480     call,static  jdk.incubator.vector.ByteVector::checkMaskFromIndexSize
        # jdk.incubator.vector.ByteVector::fromArray @ bci:43 (line 2999) L[0]=_ L[1]=rsp + #0 L[2]=rsp + #16 L[3]=rsp + #24 L[4]=#Ptr0x00007fc2d80234d8
        # test::copyMem_base @ bci:73 (line 18) L[0]=rsp + #8 L[1]=_ L[2]=rsp + #16 L[3]=_ L[4]=rsp + #24
        # OopMap {[0]=Oop [8]=Oop [24]=Oop off=1160/0x488}

490     B41: #	out( B42 ) <- in( B40 )  Freq: 0.749973
        # Block is sole successor of call
490     movq    R10, [rsp + #0]	# spill
494     movq    R11, [rsp + #64]	# spill
499     long_to_mask_evex K7, R11	!
49e     vector_masked_load XMM0, [R10 + #16 + RBP], K7 	! vector masked copy
4a9     vmovdqu [rsp + 32],XMM0	# spill
4af     movq    RBX, [rsp + #8]	# spill
4b4     movl    R10, [rsp + #16]	# spill
4b9     movq    RAX, [rsp + #24]	# spill

4be     B42: #	out( B48 B43 ) <- in( B39 B41 )  Freq: 0.999969
4be     movq    R11, [rsp + #64]	# spill
4c3     long_to_mask_evex K7, R11	!
4c8     long_to_mask_evex K6, R11	!
4cd     ktest_ge8  K7, K6
	
4d2     jae,us  B48  P=0.100000 C=-1.000000

4d4     B43: #	out( B77 B44 ) <- in( B42 )  Freq: 0.899972
4d4     movl    RBP, [RBX + #12 (8-bit)]	# range
4d7     NullCheck RBX

4d7     B44: #	out( B70 B45 ) <- in( B43 )  Freq: 0.899972
4d7     addl    RBP, #-31	# int
4da     testl   RBP, RBP
        nop 	# 4 bytes pad for loops and calls
4e0     jl     B70  P=0.000001 C=-1.000000

4e6     B45: #	out( B69 B46 ) <- in( B44 )  Freq: 0.899971
4e6     cmpl    R10, RBP	# unsigned
4e9     jae,u   B69  P=0.000001 C=-1.000000

4ef     B46: #	out( B47 ) <- in( B45 )  Freq: 0.89997
4ef     # castII of R10
4ef     vmovdqu XMM0,[rsp + 32]	# spill
4f5     store_vector [RBX + #16 + R10],XMM0
	

4fc     B47: #	out( N1 ) <- in( B53 B46 )  Freq: 0.999965
4fc     vzeroupper
	addq    rsp, 96	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

511     ret

512     B48: #	out( B78 B49 ) <- in( B42 )  Freq: 0.099997
512     movl    R9, [RBX + #12 (8-bit)]	# range
516     NullCheck RBX

516     B49: #	out( B51 B50 ) <- in( B48 )  Freq: 0.0999969
516     testl   R10, R10
519     jl,s   B51  P=0.500000 C=-1.000000

51b     B50: #	out( B53 B51 ) <- in( B49 )  Freq: 0.0499984
51b     movslq  R11, R9	# i2l
51e     addq    R11, #-32	# long
522     cmpq    RBP, R11
525     jle,s   B53  P=0.500000 C=-1.000000

527     B51: #	out( B82 B52 ) <- in( B50 B49 )  Freq: 0.0749976
527     movq    RCX, RAX	# spill
52a     movq    [rsp + #0], RBX	# spill
52e     movl    RSI, R10	# spill
531     movq    RDX, jdk/incubator/vector/ByteVector$ByteSpecies (jdk/incubator/vector/VectorSpecies):exact *	# ptr
53b     movl    R8, #1	# int
541     movl    [rsp + #8], R10	# spill
546     movq    [rsp + #16], RAX	# spill
        nop 	# 1 bytes pad for loops and calls
54c     call,static  jdk.incubator.vector.ByteVector::checkMaskFromIndexSize
        # jdk.incubator.vector.ByteVector::intoArray @ bci:46 (line 3409) L[0]=#ScObj0 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_
        # ScObj0 jdk/incubator/vector/Byte256Vector={ [payload :0]=rsp + #32 }
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {[0]=Oop [16]=Oop off=1364/0x554}

55c     B52: #	out( B53 ) <- in( B51 )  Freq: 0.0749961
        # Block is sole successor of call
55c     movq    RBX, [rsp + #0]	# spill

560     B53: #	out( B47 ) <- in( B52 B50 )  Freq: 0.0999954
560     vmovdqu XMM0,[rsp + 32]	# spill
566     movq    R10, [rsp + #64]	# spill
56b     long_to_mask_evex K7, R10	!
570     vector_masked_store [RBX + #16 + RBP], XMM0, K7 	! vector masked store
        nop 	# 5 bytes pad for loops and calls
580     jmp     B47

585     B54: #	out( B32 ) <- in( B2 )  Freq: 0.003899
585     movl    RBP, R14	# spill
588     movq    RBX, RSI	# spill
58b     jmp     B32

590     B55: #	out( B80 B56 ) <- in( B33 )  Freq: 0.000100015
590     movl    [rsp + #12], R10	# spill
595     movsd   [rsp + #16], XMM1	# spill
59b     movl    [rsp + #8], R14	# spill
5a0     movq    [rsp + #0], RBX	# spill
5a4     movq    RBP, RDI	# spill
5a7     movq    RSI, precise [bool (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# ptr
5b1     movl    RDX, #32	# int
        nop 	# 2 bytes pad for loops and calls
5b8     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.VectorMask::fromLong @ bci:39 (line 242) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007fc2c00fc040 STK[1]=#Ptr0x00007fc2b400b0e0 STK[2]=#32 STK[3]=rsp + #64 STK[4]=_ STK[5]=#1 STK[6]=#Ptr0x00007fc2d80234d8 STK[7]=#Ptr0x00007fc2c00fc908
        # test::copyMem_base @ bci:61 (line 17) L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #12 L[3]=_ L[4]=_
        # OopMap {rbp=Oop [0]=Oop off=1472/0x5c0}

5c8     B56: #	out( B35 ) <- in( B55 )  Freq: 0.000100013
        # Block is sole successor of call
5c8     movq    RDI, RBP	# spill
5cb     movq    RBX, [rsp + #0]	# spill
5cf     movl    R14, [rsp + #8]	# spill
5d4     movsd   XMM1, [rsp + #16]	# spill
5da     movl    R10, [rsp + #12]	# spill
5df     movq    R9, RAX	# spill
5e2     jmp     B35

5e7     B57: #	out( B79 B58 ) <- in( B35 )  Freq: 0.000100015
5e7     movq    [rsp + #24], R9	# spill
5ec     movl    [rsp + #12], R10	# spill
5f1     movsd   [rsp + #16], XMM1	# spill
5f7     movl    [rsp + #8], R14	# spill
5fc     movq    [rsp + #0], RBX	# spill
600     movq    RBP, RDI	# spill
603     movq    RSI, precise jdk/incubator/vector/Byte256Vector$Byte256Mask: 0x00007fc2c0100e80:Constant:exact *	# ptr
        nop 	# 3 bytes pad for loops and calls
610     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.VectorMask::fromLong @ bci:39 (line 242) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007fc2c00fc040 STK[1]=#Ptr0x00007fc2b400b0e0 STK[2]=#32 STK[3]=rsp + #64 STK[4]=_ STK[5]=#1 STK[6]=#Ptr0x00007fc2d80234d8 STK[7]=#Ptr0x00007fc2c00fc908
        # test::copyMem_base @ bci:61 (line 17) L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #12 L[3]=_ L[4]=_
        # OopMap {rbp=Oop [0]=Oop [24]=Oop off=1560/0x618}

620     B58: #	out( B37 ) <- in( B57 )  Freq: 0.000100013
        # Block is sole successor of call
620     movq    RDI, RBP	# spill
623     movq    RBX, [rsp + #0]	# spill
627     movl    R14, [rsp + #8]	# spill
62c     movsd   XMM1, [rsp + #16]	# spill
632     movl    R10, [rsp + #12]	# spill
637     movq    R9, [rsp + #24]	# spill
        nop 	# 4 bytes pad for loops and calls
640     jmp     B37

645     B59: #	out( B60 ) <- in( B4 )  Freq: 1.00933e-06
645     movq    RBX, RSI	# spill

648     B60: #	out( N1 ) <- in( B7 B64 B59 B61 B9 B8 B6 )  Freq: 7.03881e-06
648     movl    RSI, #-138	# int
64d     movq    RBP, RBX	# spill
650     movq    [rsp + #0], RDI	# spill
654     movl    [rsp + #8], RAX	# spill
658     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # test::copyMem_base @ bci:13 (line 11) L[0]=RBP L[1]=rsp + #0 L[2]=#0 L[3]=_ L[4]=_ STK[0]=#0 STK[1]=rsp + #8
        # OopMap {rbp=Oop [0]=Oop off=1632/0x660}
668     stop	# ShouldNotReachHere

67c     B61: #	out( B60 ) <- in( B5 )  Freq: 1.00933e-06
67c     movq    RBX, RSI	# spill
        nop 	# 1 bytes pad for loops and calls
680     jmp,s   B60

682     B62: #	out( N1 ) <- in( B10 )  Freq: 1.00932e-06
682     movl    RSI, #-146	# int
687     movq    RBP, RBX	# spill
68a     movq    [rsp + #0], RDI	# spill
68e     movl    [rsp + #8], RAX	# spill
        nop 	# 2 bytes pad for loops and calls
694     call,static  wrapper for: uncommon_trap(reason='loop_limit_check' action='maybe_recompile' debug_id='0')
        # test::copyMem_base @ bci:13 (line 11) L[0]=RBP L[1]=rsp + #0 L[2]=#0 L[3]=_ L[4]=_ STK[0]=#0 STK[1]=rsp + #8
        # OopMap {rbp=Oop [0]=Oop off=1692/0x69c}
6a4     stop	# ShouldNotReachHere

6b8     B63: #	out( B23 ) <- in( B11 )  Freq: 1.00932e-06
6b8     movl    RSI, #32	# int
6bd     xorl    RDX, RDX	# int
        nop 	# 1 bytes pad for loops and calls
6c0     jmp     B23

6c5     B64: #	out( B60 ) <- in( B3 )  Freq: 9.961e-07
6c5     movq    RBX, RSI	# spill
6c8     jmp     B60

6cd     B65: #	out( N1 ) <- in( B12 )  Freq: 9.96091e-07
6cd     stop	# ShouldNotReachHere

6e1     B66: #	out( N1 ) <- in( B13 )  Freq: 9.9609e-07
6e1     stop	# ShouldNotReachHere

6f5     B67: #	out( N1 ) <- in( B14 )  Freq: 9.96089e-07
6f5     stop	# ShouldNotReachHere

709     B68: #	out( N1 ) <- in( B15 )  Freq: 9.96088e-07
709     stop	# ShouldNotReachHere

71d     B69: #	out( N1 ) <- in( B45 )  Freq: 9.11921e-07
71d     movl    RSI, #-28	# int
722     movq    [rsp + #0], RBX	# spill
726     movl    [rsp + #8], R10	# spill
        nop 	# 1 bytes pad for loops and calls
72c     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 385) L[0]=_ L[1]=_ STK[0]=rsp + #8 STK[1]=RBP STK[2]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.ByteVector::intoArray @ bci:7 (line 3364) L[0]=#ScObj0 L[1]=rsp + #0 L[2]=_ L[3]=_
        # ScObj0 jdk/incubator/vector/Byte256Vector={ [payload :0]=rsp + #32 }
        # jdk.incubator.vector.ByteVector::intoArray @ bci:10 (line 3405) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {[0]=Oop off=1844/0x734}
73c     stop	# ShouldNotReachHere

750     B70: #	out( N1 ) <- in( B44 )  Freq: 8.99972e-07
750     movl    RSI, #-52	# int
755     movq    [rsp + #0], RBX	# spill
759     movl    [rsp + #8], R10	# spill
        nop 	# 2 bytes pad for loops and calls
760     call,static  wrapper for: uncommon_trap(reason='intrinsic_or_type_checked_inlining' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 385) L[0]=_ L[1]=_ STK[0]=rsp + #8 STK[1]=RBP STK[2]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.ByteVector::intoArray @ bci:7 (line 3364) L[0]=#ScObj0 L[1]=rsp + #0 L[2]=_ L[3]=_
        # ScObj0 jdk/incubator/vector/Byte256Vector={ [payload :0]=rsp + #32 }
        # jdk.incubator.vector.ByteVector::intoArray @ bci:10 (line 3405) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {[0]=Oop off=1896/0x768}
770     stop	# ShouldNotReachHere

784     B71: #	out( N1 ) <- in( B24 )  Freq: 5.04657e-07
784     stop	# ShouldNotReachHere

798     B72: #	out( N1 ) <- in( B25 )  Freq: 5.04657e-07
798     stop	# ShouldNotReachHere

7ac     B73: #	out( N1 ) <- in( B26 )  Freq: 5.04656e-07
7ac     stop	# ShouldNotReachHere

7c0     B74: #	out( N1 ) <- in( B27 )  Freq: 5.04656e-07
7c0     stop	# ShouldNotReachHere

7d4     B75: #	out( N1 ) <- in( B32 )  Freq: 4.99992e-07
7d4     movl    RSI, #-187	# int
        nop 	# 3 bytes pad for loops and calls
7dc     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # test::copyMem_base @ bci:49 (line 16) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP
        # OopMap {off=2020/0x7e4}
7ec     stop	# ShouldNotReachHere

800     B76: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
800     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
808     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # test::copyMem_base @ bci:7 (line 11) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_ STK[2]=#null
        # OopMap {off=2064/0x810}
818     stop	# ShouldNotReachHere

82c     B77: #	out( N1 ) <- in( B43 )  Freq: 9.11923e-07
82c     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
834     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.ByteVector::intoArray @ bci:6 (line 3364) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=_ STK[2]=#null
        # jdk.incubator.vector.ByteVector::intoArray @ bci:10 (line 3405) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {off=2108/0x83c}
844     stop	# ShouldNotReachHere

858     B78: #	out( N1 ) <- in( B48 )  Freq: 1.01325e-07
858     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
860     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.ByteVector::intoArray @ bci:31 (line 3408) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=_ STK[4]=#null
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {off=2152/0x868}
870     stop	# ShouldNotReachHere

884     B79: #	out( B81 ) <- in( B57 )  Freq: 1.00015e-09
884     # exception oop is in rax; no code emitted
884     jmp,s   B81

886     B80: #	out( B81 ) <- in( B55 )  Freq: 1.00015e-09
886     # exception oop is in rax; no code emitted

886     B81: #	out( B84 ) <- in( B80 B79 )  Freq: 2.0003e-09
886     movq    RSI, RAX	# spill
889     jmp,s   B84

88b     B82: #	out( B84 ) <- in( B51 )  Freq: 7.49976e-07
88b     # exception oop is in rax; no code emitted
88b     movq    RSI, RAX	# spill
88e     jmp,s   B84

890     B83: #	out( B84 ) <- in( B40 )  Freq: 7.49988e-06
890     # exception oop is in rax; no code emitted
890     movq    RSI, RAX	# spill

893     B84: #	out( N1 ) <- in( B83 B82 B81 )  Freq: 8.25186e-06
893     vzeroupper
	addq    rsp, 96	# Destroy frame
	popq    rbp

89b     jmp     rethrow_stub

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     646  309             test::copyMem_base (84 bytes)
 total in heap  [0x00007fc348290290,0x00007fc348291890] = 5632
 relocation     [0x00007fc348290400,0x00007fc348290548] = 328
 main code      [0x00007fc348290560,0x00007fc348290e20] = 2240
 stub code      [0x00007fc348290e20,0x00007fc348290e48] = 40
 oops           [0x00007fc348290e48,0x00007fc348290e78] = 48
 metadata       [0x00007fc348290e78,0x00007fc348290f68] = 240
 scopes data    [0x00007fc348290f68,0x00007fc3482911a0] = 568
 scopes pcs     [0x00007fc3482911a0,0x00007fc3482917f0] = 1616
 dependencies   [0x00007fc3482917f0,0x00007fc348291808] = 24
 handler table  [0x00007fc348291808,0x00007fc348291868] = 96
 nul chk table  [0x00007fc348291868,0x00007fc348291890] = 40

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007fc2fc603650} 'copyMem_base' '([B[B)V' in 'test'
  # parm0:    rsi:rsi   = '[B'
  # parm1:    rdx:rdx   = '[B'
  #           [sp+0x70]  (sp of caller)
 ;; N1: #	out( B1 ) <- in( B76 B60 B74 B62 B77 B70 B84 B69 B78 B47 B75 B65 B68 B71 B72 B66 B67 B73 )  Freq: 1
 ;; B1: #	out( B76 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fc348290560:   mov    %eax,-0x18000(%rsp)
  0x00007fc348290567:   push   %rbp
  0x00007fc348290568:   sub    $0x60,%rsp
  0x00007fc34829056c:   cmpl   $0x1,0x20(%r15)
  0x00007fc348290574:   jne    0x00007fc348290e16           ;*synchronization entry
                                                            ; - test::copyMem_base@-1 (line 10)
  0x00007fc34829057a:   mov    %rdx,%rdi
  0x00007fc34829057d:   nop
  0x00007fc34829057e:   nop
  0x00007fc34829057f:   nop
  0x00007fc348290580:   mov    0xc(%rdx),%r14d              ; implicit exception: dispatches to 0x00007fc348290d60
                                                            ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B2: #	out( B54 B3 ) <- in( B1 )  Freq: 0.999999
  0x00007fc348290584:   movslq %r14d,%r10                   ;*i2l {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@16 (line 2995)
                                                            ; - test::copyMem_base@73 (line 18)
  0x00007fc348290587:   vmovq  %r10,%xmm1
  0x00007fc34829058c:   mov    %r14d,%eax
  0x00007fc34829058f:   and    $0xffffffe0,%eax
  0x00007fc348290592:   xor    %r10d,%r10d
  0x00007fc348290595:   test   %eax,%eax
  0x00007fc348290597:   jle    0x00007fc348290ae5
 ;; B3: #	out( B64 B4 ) <- in( B2 )  Freq: 0.9961
  0x00007fc34829059d:   lea    -0x1f(%r14),%r8d
  0x00007fc3482905a1:   test   %r8d,%r8d
  0x00007fc3482905a4:   jl     0x00007fc348290c25
 ;; B4: #	out( B59 B5 ) <- in( B3 )  Freq: 0.996099
  0x00007fc3482905aa:   cmp    $0x1f,%r14d
  0x00007fc3482905ae:   je     0x00007fc348290ba5
 ;; B5: #	out( B61 B6 ) <- in( B4 )  Freq: 0.996098
  0x00007fc3482905b4:   vmovq  %xmm1,%r11
  0x00007fc3482905b9:   add    $0xffffffffffffffe1,%r11
  0x00007fc3482905bd:   movslq %eax,%r9
  0x00007fc3482905c0:   lea    0x1f(%r9),%rcx
  0x00007fc3482905c4:   and    $0xffffffffffffffe0,%rcx
  0x00007fc3482905c8:   mov    %ecx,%ecx
  0x00007fc3482905ca:   movslq %ecx,%rdx
  0x00007fc3482905cd:   add    $0xffffffffffffffe0,%rdx
  0x00007fc3482905d1:   cmp    %r11,%rdx
  0x00007fc3482905d4:   jae    0x00007fc348290bdc
 ;; B6: #	out( B60 B7 ) <- in( B5 )  Freq: 0.996097
  0x00007fc3482905da:   mov    %rsi,%rbx
  0x00007fc3482905dd:   nop
  0x00007fc3482905de:   nop
  0x00007fc3482905df:   nop
  0x00007fc3482905e0:   mov    0xc(%rsi),%ecx               ; implicit exception: dispatches to 0x00007fc348290ba8
 ;; B7: #	out( B60 B8 ) <- in( B6 )  Freq: 0.996096
  0x00007fc3482905e3:   lea    -0x1f(%rcx),%r11d
  0x00007fc3482905e7:   test   %r11d,%r11d
  0x00007fc3482905ea:   jl     0x00007fc348290ba8
 ;; B8: #	out( B60 B9 ) <- in( B7 )  Freq: 0.996095
  0x00007fc3482905f0:   cmp    $0x1f,%ecx
  0x00007fc3482905f3:   je     0x00007fc348290ba8
 ;; B9: #	out( B60 B10 ) <- in( B8 )  Freq: 0.996094
  0x00007fc3482905f9:   movslq %ecx,%rcx
  0x00007fc3482905fc:   add    $0xffffffffffffffe1,%rcx
  0x00007fc348290600:   cmp    %rcx,%rdx
  0x00007fc348290603:   jae    0x00007fc348290ba8
 ;; B10: #	out( B62 B11 ) <- in( B9 )  Freq: 0.996093
  0x00007fc348290609:   cmp    $0x7fffffe0,%eax
  0x00007fc34829060e:   jg     0x00007fc348290be2           ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B11: #	out( B63 B12 ) <- in( B10 )  Freq: 0.996092
  0x00007fc348290614:   vmovdqu 0x10(%rdi),%ymm0            ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@32 (line 3730)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
                                                            ; - test::copyMem_base@21 (line 12)
  0x00007fc348290619:   vmovdqu %ymm0,0x10(%rsi)            ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fc34829061e:   add    $0xfffffffffffffe20,%r9
  0x00007fc348290625:   mov    $0xffffffff80000000,%rcx
  0x00007fc34829062c:   cmp    $0xffffffff80000000,%r9
  0x00007fc348290633:   cmovl  %rcx,%r9
  0x00007fc348290637:   mov    %r9d,%ecx
  0x00007fc34829063a:   nop
  0x00007fc34829063b:   nop
  0x00007fc34829063c:   nop
  0x00007fc34829063d:   nop
  0x00007fc34829063e:   nop
  0x00007fc34829063f:   nop
  0x00007fc348290640:   cmp    $0x20,%ecx
  0x00007fc348290643:   jle    0x00007fc348290c18
 ;; B12: #	out( B65 B13 ) <- in( B11 )  Freq: 0.996091
  0x00007fc348290649:   cmp    $0x20,%r11d
  0x00007fc34829064d:   jbe    0x00007fc348290c2d
 ;; B13: #	out( B66 B14 ) <- in( B12 )  Freq: 0.99609
  0x00007fc348290653:   cmp    $0x20,%r8d
  0x00007fc348290657:   jbe    0x00007fc348290c41
 ;; B14: #	out( B67 B15 ) <- in( B13 )  Freq: 0.996089
  0x00007fc34829065d:   nop
  0x00007fc34829065e:   nop
  0x00007fc34829065f:   nop
  0x00007fc348290660:   cmp    $0x200,%r8d
  0x00007fc348290667:   jbe    0x00007fc348290c55
 ;; B15: #	out( B68 B16 ) <- in( B14 )  Freq: 0.996088
  0x00007fc34829066d:   cmp    $0x200,%r11d
  0x00007fc348290674:   jbe    0x00007fc348290c69
 ;; B16: #	out( B21 ) <- in( B15 )  Freq: 0.996087
  0x00007fc34829067a:   mov    $0x7d000,%r9d
  0x00007fc348290680:   mov    $0x20,%edx
  0x00007fc348290685:   jmpq   0x00007fc3482907bf
  0x00007fc34829068a:   nop
  0x00007fc34829068b:   nop
  0x00007fc34829068c:   nop
  0x00007fc34829068d:   nop
  0x00007fc34829068e:   nop
  0x00007fc34829068f:   nop
 ;; B17: #	out( B18 ) <- in( B18 ) top-of-loop Freq: 65267.8
  0x00007fc348290690:   mov    %esi,%edx                    ;*getstatic SPECIES {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@16 (line 12)
 ;; B18: #	out( B17 B19 ) <- in( B21 B17 ) Loop( B18-B17 inner main of N125 strip mined) Freq: 65523.3
  0x00007fc348290692:   movslq %edx,%rsi
  0x00007fc348290695:   vmovdqu 0x10(%rdi,%rsi,1),%ymm2     ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc34829069b:   vmovdqu %ymm2,0x10(%rbx,%rsi,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fc3482906a1:   vmovdqu 0x30(%rdi,%rsi,1),%ymm2     ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc3482906a7:   vmovdqu %ymm2,0x30(%rbx,%rsi,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fc3482906ad:   vmovdqu 0x50(%rdi,%rsi,1),%ymm2     ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc3482906b3:   vmovdqu %ymm2,0x50(%rbx,%rsi,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fc3482906b9:   vmovdqu 0x70(%rdi,%rsi,1),%ymm2     ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc3482906bf:   vmovdqu %ymm2,0x70(%rbx,%rsi,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fc3482906c5:   vmovdqu 0x90(%rdi,%rsi,1),%ymm2     ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc3482906ce:   vmovdqu %ymm2,0x90(%rbx,%rsi,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fc3482906d7:   vmovdqu 0xb0(%rdi,%rsi,1),%ymm2     ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc3482906e0:   vmovdqu %ymm2,0xb0(%rbx,%rsi,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fc3482906e9:   vmovdqu 0xd0(%rdi,%rsi,1),%ymm2     ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc3482906f2:   vmovdqu %ymm2,0xd0(%rbx,%rsi,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fc3482906fb:   vmovdqu 0xf0(%rdi,%rsi,1),%ymm2     ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290704:   vmovdqu %ymm2,0xf0(%rbx,%rsi,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fc34829070d:   vmovdqu 0x110(%rdi,%rsi,1),%ymm2    ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290716:   vmovdqu %ymm2,0x110(%rbx,%rsi,1)    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fc34829071f:   vmovdqu 0x130(%rdi,%rsi,1),%ymm2    ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290728:   vmovdqu %ymm2,0x130(%rbx,%rsi,1)    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fc348290731:   vmovdqu 0x150(%rdi,%rsi,1),%ymm2    ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc34829073a:   vmovdqu %ymm2,0x150(%rbx,%rsi,1)    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fc348290743:   vmovdqu 0x170(%rdi,%rsi,1),%ymm2    ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc34829074c:   vmovdqu %ymm2,0x170(%rbx,%rsi,1)    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fc348290755:   vmovdqu 0x190(%rdi,%rsi,1),%ymm2    ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc34829075e:   vmovdqu %ymm2,0x190(%rbx,%rsi,1)    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
                                                            ;   {no_reloc}
  0x00007fc348290767:   vmovdqu 0x1b0(%rdi,%rsi,1),%ymm2    ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290770:   vmovdqu %ymm2,0x1b0(%rbx,%rsi,1)    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fc348290779:   vmovdqu 0x1d0(%rdi,%rsi,1),%ymm2    ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290782:   vmovdqu %ymm2,0x1d0(%rbx,%rsi,1)    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fc34829078b:   vmovdqu 0x1f0(%rdi,%rsi,1),%ymm2    ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290794:   vmovdqu %ymm2,0x1f0(%rbx,%rsi,1)    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fc34829079d:   lea    0x200(%rdx),%esi
  0x00007fc3482907a3:   cmp    %r13d,%esi
  0x00007fc3482907a6:   jl     0x00007fc348290690           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B19: #	out( B22 B20 ) <- in( B18 )  Freq: 255.474
  0x00007fc3482907ac:   mov    0x3c0(%r15),%rax             ; ImmutableOopMap {rbx=Oop rdi=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::copyMem_base@40 (line 11)
  0x00007fc3482907b3:   test   %eax,(%rax)                  ;   {poll}
  0x00007fc3482907b5:   cmp    %ecx,%esi
  0x00007fc3482907b7:   jge    0x00007fc3482907e5
 ;; B20: #	out( B21 ) <- in( B19 )  Freq: 254.478
  0x00007fc3482907b9:   mov    %esi,%edx
  0x00007fc3482907bb:   vmovd  %xmm0,%eax
 ;; B21: #	out( B18 ) <- in( B16 B20 ) Loop( B21-B20 ) Freq: 255.474
  0x00007fc3482907bf:   mov    %ecx,%r13d
  0x00007fc3482907c2:   sub    %edx,%r13d
  0x00007fc3482907c5:   cmp    %edx,%ecx
  0x00007fc3482907c7:   cmovl  %r10d,%r13d
  0x00007fc3482907cb:   cmp    $0x7d000,%r13d
  0x00007fc3482907d2:   cmova  %r9d,%r13d
  0x00007fc3482907d6:   add    %edx,%r13d
  0x00007fc3482907d9:   vmovd  %eax,%xmm0
  0x00007fc3482907dd:   nop
  0x00007fc3482907de:   nop
  0x00007fc3482907df:   nop
  0x00007fc3482907e0:   jmpq   0x00007fc348290692
 ;; B22: #	out( B23 ) <- in( B19 )  Freq: 0.996087
  0x00007fc3482907e5:   add    $0x1e0,%edx
  0x00007fc3482907eb:   vmovd  %xmm0,%eax
 ;; B23: #	out( B30 B24 ) <- in( B63 B22 )  Freq: 0.996088
  0x00007fc3482907ef:   cmp    %eax,%esi
  0x00007fc3482907f1:   jge    0x00007fc34829084b
 ;; B24: #	out( B71 B25 ) <- in( B23 )  Freq: 0.498044
  0x00007fc3482907f7:   cmp    %r8d,%esi
  0x00007fc3482907fa:   nop
  0x00007fc3482907fb:   nop
  0x00007fc3482907fc:   nop
  0x00007fc3482907fd:   nop
  0x00007fc3482907fe:   nop
  0x00007fc3482907ff:   nop
  0x00007fc348290800:   jae    0x00007fc348290ce4
 ;; B25: #	out( B72 B26 ) <- in( B24 )  Freq: 0.498043
  0x00007fc348290806:   mov    %esi,%r10d
  0x00007fc348290809:   cmp    %r8d,%r10d
  0x00007fc34829080c:   jae    0x00007fc348290cf8
 ;; B26: #	out( B73 B27 ) <- in( B25 )  Freq: 0.498043
  0x00007fc348290812:   cmp    %r11d,%esi
  0x00007fc348290815:   jae    0x00007fc348290d0c
 ;; B27: #	out( B74 B28 ) <- in( B26 )  Freq: 0.498042
  0x00007fc34829081b:   nop
  0x00007fc34829081c:   nop
  0x00007fc34829081d:   nop
  0x00007fc34829081e:   nop
  0x00007fc34829081f:   nop
  0x00007fc348290820:   cmp    %r11d,%r10d
  0x00007fc348290823:   jae    0x00007fc348290d20
  0x00007fc348290829:   nop
  0x00007fc34829082a:   nop
  0x00007fc34829082b:   nop                                 ;*getstatic SPECIES {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@16 (line 12)
 ;; B28: #	out( B31 B29 ) <- in( B27 B29 ) Loop( B28-B29 inner post of N352) Freq: 0.996084
  0x00007fc34829082c:   movslq %esi,%r10                    ;*i2l {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::arrayAddress@4 (line 3956)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@20 (line 3732)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
                                                            ; - test::copyMem_base@21 (line 12)
  0x00007fc34829082f:   vmovdqu 0x10(%rdi,%r10,1),%ymm0     ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290836:   vmovdqu %ymm0,0x10(%rbx,%r10,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fc34829083d:   lea    0x20(%rsi),%r10d
  0x00007fc348290841:   cmp    %eax,%r10d
  0x00007fc348290844:   jge    0x00007fc348290850
 ;; B29: #	out( B28 ) <- in( B28 )  Freq: 0.498042
  0x00007fc348290846:   mov    %r10d,%esi
  0x00007fc348290849:   jmp    0x00007fc34829082c
 ;; B30: #	out( B31 ) <- in( B23 )  Freq: 0.498044
  0x00007fc34829084b:   mov    %esi,%r10d
  0x00007fc34829084e:   mov    %edx,%esi
 ;; B31: #	out( B32 ) <- in( B28 B30 )  Freq: 0.996086
  0x00007fc348290850:   mov    %r14d,%ebp
  0x00007fc348290853:   sub    %esi,%ebp
  0x00007fc348290855:   add    $0xffffffe0,%ebp
 ;; B32: #	out( B75 B33 ) <- in( B31 B54 )  Freq: 0.999985
  0x00007fc348290858:   test   %ebp,%ebp                    ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc34829085a:   nop
  0x00007fc34829085b:   nop
  0x00007fc34829085c:   nop
  0x00007fc34829085d:   nop
  0x00007fc34829085e:   nop
  0x00007fc34829085f:   nop
  0x00007fc348290860:   jle    0x00007fc348290d34           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B33: #	out( B55 B34 ) <- in( B32 )  Freq: 0.999984
  0x00007fc348290866:   mov    0x108(%r15),%r9
  0x00007fc34829086d:   mov    %r9,%r8
  0x00007fc348290870:   add    $0x30,%r8
  0x00007fc348290874:   mov    $0x1,%r11d
  0x00007fc34829087a:   shlx   %ebp,%r11d,%r11d
  0x00007fc34829087f:   dec    %r11d                        ;*land {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@17 (line 241)
                                                            ; - test::copyMem_base@61 (line 17)
  0x00007fc348290882:   mov    %r11,0x40(%rsp)
  0x00007fc348290887:   cmp    0x118(%r15),%r8
  0x00007fc34829088e:   jae    0x00007fc348290af0
 ;; B34: #	out( B35 ) <- in( B33 )  Freq: 0.999884
  0x00007fc348290894:   mov    %r8,0x108(%r15)
  0x00007fc34829089b:   prefetchw 0xc0(%r8)
  0x00007fc3482908a3:   movq   $0x1,(%r9)
  0x00007fc3482908aa:   prefetchw 0x100(%r8)
  0x00007fc3482908b2:   movl   $0x40200,0x8(%r9)            ;   {metadata({type array bool})}
  0x00007fc3482908ba:   prefetchw 0x140(%r8)
  0x00007fc3482908c2:   movl   $0x20,0xc(%r9)
  0x00007fc3482908ca:   prefetchw 0x180(%r8)
  0x00007fc3482908d2:   mov    %r9,%r11
  0x00007fc3482908d5:   add    $0x10,%r11
  0x00007fc3482908d9:   vpxor  %ymm0,%ymm0,%ymm0
  0x00007fc3482908dd:   vmovdqu64 %ymm0,(%r11)              ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B35: #	out( B57 B36 ) <- in( B56 B34 )  Freq: 0.999984
  0x00007fc3482908e3:   mov    0x108(%r15),%rax
  0x00007fc3482908ea:   mov    %rax,%r11
  0x00007fc3482908ed:   add    $0x10,%r11
  0x00007fc3482908f1:   mov    0x40(%rsp),%r8               ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc3482908f6:   kmovq  %r8,%k7                      ;*invokestatic fromBitsCoerced {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
  0x00007fc3482908fb:   vpmovm2b %k7,%ymm0
  0x00007fc348290901:   vpabsb %ymm0,%ymm0
  0x00007fc348290906:   vmovdqu %ymm0,0x10(%r9)
  0x00007fc34829090c:   cmp    0x118(%r15),%r11
  0x00007fc348290913:   jae    0x00007fc348290b47           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B36: #	out( B37 ) <- in( B35 )  Freq: 0.999884
  0x00007fc348290919:   mov    %r11,0x108(%r15)
  0x00007fc348290920:   prefetchw 0xc0(%r11)
  0x00007fc348290928:   movq   $0x1,(%rax)
  0x00007fc34829092f:   movl   $0xde750,0x8(%rax)           ;   {metadata('jdk/incubator/vector/Byte256Vector$Byte256Mask')}
 ;; B37: #	out( B40 B38 ) <- in( B58 B36 )  Freq: 0.999984
  0x00007fc348290936:   cmp    0x513f673(%rip),%r12        # 0x00007fc34d3cffb0
                                                            ;   {external_word}
  0x00007fc34829093d:   je     0x00007fc348290957
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007fc348290943:   movabs $0x7fc34cfa4df8,%rdi         ;   {external_word}
  0x00007fc34829094d:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348290951:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290956:   hlt    
  0x00007fc348290957:   test   %r9,%r9
  0x00007fc34829095a:   jne    0x00007fc348290974
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007fc348290960:   movabs $0x7fc34cfa4e38,%rdi         ;   {external_word}
  0x00007fc34829096a:   and    $0xfffffffffffffff0,%rsp
  0x00007fc34829096e:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290973:   hlt    
  0x00007fc348290974:   mov    %r9,%r11
  0x00007fc348290977:   shr    $0x3,%r11
  0x00007fc34829097b:   mov    %r11d,0xc(%rax)              ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc34829097f:   movslq %r10d,%rbp                   ;*i2l {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@7 (line 2995)
                                                            ; - test::copyMem_base@73 (line 18)
  0x00007fc348290982:   test   %r10d,%r10d
  0x00007fc348290985:   jl     0x00007fc3482909b2
 ;; B38: #	out( B40 B39 ) <- in( B37 )  Freq: 0.499992
  0x00007fc348290987:   vmovq  %xmm1,%r11
  0x00007fc34829098c:   add    $0xffffffffffffffe0,%r11
  0x00007fc348290990:   cmp    %r11,%rbp
  0x00007fc348290993:   jg     0x00007fc3482909b2
 ;; B39: #	out( B42 ) <- in( B38 )  Freq: 0.249996
  0x00007fc348290995:   mov    0x40(%rsp),%r11              ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc34829099a:   kmovq  %r11,%k7                     ;*invokestatic fromBitsCoerced {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
  0x00007fc34829099f:   vmovdqu8 0x10(%rdi,%rbp,1),%ymm0{%k7}{z};*invokestatic loadMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
                                                            ; - test::copyMem_base@73 (line 18)
  0x00007fc3482909aa:   vmovdqu %ymm0,0x20(%rsp)
  0x00007fc3482909b0:   jmp    0x00007fc348290a1e           ;*iconst_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@17 (line 2995)
                                                            ; - test::copyMem_base@73 (line 18)
 ;; B40: #	out( B83 B41 ) <- in( B38 B37 )  Freq: 0.749988
  0x00007fc3482909b2:   mov    %rax,0x18(%rsp)
  0x00007fc3482909b7:   mov    %r10d,0x10(%rsp)
  0x00007fc3482909bc:   mov    %rbx,0x8(%rsp)
  0x00007fc3482909c1:   mov    %rdi,(%rsp)
  0x00007fc3482909c5:   mov    %r10d,%esi
  0x00007fc3482909c8:   movabs $0x11f9499c8,%rdx            ;   {oop(a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8})}
  0x00007fc3482909d2:   mov    %rax,%rcx
  0x00007fc3482909d5:   mov    $0x1,%r8d
  0x00007fc3482909db:   mov    %r14d,%r9d                   ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc3482909de:   nop
  0x00007fc3482909df:   nop
  0x00007fc3482909e0:   vzeroupper 
  0x00007fc3482909e3:   callq  0x00007fc348290e20           ; ImmutableOopMap {[0]=Oop [8]=Oop [24]=Oop }
                                                            ;*invokestatic checkMaskFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
                                                            ; - test::copyMem_base@73 (line 18)
                                                            ;   {static_call}
  0x00007fc3482909e8:   nopl   0x1000758(%rax,%rax,1)       ;   {other}
 ;; B41: #	out( B42 ) <- in( B40 )  Freq: 0.749973
  0x00007fc3482909f0:   mov    (%rsp),%r10
  0x00007fc3482909f4:   mov    0x40(%rsp),%r11              ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc3482909f9:   kmovq  %r11,%k7                     ;*invokestatic fromBitsCoerced {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
  0x00007fc3482909fe:   vmovdqu8 0x10(%r10,%rbp,1),%ymm0{%k7}{z};*invokestatic loadMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
                                                            ; - test::copyMem_base@73 (line 18)
  0x00007fc348290a09:   vmovdqu %ymm0,0x20(%rsp)
  0x00007fc348290a0f:   mov    0x8(%rsp),%rbx
  0x00007fc348290a14:   mov    0x10(%rsp),%r10d
  0x00007fc348290a19:   mov    0x18(%rsp),%rax
 ;; B42: #	out( B48 B43 ) <- in( B39 B41 )  Freq: 0.999969
  0x00007fc348290a1e:   mov    0x40(%rsp),%r11              ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290a23:   kmovq  %r11,%k7
  0x00007fc348290a28:   kmovq  %r11,%k6                     ;*invokestatic fromBitsCoerced {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
  0x00007fc348290a2d:   kortestd %k7,%k7
  0x00007fc348290a32:   jae    0x00007fc348290a72
 ;; B43: #	out( B77 B44 ) <- in( B42 )  Freq: 0.899972
  0x00007fc348290a34:   mov    0xc(%rbx),%ebp               ; implicit exception: dispatches to 0x00007fc348290d8c
 ;; B44: #	out( B70 B45 ) <- in( B43 )  Freq: 0.899972
  0x00007fc348290a37:   add    $0xffffffe1,%ebp
  0x00007fc348290a3a:   test   %ebp,%ebp
  0x00007fc348290a3c:   nop
  0x00007fc348290a3d:   nop
  0x00007fc348290a3e:   nop
  0x00007fc348290a3f:   nop
  0x00007fc348290a40:   jl     0x00007fc348290cb0
 ;; B45: #	out( B69 B46 ) <- in( B44 )  Freq: 0.899971
  0x00007fc348290a46:   cmp    %ebp,%r10d
  0x00007fc348290a49:   jae    0x00007fc348290c7d
 ;; B46: #	out( B47 ) <- in( B45 )  Freq: 0.89997
  0x00007fc348290a4f:   vmovdqu 0x20(%rsp),%ymm0            ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290a55:   vmovdqu %ymm0,0x10(%rbx,%r10,1)     ;*return {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@56 (line 3413)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B47: #	out( N1 ) <- in( B53 B46 )  Freq: 0.999965
  0x00007fc348290a5c:   vzeroupper 
  0x00007fc348290a5f:   add    $0x60,%rsp
  0x00007fc348290a63:   pop    %rbp
  0x00007fc348290a64:   cmp    0x3b8(%r15),%rsp             ;   {poll_return}
  0x00007fc348290a6b:   ja     0x00007fc348290e00
  0x00007fc348290a71:   retq   
 ;; B48: #	out( B78 B49 ) <- in( B42 )  Freq: 0.099997
  0x00007fc348290a72:   mov    0xc(%rbx),%r9d               ; implicit exception: dispatches to 0x00007fc348290db8
 ;; B49: #	out( B51 B50 ) <- in( B48 )  Freq: 0.0999969
  0x00007fc348290a76:   test   %r10d,%r10d
  0x00007fc348290a79:   jl     0x00007fc348290a87
 ;; B50: #	out( B53 B51 ) <- in( B49 )  Freq: 0.0499984
  0x00007fc348290a7b:   movslq %r9d,%r11
  0x00007fc348290a7e:   add    $0xffffffffffffffe0,%r11
  0x00007fc348290a82:   cmp    %r11,%rbp                    ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290a85:   jle    0x00007fc348290ac0           ;*iconst_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@33 (line 3408)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B51: #	out( B82 B52 ) <- in( B50 B49 )  Freq: 0.0749976
  0x00007fc348290a87:   mov    %rax,%rcx
  0x00007fc348290a8a:   mov    %rbx,(%rsp)
  0x00007fc348290a8e:   mov    %r10d,%esi
  0x00007fc348290a91:   movabs $0x11f9499c8,%rdx            ;   {oop(a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8})}
  0x00007fc348290a9b:   mov    $0x1,%r8d
  0x00007fc348290aa1:   mov    %r10d,0x8(%rsp)
  0x00007fc348290aa6:   mov    %rax,0x10(%rsp)              ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290aab:   nop
  0x00007fc348290aac:   vzeroupper 
  0x00007fc348290aaf:   callq  0x00007fc348290e20           ; ImmutableOopMap {[0]=Oop [16]=Oop }
                                                            ;*invokestatic checkMaskFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {static_call}
  0x00007fc348290ab4:   nopl   0x2000824(%rax,%rax,1)       ;   {other}
 ;; B52: #	out( B53 ) <- in( B51 )  Freq: 0.0749961
  0x00007fc348290abc:   mov    (%rsp),%rbx
 ;; B53: #	out( B47 ) <- in( B52 B50 )  Freq: 0.0999954
  0x00007fc348290ac0:   vmovdqu 0x20(%rsp),%ymm0
  0x00007fc348290ac6:   mov    0x40(%rsp),%r10              ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290acb:   kmovq  %r10,%k7                     ;*invokestatic fromBitsCoerced {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
  0x00007fc348290ad0:   vmovdqu8 %ymm0,0x10(%rbx,%rbp,1){%k7}
  0x00007fc348290adb:   nop
  0x00007fc348290adc:   nop
  0x00007fc348290add:   nop
  0x00007fc348290ade:   nop
  0x00007fc348290adf:   nop
  0x00007fc348290ae0:   jmpq   0x00007fc348290a5c
 ;; B54: #	out( B32 ) <- in( B2 )  Freq: 0.003899
  0x00007fc348290ae5:   mov    %r14d,%ebp
  0x00007fc348290ae8:   mov    %rsi,%rbx
  0x00007fc348290aeb:   jmpq   0x00007fc348290858
 ;; B55: #	out( B80 B56 ) <- in( B33 )  Freq: 0.000100015
  0x00007fc348290af0:   mov    %r10d,0xc(%rsp)
  0x00007fc348290af5:   vmovsd %xmm1,0x10(%rsp)
  0x00007fc348290afb:   mov    %r14d,0x8(%rsp)
  0x00007fc348290b00:   mov    %rbx,(%rsp)
  0x00007fc348290b04:   mov    %rdi,%rbp
  0x00007fc348290b07:   movabs $0x800040200,%rsi            ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {metadata({type array bool})}
  0x00007fc348290b11:   mov    $0x20,%edx
  0x00007fc348290b16:   nop
  0x00007fc348290b17:   nop
  0x00007fc348290b18:   vzeroupper 
  0x00007fc348290b1b:   callq  0x00007fc3481c3620           ; ImmutableOopMap {rbp=Oop [0]=Oop }
                                                            ;*invokestatic fromBitsCoerced {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
                                                            ;   {runtime_call _new_array_Java}
  0x00007fc348290b20:   nopl   0x3000890(%rax,%rax,1)       ;   {other}
 ;; B56: #	out( B35 ) <- in( B55 )  Freq: 0.000100013
  0x00007fc348290b28:   mov    %rbp,%rdi
  0x00007fc348290b2b:   mov    (%rsp),%rbx
  0x00007fc348290b2f:   mov    0x8(%rsp),%r14d
  0x00007fc348290b34:   vmovsd 0x10(%rsp),%xmm1
  0x00007fc348290b3a:   mov    0xc(%rsp),%r10d
  0x00007fc348290b3f:   mov    %rax,%r9
  0x00007fc348290b42:   jmpq   0x00007fc3482908e3
 ;; B57: #	out( B79 B58 ) <- in( B35 )  Freq: 0.000100015
  0x00007fc348290b47:   mov    %r9,0x18(%rsp)
  0x00007fc348290b4c:   mov    %r10d,0xc(%rsp)
  0x00007fc348290b51:   vmovsd %xmm1,0x10(%rsp)
  0x00007fc348290b57:   mov    %r14d,0x8(%rsp)
  0x00007fc348290b5c:   mov    %rbx,(%rsp)
  0x00007fc348290b60:   mov    %rdi,%rbp
  0x00007fc348290b63:   movabs $0x8000de750,%rsi            ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {metadata('jdk/incubator/vector/Byte256Vector$Byte256Mask')}
  0x00007fc348290b6d:   nop
  0x00007fc348290b6e:   nop
  0x00007fc348290b6f:   nop
  0x00007fc348290b70:   vzeroupper 
  0x00007fc348290b73:   callq  0x00007fc3481c3920           ; ImmutableOopMap {rbp=Oop [0]=Oop [24]=Oop }
                                                            ;*invokestatic fromBitsCoerced {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
                                                            ;   {runtime_call _new_instance_Java}
  0x00007fc348290b78:   nopl   0x40008e8(%rax,%rax,1)       ;   {other}
 ;; B58: #	out( B37 ) <- in( B57 )  Freq: 0.000100013
  0x00007fc348290b80:   mov    %rbp,%rdi
  0x00007fc348290b83:   mov    (%rsp),%rbx
  0x00007fc348290b87:   mov    0x8(%rsp),%r14d
  0x00007fc348290b8c:   vmovsd 0x10(%rsp),%xmm1
  0x00007fc348290b92:   mov    0xc(%rsp),%r10d
  0x00007fc348290b97:   mov    0x18(%rsp),%r9
  0x00007fc348290b9c:   nop
  0x00007fc348290b9d:   nop
  0x00007fc348290b9e:   nop
  0x00007fc348290b9f:   nop
  0x00007fc348290ba0:   jmpq   0x00007fc348290936
 ;; B59: #	out( B60 ) <- in( B4 )  Freq: 1.00933e-06
  0x00007fc348290ba5:   mov    %rsi,%rbx
 ;; B60: #	out( N1 ) <- in( B7 B64 B59 B61 B9 B8 B6 )  Freq: 7.03881e-06
  0x00007fc348290ba8:   mov    $0xffffff76,%esi
  0x00007fc348290bad:   mov    %rbx,%rbp
  0x00007fc348290bb0:   mov    %rdi,(%rsp)
  0x00007fc348290bb4:   mov    %eax,0x8(%rsp)
  0x00007fc348290bb8:   vzeroupper 
  0x00007fc348290bbb:   callq  0x00007fc34819fb20           ; ImmutableOopMap {rbp=Oop [0]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::copyMem_base@13 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fc348290bc0:   nopl   0x5000930(%rax,%rax,1)       ;   {other}
  0x00007fc348290bc8:   movabs $0x7fc34cf214a0,%rdi         ;   {external_word}
  0x00007fc348290bd2:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348290bd6:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290bdb:   hlt    
 ;; B61: #	out( B60 ) <- in( B5 )  Freq: 1.00933e-06
  0x00007fc348290bdc:   mov    %rsi,%rbx
  0x00007fc348290bdf:   nop
  0x00007fc348290be0:   jmp    0x00007fc348290ba8
 ;; B62: #	out( N1 ) <- in( B10 )  Freq: 1.00932e-06
  0x00007fc348290be2:   mov    $0xffffff6e,%esi
  0x00007fc348290be7:   mov    %rbx,%rbp
  0x00007fc348290bea:   mov    %rdi,(%rsp)
  0x00007fc348290bee:   mov    %eax,0x8(%rsp)               ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290bf2:   nop
  0x00007fc348290bf3:   nop
  0x00007fc348290bf4:   vzeroupper 
  0x00007fc348290bf7:   callq  0x00007fc34819fb20           ; ImmutableOopMap {rbp=Oop [0]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::copyMem_base@13 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fc348290bfc:   nopl   0x600096c(%rax,%rax,1)       ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
  0x00007fc348290c04:   movabs $0x7fc34cf214a0,%rdi         ;   {external_word}
  0x00007fc348290c0e:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348290c12:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290c17:   hlt                                 ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
 ;; B63: #	out( B23 ) <- in( B11 )  Freq: 1.00932e-06
  0x00007fc348290c18:   mov    $0x20,%esi
  0x00007fc348290c1d:   xor    %edx,%edx
  0x00007fc348290c1f:   nop
  0x00007fc348290c20:   jmpq   0x00007fc3482907ef
 ;; B64: #	out( B60 ) <- in( B3 )  Freq: 9.961e-07
  0x00007fc348290c25:   mov    %rsi,%rbx
  0x00007fc348290c28:   jmpq   0x00007fc348290ba8
 ;; B65: #	out( N1 ) <- in( B12 )  Freq: 9.96091e-07
  0x00007fc348290c2d:   movabs $0x7fc34cf99480,%rdi         ;   {external_word}
  0x00007fc348290c37:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348290c3b:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290c40:   hlt    
 ;; B66: #	out( N1 ) <- in( B13 )  Freq: 9.9609e-07
  0x00007fc348290c41:   movabs $0x7fc34cf99480,%rdi         ;   {external_word}
  0x00007fc348290c4b:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348290c4f:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290c54:   hlt    
 ;; B67: #	out( N1 ) <- in( B14 )  Freq: 9.96089e-07
  0x00007fc348290c55:   movabs $0x7fc34cf99480,%rdi         ;   {external_word}
  0x00007fc348290c5f:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348290c63:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290c68:   hlt    
 ;; B68: #	out( N1 ) <- in( B15 )  Freq: 9.96088e-07
  0x00007fc348290c69:   movabs $0x7fc34cf99480,%rdi         ;   {external_word}
  0x00007fc348290c73:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348290c77:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290c7c:   hlt    
 ;; B69: #	out( N1 ) <- in( B45 )  Freq: 9.11921e-07
  0x00007fc348290c7d:   mov    $0xffffffe4,%esi
  0x00007fc348290c82:   mov    %rbx,(%rsp)
  0x00007fc348290c86:   mov    %r10d,0x8(%rsp)              ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290c8b:   nop
  0x00007fc348290c8c:   vzeroupper 
  0x00007fc348290c8f:   callq  0x00007fc34819fb20           ; ImmutableOopMap {[0]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fc348290c94:   nopl   0x7000a04(%rax,%rax,1)       ;   {other}
  0x00007fc348290c9c:   movabs $0x7fc34cf214a0,%rdi         ;   {external_word}
  0x00007fc348290ca6:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348290caa:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290caf:   hlt    
 ;; B70: #	out( N1 ) <- in( B44 )  Freq: 8.99972e-07
  0x00007fc348290cb0:   mov    $0xffffffcc,%esi
  0x00007fc348290cb5:   mov    %rbx,(%rsp)
  0x00007fc348290cb9:   mov    %r10d,0x8(%rsp)              ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290cbe:   nop
  0x00007fc348290cbf:   nop
  0x00007fc348290cc0:   vzeroupper 
  0x00007fc348290cc3:   callq  0x00007fc34819fb20           ; ImmutableOopMap {[0]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fc348290cc8:   nopl   0x8000a38(%rax,%rax,1)       ;   {other}
  0x00007fc348290cd0:   movabs $0x7fc34cf214a0,%rdi         ;   {external_word}
  0x00007fc348290cda:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348290cde:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290ce3:   hlt    
 ;; B71: #	out( N1 ) <- in( B24 )  Freq: 5.04657e-07
  0x00007fc348290ce4:   movabs $0x7fc34cf99480,%rdi         ;   {external_word}
  0x00007fc348290cee:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348290cf2:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290cf7:   hlt    
 ;; B72: #	out( N1 ) <- in( B25 )  Freq: 5.04657e-07
  0x00007fc348290cf8:   movabs $0x7fc34cf99480,%rdi         ;   {external_word}
  0x00007fc348290d02:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348290d06:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290d0b:   hlt    
 ;; B73: #	out( N1 ) <- in( B26 )  Freq: 5.04656e-07
  0x00007fc348290d0c:   movabs $0x7fc34cf99480,%rdi         ;   {external_word}
  0x00007fc348290d16:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348290d1a:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290d1f:   hlt    
 ;; B74: #	out( N1 ) <- in( B27 )  Freq: 5.04656e-07
  0x00007fc348290d20:   movabs $0x7fc34cf99480,%rdi         ;   {external_word}
  0x00007fc348290d2a:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348290d2e:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290d33:   hlt    
 ;; B75: #	out( N1 ) <- in( B32 )  Freq: 4.99992e-07
  0x00007fc348290d34:   mov    $0xffffff45,%esi             ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290d39:   nop
  0x00007fc348290d3a:   nop
  0x00007fc348290d3b:   nop
  0x00007fc348290d3c:   vzeroupper 
  0x00007fc348290d3f:   callq  0x00007fc34819fb20           ; ImmutableOopMap {}
                                                            ;*ifle {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::copyMem_base@49 (line 16)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fc348290d44:   nopl   0x9000ab4(%rax,%rax,1)       ;   {other}
  0x00007fc348290d4c:   movabs $0x7fc34cf214a0,%rdi         ;   {external_word}
  0x00007fc348290d56:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348290d5a:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290d5f:   hlt    
 ;; B76: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
  0x00007fc348290d60:   mov    $0xfffffff6,%esi             ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290d65:   nop
  0x00007fc348290d66:   nop
  0x00007fc348290d67:   nop
  0x00007fc348290d68:   vzeroupper 
  0x00007fc348290d6b:   callq  0x00007fc34819fb20           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@7 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fc348290d70:   nopl   0xa000ae0(%rax,%rax,1)       ;   {other}
  0x00007fc348290d78:   movabs $0x7fc34cf214a0,%rdi         ;   {external_word}
  0x00007fc348290d82:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348290d86:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290d8b:   hlt    
 ;; B77: #	out( N1 ) <- in( B43 )  Freq: 9.11923e-07
  0x00007fc348290d8c:   mov    $0xfffffff6,%esi             ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290d91:   nop
  0x00007fc348290d92:   nop
  0x00007fc348290d93:   nop
  0x00007fc348290d94:   vzeroupper 
  0x00007fc348290d97:   callq  0x00007fc34819fb20           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@6 (line 3364)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fc348290d9c:   nopl   0xb000b0c(%rax,%rax,1)       ;   {other}
  0x00007fc348290da4:   movabs $0x7fc34cf214a0,%rdi         ;   {external_word}
  0x00007fc348290dae:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348290db2:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290db7:   hlt    
 ;; B78: #	out( N1 ) <- in( B48 )  Freq: 1.01325e-07
  0x00007fc348290db8:   mov    $0xfffffff6,%esi             ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fc348290dbd:   nop
  0x00007fc348290dbe:   nop
  0x00007fc348290dbf:   nop
  0x00007fc348290dc0:   vzeroupper 
  0x00007fc348290dc3:   callq  0x00007fc34819fb20           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@31 (line 3408)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fc348290dc8:   nopl   0xc000b38(%rax,%rax,1)       ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
  0x00007fc348290dd0:   movabs $0x7fc34cf214a0,%rdi         ;   {external_word}
  0x00007fc348290dda:   and    $0xfffffffffffffff0,%rsp
  0x00007fc348290dde:   callq  0x00007fc34c632af0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fc348290de3:   hlt    
 ;; B79: #	out( B81 ) <- in( B57 )  Freq: 1.00015e-09
  0x00007fc348290de4:   jmp    0x00007fc348290de6
 ;; B80: #	out( B81 ) <- in( B55 )  Freq: 1.00015e-09
 ;; B81: #	out( B84 ) <- in( B80 B79 )  Freq: 2.0003e-09
  0x00007fc348290de6:   mov    %rax,%rsi
  0x00007fc348290de9:   jmp    0x00007fc348290df3           ;*invokestatic checkMaskFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B82: #	out( B84 ) <- in( B51 )  Freq: 7.49976e-07
  0x00007fc348290deb:   mov    %rax,%rsi
  0x00007fc348290dee:   jmp    0x00007fc348290df3           ;*invokestatic checkMaskFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
                                                            ; - test::copyMem_base@73 (line 18)
 ;; B83: #	out( B84 ) <- in( B40 )  Freq: 7.49988e-06
  0x00007fc348290df0:   mov    %rax,%rsi                    ;*invokevirtual intoArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@26 (line 13)
 ;; B84: #	out( N1 ) <- in( B83 B82 B81 )  Freq: 8.25186e-06
  0x00007fc348290df3:   vzeroupper 
  0x00007fc348290df6:   add    $0x60,%rsp
  0x00007fc348290dfa:   pop    %rbp
  0x00007fc348290dfb:   jmpq   0x00007fc3481cc4a0           ;*invokestatic storeMasked {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
                                                            ; - jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call _rethrow_Java}
  0x00007fc348290e00:   movabs $0x7fc348290a64,%r10         ;   {internal_word}
  0x00007fc348290e0a:   mov    %r10,0x3d0(%r15)
  0x00007fc348290e11:   jmpq   0x00007fc34819e9a0           ;   {runtime_call SafepointBlob}
  0x00007fc348290e16:   callq  Stub::nmethod_entry_barrier  ;   {runtime_call StubRoutines (final stubs)}
  0x00007fc348290e1b:   jmpq   0x00007fc34829057a
[Stub Code]
  0x00007fc348290e20:   movabs $0x7fc2fc7872b8,%rbx         ;   {no_reloc}
  0x00007fc348290e2a:   jmpq   0x00007fc34824307c           ;   {runtime_call I2C/C2I adapters}
[Exception Handler]
  0x00007fc348290e2f:   jmpq   0x00007fc3480aa4a0           ;   {runtime_call ExceptionBlob}
[Deopt Handler Code]
  0x00007fc348290e34:   callq  0x00007fc348290e39
  0x00007fc348290e39:   subq   $0x5,(%rsp)
  0x00007fc348290e3e:   jmpq   0x00007fc34819fe40           ;   {runtime_call DeoptimizationBlob}
  0x00007fc348290e43:   hlt    
  0x00007fc348290e44:   hlt    
  0x00007fc348290e45:   hlt    
  0x00007fc348290e46:   hlt    
  0x00007fc348290e47:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007fc348290e48:   0x000000011f9499c8 a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
  0x00007fc348290e50:   0x000000011f949a18 a 'java/lang/Class'{0x000000011f949a18} = 'jdk/incubator/vector/Byte256Vector'
  0x00007fc348290e58:   0x000000011f949aa8 a 'java/lang/Class'{0x000000011f949aa8} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
  0x00007fc348290e60:   0x000000011f0001c0 a 'java/lang/Class'{0x000000011f0001c0} = byte
  0x00007fc348290e68:   0x000000011f977080 a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977080}
  0x00007fc348290e70:   0x000000011f81fec8 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f81fec8}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007fc348290e78:   0x00007fc2fc603650 {method} {0x00007fc2fc603650} 'copyMem_base' '([B[B)V' in 'test'
  0x00007fc348290e80:   0x00007fc2fc7852f8 {method} {0x00007fc2fc7852f8} 'intoArray' '([BILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/ByteVector'
  0x00007fc348290e88:   0x00007fc2fc6a3550 {method} {0x00007fc2fc6a3550} 'intoArray0' '([BILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/Byte256Vector'
  0x00007fc348290e90:   0x00007fc2fc786c70 {method} {0x00007fc2fc786c70} 'intoArray0Template' '(Ljava/lang/Class;[BILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/ByteVector'
  0x00007fc348290e98:   0x00007fc2fc784688 {method} {0x00007fc2fc784688} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[BILjdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
  0x00007fc348290ea0:   0x00007fc2fc784540 {method} {0x00007fc2fc784540} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
  0x00007fc348290ea8:   0x00007fc2fc6a2e18 {method} {0x00007fc2fc6a2e18} 'fromArray0' '([BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/Byte256Vector'
  0x00007fc348290eb0:   0x00007fc2fc785ed8 {method} {0x00007fc2fc785ed8} 'fromArray0Template' '([BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
  0x00007fc348290eb8:   0x00007fc2fc7851b0 {method} {0x00007fc2fc7851b0} 'intoArray' '([BI)V' in 'jdk/incubator/vector/ByteVector'
  0x00007fc348290ec0:   0x00007fc2fc7876f8 {method} {0x00007fc2fc7876f8} 'arrayAddress' '([BI)J' in 'jdk/incubator/vector/ByteVector'
  0x00007fc348290ec8:   0x00007fc2fc681bd8 {method} {0x00007fc2fc681bd8} 'fromLong' '(Ljdk/incubator/vector/VectorSpecies;J)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
  0x00007fc348290ed0:   0x0000000800040200 {type array bool}
  0x00007fc348290ed8:   0x00000008000de750 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
  0x00007fc348290ee0:   0x00007fc2fc6a2f30 {method} {0x00007fc2fc6a2f30} 'fromArray0' '([BILjdk/incubator/vector/VectorMask;I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/Byte256Vector'
  0x00007fc348290ee8:   0x00007fc2fc7860e8 {method} {0x00007fc2fc7860e8} 'fromArray0Template' '(Ljava/lang/Class;[BILjdk/incubator/vector/VectorMask;I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
  0x00007fc348290ef0:   0x00007fc2fc6d47b0 {method} {0x00007fc2fc6d47b0} 'indexInRange' '(JJJ)Z' in 'jdk/incubator/vector/VectorIntrinsics'
  0x00007fc348290ef8:   0x00007fc2fc6d48e8 {method} {0x00007fc2fc6d48e8} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
  0x00007fc348290f00:   0x00007fc2fc1a0cb0 {method} {0x00007fc2fc1a0cb0} 'checkIndex' '(II)I' in 'java/util/Objects'
  0x00007fc348290f08:   0x00000008000d9bc0 'jdk/incubator/vector/AbstractSpecies'
  0x00007fc348290f10:   0x00000008000d9fb0 'jdk/incubator/vector/ByteVector$ByteSpecies'
  0x00007fc348290f18:   0x00007fc2fc7e3cf0 {method} {0x00007fc2fc7e3cf0} 'loopBound' '(I)I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007fc348290f20:   0x00000008000d97a8 'jdk/incubator/vector/VectorSpecies'
  0x00007fc348290f28:   0x00007fc2fc7e1750 {method} {0x00007fc2fc7e1750} 'loopBound' '(I)I' in 'jdk/incubator/vector/VectorSpecies'
  0x00007fc348290f30:   0x00007fc2fc7e30d0 {method} {0x00007fc2fc7e30d0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007fc348290f38:   0x00007fc2fc7e1558 {method} {0x00007fc2fc7e1558} 'length' '()I' in 'jdk/incubator/vector/VectorSpecies'
  0x00007fc348290f40:   0x00000008000dbee0 'jdk/incubator/vector/VectorMask'
  0x00007fc348290f48:   0x00007fc2fc6aa5c0 {method} {0x00007fc2fc6aa5c0} 'allTrue' '()Z' in 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
  0x00007fc348290f50:   0x00007fc2fc681fe0 {method} {0x00007fc2fc681fe0} 'allTrue' '()Z' in 'jdk/incubator/vector/VectorMask'
  0x00007fc348290f58:   0x00007fc2fc7fec78 {method} {0x00007fc2fc7fec78} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
  0x00007fc348290f60:   0x00007fc2fc682a10 {method} {0x00007fc2fc682a10} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007fc34829055f offset=ffffffff bits=0):
PcDesc(pc=0x00007fc34829057a offset=1a bits=0):
   test::copyMem_base@-1 (line 10)
PcDesc(pc=0x00007fc348290584 offset=24 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290587 offset=27 bits=0):
   jdk.incubator.vector.ByteVector::fromArray@16 (line 2995)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fc348290614 offset=b4 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290619 offset=b9 bits=0):
   jdk.incubator.vector.ByteVector::fromArray0Template@32 (line 3730)
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
   test::copyMem_base@21 (line 12)
PcDesc(pc=0x00007fc34829061e offset=be bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc348290692 offset=132 bits=0):
   test::copyMem_base@16 (line 12)
PcDesc(pc=0x00007fc34829069b offset=13b bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc3482906a1 offset=141 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc3482906a7 offset=147 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc3482906ad offset=14d bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc3482906b3 offset=153 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc3482906b9 offset=159 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc3482906bf offset=15f bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc3482906c5 offset=165 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc3482906ce offset=16e bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc3482906d7 offset=177 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc3482906e0 offset=180 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc3482906e9 offset=189 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc3482906f2 offset=192 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc3482906fb offset=19b bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc348290704 offset=1a4 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34829070d offset=1ad bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc348290716 offset=1b6 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34829071f offset=1bf bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc348290728 offset=1c8 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290731 offset=1d1 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc34829073a offset=1da bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290743 offset=1e3 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc34829074c offset=1ec bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290755 offset=1f5 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc34829075e offset=1fe bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290767 offset=207 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc348290770 offset=210 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290779 offset=219 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc348290782 offset=222 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34829078b offset=22b bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc348290794 offset=234 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34829079d offset=23d bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc3482907ac offset=24c bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fc3482907b3 offset=253 bits=1):
   test::copyMem_base@40 (line 11)  reexecute=true
   Locals
    - l0: reg rbx [6],oop
    - l1: reg rdi [14],oop
    - l2: reg rsi [12],int
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fc34829082c offset=2cc bits=0):
   test::copyMem_base@16 (line 12)
PcDesc(pc=0x00007fc34829082f offset=2cf bits=0):
   jdk.incubator.vector.ByteVector::arrayAddress@4 (line 3956)
   jdk.incubator.vector.ByteVector::fromArray0Template@20 (line 3732)
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
   test::copyMem_base@21 (line 12)
PcDesc(pc=0x00007fc348290836 offset=2d6 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34829083d offset=2dd bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc34829085a offset=2fa bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290866 offset=306 bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fc348290882 offset=322 bits=0):
   jdk.incubator.vector.VectorMask::fromLong@17 (line 241)
   test::copyMem_base@61 (line 17)
PcDesc(pc=0x00007fc3482908e3 offset=383 bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fc3482908f6 offset=396 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc3482908fb offset=39b bits=0):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
   test::copyMem_base@61 (line 17)
PcDesc(pc=0x00007fc348290919 offset=3b9 bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fc34829097f offset=41f bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290982 offset=422 bits=0):
   jdk.incubator.vector.ByteVector::fromArray@7 (line 2995)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fc34829099a offset=43a bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc34829099f offset=43f bits=0):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
   test::copyMem_base@61 (line 17)
PcDesc(pc=0x00007fc3482909aa offset=44a bits=0):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fc3482909b2 offset=452 bits=0):
   jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
   jdk.incubator.vector.ByteVector::fromArray@17 (line 2995)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fc3482909de offset=47e bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc3482909e8 offset=488 bits=0):
   jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
   Locals
    - l0: empty
    - l1: stack[0],oop
    - l2: stack[16]
    - l3: stack[24],oop
    - l4: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[8],oop
    - l1: empty
    - l2: stack[16]
    - l3: empty
    - l4: stack[24],oop
PcDesc(pc=0x00007fc3482909f9 offset=499 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc3482909fe offset=49e bits=0):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
   test::copyMem_base@61 (line 17)
PcDesc(pc=0x00007fc348290a09 offset=4a9 bits=0):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fc348290a23 offset=4c3 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290a2d offset=4cd bits=0):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
   test::copyMem_base@61 (line 17)
PcDesc(pc=0x00007fc348290a55 offset=4f5 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290a5c offset=4fc bits=0):
   jdk.incubator.vector.ByteVector::intoArray@56 (line 3413)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290a85 offset=525 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290a87 offset=527 bits=0):
   jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
   jdk.incubator.vector.ByteVector::intoArray@33 (line 3408)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290aab offset=54b bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290ab4 offset=554 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
   Locals
    - l0: obj[418]
    - l1: stack[0],oop
    - l2: stack[8]
    - l3: stack[16],oop
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 418: jdk.incubator.vector.Byte256Vector stack[32],vector
PcDesc(pc=0x00007fc348290acb offset=56b bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290ad0 offset=570 bits=0):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
   test::copyMem_base@61 (line 17)
PcDesc(pc=0x00007fc348290b11 offset=5b1 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290b20 offset=5c0 bits=5):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949aa8} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @1: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @2: 32
    - @3: 0
    - @4: stack[64],long
    - @5: 1
    - @6: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
    - @7: a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977080}
   test::copyMem_base@61 (line 17)
   Locals
    - l0: stack[0],oop
    - l1: reg rbp [10],oop
    - l2: stack[12]
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fc348290b6d offset=60d bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290b78 offset=618 bits=5):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949aa8} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @1: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @2: 32
    - @3: 0
    - @4: stack[64],long
    - @5: 1
    - @6: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
    - @7: a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977080}
   test::copyMem_base@61 (line 17)
   Locals
    - l0: stack[0],oop
    - l1: reg rbp [10],oop
    - l2: stack[12]
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fc348290bc0 offset=660 bits=1):
   test::copyMem_base@13 (line 11)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: stack[8]
PcDesc(pc=0x00007fc348290bf2 offset=692 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290bfc offset=69c bits=1):
   test::copyMem_base@13 (line 11)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: stack[8]
PcDesc(pc=0x00007fc348290c04 offset=6a4 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290c18 offset=6b8 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc348290c8b offset=72b bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290c94 offset=734 bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[8]
    - @1: reg rbp [10],int
    - @2: nullptr
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
   Locals
    - l0: obj[448]
    - l1: stack[0],oop
    - l2: empty
    - l3: empty
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 448: jdk.incubator.vector.Byte256Vector stack[32],vector
PcDesc(pc=0x00007fc348290cbe offset=75e bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290cc8 offset=768 bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[8]
    - @1: reg rbp [10],int
    - @2: nullptr
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
   Locals
    - l0: obj[390]
    - l1: stack[0],oop
    - l2: empty
    - l3: empty
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 390: jdk.incubator.vector.Byte256Vector stack[32],vector
PcDesc(pc=0x00007fc348290d39 offset=7d9 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290d44 offset=7e4 bits=1):
   test::copyMem_base@49 (line 16)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],int
PcDesc(pc=0x00007fc348290d65 offset=805 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290d70 offset=810 bits=0):
   test::copyMem_base@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: nullptr
PcDesc(pc=0x00007fc348290d91 offset=831 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290d9c offset=83c bits=0):
   jdk.incubator.vector.ByteVector::intoArray@6 (line 3364)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: nullptr
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fc348290dbd offset=85d bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290dc8 offset=868 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@31 (line 3408)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: empty
    - @3: empty
    - @4: nullptr
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fc348290dd0 offset=870 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290deb offset=88b bits=0):
   jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290df0 offset=890 bits=0):
   jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fc348290df3 offset=893 bits=0):
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fc348290e00 offset=8a0 bits=0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fc348290e49 offset=8e9 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 13 OopMaps

ImmutableOopMap {rbx=Oop rdi=Oop } pc offsets: 595 
ImmutableOopMap {[0]=Oop [8]=Oop [24]=Oop } pc offsets: 1160 
ImmutableOopMap {[0]=Oop [16]=Oop } pc offsets: 1364 
ImmutableOopMap {rbp=Oop [0]=Oop } pc offsets: 1472 
ImmutableOopMap {rbp=Oop [0]=Oop [24]=Oop } pc offsets: 1560 
ImmutableOopMap {rbp=Oop [0]=Oop } pc offsets: 1632 1692 
ImmutableOopMap {[0]=Oop } pc offsets: 1844 1896 
ImmutableOopMap {} pc offsets: 2020 2064 2108 2152 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007fc34829057a offset=1a):
   test::copyMem_base@-1 (line 10)
ScopeDesc(pc=0x00007fc348290584 offset=24):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290584 offset=24):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290584 offset=24):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290584 offset=24):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290587 offset=27):
   jdk.incubator.vector.ByteVector::fromArray@16 (line 2995)
ScopeDesc(pc=0x00007fc348290587 offset=27):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fc348290614 offset=b4):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290614 offset=b4):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290614 offset=b4):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290614 offset=b4):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290619 offset=b9):
   jdk.incubator.vector.ByteVector::fromArray0Template@32 (line 3730)
ScopeDesc(pc=0x00007fc348290619 offset=b9):
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
ScopeDesc(pc=0x00007fc348290619 offset=b9):
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
ScopeDesc(pc=0x00007fc348290619 offset=b9):
   test::copyMem_base@21 (line 12)
ScopeDesc(pc=0x00007fc34829061e offset=be):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc34829061e offset=be):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc348290692 offset=132):
   test::copyMem_base@16 (line 12)
ScopeDesc(pc=0x00007fc34829069b offset=13b):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc34829069b offset=13b):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc34829069b offset=13b):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc34829069b offset=13b):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc3482906a1 offset=141):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc3482906a1 offset=141):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc3482906a7 offset=147):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc3482906a7 offset=147):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc3482906a7 offset=147):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc3482906a7 offset=147):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc3482906ad offset=14d):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc3482906ad offset=14d):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc3482906b3 offset=153):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc3482906b3 offset=153):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc3482906b3 offset=153):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc3482906b3 offset=153):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc3482906b9 offset=159):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc3482906b9 offset=159):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc3482906bf offset=15f):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc3482906bf offset=15f):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc3482906bf offset=15f):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc3482906bf offset=15f):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc3482906c5 offset=165):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc3482906c5 offset=165):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc3482906ce offset=16e):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc3482906ce offset=16e):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc3482906ce offset=16e):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc3482906ce offset=16e):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc3482906d7 offset=177):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc3482906d7 offset=177):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc3482906e0 offset=180):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc3482906e0 offset=180):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc3482906e0 offset=180):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc3482906e0 offset=180):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc3482906e9 offset=189):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc3482906e9 offset=189):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc3482906f2 offset=192):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc3482906f2 offset=192):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc3482906f2 offset=192):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc3482906f2 offset=192):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc3482906fb offset=19b):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc3482906fb offset=19b):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc348290704 offset=1a4):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290704 offset=1a4):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290704 offset=1a4):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290704 offset=1a4):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc34829070d offset=1ad):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc34829070d offset=1ad):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc348290716 offset=1b6):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290716 offset=1b6):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290716 offset=1b6):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290716 offset=1b6):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc34829071f offset=1bf):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc34829071f offset=1bf):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc348290728 offset=1c8):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290728 offset=1c8):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290728 offset=1c8):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290728 offset=1c8):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290731 offset=1d1):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc348290731 offset=1d1):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc34829073a offset=1da):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc34829073a offset=1da):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc34829073a offset=1da):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc34829073a offset=1da):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290743 offset=1e3):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc348290743 offset=1e3):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc34829074c offset=1ec):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc34829074c offset=1ec):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc34829074c offset=1ec):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc34829074c offset=1ec):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290755 offset=1f5):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc348290755 offset=1f5):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc34829075e offset=1fe):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc34829075e offset=1fe):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc34829075e offset=1fe):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc34829075e offset=1fe):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290767 offset=207):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc348290767 offset=207):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc348290770 offset=210):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290770 offset=210):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290770 offset=210):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290770 offset=210):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290779 offset=219):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc348290779 offset=219):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc348290782 offset=222):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290782 offset=222):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290782 offset=222):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290782 offset=222):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc34829078b offset=22b):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc34829078b offset=22b):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc348290794 offset=234):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290794 offset=234):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290794 offset=234):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290794 offset=234):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc34829079d offset=23d):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc34829079d offset=23d):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc3482907ac offset=24c):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fc3482907b3 offset=253):
   test::copyMem_base@40 (line 11)  reexecute=true
   Locals
    - l0: reg rbx [6],oop
    - l1: reg rdi [14],oop
    - l2: reg rsi [12],int
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fc34829082c offset=2cc):
   test::copyMem_base@16 (line 12)
ScopeDesc(pc=0x00007fc34829082f offset=2cf):
   jdk.incubator.vector.ByteVector::arrayAddress@4 (line 3956)
ScopeDesc(pc=0x00007fc34829082f offset=2cf):
   jdk.incubator.vector.ByteVector::fromArray0Template@20 (line 3732)
ScopeDesc(pc=0x00007fc34829082f offset=2cf):
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
ScopeDesc(pc=0x00007fc34829082f offset=2cf):
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
ScopeDesc(pc=0x00007fc34829082f offset=2cf):
   test::copyMem_base@21 (line 12)
ScopeDesc(pc=0x00007fc348290836 offset=2d6):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290836 offset=2d6):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290836 offset=2d6):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290836 offset=2d6):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc34829083d offset=2dd):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc34829083d offset=2dd):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc34829085a offset=2fa):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc34829085a offset=2fa):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc34829085a offset=2fa):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc34829085a offset=2fa):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290866 offset=306):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fc348290882 offset=322):
   jdk.incubator.vector.VectorMask::fromLong@17 (line 241)
ScopeDesc(pc=0x00007fc348290882 offset=322):
   test::copyMem_base@61 (line 17)
ScopeDesc(pc=0x00007fc3482908e3 offset=383):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fc3482908f6 offset=396):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc3482908f6 offset=396):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc3482908f6 offset=396):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc3482908f6 offset=396):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc3482908fb offset=39b):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
ScopeDesc(pc=0x00007fc3482908fb offset=39b):
   test::copyMem_base@61 (line 17)
ScopeDesc(pc=0x00007fc348290919 offset=3b9):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fc34829097f offset=41f):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc34829097f offset=41f):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc34829097f offset=41f):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc34829097f offset=41f):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290982 offset=422):
   jdk.incubator.vector.ByteVector::fromArray@7 (line 2995)
ScopeDesc(pc=0x00007fc348290982 offset=422):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fc34829099a offset=43a):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc34829099a offset=43a):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc34829099a offset=43a):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc34829099a offset=43a):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc34829099f offset=43f):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
ScopeDesc(pc=0x00007fc34829099f offset=43f):
   test::copyMem_base@61 (line 17)
ScopeDesc(pc=0x00007fc3482909aa offset=44a):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
ScopeDesc(pc=0x00007fc3482909aa offset=44a):
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
ScopeDesc(pc=0x00007fc3482909aa offset=44a):
   jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
ScopeDesc(pc=0x00007fc3482909aa offset=44a):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fc3482909b2 offset=452):
   jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
ScopeDesc(pc=0x00007fc3482909b2 offset=452):
   jdk.incubator.vector.ByteVector::fromArray@17 (line 2995)
ScopeDesc(pc=0x00007fc3482909b2 offset=452):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fc3482909de offset=47e):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc3482909de offset=47e):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc3482909de offset=47e):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc3482909de offset=47e):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc3482909e8 offset=488):
   jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
   Locals
    - l0: empty
    - l1: stack[0],oop
    - l2: stack[16]
    - l3: stack[24],oop
    - l4: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
ScopeDesc(pc=0x00007fc3482909e8 offset=488):
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[8],oop
    - l1: empty
    - l2: stack[16]
    - l3: empty
    - l4: stack[24],oop
ScopeDesc(pc=0x00007fc3482909f9 offset=499):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc3482909f9 offset=499):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc3482909f9 offset=499):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc3482909f9 offset=499):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc3482909fe offset=49e):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
ScopeDesc(pc=0x00007fc3482909fe offset=49e):
   test::copyMem_base@61 (line 17)
ScopeDesc(pc=0x00007fc348290a09 offset=4a9):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
ScopeDesc(pc=0x00007fc348290a09 offset=4a9):
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
ScopeDesc(pc=0x00007fc348290a09 offset=4a9):
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
ScopeDesc(pc=0x00007fc348290a09 offset=4a9):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fc348290a23 offset=4c3):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290a23 offset=4c3):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290a23 offset=4c3):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290a23 offset=4c3):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290a2d offset=4cd):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
ScopeDesc(pc=0x00007fc348290a2d offset=4cd):
   test::copyMem_base@61 (line 17)
ScopeDesc(pc=0x00007fc348290a55 offset=4f5):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290a55 offset=4f5):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290a55 offset=4f5):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290a55 offset=4f5):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290a5c offset=4fc):
   jdk.incubator.vector.ByteVector::intoArray@56 (line 3413)
ScopeDesc(pc=0x00007fc348290a5c offset=4fc):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290a85 offset=525):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290a85 offset=525):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290a85 offset=525):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290a85 offset=525):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290a87 offset=527):
   jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
ScopeDesc(pc=0x00007fc348290a87 offset=527):
   jdk.incubator.vector.ByteVector::intoArray@33 (line 3408)
ScopeDesc(pc=0x00007fc348290a87 offset=527):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290aab offset=54b):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290aab offset=54b):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290aab offset=54b):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290aab offset=54b):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290ab4 offset=554):
   jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
   Locals
    - l0: obj[418]
    - l1: stack[0],oop
    - l2: stack[8]
    - l3: stack[16],oop
    - l4: empty
ScopeDesc(pc=0x00007fc348290ab4 offset=554):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 418: jdk.incubator.vector.Byte256Vector stack[32],vector
ScopeDesc(pc=0x00007fc348290acb offset=56b):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290acb offset=56b):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290acb offset=56b):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290acb offset=56b):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290ad0 offset=570):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
ScopeDesc(pc=0x00007fc348290ad0 offset=570):
   test::copyMem_base@61 (line 17)
ScopeDesc(pc=0x00007fc348290b11 offset=5b1):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290b11 offset=5b1):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290b11 offset=5b1):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290b11 offset=5b1):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290b20 offset=5c0):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949aa8} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @1: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @2: 32
    - @3: 0
    - @4: stack[64],long
    - @5: 1
    - @6: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
    - @7: a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977080}
ScopeDesc(pc=0x00007fc348290b20 offset=5c0):
   test::copyMem_base@61 (line 17)
   Locals
    - l0: stack[0],oop
    - l1: reg rbp [10],oop
    - l2: stack[12]
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fc348290b6d offset=60d):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290b6d offset=60d):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290b6d offset=60d):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290b6d offset=60d):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290b78 offset=618):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949aa8} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @1: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @2: 32
    - @3: 0
    - @4: stack[64],long
    - @5: 1
    - @6: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
    - @7: a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977080}
ScopeDesc(pc=0x00007fc348290b78 offset=618):
   test::copyMem_base@61 (line 17)
   Locals
    - l0: stack[0],oop
    - l1: reg rbp [10],oop
    - l2: stack[12]
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fc348290bc0 offset=660):
   test::copyMem_base@13 (line 11)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: stack[8]
ScopeDesc(pc=0x00007fc348290bf2 offset=692):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290bf2 offset=692):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290bf2 offset=692):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290bf2 offset=692):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290bfc offset=69c):
   test::copyMem_base@13 (line 11)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[0],oop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: stack[8]
ScopeDesc(pc=0x00007fc348290c04 offset=6a4):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290c04 offset=6a4):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290c04 offset=6a4):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290c04 offset=6a4):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290c18 offset=6b8):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fc348290c18 offset=6b8):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc348290c8b offset=72b):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290c8b offset=72b):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290c8b offset=72b):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290c8b offset=72b):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290c94 offset=734):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[8]
    - @1: reg rbp [10],int
    - @2: nullptr
ScopeDesc(pc=0x00007fc348290c94 offset=734):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007fc348290c94 offset=734):
   jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
   Locals
    - l0: obj[448]
    - l1: stack[0],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fc348290c94 offset=734):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fc348290c94 offset=734):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 448: jdk.incubator.vector.Byte256Vector stack[32],vector
ScopeDesc(pc=0x00007fc348290cbe offset=75e):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290cbe offset=75e):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290cbe offset=75e):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290cbe offset=75e):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290cc8 offset=768):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[8]
    - @1: reg rbp [10],int
    - @2: nullptr
ScopeDesc(pc=0x00007fc348290cc8 offset=768):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007fc348290cc8 offset=768):
   jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
   Locals
    - l0: obj[390]
    - l1: stack[0],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fc348290cc8 offset=768):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fc348290cc8 offset=768):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 390: jdk.incubator.vector.Byte256Vector stack[32],vector
ScopeDesc(pc=0x00007fc348290d39 offset=7d9):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290d39 offset=7d9):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290d39 offset=7d9):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290d39 offset=7d9):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290d44 offset=7e4):
   test::copyMem_base@49 (line 16)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x00007fc348290d65 offset=805):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290d65 offset=805):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290d65 offset=805):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290d65 offset=805):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290d70 offset=810):
   test::copyMem_base@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: nullptr
ScopeDesc(pc=0x00007fc348290d91 offset=831):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290d91 offset=831):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290d91 offset=831):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290d91 offset=831):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290d9c offset=83c):
   jdk.incubator.vector.ByteVector::intoArray@6 (line 3364)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: nullptr
ScopeDesc(pc=0x00007fc348290d9c offset=83c):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fc348290d9c offset=83c):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fc348290dbd offset=85d):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290dbd offset=85d):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290dbd offset=85d):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290dbd offset=85d):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290dc8 offset=868):
   jdk.incubator.vector.ByteVector::intoArray@31 (line 3408)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: empty
    - @3: empty
    - @4: nullptr
ScopeDesc(pc=0x00007fc348290dc8 offset=868):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fc348290dd0 offset=870):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290dd0 offset=870):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290dd0 offset=870):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290dd0 offset=870):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290deb offset=88b):
   jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
ScopeDesc(pc=0x00007fc348290deb offset=88b):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fc348290df0 offset=890):
   jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
ScopeDesc(pc=0x00007fc348290df0 offset=890):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fc348290df3 offset=893):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fc348290e00 offset=8a0):
   jdk.incubator.vector.ByteVector::intoArray0Template@49 (line 3846)
ScopeDesc(pc=0x00007fc348290e00 offset=8a0):
   jdk.incubator.vector.Byte256Vector::intoArray0@9 (line 992)
ScopeDesc(pc=0x00007fc348290e00 offset=8a0):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fc348290e00 offset=8a0):
   test::copyMem_base@80 (line 19)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007fc348290400: 01ff
relocInfo@0x00007fc348290400 [type=0(none) addr=0x00007fc34829075f offset=511]
         @0x00007fc348290402: 5054
relocInfo@0x00007fc348290402 [type=10(poll) addr=0x00007fc3482907b3 offset=84]
         @0x00007fc348290404: 780c66ff
relocInfo@0x00007fc348290406 [type=12(metadata) addr=0x00007fc3482908b2 offset=255 format=3 data=12] | [metadata_addr=0x00007fc348290ed0 *=0x0000000800040200 offset=0]metadata_value=0x0000000800040200: {type array bool}
         @0x00007fc348290408: 780d667d
relocInfo@0x00007fc34829040a [type=12(metadata) addr=0x00007fc34829092f offset=125 format=3 data=13] | [metadata_addr=0x00007fc348290ed8 *=0x00000008000de750 offset=0]metadata_value=0x00000008000de750: 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
         @0x00007fc34829040c: 7c034d3cffb07fc33a07
relocInfo@0x00007fc348290414 [type=7(external_word) addr=0x00007fc348290936 offset=7 format=1 data={4d3cffb07fc3}] | [target=0x00007fc34d3cffb0]
         @0x00007fc348290416: 7c034cfa4df87fc3380d
relocInfo@0x00007fc34829041e [type=7(external_word) addr=0x00007fc348290943 offset=13 data={4cfa4df87fc3}] | [target=0x00007fc34cfa4df8]
         @0x00007fc348290420: 320e
relocInfo@0x00007fc348290420 [type=6(runtime_call) addr=0x00007fc348290951 offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348290422: 7c034cfa4e387fc3380f
relocInfo@0x00007fc34829042a [type=7(external_word) addr=0x00007fc348290960 offset=15 data={4cfa4e387fc3}] | [target=0x00007fc34cfa4e38]
         @0x00007fc34829042c: 320e
relocInfo@0x00007fc34829042c [type=6(runtime_call) addr=0x00007fc34829096e offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc34829042e: 085a
relocInfo@0x00007fc34829042e [type=1(oop) addr=0x00007fc3482909c8 offset=90] | [oop_addr=0x00007fc3482909ca *=0x000000011f9499c8 offset=0]
         @0x00007fc348290430: 221b
relocInfo@0x00007fc348290430 [type=4(static_call) addr=0x00007fc3482909e3 offset=27 format=1] | [destination=0x00007fc348290e20 metadata=0x0000000000000000]
         @0x00007fc348290432: 8005
relocInfo@0x00007fc348290432 [type=16(post_call_nop) addr=0x00007fc3482909e8 offset=5]
         @0x00007fc348290434: 587c
relocInfo@0x00007fc348290434 [type=11(poll_return) addr=0x00007fc348290a64 offset=124]
         @0x00007fc348290436: 082d
relocInfo@0x00007fc348290436 [type=1(oop) addr=0x00007fc348290a91 offset=45] | [oop_addr=0x00007fc348290a93 *=0x000000011f9499c8 offset=0]
         @0x00007fc348290438: 221e
relocInfo@0x00007fc348290438 [type=4(static_call) addr=0x00007fc348290aaf offset=30 format=1] | [destination=0x00007fc348290e20 metadata=0x0000000000000000]
         @0x00007fc34829043a: 8005
relocInfo@0x00007fc34829043a [type=16(post_call_nop) addr=0x00007fc348290ab4 offset=5]
         @0x00007fc34829043c: 6053
relocInfo@0x00007fc34829043c [type=12(metadata) addr=0x00007fc348290b07 offset=83] | [metadata_addr=0x00007fc348290b09 *=0x0000000800040200 offset=0]metadata_value=0x0000000800040200: {type array bool}
         @0x00007fc34829043e: 3214
relocInfo@0x00007fc34829043e [type=6(runtime_call) addr=0x00007fc348290b1b offset=20 format=1] | [destination=0x00007fc3481c3620]
         @0x00007fc348290440: 8005
relocInfo@0x00007fc348290440 [type=16(post_call_nop) addr=0x00007fc348290b20 offset=5]
         @0x00007fc348290442: 6043
relocInfo@0x00007fc348290442 [type=12(metadata) addr=0x00007fc348290b63 offset=67] | [metadata_addr=0x00007fc348290b65 *=0x00000008000de750 offset=0]metadata_value=0x00000008000de750: 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
         @0x00007fc348290444: 3210
relocInfo@0x00007fc348290444 [type=6(runtime_call) addr=0x00007fc348290b73 offset=16 format=1] | [destination=0x00007fc3481c3920]
         @0x00007fc348290446: 8005
relocInfo@0x00007fc348290446 [type=16(post_call_nop) addr=0x00007fc348290b78 offset=5]
         @0x00007fc348290448: 3243
relocInfo@0x00007fc348290448 [type=6(runtime_call) addr=0x00007fc348290bbb offset=67 format=1] | [destination=0x00007fc34819fb20]
         @0x00007fc34829044a: 8005
relocInfo@0x00007fc34829044a [type=16(post_call_nop) addr=0x00007fc348290bc0 offset=5]
         @0x00007fc34829044c: 7c034cf214a07fc33808
relocInfo@0x00007fc348290454 [type=7(external_word) addr=0x00007fc348290bc8 offset=8 data={4cf214a07fc3}] | [target=0x00007fc34cf214a0]
         @0x00007fc348290456: 320e
relocInfo@0x00007fc348290456 [type=6(runtime_call) addr=0x00007fc348290bd6 offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348290458: 3221
relocInfo@0x00007fc348290458 [type=6(runtime_call) addr=0x00007fc348290bf7 offset=33 format=1] | [destination=0x00007fc34819fb20]
         @0x00007fc34829045a: 8005
relocInfo@0x00007fc34829045a [type=16(post_call_nop) addr=0x00007fc348290bfc offset=5]
         @0x00007fc34829045c: 7c034cf214a07fc33808
relocInfo@0x00007fc348290464 [type=7(external_word) addr=0x00007fc348290c04 offset=8 data={4cf214a07fc3}] | [target=0x00007fc34cf214a0]
         @0x00007fc348290466: 320e
relocInfo@0x00007fc348290466 [type=6(runtime_call) addr=0x00007fc348290c12 offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348290468: 7c034cf994807fc3381b
relocInfo@0x00007fc348290470 [type=7(external_word) addr=0x00007fc348290c2d offset=27 data={4cf994807fc3}] | [target=0x00007fc34cf99480]
         @0x00007fc348290472: 320e
relocInfo@0x00007fc348290472 [type=6(runtime_call) addr=0x00007fc348290c3b offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348290474: 7c034cf994807fc33806
relocInfo@0x00007fc34829047c [type=7(external_word) addr=0x00007fc348290c41 offset=6 data={4cf994807fc3}] | [target=0x00007fc34cf99480]
         @0x00007fc34829047e: 320e
relocInfo@0x00007fc34829047e [type=6(runtime_call) addr=0x00007fc348290c4f offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348290480: 7c034cf994807fc33806
relocInfo@0x00007fc348290488 [type=7(external_word) addr=0x00007fc348290c55 offset=6 data={4cf994807fc3}] | [target=0x00007fc34cf99480]
         @0x00007fc34829048a: 320e
relocInfo@0x00007fc34829048a [type=6(runtime_call) addr=0x00007fc348290c63 offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc34829048c: 7c034cf994807fc33806
relocInfo@0x00007fc348290494 [type=7(external_word) addr=0x00007fc348290c69 offset=6 data={4cf994807fc3}] | [target=0x00007fc34cf99480]
         @0x00007fc348290496: 320e
relocInfo@0x00007fc348290496 [type=6(runtime_call) addr=0x00007fc348290c77 offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348290498: 3218
relocInfo@0x00007fc348290498 [type=6(runtime_call) addr=0x00007fc348290c8f offset=24 format=1] | [destination=0x00007fc34819fb20]
         @0x00007fc34829049a: 8005
relocInfo@0x00007fc34829049a [type=16(post_call_nop) addr=0x00007fc348290c94 offset=5]
         @0x00007fc34829049c: 7c034cf214a07fc33808
relocInfo@0x00007fc3482904a4 [type=7(external_word) addr=0x00007fc348290c9c offset=8 data={4cf214a07fc3}] | [target=0x00007fc34cf214a0]
         @0x00007fc3482904a6: 320e
relocInfo@0x00007fc3482904a6 [type=6(runtime_call) addr=0x00007fc348290caa offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc3482904a8: 3219
relocInfo@0x00007fc3482904a8 [type=6(runtime_call) addr=0x00007fc348290cc3 offset=25 format=1] | [destination=0x00007fc34819fb20]
         @0x00007fc3482904aa: 8005
relocInfo@0x00007fc3482904aa [type=16(post_call_nop) addr=0x00007fc348290cc8 offset=5]
         @0x00007fc3482904ac: 7c034cf214a07fc33808
relocInfo@0x00007fc3482904b4 [type=7(external_word) addr=0x00007fc348290cd0 offset=8 data={4cf214a07fc3}] | [target=0x00007fc34cf214a0]
         @0x00007fc3482904b6: 320e
relocInfo@0x00007fc3482904b6 [type=6(runtime_call) addr=0x00007fc348290cde offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc3482904b8: 7c034cf994807fc33806
relocInfo@0x00007fc3482904c0 [type=7(external_word) addr=0x00007fc348290ce4 offset=6 data={4cf994807fc3}] | [target=0x00007fc34cf99480]
         @0x00007fc3482904c2: 320e
relocInfo@0x00007fc3482904c2 [type=6(runtime_call) addr=0x00007fc348290cf2 offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc3482904c4: 7c034cf994807fc33806
relocInfo@0x00007fc3482904cc [type=7(external_word) addr=0x00007fc348290cf8 offset=6 data={4cf994807fc3}] | [target=0x00007fc34cf99480]
         @0x00007fc3482904ce: 320e
relocInfo@0x00007fc3482904ce [type=6(runtime_call) addr=0x00007fc348290d06 offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc3482904d0: 7c034cf994807fc33806
relocInfo@0x00007fc3482904d8 [type=7(external_word) addr=0x00007fc348290d0c offset=6 data={4cf994807fc3}] | [target=0x00007fc34cf99480]
         @0x00007fc3482904da: 320e
relocInfo@0x00007fc3482904da [type=6(runtime_call) addr=0x00007fc348290d1a offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc3482904dc: 7c034cf994807fc33806
relocInfo@0x00007fc3482904e4 [type=7(external_word) addr=0x00007fc348290d20 offset=6 data={4cf994807fc3}] | [target=0x00007fc34cf99480]
         @0x00007fc3482904e6: 320e
relocInfo@0x00007fc3482904e6 [type=6(runtime_call) addr=0x00007fc348290d2e offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc3482904e8: 3211
relocInfo@0x00007fc3482904e8 [type=6(runtime_call) addr=0x00007fc348290d3f offset=17 format=1] | [destination=0x00007fc34819fb20]
         @0x00007fc3482904ea: 8005
relocInfo@0x00007fc3482904ea [type=16(post_call_nop) addr=0x00007fc348290d44 offset=5]
         @0x00007fc3482904ec: 7c034cf214a07fc33808
relocInfo@0x00007fc3482904f4 [type=7(external_word) addr=0x00007fc348290d4c offset=8 data={4cf214a07fc3}] | [target=0x00007fc34cf214a0]
         @0x00007fc3482904f6: 320e
relocInfo@0x00007fc3482904f6 [type=6(runtime_call) addr=0x00007fc348290d5a offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc3482904f8: 3211
relocInfo@0x00007fc3482904f8 [type=6(runtime_call) addr=0x00007fc348290d6b offset=17 format=1] | [destination=0x00007fc34819fb20]
         @0x00007fc3482904fa: 8005
relocInfo@0x00007fc3482904fa [type=16(post_call_nop) addr=0x00007fc348290d70 offset=5]
         @0x00007fc3482904fc: 7c034cf214a07fc33808
relocInfo@0x00007fc348290504 [type=7(external_word) addr=0x00007fc348290d78 offset=8 data={4cf214a07fc3}] | [target=0x00007fc34cf214a0]
         @0x00007fc348290506: 320e
relocInfo@0x00007fc348290506 [type=6(runtime_call) addr=0x00007fc348290d86 offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348290508: 3211
relocInfo@0x00007fc348290508 [type=6(runtime_call) addr=0x00007fc348290d97 offset=17 format=1] | [destination=0x00007fc34819fb20]
         @0x00007fc34829050a: 8005
relocInfo@0x00007fc34829050a [type=16(post_call_nop) addr=0x00007fc348290d9c offset=5]
         @0x00007fc34829050c: 7c034cf214a07fc33808
relocInfo@0x00007fc348290514 [type=7(external_word) addr=0x00007fc348290da4 offset=8 data={4cf214a07fc3}] | [target=0x00007fc34cf214a0]
         @0x00007fc348290516: 320e
relocInfo@0x00007fc348290516 [type=6(runtime_call) addr=0x00007fc348290db2 offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348290518: 3211
relocInfo@0x00007fc348290518 [type=6(runtime_call) addr=0x00007fc348290dc3 offset=17 format=1] | [destination=0x00007fc34819fb20]
         @0x00007fc34829051a: 8005
relocInfo@0x00007fc34829051a [type=16(post_call_nop) addr=0x00007fc348290dc8 offset=5]
         @0x00007fc34829051c: 7c034cf214a07fc33808
relocInfo@0x00007fc348290524 [type=7(external_word) addr=0x00007fc348290dd0 offset=8 data={4cf214a07fc3}] | [target=0x00007fc34cf214a0]
         @0x00007fc348290526: 320e
relocInfo@0x00007fc348290526 [type=6(runtime_call) addr=0x00007fc348290dde offset=14 format=1] | [destination=0x00007fc34c632af0]
         @0x00007fc348290528: 321d
relocInfo@0x00007fc348290528 [type=6(runtime_call) addr=0x00007fc348290dfb offset=29 format=1] | [destination=0x00007fc3481cc4a0]
         @0x00007fc34829052a: 7b9c4005
relocInfo@0x00007fc34829052c [type=8(internal_word) addr=0x00007fc348290e00 offset=5 data=924] | [target=0x00007fc348290a64]
         @0x00007fc34829052e: 3211
relocInfo@0x00007fc34829052e [type=6(runtime_call) addr=0x00007fc348290e11 offset=17 format=1] | [destination=0x00007fc34819e9a0]
         @0x00007fc348290530: 3205
relocInfo@0x00007fc348290530 [type=6(runtime_call) addr=0x00007fc348290e16 offset=5 format=1] | [destination=0x00007fc3480e9d00]
         @0x00007fc348290532: 000a
relocInfo@0x00007fc348290532 [type=0(none) addr=0x00007fc348290e20 offset=10]
         @0x00007fc348290534: 7c01fb7d2800
relocInfo@0x00007fc348290538 [type=5(static_stub) addr=0x00007fc348290e20 offset=0 data=-1155] | [static_call=0x00007fc3482909e3]
         @0x00007fc34829053a: 7c01fab12800
relocInfo@0x00007fc34829053e [type=5(static_stub) addr=0x00007fc348290e20 offset=0 data=-1359] | [static_call=0x00007fc348290aaf]
         @0x00007fc348290540: 6000
relocInfo@0x00007fc348290540 [type=12(metadata) addr=0x00007fc348290e20 offset=0] | [metadata_addr=0x00007fc348290e22 *=0x00007fc2fc7872b8 offset=0]metadata_value=0x00007fc2fc7872b8: {method} {0x00007fc2fc7872b8} 'checkMaskFromIndexSize' '(ILjdk/incubator/vector/ByteVector$ByteSpecies;Ljdk/incubator/vector/VectorMask;II)V' in 'jdk/incubator/vector/ByteVector'
         @0x00007fc348290542: 320a
relocInfo@0x00007fc348290542 [type=6(runtime_call) addr=0x00007fc348290e2a offset=10 format=1] | [destination=0x00007fc34824307c]
         @0x00007fc348290544: 3205
relocInfo@0x00007fc348290544 [type=6(runtime_call) addr=0x00007fc348290e2f offset=5 format=1] | [destination=0x00007fc3480aa4a0]
         @0x00007fc348290546: 320f
relocInfo@0x00007fc348290546 [type=6(runtime_call) addr=0x00007fc348290e3e offset=15 format=1] | [destination=0x00007fc34819fe40]
         @0x00007fc348290548: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type abstract_with_unique_concrete_subtype
  context = *jdk.incubator.vector.AbstractSpecies
  class   = jdk.incubator.vector.ByteVector$ByteSpecies
   [nmethod<=klass]jdk.incubator.vector.AbstractSpecies
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.ByteVector$ByteSpecies
  method  = {method} {0x00007fc2fc7e3cf0} 'loopBound' '(I)I' in 'jdk/incubator/vector/AbstractSpecies'
  class   = jdk.incubator.vector.VectorSpecies
  method  = *{method} {0x00007fc2fc7e1750} 'loopBound' '(I)I' in 'jdk/incubator/vector/VectorSpecies'
   [nmethod<=klass]jdk.incubator.vector.ByteVector$ByteSpecies
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.ByteVector$ByteSpecies
  method  = {method} {0x00007fc2fc7e30d0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  class   = jdk.incubator.vector.VectorSpecies
  method  = *{method} {0x00007fc2fc7e1558} 'length' '()I' in 'jdk/incubator/vector/VectorSpecies'
   [nmethod<=klass]jdk.incubator.vector.ByteVector$ByteSpecies
Dependency of type unique_concrete_method_4
  context = *jdk.incubator.vector.VectorMask
  method  = {method} {0x00007fc2fc6aa5c0} 'allTrue' '()Z' in 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
  class   = jdk.incubator.vector.VectorMask
  method  = *{method} {0x00007fc2fc681fe0} 'allTrue' '()Z' in 'jdk/incubator/vector/VectorMask'
   [nmethod<=klass]jdk.incubator.vector.VectorMask
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.Byte256Vector$Byte256Mask
  method  = {method} {0x00007fc2fc7fec78} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
  class   = jdk.incubator.vector.VectorMask
  method  = *{method} {0x00007fc2fc682a10} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
   [nmethod<=klass]jdk.incubator.vector.Byte256Vector$Byte256Mask
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 96 bytes)
catch_pco = 1160 (pc=0x00007fc3482909e8, 1 entries)
  bci -1 at scope depth 0 -> pco 2192 (pc=0x00007fc348290df0)
catch_pco = 1364 (pc=0x00007fc348290ab4, 1 entries)
  bci -1 at scope depth 0 -> pco 2187 (pc=0x00007fc348290deb)
catch_pco = 1472 (pc=0x00007fc348290b20, 1 entries)
  bci -1 at scope depth 0 -> pco 2182 (pc=0x00007fc348290de6)
catch_pco = 1560 (pc=0x00007fc348290b78, 1 entries)
  bci -1 at scope depth 0 -> pco 2180 (pc=0x00007fc348290de4)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 4 entries, 36 bytes):
{
   < 0x00007fc348290580, 0x00007fc348290d60 > < 0x00007fc3482905e0, 0x00007fc348290ba8 > < 0x00007fc348290a34, 0x00007fc348290d8c > 
   < 0x00007fc348290a72, 0x00007fc348290db8 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 nullptr-oop
#1: 0x000000011f9499c8 a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f9499c8}
#2: 0x000000011f949a18 a 'java/lang/Class'{0x000000011f949a18} = 'jdk/incubator/vector/Byte256Vector'
#3: 0x000000011f949aa8 a 'java/lang/Class'{0x000000011f949aa8} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
#4: 0x000000011f0001c0 a 'java/lang/Class'{0x000000011f0001c0} = byte
#5: 0x000000011f977080 a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977080}
#6: 0x000000011f81fec8 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f81fec8}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
# 0: 0x0000000000000000 nullptr-oop
# 1: 0x00007fc2fc603650 {method} {0x00007fc2fc603650} 'copyMem_base' '([B[B)V' in 'test'
# 2: 0x00007fc2fc7852f8 {method} {0x00007fc2fc7852f8} 'intoArray' '([BILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/ByteVector'
# 3: 0x00007fc2fc6a3550 {method} {0x00007fc2fc6a3550} 'intoArray0' '([BILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/Byte256Vector'
# 4: 0x00007fc2fc786c70 {method} {0x00007fc2fc786c70} 'intoArray0Template' '(Ljava/lang/Class;[BILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/ByteVector'
# 5: 0x00007fc2fc784688 {method} {0x00007fc2fc784688} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[BILjdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
# 6: 0x00007fc2fc784540 {method} {0x00007fc2fc784540} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
# 7: 0x00007fc2fc6a2e18 {method} {0x00007fc2fc6a2e18} 'fromArray0' '([BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/Byte256Vector'
# 8: 0x00007fc2fc785ed8 {method} {0x00007fc2fc785ed8} 'fromArray0Template' '([BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
# 9: 0x00007fc2fc7851b0 {method} {0x00007fc2fc7851b0} 'intoArray' '([BI)V' in 'jdk/incubator/vector/ByteVector'
#10: 0x00007fc2fc7876f8 {method} {0x00007fc2fc7876f8} 'arrayAddress' '([BI)J' in 'jdk/incubator/vector/ByteVector'
#11: 0x00007fc2fc681bd8 {method} {0x00007fc2fc681bd8} 'fromLong' '(Ljdk/incubator/vector/VectorSpecies;J)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
#12: 0x0000000800040200 {type array bool}
#13: 0x00000008000de750 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
#14: 0x00007fc2fc6a2f30 {method} {0x00007fc2fc6a2f30} 'fromArray0' '([BILjdk/incubator/vector/VectorMask;I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/Byte256Vector'
#15: 0x00007fc2fc7860e8 {method} {0x00007fc2fc7860e8} 'fromArray0Template' '(Ljava/lang/Class;[BILjdk/incubator/vector/VectorMask;I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
#16: 0x00007fc2fc6d47b0 {method} {0x00007fc2fc6d47b0} 'indexInRange' '(JJJ)Z' in 'jdk/incubator/vector/VectorIntrinsics'
#17: 0x00007fc2fc6d48e8 {method} {0x00007fc2fc6d48e8} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
#18: 0x00007fc2fc1a0cb0 {method} {0x00007fc2fc1a0cb0} 'checkIndex' '(II)I' in 'java/util/Objects'
#19: 0x00000008000d9bc0 'jdk/incubator/vector/AbstractSpecies'
#20: 0x00000008000d9fb0 'jdk/incubator/vector/ByteVector$ByteSpecies'
#21: 0x00007fc2fc7e3cf0 {method} {0x00007fc2fc7e3cf0} 'loopBound' '(I)I' in 'jdk/incubator/vector/AbstractSpecies'
#22: 0x00000008000d97a8 'jdk/incubator/vector/VectorSpecies'
#23: 0x00007fc2fc7e1750 {method} {0x00007fc2fc7e1750} 'loopBound' '(I)I' in 'jdk/incubator/vector/VectorSpecies'
#24: 0x00007fc2fc7e30d0 {method} {0x00007fc2fc7e30d0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
#25: 0x00007fc2fc7e1558 {method} {0x00007fc2fc7e1558} 'length' '()I' in 'jdk/incubator/vector/VectorSpecies'
#26: 0x00000008000dbee0 'jdk/incubator/vector/VectorMask'
#27: 0x00007fc2fc6aa5c0 {method} {0x00007fc2fc6aa5c0} 'allTrue' '()Z' in 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
#28: 0x00007fc2fc681fe0 {method} {0x00007fc2fc681fe0} 'allTrue' '()Z' in 'jdk/incubator/vector/VectorMask'
#29: 0x00007fc2fc7fec78 {method} {0x00007fc2fc7fec78} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
#30: 0x00007fc2fc682a10 {method} {0x00007fc2fc682a10} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[time]  20 ms  [res] 1007493
------------------------------------------------------------------------
static test::copyMem_base([B[B)V
  interpreter_invocation_count:        1040
  invocation_counter:                  1040
  backedge_counter:                  228862
  decompile_count:                        0
  mdo size: 784 bytes

   0 iconst_0
   1 istore_2
   2 iload_2
   3 getstatic 7 <test.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
   6 aload_1
   7 arraylength
   8 invokeinterface 13 <jdk/incubator/vector/VectorSpecies.loopBound(I)I> 
  0    bci: 8    VirtualCallData    count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/ByteVector$ByteSpecies'(224617 1.00)
  13 if_icmpge 43
  56   bci: 13   BranchData         taken(875) displacement(184)
                                    not taken(223742)
  16 getstatic 7 <test.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
  19 aload_1
  20 iload_2
  21 invokestatic 19 <jdk/incubator/vector/ByteVector.fromArray(Ljdk/incubator/vector/VectorSpecies;[BI)Ljdk/incubator/vector/ByteVector;> 
  88   bci: 21   CounterData        count(223742)
  24 fast_aload_0
  25 iload_2
  26 invokevirtual 25 <jdk/incubator/vector/ByteVector.intoArray([BI)V> 
  104  bci: 26   VirtualCallData    count(223742) nonprofiled_count(0) entries(0)
  29 iload_2
  30 getstatic 7 <test.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
  33 invokeinterface 29 <jdk/incubator/vector/VectorSpecies.length()I> 
  160  bci: 33   VirtualCallData    count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/ByteVector$ByteSpecies'(223742 1.00)
  38 iadd
  39 istore_2
  40 goto 2
  216  bci: 40   JumpData           taken(223742) displacement(-216)
  43 aload_1
  44 arraylength
  45 iload_2
  46 isub
  47 istore_3
  48 iload_3
  49 ifle 83
  240  bci: 49   BranchData         taken(0) displacement(120)
                                    not taken(875)
  52 getstatic 7 <test.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
  55 iconst_1
  56 iload_3
  57 ishl
  58 iconst_1
  59 isub
  60 i2l
  61 invokestatic 33 <jdk/incubator/vector/VectorMask.fromLong(Ljdk/incubator/vector/VectorSpecies;J)Ljdk/incubator/vector/VectorMask;> 
  272  bci: 61   CounterData        count(875)
  64 astore #4
  66 getstatic 7 <test.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
  69 aload_1
  70 iload_2
  71 aload #4
  73 invokestatic 39 <jdk/incubator/vector/ByteVector.fromArray(Ljdk/incubator/vector/VectorSpecies;[BILjdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/ByteVector;> 
  288  bci: 73   CounterData        count(875)
  76 fast_aload_0
  77 iload_2
  78 aload #4
  80 invokevirtual 42 <jdk/incubator/vector/ByteVector.intoArray([BILjdk/incubator/vector/VectorMask;)V> 
  304  bci: 80   VirtualCallData    count(875) nonprofiled_count(0) entries(0)
  83 return
------------------------------------------------------------------------
Total MDO size: 784 bytes
