CompileCommand: print test.copyMem_base bool print = true

============================= C2-compiled nmethod ==============================
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 240 --
#r591 rsp+236: in_preserve
#r590 rsp+232: return address
#r589 rsp+228: in_preserve
#r588 rsp+224: saved fp register
#r587 rsp+220: pad2, stack alignment
#r586 rsp+216: pad2, stack alignment
#r585 rsp+212: Fixed slot 1
#r584 rsp+208: Fixed slot 0
#r643 rsp+204: spill
#r642 rsp+200: spill
#r641 rsp+196: spill
#r640 rsp+192: spill
#r639 rsp+188: spill
#r638 rsp+184: spill
#r637 rsp+180: spill
#r636 rsp+176: spill
#r635 rsp+172: spill
#r634 rsp+168: spill
#r633 rsp+164: spill
#r632 rsp+160: spill
#r631 rsp+156: spill
#r630 rsp+152: spill
#r629 rsp+148: spill
#r628 rsp+144: spill
#r627 rsp+140: spill
#r626 rsp+136: spill
#r625 rsp+132: spill
#r624 rsp+128: spill
#r623 rsp+124: spill
#r622 rsp+120: spill
#r621 rsp+116: spill
#r620 rsp+112: spill
#r619 rsp+108: spill
#r618 rsp+104: spill
#r617 rsp+100: spill
#r616 rsp+96: spill
#r615 rsp+92: spill
#r614 rsp+88: spill
#r613 rsp+84: spill
#r612 rsp+80: spill
#r611 rsp+76: spill
#r610 rsp+72: spill
#r609 rsp+68: spill
#r608 rsp+64: spill
#r607 rsp+60: spill
#r606 rsp+56: spill
#r605 rsp+52: spill
#r604 rsp+48: spill
#r603 rsp+44: outgoing argument
#r602 rsp+40: outgoing argument
#r601 rsp+36: outgoing argument
#r600 rsp+32: outgoing argument
#r599 rsp+28: outgoing argument
#r598 rsp+24: outgoing argument
#r597 rsp+20: outgoing argument
#r596 rsp+16: outgoing argument
#r595 rsp+12: outgoing argument
#r594 rsp+ 8: outgoing argument
#r593 rsp+ 4: outgoing argument
#r592 rsp+ 0: outgoing argument
#
----------------------- MetaData before Compile_id = 281 ------------------------
{method}
 - this oop:          0x00007fecc8603650
 - method holder:     'test'
 - constants:         0x00007fecc8603080 constant pool [114]/operands[5] {0x00007fecc8603080} for 'test' cache=0x00007fecc8603980
 - access:            0x9  public static 
 - flags:             0x6080   queued_for_compilation  has_loops_flag  has_loops_flag_init 
 - name:              'copyMem_base'
 - signature:         '([B[B)V'
 - max stack:         5
 - max locals:        5
 - size of params:    2
 - method size:       14
 - vtable index:      -2
 - i2i entry:         0x00007fed0d00c740
 - adapters:          AHE@0x00007fed1038cd50: 0xbb i2c: 0x00007fed0d07ae80 c2i: 0x00007fed0d07af71 c2iUV: 0x00007fed0d07af3f c2iNCI: 0x00007fed0d07afab
 - compiled entry     0x00007fed0d07af71
 - code size:         84
 - code start:        0x00007fecc86035e8
 - code end (excl):   0x00007fecc860363c
 - method data:       0x00007fecc8603c90
 - checked ex length: 0
 - linenumber start:  0x00007fecc860363c
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 281 -----------------------
#
#  void ( rawptr:BotPTR )
#
000     N1015: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B44 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (648 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #224	# Create frame

02e     movq    RBX, [RSI + #32 (8-bit)]	# ptr
032     movq    RBP, [RSI + #24 (8-bit)]	# ptr
036     movl    R13, [RSI + #16 (8-bit)]	# int
03a     movq    RDI, RSI	# spill
03d     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
055     testq   RBX, RBX	# ptr
058     je     B44  P=0.001000 C=-1.000000

05e     B2: #	out( B54 B3 ) <- in( B1 )  Freq: 0.999
05e     movl    R10, [RBX + #8 (8-bit)]	# compressed klass ptr
062     cmpl    R10, narrowklass: precise [byte (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
069     jne,u   B54  P=0.000001 C=-1.000000

06f     B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
06f     movq    R10, RBX	# spill
072     # checkcastPP of R10
072     movq    [rsp + #56], R10	# spill

077     B4: #	out( B60 B5 ) <- in( B3 B44 )  Freq: 0.999999
077     movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
07b     NullCheck RBP

07b     B5: #	out( B54 B6 ) <- in( B4 )  Freq: 0.999998
        nop 	# 5 bytes pad for loops and calls
080     cmpl    R10, narrowklass: precise [byte (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
087     jne,u   B54  P=0.000001 C=-1.000000

08d     B6: #	out( B55 B7 ) <- in( B5 )  Freq: 0.999997
08d     movq    R9, RBP	# spill
090     # checkcastPP of R9
090     movl    R8, [R9 + #12 (8-bit)]	# range
094     leal    R10, [R8 + #-31]
098     testl   R10, R10
        nop 	# 5 bytes pad for loops and calls
0a0     jl     B55  P=0.000001 C=-1.000000

0a6     B7: #	out( B55 B8 ) <- in( B6 )  Freq: 0.999996
0a6     movq    R11, [rsp + #56]	# spill
0ab     movl    RCX, [R11 + #12 (8-bit)]	# range
0af     NullCheck R11

0af     B8: #	out( B55 B9 ) <- in( B7 )  Freq: 0.999995
0af     movl    [rsp + #192], RCX	# spill
0b6     leal    R11, [RCX + #-31]
        nop 	# 6 bytes pad for loops and calls
0c0     testl   R11, R11
0c3     jl     B55  P=0.000001 C=-1.000000

0c9     B9: #	out( B11 ) <- in( B8 )  Freq: 0.999994
0c9     movl    RBX, R8	# spill
0cc     andl    RBX, #-32	# int
0cf     movl    [rsp + #48], R13	# spill
0d4     jmp,s   B11
        nop 	# 10 bytes pad for loops and calls

0e0     B10: #	out( B11 ) <- in( B13 ) top-of-loop Freq: 253.084
0e0     movq    RDI, [rsp + #56]	# spill
0e5     store_vector [RDI + #16 + RCX],XMM0
	
0eb     # TLS is in R15
0eb     movq    RCX, [R15 + #960 (32-bit)]	# ptr
0f2     addl    RDX, #32	# int
0f5     testl   rax, [RCX]	# Safepoint: poll for GC        # test::copyMem_base @ bci:40 (line 11) L[0]=rsp + #56 L[1]=R9 L[2]=RDX L[3]=_ L[4]=_
        # OopMap {r9=Oop [56]=Oop off=245/0xf5}
0f7     movl    [rsp + #48], RDX	# spill

0fb     B11: #	out( B15 B12 ) <- in( B9 B10 ) Loop( B11-B10 inner ) Freq: 254.084
0fb     movl    RCX, [rsp + #48]	# spill
        nop 	# 1 bytes pad for loops and calls
100     cmpl    RCX, RBX
102     jge     B15  P=0.003934 C=23388.000000

108     B12: #	out( B45 B13 ) <- in( B11 )  Freq: 253.084
108     cmpl    RCX, R10	# unsigned
10b     jae,u   B45  P=0.000001 C=-1.000000

111     B13: #	out( B10 B14 ) <- in( B12 )  Freq: 253.084
111     movl    RDX, [rsp + #48]	# spill
115     # castII of RDX
115     movslq  RCX, RDX	# i2l
118     load_vector XMM0,[R9 + #16 + RCX]
        nop 	# 1 bytes pad for loops and calls
120     cmpl    RDX, R11	# unsigned
123     jb,us  B10  P=0.999999 C=-1.000000

125     B14: #	out( N1015 ) <- in( B13 )  Freq: 0.000256445
125     movl    RSI, #-28	# int
12a     movl    [rsp + #48], RDX	# spill
12e     movq    [rsp + #64], R9	# spill
133     movl    [rsp + #52], R11	# spill
138     vmovdqu [rsp + 96],XMM0	# spill
        nop 	# 2 bytes pad for loops and calls
140     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 385) L[0]=_ L[1]=_ STK[0]=rsp + #48 STK[1]=rsp + #52 STK[2]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.ByteVector::intoArray @ bci:7 (line 3364) L[0]=#ScObj0 L[1]=rsp + #56 L[2]=_ L[3]=_
        # ScObj0 jdk/incubator/vector/Byte256Vector={ [payload :0]=rsp + #96 }
        # test::copyMem_base @ bci:26 (line 13) L[0]=rsp + #56 L[1]=rsp + #64 L[2]=rsp + #48 L[3]=_ L[4]=_
        # OopMap {[56]=Oop [64]=Oop off=328/0x148}
150     stop	# ShouldNotReachHere

164     B15: #	out( B59 B16 ) <- in( B11 )  Freq: 0.999481
164     movl    RBP, R8	# spill
167     subl    RBP, [RSP + #48 (32-bit)]	# int
16b     testl   RBP, RBP
16d     jle     B59  P=0.000000 C=92.000000

173     B16: #	out( B46 B17 ) <- in( B15 )  Freq: 0.999481
173     # TLS is in R15
173     movq    RDI, [R15 + #264 (32-bit)]	# ptr
17a     movq    R10, RDI	# spill
17d     addq    R10, #48	# ptr
181     movl    RBX, #1	# int
186     shlxl   RBX, RBX, RBP
18b     decl    RBX	# int
18d     movl    RBP, RBX	# i2l zero-extend
	
18f     # TLS is in R15
18f     cmpq    R10, [R15 + #280 (32-bit)]	# raw ptr
196     jae,u   B46  P=0.000100 C=-1.000000

19c     B17: #	out( B18 ) <- in( B16 )  Freq: 0.999381
19c     # TLS is in R15
19c     movq    [R15 + #264 (32-bit)], R10	# ptr
1a3     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1ab     movq    [RDI], #1	# long
1b2     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1ba     movl    [RDI + #8 (8-bit)], narrowklass: precise [bool (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
1c1     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1c9     movl    [RDI + #12 (8-bit)], #32	# int
1d0     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1d8     movq    [RDI + #16 (8-bit)], R12	# long (R12_heapbase==0)
1dc     movq    [RDI + #24 (8-bit)], R12	# long (R12_heapbase==0)
1e0     movq    [RDI + #32 (8-bit)], R12	# long (R12_heapbase==0)
1e4     movq    [RDI + #40 (8-bit)], R12	# long (R12_heapbase==0)

1e8     B18: #	out( B48 B19 ) <- in( B47 B17 )  Freq: 0.999481
1e8     
1e8     MEMBAR-storestore (empty encoding)
1e8     # checkcastPP of RDI
1e8     # TLS is in R15
1e8     movq    RAX, [R15 + #264 (32-bit)]	# ptr
1ef     movq    R10, RAX	# spill
1f2     addq    R10, #16	# ptr
1f6     long_to_mask_avx XMM1, RBP	! using RBX, RCX, XMM0, as TEMP
26f     store_vector [RDI + #16 (8-bit)],XMM1
	
274     # TLS is in R15
        nop 	# 12 bytes pad for loops and calls
280     cmpq    R10, [R15 + #280 (32-bit)]	# raw ptr
287     jae,u   B48  P=0.000100 C=-1.000000

28d     B19: #	out( B20 ) <- in( B18 )  Freq: 0.999381
28d     # TLS is in R15
28d     movq    [R15 + #264 (32-bit)], R10	# ptr
294     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
29c     movq    [RAX], #1	# long
2a3     movl    [RAX + #8 (8-bit)], narrowklass: precise jdk/incubator/vector/Byte256Vector$Byte256Mask: 0x00007fec840b2710:Constant:exact *	# compressed klass ptr

2aa     B20: #	out( B27 B21 ) <- in( B49 B19 )  Freq: 0.999481
2aa     encode_heap_oop_not_null RCX,RDI
2ef     movl    [RAX + #12 (8-bit)], RCX	# compressed ptr
2f2     
2f2     MEMBAR-storestore (empty encoding)
2f2     # checkcastPP of RAX
2f2     movq    [rsp + #72], RAX	# spill
2f7     movslq  RBP, [RSP + #48 (32-bit)]	# int -> long
2fc     leaq    RCX, [RBP + #16]
300     vector_loadmask_byte XMM3, XMM1
	
308     movl    R10, [rsp + #48]	# spill
30d     testl   R10, R10
310     jl     B27  P=0.500000 C=-1.000000

316     B21: #	out( B27 B22 ) <- in( B20 )  Freq: 0.49974
316     movslq  R10, R8	# i2l
319     addq    R10, #-32	# long
        nop 	# 3 bytes pad for loops and calls
320     cmpq    RBP, R10
323     jg     B27  P=0.500000 C=-1.000000

329     B22: #	out( B50 B23 ) <- in( B21 )  Freq: 0.24987
329     # TLS is in R15
329     movq    R8, [R15 + #264 (32-bit)]	# ptr
330     movq    R10, R8	# spill
333     addq    R10, #48	# ptr
337     # TLS is in R15
        nop 	# 9 bytes pad for loops and calls
340     cmpq    R10, [R15 + #280 (32-bit)]	# raw ptr
347     jae,u   B50  P=0.000100 C=-1.000000

34d     B23: #	out( B24 ) <- in( B22 )  Freq: 0.249845
34d     # TLS is in R15
34d     movq    [R15 + #264 (32-bit)], R10	# ptr
354     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
35c     movq    [R8], #1	# long
363     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
36b     movl    [R8 + #8 (8-bit)], narrowklass: precise [byte (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
373     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
37b     movl    [R8 + #12 (8-bit)], #32	# int
383     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
38b     movq    [R8 + #16 (8-bit)], R12	# long (R12_heapbase==0)
38f     movq    [R8 + #24 (8-bit)], R12	# long (R12_heapbase==0)
393     movq    [R8 + #32 (8-bit)], R12	# long (R12_heapbase==0)
397     movq    [R8 + #40 (8-bit)], R12	# long (R12_heapbase==0)

39b     B24: #	out( B52 B25 ) <- in( B51 B23 )  Freq: 0.24987
39b     
39b     MEMBAR-storestore (empty encoding)
39b     # checkcastPP of R8
39b     load_vector XMM0,[R9 + #16 + RBP]
3a2     # TLS is in R15
3a2     movq    RAX, [R15 + #264 (32-bit)]	# ptr
3a9     movq    R10, RAX	# spill
3ac     addq    R10, #16	# ptr
3b0     replicateI XMM2,#0
3b4     vector_blend  XMM0,XMM2,XMM0,XMM3	!
3ba     store_vector [R8 + #16 (8-bit)],XMM0
	
3c0     # TLS is in R15
3c0     cmpq    R10, [R15 + #280 (32-bit)]	# raw ptr
3c7     jae,u   B52  P=0.000100 C=-1.000000

3cd     B25: #	out( B26 ) <- in( B24 )  Freq: 0.249845
3cd     # TLS is in R15
3cd     movq    [R15 + #264 (32-bit)], R10	# ptr
3d4     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
3dc     movq    [RAX], #1	# long
3e3     movl    [RAX + #8 (8-bit)], narrowklass: precise jdk/incubator/vector/Byte256Vector: 0x00007fec8804fb40:Constant:exact *	# compressed klass ptr

3ea     B26: #	out( B32 ) <- in( B53 B25 )  Freq: 0.24987
3ea     encode_heap_oop_not_null R8,R8
42c     movl    [RAX + #12 (8-bit)], R8	# compressed ptr
430     
430     MEMBAR-storestore (empty encoding)
430     # checkcastPP of RAX
430     movq    [rsp + #64], RAX	# spill
435     jmp     B32

43a     B27: #	out( B72 B28 ) <- in( B21 B20 )  Freq: 0.74961
43a     vmovdqu [rsp + 128],XMM3	# spill
443     movq    [rsp + #88], RCX	# spill
448     movq    [rsp + #80], RBP	# spill
44d     vmovdqu [rsp + 96],XMM1	# spill
453     movl    [rsp + #52], R11	# spill
458     movl    R11, R8	# spill
45b     movq    [rsp + #64], R9	# spill
460     movl    RSI, [rsp + #48]	# spill
464     movq    RDX, jdk/incubator/vector/ByteVector$ByteSpecies (jdk/incubator/vector/VectorSpecies):exact *	# ptr
46e     movq    RCX, RAX	# spill
471     movl    R8, #1	# int
477     movl    R9, R11	# spill
47a     movq    RBP, RAX	# spill
        nop 	# 3 bytes pad for loops and calls
480     call,static  jdk.incubator.vector.ByteVector::checkMaskFromIndexSize
        # jdk.incubator.vector.ByteVector::fromArray @ bci:43 (line 2999) L[0]=_ L[1]=rsp + #64 L[2]=rsp + #48 L[3]=RBP L[4]=#Ptr0x00007fec88009b80
        # test::copyMem_base @ bci:73 (line 18) L[0]=rsp + #56 L[1]=_ L[2]=rsp + #48 L[3]=_ L[4]=RBP
        # OopMap {rbp=Oop [56]=Oop [64]=Oop [72]=Oop off=1160/0x488}

490     B28: #	out( B73 B29 ) <- in( B27 )  Freq: 0.749595
        # Block is sole successor of call
490     movq    RSI, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
49a     movq    RCX, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
4a4     movq    RDX, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
4ae     movl    R8, #32	# int
4b4     movq    R9, [rsp + #64]	# spill
4b9     movq    RDI, [rsp + #88]	# spill
4be     movq    [rsp + #0], RBP	# spill
4c2     xorl    R10, R10	# int
4c5     movl    [rsp + #8], R10	# spill
4ca     movq    [rsp + #16], R9	# spill
4cf     movq    R10, [rsp + #80]	# spill
4d4     movq    [rsp + #24], R10	# spill
4d9     movq    R10, jdk/incubator/vector/ByteVector$ByteSpecies (jdk/incubator/vector/VectorSpecies):exact *	# ptr
4e3     movq    [rsp + #32], R10	# spill
4e8     movq    R10, jdk/incubator/vector/ByteVector$$Lambda+0x00000008000ecd68 (jdk/internal/vm/vector/VectorSupport$LoadVectorMaskedOperation):exact *	# ptr
4f2     movq    [rsp + #40], R10	# spill
        nop 	# 1 bytes pad for loops and calls
4f8     call,static  jdk.internal.vm.vector.VectorSupport::loadMasked
        # jdk.incubator.vector.ByteVector::fromArray0Template @ bci:52 (line 3747) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Byte256Vector::fromArray0 @ bci:11 (line 948) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.ByteVector::fromArray @ bci:55 (line 3000) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:73 (line 18) L[0]=rsp + #56 L[1]=_ L[2]=rsp + #48 L[3]=_ L[4]=RBP
        # OopMap {rbp=Oop [56]=Oop [72]=Oop off=1280/0x500}

508     B29: #	out( B61 B30 ) <- in( B28 )  Freq: 0.74958
        # Block is sole successor of call
508     movl    R11, [RAX + #8 (8-bit)]	# compressed klass ptr
50c     NullCheck RAX

50c     B30: #	out( B58 B31 ) <- in( B29 )  Freq: 0.74958
50c     movq    R10, precise jdk/incubator/vector/ByteVector: 0x00007fec88006a00:Constant:exact *	# ptr
516     decode_and_move_klass_not_null R8,R11
523     movq    R11, [R8 + #96 (8-bit)]	# class
527     cmpq    R11, R10	# ptr
52a     jne,u   B58  P=0.000001 C=-1.000000

530     B31: #	out( B32 ) <- in( B30 )  Freq: 0.749579
530     # checkcastPP of RAX
530     movq    [rsp + #64], RAX	# spill
535     movl    R11, [rsp + #52]	# spill
53a     vmovdqu XMM1,[rsp + 96]	# spill
540     movq    RBP, [rsp + #80]	# spill
545     vmovdqu XMM3,[rsp + 128]	# spill

54e     B32: #	out( B37 B33 ) <- in( B26 B31 )  Freq: 0.999449
54e     vallones XMM0
552     vptest_ge16  XMM3, XMM0
	
557     jae,u   B37  P=0.100000 C=-1.000000

55d     B33: #	out( B57 B34 ) <- in( B32 )  Freq: 0.899504
55d     movq    R10, [rsp + #64]	# spill
562     movl    R8, [R10 + #8 (8-bit)]	# compressed klass ptr
566     cmpl    R8, narrowklass: precise jdk/incubator/vector/Byte256Vector: 0x00007fec8804fb40:Constant:exact *	# compressed klass ptr
56d     jne,u   B57  P=0.000001 C=-1.000000

573     B34: #	out( B56 B35 ) <- in( B33 )  Freq: 0.899503
573     movq    RBP, [rsp + #64]	# spill
578     # checkcastPP of RBP
578     movl    R8, [rsp + #48]	# spill
        nop 	# 3 bytes pad for loops and calls
580     cmpl    R8, R11	# unsigned
583     jae,u   B56  P=0.000001 C=-1.000000

589     B35: #	out( B36 ) <- in( B34 )  Freq: 0.899502
589     movl    R10, [RBP + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
58d     load_vector XMM0,[R12 + R10 << 3 + #16] (compressed oop addressing)
594     movl    R11, [rsp + #48]	# spill
599     # castII of R11
599     movq    R10, [rsp + #56]	# spill
59e     store_vector [R10 + #16 + R11],XMM0
	

5a5     B36: #	out( N1015 ) <- in( B43 B35 )  Freq: 0.999442
5a5     vzeroupper
	addq    rsp, 224	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

5bd     ret

5be     B37: #	out( B68 B38 ) <- in( B32 )  Freq: 0.0999449
5be     movq    RSI, [rsp + #64]	# spill
5c3     vmovdqu [rsp + 96],XMM1	# spill
        nop 	# 1 bytes pad for loops and calls
5ca     movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.ByteVector::vspecies
        # jdk.incubator.vector.ByteVector::intoArray @ bci:17 (line 3407) L[0]=rsp + #64 L[1]=rsp + #56 L[2]=rsp + #48 L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Mask={ [payload :0]=rsp + #96 }
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {[56]=Oop [64]=Oop [72]=Oop off=1500/0x5dc}

5e4     B38: #	out( B62 B39 ) <- in( B37 )  Freq: 0.0999429
        # Block is sole successor of call
5e4     movl    R10, [RAX + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
5e8     NullCheck RAX

5e8     B39: #	out( B41 B40 ) <- in( B38 )  Freq: 0.0999428
5e8     movl    R11, [rsp + #48]	# spill
5ed     testl   R11, R11
5f0     jl,s   B41  P=0.500000 C=-1.000000

5f2     B40: #	out( B42 B41 ) <- in( B39 )  Freq: 0.0499714
5f2     movslq  R10, R10	# i2l
5f5     movl    R11, [rsp + #192]	# spill
5fd     movslq  R11, R11	# i2l
600     subq    R11, R10	# long
603     cmpq    RBP, R11
606     jle,s   B42  P=0.500000 C=-1.000000

608     B41: #	out( B70 B42 ) <- in( B40 B39 )  Freq: 0.0749571
608     movl    RSI, [rsp + #48]	# spill
60c     movq    RDX, RAX	# spill
60f     movq    RCX, [rsp + #72]	# spill
614     movl    R8, #1	# int
61a     movl    R9, [rsp + #192]	# spill
        nop 	# 2 bytes pad for loops and calls
624     call,static  jdk.incubator.vector.ByteVector::checkMaskFromIndexSize
        # jdk.incubator.vector.ByteVector::intoArray @ bci:46 (line 3409) L[0]=rsp + #64 L[1]=rsp + #56 L[2]=rsp + #48 L[3]=rsp + #72 L[4]=_
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {[56]=Oop [64]=Oop [72]=Oop off=1580/0x62c}

634     B42: #	out( B69 B43 ) <- in( B41 B40 )  Freq: 0.0999413
634     movq    RSI, [rsp + #64]	# spill
639     movq    RDX, [rsp + #56]	# spill
63e     movl    RCX, [rsp + #48]	# spill
642     movq    R8, [rsp + #72]	# spill
        nop 	# 3 bytes pad for loops and calls
64a     movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.ByteVector::intoArray0
        # jdk.incubator.vector.ByteVector::intoArray @ bci:53 (line 3411) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {off=1628/0x65c}

664     B43: #	out( B36 ) <- in( B42 )  Freq: 0.0999393
        # Block is sole successor of call
664     jmp     B36

669     B44: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
669     xorl    R10, R10	# ptr
66c     movq    [rsp + #56], R10	# spill
671     jmp     B4

676     B45: #	out( N1015 ) <- in( B12 )  Freq: 0.000256445
676     movl    RSI, #-28	# int
67b     movq    [rsp + #72], R9	# spill
680     movl    [rsp + #52], R10	# spill
        nop 	# 3 bytes pad for loops and calls
688     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 385) L[0]=_ L[1]=_ STK[0]=rsp + #48 STK[1]=rsp + #52 STK[2]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.ByteVector::fromArray @ bci:9 (line 2963) L[0]=#Ptr0x00007fec88009b80 L[1]=rsp + #72 L[2]=_ L[3]=_
        # test::copyMem_base @ bci:21 (line 12) L[0]=rsp + #56 L[1]=rsp + #72 L[2]=rsp + #48 L[3]=_ L[4]=_
        # OopMap {[56]=Oop [72]=Oop off=1680/0x690}
698     stop	# ShouldNotReachHere

6ac     B46: #	out( B66 B47 ) <- in( B16 )  Freq: 9.99646e-05
6ac     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #48]
	movl    [rsp + #84], rax
	movq    rax, [rsp - #8]
6be     movl    [rsp + #80], R11	# spill
6c3     movl    [rsp + #72], R8	# spill
6c8     movq    [rsp + #64], R9	# spill
6cd     pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #48]
6d7     movq    RSI, precise [bool (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# ptr
6e1     movl    RDX, #32	# int
        nop 	# 2 bytes pad for loops and calls
6e8     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.VectorMask::fromLong @ bci:39 (line 242) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007fec840ad8d0 STK[1]=#Ptr0x00007fecac114020 STK[2]=#32 STK[3]=RBP STK[4]=_ STK[5]=#1 STK[6]=#Ptr0x00007fec88009b80 STK[7]=#Ptr0x00007fec840ae198
        # test::copyMem_base @ bci:61 (line 17) L[0]=rsp + #48 L[1]=rsp + #64 L[2]=rsp + #84 L[3]=_ L[4]=_
        # OopMap {[48]=Oop [64]=Oop off=1776/0x6f0}

6f8     B47: #	out( B18 ) <- in( B46 )  Freq: 9.99626e-05
        # Block is sole successor of call
6f8     pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #56]
702     movq    R9, [rsp + #64]	# spill
707     movl    R8, [rsp + #72]	# spill
70c     movl    R11, [rsp + #80]	# spill
711     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #84]
	movl    [rsp + #48], rax
	movq    rax, [rsp - #8]
723     movq    RDI, RAX	# spill
726     jmp     B18

72b     B48: #	out( B65 B49 ) <- in( B18 )  Freq: 9.99646e-05
72b     vmovdqu [rsp + 96],XMM1	# spill
731     movq    [rsp + #88], RDI	# spill
736     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #48]
	movl    [rsp + #84], rax
	movq    rax, [rsp - #8]
748     movl    [rsp + #80], R11	# spill
74d     movl    [rsp + #72], R8	# spill
752     movq    [rsp + #64], R9	# spill
757     pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #48]
761     movq    RSI, precise jdk/incubator/vector/Byte256Vector$Byte256Mask: 0x00007fec840b2710:Constant:exact *	# ptr
        nop 	# 1 bytes pad for loops and calls
76c     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.VectorMask::fromLong @ bci:39 (line 242) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007fec840ad8d0 STK[1]=#Ptr0x00007fecac114020 STK[2]=#32 STK[3]=RBP STK[4]=_ STK[5]=#1 STK[6]=#Ptr0x00007fec88009b80 STK[7]=#Ptr0x00007fec840ae198
        # test::copyMem_base @ bci:61 (line 17) L[0]=rsp + #48 L[1]=rsp + #64 L[2]=rsp + #84 L[3]=_ L[4]=_
        # OopMap {[48]=Oop [64]=Oop [88]=Oop off=1908/0x774}

77c     B49: #	out( B20 ) <- in( B48 )  Freq: 9.99626e-05
        # Block is sole successor of call
77c     pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #56]
786     movq    R9, [rsp + #64]	# spill
78b     movl    R8, [rsp + #72]	# spill
790     movl    R11, [rsp + #80]	# spill
795     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #84]
	movl    [rsp + #48], rax
	movq    rax, [rsp - #8]
7a7     movq    RDI, [rsp + #88]	# spill
7ac     vmovdqu XMM1,[rsp + 96]	# spill
7b2     jmp     B20

7b7     B50: #	out( B63 B51 ) <- in( B22 )  Freq: 2.49912e-05
7b7     vmovdqu [rsp + 160],XMM3	# spill
7c0     movq    [rsp + #128], RCX	# spill
7c8     movq    [rsp + #88], RBP	# spill
7cd     movq    [rsp + #80], RAX	# spill
7d2     vmovdqu [rsp + 96],XMM1	# spill
7d8     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #48]
	movl    [rsp + #72], rax
	movq    rax, [rsp - #8]
7ea     movl    [rsp + #68], R11	# spill
7ef     movq    [rsp + #48], R9	# spill
7f4     movq    RBP, [rsp + #56]	# spill
7f9     movq    RSI, precise [byte (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# ptr
803     movl    RDX, #32	# int
808     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.ByteVector::fromArray0Template @ bci:52 (line 3747) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#Ptr0x00007fec800947a8 STK[1]=#Ptr0x00007fec840ad8d0 STK[2]=#Ptr0x00007fecac114020 STK[3]=#32 STK[4]=rsp + #48 STK[5]=rsp + #128 STK[6]=_ STK[7]=#ScObj0 STK[8]=#1 STK[9]=rsp + #48 STK[10]=rsp + #88 STK[11]=_ STK[12]=#Ptr0x00007fec88009b80 STK[13]=#Ptr0x00007fec98198fc0
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Mask={ [payload :0]=rsp + #96 }
        # jdk.incubator.vector.Byte256Vector::fromArray0 @ bci:11 (line 948) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.ByteVector::fromArray @ bci:32 (line 2996) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:73 (line 18) L[0]=RBP L[1]=_ L[2]=rsp + #72 L[3]=_ L[4]=#ScObj0
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Mask={ [payload :0]=rsp + #96 }
        # OopMap {rbp=Oop [48]=Oop [80]=Oop off=2064/0x810}

818     B51: #	out( B24 ) <- in( B50 )  Freq: 2.49907e-05
        # Block is sole successor of call
818     movq    [rsp + #56], RBP	# spill
81d     movq    R9, [rsp + #48]	# spill
822     movl    R11, [rsp + #68]	# spill
827     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #72]
	movl    [rsp + #48], rax
	movq    rax, [rsp - #8]
839     vmovdqu XMM1,[rsp + 96]	# spill
83f     pushq   [rsp + #80]	# 64-bit mem-mem spill
	popq    [rsp + #72]
849     movq    RBP, [rsp + #88]	# spill
84e     movq    RCX, [rsp + #128]	# spill
856     vmovdqu XMM3,[rsp + 160]	# spill
85f     movq    R8, RAX	# spill
862     jmp     B24

867     B52: #	out( B64 B53 ) <- in( B24 )  Freq: 2.49912e-05
867     movq    [rsp + #88], R8	# spill
86c     vmovdqu [rsp + 128],XMM3	# spill
875     movq    [rsp + #80], RBP	# spill
87a     vmovdqu [rsp + 96],XMM1	# spill
880     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #48]
	movl    [rsp + #64], rax
	movq    rax, [rsp - #8]
892     movl    [rsp + #52], R11	# spill
897     movq    RBP, [rsp + #56]	# spill
89c     movq    RSI, precise jdk/incubator/vector/Byte256Vector: 0x00007fec8804fb40:Constant:exact *	# ptr
8a6     movq    [rsp + #168], RCX	# spill
8ae     movq    [rsp + #176], R9	# spill
        nop 	# 2 bytes pad for loops and calls
8b8     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.ByteVector::fromArray0Template @ bci:52 (line 3747) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#Ptr0x00007fec800947a8 STK[1]=#Ptr0x00007fec840ad8d0 STK[2]=#Ptr0x00007fecac114020 STK[3]=#32 STK[4]=rsp + #176 STK[5]=rsp + #168 STK[6]=_ STK[7]=#ScObj0 STK[8]=#1 STK[9]=rsp + #176 STK[10]=rsp + #80 STK[11]=_ STK[12]=#Ptr0x00007fec88009b80 STK[13]=#Ptr0x00007fec98198fc0
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Mask={ [payload :0]=rsp + #96 }
        # jdk.incubator.vector.Byte256Vector::fromArray0 @ bci:11 (line 948) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.ByteVector::fromArray @ bci:32 (line 2996) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:73 (line 18) L[0]=RBP L[1]=_ L[2]=rsp + #64 L[3]=_ L[4]=#ScObj0
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Mask={ [payload :0]=rsp + #96 }
        # OopMap {rbp=Oop [72]=Oop [88]=Oop [176]=Oop off=2240/0x8c0}

8c8     B53: #	out( B26 ) <- in( B52 )  Freq: 2.49907e-05
        # Block is sole successor of call
8c8     movq    [rsp + #56], RBP	# spill
8cd     movl    R11, [rsp + #52]	# spill
8d2     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #64]
	movl    [rsp + #48], rax
	movq    rax, [rsp - #8]
8e4     vmovdqu XMM1,[rsp + 96]	# spill
8ea     movq    RBP, [rsp + #80]	# spill
8ef     vmovdqu XMM3,[rsp + 128]	# spill
8f8     movq    R8, [rsp + #88]	# spill
        nop 	# 3 bytes pad for loops and calls
900     jmp     B26

905     B54: #	out( N1015 ) <- in( B2 B5 )  Freq: 1.999e-06
905     movl    RSI, #-115	# int
90a     movl    [rsp + #48], R13	# spill
90f     movq    [rsp + #56], RBX	# spill
914     call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret' debug_id='0')
        # test::copyMem_base @ bci:2 (line 11) L[0]=rsp + #56 L[1]=RBP L[2]=rsp + #48 L[3]=_ L[4]=_
        # OopMap {rbp=Oop [56]=Oop off=2332/0x91c}
924     stop	# ShouldNotReachHere

938     B55: #	out( N1015 ) <- in( B8 B6 B7 )  Freq: 3.01327e-06
938     movl    RSI, #-66	# int
93d     movl    RBP, R13	# spill
940     pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #48]
94a     movq    [rsp + #56], R9	# spill
        nop 	# 1 bytes pad for loops and calls
950     call,static  wrapper for: uncommon_trap(reason='profile_predicate' action='maybe_recompile' debug_id='0')
        # test::copyMem_base @ bci:2 (line 11) L[0]=rsp + #48 L[1]=rsp + #56 L[2]=RBP L[3]=_ L[4]=_
        # OopMap {[48]=Oop [56]=Oop off=2392/0x958}
960     stop	# ShouldNotReachHere

974     B56: #	out( N1015 ) <- in( B34 )  Freq: 9.11448e-07
974     movl    RSI, #-28	# int
979     movl    [rsp + #52], R11	# spill
        nop 	# 2 bytes pad for loops and calls
980     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 385) L[0]=_ L[1]=_ STK[0]=rsp + #48 STK[1]=rsp + #52 STK[2]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.ByteVector::intoArray @ bci:7 (line 3364) L[0]=RBP L[1]=rsp + #56 L[2]=_ L[3]=_
        # jdk.incubator.vector.ByteVector::intoArray @ bci:10 (line 3405) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {rbp=Oop [56]=Oop off=2440/0x988}
990     stop	# ShouldNotReachHere

9a4     B57: #	out( N1015 ) <- in( B33 )  Freq: 8.99504e-07
9a4     movl    RSI, #-34	# int
9a9     movl    RBP, [rsp + #48]	# spill
        nop 	# 3 bytes pad for loops and calls
9b0     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.ByteVector::intoArray @ bci:2 (line 3364) L[0]=rsp + #64 L[1]=rsp + #56 L[2]=_ L[3]=_ STK[0]=RBP STK[1]=rsp + #64
        # jdk.incubator.vector.ByteVector::intoArray @ bci:10 (line 3405) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {[56]=Oop [64]=Oop off=2488/0x9b8}
9c0     stop	# ShouldNotReachHere

9d4     B58: #	out( N1015 ) <- in( B30 )  Freq: 7.4958e-07
9d4     movl    RSI, #-34	# int
9d9     movq    RBP, RAX	# spill
9dc     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.ByteVector::fromArray0Template @ bci:55 (line 3747) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=RBP
        # jdk.incubator.vector.Byte256Vector::fromArray0 @ bci:11 (line 948) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.ByteVector::fromArray @ bci:55 (line 3000) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:73 (line 18) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {rbp=Oop off=2532/0x9e4}
9ec     stop	# ShouldNotReachHere

a00     B59: #	out( N1015 ) <- in( B15 )  Freq: 4.99741e-07
a00     movl    RSI, #-187	# int
        nop 	# 3 bytes pad for loops and calls
a08     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # test::copyMem_base @ bci:49 (line 16) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP
        # OopMap {off=2576/0xa10}
a18     stop	# ShouldNotReachHere

a2c     B60: #	out( N1015 ) <- in( B4 )  Freq: 1.01328e-06
a2c     movl    RSI, #-138	# int
a31     movl    RBP, R13	# spill
a34     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # test::copyMem_base @ bci:2 (line 11) L[0]=rsp + #56 L[1]=#null L[2]=RBP L[3]=_ L[4]=_
        # OopMap {[56]=Oop off=2620/0xa3c}
a44     stop	# ShouldNotReachHere

a58     B61: #	out( N1015 ) <- in( B29 )  Freq: 7.59534e-07
a58     movl    RSI, #-12	# int
a5d     movl    RBP, [rsp + #48]	# spill
        nop 	# 3 bytes pad for loops and calls
a64     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.ByteVector::fromArray0Template @ bci:55 (line 3747) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#null
        # jdk.incubator.vector.Byte256Vector::fromArray0 @ bci:11 (line 948) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.ByteVector::fromArray @ bci:55 (line 3000) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:73 (line 18) L[0]=rsp + #56 L[1]=_ L[2]=RBP L[3]=_ L[4]=#ScObj0
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Mask={ [payload :0]=rsp + #96 }
        # OopMap {[56]=Oop off=2668/0xa6c}
a74     stop	# ShouldNotReachHere

a88     B62: #	out( N1015 ) <- in( B38 )  Freq: 1.0127e-07
a88     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
a90     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.ByteVector::intoArray @ bci:26 (line 3408) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_ STK[2]=#null
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {off=2712/0xa98}
aa0     stop	# ShouldNotReachHere

ab4     B63: #	out( B74 ) <- in( B50 )  Freq: 2.49912e-10
ab4     # exception oop is in rax; no code emitted
ab4     jmp     B74

ab9     B64: #	out( B74 ) <- in( B52 )  Freq: 2.49912e-10
ab9     # exception oop is in rax; no code emitted
ab9     jmp     B74

abe     B65: #	out( B67 ) <- in( B48 )  Freq: 9.99646e-10
abe     # exception oop is in rax; no code emitted
        nop 	# 2 bytes pad for loops and calls
ac0     jmp,s   B67

ac2     B66: #	out( B67 ) <- in( B46 )  Freq: 9.99646e-10
ac2     # exception oop is in rax; no code emitted

ac2     B67: #	out( B75 ) <- in( B66 B65 )  Freq: 1.99929e-09
ac2     movq    RSI, RAX	# spill
ac5     jmp,s   B75

ac7     B68: #	out( B71 ) <- in( B37 )  Freq: 9.99449e-07
ac7     # exception oop is in rax; no code emitted
ac7     jmp,s   B71

ac9     B69: #	out( B71 ) <- in( B42 )  Freq: 9.99413e-07
ac9     # exception oop is in rax; no code emitted
ac9     jmp,s   B71

acb     B70: #	out( B71 ) <- in( B41 )  Freq: 7.49571e-07
acb     # exception oop is in rax; no code emitted

acb     B71: #	out( B75 ) <- in( B68 B69 B70 )  Freq: 2.74843e-06
acb     movq    RSI, RAX	# spill
ace     jmp,s   B75

ad0     B72: #	out( B74 ) <- in( B27 )  Freq: 7.4961e-06
ad0     # exception oop is in rax; no code emitted
ad0     jmp,s   B74

ad2     B73: #	out( B74 ) <- in( B28 )  Freq: 7.49595e-06
ad2     # exception oop is in rax; no code emitted

ad2     B74: #	out( B75 ) <- in( B63 B64 B72 B73 )  Freq: 1.49926e-05
ad2     movq    RSI, RAX	# spill

ad5     B75: #	out( N1015 ) <- in( B74 B71 B67 )  Freq: 1.7743e-05
ad5     vzeroupper
	addq    rsp, 224	# Destroy frame
	popq    rbp

ae0     jmp     rethrow_stub

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     596  281 %           test::copyMem_base @ 2 (84 bytes)
 total in heap  [0x00007fed0d1dbf90,0x00007fed0d1dda08] = 6776
 relocation     [0x00007fed0d1dc100,0x00007fed0d1dc288] = 392
 main code      [0x00007fed0d1dc2a0,0x00007fed0d1dcda8] = 2824
 stub code      [0x00007fed0d1dcda8,0x00007fed0d1dcde0] = 56
 oops           [0x00007fed0d1dcde0,0x00007fed0d1dce18] = 56
 metadata       [0x00007fed0d1dce18,0x00007fed0d1dcf08] = 240
 scopes data    [0x00007fed0d1dcf08,0x00007fed0d1dd320] = 1048
 scopes pcs     [0x00007fed0d1dd320,0x00007fed0d1dd8f0] = 1488
 dependencies   [0x00007fed0d1dd8f0,0x00007fed0d1dd908] = 24
 handler table  [0x00007fed0d1dd908,0x00007fed0d1dd9e0] = 216
 nul chk table  [0x00007fed0d1dd9e0,0x00007fed0d1dda08] = 40

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007fecc8603650} 'copyMem_base' '([B[B)V' in 'test'
 ;; N1015: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fed0d1dc2a0:   callq  0x00007fed16257d50           ;   {runtime_call os::breakpoint()}
  0x00007fed0d1dc2a5:   nop
  0x00007fed0d1dc2a6:   nop
  0x00007fed0d1dc2a7:   nop
  0x00007fed0d1dc2a8:   nop
  0x00007fed0d1dc2a9:   nop
  0x00007fed0d1dc2aa:   nop
  0x00007fed0d1dc2ab:   nop
  0x00007fed0d1dc2ac:   nop
  0x00007fed0d1dc2ad:   nop
  0x00007fed0d1dc2ae:   nop
  0x00007fed0d1dc2af:   nop
 ;; B1: #	out( B44 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fed0d1dc2b0:   mov    %eax,-0x18000(%rsp)
  0x00007fed0d1dc2b7:   push   %rbp
  0x00007fed0d1dc2b8:   sub    $0xe0,%rsp
  0x00007fed0d1dc2bf:   nop
  0x00007fed0d1dc2c0:   cmpl   $0x1,0x20(%r15)
  0x00007fed0d1dc2c8:   jne    0x00007fed0d1dcd9b
  0x00007fed0d1dc2ce:   mov    0x20(%rsi),%rbx
  0x00007fed0d1dc2d2:   mov    0x18(%rsi),%rbp
  0x00007fed0d1dc2d6:   mov    0x10(%rsi),%r13d             ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
  0x00007fed0d1dc2da:   mov    %rsi,%rdi
  0x00007fed0d1dc2dd:   vzeroupper 
  0x00007fed0d1dc2e0:   movabs $0x7fed163cf980,%r10
  0x00007fed0d1dc2ea:   callq  *%r10
  0x00007fed0d1dc2ed:   nopl   0x0(%rax,%rax,1)             ;   {other}
  0x00007fed0d1dc2f5:   test   %rbx,%rbx                    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc2f8:   je     0x00007fed0d1dc909
 ;; B2: #	out( B54 B3 ) <- in( B1 )  Freq: 0.999
  0x00007fed0d1dc2fe:   mov    0x8(%rbx),%r10d
  0x00007fed0d1dc302:   cmp    $0x40a00,%r10d               ;   {metadata({type array byte})}
  0x00007fed0d1dc309:   jne    0x00007fed0d1dcba5
 ;; B3: #	out( B4 ) <- in( B2 )  Freq: 0.998999
  0x00007fed0d1dc30f:   mov    %rbx,%r10
  0x00007fed0d1dc312:   mov    %r10,0x38(%rsp)
 ;; B4: #	out( B60 B5 ) <- in( B3 B44 )  Freq: 0.999999
  0x00007fed0d1dc317:   mov    0x8(%rbp),%r10d              ; implicit exception: dispatches to 0x00007fed0d1dcccc
 ;; B5: #	out( B54 B6 ) <- in( B4 )  Freq: 0.999998
  0x00007fed0d1dc31b:   nop
  0x00007fed0d1dc31c:   nop
  0x00007fed0d1dc31d:   nop
  0x00007fed0d1dc31e:   nop
  0x00007fed0d1dc31f:   nop
  0x00007fed0d1dc320:   cmp    $0x40a00,%r10d               ;   {metadata({type array byte})}
  0x00007fed0d1dc327:   jne    0x00007fed0d1dcba5
 ;; B6: #	out( B55 B7 ) <- in( B5 )  Freq: 0.999997
  0x00007fed0d1dc32d:   mov    %rbp,%r9                     ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
  0x00007fed0d1dc330:   mov    0xc(%r9),%r8d                ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@7 (line 11)
  0x00007fed0d1dc334:   lea    -0x1f(%r8),%r10d
  0x00007fed0d1dc338:   test   %r10d,%r10d
  0x00007fed0d1dc33b:   nop
  0x00007fed0d1dc33c:   nop
  0x00007fed0d1dc33d:   nop
  0x00007fed0d1dc33e:   nop
  0x00007fed0d1dc33f:   nop
  0x00007fed0d1dc340:   jl     0x00007fed0d1dcbd8
 ;; B7: #	out( B55 B8 ) <- in( B6 )  Freq: 0.999996
  0x00007fed0d1dc346:   mov    0x38(%rsp),%r11
  0x00007fed0d1dc34b:   mov    0xc(%r11),%ecx               ; implicit exception: dispatches to 0x00007fed0d1dcbd8
 ;; B8: #	out( B55 B9 ) <- in( B7 )  Freq: 0.999995
  0x00007fed0d1dc34f:   mov    %ecx,0xc0(%rsp)
  0x00007fed0d1dc356:   lea    -0x1f(%rcx),%r11d
  0x00007fed0d1dc35a:   nop
  0x00007fed0d1dc35b:   nop
  0x00007fed0d1dc35c:   nop
  0x00007fed0d1dc35d:   nop
  0x00007fed0d1dc35e:   nop
  0x00007fed0d1dc35f:   nop
  0x00007fed0d1dc360:   test   %r11d,%r11d
  0x00007fed0d1dc363:   jl     0x00007fed0d1dcbd8
 ;; B9: #	out( B11 ) <- in( B8 )  Freq: 0.999994
  0x00007fed0d1dc369:   mov    %r8d,%ebx
  0x00007fed0d1dc36c:   and    $0xffffffe0,%ebx
  0x00007fed0d1dc36f:   mov    %r13d,0x30(%rsp)
  0x00007fed0d1dc374:   jmp    0x00007fed0d1dc39b
  0x00007fed0d1dc376:   nop
  0x00007fed0d1dc377:   nop
  0x00007fed0d1dc378:   nop
  0x00007fed0d1dc379:   nop
  0x00007fed0d1dc37a:   nop
  0x00007fed0d1dc37b:   nop
  0x00007fed0d1dc37c:   nop
  0x00007fed0d1dc37d:   nop
  0x00007fed0d1dc37e:   nop
  0x00007fed0d1dc37f:   nop
 ;; B10: #	out( B11 ) <- in( B13 ) top-of-loop Freq: 253.084
  0x00007fed0d1dc380:   mov    0x38(%rsp),%rdi              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc385:   vmovdqu %ymm0,0x10(%rdi,%rcx,1)     ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
  0x00007fed0d1dc38b:   mov    0x3c0(%r15),%rcx             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc392:   add    $0x20,%edx                   ; ImmutableOopMap {r9=Oop [56]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::copyMem_base@40 (line 11)
  0x00007fed0d1dc395:   test   %eax,(%rcx)                  ;   {poll}
  0x00007fed0d1dc397:   mov    %edx,0x30(%rsp)              ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
 ;; B11: #	out( B15 B12 ) <- in( B9 B10 ) Loop( B11-B10 inner ) Freq: 254.084
  0x00007fed0d1dc39b:   mov    0x30(%rsp),%ecx
  0x00007fed0d1dc39f:   nop
  0x00007fed0d1dc3a0:   cmp    %ebx,%ecx                    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc3a2:   jge    0x00007fed0d1dc404
 ;; B12: #	out( B45 B13 ) <- in( B11 )  Freq: 253.084
  0x00007fed0d1dc3a8:   cmp    %r10d,%ecx
  0x00007fed0d1dc3ab:   jae    0x00007fed0d1dc916
 ;; B13: #	out( B10 B14 ) <- in( B12 )  Freq: 253.084
  0x00007fed0d1dc3b1:   mov    0x30(%rsp),%edx              ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
                                                            ; - test::copyMem_base@21 (line 12)
  0x00007fed0d1dc3b5:   movslq %edx,%rcx                    ;*i2l {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::arrayAddress@4 (line 3956)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@20 (line 3732)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
                                                            ; - test::copyMem_base@21 (line 12)
  0x00007fed0d1dc3b8:   vmovdqu 0x10(%r9,%rcx,1),%ymm0      ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@32 (line 3730)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
                                                            ; - test::copyMem_base@21 (line 12)
  0x00007fed0d1dc3bf:   nop
  0x00007fed0d1dc3c0:   cmp    %r11d,%edx
  0x00007fed0d1dc3c3:   jb     0x00007fed0d1dc380           ;*invokedynamic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@27 (line 3732)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
                                                            ; - test::copyMem_base@21 (line 12)
 ;; B14: #	out( N1015 ) <- in( B13 )  Freq: 0.000256445
  0x00007fed0d1dc3c5:   mov    $0xffffffe4,%esi
  0x00007fed0d1dc3ca:   mov    %edx,0x30(%rsp)
  0x00007fed0d1dc3ce:   mov    %r9,0x40(%rsp)
  0x00007fed0d1dc3d3:   mov    %r11d,0x34(%rsp)
  0x00007fed0d1dc3d8:   vmovdqu %ymm0,0x60(%rsp)            ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc3de:   nop
  0x00007fed0d1dc3df:   nop
  0x00007fed0d1dc3e0:   vzeroupper 
  0x00007fed0d1dc3e3:   callq  0x00007fed0d11f020           ; ImmutableOopMap {[56]=Oop [64]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
                                                            ; - test::copyMem_base@26 (line 13)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1dc3e8:   nopl   0x1000458(%rax,%rax,1)       ;   {other}
  0x00007fed0d1dc3f0:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1dc3fa:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1dc3fe:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1dc403:   hlt    
 ;; B15: #	out( B59 B16 ) <- in( B11 )  Freq: 0.999481
  0x00007fed0d1dc404:   mov    %r8d,%ebp
  0x00007fed0d1dc407:   sub    0x30(%rsp),%ebp
  0x00007fed0d1dc40b:   test   %ebp,%ebp                    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc40d:   jle    0x00007fed0d1dcca0           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B16: #	out( B46 B17 ) <- in( B15 )  Freq: 0.999481
  0x00007fed0d1dc413:   mov    0x108(%r15),%rdi
  0x00007fed0d1dc41a:   mov    %rdi,%r10
  0x00007fed0d1dc41d:   add    $0x30,%r10
  0x00007fed0d1dc421:   mov    $0x1,%ebx
  0x00007fed0d1dc426:   shlx   %ebp,%ebx,%ebx
  0x00007fed0d1dc42b:   dec    %ebx                         ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc42d:   mov    %ebx,%ebp
  0x00007fed0d1dc42f:   cmp    0x118(%r15),%r10
  0x00007fed0d1dc436:   jae    0x00007fed0d1dc94c
 ;; B17: #	out( B18 ) <- in( B16 )  Freq: 0.999381
  0x00007fed0d1dc43c:   mov    %r10,0x108(%r15)
  0x00007fed0d1dc443:   prefetchw 0xc0(%r10)
  0x00007fed0d1dc44b:   movq   $0x1,(%rdi)
  0x00007fed0d1dc452:   prefetchw 0x100(%r10)
  0x00007fed0d1dc45a:   movl   $0x40200,0x8(%rdi)           ;   {metadata({type array bool})}
  0x00007fed0d1dc461:   prefetchw 0x140(%r10)
  0x00007fed0d1dc469:   movl   $0x20,0xc(%rdi)
  0x00007fed0d1dc470:   prefetchw 0x180(%r10)
  0x00007fed0d1dc478:   mov    %r12,0x10(%rdi)
  0x00007fed0d1dc47c:   mov    %r12,0x18(%rdi)
  0x00007fed0d1dc480:   mov    %r12,0x20(%rdi)
  0x00007fed0d1dc484:   mov    %r12,0x28(%rdi)              ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B18: #	out( B48 B19 ) <- in( B47 B17 )  Freq: 0.999481
  0x00007fed0d1dc488:   mov    0x108(%r15),%rax
  0x00007fed0d1dc48f:   mov    %rax,%r10
  0x00007fed0d1dc492:   add    $0x10,%r10                   ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc496:   movabs $0x101010101010101,%rbx
  0x00007fed0d1dc4a0:   pdep   %rbx,%rbp,%rbx
  0x00007fed0d1dc4a5:   mov    %rbp,%rcx
  0x00007fed0d1dc4a8:   vpxor  %ymm0,%ymm0,%ymm0
  0x00007fed0d1dc4ac:   vmovq  %rbx,%xmm0
  0x00007fed0d1dc4b1:   vmovq  %rbx,%xmm1
  0x00007fed0d1dc4b6:   movabs $0x101010101010101,%rbx
  0x00007fed0d1dc4c0:   shr    $0x8,%rcx
  0x00007fed0d1dc4c4:   pdep   %rbx,%rcx,%rbx
  0x00007fed0d1dc4c9:   vpinsrq $0x1,%rbx,%xmm0,%xmm0
  0x00007fed0d1dc4cf:   vmovdqu %ymm0,%ymm1
  0x00007fed0d1dc4d3:   vpxor  %xmm0,%xmm0,%xmm0
  0x00007fed0d1dc4d7:   movabs $0x101010101010101,%rbx
  0x00007fed0d1dc4e1:   shr    $0x8,%rcx
  0x00007fed0d1dc4e5:   pdep   %rbx,%rcx,%rbx
  0x00007fed0d1dc4ea:   vpinsrq $0x0,%rbx,%xmm0,%xmm0
  0x00007fed0d1dc4f0:   movabs $0x101010101010101,%rbx
  0x00007fed0d1dc4fa:   shr    $0x8,%rcx
  0x00007fed0d1dc4fe:   pdep   %rbx,%rcx,%rbx
  0x00007fed0d1dc503:   vpinsrq $0x1,%rbx,%xmm0,%xmm0
  0x00007fed0d1dc509:   vinsertf128 $0x1,%xmm0,%ymm1,%ymm1
  0x00007fed0d1dc50f:   vmovdqu %ymm1,0x10(%rdi)
  0x00007fed0d1dc514:   nop
  0x00007fed0d1dc515:   nop
  0x00007fed0d1dc516:   nop
  0x00007fed0d1dc517:   nop
  0x00007fed0d1dc518:   nop
  0x00007fed0d1dc519:   nop
  0x00007fed0d1dc51a:   nop
  0x00007fed0d1dc51b:   nop
  0x00007fed0d1dc51c:   nop
  0x00007fed0d1dc51d:   nop
  0x00007fed0d1dc51e:   nop
  0x00007fed0d1dc51f:   nop
  0x00007fed0d1dc520:   cmp    0x118(%r15),%r10
  0x00007fed0d1dc527:   jae    0x00007fed0d1dc9cb           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B19: #	out( B20 ) <- in( B18 )  Freq: 0.999381
  0x00007fed0d1dc52d:   mov    %r10,0x108(%r15)
  0x00007fed0d1dc534:   prefetchw 0xc0(%r10)
  0x00007fed0d1dc53c:   movq   $0x1,(%rax)
  0x00007fed0d1dc543:   movl   $0xde750,0x8(%rax)           ;   {metadata('jdk/incubator/vector/Byte256Vector$Byte256Mask')}
 ;; B20: #	out( B27 B21 ) <- in( B49 B19 )  Freq: 0.999481
  0x00007fed0d1dc54a:   cmp    0x9c3da5f(%rip),%r12        # 0x00007fed16e19fb0
                                                            ;   {external_word}
  0x00007fed0d1dc551:   je     0x00007fed0d1dc56b
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007fed0d1dc557:   movabs $0x7fed169eedf8,%rdi         ;   {external_word}
  0x00007fed0d1dc561:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1dc565:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1dc56a:   hlt    
  0x00007fed0d1dc56b:   test   %rdi,%rdi
  0x00007fed0d1dc56e:   jne    0x00007fed0d1dc588
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007fed0d1dc574:   movabs $0x7fed169eee38,%rdi         ;   {external_word}
  0x00007fed0d1dc57e:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1dc582:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1dc587:   hlt    
  0x00007fed0d1dc588:   mov    %rdi,%rcx
  0x00007fed0d1dc58b:   shr    $0x3,%rcx
  0x00007fed0d1dc58f:   mov    %ecx,0xc(%rax)
  0x00007fed0d1dc592:   mov    %rax,0x48(%rsp)              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc597:   movslq 0x30(%rsp),%rbp              ;*i2l {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@7 (line 2995)
                                                            ; - test::copyMem_base@73 (line 18)
  0x00007fed0d1dc59c:   lea    0x10(%rbp),%rcx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc5a0:   vpxor  %ymm3,%ymm3,%ymm3
  0x00007fed0d1dc5a4:   vpsubb %ymm1,%ymm3,%ymm3            ;*invokestatic fromBitsCoerced {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
  0x00007fed0d1dc5a8:   mov    0x30(%rsp),%r10d
  0x00007fed0d1dc5ad:   test   %r10d,%r10d
  0x00007fed0d1dc5b0:   jl     0x00007fed0d1dc6da
 ;; B21: #	out( B27 B22 ) <- in( B20 )  Freq: 0.49974
  0x00007fed0d1dc5b6:   movslq %r8d,%r10
  0x00007fed0d1dc5b9:   add    $0xffffffffffffffe0,%r10
  0x00007fed0d1dc5bd:   nop
  0x00007fed0d1dc5be:   nop
  0x00007fed0d1dc5bf:   nop
  0x00007fed0d1dc5c0:   cmp    %r10,%rbp                    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc5c3:   jg     0x00007fed0d1dc6da
 ;; B22: #	out( B50 B23 ) <- in( B21 )  Freq: 0.24987
  0x00007fed0d1dc5c9:   mov    0x108(%r15),%r8
  0x00007fed0d1dc5d0:   mov    %r8,%r10
  0x00007fed0d1dc5d3:   add    $0x30,%r10
  0x00007fed0d1dc5d7:   nop
  0x00007fed0d1dc5d8:   nop
  0x00007fed0d1dc5d9:   nop
  0x00007fed0d1dc5da:   nop
  0x00007fed0d1dc5db:   nop
  0x00007fed0d1dc5dc:   nop
  0x00007fed0d1dc5dd:   nop
  0x00007fed0d1dc5de:   nop
  0x00007fed0d1dc5df:   nop
  0x00007fed0d1dc5e0:   cmp    0x118(%r15),%r10
  0x00007fed0d1dc5e7:   jae    0x00007fed0d1dca57           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B23: #	out( B24 ) <- in( B22 )  Freq: 0.249845
  0x00007fed0d1dc5ed:   mov    %r10,0x108(%r15)
  0x00007fed0d1dc5f4:   prefetchw 0xc0(%r10)
  0x00007fed0d1dc5fc:   movq   $0x1,(%r8)
  0x00007fed0d1dc603:   prefetchw 0x100(%r10)
  0x00007fed0d1dc60b:   movl   $0x40a00,0x8(%r8)            ;   {metadata({type array byte})}
  0x00007fed0d1dc613:   prefetchw 0x140(%r10)
  0x00007fed0d1dc61b:   movl   $0x20,0xc(%r8)
  0x00007fed0d1dc623:   prefetchw 0x180(%r10)
  0x00007fed0d1dc62b:   mov    %r12,0x10(%r8)
  0x00007fed0d1dc62f:   mov    %r12,0x18(%r8)
  0x00007fed0d1dc633:   mov    %r12,0x20(%r8)
  0x00007fed0d1dc637:   mov    %r12,0x28(%r8)               ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B24: #	out( B52 B25 ) <- in( B51 B23 )  Freq: 0.24987
  0x00007fed0d1dc63b:   vmovdqu 0x10(%r9,%rbp,1),%ymm0
  0x00007fed0d1dc642:   mov    0x108(%r15),%rax
  0x00007fed0d1dc649:   mov    %rax,%r10
  0x00007fed0d1dc64c:   add    $0x10,%r10
  0x00007fed0d1dc650:   vpxor  %xmm2,%xmm2,%xmm2
  0x00007fed0d1dc654:   vpblendvb %ymm3,%ymm0,%ymm2,%ymm0
  0x00007fed0d1dc65a:   vmovdqu %ymm0,0x10(%r8)
  0x00007fed0d1dc660:   cmp    0x118(%r15),%r10
  0x00007fed0d1dc667:   jae    0x00007fed0d1dcb07           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B25: #	out( B26 ) <- in( B24 )  Freq: 0.249845
  0x00007fed0d1dc66d:   mov    %r10,0x108(%r15)
  0x00007fed0d1dc674:   prefetchw 0xc0(%r10)
  0x00007fed0d1dc67c:   movq   $0x1,(%rax)
  0x00007fed0d1dc683:   movl   $0xde0b8,0x8(%rax)           ;   {metadata('jdk/incubator/vector/Byte256Vector')}
 ;; B26: #	out( B32 ) <- in( B53 B25 )  Freq: 0.24987
  0x00007fed0d1dc68a:   cmp    0x9c3d91f(%rip),%r12        # 0x00007fed16e19fb0
                                                            ;   {external_word}
  0x00007fed0d1dc691:   je     0x00007fed0d1dc6ab
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007fed0d1dc697:   movabs $0x7fed169eedf8,%rdi         ;   {external_word}
  0x00007fed0d1dc6a1:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1dc6a5:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1dc6aa:   hlt    
  0x00007fed0d1dc6ab:   test   %r8,%r8
  0x00007fed0d1dc6ae:   jne    0x00007fed0d1dc6c8
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007fed0d1dc6b4:   movabs $0x7fed169eee38,%rdi         ;   {external_word}
  0x00007fed0d1dc6be:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1dc6c2:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1dc6c7:   hlt    
  0x00007fed0d1dc6c8:   shr    $0x3,%r8
  0x00007fed0d1dc6cc:   mov    %r8d,0xc(%rax)
  0x00007fed0d1dc6d0:   mov    %rax,0x40(%rsp)
  0x00007fed0d1dc6d5:   jmpq   0x00007fed0d1dc7ee           ;*iconst_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@17 (line 2995)
                                                            ; - test::copyMem_base@73 (line 18)
 ;; B27: #	out( B72 B28 ) <- in( B21 B20 )  Freq: 0.74961
  0x00007fed0d1dc6da:   vmovdqu %ymm3,0x80(%rsp)
  0x00007fed0d1dc6e3:   mov    %rcx,0x58(%rsp)
  0x00007fed0d1dc6e8:   mov    %rbp,0x50(%rsp)
  0x00007fed0d1dc6ed:   vmovdqu %ymm1,0x60(%rsp)
  0x00007fed0d1dc6f3:   mov    %r11d,0x34(%rsp)
  0x00007fed0d1dc6f8:   mov    %r8d,%r11d
  0x00007fed0d1dc6fb:   mov    %r9,0x40(%rsp)
  0x00007fed0d1dc700:   mov    0x30(%rsp),%esi
  0x00007fed0d1dc704:   movabs $0x11f949928,%rdx            ;   {oop(a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928})}
  0x00007fed0d1dc70e:   mov    %rax,%rcx
  0x00007fed0d1dc711:   mov    $0x1,%r8d
  0x00007fed0d1dc717:   mov    %r11d,%r9d
  0x00007fed0d1dc71a:   mov    %rax,%rbp                    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc71d:   nop
  0x00007fed0d1dc71e:   nop
  0x00007fed0d1dc71f:   nop
  0x00007fed0d1dc720:   vzeroupper 
  0x00007fed0d1dc723:   callq  0x00007fed0d1dcdb7           ; ImmutableOopMap {rbp=Oop [56]=Oop [64]=Oop [72]=Oop }
                                                            ;*invokestatic checkMaskFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
                                                            ; - test::copyMem_base@73 (line 18)
                                                            ;   {static_call}
  0x00007fed0d1dc728:   nopl   0x2000798(%rax,%rax,1)       ;   {other}
 ;; B28: #	out( B73 B29 ) <- in( B27 )  Freq: 0.749595
  0x00007fed0d1dc730:   movabs $0x11f949978,%rsi            ;   {oop(a 'java/lang/Class'{0x000000011f949978} = 'jdk/incubator/vector/Byte256Vector')}
  0x00007fed0d1dc73a:   movabs $0x11f0001c0,%rcx            ;   {oop(a 'java/lang/Class'{0x000000011f0001c0} = byte)}
  0x00007fed0d1dc744:   movabs $0x11f949a08,%rdx            ;   {oop(a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask')}
  0x00007fed0d1dc74e:   mov    $0x20,%r8d
  0x00007fed0d1dc754:   mov    0x40(%rsp),%r9
  0x00007fed0d1dc759:   mov    0x58(%rsp),%rdi
  0x00007fed0d1dc75e:   mov    %rbp,(%rsp)
  0x00007fed0d1dc762:   xor    %r10d,%r10d
  0x00007fed0d1dc765:   mov    %r10d,0x8(%rsp)
  0x00007fed0d1dc76a:   mov    %r9,0x10(%rsp)
  0x00007fed0d1dc76f:   mov    0x50(%rsp),%r10
  0x00007fed0d1dc774:   mov    %r10,0x18(%rsp)
  0x00007fed0d1dc779:   movabs $0x11f949928,%r10            ;   {oop(a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928})}
  0x00007fed0d1dc783:   mov    %r10,0x20(%rsp)
  0x00007fed0d1dc788:   movabs $0x11facd530,%r10            ;   {oop(a 'jdk/incubator/vector/ByteVector$$Lambda+0x00000008000ecd68'{0x000000011facd530})}
  0x00007fed0d1dc792:   mov    %r10,0x28(%rsp)              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc797:   nop
  0x00007fed0d1dc798:   vzeroupper 
  0x00007fed0d1dc79b:   callq  0x00007fed0d1dcda8           ; ImmutableOopMap {rbp=Oop [56]=Oop [72]=Oop }
                                                            ;*invokestatic loadMasked {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
                                                            ; - test::copyMem_base@73 (line 18)
                                                            ;   {static_call}
  0x00007fed0d1dc7a0:   nopl   0x3000810(%rax,%rax,1)       ;   {other}
 ;; B29: #	out( B61 B30 ) <- in( B28 )  Freq: 0.74958
  0x00007fed0d1dc7a8:   mov    0x8(%rax),%r11d              ; implicit exception: dispatches to 0x00007fed0d1dccf8
 ;; B30: #	out( B58 B31 ) <- in( B29 )  Freq: 0.74958
  0x00007fed0d1dc7ac:   movabs $0x8000d3660,%r10            ;   {metadata('jdk/incubator/vector/ByteVector')}
  0x00007fed0d1dc7b6:   movabs $0x800000000,%r8
  0x00007fed0d1dc7c0:   add    %r11,%r8
  0x00007fed0d1dc7c3:   mov    0x60(%r8),%r11
  0x00007fed0d1dc7c7:   cmp    %r10,%r11
  0x00007fed0d1dc7ca:   jne    0x00007fed0d1dcc74           ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
                                                            ; - test::copyMem_base@73 (line 18)
 ;; B31: #	out( B32 ) <- in( B30 )  Freq: 0.749579
  0x00007fed0d1dc7d0:   mov    %rax,0x40(%rsp)
  0x00007fed0d1dc7d5:   mov    0x34(%rsp),%r11d
  0x00007fed0d1dc7da:   vmovdqu 0x60(%rsp),%ymm1
  0x00007fed0d1dc7e0:   mov    0x50(%rsp),%rbp
  0x00007fed0d1dc7e5:   vmovdqu 0x80(%rsp),%ymm3
 ;; B32: #	out( B37 B33 ) <- in( B26 B31 )  Freq: 0.999449
  0x00007fed0d1dc7ee:   vpcmpeqd %ymm0,%ymm0,%ymm0
  0x00007fed0d1dc7f2:   vptest %ymm0,%ymm3
  0x00007fed0d1dc7f7:   jae    0x00007fed0d1dc85e
 ;; B33: #	out( B57 B34 ) <- in( B32 )  Freq: 0.899504
  0x00007fed0d1dc7fd:   mov    0x40(%rsp),%r10
  0x00007fed0d1dc802:   mov    0x8(%r10),%r8d
  0x00007fed0d1dc806:   cmp    $0xde0b8,%r8d                ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {metadata('jdk/incubator/vector/Byte256Vector')}
  0x00007fed0d1dc80d:   jne    0x00007fed0d1dcc44
 ;; B34: #	out( B56 B35 ) <- in( B33 )  Freq: 0.899503
  0x00007fed0d1dc813:   mov    0x40(%rsp),%rbp              ;*invokevirtual length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@2 (line 3364)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc818:   mov    0x30(%rsp),%r8d
  0x00007fed0d1dc81d:   nop
  0x00007fed0d1dc81e:   nop
  0x00007fed0d1dc81f:   nop
  0x00007fed0d1dc820:   cmp    %r11d,%r8d
  0x00007fed0d1dc823:   jae    0x00007fed0d1dcc14
 ;; B35: #	out( B36 ) <- in( B34 )  Freq: 0.899502
  0x00007fed0d1dc829:   mov    0xc(%rbp),%r10d
  0x00007fed0d1dc82d:   vmovdqu 0x10(%r12,%r10,8),%ymm0
  0x00007fed0d1dc834:   mov    0x30(%rsp),%r11d
  0x00007fed0d1dc839:   mov    0x38(%rsp),%r10
  0x00007fed0d1dc83e:   vmovdqu %ymm0,0x10(%r10,%r11,1)     ;*return {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@56 (line 3413)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B36: #	out( N1015 ) <- in( B43 B35 )  Freq: 0.999442
  0x00007fed0d1dc845:   vzeroupper 
  0x00007fed0d1dc848:   add    $0xe0,%rsp
  0x00007fed0d1dc84f:   pop    %rbp
  0x00007fed0d1dc850:   cmp    0x3b8(%r15),%rsp             ;   {poll_return}
  0x00007fed0d1dc857:   ja     0x00007fed0d1dcd85
  0x00007fed0d1dc85d:   retq   
 ;; B37: #	out( B68 B38 ) <- in( B32 )  Freq: 0.0999449
  0x00007fed0d1dc85e:   mov    0x40(%rsp),%rsi
  0x00007fed0d1dc863:   vmovdqu %ymm1,0x60(%rsp)            ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc869:   nop
  0x00007fed0d1dc86a:   vzeroupper 
  0x00007fed0d1dc86d:   movabs $0x8000de0b8,%rax
  0x00007fed0d1dc877:   callq  0x00007fed0d1c2c20           ; ImmutableOopMap {[56]=Oop [64]=Oop [72]=Oop }
                                                            ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {virtual_call}
  0x00007fed0d1dc87c:   nopl   0x40008ec(%rax,%rax,1)       ;   {other}
 ;; B38: #	out( B62 B39 ) <- in( B37 )  Freq: 0.0999429
  0x00007fed0d1dc884:   mov    0xc(%rax),%r10d              ; implicit exception: dispatches to 0x00007fed0d1dcd28
 ;; B39: #	out( B41 B40 ) <- in( B38 )  Freq: 0.0999428
  0x00007fed0d1dc888:   mov    0x30(%rsp),%r11d
  0x00007fed0d1dc88d:   test   %r11d,%r11d
  0x00007fed0d1dc890:   jl     0x00007fed0d1dc8a8
 ;; B40: #	out( B42 B41 ) <- in( B39 )  Freq: 0.0499714
  0x00007fed0d1dc892:   movslq %r10d,%r10
  0x00007fed0d1dc895:   mov    0xc0(%rsp),%r11d
  0x00007fed0d1dc89d:   movslq %r11d,%r11
  0x00007fed0d1dc8a0:   sub    %r10,%r11
  0x00007fed0d1dc8a3:   cmp    %r11,%rbp                    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc8a6:   jle    0x00007fed0d1dc8d4           ;*iconst_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@33 (line 3408)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B41: #	out( B70 B42 ) <- in( B40 B39 )  Freq: 0.0749571
  0x00007fed0d1dc8a8:   mov    0x30(%rsp),%esi
  0x00007fed0d1dc8ac:   mov    %rax,%rdx
  0x00007fed0d1dc8af:   mov    0x48(%rsp),%rcx
  0x00007fed0d1dc8b4:   mov    $0x1,%r8d
  0x00007fed0d1dc8ba:   mov    0xc0(%rsp),%r9d              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc8c2:   nop
  0x00007fed0d1dc8c3:   nop
  0x00007fed0d1dc8c4:   vzeroupper 
  0x00007fed0d1dc8c7:   callq  0x00007fed0d1dcdb7           ; ImmutableOopMap {[56]=Oop [64]=Oop [72]=Oop }
                                                            ;*invokestatic checkMaskFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {static_call}
  0x00007fed0d1dc8cc:   nopl   0x500093c(%rax,%rax,1)       ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@49 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
 ;; B42: #	out( B69 B43 ) <- in( B41 B40 )  Freq: 0.0999413
  0x00007fed0d1dc8d4:   mov    0x40(%rsp),%rsi
  0x00007fed0d1dc8d9:   mov    0x38(%rsp),%rdx
  0x00007fed0d1dc8de:   mov    0x30(%rsp),%ecx
  0x00007fed0d1dc8e2:   mov    0x48(%rsp),%r8               ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc8e7:   nop
  0x00007fed0d1dc8e8:   nop
  0x00007fed0d1dc8e9:   nop
  0x00007fed0d1dc8ea:   vzeroupper 
  0x00007fed0d1dc8ed:   movabs $0xffffffffffffffff,%rax
  0x00007fed0d1dc8f7:   callq  0x00007fed0d113ce0           ; ImmutableOopMap {}
                                                            ;*invokevirtual intoArray0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {virtual_call}
  0x00007fed0d1dc8fc:   nopl   0x600096c(%rax,%rax,1)       ;   {other}
 ;; B43: #	out( B36 ) <- in( B42 )  Freq: 0.0999393
  0x00007fed0d1dc904:   jmpq   0x00007fed0d1dc845
 ;; B44: #	out( B4 ) <- in( B1 )  Freq: 0.000999987
  0x00007fed0d1dc909:   xor    %r10d,%r10d
  0x00007fed0d1dc90c:   mov    %r10,0x38(%rsp)
  0x00007fed0d1dc911:   jmpq   0x00007fed0d1dc317           ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
                                                            ; - test::copyMem_base@21 (line 12)
 ;; B45: #	out( N1015 ) <- in( B12 )  Freq: 0.000256445
  0x00007fed0d1dc916:   mov    $0xffffffe4,%esi
  0x00007fed0d1dc91b:   mov    %r9,0x48(%rsp)
  0x00007fed0d1dc920:   mov    %r10d,0x34(%rsp)             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dc925:   nop
  0x00007fed0d1dc926:   nop
  0x00007fed0d1dc927:   nop
  0x00007fed0d1dc928:   vzeroupper 
  0x00007fed0d1dc92b:   callq  0x00007fed0d11f020           ; ImmutableOopMap {[56]=Oop [72]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
                                                            ; - test::copyMem_base@21 (line 12)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1dc930:   nopl   0x70009a0(%rax,%rax,1)       ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
  0x00007fed0d1dc938:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1dc942:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1dc946:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1dc94b:   hlt    
 ;; B46: #	out( B66 B47 ) <- in( B16 )  Freq: 9.99646e-05
  0x00007fed0d1dc94c:   mov    %rax,-0x8(%rsp)
  0x00007fed0d1dc951:   mov    0x30(%rsp),%eax
  0x00007fed0d1dc955:   mov    %eax,0x54(%rsp)
  0x00007fed0d1dc959:   mov    -0x8(%rsp),%rax
  0x00007fed0d1dc95e:   mov    %r11d,0x50(%rsp)
  0x00007fed0d1dc963:   mov    %r8d,0x48(%rsp)
  0x00007fed0d1dc968:   mov    %r9,0x40(%rsp)
  0x00007fed0d1dc96d:   rex.W pushq 0x38(%rsp)
  0x00007fed0d1dc972:   rex.W popq 0x30(%rsp)               ;*invokedynamic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@34 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
  0x00007fed0d1dc977:   movabs $0x800040200,%rsi            ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {metadata({type array bool})}
  0x00007fed0d1dc981:   mov    $0x20,%edx
  0x00007fed0d1dc986:   nop
  0x00007fed0d1dc987:   nop
  0x00007fed0d1dc988:   vzeroupper 
  0x00007fed0d1dc98b:   callq  0x00007fed0d02b320           ; ImmutableOopMap {[48]=Oop [64]=Oop }
                                                            ;*invokestatic fromBitsCoerced {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
                                                            ;   {runtime_call _new_array_Java}
  0x00007fed0d1dc990:   nopl   0x8000a00(%rax,%rax,1)       ;   {other}
 ;; B47: #	out( B18 ) <- in( B46 )  Freq: 9.99626e-05
  0x00007fed0d1dc998:   rex.W pushq 0x30(%rsp)
  0x00007fed0d1dc99d:   rex.W popq 0x38(%rsp)
  0x00007fed0d1dc9a2:   mov    0x40(%rsp),%r9
  0x00007fed0d1dc9a7:   mov    0x48(%rsp),%r8d
  0x00007fed0d1dc9ac:   mov    0x50(%rsp),%r11d
  0x00007fed0d1dc9b1:   mov    %rax,-0x8(%rsp)
  0x00007fed0d1dc9b6:   mov    0x54(%rsp),%eax
  0x00007fed0d1dc9ba:   mov    %eax,0x30(%rsp)
  0x00007fed0d1dc9be:   mov    -0x8(%rsp),%rax
  0x00007fed0d1dc9c3:   mov    %rax,%rdi
  0x00007fed0d1dc9c6:   jmpq   0x00007fed0d1dc488
 ;; B48: #	out( B65 B49 ) <- in( B18 )  Freq: 9.99646e-05
  0x00007fed0d1dc9cb:   vmovdqu %ymm1,0x60(%rsp)
  0x00007fed0d1dc9d1:   mov    %rdi,0x58(%rsp)
  0x00007fed0d1dc9d6:   mov    %rax,-0x8(%rsp)
  0x00007fed0d1dc9db:   mov    0x30(%rsp),%eax
  0x00007fed0d1dc9df:   mov    %eax,0x54(%rsp)
  0x00007fed0d1dc9e3:   mov    -0x8(%rsp),%rax
  0x00007fed0d1dc9e8:   mov    %r11d,0x50(%rsp)
  0x00007fed0d1dc9ed:   mov    %r8d,0x48(%rsp)
  0x00007fed0d1dc9f2:   mov    %r9,0x40(%rsp)
  0x00007fed0d1dc9f7:   rex.W pushq 0x38(%rsp)
  0x00007fed0d1dc9fc:   rex.W popq 0x30(%rsp)
  0x00007fed0d1dca01:   movabs $0x8000de750,%rsi            ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {metadata('jdk/incubator/vector/Byte256Vector$Byte256Mask')}
  0x00007fed0d1dca0b:   nop
  0x00007fed0d1dca0c:   vzeroupper 
  0x00007fed0d1dca0f:   callq  0x00007fed0d02b620           ; ImmutableOopMap {[48]=Oop [64]=Oop [88]=Oop }
                                                            ;*invokestatic fromBitsCoerced {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
                                                            ;   {runtime_call _new_instance_Java}
  0x00007fed0d1dca14:   nopl   0x9000a84(%rax,%rax,1)       ;   {other}
 ;; B49: #	out( B20 ) <- in( B48 )  Freq: 9.99626e-05
  0x00007fed0d1dca1c:   rex.W pushq 0x30(%rsp)
  0x00007fed0d1dca21:   rex.W popq 0x38(%rsp)
  0x00007fed0d1dca26:   mov    0x40(%rsp),%r9
  0x00007fed0d1dca2b:   mov    0x48(%rsp),%r8d
  0x00007fed0d1dca30:   mov    0x50(%rsp),%r11d
  0x00007fed0d1dca35:   mov    %rax,-0x8(%rsp)
  0x00007fed0d1dca3a:   mov    0x54(%rsp),%eax
  0x00007fed0d1dca3e:   mov    %eax,0x30(%rsp)
  0x00007fed0d1dca42:   mov    -0x8(%rsp),%rax
  0x00007fed0d1dca47:   mov    0x58(%rsp),%rdi
  0x00007fed0d1dca4c:   vmovdqu 0x60(%rsp),%ymm1
  0x00007fed0d1dca52:   jmpq   0x00007fed0d1dc54a
 ;; B50: #	out( B63 B51 ) <- in( B22 )  Freq: 2.49912e-05
  0x00007fed0d1dca57:   vmovdqu %ymm3,0xa0(%rsp)
  0x00007fed0d1dca60:   mov    %rcx,0x80(%rsp)
  0x00007fed0d1dca68:   mov    %rbp,0x58(%rsp)
  0x00007fed0d1dca6d:   mov    %rax,0x50(%rsp)
  0x00007fed0d1dca72:   vmovdqu %ymm1,0x60(%rsp)
  0x00007fed0d1dca78:   mov    %rax,-0x8(%rsp)
  0x00007fed0d1dca7d:   mov    0x30(%rsp),%eax
  0x00007fed0d1dca81:   mov    %eax,0x48(%rsp)
  0x00007fed0d1dca85:   mov    -0x8(%rsp),%rax
  0x00007fed0d1dca8a:   mov    %r11d,0x44(%rsp)
  0x00007fed0d1dca8f:   mov    %r9,0x30(%rsp)
  0x00007fed0d1dca94:   mov    0x38(%rsp),%rbp
  0x00007fed0d1dca99:   movabs $0x800040a00,%rsi            ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {metadata({type array byte})}
  0x00007fed0d1dcaa3:   mov    $0x20,%edx
  0x00007fed0d1dcaa8:   vzeroupper 
  0x00007fed0d1dcaab:   callq  0x00007fed0d02b320           ; ImmutableOopMap {rbp=Oop [48]=Oop [80]=Oop }
                                                            ;*invokestatic loadMasked {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
                                                            ; - test::copyMem_base@73 (line 18)
                                                            ;   {runtime_call _new_array_Java}
  0x00007fed0d1dcab0:   nopl   0xa000b20(%rax,%rax,1)       ;   {other}
 ;; B51: #	out( B24 ) <- in( B50 )  Freq: 2.49907e-05
  0x00007fed0d1dcab8:   mov    %rbp,0x38(%rsp)
  0x00007fed0d1dcabd:   mov    0x30(%rsp),%r9
  0x00007fed0d1dcac2:   mov    0x44(%rsp),%r11d
  0x00007fed0d1dcac7:   mov    %rax,-0x8(%rsp)
  0x00007fed0d1dcacc:   mov    0x48(%rsp),%eax
  0x00007fed0d1dcad0:   mov    %eax,0x30(%rsp)
  0x00007fed0d1dcad4:   mov    -0x8(%rsp),%rax
  0x00007fed0d1dcad9:   vmovdqu 0x60(%rsp),%ymm1
  0x00007fed0d1dcadf:   rex.W pushq 0x50(%rsp)
  0x00007fed0d1dcae4:   rex.W popq 0x48(%rsp)
  0x00007fed0d1dcae9:   mov    0x58(%rsp),%rbp
  0x00007fed0d1dcaee:   mov    0x80(%rsp),%rcx
  0x00007fed0d1dcaf6:   vmovdqu 0xa0(%rsp),%ymm3
  0x00007fed0d1dcaff:   mov    %rax,%r8
  0x00007fed0d1dcb02:   jmpq   0x00007fed0d1dc63b
 ;; B52: #	out( B64 B53 ) <- in( B24 )  Freq: 2.49912e-05
  0x00007fed0d1dcb07:   mov    %r8,0x58(%rsp)
  0x00007fed0d1dcb0c:   vmovdqu %ymm3,0x80(%rsp)
  0x00007fed0d1dcb15:   mov    %rbp,0x50(%rsp)
  0x00007fed0d1dcb1a:   vmovdqu %ymm1,0x60(%rsp)
  0x00007fed0d1dcb20:   mov    %rax,-0x8(%rsp)
  0x00007fed0d1dcb25:   mov    0x30(%rsp),%eax
  0x00007fed0d1dcb29:   mov    %eax,0x40(%rsp)
  0x00007fed0d1dcb2d:   mov    -0x8(%rsp),%rax
  0x00007fed0d1dcb32:   mov    %r11d,0x34(%rsp)
  0x00007fed0d1dcb37:   mov    0x38(%rsp),%rbp
  0x00007fed0d1dcb3c:   movabs $0x8000de0b8,%rsi            ;   {metadata('jdk/incubator/vector/Byte256Vector')}
  0x00007fed0d1dcb46:   mov    %rcx,0xa8(%rsp)
  0x00007fed0d1dcb4e:   mov    %r9,0xb0(%rsp)               ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dcb56:   nop
  0x00007fed0d1dcb57:   nop
  0x00007fed0d1dcb58:   vzeroupper 
  0x00007fed0d1dcb5b:   callq  0x00007fed0d02b620           ; ImmutableOopMap {rbp=Oop [72]=Oop [88]=Oop [176]=Oop }
                                                            ;*invokestatic loadMasked {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
                                                            ; - test::copyMem_base@73 (line 18)
                                                            ;   {runtime_call _new_instance_Java}
  0x00007fed0d1dcb60:   nopl   0xb000bd0(%rax,%rax,1)       ;   {other}
 ;; B53: #	out( B26 ) <- in( B52 )  Freq: 2.49907e-05
  0x00007fed0d1dcb68:   mov    %rbp,0x38(%rsp)
  0x00007fed0d1dcb6d:   mov    0x34(%rsp),%r11d
  0x00007fed0d1dcb72:   mov    %rax,-0x8(%rsp)
  0x00007fed0d1dcb77:   mov    0x40(%rsp),%eax
  0x00007fed0d1dcb7b:   mov    %eax,0x30(%rsp)
  0x00007fed0d1dcb7f:   mov    -0x8(%rsp),%rax
  0x00007fed0d1dcb84:   vmovdqu 0x60(%rsp),%ymm1
  0x00007fed0d1dcb8a:   mov    0x50(%rsp),%rbp
  0x00007fed0d1dcb8f:   vmovdqu 0x80(%rsp),%ymm3
  0x00007fed0d1dcb98:   mov    0x58(%rsp),%r8
  0x00007fed0d1dcb9d:   nop
  0x00007fed0d1dcb9e:   nop
  0x00007fed0d1dcb9f:   nop
  0x00007fed0d1dcba0:   jmpq   0x00007fed0d1dc68a           ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
 ;; B54: #	out( N1015 ) <- in( B2 B5 )  Freq: 1.999e-06
  0x00007fed0d1dcba5:   mov    $0xffffff8d,%esi
  0x00007fed0d1dcbaa:   mov    %r13d,0x30(%rsp)
  0x00007fed0d1dcbaf:   mov    %rbx,0x38(%rsp)
  0x00007fed0d1dcbb4:   vzeroupper 
  0x00007fed0d1dcbb7:   callq  0x00007fed0d11f020           ; ImmutableOopMap {rbp=Oop [56]=Oop }
                                                            ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1dcbbc:   nopl   0xc000c2c(%rax,%rax,1)       ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
  0x00007fed0d1dcbc4:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1dcbce:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1dcbd2:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1dcbd7:   hlt                                 ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
 ;; B55: #	out( N1015 ) <- in( B8 B6 B7 )  Freq: 3.01327e-06
  0x00007fed0d1dcbd8:   mov    $0xffffffbe,%esi
  0x00007fed0d1dcbdd:   mov    %r13d,%ebp
  0x00007fed0d1dcbe0:   rex.W pushq 0x38(%rsp)
  0x00007fed0d1dcbe5:   rex.W popq 0x30(%rsp)
  0x00007fed0d1dcbea:   mov    %r9,0x38(%rsp)               ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dcbef:   nop
  0x00007fed0d1dcbf0:   vzeroupper 
  0x00007fed0d1dcbf3:   callq  0x00007fed0d11f020           ; ImmutableOopMap {[48]=Oop [56]=Oop }
                                                            ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1dcbf8:   nopl   0xd000c68(%rax,%rax,1)       ;   {other}
  0x00007fed0d1dcc00:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1dcc0a:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1dcc0e:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1dcc13:   hlt    
 ;; B56: #	out( N1015 ) <- in( B34 )  Freq: 9.11448e-07
  0x00007fed0d1dcc14:   mov    $0xffffffe4,%esi
  0x00007fed0d1dcc19:   mov    %r11d,0x34(%rsp)             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dcc1e:   nop
  0x00007fed0d1dcc1f:   nop
  0x00007fed0d1dcc20:   vzeroupper 
  0x00007fed0d1dcc23:   callq  0x00007fed0d11f020           ; ImmutableOopMap {rbp=Oop [56]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1dcc28:   nopl   0xe000c98(%rax,%rax,1)       ;   {other}
  0x00007fed0d1dcc30:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1dcc3a:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1dcc3e:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1dcc43:   hlt    
 ;; B57: #	out( N1015 ) <- in( B33 )  Freq: 8.99504e-07
  0x00007fed0d1dcc44:   mov    $0xffffffde,%esi
  0x00007fed0d1dcc49:   mov    0x30(%rsp),%ebp              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dcc4d:   nop
  0x00007fed0d1dcc4e:   nop
  0x00007fed0d1dcc4f:   nop
  0x00007fed0d1dcc50:   vzeroupper 
  0x00007fed0d1dcc53:   callq  0x00007fed0d11f020           ; ImmutableOopMap {[56]=Oop [64]=Oop }
                                                            ;*invokevirtual length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@2 (line 3364)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1dcc58:   nopl   0xf000cc8(%rax,%rax,1)       ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
  0x00007fed0d1dcc60:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1dcc6a:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1dcc6e:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1dcc73:   hlt    
 ;; B58: #	out( N1015 ) <- in( B30 )  Freq: 7.4958e-07
  0x00007fed0d1dcc74:   mov    $0xffffffde,%esi
  0x00007fed0d1dcc79:   mov    %rax,%rbp
  0x00007fed0d1dcc7c:   vzeroupper 
  0x00007fed0d1dcc7f:   callq  0x00007fed0d11f020           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
                                                            ; - test::copyMem_base@73 (line 18)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1dcc84:   nopl   0x10000cf4(%rax,%rax,1)      ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
  0x00007fed0d1dcc8c:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1dcc96:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1dcc9a:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1dcc9f:   hlt                                 ;*ifle {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@49 (line 16)
 ;; B59: #	out( N1015 ) <- in( B15 )  Freq: 4.99741e-07
  0x00007fed0d1dcca0:   mov    $0xffffff45,%esi             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dcca5:   nop
  0x00007fed0d1dcca6:   nop
  0x00007fed0d1dcca7:   nop
  0x00007fed0d1dcca8:   vzeroupper 
  0x00007fed0d1dccab:   callq  0x00007fed0d11f020           ; ImmutableOopMap {}
                                                            ;*ifle {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::copyMem_base@49 (line 16)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1dccb0:   nopl   0x11000d20(%rax,%rax,1)      ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
  0x00007fed0d1dccb8:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1dccc2:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1dccc6:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1dcccb:   hlt                                 ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
 ;; B60: #	out( N1015 ) <- in( B4 )  Freq: 1.01328e-06
  0x00007fed0d1dcccc:   mov    $0xffffff76,%esi
  0x00007fed0d1dccd1:   mov    %r13d,%ebp
  0x00007fed0d1dccd4:   vzeroupper 
  0x00007fed0d1dccd7:   callq  0x00007fed0d11f020           ; ImmutableOopMap {[56]=Oop }
                                                            ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@2 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1dccdc:   nopl   0x12000d4c(%rax,%rax,1)      ;   {other}
  0x00007fed0d1dcce4:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1dccee:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1dccf2:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1dccf7:   hlt    
 ;; B61: #	out( N1015 ) <- in( B29 )  Freq: 7.59534e-07
  0x00007fed0d1dccf8:   mov    $0xfffffff4,%esi
  0x00007fed0d1dccfd:   mov    0x30(%rsp),%ebp              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dcd01:   nop
  0x00007fed0d1dcd02:   nop
  0x00007fed0d1dcd03:   nop
  0x00007fed0d1dcd04:   vzeroupper 
  0x00007fed0d1dcd07:   callq  0x00007fed0d11f020           ; ImmutableOopMap {[56]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
                                                            ; - test::copyMem_base@73 (line 18)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1dcd0c:   nopl   0x13000d7c(%rax,%rax,1)      ;   {other}
  0x00007fed0d1dcd14:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1dcd1e:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1dcd22:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1dcd27:   hlt    
 ;; B62: #	out( N1015 ) <- in( B38 )  Freq: 1.0127e-07
  0x00007fed0d1dcd28:   mov    $0xfffffff6,%esi             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1dcd2d:   nop
  0x00007fed0d1dcd2e:   nop
  0x00007fed0d1dcd2f:   nop
  0x00007fed0d1dcd30:   vzeroupper 
  0x00007fed0d1dcd33:   callq  0x00007fed0d11f020           ; ImmutableOopMap {}
                                                            ;*invokevirtual length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@26 (line 3408)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1dcd38:   nopl   0x14000da8(%rax,%rax,1)      ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
  0x00007fed0d1dcd40:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1dcd4a:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1dcd4e:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1dcd53:   hlt    
 ;; B63: #	out( B74 ) <- in( B50 )  Freq: 2.49912e-10
  0x00007fed0d1dcd54:   jmpq   0x00007fed0d1dcd72
 ;; B64: #	out( B74 ) <- in( B52 )  Freq: 2.49912e-10
  0x00007fed0d1dcd59:   jmpq   0x00007fed0d1dcd72
 ;; B65: #	out( B67 ) <- in( B48 )  Freq: 9.99646e-10
  0x00007fed0d1dcd5e:   nop
  0x00007fed0d1dcd5f:   nop
  0x00007fed0d1dcd60:   jmp    0x00007fed0d1dcd62
 ;; B66: #	out( B67 ) <- in( B46 )  Freq: 9.99646e-10
 ;; B67: #	out( B75 ) <- in( B66 B65 )  Freq: 1.99929e-09
  0x00007fed0d1dcd62:   mov    %rax,%rsi
  0x00007fed0d1dcd65:   jmp    0x00007fed0d1dcd75           ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B68: #	out( B71 ) <- in( B37 )  Freq: 9.99449e-07
  0x00007fed0d1dcd67:   jmp    0x00007fed0d1dcd6b           ;*invokevirtual intoArray0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B69: #	out( B71 ) <- in( B42 )  Freq: 9.99413e-07
  0x00007fed0d1dcd69:   jmp    0x00007fed0d1dcd6b           ;*invokestatic test {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Byte256Vector$Byte256Mask::allTrue@23 (line 803)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@1 (line 3404)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B70: #	out( B71 ) <- in( B41 )  Freq: 7.49571e-07
 ;; B71: #	out( B75 ) <- in( B68 B69 B70 )  Freq: 2.74843e-06
  0x00007fed0d1dcd6b:   mov    %rax,%rsi
  0x00007fed0d1dcd6e:   jmp    0x00007fed0d1dcd75
 ;; B72: #	out( B74 ) <- in( B27 )  Freq: 7.4961e-06
  0x00007fed0d1dcd70:   jmp    0x00007fed0d1dcd72           ;*invokestatic checkMaskFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
                                                            ; - test::copyMem_base@73 (line 18)
 ;; B73: #	out( B74 ) <- in( B28 )  Freq: 7.49595e-06
 ;; B74: #	out( B75 ) <- in( B63 B64 B72 B73 )  Freq: 1.49926e-05
  0x00007fed0d1dcd72:   mov    %rax,%rsi                    ;*invokevirtual intoArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@26 (line 13)
 ;; B75: #	out( N1015 ) <- in( B74 B71 B67 )  Freq: 1.7743e-05
  0x00007fed0d1dcd75:   vzeroupper 
  0x00007fed0d1dcd78:   add    $0xe0,%rsp
  0x00007fed0d1dcd7f:   pop    %rbp
  0x00007fed0d1dcd80:   jmpq   0x00007fed0d12b2a0           ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call _rethrow_Java}
  0x00007fed0d1dcd85:   movabs $0x7fed0d1dc850,%r10         ;   {internal_word}
  0x00007fed0d1dcd8f:   mov    %r10,0x3d0(%r15)
  0x00007fed0d1dcd96:   jmpq   0x00007fed0d11e1a0           ;   {runtime_call SafepointBlob}
  0x00007fed0d1dcd9b:   callq  Stub::nmethod_entry_barrier  ;   {runtime_call StubRoutines (final stubs)}
  0x00007fed0d1dcda0:   jmpq   0x00007fed0d1dc2ce
  0x00007fed0d1dcda5:   hlt    
  0x00007fed0d1dcda6:   hlt    
  0x00007fed0d1dcda7:   hlt    
[Stub Code]
  0x00007fed0d1dcda8:   movabs $0x7fecc8178da0,%rbx         ;   {no_reloc}
  0x00007fed0d1dcdb2:   jmpq   0x00007fed0d19803b           ;   {runtime_call I2C/C2I adapters}
  0x00007fed0d1dcdb7:   movabs $0x7fecc8787298,%rbx         ;   {static_stub}
  0x00007fed0d1dcdc1:   jmpq   0x00007fed0d195b7c           ;   {runtime_call I2C/C2I adapters}
[Exception Handler]
  0x00007fed0d1dcdc6:   jmpq   0x00007fed0d07e520           ;   {runtime_call ExceptionBlob}
[Deopt Handler Code]
  0x00007fed0d1dcdcb:   callq  0x00007fed0d1dcdd0
  0x00007fed0d1dcdd0:   subq   $0x5,(%rsp)
  0x00007fed0d1dcdd5:   jmpq   0x00007fed0d11d040           ;   {runtime_call DeoptimizationBlob}
  0x00007fed0d1dcdda:   hlt    
  0x00007fed0d1dcddb:   hlt    
  0x00007fed0d1dcddc:   hlt    
  0x00007fed0d1dcddd:   hlt    
  0x00007fed0d1dcdde:   hlt    
  0x00007fed0d1dcddf:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007fed0d1dcde0:   0x000000011f949978 a 'java/lang/Class'{0x000000011f949978} = 'jdk/incubator/vector/Byte256Vector'
  0x00007fed0d1dcde8:   0x000000011f949928 a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
  0x00007fed0d1dcdf0:   0x000000011f949a08 a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
  0x00007fed0d1dcdf8:   0x000000011f0001c0 a 'java/lang/Class'{0x000000011f0001c0} = byte
  0x00007fed0d1dce00:   0x000000011f977030 a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977030}
  0x00007fed0d1dce08:   0x000000011facd530 a 'jdk/incubator/vector/ByteVector$$Lambda+0x00000008000ecd68'{0x000000011facd530}
  0x00007fed0d1dce10:   0x000000011f81fe28 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f81fe28}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007fed0d1dce18:   0x00007fecc8603650 {method} {0x00007fecc8603650} 'copyMem_base' '([B[B)V' in 'test'
  0x00007fed0d1dce20:   0x00007fecc87852d8 {method} {0x00007fecc87852d8} 'intoArray' '([BILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/ByteVector'
  0x00007fed0d1dce28:   0x00007fecc8785190 {method} {0x00007fecc8785190} 'intoArray' '([BI)V' in 'jdk/incubator/vector/ByteVector'
  0x00007fed0d1dce30:   0x0000000800040a00 {type array byte}
  0x00007fed0d1dce38:   0x00007fecc8784520 {method} {0x00007fecc8784520} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
  0x00007fed0d1dce40:   0x00007fecc86d48b8 {method} {0x00007fecc86d48b8} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
  0x00007fed0d1dce48:   0x00007fecc81a0cb0 {method} {0x00007fecc81a0cb0} 'checkIndex' '(II)I' in 'java/util/Objects'
  0x00007fed0d1dce50:   0x00007fecc86a2de8 {method} {0x00007fecc86a2de8} 'fromArray0' '([BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/Byte256Vector'
  0x00007fed0d1dce58:   0x00007fecc8785eb8 {method} {0x00007fecc8785eb8} 'fromArray0Template' '([BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
  0x00007fed0d1dce60:   0x00007fecc87876d8 {method} {0x00007fecc87876d8} 'arrayAddress' '([BI)J' in 'jdk/incubator/vector/ByteVector'
  0x00007fed0d1dce68:   0x0000000800040200 {type array bool}
  0x00007fed0d1dce70:   0x00000008000de750 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
  0x00007fed0d1dce78:   0x00007fecc8784668 {method} {0x00007fecc8784668} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[BILjdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
  0x00007fed0d1dce80:   0x00007fecc8681ba8 {method} {0x00007fecc8681ba8} 'fromLong' '(Ljdk/incubator/vector/VectorSpecies;J)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
  0x00007fed0d1dce88:   0x00000008000de0b8 'jdk/incubator/vector/Byte256Vector'
  0x00007fed0d1dce90:   0x00007fecc86d4780 {method} {0x00007fecc86d4780} 'indexInRange' '(JJJ)Z' in 'jdk/incubator/vector/VectorIntrinsics'
  0x00007fed0d1dce98:   0x00007fecc86a2f00 {method} {0x00007fecc86a2f00} 'fromArray0' '([BILjdk/incubator/vector/VectorMask;I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/Byte256Vector'
  0x00007fed0d1dcea0:   0x00007fecc87860c8 {method} {0x00007fecc87860c8} 'fromArray0Template' '(Ljava/lang/Class;[BILjdk/incubator/vector/VectorMask;I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
  0x00007fed0d1dcea8:   0x00007fecc86aa590 {method} {0x00007fecc86aa590} 'allTrue' '()Z' in 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
  0x00007fed0d1dceb0:   0x00000008000d9bc0 'jdk/incubator/vector/AbstractSpecies'
  0x00007fed0d1dceb8:   0x00000008000d9fb0 'jdk/incubator/vector/ByteVector$ByteSpecies'
  0x00007fed0d1dcec0:   0x00007fecc87e3cd0 {method} {0x00007fecc87e3cd0} 'loopBound' '(I)I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007fed0d1dcec8:   0x00000008000d97a8 'jdk/incubator/vector/VectorSpecies'
  0x00007fed0d1dced0:   0x00007fecc87e1730 {method} {0x00007fecc87e1730} 'loopBound' '(I)I' in 'jdk/incubator/vector/VectorSpecies'
  0x00007fed0d1dced8:   0x00007fecc87e30b0 {method} {0x00007fecc87e30b0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007fed0d1dcee0:   0x00007fecc87e1538 {method} {0x00007fecc87e1538} 'length' '()I' in 'jdk/incubator/vector/VectorSpecies'
  0x00007fed0d1dcee8:   0x00000008000dbee0 'jdk/incubator/vector/VectorMask'
  0x00007fed0d1dcef0:   0x00007fecc8681fb0 {method} {0x00007fecc8681fb0} 'allTrue' '()Z' in 'jdk/incubator/vector/VectorMask'
  0x00007fed0d1dcef8:   0x00007fecc87fec58 {method} {0x00007fecc87fec58} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
  0x00007fed0d1dcf00:   0x00007fecc86829e0 {method} {0x00007fecc86829e0} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007fed0d1dc29f offset=ffffffff bits=0):
PcDesc(pc=0x00007fed0d1dc2da offset=3a bits=0):
   test::copyMem_base@2 (line 11)
PcDesc(pc=0x00007fed0d1dc2f8 offset=58 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc330 offset=90 bits=0):
   test::copyMem_base@2 (line 11)
PcDesc(pc=0x00007fed0d1dc334 offset=94 bits=0):
   test::copyMem_base@7 (line 11)
PcDesc(pc=0x00007fed0d1dc385 offset=e5 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc38b offset=eb bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fed0d1dc392 offset=f2 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc395 offset=f5 bits=1):
   test::copyMem_base@40 (line 11)  reexecute=true
   Locals
    - l0: stack[56],oop
    - l1: reg r9 [18],oop
    - l2: reg rdx [4],int
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1dc39b offset=fb bits=0):
   test::copyMem_base@2 (line 11)
PcDesc(pc=0x00007fed0d1dc3a2 offset=102 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc3b5 offset=115 bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
   test::copyMem_base@21 (line 12)
PcDesc(pc=0x00007fed0d1dc3b8 offset=118 bits=0):
   jdk.incubator.vector.ByteVector::arrayAddress@4 (line 3956)
   jdk.incubator.vector.ByteVector::fromArray0Template@20 (line 3732)
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
   test::copyMem_base@21 (line 12)
PcDesc(pc=0x00007fed0d1dc3bf offset=11f bits=0):
   jdk.incubator.vector.ByteVector::fromArray0Template@32 (line 3730)
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
   test::copyMem_base@21 (line 12)
PcDesc(pc=0x00007fed0d1dc3c5 offset=125 bits=0):
   jdk.incubator.vector.ByteVector::fromArray0Template@27 (line 3732)
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
   test::copyMem_base@21 (line 12)
PcDesc(pc=0x00007fed0d1dc3de offset=13e bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc3e8 offset=148 bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[48]
    - @1: stack[52]
    - @2: nullptr
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
   Locals
    - l0: obj[533]
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
   test::copyMem_base@26 (line 13)
   Locals
    - l0: stack[56],oop
    - l1: stack[64],oop
    - l2: stack[48]
    - l3: empty
    - l4: empty
   Objects
    - 533: jdk.incubator.vector.Byte256Vector stack[96],vector
PcDesc(pc=0x00007fed0d1dc40d offset=16d bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc413 offset=173 bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fed0d1dc42d offset=18d bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc488 offset=1e8 bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fed0d1dc496 offset=1f6 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc52d offset=28d bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fed0d1dc597 offset=2f7 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc59c offset=2fc bits=0):
   jdk.incubator.vector.ByteVector::fromArray@7 (line 2995)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fed0d1dc5a0 offset=300 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc5a8 offset=308 bits=0):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
   test::copyMem_base@61 (line 17)
PcDesc(pc=0x00007fed0d1dc5c3 offset=323 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc5ed offset=34d bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fed0d1dc63b offset=39b bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc66d offset=3cd bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fed0d1dc6da offset=43a bits=0):
   jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
   jdk.incubator.vector.ByteVector::fromArray@17 (line 2995)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fed0d1dc71d offset=47d bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc728 offset=488 bits=0):
   jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: stack[48]
    - l3: reg rbp [10],oop
    - l4: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[56],oop
    - l1: empty
    - l2: stack[48]
    - l3: empty
    - l4: reg rbp [10],oop
PcDesc(pc=0x00007fed0d1dc797 offset=4f7 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc7a0 offset=500 bits=4):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[56],oop
    - l1: empty
    - l2: stack[48]
    - l3: empty
    - l4: reg rbp [10],oop
PcDesc(pc=0x00007fed0d1dc7d0 offset=530 bits=0):
   jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fed0d1dc80d offset=56d bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc818 offset=578 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@2 (line 3364)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc845 offset=5a5 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@56 (line 3413)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc869 offset=5c9 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc87c offset=5dc bits=4):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   Locals
    - l0: stack[64],oop
    - l1: stack[56],oop
    - l2: stack[48]
    - l3: obj[426]
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 426: jdk.incubator.vector.Byte256Vector$Byte256Mask stack[96],vector
PcDesc(pc=0x00007fed0d1dc8a6 offset=606 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc8a8 offset=608 bits=0):
   jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
   jdk.incubator.vector.ByteVector::intoArray@33 (line 3408)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc8c2 offset=622 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc8cc offset=62c bits=0):
   jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
   Locals
    - l0: stack[64],oop
    - l1: stack[56],oop
    - l2: stack[48]
    - l3: stack[72],oop
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1dc8d4 offset=634 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@49 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc8e7 offset=647 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc8fc offset=65c bits=0):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1dc916 offset=676 bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
   test::copyMem_base@21 (line 12)
PcDesc(pc=0x00007fed0d1dc925 offset=685 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc930 offset=690 bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[48]
    - @1: stack[52]
    - @2: nullptr
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - l1: stack[72],oop
    - l2: empty
    - l3: empty
   test::copyMem_base@21 (line 12)
   Locals
    - l0: stack[56],oop
    - l1: stack[72],oop
    - l2: stack[48]
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1dc938 offset=698 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc977 offset=6d7 bits=0):
   jdk.incubator.vector.VectorMask::fromLong@34 (line 242)
   test::copyMem_base@61 (line 17)
PcDesc(pc=0x00007fed0d1dc981 offset=6e1 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dc990 offset=6f0 bits=5):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @1: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @2: 32
    - @3: 0
    - @4: reg rbp [10],long
    - @5: 1
    - @6: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - @7: a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977030}
   test::copyMem_base@61 (line 17)
   Locals
    - l0: stack[48],oop
    - l1: stack[64],oop
    - l2: stack[84]
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1dca0b offset=76b bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dca14 offset=774 bits=5):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @1: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @2: 32
    - @3: 0
    - @4: reg rbp [10],long
    - @5: 1
    - @6: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - @7: a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977030}
   test::copyMem_base@61 (line 17)
   Locals
    - l0: stack[48],oop
    - l1: stack[64],oop
    - l2: stack[84]
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1dcaa3 offset=803 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dcab0 offset=810 bits=5):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949978} = 'jdk/incubator/vector/Byte256Vector'
    - @1: a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @2: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @3: 32
    - @4: stack[48],oop
    - @5: 0
    - @6: stack[128],long
    - @7: obj[277]
    - @8: 1
    - @9: stack[48],oop
    - @10: 0
    - @11: stack[88],long
    - @12: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - @13: a 'jdk/incubator/vector/ByteVector$$Lambda+0x00000008000ecd68'{0x000000011facd530}
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@73 (line 18)
   Locals
    - l0: reg rbp [10],oop
    - l1: empty
    - l2: stack[72]
    - l3: empty
    - l4: obj[277]
   Objects
    - 277: jdk.incubator.vector.Byte256Vector$Byte256Mask stack[96],vector
PcDesc(pc=0x00007fed0d1dcb56 offset=8b6 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dcb60 offset=8c0 bits=5):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949978} = 'jdk/incubator/vector/Byte256Vector'
    - @1: a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @2: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @3: 32
    - @4: stack[176],oop
    - @5: 0
    - @6: stack[168],long
    - @7: obj[311]
    - @8: 1
    - @9: stack[176],oop
    - @10: 0
    - @11: stack[80],long
    - @12: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - @13: a 'jdk/incubator/vector/ByteVector$$Lambda+0x00000008000ecd68'{0x000000011facd530}
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@73 (line 18)
   Locals
    - l0: reg rbp [10],oop
    - l1: empty
    - l2: stack[64]
    - l3: empty
    - l4: obj[311]
   Objects
    - 311: jdk.incubator.vector.Byte256Vector$Byte256Mask stack[96],vector
PcDesc(pc=0x00007fed0d1dcba5 offset=905 bits=0):
   test::copyMem_base@2 (line 11)
PcDesc(pc=0x00007fed0d1dcbbc offset=91c bits=0):
   test::copyMem_base@2 (line 11)
   Locals
    - l0: stack[56],oop
    - l1: reg rbp [10],oop
    - l2: stack[48]
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1dcbc4 offset=924 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dcbd8 offset=938 bits=0):
   test::copyMem_base@2 (line 11)
PcDesc(pc=0x00007fed0d1dcbef offset=94f bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dcbf8 offset=958 bits=0):
   test::copyMem_base@2 (line 11)
   Locals
    - l0: stack[48],oop
    - l1: stack[56],oop
    - l2: reg rbp [10],int
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1dcc1e offset=97e bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dcc28 offset=988 bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[48]
    - @1: stack[52]
    - @2: nullptr
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1dcc4d offset=9ad bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dcc58 offset=9b8 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@2 (line 3364)
   Locals
    - l0: stack[64],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
   Expression stack
    - @0: reg rbp [10],int
    - @1: stack[64],oop
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1dcc60 offset=9c0 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dcc84 offset=9e4 bits=0):
   jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: reg rbp [10],oop
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@73 (line 18)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1dcc8c offset=9ec bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dcca0 offset=a00 bits=0):
   test::copyMem_base@49 (line 16)
PcDesc(pc=0x00007fed0d1dcca5 offset=a05 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dccb0 offset=a10 bits=1):
   test::copyMem_base@49 (line 16)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],int
PcDesc(pc=0x00007fed0d1dccb8 offset=a18 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dcccc offset=a2c bits=0):
   test::copyMem_base@2 (line 11)
PcDesc(pc=0x00007fed0d1dccdc offset=a3c bits=0):
   test::copyMem_base@2 (line 11)
   Locals
    - l0: stack[56],oop
    - l1: nullptr
    - l2: reg rbp [10],int
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1dcd01 offset=a61 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dcd0c offset=a6c bits=0):
   jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: nullptr
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[56],oop
    - l1: empty
    - l2: reg rbp [10],int
    - l3: empty
    - l4: obj[401]
   Objects
    - 401: jdk.incubator.vector.Byte256Vector$Byte256Mask stack[96],vector
PcDesc(pc=0x00007fed0d1dcd2d offset=a8d bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dcd38 offset=a98 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@26 (line 3408)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: nullptr
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1dcd40 offset=aa0 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dcd67 offset=ac7 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dcd69 offset=ac9 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dcd6b offset=acb bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Mask::allTrue@23 (line 803)
   jdk.incubator.vector.ByteVector::intoArray@1 (line 3404)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dcd72 offset=ad2 bits=0):
   jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fed0d1dcd75 offset=ad5 bits=0):
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1dcd85 offset=ae5 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1dcde1 offset=b41 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 21 OopMaps

ImmutableOopMap {r9=Oop [56]=Oop } pc offsets: 245 
ImmutableOopMap {[56]=Oop [64]=Oop } pc offsets: 328 
ImmutableOopMap {rbp=Oop [56]=Oop [64]=Oop [72]=Oop } pc offsets: 1160 
ImmutableOopMap {rbp=Oop [56]=Oop [72]=Oop } pc offsets: 1280 
ImmutableOopMap {[56]=Oop [64]=Oop [72]=Oop } pc offsets: 1500 1580 
ImmutableOopMap {} pc offsets: 1628 
ImmutableOopMap {[56]=Oop [72]=Oop } pc offsets: 1680 
ImmutableOopMap {[48]=Oop [64]=Oop } pc offsets: 1776 
ImmutableOopMap {[48]=Oop [64]=Oop [88]=Oop } pc offsets: 1908 
ImmutableOopMap {rbp=Oop [48]=Oop [80]=Oop } pc offsets: 2064 
ImmutableOopMap {rbp=Oop [72]=Oop [88]=Oop [176]=Oop } pc offsets: 2240 
ImmutableOopMap {rbp=Oop [56]=Oop } pc offsets: 2332 
ImmutableOopMap {[48]=Oop [56]=Oop } pc offsets: 2392 
ImmutableOopMap {rbp=Oop [56]=Oop } pc offsets: 2440 
ImmutableOopMap {[56]=Oop [64]=Oop } pc offsets: 2488 
ImmutableOopMap {rbp=Oop } pc offsets: 2532 
ImmutableOopMap {} pc offsets: 2576 
ImmutableOopMap {[56]=Oop } pc offsets: 2620 2668 
ImmutableOopMap {} pc offsets: 2712 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007fed0d1dc2da offset=3a):
   test::copyMem_base@2 (line 11)
ScopeDesc(pc=0x00007fed0d1dc2f8 offset=58):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc2f8 offset=58):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc2f8 offset=58):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc330 offset=90):
   test::copyMem_base@2 (line 11)
ScopeDesc(pc=0x00007fed0d1dc334 offset=94):
   test::copyMem_base@7 (line 11)
ScopeDesc(pc=0x00007fed0d1dc385 offset=e5):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc385 offset=e5):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc385 offset=e5):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc38b offset=eb):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fed0d1dc392 offset=f2):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc392 offset=f2):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc392 offset=f2):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc395 offset=f5):
   test::copyMem_base@40 (line 11)  reexecute=true
   Locals
    - l0: stack[56],oop
    - l1: reg r9 [18],oop
    - l2: reg rdx [4],int
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dc39b offset=fb):
   test::copyMem_base@2 (line 11)
ScopeDesc(pc=0x00007fed0d1dc3a2 offset=102):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc3a2 offset=102):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc3a2 offset=102):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc3b5 offset=115):
   java.util.Objects::checkIndex@3 (line 385)
ScopeDesc(pc=0x00007fed0d1dc3b5 offset=115):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
ScopeDesc(pc=0x00007fed0d1dc3b5 offset=115):
   jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
ScopeDesc(pc=0x00007fed0d1dc3b5 offset=115):
   test::copyMem_base@21 (line 12)
ScopeDesc(pc=0x00007fed0d1dc3b8 offset=118):
   jdk.incubator.vector.ByteVector::arrayAddress@4 (line 3956)
ScopeDesc(pc=0x00007fed0d1dc3b8 offset=118):
   jdk.incubator.vector.ByteVector::fromArray0Template@20 (line 3732)
ScopeDesc(pc=0x00007fed0d1dc3b8 offset=118):
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
ScopeDesc(pc=0x00007fed0d1dc3b8 offset=118):
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
ScopeDesc(pc=0x00007fed0d1dc3b8 offset=118):
   test::copyMem_base@21 (line 12)
ScopeDesc(pc=0x00007fed0d1dc3bf offset=11f):
   jdk.incubator.vector.ByteVector::fromArray0Template@32 (line 3730)
ScopeDesc(pc=0x00007fed0d1dc3bf offset=11f):
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
ScopeDesc(pc=0x00007fed0d1dc3bf offset=11f):
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
ScopeDesc(pc=0x00007fed0d1dc3bf offset=11f):
   test::copyMem_base@21 (line 12)
ScopeDesc(pc=0x00007fed0d1dc3c5 offset=125):
   jdk.incubator.vector.ByteVector::fromArray0Template@27 (line 3732)
ScopeDesc(pc=0x00007fed0d1dc3c5 offset=125):
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
ScopeDesc(pc=0x00007fed0d1dc3c5 offset=125):
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
ScopeDesc(pc=0x00007fed0d1dc3c5 offset=125):
   test::copyMem_base@21 (line 12)
ScopeDesc(pc=0x00007fed0d1dc3de offset=13e):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc3de offset=13e):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc3de offset=13e):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc3e8 offset=148):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[48]
    - @1: stack[52]
    - @2: nullptr
ScopeDesc(pc=0x00007fed0d1dc3e8 offset=148):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007fed0d1dc3e8 offset=148):
   jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
   Locals
    - l0: obj[533]
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fed0d1dc3e8 offset=148):
   test::copyMem_base@26 (line 13)
   Locals
    - l0: stack[56],oop
    - l1: stack[64],oop
    - l2: stack[48]
    - l3: empty
    - l4: empty
   Objects
    - 533: jdk.incubator.vector.Byte256Vector stack[96],vector
ScopeDesc(pc=0x00007fed0d1dc40d offset=16d):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc40d offset=16d):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc40d offset=16d):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc413 offset=173):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fed0d1dc42d offset=18d):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc42d offset=18d):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc42d offset=18d):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc488 offset=1e8):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fed0d1dc496 offset=1f6):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc496 offset=1f6):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc496 offset=1f6):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc52d offset=28d):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fed0d1dc597 offset=2f7):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc597 offset=2f7):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc597 offset=2f7):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc59c offset=2fc):
   jdk.incubator.vector.ByteVector::fromArray@7 (line 2995)
ScopeDesc(pc=0x00007fed0d1dc59c offset=2fc):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fed0d1dc5a0 offset=300):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc5a0 offset=300):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc5a0 offset=300):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc5a8 offset=308):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
ScopeDesc(pc=0x00007fed0d1dc5a8 offset=308):
   test::copyMem_base@61 (line 17)
ScopeDesc(pc=0x00007fed0d1dc5c3 offset=323):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc5c3 offset=323):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc5c3 offset=323):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc5ed offset=34d):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fed0d1dc63b offset=39b):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc63b offset=39b):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc63b offset=39b):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc66d offset=3cd):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fed0d1dc6da offset=43a):
   jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
ScopeDesc(pc=0x00007fed0d1dc6da offset=43a):
   jdk.incubator.vector.ByteVector::fromArray@17 (line 2995)
ScopeDesc(pc=0x00007fed0d1dc6da offset=43a):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fed0d1dc71d offset=47d):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc71d offset=47d):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc71d offset=47d):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc728 offset=488):
   jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: stack[48]
    - l3: reg rbp [10],oop
    - l4: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
ScopeDesc(pc=0x00007fed0d1dc728 offset=488):
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[56],oop
    - l1: empty
    - l2: stack[48]
    - l3: empty
    - l4: reg rbp [10],oop
ScopeDesc(pc=0x00007fed0d1dc797 offset=4f7):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc797 offset=4f7):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc797 offset=4f7):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc7a0 offset=500):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
ScopeDesc(pc=0x00007fed0d1dc7a0 offset=500):
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dc7a0 offset=500):
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dc7a0 offset=500):
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[56],oop
    - l1: empty
    - l2: stack[48]
    - l3: empty
    - l4: reg rbp [10],oop
ScopeDesc(pc=0x00007fed0d1dc7d0 offset=530):
   jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
ScopeDesc(pc=0x00007fed0d1dc7d0 offset=530):
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
ScopeDesc(pc=0x00007fed0d1dc7d0 offset=530):
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
ScopeDesc(pc=0x00007fed0d1dc7d0 offset=530):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fed0d1dc80d offset=56d):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc80d offset=56d):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc80d offset=56d):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc818 offset=578):
   jdk.incubator.vector.ByteVector::intoArray@2 (line 3364)
ScopeDesc(pc=0x00007fed0d1dc818 offset=578):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc818 offset=578):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc845 offset=5a5):
   jdk.incubator.vector.ByteVector::intoArray@56 (line 3413)
ScopeDesc(pc=0x00007fed0d1dc845 offset=5a5):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc869 offset=5c9):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc869 offset=5c9):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc869 offset=5c9):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc87c offset=5dc):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   Locals
    - l0: stack[64],oop
    - l1: stack[56],oop
    - l2: stack[48]
    - l3: obj[426]
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dc87c offset=5dc):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 426: jdk.incubator.vector.Byte256Vector$Byte256Mask stack[96],vector
ScopeDesc(pc=0x00007fed0d1dc8a6 offset=606):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc8a6 offset=606):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc8a6 offset=606):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc8a8 offset=608):
   jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
ScopeDesc(pc=0x00007fed0d1dc8a8 offset=608):
   jdk.incubator.vector.ByteVector::intoArray@33 (line 3408)
ScopeDesc(pc=0x00007fed0d1dc8a8 offset=608):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc8c2 offset=622):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc8c2 offset=622):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc8c2 offset=622):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc8cc offset=62c):
   jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
   Locals
    - l0: stack[64],oop
    - l1: stack[56],oop
    - l2: stack[48]
    - l3: stack[72],oop
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dc8cc offset=62c):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dc8d4 offset=634):
   jdk.incubator.vector.ByteVector::intoArray@49 (line 3411)
ScopeDesc(pc=0x00007fed0d1dc8d4 offset=634):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc8e7 offset=647):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc8e7 offset=647):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc8e7 offset=647):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc8fc offset=65c):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dc8fc offset=65c):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dc916 offset=676):
   java.util.Objects::checkIndex@3 (line 385)
ScopeDesc(pc=0x00007fed0d1dc916 offset=676):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
ScopeDesc(pc=0x00007fed0d1dc916 offset=676):
   jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
ScopeDesc(pc=0x00007fed0d1dc916 offset=676):
   test::copyMem_base@21 (line 12)
ScopeDesc(pc=0x00007fed0d1dc925 offset=685):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc925 offset=685):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc925 offset=685):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc930 offset=690):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[48]
    - @1: stack[52]
    - @2: nullptr
ScopeDesc(pc=0x00007fed0d1dc930 offset=690):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007fed0d1dc930 offset=690):
   jdk.incubator.vector.ByteVector::fromArray@9 (line 2963)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - l1: stack[72],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fed0d1dc930 offset=690):
   test::copyMem_base@21 (line 12)
   Locals
    - l0: stack[56],oop
    - l1: stack[72],oop
    - l2: stack[48]
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dc938 offset=698):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc938 offset=698):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc938 offset=698):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc977 offset=6d7):
   jdk.incubator.vector.VectorMask::fromLong@34 (line 242)
ScopeDesc(pc=0x00007fed0d1dc977 offset=6d7):
   test::copyMem_base@61 (line 17)
ScopeDesc(pc=0x00007fed0d1dc981 offset=6e1):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dc981 offset=6e1):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dc981 offset=6e1):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dc990 offset=6f0):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @1: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @2: 32
    - @3: 0
    - @4: reg rbp [10],long
    - @5: 1
    - @6: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - @7: a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977030}
ScopeDesc(pc=0x00007fed0d1dc990 offset=6f0):
   test::copyMem_base@61 (line 17)
   Locals
    - l0: stack[48],oop
    - l1: stack[64],oop
    - l2: stack[84]
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dca0b offset=76b):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dca0b offset=76b):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dca0b offset=76b):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dca14 offset=774):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @1: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @2: 32
    - @3: 0
    - @4: reg rbp [10],long
    - @5: 1
    - @6: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - @7: a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977030}
ScopeDesc(pc=0x00007fed0d1dca14 offset=774):
   test::copyMem_base@61 (line 17)
   Locals
    - l0: stack[48],oop
    - l1: stack[64],oop
    - l2: stack[84]
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcaa3 offset=803):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dcaa3 offset=803):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dcaa3 offset=803):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dcab0 offset=810):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949978} = 'jdk/incubator/vector/Byte256Vector'
    - @1: a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @2: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @3: 32
    - @4: stack[48],oop
    - @5: 0
    - @6: stack[128],long
    - @7: obj[277]
    - @8: 1
    - @9: stack[48],oop
    - @10: 0
    - @11: stack[88],long
    - @12: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - @13: a 'jdk/incubator/vector/ByteVector$$Lambda+0x00000008000ecd68'{0x000000011facd530}
ScopeDesc(pc=0x00007fed0d1dcab0 offset=810):
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcab0 offset=810):
   jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcab0 offset=810):
   test::copyMem_base@73 (line 18)
   Locals
    - l0: reg rbp [10],oop
    - l1: empty
    - l2: stack[72]
    - l3: empty
    - l4: obj[277]
   Objects
    - 277: jdk.incubator.vector.Byte256Vector$Byte256Mask stack[96],vector
ScopeDesc(pc=0x00007fed0d1dcb56 offset=8b6):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dcb56 offset=8b6):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dcb56 offset=8b6):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dcb60 offset=8c0):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949978} = 'jdk/incubator/vector/Byte256Vector'
    - @1: a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @2: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @3: 32
    - @4: stack[176],oop
    - @5: 0
    - @6: stack[168],long
    - @7: obj[311]
    - @8: 1
    - @9: stack[176],oop
    - @10: 0
    - @11: stack[80],long
    - @12: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - @13: a 'jdk/incubator/vector/ByteVector$$Lambda+0x00000008000ecd68'{0x000000011facd530}
ScopeDesc(pc=0x00007fed0d1dcb60 offset=8c0):
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcb60 offset=8c0):
   jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcb60 offset=8c0):
   test::copyMem_base@73 (line 18)
   Locals
    - l0: reg rbp [10],oop
    - l1: empty
    - l2: stack[64]
    - l3: empty
    - l4: obj[311]
   Objects
    - 311: jdk.incubator.vector.Byte256Vector$Byte256Mask stack[96],vector
ScopeDesc(pc=0x00007fed0d1dcba5 offset=905):
   test::copyMem_base@2 (line 11)
ScopeDesc(pc=0x00007fed0d1dcbbc offset=91c):
   test::copyMem_base@2 (line 11)
   Locals
    - l0: stack[56],oop
    - l1: reg rbp [10],oop
    - l2: stack[48]
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcbc4 offset=924):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dcbc4 offset=924):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dcbc4 offset=924):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dcbd8 offset=938):
   test::copyMem_base@2 (line 11)
ScopeDesc(pc=0x00007fed0d1dcbef offset=94f):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dcbef offset=94f):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dcbef offset=94f):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dcbf8 offset=958):
   test::copyMem_base@2 (line 11)
   Locals
    - l0: stack[48],oop
    - l1: stack[56],oop
    - l2: reg rbp [10],int
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcc1e offset=97e):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dcc1e offset=97e):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dcc1e offset=97e):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dcc28 offset=988):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[48]
    - @1: stack[52]
    - @2: nullptr
ScopeDesc(pc=0x00007fed0d1dcc28 offset=988):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007fed0d1dcc28 offset=988):
   jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fed0d1dcc28 offset=988):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcc28 offset=988):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcc4d offset=9ad):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dcc4d offset=9ad):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dcc4d offset=9ad):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dcc58 offset=9b8):
   jdk.incubator.vector.ByteVector::intoArray@2 (line 3364)
   Locals
    - l0: stack[64],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
   Expression stack
    - @0: reg rbp [10],int
    - @1: stack[64],oop
ScopeDesc(pc=0x00007fed0d1dcc58 offset=9b8):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcc58 offset=9b8):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcc60 offset=9c0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dcc60 offset=9c0):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dcc60 offset=9c0):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dcc84 offset=9e4):
   jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: reg rbp [10],oop
ScopeDesc(pc=0x00007fed0d1dcc84 offset=9e4):
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcc84 offset=9e4):
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcc84 offset=9e4):
   test::copyMem_base@73 (line 18)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcc8c offset=9ec):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dcc8c offset=9ec):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dcc8c offset=9ec):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dcca0 offset=a00):
   test::copyMem_base@49 (line 16)
ScopeDesc(pc=0x00007fed0d1dcca5 offset=a05):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dcca5 offset=a05):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dcca5 offset=a05):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dccb0 offset=a10):
   test::copyMem_base@49 (line 16)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x00007fed0d1dccb8 offset=a18):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dccb8 offset=a18):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dccb8 offset=a18):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dcccc offset=a2c):
   test::copyMem_base@2 (line 11)
ScopeDesc(pc=0x00007fed0d1dccdc offset=a3c):
   test::copyMem_base@2 (line 11)
   Locals
    - l0: stack[56],oop
    - l1: nullptr
    - l2: reg rbp [10],int
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcd01 offset=a61):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dcd01 offset=a61):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dcd01 offset=a61):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dcd0c offset=a6c):
   jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: nullptr
ScopeDesc(pc=0x00007fed0d1dcd0c offset=a6c):
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcd0c offset=a6c):
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcd0c offset=a6c):
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[56],oop
    - l1: empty
    - l2: reg rbp [10],int
    - l3: empty
    - l4: obj[401]
   Objects
    - 401: jdk.incubator.vector.Byte256Vector$Byte256Mask stack[96],vector
ScopeDesc(pc=0x00007fed0d1dcd2d offset=a8d):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dcd2d offset=a8d):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dcd2d offset=a8d):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dcd38 offset=a98):
   jdk.incubator.vector.ByteVector::intoArray@26 (line 3408)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: nullptr
ScopeDesc(pc=0x00007fed0d1dcd38 offset=a98):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1dcd40 offset=aa0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dcd40 offset=aa0):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dcd40 offset=aa0):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dcd67 offset=ac7):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fed0d1dcd67 offset=ac7):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dcd69 offset=ac9):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fed0d1dcd69 offset=ac9):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dcd6b offset=acb):
   jdk.incubator.vector.Byte256Vector$Byte256Mask::allTrue@23 (line 803)
ScopeDesc(pc=0x00007fed0d1dcd6b offset=acb):
   jdk.incubator.vector.ByteVector::intoArray@1 (line 3404)
ScopeDesc(pc=0x00007fed0d1dcd6b offset=acb):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1dcd72 offset=ad2):
   jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
ScopeDesc(pc=0x00007fed0d1dcd72 offset=ad2):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fed0d1dcd75 offset=ad5):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1dcd85 offset=ae5):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1dcd85 offset=ae5):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1dcd85 offset=ae5):
   test::copyMem_base@80 (line 19)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007fed0d1dc100: 3200
relocInfo@0x00007fed0d1dc100 [type=6(runtime_call) addr=0x00007fed0d1dc2a0 offset=0 format=1] | [destination=0x00007fed16257d50]
         @0x00007fed0d1dc102: 804d
relocInfo@0x00007fed0d1dc102 [type=16(post_call_nop) addr=0x00007fed0d1dc2ed offset=77]
         @0x00007fed0d1dc104: 78046615
relocInfo@0x00007fed0d1dc106 [type=12(metadata) addr=0x00007fed0d1dc302 offset=21 format=3 data=4] | [metadata_addr=0x00007fed0d1dce30 *=0x0000000800040a00 offset=0]metadata_value=0x0000000800040a00: {type array byte}
         @0x00007fed0d1dc108: 7804661e
relocInfo@0x00007fed0d1dc10a [type=12(metadata) addr=0x00007fed0d1dc320 offset=30 format=3 data=4] | [metadata_addr=0x00007fed0d1dce30 *=0x0000000800040a00 offset=0]metadata_value=0x0000000800040a00: {type array byte}
         @0x00007fed0d1dc10c: 5075
relocInfo@0x00007fed0d1dc10c [type=10(poll) addr=0x00007fed0d1dc395 offset=117]
         @0x00007fed0d1dc10e: 324e
relocInfo@0x00007fed0d1dc10e [type=6(runtime_call) addr=0x00007fed0d1dc3e3 offset=78 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1dc110: 8005
relocInfo@0x00007fed0d1dc110 [type=16(post_call_nop) addr=0x00007fed0d1dc3e8 offset=5]
         @0x00007fed0d1dc112: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1dc11a [type=7(external_word) addr=0x00007fed0d1dc3f0 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1dc11c: 320e
relocInfo@0x00007fed0d1dc11c [type=6(runtime_call) addr=0x00007fed0d1dc3fe offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1dc11e: 780b665c
relocInfo@0x00007fed0d1dc120 [type=12(metadata) addr=0x00007fed0d1dc45a offset=92 format=3 data=11] | [metadata_addr=0x00007fed0d1dce68 *=0x0000000800040200 offset=0]metadata_value=0x0000000800040200: {type array bool}
         @0x00007fed0d1dc122: 780c66e9
relocInfo@0x00007fed0d1dc124 [type=12(metadata) addr=0x00007fed0d1dc543 offset=233 format=3 data=12] | [metadata_addr=0x00007fed0d1dce70 *=0x00000008000de750 offset=0]metadata_value=0x00000008000de750: 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
         @0x00007fed0d1dc126: 7c0316e19fb07fed3a07
relocInfo@0x00007fed0d1dc12e [type=7(external_word) addr=0x00007fed0d1dc54a offset=7 format=1 data={16e19fb07fed}] | [target=0x00007fed16e19fb0]
         @0x00007fed0d1dc130: 7c03169eedf87fed380d
relocInfo@0x00007fed0d1dc138 [type=7(external_word) addr=0x00007fed0d1dc557 offset=13 data={169eedf87fed}] | [target=0x00007fed169eedf8]
         @0x00007fed0d1dc13a: 320e
relocInfo@0x00007fed0d1dc13a [type=6(runtime_call) addr=0x00007fed0d1dc565 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1dc13c: 7c03169eee387fed380f
relocInfo@0x00007fed0d1dc144 [type=7(external_word) addr=0x00007fed0d1dc574 offset=15 data={169eee387fed}] | [target=0x00007fed169eee38]
         @0x00007fed0d1dc146: 320e
relocInfo@0x00007fed0d1dc146 [type=6(runtime_call) addr=0x00007fed0d1dc582 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1dc148: 78046689
relocInfo@0x00007fed0d1dc14a [type=12(metadata) addr=0x00007fed0d1dc60b offset=137 format=3 data=4] | [metadata_addr=0x00007fed0d1dce30 *=0x0000000800040a00 offset=0]metadata_value=0x0000000800040a00: {type array byte}
         @0x00007fed0d1dc14c: 780f6678
relocInfo@0x00007fed0d1dc14e [type=12(metadata) addr=0x00007fed0d1dc683 offset=120 format=3 data=15] | [metadata_addr=0x00007fed0d1dce88 *=0x00000008000de0b8 offset=0]metadata_value=0x00000008000de0b8: 'jdk/incubator/vector/Byte256Vector'
         @0x00007fed0d1dc150: 7c0316e19fb07fed3a07
relocInfo@0x00007fed0d1dc158 [type=7(external_word) addr=0x00007fed0d1dc68a offset=7 format=1 data={16e19fb07fed}] | [target=0x00007fed16e19fb0]
         @0x00007fed0d1dc15a: 7c03169eedf87fed380d
relocInfo@0x00007fed0d1dc162 [type=7(external_word) addr=0x00007fed0d1dc697 offset=13 data={169eedf87fed}] | [target=0x00007fed169eedf8]
         @0x00007fed0d1dc164: 320e
relocInfo@0x00007fed0d1dc164 [type=6(runtime_call) addr=0x00007fed0d1dc6a5 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1dc166: 7c03169eee387fed380f
relocInfo@0x00007fed0d1dc16e [type=7(external_word) addr=0x00007fed0d1dc6b4 offset=15 data={169eee387fed}] | [target=0x00007fed169eee38]
         @0x00007fed0d1dc170: 320e
relocInfo@0x00007fed0d1dc170 [type=6(runtime_call) addr=0x00007fed0d1dc6c2 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1dc172: 0842
relocInfo@0x00007fed0d1dc172 [type=1(oop) addr=0x00007fed0d1dc704 offset=66] | [oop_addr=0x00007fed0d1dc706 *=0x000000011f949928 offset=0]
         @0x00007fed0d1dc174: 221f
relocInfo@0x00007fed0d1dc174 [type=4(static_call) addr=0x00007fed0d1dc723 offset=31 format=1] | [destination=0x00007fed0d1dcdb7 metadata=0x0000000000000000]
         @0x00007fed0d1dc176: 8005
relocInfo@0x00007fed0d1dc176 [type=16(post_call_nop) addr=0x00007fed0d1dc728 offset=5]
         @0x00007fed0d1dc178: 0808
relocInfo@0x00007fed0d1dc178 [type=1(oop) addr=0x00007fed0d1dc730 offset=8] | [oop_addr=0x00007fed0d1dc732 *=0x000000011f949978 offset=0]
         @0x00007fed0d1dc17a: 080a
relocInfo@0x00007fed0d1dc17a [type=1(oop) addr=0x00007fed0d1dc73a offset=10] | [oop_addr=0x00007fed0d1dc73c *=0x000000011f0001c0 offset=0]
         @0x00007fed0d1dc17c: 080a
relocInfo@0x00007fed0d1dc17c [type=1(oop) addr=0x00007fed0d1dc744 offset=10] | [oop_addr=0x00007fed0d1dc746 *=0x000000011f949a08 offset=0]
         @0x00007fed0d1dc17e: 0835
relocInfo@0x00007fed0d1dc17e [type=1(oop) addr=0x00007fed0d1dc779 offset=53] | [oop_addr=0x00007fed0d1dc77b *=0x000000011f949928 offset=0]
         @0x00007fed0d1dc180: 080f
relocInfo@0x00007fed0d1dc180 [type=1(oop) addr=0x00007fed0d1dc788 offset=15] | [oop_addr=0x00007fed0d1dc78a *=0x000000011facd530 offset=0]
         @0x00007fed0d1dc182: 2213
relocInfo@0x00007fed0d1dc182 [type=4(static_call) addr=0x00007fed0d1dc79b offset=19 format=1] | [destination=0x00007fed0d1dcda8 metadata=0x0000000000000000]
         @0x00007fed0d1dc184: 8005
relocInfo@0x00007fed0d1dc184 [type=16(post_call_nop) addr=0x00007fed0d1dc7a0 offset=5]
         @0x00007fed0d1dc186: 600c
relocInfo@0x00007fed0d1dc186 [type=12(metadata) addr=0x00007fed0d1dc7ac offset=12] | [metadata_addr=0x00007fed0d1dc7ae *=0x00000008000d3660 offset=0]metadata_value=0x00000008000d3660: 'jdk/incubator/vector/ByteVector'
         @0x00007fed0d1dc188: 780f665a
relocInfo@0x00007fed0d1dc18a [type=12(metadata) addr=0x00007fed0d1dc806 offset=90 format=3 data=15] | [metadata_addr=0x00007fed0d1dce88 *=0x00000008000de0b8 offset=0]metadata_value=0x00000008000de0b8: 'jdk/incubator/vector/Byte256Vector'
         @0x00007fed0d1dc18c: 584a
relocInfo@0x00007fed0d1dc18c [type=11(poll_return) addr=0x00007fed0d1dc850 offset=74]
         @0x00007fed0d1dc18e: 780a1227
relocInfo@0x00007fed0d1dc190 [type=2(virtual_call) addr=0x00007fed0d1dc877 offset=39 format=1 data=10] | [destination=0x00007fed0d1c2c20 cached_value=0x00007fed0d1dc86d metadata=0x0000000000000000]
         @0x00007fed0d1dc192: 8005
relocInfo@0x00007fed0d1dc192 [type=16(post_call_nop) addr=0x00007fed0d1dc87c offset=5]
         @0x00007fed0d1dc194: 224b
relocInfo@0x00007fed0d1dc194 [type=4(static_call) addr=0x00007fed0d1dc8c7 offset=75 format=1] | [destination=0x00007fed0d1dcdb7 metadata=0x0000000000000000]
         @0x00007fed0d1dc196: 8005
relocInfo@0x00007fed0d1dc196 [type=16(post_call_nop) addr=0x00007fed0d1dc8cc offset=5]
         @0x00007fed0d1dc198: 780a122b
relocInfo@0x00007fed0d1dc19a [type=2(virtual_call) addr=0x00007fed0d1dc8f7 offset=43 format=1 data=10] | [destination=0x00007fed0d113ce0 cached_value=0x00007fed0d1dc8ed metadata=0x0000000000000000]
         @0x00007fed0d1dc19c: 8005
relocInfo@0x00007fed0d1dc19c [type=16(post_call_nop) addr=0x00007fed0d1dc8fc offset=5]
         @0x00007fed0d1dc19e: 322f
relocInfo@0x00007fed0d1dc19e [type=6(runtime_call) addr=0x00007fed0d1dc92b offset=47 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1dc1a0: 8005
relocInfo@0x00007fed0d1dc1a0 [type=16(post_call_nop) addr=0x00007fed0d1dc930 offset=5]
         @0x00007fed0d1dc1a2: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1dc1aa [type=7(external_word) addr=0x00007fed0d1dc938 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1dc1ac: 320e
relocInfo@0x00007fed0d1dc1ac [type=6(runtime_call) addr=0x00007fed0d1dc946 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1dc1ae: 6031
relocInfo@0x00007fed0d1dc1ae [type=12(metadata) addr=0x00007fed0d1dc977 offset=49] | [metadata_addr=0x00007fed0d1dc979 *=0x0000000800040200 offset=0]metadata_value=0x0000000800040200: {type array bool}
         @0x00007fed0d1dc1b0: 3214
relocInfo@0x00007fed0d1dc1b0 [type=6(runtime_call) addr=0x00007fed0d1dc98b offset=20 format=1] | [destination=0x00007fed0d02b320]
         @0x00007fed0d1dc1b2: 8005
relocInfo@0x00007fed0d1dc1b2 [type=16(post_call_nop) addr=0x00007fed0d1dc990 offset=5]
         @0x00007fed0d1dc1b4: 6071
relocInfo@0x00007fed0d1dc1b4 [type=12(metadata) addr=0x00007fed0d1dca01 offset=113] | [metadata_addr=0x00007fed0d1dca03 *=0x00000008000de750 offset=0]metadata_value=0x00000008000de750: 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
         @0x00007fed0d1dc1b6: 320e
relocInfo@0x00007fed0d1dc1b6 [type=6(runtime_call) addr=0x00007fed0d1dca0f offset=14 format=1] | [destination=0x00007fed0d02b620]
         @0x00007fed0d1dc1b8: 8005
relocInfo@0x00007fed0d1dc1b8 [type=16(post_call_nop) addr=0x00007fed0d1dca14 offset=5]
         @0x00007fed0d1dc1ba: 6085
relocInfo@0x00007fed0d1dc1ba [type=12(metadata) addr=0x00007fed0d1dca99 offset=133] | [metadata_addr=0x00007fed0d1dca9b *=0x0000000800040a00 offset=0]metadata_value=0x0000000800040a00: {type array byte}
         @0x00007fed0d1dc1bc: 3212
relocInfo@0x00007fed0d1dc1bc [type=6(runtime_call) addr=0x00007fed0d1dcaab offset=18 format=1] | [destination=0x00007fed0d02b320]
         @0x00007fed0d1dc1be: 8005
relocInfo@0x00007fed0d1dc1be [type=16(post_call_nop) addr=0x00007fed0d1dcab0 offset=5]
         @0x00007fed0d1dc1c0: 608c
relocInfo@0x00007fed0d1dc1c0 [type=12(metadata) addr=0x00007fed0d1dcb3c offset=140] | [metadata_addr=0x00007fed0d1dcb3e *=0x00000008000de0b8 offset=0]metadata_value=0x00000008000de0b8: 'jdk/incubator/vector/Byte256Vector'
         @0x00007fed0d1dc1c2: 321f
relocInfo@0x00007fed0d1dc1c2 [type=6(runtime_call) addr=0x00007fed0d1dcb5b offset=31 format=1] | [destination=0x00007fed0d02b620]
         @0x00007fed0d1dc1c4: 8005
relocInfo@0x00007fed0d1dc1c4 [type=16(post_call_nop) addr=0x00007fed0d1dcb60 offset=5]
         @0x00007fed0d1dc1c6: 3257
relocInfo@0x00007fed0d1dc1c6 [type=6(runtime_call) addr=0x00007fed0d1dcbb7 offset=87 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1dc1c8: 8005
relocInfo@0x00007fed0d1dc1c8 [type=16(post_call_nop) addr=0x00007fed0d1dcbbc offset=5]
         @0x00007fed0d1dc1ca: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1dc1d2 [type=7(external_word) addr=0x00007fed0d1dcbc4 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1dc1d4: 320e
relocInfo@0x00007fed0d1dc1d4 [type=6(runtime_call) addr=0x00007fed0d1dcbd2 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1dc1d6: 3221
relocInfo@0x00007fed0d1dc1d6 [type=6(runtime_call) addr=0x00007fed0d1dcbf3 offset=33 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1dc1d8: 8005
relocInfo@0x00007fed0d1dc1d8 [type=16(post_call_nop) addr=0x00007fed0d1dcbf8 offset=5]
         @0x00007fed0d1dc1da: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1dc1e2 [type=7(external_word) addr=0x00007fed0d1dcc00 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1dc1e4: 320e
relocInfo@0x00007fed0d1dc1e4 [type=6(runtime_call) addr=0x00007fed0d1dcc0e offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1dc1e6: 3215
relocInfo@0x00007fed0d1dc1e6 [type=6(runtime_call) addr=0x00007fed0d1dcc23 offset=21 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1dc1e8: 8005
relocInfo@0x00007fed0d1dc1e8 [type=16(post_call_nop) addr=0x00007fed0d1dcc28 offset=5]
         @0x00007fed0d1dc1ea: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1dc1f2 [type=7(external_word) addr=0x00007fed0d1dcc30 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1dc1f4: 320e
relocInfo@0x00007fed0d1dc1f4 [type=6(runtime_call) addr=0x00007fed0d1dcc3e offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1dc1f6: 3215
relocInfo@0x00007fed0d1dc1f6 [type=6(runtime_call) addr=0x00007fed0d1dcc53 offset=21 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1dc1f8: 8005
relocInfo@0x00007fed0d1dc1f8 [type=16(post_call_nop) addr=0x00007fed0d1dcc58 offset=5]
         @0x00007fed0d1dc1fa: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1dc202 [type=7(external_word) addr=0x00007fed0d1dcc60 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1dc204: 320e
relocInfo@0x00007fed0d1dc204 [type=6(runtime_call) addr=0x00007fed0d1dcc6e offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1dc206: 3211
relocInfo@0x00007fed0d1dc206 [type=6(runtime_call) addr=0x00007fed0d1dcc7f offset=17 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1dc208: 8005
relocInfo@0x00007fed0d1dc208 [type=16(post_call_nop) addr=0x00007fed0d1dcc84 offset=5]
         @0x00007fed0d1dc20a: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1dc212 [type=7(external_word) addr=0x00007fed0d1dcc8c offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1dc214: 320e
relocInfo@0x00007fed0d1dc214 [type=6(runtime_call) addr=0x00007fed0d1dcc9a offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1dc216: 3211
relocInfo@0x00007fed0d1dc216 [type=6(runtime_call) addr=0x00007fed0d1dccab offset=17 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1dc218: 8005
relocInfo@0x00007fed0d1dc218 [type=16(post_call_nop) addr=0x00007fed0d1dccb0 offset=5]
         @0x00007fed0d1dc21a: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1dc222 [type=7(external_word) addr=0x00007fed0d1dccb8 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1dc224: 320e
relocInfo@0x00007fed0d1dc224 [type=6(runtime_call) addr=0x00007fed0d1dccc6 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1dc226: 3211
relocInfo@0x00007fed0d1dc226 [type=6(runtime_call) addr=0x00007fed0d1dccd7 offset=17 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1dc228: 8005
relocInfo@0x00007fed0d1dc228 [type=16(post_call_nop) addr=0x00007fed0d1dccdc offset=5]
         @0x00007fed0d1dc22a: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1dc232 [type=7(external_word) addr=0x00007fed0d1dcce4 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1dc234: 320e
relocInfo@0x00007fed0d1dc234 [type=6(runtime_call) addr=0x00007fed0d1dccf2 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1dc236: 3215
relocInfo@0x00007fed0d1dc236 [type=6(runtime_call) addr=0x00007fed0d1dcd07 offset=21 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1dc238: 8005
relocInfo@0x00007fed0d1dc238 [type=16(post_call_nop) addr=0x00007fed0d1dcd0c offset=5]
         @0x00007fed0d1dc23a: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1dc242 [type=7(external_word) addr=0x00007fed0d1dcd14 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1dc244: 320e
relocInfo@0x00007fed0d1dc244 [type=6(runtime_call) addr=0x00007fed0d1dcd22 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1dc246: 3211
relocInfo@0x00007fed0d1dc246 [type=6(runtime_call) addr=0x00007fed0d1dcd33 offset=17 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1dc248: 8005
relocInfo@0x00007fed0d1dc248 [type=16(post_call_nop) addr=0x00007fed0d1dcd38 offset=5]
         @0x00007fed0d1dc24a: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1dc252 [type=7(external_word) addr=0x00007fed0d1dcd40 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1dc254: 320e
relocInfo@0x00007fed0d1dc254 [type=6(runtime_call) addr=0x00007fed0d1dcd4e offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1dc256: 3232
relocInfo@0x00007fed0d1dc256 [type=6(runtime_call) addr=0x00007fed0d1dcd80 offset=50 format=1] | [destination=0x00007fed0d12b2a0]
         @0x00007fed0d1dc258: 7c0105354005
relocInfo@0x00007fed0d1dc25c [type=8(internal_word) addr=0x00007fed0d1dcd85 offset=5 data=1333] | [target=0x00007fed0d1dc850]
         @0x00007fed0d1dc25e: 3211
relocInfo@0x00007fed0d1dc25e [type=6(runtime_call) addr=0x00007fed0d1dcd96 offset=17 format=1] | [destination=0x00007fed0d11e1a0]
         @0x00007fed0d1dc260: 3205
relocInfo@0x00007fed0d1dc260 [type=6(runtime_call) addr=0x00007fed0d1dcd9b offset=5 format=1] | [destination=0x00007fed0d080440]
         @0x00007fed0d1dc262: 000d
relocInfo@0x00007fed0d1dc262 [type=0(none) addr=0x00007fed0d1dcda8 offset=13]
         @0x00007fed0d1dc264: 7c01fb052800
relocInfo@0x00007fed0d1dc268 [type=5(static_stub) addr=0x00007fed0d1dcda8 offset=0 data=-1275] | [static_call=0x00007fed0d1dc79b]
         @0x00007fed0d1dc26a: 6000
relocInfo@0x00007fed0d1dc26a [type=12(metadata) addr=0x00007fed0d1dcda8 offset=0] | [metadata_addr=0x00007fed0d1dcdaa *=0x00007fecc8178da0 offset=0]metadata_value=0x00007fecc8178da0: {method} {0x00007fecc8178da0} 'loadMasked' '(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;ILjava/lang/Object;JLjdk/internal/vm/vector/VectorSupport$VectorMask;ILjava/lang/Object;JLjdk/internal/vm/vector/VectorSupport$VectorSpecies;Ljdk/internal/vm/vector/VectorSupport$LoadVectorMaskedOperation;)Ljdk/internal/vm/vector/VectorSupport$Vector;' in 'jdk/internal/vm/vector/VectorSupport'
         @0x00007fed0d1dc26c: 320a
relocInfo@0x00007fed0d1dc26c [type=6(runtime_call) addr=0x00007fed0d1dcdb2 offset=10 format=1] | [destination=0x00007fed0d19803b]
         @0x00007fed0d1dc26e: 7c01fb7d2805
relocInfo@0x00007fed0d1dc272 [type=5(static_stub) addr=0x00007fed0d1dcdb7 offset=5 data=-1155] | [static_call=0x00007fed0d1dc723]
         @0x00007fed0d1dc274: 7c01f9d92800
relocInfo@0x00007fed0d1dc278 [type=5(static_stub) addr=0x00007fed0d1dcdb7 offset=0 data=-1575] | [static_call=0x00007fed0d1dc8c7]
         @0x00007fed0d1dc27a: 6000
relocInfo@0x00007fed0d1dc27a [type=12(metadata) addr=0x00007fed0d1dcdb7 offset=0] | [metadata_addr=0x00007fed0d1dcdb9 *=0x00007fecc8787298 offset=0]metadata_value=0x00007fecc8787298: {method} {0x00007fecc8787298} 'checkMaskFromIndexSize' '(ILjdk/incubator/vector/ByteVector$ByteSpecies;Ljdk/incubator/vector/VectorMask;II)V' in 'jdk/incubator/vector/ByteVector'
         @0x00007fed0d1dc27c: 320a
relocInfo@0x00007fed0d1dc27c [type=6(runtime_call) addr=0x00007fed0d1dcdc1 offset=10 format=1] | [destination=0x00007fed0d195b7c]
         @0x00007fed0d1dc27e: 3205
relocInfo@0x00007fed0d1dc27e [type=6(runtime_call) addr=0x00007fed0d1dcdc6 offset=5 format=1] | [destination=0x00007fed0d07e520]
         @0x00007fed0d1dc280: 320f
relocInfo@0x00007fed0d1dc280 [type=6(runtime_call) addr=0x00007fed0d1dcdd5 offset=15 format=1] | [destination=0x00007fed0d11d040]
         @0x00007fed0d1dc282: 0000
relocInfo@0x00007fed0d1dc282 [type=0(none) addr=0x00007fed0d1dcdd5 offset=0]
         @0x00007fed0d1dc284: 0000
relocInfo@0x00007fed0d1dc284 [type=0(none) addr=0x00007fed0d1dcdd5 offset=0]
         @0x00007fed0d1dc286: 0000
relocInfo@0x00007fed0d1dc286 [type=0(none) addr=0x00007fed0d1dcdd5 offset=0]
         @0x00007fed0d1dc288: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type abstract_with_unique_concrete_subtype
  context = *jdk.incubator.vector.AbstractSpecies
  class   = jdk.incubator.vector.ByteVector$ByteSpecies
   [nmethod<=klass]jdk.incubator.vector.AbstractSpecies
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.ByteVector$ByteSpecies
  method  = {method} {0x00007fecc87e3cd0} 'loopBound' '(I)I' in 'jdk/incubator/vector/AbstractSpecies'
  class   = jdk.incubator.vector.VectorSpecies
  method  = *{method} {0x00007fecc87e1730} 'loopBound' '(I)I' in 'jdk/incubator/vector/VectorSpecies'
   [nmethod<=klass]jdk.incubator.vector.ByteVector$ByteSpecies
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.ByteVector$ByteSpecies
  method  = {method} {0x00007fecc87e30b0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  class   = jdk.incubator.vector.VectorSpecies
  method  = *{method} {0x00007fecc87e1538} 'length' '()I' in 'jdk/incubator/vector/VectorSpecies'
   [nmethod<=klass]jdk.incubator.vector.ByteVector$ByteSpecies
Dependency of type unique_concrete_method_4
  context = *jdk.incubator.vector.VectorMask
  method  = {method} {0x00007fecc86aa590} 'allTrue' '()Z' in 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
  class   = jdk.incubator.vector.VectorMask
  method  = *{method} {0x00007fecc8681fb0} 'allTrue' '()Z' in 'jdk/incubator/vector/VectorMask'
   [nmethod<=klass]jdk.incubator.vector.VectorMask
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.Byte256Vector$Byte256Mask
  method  = {method} {0x00007fecc87fec58} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
  class   = jdk.incubator.vector.VectorMask
  method  = *{method} {0x00007fecc86829e0} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
   [nmethod<=klass]jdk.incubator.vector.Byte256Vector$Byte256Mask
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 216 bytes)
catch_pco = 1160 (pc=0x00007fed0d1dc728, 1 entries)
  bci -1 at scope depth 0 -> pco 2768 (pc=0x00007fed0d1dcd70)
catch_pco = 1280 (pc=0x00007fed0d1dc7a0, 1 entries)
  bci -1 at scope depth 0 -> pco 2770 (pc=0x00007fed0d1dcd72)
catch_pco = 1500 (pc=0x00007fed0d1dc87c, 1 entries)
  bci -1 at scope depth 0 -> pco 2759 (pc=0x00007fed0d1dcd67)
catch_pco = 1580 (pc=0x00007fed0d1dc8cc, 1 entries)
  bci -1 at scope depth 0 -> pco 2763 (pc=0x00007fed0d1dcd6b)
catch_pco = 1628 (pc=0x00007fed0d1dc8fc, 1 entries)
  bci -1 at scope depth 0 -> pco 2761 (pc=0x00007fed0d1dcd69)
catch_pco = 1776 (pc=0x00007fed0d1dc990, 1 entries)
  bci -1 at scope depth 0 -> pco 2754 (pc=0x00007fed0d1dcd62)
catch_pco = 1908 (pc=0x00007fed0d1dca14, 1 entries)
  bci -1 at scope depth 0 -> pco 2750 (pc=0x00007fed0d1dcd5e)
catch_pco = 2064 (pc=0x00007fed0d1dcab0, 1 entries)
  bci -1 at scope depth 0 -> pco 2740 (pc=0x00007fed0d1dcd54)
catch_pco = 2240 (pc=0x00007fed0d1dcb60, 1 entries)
  bci -1 at scope depth 0 -> pco 2745 (pc=0x00007fed0d1dcd59)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 4 entries, 36 bytes):
{
   < 0x00007fed0d1dc317, 0x00007fed0d1dcccc > < 0x00007fed0d1dc34b, 0x00007fed0d1dcbd8 > < 0x00007fed0d1dc7a8, 0x00007fed0d1dccf8 > 
   < 0x00007fed0d1dc884, 0x00007fed0d1dcd28 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 nullptr-oop
#1: 0x000000011f949978 a 'java/lang/Class'{0x000000011f949978} = 'jdk/incubator/vector/Byte256Vector'
#2: 0x000000011f949928 a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
#3: 0x000000011f949a08 a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
#4: 0x000000011f0001c0 a 'java/lang/Class'{0x000000011f0001c0} = byte
#5: 0x000000011f977030 a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977030}
#6: 0x000000011facd530 a 'jdk/incubator/vector/ByteVector$$Lambda+0x00000008000ecd68'{0x000000011facd530}
#7: 0x000000011f81fe28 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f81fe28}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
# 0: 0x0000000000000000 nullptr-oop
# 1: 0x00007fecc8603650 {method} {0x00007fecc8603650} 'copyMem_base' '([B[B)V' in 'test'
# 2: 0x00007fecc87852d8 {method} {0x00007fecc87852d8} 'intoArray' '([BILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/ByteVector'
# 3: 0x00007fecc8785190 {method} {0x00007fecc8785190} 'intoArray' '([BI)V' in 'jdk/incubator/vector/ByteVector'
# 4: 0x0000000800040a00 {type array byte}
# 5: 0x00007fecc8784520 {method} {0x00007fecc8784520} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
# 6: 0x00007fecc86d48b8 {method} {0x00007fecc86d48b8} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
# 7: 0x00007fecc81a0cb0 {method} {0x00007fecc81a0cb0} 'checkIndex' '(II)I' in 'java/util/Objects'
# 8: 0x00007fecc86a2de8 {method} {0x00007fecc86a2de8} 'fromArray0' '([BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/Byte256Vector'
# 9: 0x00007fecc8785eb8 {method} {0x00007fecc8785eb8} 'fromArray0Template' '([BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
#10: 0x00007fecc87876d8 {method} {0x00007fecc87876d8} 'arrayAddress' '([BI)J' in 'jdk/incubator/vector/ByteVector'
#11: 0x0000000800040200 {type array bool}
#12: 0x00000008000de750 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
#13: 0x00007fecc8784668 {method} {0x00007fecc8784668} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[BILjdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
#14: 0x00007fecc8681ba8 {method} {0x00007fecc8681ba8} 'fromLong' '(Ljdk/incubator/vector/VectorSpecies;J)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
#15: 0x00000008000de0b8 'jdk/incubator/vector/Byte256Vector'
#16: 0x00007fecc86d4780 {method} {0x00007fecc86d4780} 'indexInRange' '(JJJ)Z' in 'jdk/incubator/vector/VectorIntrinsics'
#17: 0x00007fecc86a2f00 {method} {0x00007fecc86a2f00} 'fromArray0' '([BILjdk/incubator/vector/VectorMask;I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/Byte256Vector'
#18: 0x00007fecc87860c8 {method} {0x00007fecc87860c8} 'fromArray0Template' '(Ljava/lang/Class;[BILjdk/incubator/vector/VectorMask;I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
#19: 0x00007fecc86aa590 {method} {0x00007fecc86aa590} 'allTrue' '()Z' in 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
#20: 0x00000008000d9bc0 'jdk/incubator/vector/AbstractSpecies'
#21: 0x00000008000d9fb0 'jdk/incubator/vector/ByteVector$ByteSpecies'
#22: 0x00007fecc87e3cd0 {method} {0x00007fecc87e3cd0} 'loopBound' '(I)I' in 'jdk/incubator/vector/AbstractSpecies'
#23: 0x00000008000d97a8 'jdk/incubator/vector/VectorSpecies'
#24: 0x00007fecc87e1730 {method} {0x00007fecc87e1730} 'loopBound' '(I)I' in 'jdk/incubator/vector/VectorSpecies'
#25: 0x00007fecc87e30b0 {method} {0x00007fecc87e30b0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
#26: 0x00007fecc87e1538 {method} {0x00007fecc87e1538} 'length' '()I' in 'jdk/incubator/vector/VectorSpecies'
#27: 0x00000008000dbee0 'jdk/incubator/vector/VectorMask'
#28: 0x00007fecc8681fb0 {method} {0x00007fecc8681fb0} 'allTrue' '()Z' in 'jdk/incubator/vector/VectorMask'
#29: 0x00007fecc87fec58 {method} {0x00007fecc87fec58} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
#30: 0x00007fecc86829e0 {method} {0x00007fecc86829e0} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

============================= C2-compiled nmethod ==============================
#r018 rsi:rsi   : parm 0: byte[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
#r016 rdx:rdx   : parm 1: byte[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
# -- Old rsp -- Framesize: 208 --
#r591 rsp+204: in_preserve
#r590 rsp+200: return address
#r589 rsp+196: in_preserve
#r588 rsp+192: saved fp register
#r587 rsp+188: pad2, stack alignment
#r586 rsp+184: pad2, stack alignment
#r585 rsp+180: Fixed slot 1
#r584 rsp+176: Fixed slot 0
#r635 rsp+172: spill
#r634 rsp+168: spill
#r633 rsp+164: spill
#r632 rsp+160: spill
#r631 rsp+156: spill
#r630 rsp+152: spill
#r629 rsp+148: spill
#r628 rsp+144: spill
#r627 rsp+140: spill
#r626 rsp+136: spill
#r625 rsp+132: spill
#r624 rsp+128: spill
#r623 rsp+124: spill
#r622 rsp+120: spill
#r621 rsp+116: spill
#r620 rsp+112: spill
#r619 rsp+108: spill
#r618 rsp+104: spill
#r617 rsp+100: spill
#r616 rsp+96: spill
#r615 rsp+92: spill
#r614 rsp+88: spill
#r613 rsp+84: spill
#r612 rsp+80: spill
#r611 rsp+76: spill
#r610 rsp+72: spill
#r609 rsp+68: spill
#r608 rsp+64: spill
#r607 rsp+60: spill
#r606 rsp+56: spill
#r605 rsp+52: spill
#r604 rsp+48: spill
#r603 rsp+44: outgoing argument
#r602 rsp+40: outgoing argument
#r601 rsp+36: outgoing argument
#r600 rsp+32: outgoing argument
#r599 rsp+28: outgoing argument
#r598 rsp+24: outgoing argument
#r597 rsp+20: outgoing argument
#r596 rsp+16: outgoing argument
#r595 rsp+12: outgoing argument
#r594 rsp+ 8: outgoing argument
#r593 rsp+ 4: outgoing argument
#r592 rsp+ 0: outgoing argument
#
----------------------- MetaData before Compile_id = 305 ------------------------
{method}
 - this oop:          0x00007fecc8603650
 - method holder:     'test'
 - constants:         0x00007fecc8603080 constant pool [114]/operands[5] {0x00007fecc8603080} for 'test' cache=0x00007fecc8603980
 - access:            0x9  public static 
 - flags:             0x6080   queued_for_compilation  has_loops_flag  has_loops_flag_init 
 - name:              'copyMem_base'
 - signature:         '([B[B)V'
 - max stack:         5
 - max locals:        5
 - size of params:    2
 - method size:       14
 - vtable index:      -2
 - i2i entry:         0x00007fed0d00c740
 - adapters:          AHE@0x00007fed1038cd50: 0xbb i2c: 0x00007fed0d07ae80 c2i: 0x00007fed0d07af71 c2iUV: 0x00007fed0d07af3f c2iNCI: 0x00007fed0d07afab
 - compiled entry     0x00007fed0d07af71
 - code size:         84
 - code start:        0x00007fecc86035e8
 - code end (excl):   0x00007fecc860363c
 - method data:       0x00007fecc8603c90
 - checked ex length: 0
 - linenumber start:  0x00007fecc860363c
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 305 -----------------------
#
#  void ( byte[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *, byte[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact * )
#
000     N1: #	out( B1 ) <- in( B91 B74 B89 B75 B93 B85 B108 B83 B94 B95 B92 B90 B56 B82 B84 B77 B81 B87 B80 B78 B79 B86 B88 )  Freq: 1

000     B1: #	out( B91 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (648 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #192	# Create frame

01e     movq    [rsp + #48], RSI	# spill
023     movq    [rsp + #168], RDX	# spill
02b     movl    RBX, [RDX + #12 (8-bit)]	# range
02e     NullCheck RDX

02e     B2: #	out( B65 B3 ) <- in( B1 )  Freq: 0.999999
02e     movslq  RSI, RBX	# i2l
031     movl    RBP, RBX	# spill
033     andl    RBP, #-32	# int
036     testl   RBP, RBP
038     jle     B65  P=0.003299 C=200341.000000

03e     B3: #	out( B74 B4 ) <- in( B2 )  Freq: 0.9967
03e     leal    R10, [RBX + #-31]
042     testl   R10, R10
045     jl     B74  P=0.000001 C=-1.000000

04b     B4: #	out( B74 B5 ) <- in( B3 )  Freq: 0.996699
04b     cmpl    RBX, #31
04e     je     B74  P=0.000001 C=-1.000000

054     B5: #	out( B74 B6 ) <- in( B4 )  Freq: 0.996698
054     leaq    R11, [RSI + #-31]
058     movslq  RCX, RBP	# i2l
05b     leaq    R8, [RCX + #31]
05f     andq    R8, #-32	# long
063     movl    R9, R8	# l2i
066     movslq  R8, R9	# i2l
069     addq    R8, #-32	# long
06d     cmpq    R8, R11	# unsigned
070     jae,u   B74  P=0.000001 C=-1.000000

076     B6: #	out( B74 B7 ) <- in( B5 )  Freq: 0.996697
076     movq    R11, [rsp + #48]	# spill
        nop 	# 5 bytes pad for loops and calls
080     movl    R9, [R11 + #12 (8-bit)]	# range
084     NullCheck R11

084     B7: #	out( B74 B8 ) <- in( B6 )  Freq: 0.996696
084     leal    R11, [R9 + #-31]
088     testl   R11, R11
08b     jl     B74  P=0.000001 C=-1.000000

091     B8: #	out( B74 B9 ) <- in( B7 )  Freq: 0.996695
091     cmpl    R9, #31
095     je     B74  P=0.000001 C=-1.000000

09b     B9: #	out( B74 B10 ) <- in( B8 )  Freq: 0.996694
09b     movslq  R9, R9	# i2l
09e     addq    R9, #-31	# long
0a2     cmpq    R8, R9	# unsigned
0a5     jae,u   B74  P=0.000001 C=-1.000000

0ab     B10: #	out( B75 B11 ) <- in( B9 )  Freq: 0.996693
0ab     cmpl    RBP, #2147483616
0b1     jg     B75  P=0.000001 C=-1.000000

0b7     B11: #	out( B76 B12 ) <- in( B10 )  Freq: 0.996692
0b7     load_vector XMM0,[RDX + #16 (8-bit)]
0bc     movq    R8, [rsp + #48]	# spill
0c1     store_vector [R8 + #16 (8-bit)],XMM0
	
0c7     addq    RCX, #-480	# long
0ce     movq    R8, #-2147483648	# long (32-bit)
0d5     cmpq    RCX, #-2147483648
0dc     cmovql RCX, R8	# signed, long
0e0     movl    R9, RCX	# l2i
0e3     cmpl    R9, #32
0e7     jle     B76  P=0.000001 C=-1.000000

0ed     B12: #	out( B77 B13 ) <- in( B11 )  Freq: 0.996691
0ed     cmpl    R11, #32	# unsigned
0f1     jbe,u   B77  P=0.000001 C=-1.000000

0f7     B13: #	out( B78 B14 ) <- in( B12 )  Freq: 0.99669
0f7     cmpl    R10, #32	# unsigned
        nop 	# 5 bytes pad for loops and calls
100     jbe,u   B78  P=0.000001 C=-1.000000

106     B14: #	out( B79 B15 ) <- in( B13 )  Freq: 0.996689
106     cmpl    R10, #512	# unsigned
10d     jbe,u   B79  P=0.000001 C=-1.000000

113     B15: #	out( B80 B16 ) <- in( B14 )  Freq: 0.996688
113     cmpl    R11, #32	# unsigned
117     jbe,u   B80  P=0.000001 C=-1.000000

11d     B16: #	out( B81 B17 ) <- in( B15 )  Freq: 0.996687
        nop 	# 3 bytes pad for loops and calls
120     cmpl    R11, #512	# unsigned
127     jbe,u   B81  P=0.000001 C=-1.000000

12d     B17: #	out( B22 ) <- in( B16 )  Freq: 0.996685
12d     movl    RCX, #512000	# int
132     movl    R8, #32	# int
138     jmp     B22
        nop 	# 3 bytes pad for loops and calls

140     B18: #	out( B19 ) <- in( B19 ) top-of-loop Freq: 91256.7
140     movl    R8, RAX	# spill

143     B19: #	out( B18 B20 ) <- in( B22 B18 ) Loop( B19-B18 inner main of N125 strip mined) Freq: 91558.8
143     movslq  RAX, R8	# i2l
146     movq    RDX, [rsp + #168]	# spill
14e     load_vector XMM0,[RDX + #16 + RAX]
154     movq    RDX, [rsp + #48]	# spill
159     store_vector [RDX + #16 + RAX],XMM0
	
15f     movq    RDX, [rsp + #168]	# spill
167     load_vector XMM0,[RDX + #48 + RAX]
16d     movq    RDX, [rsp + #48]	# spill
172     store_vector [RDX + #48 + RAX],XMM0
	
178     movq    RDX, [rsp + #168]	# spill
180     load_vector XMM0,[RDX + #80 + RAX]
186     movq    RDX, [rsp + #48]	# spill
18b     store_vector [RDX + #80 + RAX],XMM0
	
191     movq    RDX, [rsp + #168]	# spill
199     load_vector XMM0,[RDX + #112 + RAX]
19f     movq    RDX, [rsp + #48]	# spill
1a4     store_vector [RDX + #112 + RAX],XMM0
	
1aa     movq    RDX, [rsp + #168]	# spill
1b2     load_vector XMM0,[RDX + #144 + RAX]
1bb     movq    RDX, [rsp + #48]	# spill
1c0     store_vector [RDX + #144 + RAX],XMM0
	
1c9     movq    RDX, [rsp + #168]	# spill
1d1     load_vector XMM0,[RDX + #176 + RAX]
1da     movq    RDX, [rsp + #48]	# spill
1df     store_vector [RDX + #176 + RAX],XMM0
	
1e8     movq    RDX, [rsp + #168]	# spill
1f0     load_vector XMM0,[RDX + #208 + RAX]
1f9     movq    RDX, [rsp + #48]	# spill
1fe     store_vector [RDX + #208 + RAX],XMM0
	
207     movq    RDX, [rsp + #168]	# spill
20f     load_vector XMM0,[RDX + #240 + RAX]
218     movq    RDX, [rsp + #48]	# spill
21d     store_vector [RDX + #240 + RAX],XMM0
	
226     movq    RDX, [rsp + #168]	# spill
22e     load_vector XMM0,[RDX + #272 + RAX]
237     movq    RDX, [rsp + #48]	# spill
23c     store_vector [RDX + #272 + RAX],XMM0
	
245     movq    RDX, [rsp + #168]	# spill
24d     load_vector XMM0,[RDX + #304 + RAX]
256     movq    RDX, [rsp + #48]	# spill
25b     store_vector [RDX + #304 + RAX],XMM0
	
264     movq    RDX, [rsp + #168]	# spill
26c     load_vector XMM0,[RDX + #336 + RAX]
275     movq    RDX, [rsp + #48]	# spill
27a     store_vector [RDX + #336 + RAX],XMM0
	
283     movq    RDX, [rsp + #168]	# spill
28b     load_vector XMM0,[RDX + #368 + RAX]
294     movq    RDX, [rsp + #48]	# spill
299     store_vector [RDX + #368 + RAX],XMM0
	
2a2     movq    RDX, [rsp + #168]	# spill
2aa     load_vector XMM0,[RDX + #400 + RAX]
2b3     movq    RDX, [rsp + #48]	# spill
2b8     store_vector [RDX + #400 + RAX],XMM0
	
2c1     movq    RDX, [rsp + #168]	# spill
2c9     load_vector XMM0,[RDX + #432 + RAX]
2d2     movq    RDX, [rsp + #48]	# spill
2d7     store_vector [RDX + #432 + RAX],XMM0
	
2e0     movq    RDX, [rsp + #168]	# spill
2e8     load_vector XMM0,[RDX + #464 + RAX]
2f1     movq    RDX, [rsp + #48]	# spill
2f6     store_vector [RDX + #464 + RAX],XMM0
	
2ff     movq    RDX, [rsp + #168]	# spill
307     load_vector XMM0,[RDX + #496 + RAX]
310     movq    RDX, [rsp + #48]	# spill
315     store_vector [RDX + #496 + RAX],XMM0
	
31e     leal    RAX, [R8 + #512]
325     cmpl    RAX, RDI
327     jl     B18	# loop end  P=0.996701 C=199680.000000

32d     B20: #	out( B23 B21 ) <- in( B19 )  Freq: 302.085
32d     # TLS is in R15
32d     movq    R13, [R15 + #960 (32-bit)]	# ptr
334     testl   rax, [R13]	# Safepoint: poll for GC        # test::copyMem_base @ bci:40 (line 11) L[0]=rsp + #48 L[1]=rsp + #168 L[2]=RAX L[3]=_ L[4]=_
        # OopMap {[48]=Oop [168]=Oop off=820/0x334}
338     cmpl    RAX, R9
33b     jge,s   B23  P=0.003299 C=199680.000000

33d     B21: #	out( B22 ) <- in( B20 )  Freq: 301.088
33d     movl    R8, RAX	# spill

340     B22: #	out( B19 ) <- in( B17 B21 ) Loop( B22-B21 ) Freq: 302.085
340     movl    RDI, R9	# spill
343     subl    RDI, R8	# int
346     xorl    RDX, RDX	# int
348     cmpl    R9, R8
34b     cmovll RDI, RDX	# signed, int
34e     cmpl    RDI, #512000	# unsigned
354     cmovla RDI, RCX	# unsigned, int
357     addl    RDI, R8	# int
35a     jmp     B19

35f     B23: #	out( B24 ) <- in( B20 )  Freq: 0.996685
35f     addl    R8, #480	# int

366     B24: #	out( B31 B25 ) <- in( B76 B23 )  Freq: 0.996687
366     cmpl    RAX, RBP
368     jge     B31  P=0.500000 C=-1.000000

36e     B25: #	out( B86 B26 ) <- in( B24 )  Freq: 0.498343
36e     # castII of RAX
36e     cmpl    RAX, R10	# unsigned
371     jae,u   B86  P=0.000001 C=-1.000000

377     B26: #	out( B87 B27 ) <- in( B25 )  Freq: 0.498343
377     movl    R9, RAX	# spill
37a     # castII of R9
        nop 	# 6 bytes pad for loops and calls
380     cmpl    R9, R10	# unsigned
383     jae,u   B87  P=0.000001 C=-1.000000

389     B27: #	out( B88 B28 ) <- in( B26 )  Freq: 0.498342
389     cmpl    RAX, R11	# unsigned
38c     jae,u   B88  P=0.000001 C=-1.000000

392     B28: #	out( B89 B29 ) <- in( B27 )  Freq: 0.498342
392     cmpl    R9, R11	# unsigned
395     jae,u   B89  P=0.000001 C=-1.000000
        nop 	# 1 bytes pad for loops and calls

39c     B29: #	out( B32 B30 ) <- in( B28 B30 ) Loop( B29-B30 inner post of N494) Freq: 0.996682
39c     movslq  R10, RAX	# i2l
39f     movq    R11, [rsp + #168]	# spill
3a7     load_vector XMM0,[R11 + #16 + R10]
3ae     movq    R11, [rsp + #48]	# spill
3b3     store_vector [R11 + #16 + R10],XMM0
	
3ba     leal    R11, [RAX + #32]
        nop 	# 2 bytes pad for loops and calls
3c0     cmpl    R11, RBP
3c3     jge,s   B32	# loop end  P=0.500000 C=199680.000000

3c5     B30: #	out( B29 ) <- in( B29 )  Freq: 0.498341
3c5     movl    RAX, R11	# spill
3c8     jmp,s   B29

3ca     B31: #	out( B32 ) <- in( B24 )  Freq: 0.498343
3ca     movl    R11, RAX	# spill
3cd     movl    RAX, R8	# spill

3d0     B32: #	out( B33 ) <- in( B29 B31 )  Freq: 0.996684
3d0     movl    RBP, RBX	# spill
3d2     subl    RBP, RAX	# int
3d4     addl    RBP, #-32	# int
3d7     movl    [rsp + #56], R11	# spill

3dc     B33: #	out( B90 B34 ) <- in( B32 B65 )  Freq: 0.999984
        nop 	# 4 bytes pad for loops and calls
3e0     testl   RBP, RBP
3e2     jle     B90  P=0.000000 C=661.000000

3e8     B34: #	out( B66 B35 ) <- in( B33 )  Freq: 0.999983
3e8     # TLS is in R15
3e8     movq    R9, [R15 + #264 (32-bit)]	# ptr
3ef     movq    R10, R9	# spill
3f2     addq    R10, #48	# ptr
3f6     movl    R11, #1	# int
3fc     shlxl   R11, R11, RBP
401     decl    R11	# int
404     movl    RBP, R11	# i2l zero-extend
	
407     # TLS is in R15
407     cmpq    R10, [R15 + #280 (32-bit)]	# raw ptr
40e     jae,u   B66  P=0.000100 C=-1.000000

414     B35: #	out( B36 ) <- in( B34 )  Freq: 0.999883
414     # TLS is in R15
414     movq    [R15 + #264 (32-bit)], R10	# ptr
41b     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
423     movq    [R9], #1	# long
42a     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
432     movl    [R9 + #8 (8-bit)], narrowklass: precise [bool (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
43a     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
442     movl    [R9 + #12 (8-bit)], #32	# int
44a     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
452     movq    [R9 + #16 (8-bit)], R12	# long (R12_heapbase==0)
456     movq    [R9 + #24 (8-bit)], R12	# long (R12_heapbase==0)
45a     movq    [R9 + #32 (8-bit)], R12	# long (R12_heapbase==0)
45e     movq    [R9 + #40 (8-bit)], R12	# long (R12_heapbase==0)

462     B36: #	out( B68 B37 ) <- in( B67 B35 )  Freq: 0.999983
462     
462     MEMBAR-storestore (empty encoding)
462     # checkcastPP of R9
462     # TLS is in R15
462     movq    RAX, [R15 + #264 (32-bit)]	# ptr
469     movq    R10, RAX	# spill
46c     addq    R10, #16	# ptr
470     long_to_mask_avx XMM1, RBP	! using R11, R8, XMM0, as TEMP
4e9     store_vector [R9 + #16 (8-bit)],XMM1
	
4ef     # TLS is in R15
4ef     cmpq    R10, [R15 + #280 (32-bit)]	# raw ptr
4f6     jae,u   B68  P=0.000100 C=-1.000000

4fc     B37: #	out( B38 ) <- in( B36 )  Freq: 0.999883
4fc     # TLS is in R15
4fc     movq    [R15 + #264 (32-bit)], R10	# ptr
503     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
50b     movq    [RAX], #1	# long
512     movl    [RAX + #8 (8-bit)], narrowklass: precise jdk/incubator/vector/Byte256Vector$Byte256Mask: 0x00007fec9001a1b0:Constant:exact *	# compressed klass ptr

519     B38: #	out( B45 B39 ) <- in( B69 B37 )  Freq: 0.999983
519     encode_heap_oop_not_null R10,R9
55e     movl    [RAX + #12 (8-bit)], R10	# compressed ptr
562     
562     MEMBAR-storestore (empty encoding)
562     # checkcastPP of RAX
562     movq    [rsp + #160], RAX	# spill
56a     movslq  R10, [RSP + #56 (32-bit)]	# int -> long
56f     leaq    RBP, [R10 + #16]
573     vector_loadmask_byte XMM3, XMM1
	
57b     movl    R8, [rsp + #56]	# spill
580     testl   R8, R8
583     jl     B45  P=0.500000 C=-1.000000

589     B39: #	out( B45 B40 ) <- in( B38 )  Freq: 0.499992
589     addq    RSI, #-32	# long
58d     cmpq    R10, RSI
590     jg     B45  P=0.500000 C=-1.000000

596     B40: #	out( B70 B41 ) <- in( B39 )  Freq: 0.249996
596     # TLS is in R15
596     movq    R8, [R15 + #264 (32-bit)]	# ptr
59d     movq    R11, R8	# spill
5a0     addq    R11, #48	# ptr
5a4     # TLS is in R15
5a4     cmpq    R11, [R15 + #280 (32-bit)]	# raw ptr
5ab     jae,u   B70  P=0.000100 C=-1.000000

5b1     B41: #	out( B42 ) <- in( B40 )  Freq: 0.249971
5b1     # TLS is in R15
5b1     movq    [R15 + #264 (32-bit)], R11	# ptr
5b8     PREFETCHW [R11 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
5c0     movq    [R8], #1	# long
5c7     PREFETCHW [R11 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
5cf     movl    [R8 + #8 (8-bit)], narrowklass: precise [byte (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
5d7     PREFETCHW [R11 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
5df     movl    [R8 + #12 (8-bit)], #32	# int
5e7     PREFETCHW [R11 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
5ef     movq    [R8 + #16 (8-bit)], R12	# long (R12_heapbase==0)
5f3     movq    [R8 + #24 (8-bit)], R12	# long (R12_heapbase==0)
5f7     movq    [R8 + #32 (8-bit)], R12	# long (R12_heapbase==0)
5fb     movq    [R8 + #40 (8-bit)], R12	# long (R12_heapbase==0)

5ff     B42: #	out( B72 B43 ) <- in( B71 B41 )  Freq: 0.249996
5ff     
5ff     MEMBAR-storestore (empty encoding)
5ff     # checkcastPP of R8
5ff     movq    R11, [rsp + #168]	# spill
607     load_vector XMM0,[R11 + #16 + R10]
60e     # TLS is in R15
60e     movq    RAX, [R15 + #264 (32-bit)]	# ptr
615     movq    R11, RAX	# spill
618     addq    R11, #16	# ptr
61c     replicateI XMM2,#0
620     vector_blend  XMM0,XMM2,XMM0,XMM3	!
626     store_vector [R8 + #16 (8-bit)],XMM0
	
62c     # TLS is in R15
62c     cmpq    R11, [R15 + #280 (32-bit)]	# raw ptr
633     jae,u   B72  P=0.000100 C=-1.000000

639     B43: #	out( B44 ) <- in( B42 )  Freq: 0.249971
639     # TLS is in R15
639     movq    [R15 + #264 (32-bit)], R11	# ptr
640     PREFETCHW [R11 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
648     movq    [RAX], #1	# long
64f     movl    [RAX + #8 (8-bit)], narrowklass: precise jdk/incubator/vector/Byte256Vector: 0x00007fecac1201f0:Constant:exact *	# compressed klass ptr

656     B44: #	out( B50 ) <- in( B73 B43 )  Freq: 0.249996
656     encode_heap_oop_not_null R11,R8
69b     movl    [RAX + #12 (8-bit)], R11	# compressed ptr
69f     
69f     MEMBAR-storestore (empty encoding)
69f     # checkcastPP of RAX
69f     movq    RBP, RAX	# spill
6a2     jmp     B50

6a7     B45: #	out( B105 B46 ) <- in( B39 B38 )  Freq: 0.749988
6a7     movq    [rsp + #136], R10	# spill
6af     vmovdqu [rsp + 96],XMM3	# spill
6b5     vmovdqu [rsp + 64],XMM1	# spill
6bb     movl    RSI, [rsp + #56]	# spill
6bf     movq    RDX, jdk/incubator/vector/ByteVector$ByteSpecies (jdk/incubator/vector/VectorSpecies):exact *	# ptr
6c9     movq    RCX, RAX	# spill
6cc     movl    R8, #1	# int
6d2     movl    R9, RBX	# spill
6d5     movq    [rsp + #128], RAX	# spill
        nop 	# 3 bytes pad for loops and calls
6e0     call,static  jdk.incubator.vector.ByteVector::checkMaskFromIndexSize
        # jdk.incubator.vector.ByteVector::fromArray @ bci:43 (line 2999) L[0]=_ L[1]=rsp + #168 L[2]=rsp + #56 L[3]=rsp + #160 L[4]=#Ptr0x00007fec9810e6a8
        # test::copyMem_base @ bci:73 (line 18) L[0]=rsp + #48 L[1]=_ L[2]=rsp + #56 L[3]=_ L[4]=rsp + #128
        # OopMap {[48]=Oop [128]=Oop [160]=Oop [168]=Oop off=1768/0x6e8}

6f0     B46: #	out( B106 B47 ) <- in( B45 )  Freq: 0.749973
        # Block is sole successor of call
6f0     movq    RSI, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
6fa     movq    RCX, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
704     movq    RDX, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
70e     movl    R8, #32	# int
714     movq    R9, [rsp + #168]	# spill
71c     movq    RDI, RBP	# spill
71f     pushq   [rsp + #128]	# 64-bit mem-mem spill
	popq    [rsp + #0]
72b     xorl    R11, R11	# int
72e     movl    [rsp + #8], R11	# spill
733     pushq   [rsp + #168]	# 64-bit mem-mem spill
	popq    [rsp + #16]
740     pushq   [rsp + #136]	# 64-bit mem-mem spill
	popq    [rsp + #24]
74d     movq    R10, jdk/incubator/vector/ByteVector$ByteSpecies (jdk/incubator/vector/VectorSpecies):exact *	# ptr
757     movq    [rsp + #32], R10	# spill
75c     movq    R10, jdk/incubator/vector/ByteVector$$Lambda+0x00000008000ecd68 (jdk/internal/vm/vector/VectorSupport$LoadVectorMaskedOperation):exact *	# ptr
766     movq    [rsp + #40], R10	# spill
        nop 	# 1 bytes pad for loops and calls
76c     call,static  jdk.internal.vm.vector.VectorSupport::loadMasked
        # jdk.incubator.vector.ByteVector::fromArray0Template @ bci:52 (line 3747) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Byte256Vector::fromArray0 @ bci:11 (line 948) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.ByteVector::fromArray @ bci:55 (line 3000) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:73 (line 18) L[0]=rsp + #48 L[1]=_ L[2]=rsp + #56 L[3]=_ L[4]=rsp + #128
        # OopMap {[48]=Oop [128]=Oop [160]=Oop off=1908/0x774}

77c     B47: #	out( B93 B48 ) <- in( B46 )  Freq: 0.749957
        # Block is sole successor of call
        nop 	# 4 bytes pad for loops and calls
780     movl    R10, [RAX + #8 (8-bit)]	# compressed klass ptr
784     NullCheck RAX

784     B48: #	out( B85 B49 ) <- in( B47 )  Freq: 0.749957
784     movq    R11, precise jdk/incubator/vector/ByteVector: 0x00007fec9810d4e0:Constant:exact *	# ptr
78e     decode_and_move_klass_not_null R8,R10
79b     movq    R10, [R8 + #96 (8-bit)]	# class
        nop 	# 1 bytes pad for loops and calls
7a0     cmpq    R10, R11	# ptr
7a3     jne,u   B85  P=0.000001 C=-1.000000

7a9     B49: #	out( B50 ) <- in( B48 )  Freq: 0.749956
7a9     # checkcastPP of RAX
7a9     movq    RBP, RAX	# spill
7ac     vmovdqu XMM1,[rsp + 64]	# spill
7b2     vmovdqu XMM3,[rsp + 96]	# spill
7b8     movq    R10, [rsp + #136]	# spill

7c0     B50: #	out( B57 B51 ) <- in( B44 B49 )  Freq: 0.999952
7c0     vallones XMM0
7c4     vptest_ge16  XMM3, XMM0
	
7c9     jae,u   B57  P=0.100000 C=-1.000000

7cf     B51: #	out( B83 B52 ) <- in( B50 )  Freq: 0.899957
7cf     movq    R8, RBP	# spill
7d2     movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
        nop 	# 10 bytes pad for loops and calls
7e0     cmpl    R10, narrowklass: precise jdk/incubator/vector/Byte256Vector: 0x00007fecac1201f0:Constant:exact *	# compressed klass ptr
7e7     jne,u   B83  P=0.000001 C=-1.000000

7ed     B52: #	out( B92 B53 ) <- in( B51 )  Freq: 0.899956
7ed     movq    R10, [rsp + #48]	# spill
7f2     movl    R11, [R10 + #12 (8-bit)]	# range
7f6     NullCheck R10

7f6     B53: #	out( B84 B54 ) <- in( B52 )  Freq: 0.899955
7f6     # checkcastPP of R8
7f6     addl    R11, #-31	# int
        nop 	# 6 bytes pad for loops and calls
800     testl   R11, R11
803     jl     B84  P=0.000001 C=-1.000000

809     B54: #	out( B82 B55 ) <- in( B53 )  Freq: 0.899954
809     movl    R10, [rsp + #56]	# spill
80e     cmpl    R10, R11	# unsigned
811     jae,u   B82  P=0.000001 C=-1.000000

817     B55: #	out( B56 ) <- in( B54 )  Freq: 0.899953
817     movl    R11, [R8 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
81b     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
822     # castII of R10
822     movq    R11, [rsp + #48]	# spill
827     store_vector [R11 + #16 + R10],XMM0
	

82e     B56: #	out( N1 ) <- in( B64 B55 )  Freq: 0.999942
82e     vzeroupper
	addq    rsp, 192	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

846     ret

847     B57: #	out( B101 B58 ) <- in( B50 )  Freq: 0.0999952
847     movq    [rsp + #96], R10	# spill
84c     movq    RSI, RBP	# spill
84f     vmovdqu [rsp + 64],XMM1	# spill
        nop 	# 1 bytes pad for loops and calls
856     movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.ByteVector::vspecies
        # jdk.incubator.vector.ByteVector::intoArray @ bci:17 (line 3407) L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #56 L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Mask={ [payload :0]=rsp + #64 }
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {rbp=Oop [48]=Oop [160]=Oop off=2152/0x868}

870     B58: #	out( B94 B59 ) <- in( B57 )  Freq: 0.0999932
        # Block is sole successor of call
870     movl    R10, [RAX + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
874     NullCheck RAX

874     B59: #	out( B95 B60 ) <- in( B58 )  Freq: 0.0999931
874     movq    R11, [rsp + #48]	# spill
        nop 	# 7 bytes pad for loops and calls
880     movl    R9, [R11 + #12 (8-bit)]	# range
884     NullCheck R11

884     B60: #	out( B62 B61 ) <- in( B59 )  Freq: 0.099993
884     movl    R8, [rsp + #56]	# spill
889     testl   R8, R8
88c     jl,s   B62  P=0.500000 C=-1.000000

88e     B61: #	out( B63 B62 ) <- in( B60 )  Freq: 0.0499965
88e     movslq  R10, R10	# i2l
891     movslq  R11, R9	# i2l
894     subq    R11, R10	# long
897     movq    R10, [rsp + #96]	# spill
        nop 	# 4 bytes pad for loops and calls
8a0     cmpq    R10, R11
8a3     jle,s   B63  P=0.500000 C=-1.000000

8a5     B62: #	out( B103 B63 ) <- in( B61 B60 )  Freq: 0.0749948
8a5     movl    RSI, [rsp + #56]	# spill
8a9     movq    RDX, RAX	# spill
8ac     movq    RCX, [rsp + #160]	# spill
8b4     movl    R8, #1	# int
        nop 	# 2 bytes pad for loops and calls
8bc     call,static  jdk.incubator.vector.ByteVector::checkMaskFromIndexSize
        # jdk.incubator.vector.ByteVector::intoArray @ bci:46 (line 3409) L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #56 L[3]=rsp + #160 L[4]=_
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {rbp=Oop [48]=Oop [160]=Oop off=2244/0x8c4}

8cc     B63: #	out( B102 B64 ) <- in( B62 B61 )  Freq: 0.0999915
8cc     movq    RSI, RBP	# spill
8cf     movq    RDX, [rsp + #48]	# spill
8d4     movl    RCX, [rsp + #56]	# spill
8d8     movq    R8, [rsp + #160]	# spill
        nop 	# 2 bytes pad for loops and calls
8e2     movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.ByteVector::intoArray0
        # jdk.incubator.vector.ByteVector::intoArray @ bci:53 (line 3411) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {off=2292/0x8f4}

8fc     B64: #	out( B56 ) <- in( B63 )  Freq: 0.0999895
        # Block is sole successor of call
        nop 	# 4 bytes pad for loops and calls
900     jmp     B56

905     B65: #	out( B33 ) <- in( B2 )  Freq: 0.00329937
905     movl    RBP, RBX	# spill
907     xorl    R10, R10	# int
90a     movl    [rsp + #56], R10	# spill
90f     jmp     B33

914     B66: #	out( B99 B67 ) <- in( B34 )  Freq: 0.000100015
914     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #56]
	movl    [rsp + #68], rax
	movq    rax, [rsp - #8]
926     movq    [rsp + #72], RSI	# spill
92b     movl    [rsp + #64], RBX	# spill
92f     pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #56]
939     movq    RSI, precise [bool (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# ptr
943     movl    RDX, #32	# int
948     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.VectorMask::fromLong @ bci:39 (line 242) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007fec90015370 STK[1]=#Ptr0x00007fec9823d080 STK[2]=#32 STK[3]=RBP STK[4]=_ STK[5]=#1 STK[6]=#Ptr0x00007fec9810e6a8 STK[7]=#Ptr0x00007fec90015c38
        # test::copyMem_base @ bci:61 (line 17) L[0]=rsp + #56 L[1]=rsp + #168 L[2]=rsp + #68 L[3]=_ L[4]=_
        # OopMap {[56]=Oop [168]=Oop off=2384/0x950}

958     B67: #	out( B36 ) <- in( B66 )  Freq: 0.000100013
        # Block is sole successor of call
958     pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #48]
962     movl    RBX, [rsp + #64]	# spill
966     movq    RSI, [rsp + #72]	# spill
96b     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #68]
	movl    [rsp + #56], rax
	movq    rax, [rsp - #8]
97d     movq    R9, RAX	# spill
980     jmp     B36

985     B68: #	out( B98 B69 ) <- in( B36 )  Freq: 0.000100015
985     vmovdqu [rsp + 96],XMM1	# spill
98b     movq    [rsp + #80], R9	# spill
990     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #56]
	movl    [rsp + #68], rax
	movq    rax, [rsp - #8]
9a2     movq    [rsp + #72], RSI	# spill
9a7     movl    [rsp + #64], RBX	# spill
9ab     pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #56]
9b5     movq    RSI, precise jdk/incubator/vector/Byte256Vector$Byte256Mask: 0x00007fec9001a1b0:Constant:exact *	# ptr
        nop 	# 1 bytes pad for loops and calls
9c0     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.VectorMask::fromLong @ bci:39 (line 242) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007fec90015370 STK[1]=#Ptr0x00007fec9823d080 STK[2]=#32 STK[3]=RBP STK[4]=_ STK[5]=#1 STK[6]=#Ptr0x00007fec9810e6a8 STK[7]=#Ptr0x00007fec90015c38
        # test::copyMem_base @ bci:61 (line 17) L[0]=rsp + #56 L[1]=rsp + #168 L[2]=rsp + #68 L[3]=_ L[4]=_
        # OopMap {[56]=Oop [80]=Oop [168]=Oop off=2504/0x9c8}

9d0     B69: #	out( B38 ) <- in( B68 )  Freq: 0.000100013
        # Block is sole successor of call
9d0     pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #48]
9da     movl    RBX, [rsp + #64]	# spill
9de     movq    RSI, [rsp + #72]	# spill
9e3     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #68]
	movl    [rsp + #56], rax
	movq    rax, [rsp - #8]
9f5     movq    R9, [rsp + #80]	# spill
9fa     vmovdqu XMM1,[rsp + 96]	# spill
a00     jmp     B38

a05     B70: #	out( B96 B71 ) <- in( B40 )  Freq: 2.50037e-05
a05     vmovdqu [rsp + 96],XMM3	# spill
a0b     vmovdqu [rsp + 64],XMM1	# spill
a11     movq    RSI, precise [byte (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# ptr
a1b     movl    RDX, #32	# int
a20     movq    [rsp + #152], R10	# spill
a28     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.ByteVector::fromArray0Template @ bci:52 (line 3747) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#Ptr0x00007fec880dc338 STK[1]=#Ptr0x00007fec90015370 STK[2]=#Ptr0x00007fec9823d080 STK[3]=#32 STK[4]=rsp + #168 STK[5]=RBP STK[6]=_ STK[7]=#ScObj0 STK[8]=#1 STK[9]=rsp + #168 STK[10]=rsp + #152 STK[11]=_ STK[12]=#Ptr0x00007fec9810e6a8 STK[13]=#Ptr0x00007fec8403da48
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Mask={ [payload :0]=rsp + #64 }
        # jdk.incubator.vector.Byte256Vector::fromArray0 @ bci:11 (line 948) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.ByteVector::fromArray @ bci:32 (line 2996) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:73 (line 18) L[0]=rsp + #48 L[1]=_ L[2]=rsp + #56 L[3]=_ L[4]=#ScObj0
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Mask={ [payload :0]=rsp + #64 }
        # OopMap {[48]=Oop [160]=Oop [168]=Oop off=2608/0xa30}

a38     B71: #	out( B42 ) <- in( B70 )  Freq: 2.50032e-05
        # Block is sole successor of call
a38     vmovdqu XMM1,[rsp + 64]	# spill
a3e     vmovdqu XMM3,[rsp + 96]	# spill
a44     movq    R8, RAX	# spill
a47     movq    R10, [rsp + #152]	# spill
a4f     jmp     B42

a54     B72: #	out( B97 B73 ) <- in( B42 )  Freq: 2.50037e-05
a54     movq    [rsp + #88], R8	# spill
a59     vmovdqu [rsp + 128],XMM3	# spill
a62     movq    R11, RBP	# spill
a65     movq    [rsp + #80], R10	# spill
a6a     pushq   [rsp + #160]	# 64-bit mem-mem spill
	popq    [rsp + #72]
a77     vmovdqu [rsp + 96],XMM1	# spill
a7d     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #56]
	movl    [rsp + #64], rax
	movq    rax, [rsp - #8]
a8f     pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #56]
a99     movq    RSI, precise jdk/incubator/vector/Byte256Vector: 0x00007fecac1201f0:Constant:exact *	# ptr
aa3     movq    [rsp + #160], R11	# spill
        nop 	# 1 bytes pad for loops and calls
aac     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.ByteVector::fromArray0Template @ bci:52 (line 3747) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#Ptr0x00007fec880dc338 STK[1]=#Ptr0x00007fec90015370 STK[2]=#Ptr0x00007fec9823d080 STK[3]=#32 STK[4]=rsp + #168 STK[5]=rsp + #160 STK[6]=_ STK[7]=#ScObj0 STK[8]=#1 STK[9]=rsp + #168 STK[10]=rsp + #80 STK[11]=_ STK[12]=#Ptr0x00007fec9810e6a8 STK[13]=#Ptr0x00007fec8403da48
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Mask={ [payload :0]=rsp + #96 }
        # jdk.incubator.vector.Byte256Vector::fromArray0 @ bci:11 (line 948) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.ByteVector::fromArray @ bci:32 (line 2996) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:73 (line 18) L[0]=rsp + #56 L[1]=_ L[2]=rsp + #64 L[3]=_ L[4]=#ScObj0
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Mask={ [payload :0]=rsp + #96 }
        # OopMap {[56]=Oop [72]=Oop [88]=Oop [168]=Oop off=2740/0xab4}

abc     B73: #	out( B44 ) <- in( B72 )  Freq: 2.50032e-05
        # Block is sole successor of call
abc     pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #48]
ac6     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #64]
	movl    [rsp + #56], rax
	movq    rax, [rsp - #8]
ad8     vmovdqu XMM1,[rsp + 96]	# spill
ade     pushq   [rsp + #72]	# 64-bit mem-mem spill
	popq    [rsp + #160]
aeb     movq    R10, [rsp + #80]	# spill
af0     vmovdqu XMM3,[rsp + 128]	# spill
af9     movq    R8, [rsp + #88]	# spill
        nop 	# 2 bytes pad for loops and calls
b00     jmp     B44

b05     B74: #	out( N1 ) <- in( B7 B3 B4 B5 B9 B8 B6 )  Freq: 7.04305e-06
b05     movl    RSI, #-138	# int
        nop 	# 2 bytes pad for loops and calls
b0c     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # test::copyMem_base @ bci:13 (line 11) L[0]=rsp + #48 L[1]=rsp + #168 L[2]=#0 L[3]=_ L[4]=_ STK[0]=#0 STK[1]=RBP
        # OopMap {[48]=Oop [168]=Oop off=2836/0xb14}
b1c     stop	# ShouldNotReachHere

b30     B75: #	out( N1 ) <- in( B10 )  Freq: 1.00993e-06
b30     movl    RSI, #-146	# int
        nop 	# 3 bytes pad for loops and calls
b38     call,static  wrapper for: uncommon_trap(reason='loop_limit_check' action='maybe_recompile' debug_id='0')
        # test::copyMem_base @ bci:13 (line 11) L[0]=rsp + #48 L[1]=rsp + #168 L[2]=#0 L[3]=_ L[4]=_ STK[0]=#0 STK[1]=RBP
        # OopMap {[48]=Oop [168]=Oop off=2880/0xb40}
b48     stop	# ShouldNotReachHere

b5c     B76: #	out( B24 ) <- in( B11 )  Freq: 1.00993e-06
b5c     movl    RAX, #32	# int
b61     xorl    R8, R8	# int
b64     jmp     B24

b69     B77: #	out( N1 ) <- in( B12 )  Freq: 9.96691e-07
b69     stop	# ShouldNotReachHere

b7d     B78: #	out( N1 ) <- in( B13 )  Freq: 9.9669e-07
b7d     stop	# ShouldNotReachHere

b91     B79: #	out( N1 ) <- in( B14 )  Freq: 9.96689e-07
b91     stop	# ShouldNotReachHere

ba5     B80: #	out( N1 ) <- in( B15 )  Freq: 9.96688e-07
ba5     stop	# ShouldNotReachHere

bb9     B81: #	out( N1 ) <- in( B16 )  Freq: 9.96687e-07
bb9     stop	# ShouldNotReachHere

bcd     B82: #	out( N1 ) <- in( B54 )  Freq: 9.11904e-07
bcd     movl    RSI, #-28	# int
bd2     movq    RBP, [rsp + #48]	# spill
bd7     movq    [rsp + #48], R8	# spill
bdc     movl    [rsp + #60], R11	# spill
        nop 	# 3 bytes pad for loops and calls
be4     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 385) L[0]=_ L[1]=_ STK[0]=rsp + #56 STK[1]=rsp + #60 STK[2]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.ByteVector::intoArray @ bci:7 (line 3364) L[0]=rsp + #48 L[1]=RBP L[2]=_ L[3]=_
        # jdk.incubator.vector.ByteVector::intoArray @ bci:10 (line 3405) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {rbp=Oop [48]=Oop off=3052/0xbec}
bf4     stop	# ShouldNotReachHere

c08     B83: #	out( N1 ) <- in( B51 )  Freq: 8.99957e-07
c08     movl    RSI, #-34	# int
c0d     movq    RBP, [rsp + #48]	# spill
c12     movq    [rsp + #64], R8	# spill
        nop 	# 1 bytes pad for loops and calls
c18     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.ByteVector::intoArray @ bci:2 (line 3364) L[0]=rsp + #64 L[1]=RBP L[2]=_ L[3]=_ STK[0]=rsp + #56 STK[1]=rsp + #64
        # jdk.incubator.vector.ByteVector::intoArray @ bci:10 (line 3405) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {rbp=Oop [64]=Oop off=3104/0xc20}
c28     stop	# ShouldNotReachHere

c3c     B84: #	out( N1 ) <- in( B53 )  Freq: 8.99955e-07
c3c     movl    RSI, #-52	# int
c41     movq    RBP, [rsp + #48]	# spill
c46     movq    [rsp + #48], R8	# spill
c4b     movl    [rsp + #60], R11	# spill
c50     call,static  wrapper for: uncommon_trap(reason='intrinsic_or_type_checked_inlining' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 385) L[0]=_ L[1]=_ STK[0]=rsp + #56 STK[1]=rsp + #60 STK[2]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.ByteVector::intoArray @ bci:7 (line 3364) L[0]=rsp + #48 L[1]=RBP L[2]=_ L[3]=_
        # jdk.incubator.vector.ByteVector::intoArray @ bci:10 (line 3405) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {rbp=Oop [48]=Oop off=3160/0xc58}
c60     stop	# ShouldNotReachHere

c74     B85: #	out( N1 ) <- in( B48 )  Freq: 7.49957e-07
c74     movl    RSI, #-34	# int
c79     movq    RBP, RAX	# spill
c7c     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.ByteVector::fromArray0Template @ bci:55 (line 3747) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=RBP
        # jdk.incubator.vector.Byte256Vector::fromArray0 @ bci:11 (line 948) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.ByteVector::fromArray @ bci:55 (line 3000) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:73 (line 18) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {rbp=Oop off=3204/0xc84}
c8c     stop	# ShouldNotReachHere

ca0     B86: #	out( N1 ) <- in( B25 )  Freq: 5.04961e-07
ca0     stop	# ShouldNotReachHere

cb4     B87: #	out( N1 ) <- in( B26 )  Freq: 5.0496e-07
cb4     stop	# ShouldNotReachHere

cc8     B88: #	out( N1 ) <- in( B27 )  Freq: 5.0496e-07
cc8     stop	# ShouldNotReachHere

cdc     B89: #	out( N1 ) <- in( B28 )  Freq: 5.04959e-07
cdc     stop	# ShouldNotReachHere

cf0     B90: #	out( N1 ) <- in( B33 )  Freq: 4.99992e-07
cf0     movl    RSI, #-187	# int
        nop 	# 3 bytes pad for loops and calls
cf8     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # test::copyMem_base @ bci:49 (line 16) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP
        # OopMap {off=3328/0xd00}
d08     stop	# ShouldNotReachHere

d1c     B91: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
d1c     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
d24     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # test::copyMem_base @ bci:7 (line 11) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_ STK[2]=#null
        # OopMap {off=3372/0xd2c}
d34     stop	# ShouldNotReachHere

d48     B92: #	out( N1 ) <- in( B52 )  Freq: 9.11906e-07
d48     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
d50     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.ByteVector::intoArray @ bci:6 (line 3364) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=_ STK[2]=#null
        # jdk.incubator.vector.ByteVector::intoArray @ bci:10 (line 3405) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {off=3416/0xd58}
d60     stop	# ShouldNotReachHere

d74     B93: #	out( N1 ) <- in( B47 )  Freq: 7.59916e-07
d74     movl    RSI, #-12	# int
d79     movq    RBP, [rsp + #48]	# spill
        nop 	# 2 bytes pad for loops and calls
d80     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.ByteVector::fromArray0Template @ bci:55 (line 3747) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#null
        # jdk.incubator.vector.Byte256Vector::fromArray0 @ bci:11 (line 948) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.ByteVector::fromArray @ bci:55 (line 3000) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # test::copyMem_base @ bci:73 (line 18) L[0]=RBP L[1]=_ L[2]=rsp + #56 L[3]=_ L[4]=#ScObj0
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Mask={ [payload :0]=rsp + #64 }
        # OopMap {rbp=Oop off=3464/0xd88}
d90     stop	# ShouldNotReachHere

da4     B94: #	out( N1 ) <- in( B58 )  Freq: 1.01321e-07
da4     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
dac     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.ByteVector::intoArray @ bci:26 (line 3408) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_ STK[2]=#null
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {off=3508/0xdb4}
dbc     stop	# ShouldNotReachHere

dd0     B95: #	out( N1 ) <- in( B59 )  Freq: 1.01321e-07
dd0     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
dd8     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.ByteVector::intoArray @ bci:31 (line 3408) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=_ STK[4]=#null
        # test::copyMem_base @ bci:80 (line 19) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {off=3552/0xde0}
de8     stop	# ShouldNotReachHere

dfc     B96: #	out( B107 ) <- in( B70 )  Freq: 2.50037e-10
dfc     # exception oop is in rax; no code emitted
        nop 	# 4 bytes pad for loops and calls
e00     jmp     B107

e05     B97: #	out( B107 ) <- in( B72 )  Freq: 2.50037e-10
e05     # exception oop is in rax; no code emitted
e05     jmp     B107

e0a     B98: #	out( B100 ) <- in( B68 )  Freq: 1.00015e-09
e0a     # exception oop is in rax; no code emitted
e0a     jmp,s   B100

e0c     B99: #	out( B100 ) <- in( B66 )  Freq: 1.00015e-09
e0c     # exception oop is in rax; no code emitted

e0c     B100: #	out( B108 ) <- in( B99 B98 )  Freq: 2.0003e-09
e0c     movq    RSI, RAX	# spill
e0f     jmp,s   B108

e11     B101: #	out( B104 ) <- in( B57 )  Freq: 9.99952e-07
e11     # exception oop is in rax; no code emitted
e11     jmp,s   B104

e13     B102: #	out( B104 ) <- in( B63 )  Freq: 9.99915e-07
e13     # exception oop is in rax; no code emitted
e13     jmp,s   B104

e15     B103: #	out( B104 ) <- in( B62 )  Freq: 7.49947e-07
e15     # exception oop is in rax; no code emitted

e15     B104: #	out( B108 ) <- in( B101 B102 B103 )  Freq: 2.74981e-06
e15     movq    RSI, RAX	# spill
e18     jmp,s   B108

e1a     B105: #	out( B107 ) <- in( B45 )  Freq: 7.49988e-06
e1a     # exception oop is in rax; no code emitted
e1a     jmp,s   B107

e1c     B106: #	out( B107 ) <- in( B46 )  Freq: 7.49972e-06
e1c     # exception oop is in rax; no code emitted

e1c     B107: #	out( B108 ) <- in( B96 B97 B105 B106 )  Freq: 1.50001e-05
e1c     movq    RSI, RAX	# spill

e1f     B108: #	out( N1 ) <- in( B107 B104 B100 )  Freq: 1.77519e-05
e1f     vzeroupper
	addq    rsp, 192	# Destroy frame
	popq    rbp

e2a     jmp     rethrow_stub

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     658  305             test::copyMem_base (84 bytes)
 total in heap  [0x00007fed0d1e4210,0x00007fed0d1e6160] = 8016
 relocation     [0x00007fed0d1e4380,0x00007fed0d1e4578] = 504
 main code      [0x00007fed0d1e4580,0x00007fed0d1e53d0] = 3664
 stub code      [0x00007fed0d1e53d0,0x00007fed0d1e5408] = 56
 oops           [0x00007fed0d1e5408,0x00007fed0d1e5440] = 56
 metadata       [0x00007fed0d1e5440,0x00007fed0d1e5530] = 240
 scopes data    [0x00007fed0d1e5530,0x00007fed0d1e58a8] = 888
 scopes pcs     [0x00007fed0d1e58a8,0x00007fed0d1e6038] = 1936
 dependencies   [0x00007fed0d1e6038,0x00007fed0d1e6050] = 24
 handler table  [0x00007fed0d1e6050,0x00007fed0d1e6128] = 216
 nul chk table  [0x00007fed0d1e6128,0x00007fed0d1e6160] = 56

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007fecc8603650} 'copyMem_base' '([B[B)V' in 'test'
  # parm0:    rsi:rsi   = '[B'
  # parm1:    rdx:rdx   = '[B'
  #           [sp+0xd0]  (sp of caller)
 ;; N1: #	out( B1 ) <- in( B91 B74 B89 B75 B93 B85 B108 B83 B94 B95 B92 B90 B56 B82 B84 B77 B81 B87 B80 B78 B79 B86 B88 )  Freq: 1
 ;; B1: #	out( B91 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fed0d1e4580:   mov    %eax,-0x18000(%rsp)
  0x00007fed0d1e4587:   push   %rbp
  0x00007fed0d1e4588:   sub    $0xc0,%rsp
  0x00007fed0d1e458f:   nop
  0x00007fed0d1e4590:   cmpl   $0x0,0x20(%r15)
  0x00007fed0d1e4598:   jne    0x00007fed0d1e53c5           ;*synchronization entry
                                                            ; - test::copyMem_base@-1 (line 10)
  0x00007fed0d1e459e:   mov    %rsi,0x30(%rsp)
  0x00007fed0d1e45a3:   mov    %rdx,0xa8(%rsp)
  0x00007fed0d1e45ab:   mov    0xc(%rdx),%ebx               ; implicit exception: dispatches to 0x00007fed0d1e529c
                                                            ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B2: #	out( B65 B3 ) <- in( B1 )  Freq: 0.999999
  0x00007fed0d1e45ae:   movslq %ebx,%rsi                    ;*i2l {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@16 (line 2995)
                                                            ; - test::copyMem_base@73 (line 18)
  0x00007fed0d1e45b1:   mov    %ebx,%ebp
  0x00007fed0d1e45b3:   and    $0xffffffe0,%ebp
  0x00007fed0d1e45b6:   test   %ebp,%ebp
  0x00007fed0d1e45b8:   jle    0x00007fed0d1e4e85
 ;; B3: #	out( B74 B4 ) <- in( B2 )  Freq: 0.9967
  0x00007fed0d1e45be:   lea    -0x1f(%rbx),%r10d
  0x00007fed0d1e45c2:   test   %r10d,%r10d
  0x00007fed0d1e45c5:   jl     0x00007fed0d1e5085
 ;; B4: #	out( B74 B5 ) <- in( B3 )  Freq: 0.996699
  0x00007fed0d1e45cb:   cmp    $0x1f,%ebx
  0x00007fed0d1e45ce:   je     0x00007fed0d1e5085
 ;; B5: #	out( B74 B6 ) <- in( B4 )  Freq: 0.996698
  0x00007fed0d1e45d4:   lea    -0x1f(%rsi),%r11
  0x00007fed0d1e45d8:   movslq %ebp,%rcx
  0x00007fed0d1e45db:   lea    0x1f(%rcx),%r8
  0x00007fed0d1e45df:   and    $0xffffffffffffffe0,%r8
  0x00007fed0d1e45e3:   mov    %r8d,%r9d
  0x00007fed0d1e45e6:   movslq %r9d,%r8
  0x00007fed0d1e45e9:   add    $0xffffffffffffffe0,%r8
  0x00007fed0d1e45ed:   cmp    %r11,%r8
  0x00007fed0d1e45f0:   jae    0x00007fed0d1e5085
 ;; B6: #	out( B74 B7 ) <- in( B5 )  Freq: 0.996697
  0x00007fed0d1e45f6:   mov    0x30(%rsp),%r11
  0x00007fed0d1e45fb:   nop
  0x00007fed0d1e45fc:   nop
  0x00007fed0d1e45fd:   nop
  0x00007fed0d1e45fe:   nop
  0x00007fed0d1e45ff:   nop
  0x00007fed0d1e4600:   mov    0xc(%r11),%r9d               ; implicit exception: dispatches to 0x00007fed0d1e5085
 ;; B7: #	out( B74 B8 ) <- in( B6 )  Freq: 0.996696
  0x00007fed0d1e4604:   lea    -0x1f(%r9),%r11d
  0x00007fed0d1e4608:   test   %r11d,%r11d
  0x00007fed0d1e460b:   jl     0x00007fed0d1e5085
 ;; B8: #	out( B74 B9 ) <- in( B7 )  Freq: 0.996695
  0x00007fed0d1e4611:   cmp    $0x1f,%r9d
  0x00007fed0d1e4615:   je     0x00007fed0d1e5085
 ;; B9: #	out( B74 B10 ) <- in( B8 )  Freq: 0.996694
  0x00007fed0d1e461b:   movslq %r9d,%r9
  0x00007fed0d1e461e:   add    $0xffffffffffffffe1,%r9
  0x00007fed0d1e4622:   cmp    %r9,%r8
  0x00007fed0d1e4625:   jae    0x00007fed0d1e5085
 ;; B10: #	out( B75 B11 ) <- in( B9 )  Freq: 0.996693
  0x00007fed0d1e462b:   cmp    $0x7fffffe0,%ebp
  0x00007fed0d1e4631:   jg     0x00007fed0d1e50b0           ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B11: #	out( B76 B12 ) <- in( B10 )  Freq: 0.996692
  0x00007fed0d1e4637:   vmovdqu 0x10(%rdx),%ymm0            ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@32 (line 3730)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
                                                            ; - test::copyMem_base@21 (line 12)
  0x00007fed0d1e463c:   mov    0x30(%rsp),%r8               ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4641:   vmovdqu %ymm0,0x10(%r8)             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fed0d1e4647:   add    $0xfffffffffffffe20,%rcx
  0x00007fed0d1e464e:   mov    $0xffffffff80000000,%r8
  0x00007fed0d1e4655:   cmp    $0xffffffff80000000,%rcx
  0x00007fed0d1e465c:   cmovl  %r8,%rcx
  0x00007fed0d1e4660:   mov    %ecx,%r9d
  0x00007fed0d1e4663:   cmp    $0x20,%r9d
  0x00007fed0d1e4667:   jle    0x00007fed0d1e50dc
 ;; B12: #	out( B77 B13 ) <- in( B11 )  Freq: 0.996691
  0x00007fed0d1e466d:   cmp    $0x20,%r11d
  0x00007fed0d1e4671:   jbe    0x00007fed0d1e50e9
 ;; B13: #	out( B78 B14 ) <- in( B12 )  Freq: 0.99669
  0x00007fed0d1e4677:   cmp    $0x20,%r10d
  0x00007fed0d1e467b:   nop
  0x00007fed0d1e467c:   nop
  0x00007fed0d1e467d:   nop
  0x00007fed0d1e467e:   nop
  0x00007fed0d1e467f:   nop
  0x00007fed0d1e4680:   jbe    0x00007fed0d1e50fd
 ;; B14: #	out( B79 B15 ) <- in( B13 )  Freq: 0.996689
  0x00007fed0d1e4686:   cmp    $0x200,%r10d
  0x00007fed0d1e468d:   jbe    0x00007fed0d1e5111
 ;; B15: #	out( B80 B16 ) <- in( B14 )  Freq: 0.996688
  0x00007fed0d1e4693:   cmp    $0x20,%r11d
  0x00007fed0d1e4697:   jbe    0x00007fed0d1e5125
 ;; B16: #	out( B81 B17 ) <- in( B15 )  Freq: 0.996687
  0x00007fed0d1e469d:   nop
  0x00007fed0d1e469e:   nop
  0x00007fed0d1e469f:   nop
  0x00007fed0d1e46a0:   cmp    $0x200,%r11d
  0x00007fed0d1e46a7:   jbe    0x00007fed0d1e5139
 ;; B17: #	out( B22 ) <- in( B16 )  Freq: 0.996685
  0x00007fed0d1e46ad:   mov    $0x7d000,%ecx
  0x00007fed0d1e46b2:   mov    $0x20,%r8d
  0x00007fed0d1e46b8:   jmpq   0x00007fed0d1e48c0
  0x00007fed0d1e46bd:   nop
  0x00007fed0d1e46be:   nop
  0x00007fed0d1e46bf:   nop
 ;; B18: #	out( B19 ) <- in( B19 ) top-of-loop Freq: 91256.7
  0x00007fed0d1e46c0:   mov    %eax,%r8d                    ;*getstatic SPECIES {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@16 (line 12)
 ;; B19: #	out( B18 B20 ) <- in( B22 B18 ) Loop( B19-B18 inner main of N125 strip mined) Freq: 91558.8
  0x00007fed0d1e46c3:   movslq %r8d,%rax
  0x00007fed0d1e46c6:   mov    0xa8(%rsp),%rdx
  0x00007fed0d1e46ce:   vmovdqu 0x10(%rdx,%rax,1),%ymm0
  0x00007fed0d1e46d4:   mov    0x30(%rsp),%rdx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e46d9:   vmovdqu %ymm0,0x10(%rdx,%rax,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fed0d1e46df:   mov    0xa8(%rsp),%rdx
  0x00007fed0d1e46e7:   vmovdqu 0x30(%rdx,%rax,1),%ymm0
  0x00007fed0d1e46ed:   mov    0x30(%rsp),%rdx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e46f2:   vmovdqu %ymm0,0x30(%rdx,%rax,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fed0d1e46f8:   mov    0xa8(%rsp),%rdx
  0x00007fed0d1e4700:   vmovdqu 0x50(%rdx,%rax,1),%ymm0
  0x00007fed0d1e4706:   mov    0x30(%rsp),%rdx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e470b:   vmovdqu %ymm0,0x50(%rdx,%rax,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fed0d1e4711:   mov    0xa8(%rsp),%rdx
  0x00007fed0d1e4719:   vmovdqu 0x70(%rdx,%rax,1),%ymm0
  0x00007fed0d1e471f:   mov    0x30(%rsp),%rdx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4724:   vmovdqu %ymm0,0x70(%rdx,%rax,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fed0d1e472a:   mov    0xa8(%rsp),%rdx
  0x00007fed0d1e4732:   vmovdqu 0x90(%rdx,%rax,1),%ymm0
  0x00007fed0d1e473b:   mov    0x30(%rsp),%rdx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4740:   vmovdqu %ymm0,0x90(%rdx,%rax,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fed0d1e4749:   mov    0xa8(%rsp),%rdx
  0x00007fed0d1e4751:   vmovdqu 0xb0(%rdx,%rax,1),%ymm0
  0x00007fed0d1e475a:   mov    0x30(%rsp),%rdx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e475f:   vmovdqu %ymm0,0xb0(%rdx,%rax,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fed0d1e4768:   mov    0xa8(%rsp),%rdx
  0x00007fed0d1e4770:   vmovdqu 0xd0(%rdx,%rax,1),%ymm0
  0x00007fed0d1e4779:   mov    0x30(%rsp),%rdx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e477e:   vmovdqu %ymm0,0xd0(%rdx,%rax,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
                                                            ;   {no_reloc}
  0x00007fed0d1e4787:   mov    0xa8(%rsp),%rdx
  0x00007fed0d1e478f:   vmovdqu 0xf0(%rdx,%rax,1),%ymm0
  0x00007fed0d1e4798:   mov    0x30(%rsp),%rdx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e479d:   vmovdqu %ymm0,0xf0(%rdx,%rax,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fed0d1e47a6:   mov    0xa8(%rsp),%rdx
  0x00007fed0d1e47ae:   vmovdqu 0x110(%rdx,%rax,1),%ymm0
  0x00007fed0d1e47b7:   mov    0x30(%rsp),%rdx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e47bc:   vmovdqu %ymm0,0x110(%rdx,%rax,1)    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fed0d1e47c5:   mov    0xa8(%rsp),%rdx
  0x00007fed0d1e47cd:   vmovdqu 0x130(%rdx,%rax,1),%ymm0
  0x00007fed0d1e47d6:   mov    0x30(%rsp),%rdx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e47db:   vmovdqu %ymm0,0x130(%rdx,%rax,1)    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fed0d1e47e4:   mov    0xa8(%rsp),%rdx
  0x00007fed0d1e47ec:   vmovdqu 0x150(%rdx,%rax,1),%ymm0
  0x00007fed0d1e47f5:   mov    0x30(%rsp),%rdx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e47fa:   vmovdqu %ymm0,0x150(%rdx,%rax,1)    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fed0d1e4803:   mov    0xa8(%rsp),%rdx
  0x00007fed0d1e480b:   vmovdqu 0x170(%rdx,%rax,1),%ymm0
  0x00007fed0d1e4814:   mov    0x30(%rsp),%rdx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4819:   vmovdqu %ymm0,0x170(%rdx,%rax,1)    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fed0d1e4822:   mov    0xa8(%rsp),%rdx
  0x00007fed0d1e482a:   vmovdqu 0x190(%rdx,%rax,1),%ymm0
  0x00007fed0d1e4833:   mov    0x30(%rsp),%rdx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4838:   vmovdqu %ymm0,0x190(%rdx,%rax,1)    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fed0d1e4841:   mov    0xa8(%rsp),%rdx
  0x00007fed0d1e4849:   vmovdqu 0x1b0(%rdx,%rax,1),%ymm0
  0x00007fed0d1e4852:   mov    0x30(%rsp),%rdx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4857:   vmovdqu %ymm0,0x1b0(%rdx,%rax,1)    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fed0d1e4860:   mov    0xa8(%rsp),%rdx
  0x00007fed0d1e4868:   vmovdqu 0x1d0(%rdx,%rax,1),%ymm0
  0x00007fed0d1e4871:   mov    0x30(%rsp),%rdx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4876:   vmovdqu %ymm0,0x1d0(%rdx,%rax,1)    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fed0d1e487f:   mov    0xa8(%rsp),%rdx
  0x00007fed0d1e4887:   vmovdqu 0x1f0(%rdx,%rax,1),%ymm0
  0x00007fed0d1e4890:   mov    0x30(%rsp),%rdx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4895:   vmovdqu %ymm0,0x1f0(%rdx,%rax,1)    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fed0d1e489e:   lea    0x200(%r8),%eax
  0x00007fed0d1e48a5:   cmp    %edi,%eax
  0x00007fed0d1e48a7:   jl     0x00007fed0d1e46c0           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B20: #	out( B23 B21 ) <- in( B19 )  Freq: 302.085
  0x00007fed0d1e48ad:   mov    0x3c0(%r15),%r13             ; ImmutableOopMap {[48]=Oop [168]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::copyMem_base@40 (line 11)
  0x00007fed0d1e48b4:   test   %eax,0x0(%r13)               ;   {poll}
  0x00007fed0d1e48b8:   cmp    %r9d,%eax
  0x00007fed0d1e48bb:   jge    0x00007fed0d1e48df
 ;; B21: #	out( B22 ) <- in( B20 )  Freq: 301.088
  0x00007fed0d1e48bd:   mov    %eax,%r8d
 ;; B22: #	out( B19 ) <- in( B17 B21 ) Loop( B22-B21 ) Freq: 302.085
  0x00007fed0d1e48c0:   mov    %r9d,%edi
  0x00007fed0d1e48c3:   sub    %r8d,%edi
  0x00007fed0d1e48c6:   xor    %edx,%edx
  0x00007fed0d1e48c8:   cmp    %r8d,%r9d
  0x00007fed0d1e48cb:   cmovl  %edx,%edi
  0x00007fed0d1e48ce:   cmp    $0x7d000,%edi
  0x00007fed0d1e48d4:   cmova  %ecx,%edi
  0x00007fed0d1e48d7:   add    %r8d,%edi
  0x00007fed0d1e48da:   jmpq   0x00007fed0d1e46c3
 ;; B23: #	out( B24 ) <- in( B20 )  Freq: 0.996685
  0x00007fed0d1e48df:   add    $0x1e0,%r8d
 ;; B24: #	out( B31 B25 ) <- in( B76 B23 )  Freq: 0.996687
  0x00007fed0d1e48e6:   cmp    %ebp,%eax
  0x00007fed0d1e48e8:   jge    0x00007fed0d1e494a
 ;; B25: #	out( B86 B26 ) <- in( B24 )  Freq: 0.498343
  0x00007fed0d1e48ee:   cmp    %r10d,%eax
  0x00007fed0d1e48f1:   jae    0x00007fed0d1e5220
 ;; B26: #	out( B87 B27 ) <- in( B25 )  Freq: 0.498343
  0x00007fed0d1e48f7:   mov    %eax,%r9d
  0x00007fed0d1e48fa:   nop
  0x00007fed0d1e48fb:   nop
  0x00007fed0d1e48fc:   nop
  0x00007fed0d1e48fd:   nop
  0x00007fed0d1e48fe:   nop
  0x00007fed0d1e48ff:   nop
  0x00007fed0d1e4900:   cmp    %r10d,%r9d
  0x00007fed0d1e4903:   jae    0x00007fed0d1e5234
 ;; B27: #	out( B88 B28 ) <- in( B26 )  Freq: 0.498342
  0x00007fed0d1e4909:   cmp    %r11d,%eax
  0x00007fed0d1e490c:   jae    0x00007fed0d1e5248
 ;; B28: #	out( B89 B29 ) <- in( B27 )  Freq: 0.498342
  0x00007fed0d1e4912:   cmp    %r11d,%r9d
  0x00007fed0d1e4915:   jae    0x00007fed0d1e525c
  0x00007fed0d1e491b:   nop                                 ;*getstatic SPECIES {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@16 (line 12)
 ;; B29: #	out( B32 B30 ) <- in( B28 B30 ) Loop( B29-B30 inner post of N494) Freq: 0.996682
  0x00007fed0d1e491c:   movslq %eax,%r10                    ;*i2l {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::arrayAddress@4 (line 3956)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@20 (line 3732)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
                                                            ; - test::copyMem_base@21 (line 12)
  0x00007fed0d1e491f:   mov    0xa8(%rsp),%r11
  0x00007fed0d1e4927:   vmovdqu 0x10(%r11,%r10,1),%ymm0
  0x00007fed0d1e492e:   mov    0x30(%rsp),%r11              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4933:   vmovdqu %ymm0,0x10(%r11,%r10,1)     ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
  0x00007fed0d1e493a:   lea    0x20(%rax),%r11d
  0x00007fed0d1e493e:   nop
  0x00007fed0d1e493f:   nop
  0x00007fed0d1e4940:   cmp    %ebp,%r11d
  0x00007fed0d1e4943:   jge    0x00007fed0d1e4950
 ;; B30: #	out( B29 ) <- in( B29 )  Freq: 0.498341
  0x00007fed0d1e4945:   mov    %r11d,%eax
  0x00007fed0d1e4948:   jmp    0x00007fed0d1e491c
 ;; B31: #	out( B32 ) <- in( B24 )  Freq: 0.498343
  0x00007fed0d1e494a:   mov    %eax,%r11d
  0x00007fed0d1e494d:   mov    %r8d,%eax
 ;; B32: #	out( B33 ) <- in( B29 B31 )  Freq: 0.996684
  0x00007fed0d1e4950:   mov    %ebx,%ebp
  0x00007fed0d1e4952:   sub    %eax,%ebp
  0x00007fed0d1e4954:   add    $0xffffffe0,%ebp
  0x00007fed0d1e4957:   mov    %r11d,0x38(%rsp)
 ;; B33: #	out( B90 B34 ) <- in( B32 B65 )  Freq: 0.999984
  0x00007fed0d1e495c:   nop
  0x00007fed0d1e495d:   nop
  0x00007fed0d1e495e:   nop
  0x00007fed0d1e495f:   nop
  0x00007fed0d1e4960:   test   %ebp,%ebp                    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4962:   jle    0x00007fed0d1e5270           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B34: #	out( B66 B35 ) <- in( B33 )  Freq: 0.999983
  0x00007fed0d1e4968:   mov    0x108(%r15),%r9
  0x00007fed0d1e496f:   mov    %r9,%r10
  0x00007fed0d1e4972:   add    $0x30,%r10
  0x00007fed0d1e4976:   mov    $0x1,%r11d
  0x00007fed0d1e497c:   shlx   %ebp,%r11d,%r11d
  0x00007fed0d1e4981:   dec    %r11d                        ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4984:   mov    %r11d,%ebp
  0x00007fed0d1e4987:   cmp    0x118(%r15),%r10
  0x00007fed0d1e498e:   jae    0x00007fed0d1e4e94
 ;; B35: #	out( B36 ) <- in( B34 )  Freq: 0.999883
  0x00007fed0d1e4994:   mov    %r10,0x108(%r15)
  0x00007fed0d1e499b:   prefetchw 0xc0(%r10)
  0x00007fed0d1e49a3:   movq   $0x1,(%r9)
  0x00007fed0d1e49aa:   prefetchw 0x100(%r10)
  0x00007fed0d1e49b2:   movl   $0x40200,0x8(%r9)            ;   {metadata({type array bool})}
  0x00007fed0d1e49ba:   prefetchw 0x140(%r10)
  0x00007fed0d1e49c2:   movl   $0x20,0xc(%r9)
  0x00007fed0d1e49ca:   prefetchw 0x180(%r10)
  0x00007fed0d1e49d2:   mov    %r12,0x10(%r9)
  0x00007fed0d1e49d6:   mov    %r12,0x18(%r9)
  0x00007fed0d1e49da:   mov    %r12,0x20(%r9)
  0x00007fed0d1e49de:   mov    %r12,0x28(%r9)               ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B36: #	out( B68 B37 ) <- in( B67 B35 )  Freq: 0.999983
  0x00007fed0d1e49e2:   mov    0x108(%r15),%rax
  0x00007fed0d1e49e9:   mov    %rax,%r10
  0x00007fed0d1e49ec:   add    $0x10,%r10                   ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e49f0:   movabs $0x101010101010101,%r11
  0x00007fed0d1e49fa:   pdep   %r11,%rbp,%r11
  0x00007fed0d1e49ff:   mov    %rbp,%r8
  0x00007fed0d1e4a02:   vpxor  %ymm0,%ymm0,%ymm0
  0x00007fed0d1e4a06:   vmovq  %r11,%xmm0
  0x00007fed0d1e4a0b:   vmovq  %r11,%xmm1
  0x00007fed0d1e4a10:   movabs $0x101010101010101,%r11
  0x00007fed0d1e4a1a:   shr    $0x8,%r8
  0x00007fed0d1e4a1e:   pdep   %r11,%r8,%r11
  0x00007fed0d1e4a23:   vpinsrq $0x1,%r11,%xmm0,%xmm0
  0x00007fed0d1e4a29:   vmovdqu %ymm0,%ymm1
  0x00007fed0d1e4a2d:   vpxor  %xmm0,%xmm0,%xmm0
  0x00007fed0d1e4a31:   movabs $0x101010101010101,%r11
  0x00007fed0d1e4a3b:   shr    $0x8,%r8
  0x00007fed0d1e4a3f:   pdep   %r11,%r8,%r11
  0x00007fed0d1e4a44:   vpinsrq $0x0,%r11,%xmm0,%xmm0
  0x00007fed0d1e4a4a:   movabs $0x101010101010101,%r11
  0x00007fed0d1e4a54:   shr    $0x8,%r8
  0x00007fed0d1e4a58:   pdep   %r11,%r8,%r11
  0x00007fed0d1e4a5d:   vpinsrq $0x1,%r11,%xmm0,%xmm0
  0x00007fed0d1e4a63:   vinsertf128 $0x1,%xmm0,%ymm1,%ymm1
  0x00007fed0d1e4a69:   vmovdqu %ymm1,0x10(%r9)
  0x00007fed0d1e4a6f:   cmp    0x118(%r15),%r10
  0x00007fed0d1e4a76:   jae    0x00007fed0d1e4f05           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B37: #	out( B38 ) <- in( B36 )  Freq: 0.999883
  0x00007fed0d1e4a7c:   mov    %r10,0x108(%r15)
  0x00007fed0d1e4a83:   prefetchw 0xc0(%r10)
  0x00007fed0d1e4a8b:   movq   $0x1,(%rax)
  0x00007fed0d1e4a92:   movl   $0xde750,0x8(%rax)           ;   {metadata('jdk/incubator/vector/Byte256Vector$Byte256Mask')}
 ;; B38: #	out( B45 B39 ) <- in( B69 B37 )  Freq: 0.999983
  0x00007fed0d1e4a99:   cmp    0x9c35510(%rip),%r12        # 0x00007fed16e19fb0
                                                            ;   {external_word}
  0x00007fed0d1e4aa0:   je     0x00007fed0d1e4aba
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007fed0d1e4aa6:   movabs $0x7fed169eedf8,%rdi         ;   {external_word}
  0x00007fed0d1e4ab0:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e4ab4:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e4ab9:   hlt    
  0x00007fed0d1e4aba:   test   %r9,%r9
  0x00007fed0d1e4abd:   jne    0x00007fed0d1e4ad7
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007fed0d1e4ac3:   movabs $0x7fed169eee38,%rdi         ;   {external_word}
  0x00007fed0d1e4acd:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e4ad1:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e4ad6:   hlt    
  0x00007fed0d1e4ad7:   mov    %r9,%r10
  0x00007fed0d1e4ada:   shr    $0x3,%r10
  0x00007fed0d1e4ade:   mov    %r10d,0xc(%rax)
  0x00007fed0d1e4ae2:   mov    %rax,0xa0(%rsp)              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4aea:   movslq 0x38(%rsp),%r10              ;*i2l {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@7 (line 2995)
                                                            ; - test::copyMem_base@73 (line 18)
  0x00007fed0d1e4aef:   lea    0x10(%r10),%rbp              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4af3:   vpxor  %ymm3,%ymm3,%ymm3
  0x00007fed0d1e4af7:   vpsubb %ymm1,%ymm3,%ymm3            ;*invokestatic fromBitsCoerced {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
  0x00007fed0d1e4afb:   mov    0x38(%rsp),%r8d
  0x00007fed0d1e4b00:   test   %r8d,%r8d
  0x00007fed0d1e4b03:   jl     0x00007fed0d1e4c27
 ;; B39: #	out( B45 B40 ) <- in( B38 )  Freq: 0.499992
  0x00007fed0d1e4b09:   add    $0xffffffffffffffe0,%rsi
  0x00007fed0d1e4b0d:   cmp    %rsi,%r10                    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4b10:   jg     0x00007fed0d1e4c27
 ;; B40: #	out( B70 B41 ) <- in( B39 )  Freq: 0.249996
  0x00007fed0d1e4b16:   mov    0x108(%r15),%r8
  0x00007fed0d1e4b1d:   mov    %r8,%r11
  0x00007fed0d1e4b20:   add    $0x30,%r11
  0x00007fed0d1e4b24:   cmp    0x118(%r15),%r11
  0x00007fed0d1e4b2b:   jae    0x00007fed0d1e4f85           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B41: #	out( B42 ) <- in( B40 )  Freq: 0.249971
  0x00007fed0d1e4b31:   mov    %r11,0x108(%r15)
  0x00007fed0d1e4b38:   prefetchw 0xc0(%r11)
  0x00007fed0d1e4b40:   movq   $0x1,(%r8)
  0x00007fed0d1e4b47:   prefetchw 0x100(%r11)
  0x00007fed0d1e4b4f:   movl   $0x40a00,0x8(%r8)            ;   {metadata({type array byte})}
  0x00007fed0d1e4b57:   prefetchw 0x140(%r11)
  0x00007fed0d1e4b5f:   movl   $0x20,0xc(%r8)
  0x00007fed0d1e4b67:   prefetchw 0x180(%r11)
  0x00007fed0d1e4b6f:   mov    %r12,0x10(%r8)
  0x00007fed0d1e4b73:   mov    %r12,0x18(%r8)
  0x00007fed0d1e4b77:   mov    %r12,0x20(%r8)
  0x00007fed0d1e4b7b:   mov    %r12,0x28(%r8)
 ;; B42: #	out( B72 B43 ) <- in( B71 B41 )  Freq: 0.249996
  0x00007fed0d1e4b7f:   mov    0xa8(%rsp),%r11              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4b87:   vmovdqu 0x10(%r11,%r10,1),%ymm0
  0x00007fed0d1e4b8e:   mov    0x108(%r15),%rax
  0x00007fed0d1e4b95:   mov    %rax,%r11
  0x00007fed0d1e4b98:   add    $0x10,%r11
  0x00007fed0d1e4b9c:   vpxor  %xmm2,%xmm2,%xmm2
  0x00007fed0d1e4ba0:   vpblendvb %ymm3,%ymm0,%ymm2,%ymm0
  0x00007fed0d1e4ba6:   vmovdqu %ymm0,0x10(%r8)
  0x00007fed0d1e4bac:   cmp    0x118(%r15),%r11
  0x00007fed0d1e4bb3:   jae    0x00007fed0d1e4fd4           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@40 (line 11)
 ;; B43: #	out( B44 ) <- in( B42 )  Freq: 0.249971
  0x00007fed0d1e4bb9:   mov    %r11,0x108(%r15)
  0x00007fed0d1e4bc0:   prefetchw 0xc0(%r11)
  0x00007fed0d1e4bc8:   movq   $0x1,(%rax)
  0x00007fed0d1e4bcf:   movl   $0xde0b8,0x8(%rax)           ;   {metadata('jdk/incubator/vector/Byte256Vector')}
 ;; B44: #	out( B50 ) <- in( B73 B43 )  Freq: 0.249996
  0x00007fed0d1e4bd6:   cmp    0x9c353d3(%rip),%r12        # 0x00007fed16e19fb0
                                                            ;   {external_word}
  0x00007fed0d1e4bdd:   je     0x00007fed0d1e4bf7
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007fed0d1e4be3:   movabs $0x7fed169eedf8,%rdi         ;   {external_word}
  0x00007fed0d1e4bed:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e4bf1:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e4bf6:   hlt    
  0x00007fed0d1e4bf7:   test   %r8,%r8
  0x00007fed0d1e4bfa:   jne    0x00007fed0d1e4c14
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007fed0d1e4c00:   movabs $0x7fed169eee38,%rdi         ;   {external_word}
  0x00007fed0d1e4c0a:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e4c0e:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e4c13:   hlt    
  0x00007fed0d1e4c14:   mov    %r8,%r11
  0x00007fed0d1e4c17:   shr    $0x3,%r11
  0x00007fed0d1e4c1b:   mov    %r11d,0xc(%rax)
  0x00007fed0d1e4c1f:   mov    %rax,%rbp
  0x00007fed0d1e4c22:   jmpq   0x00007fed0d1e4d40           ;*iconst_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@17 (line 2995)
                                                            ; - test::copyMem_base@73 (line 18)
 ;; B45: #	out( B105 B46 ) <- in( B39 B38 )  Freq: 0.749988
  0x00007fed0d1e4c27:   mov    %r10,0x88(%rsp)
  0x00007fed0d1e4c2f:   vmovdqu %ymm3,0x60(%rsp)
  0x00007fed0d1e4c35:   vmovdqu %ymm1,0x40(%rsp)
  0x00007fed0d1e4c3b:   mov    0x38(%rsp),%esi
  0x00007fed0d1e4c3f:   movabs $0x11f949928,%rdx            ;   {oop(a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928})}
  0x00007fed0d1e4c49:   mov    %rax,%rcx
  0x00007fed0d1e4c4c:   mov    $0x1,%r8d
  0x00007fed0d1e4c52:   mov    %ebx,%r9d
  0x00007fed0d1e4c55:   mov    %rax,0x80(%rsp)              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4c5d:   nop
  0x00007fed0d1e4c5e:   nop
  0x00007fed0d1e4c5f:   nop
  0x00007fed0d1e4c60:   vzeroupper 
  0x00007fed0d1e4c63:   callq  0x00007fed0d1e53df           ; ImmutableOopMap {[48]=Oop [128]=Oop [160]=Oop [168]=Oop }
                                                            ;*invokestatic checkMaskFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
                                                            ; - test::copyMem_base@73 (line 18)
                                                            ;   {static_call}
  0x00007fed0d1e4c68:   nopl   0x1000a58(%rax,%rax,1)       ;   {other}
 ;; B46: #	out( B106 B47 ) <- in( B45 )  Freq: 0.749973
  0x00007fed0d1e4c70:   movabs $0x11f949978,%rsi            ;   {oop(a 'java/lang/Class'{0x000000011f949978} = 'jdk/incubator/vector/Byte256Vector')}
  0x00007fed0d1e4c7a:   movabs $0x11f0001c0,%rcx            ;   {oop(a 'java/lang/Class'{0x000000011f0001c0} = byte)}
  0x00007fed0d1e4c84:   movabs $0x11f949a08,%rdx            ;   {oop(a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask')}
  0x00007fed0d1e4c8e:   mov    $0x20,%r8d
  0x00007fed0d1e4c94:   mov    0xa8(%rsp),%r9
  0x00007fed0d1e4c9c:   mov    %rbp,%rdi
  0x00007fed0d1e4c9f:   rex.W pushq 0x80(%rsp)
  0x00007fed0d1e4ca7:   rex.W popq (%rsp)
  0x00007fed0d1e4cab:   xor    %r11d,%r11d
  0x00007fed0d1e4cae:   mov    %r11d,0x8(%rsp)
  0x00007fed0d1e4cb3:   rex.W pushq 0xa8(%rsp)
  0x00007fed0d1e4cbb:   rex.W popq 0x10(%rsp)
  0x00007fed0d1e4cc0:   rex.W pushq 0x88(%rsp)
  0x00007fed0d1e4cc8:   rex.W popq 0x18(%rsp)
  0x00007fed0d1e4ccd:   movabs $0x11f949928,%r10            ;   {oop(a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928})}
  0x00007fed0d1e4cd7:   mov    %r10,0x20(%rsp)
  0x00007fed0d1e4cdc:   movabs $0x11facd530,%r10            ;   {oop(a 'jdk/incubator/vector/ByteVector$$Lambda+0x00000008000ecd68'{0x000000011facd530})}
  0x00007fed0d1e4ce6:   mov    %r10,0x28(%rsp)              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4ceb:   nop
  0x00007fed0d1e4cec:   vzeroupper 
  0x00007fed0d1e4cef:   callq  0x00007fed0d1e53d0           ; ImmutableOopMap {[48]=Oop [128]=Oop [160]=Oop }
                                                            ;*invokestatic loadMasked {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
                                                            ; - test::copyMem_base@73 (line 18)
                                                            ;   {static_call}
  0x00007fed0d1e4cf4:   nopl   0x2000ae4(%rax,%rax,1)       ;   {other}
 ;; B47: #	out( B93 B48 ) <- in( B46 )  Freq: 0.749957
  0x00007fed0d1e4cfc:   nop
  0x00007fed0d1e4cfd:   nop
  0x00007fed0d1e4cfe:   nop
  0x00007fed0d1e4cff:   nop
  0x00007fed0d1e4d00:   mov    0x8(%rax),%r10d              ; implicit exception: dispatches to 0x00007fed0d1e52f4
 ;; B48: #	out( B85 B49 ) <- in( B47 )  Freq: 0.749957
  0x00007fed0d1e4d04:   movabs $0x8000d3660,%r11            ;   {metadata('jdk/incubator/vector/ByteVector')}
  0x00007fed0d1e4d0e:   movabs $0x800000000,%r8
  0x00007fed0d1e4d18:   add    %r10,%r8
  0x00007fed0d1e4d1b:   mov    0x60(%r8),%r10
  0x00007fed0d1e4d1f:   nop
  0x00007fed0d1e4d20:   cmp    %r11,%r10
  0x00007fed0d1e4d23:   jne    0x00007fed0d1e51f4           ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
                                                            ; - test::copyMem_base@73 (line 18)
 ;; B49: #	out( B50 ) <- in( B48 )  Freq: 0.749956
  0x00007fed0d1e4d29:   mov    %rax,%rbp
  0x00007fed0d1e4d2c:   vmovdqu 0x40(%rsp),%ymm1
  0x00007fed0d1e4d32:   vmovdqu 0x60(%rsp),%ymm3
  0x00007fed0d1e4d38:   mov    0x88(%rsp),%r10
 ;; B50: #	out( B57 B51 ) <- in( B44 B49 )  Freq: 0.999952
  0x00007fed0d1e4d40:   vpcmpeqd %ymm0,%ymm0,%ymm0
  0x00007fed0d1e4d44:   vptest %ymm0,%ymm3
  0x00007fed0d1e4d49:   jae    0x00007fed0d1e4dc7
 ;; B51: #	out( B83 B52 ) <- in( B50 )  Freq: 0.899957
  0x00007fed0d1e4d4f:   mov    %rbp,%r8
  0x00007fed0d1e4d52:   mov    0x8(%rbp),%r10d
  0x00007fed0d1e4d56:   nop
  0x00007fed0d1e4d57:   nop
  0x00007fed0d1e4d58:   nop
  0x00007fed0d1e4d59:   nop
  0x00007fed0d1e4d5a:   nop
  0x00007fed0d1e4d5b:   nop
  0x00007fed0d1e4d5c:   nop
  0x00007fed0d1e4d5d:   nop
  0x00007fed0d1e4d5e:   nop
  0x00007fed0d1e4d5f:   nop
  0x00007fed0d1e4d60:   cmp    $0xde0b8,%r10d               ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {metadata('jdk/incubator/vector/Byte256Vector')}
  0x00007fed0d1e4d67:   jne    0x00007fed0d1e5188
 ;; B52: #	out( B92 B53 ) <- in( B51 )  Freq: 0.899956
  0x00007fed0d1e4d6d:   mov    0x30(%rsp),%r10
  0x00007fed0d1e4d72:   mov    0xc(%r10),%r11d              ; implicit exception: dispatches to 0x00007fed0d1e52c8
                                                            ;*invokevirtual length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@2 (line 3364)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B53: #	out( B84 B54 ) <- in( B52 )  Freq: 0.899955
  0x00007fed0d1e4d76:   add    $0xffffffe1,%r11d
  0x00007fed0d1e4d7a:   nop
  0x00007fed0d1e4d7b:   nop
  0x00007fed0d1e4d7c:   nop
  0x00007fed0d1e4d7d:   nop
  0x00007fed0d1e4d7e:   nop
  0x00007fed0d1e4d7f:   nop
  0x00007fed0d1e4d80:   test   %r11d,%r11d                  ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4d83:   jl     0x00007fed0d1e51bc
 ;; B54: #	out( B82 B55 ) <- in( B53 )  Freq: 0.899954
  0x00007fed0d1e4d89:   mov    0x38(%rsp),%r10d
  0x00007fed0d1e4d8e:   cmp    %r11d,%r10d
  0x00007fed0d1e4d91:   jae    0x00007fed0d1e514d
 ;; B55: #	out( B56 ) <- in( B54 )  Freq: 0.899953
  0x00007fed0d1e4d97:   mov    0xc(%r8),%r11d
  0x00007fed0d1e4d9b:   vmovdqu 0x10(%r12,%r11,8),%ymm0
  0x00007fed0d1e4da2:   mov    0x30(%rsp),%r11
  0x00007fed0d1e4da7:   vmovdqu %ymm0,0x10(%r11,%r10,1)     ;*return {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@56 (line 3413)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B56: #	out( N1 ) <- in( B64 B55 )  Freq: 0.999942
  0x00007fed0d1e4dae:   vzeroupper 
  0x00007fed0d1e4db1:   add    $0xc0,%rsp
  0x00007fed0d1e4db8:   pop    %rbp
  0x00007fed0d1e4db9:   cmp    0x3b8(%r15),%rsp             ;   {poll_return}
  0x00007fed0d1e4dc0:   ja     0x00007fed0d1e53af
  0x00007fed0d1e4dc6:   retq   
 ;; B57: #	out( B101 B58 ) <- in( B50 )  Freq: 0.0999952
  0x00007fed0d1e4dc7:   mov    %r10,0x60(%rsp)
  0x00007fed0d1e4dcc:   mov    %rbp,%rsi
  0x00007fed0d1e4dcf:   vmovdqu %ymm1,0x40(%rsp)            ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4dd5:   nop
  0x00007fed0d1e4dd6:   vzeroupper 
  0x00007fed0d1e4dd9:   movabs $0x8000de0b8,%rax
  0x00007fed0d1e4de3:   callq  0x00007fed0d1c2c20           ; ImmutableOopMap {rbp=Oop [48]=Oop [160]=Oop }
                                                            ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {virtual_call}
  0x00007fed0d1e4de8:   nopl   0x3000bd8(%rax,%rax,1)       ;   {other}
 ;; B58: #	out( B94 B59 ) <- in( B57 )  Freq: 0.0999932
  0x00007fed0d1e4df0:   mov    0xc(%rax),%r10d              ; implicit exception: dispatches to 0x00007fed0d1e5324
 ;; B59: #	out( B95 B60 ) <- in( B58 )  Freq: 0.0999931
  0x00007fed0d1e4df4:   mov    0x30(%rsp),%r11
  0x00007fed0d1e4df9:   nop
  0x00007fed0d1e4dfa:   nop
  0x00007fed0d1e4dfb:   nop
  0x00007fed0d1e4dfc:   nop
  0x00007fed0d1e4dfd:   nop
  0x00007fed0d1e4dfe:   nop
  0x00007fed0d1e4dff:   nop
  0x00007fed0d1e4e00:   mov    0xc(%r11),%r9d               ; implicit exception: dispatches to 0x00007fed0d1e5350
 ;; B60: #	out( B62 B61 ) <- in( B59 )  Freq: 0.099993
  0x00007fed0d1e4e04:   mov    0x38(%rsp),%r8d
  0x00007fed0d1e4e09:   test   %r8d,%r8d
  0x00007fed0d1e4e0c:   jl     0x00007fed0d1e4e25
 ;; B61: #	out( B63 B62 ) <- in( B60 )  Freq: 0.0499965
  0x00007fed0d1e4e0e:   movslq %r10d,%r10
  0x00007fed0d1e4e11:   movslq %r9d,%r11
  0x00007fed0d1e4e14:   sub    %r10,%r11
  0x00007fed0d1e4e17:   mov    0x60(%rsp),%r10
  0x00007fed0d1e4e1c:   nop
  0x00007fed0d1e4e1d:   nop
  0x00007fed0d1e4e1e:   nop
  0x00007fed0d1e4e1f:   nop
  0x00007fed0d1e4e20:   cmp    %r11,%r10                    ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4e23:   jle    0x00007fed0d1e4e4c           ;*iconst_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@33 (line 3408)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B62: #	out( B103 B63 ) <- in( B61 B60 )  Freq: 0.0749948
  0x00007fed0d1e4e25:   mov    0x38(%rsp),%esi
  0x00007fed0d1e4e29:   mov    %rax,%rdx
  0x00007fed0d1e4e2c:   mov    0xa0(%rsp),%rcx              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4e34:   mov    $0x1,%r8d
  0x00007fed0d1e4e3a:   nop
  0x00007fed0d1e4e3b:   nop
  0x00007fed0d1e4e3c:   vzeroupper 
  0x00007fed0d1e4e3f:   callq  0x00007fed0d1e53df           ; ImmutableOopMap {rbp=Oop [48]=Oop [160]=Oop }
                                                            ;*invokestatic checkMaskFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {static_call}
  0x00007fed0d1e4e44:   nopl   0x4000c34(%rax,%rax,1)       ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@49 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
 ;; B63: #	out( B102 B64 ) <- in( B62 B61 )  Freq: 0.0999915
  0x00007fed0d1e4e4c:   mov    %rbp,%rsi
  0x00007fed0d1e4e4f:   mov    0x30(%rsp),%rdx
  0x00007fed0d1e4e54:   mov    0x38(%rsp),%ecx
  0x00007fed0d1e4e58:   mov    0xa0(%rsp),%r8               ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e4e60:   nop
  0x00007fed0d1e4e61:   nop
  0x00007fed0d1e4e62:   vzeroupper 
  0x00007fed0d1e4e65:   movabs $0xffffffffffffffff,%rax
  0x00007fed0d1e4e6f:   callq  0x00007fed0d113d20           ; ImmutableOopMap {}
                                                            ;*invokevirtual intoArray0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {virtual_call}
  0x00007fed0d1e4e74:   nopl   0x5000c64(%rax,%rax,1)       ;   {other}
 ;; B64: #	out( B56 ) <- in( B63 )  Freq: 0.0999895
  0x00007fed0d1e4e7c:   nop
  0x00007fed0d1e4e7d:   nop
  0x00007fed0d1e4e7e:   nop
  0x00007fed0d1e4e7f:   nop
  0x00007fed0d1e4e80:   jmpq   0x00007fed0d1e4dae
 ;; B65: #	out( B33 ) <- in( B2 )  Freq: 0.00329937
  0x00007fed0d1e4e85:   mov    %ebx,%ebp
  0x00007fed0d1e4e87:   xor    %r10d,%r10d
  0x00007fed0d1e4e8a:   mov    %r10d,0x38(%rsp)
  0x00007fed0d1e4e8f:   jmpq   0x00007fed0d1e495c
 ;; B66: #	out( B99 B67 ) <- in( B34 )  Freq: 0.000100015
  0x00007fed0d1e4e94:   mov    %rax,-0x8(%rsp)
  0x00007fed0d1e4e99:   mov    0x38(%rsp),%eax
  0x00007fed0d1e4e9d:   mov    %eax,0x44(%rsp)
  0x00007fed0d1e4ea1:   mov    -0x8(%rsp),%rax
  0x00007fed0d1e4ea6:   mov    %rsi,0x48(%rsp)
  0x00007fed0d1e4eab:   mov    %ebx,0x40(%rsp)
  0x00007fed0d1e4eaf:   rex.W pushq 0x30(%rsp)
  0x00007fed0d1e4eb4:   rex.W popq 0x38(%rsp)
  0x00007fed0d1e4eb9:   movabs $0x800040200,%rsi            ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {metadata({type array bool})}
  0x00007fed0d1e4ec3:   mov    $0x20,%edx
  0x00007fed0d1e4ec8:   vzeroupper 
  0x00007fed0d1e4ecb:   callq  0x00007fed0d02b320           ; ImmutableOopMap {[56]=Oop [168]=Oop }
                                                            ;*invokestatic fromBitsCoerced {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
                                                            ;   {runtime_call _new_array_Java}
  0x00007fed0d1e4ed0:   nopl   0x6000cc0(%rax,%rax,1)       ;   {other}
 ;; B67: #	out( B36 ) <- in( B66 )  Freq: 0.000100013
  0x00007fed0d1e4ed8:   rex.W pushq 0x38(%rsp)
  0x00007fed0d1e4edd:   rex.W popq 0x30(%rsp)
  0x00007fed0d1e4ee2:   mov    0x40(%rsp),%ebx
  0x00007fed0d1e4ee6:   mov    0x48(%rsp),%rsi
  0x00007fed0d1e4eeb:   mov    %rax,-0x8(%rsp)
  0x00007fed0d1e4ef0:   mov    0x44(%rsp),%eax
  0x00007fed0d1e4ef4:   mov    %eax,0x38(%rsp)
  0x00007fed0d1e4ef8:   mov    -0x8(%rsp),%rax
  0x00007fed0d1e4efd:   mov    %rax,%r9
  0x00007fed0d1e4f00:   jmpq   0x00007fed0d1e49e2
 ;; B68: #	out( B98 B69 ) <- in( B36 )  Freq: 0.000100015
  0x00007fed0d1e4f05:   vmovdqu %ymm1,0x60(%rsp)
  0x00007fed0d1e4f0b:   mov    %r9,0x50(%rsp)
  0x00007fed0d1e4f10:   mov    %rax,-0x8(%rsp)
  0x00007fed0d1e4f15:   mov    0x38(%rsp),%eax
  0x00007fed0d1e4f19:   mov    %eax,0x44(%rsp)
  0x00007fed0d1e4f1d:   mov    -0x8(%rsp),%rax
  0x00007fed0d1e4f22:   mov    %rsi,0x48(%rsp)
  0x00007fed0d1e4f27:   mov    %ebx,0x40(%rsp)
  0x00007fed0d1e4f2b:   rex.W pushq 0x30(%rsp)
  0x00007fed0d1e4f30:   rex.W popq 0x38(%rsp)
  0x00007fed0d1e4f35:   movabs $0x8000de750,%rsi            ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {metadata('jdk/incubator/vector/Byte256Vector$Byte256Mask')}
  0x00007fed0d1e4f3f:   nop
  0x00007fed0d1e4f40:   vzeroupper 
  0x00007fed0d1e4f43:   callq  0x00007fed0d02b620           ; ImmutableOopMap {[56]=Oop [80]=Oop [168]=Oop }
                                                            ;*invokestatic fromBitsCoerced {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
                                                            ; - test::copyMem_base@61 (line 17)
                                                            ;   {runtime_call _new_instance_Java}
  0x00007fed0d1e4f48:   nopl   0x7000d38(%rax,%rax,1)       ;   {other}
 ;; B69: #	out( B38 ) <- in( B68 )  Freq: 0.000100013
  0x00007fed0d1e4f50:   rex.W pushq 0x38(%rsp)
  0x00007fed0d1e4f55:   rex.W popq 0x30(%rsp)
  0x00007fed0d1e4f5a:   mov    0x40(%rsp),%ebx
  0x00007fed0d1e4f5e:   mov    0x48(%rsp),%rsi
  0x00007fed0d1e4f63:   mov    %rax,-0x8(%rsp)
  0x00007fed0d1e4f68:   mov    0x44(%rsp),%eax
  0x00007fed0d1e4f6c:   mov    %eax,0x38(%rsp)
  0x00007fed0d1e4f70:   mov    -0x8(%rsp),%rax
  0x00007fed0d1e4f75:   mov    0x50(%rsp),%r9
  0x00007fed0d1e4f7a:   vmovdqu 0x60(%rsp),%ymm1
  0x00007fed0d1e4f80:   jmpq   0x00007fed0d1e4a99
 ;; B70: #	out( B96 B71 ) <- in( B40 )  Freq: 2.50037e-05
  0x00007fed0d1e4f85:   vmovdqu %ymm3,0x60(%rsp)
  0x00007fed0d1e4f8b:   vmovdqu %ymm1,0x40(%rsp)
  0x00007fed0d1e4f91:   movabs $0x800040a00,%rsi            ;   {metadata({type array byte})}
  0x00007fed0d1e4f9b:   mov    $0x20,%edx
  0x00007fed0d1e4fa0:   mov    %r10,0x98(%rsp)
  0x00007fed0d1e4fa8:   vzeroupper 
  0x00007fed0d1e4fab:   callq  0x00007fed0d02b320           ; ImmutableOopMap {[48]=Oop [160]=Oop [168]=Oop }
                                                            ;*invokestatic loadMasked {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
                                                            ; - test::copyMem_base@73 (line 18)
                                                            ;   {runtime_call _new_array_Java}
  0x00007fed0d1e4fb0:   nopl   0x8000da0(%rax,%rax,1)       ;   {other}
 ;; B71: #	out( B42 ) <- in( B70 )  Freq: 2.50032e-05
  0x00007fed0d1e4fb8:   vmovdqu 0x40(%rsp),%ymm1
  0x00007fed0d1e4fbe:   vmovdqu 0x60(%rsp),%ymm3
  0x00007fed0d1e4fc4:   mov    %rax,%r8
  0x00007fed0d1e4fc7:   mov    0x98(%rsp),%r10
  0x00007fed0d1e4fcf:   jmpq   0x00007fed0d1e4b7f
 ;; B72: #	out( B97 B73 ) <- in( B42 )  Freq: 2.50037e-05
  0x00007fed0d1e4fd4:   mov    %r8,0x58(%rsp)
  0x00007fed0d1e4fd9:   vmovdqu %ymm3,0x80(%rsp)
  0x00007fed0d1e4fe2:   mov    %rbp,%r11
  0x00007fed0d1e4fe5:   mov    %r10,0x50(%rsp)
  0x00007fed0d1e4fea:   rex.W pushq 0xa0(%rsp)
  0x00007fed0d1e4ff2:   rex.W popq 0x48(%rsp)
  0x00007fed0d1e4ff7:   vmovdqu %ymm1,0x60(%rsp)
  0x00007fed0d1e4ffd:   mov    %rax,-0x8(%rsp)
  0x00007fed0d1e5002:   mov    0x38(%rsp),%eax
  0x00007fed0d1e5006:   mov    %eax,0x40(%rsp)
  0x00007fed0d1e500a:   mov    -0x8(%rsp),%rax
  0x00007fed0d1e500f:   rex.W pushq 0x30(%rsp)
  0x00007fed0d1e5014:   rex.W popq 0x38(%rsp)
  0x00007fed0d1e5019:   movabs $0x8000de0b8,%rsi            ;   {metadata('jdk/incubator/vector/Byte256Vector')}
  0x00007fed0d1e5023:   mov    %r11,0xa0(%rsp)              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e502b:   nop
  0x00007fed0d1e502c:   vzeroupper 
  0x00007fed0d1e502f:   callq  0x00007fed0d02b620           ; ImmutableOopMap {[56]=Oop [72]=Oop [88]=Oop [168]=Oop }
                                                            ;*invokestatic loadMasked {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
                                                            ; - test::copyMem_base@73 (line 18)
                                                            ;   {runtime_call _new_instance_Java}
  0x00007fed0d1e5034:   nopl   0x9000e24(%rax,%rax,1)       ;   {other}
 ;; B73: #	out( B44 ) <- in( B72 )  Freq: 2.50032e-05
  0x00007fed0d1e503c:   rex.W pushq 0x38(%rsp)
  0x00007fed0d1e5041:   rex.W popq 0x30(%rsp)
  0x00007fed0d1e5046:   mov    %rax,-0x8(%rsp)
  0x00007fed0d1e504b:   mov    0x40(%rsp),%eax
  0x00007fed0d1e504f:   mov    %eax,0x38(%rsp)
  0x00007fed0d1e5053:   mov    -0x8(%rsp),%rax
  0x00007fed0d1e5058:   vmovdqu 0x60(%rsp),%ymm1
  0x00007fed0d1e505e:   rex.W pushq 0x48(%rsp)
  0x00007fed0d1e5063:   rex.W popq 0xa0(%rsp)
  0x00007fed0d1e506b:   mov    0x50(%rsp),%r10
  0x00007fed0d1e5070:   vmovdqu 0x80(%rsp),%ymm3
  0x00007fed0d1e5079:   mov    0x58(%rsp),%r8
  0x00007fed0d1e507e:   nop
  0x00007fed0d1e507f:   nop
  0x00007fed0d1e5080:   jmpq   0x00007fed0d1e4bd6
 ;; B74: #	out( N1 ) <- in( B7 B3 B4 B5 B9 B8 B6 )  Freq: 7.04305e-06
  0x00007fed0d1e5085:   mov    $0xffffff76,%esi             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e508a:   nop
  0x00007fed0d1e508b:   nop
  0x00007fed0d1e508c:   vzeroupper 
  0x00007fed0d1e508f:   callq  0x00007fed0d11f020           ; ImmutableOopMap {[48]=Oop [168]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::copyMem_base@13 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1e5094:   nopl   0xa000e84(%rax,%rax,1)       ;   {other}
  0x00007fed0d1e509c:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1e50a6:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e50aa:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e50af:   hlt    
 ;; B75: #	out( N1 ) <- in( B10 )  Freq: 1.00993e-06
  0x00007fed0d1e50b0:   mov    $0xffffff6e,%esi             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e50b5:   nop
  0x00007fed0d1e50b6:   nop
  0x00007fed0d1e50b7:   nop
  0x00007fed0d1e50b8:   vzeroupper 
  0x00007fed0d1e50bb:   callq  0x00007fed0d11f020           ; ImmutableOopMap {[48]=Oop [168]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::copyMem_base@13 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1e50c0:   nopl   0xb000eb0(%rax,%rax,1)       ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
  0x00007fed0d1e50c8:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1e50d2:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e50d6:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e50db:   hlt                                 ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - test::copyMem_base@26 (line 13)
 ;; B76: #	out( B24 ) <- in( B11 )  Freq: 1.00993e-06
  0x00007fed0d1e50dc:   mov    $0x20,%eax
  0x00007fed0d1e50e1:   xor    %r8d,%r8d
  0x00007fed0d1e50e4:   jmpq   0x00007fed0d1e48e6
 ;; B77: #	out( N1 ) <- in( B12 )  Freq: 9.96691e-07
  0x00007fed0d1e50e9:   movabs $0x7fed169e3480,%rdi         ;   {external_word}
  0x00007fed0d1e50f3:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e50f7:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e50fc:   hlt    
 ;; B78: #	out( N1 ) <- in( B13 )  Freq: 9.9669e-07
  0x00007fed0d1e50fd:   movabs $0x7fed169e3480,%rdi         ;   {external_word}
  0x00007fed0d1e5107:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e510b:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e5110:   hlt    
 ;; B79: #	out( N1 ) <- in( B14 )  Freq: 9.96689e-07
  0x00007fed0d1e5111:   movabs $0x7fed169e3480,%rdi         ;   {external_word}
  0x00007fed0d1e511b:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e511f:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e5124:   hlt    
 ;; B80: #	out( N1 ) <- in( B15 )  Freq: 9.96688e-07
  0x00007fed0d1e5125:   movabs $0x7fed169e3480,%rdi         ;   {external_word}
  0x00007fed0d1e512f:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e5133:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e5138:   hlt    
 ;; B81: #	out( N1 ) <- in( B16 )  Freq: 9.96687e-07
  0x00007fed0d1e5139:   movabs $0x7fed169e3480,%rdi         ;   {external_word}
  0x00007fed0d1e5143:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e5147:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e514c:   hlt    
 ;; B82: #	out( N1 ) <- in( B54 )  Freq: 9.11904e-07
  0x00007fed0d1e514d:   mov    $0xffffffe4,%esi
  0x00007fed0d1e5152:   mov    0x30(%rsp),%rbp
  0x00007fed0d1e5157:   mov    %r8,0x30(%rsp)
  0x00007fed0d1e515c:   mov    %r11d,0x3c(%rsp)             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e5161:   nop
  0x00007fed0d1e5162:   nop
  0x00007fed0d1e5163:   nop
  0x00007fed0d1e5164:   vzeroupper 
  0x00007fed0d1e5167:   callq  0x00007fed0d11f020           ; ImmutableOopMap {rbp=Oop [48]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1e516c:   nopl   0xc000f5c(%rax,%rax,1)       ;   {other}
  0x00007fed0d1e5174:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1e517e:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e5182:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e5187:   hlt    
 ;; B83: #	out( N1 ) <- in( B51 )  Freq: 8.99957e-07
  0x00007fed0d1e5188:   mov    $0xffffffde,%esi
  0x00007fed0d1e518d:   mov    0x30(%rsp),%rbp
  0x00007fed0d1e5192:   mov    %r8,0x40(%rsp)               ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e5197:   nop
  0x00007fed0d1e5198:   vzeroupper 
  0x00007fed0d1e519b:   callq  0x00007fed0d11f020           ; ImmutableOopMap {rbp=Oop [64]=Oop }
                                                            ;*invokevirtual length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@2 (line 3364)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1e51a0:   nopl   0xd000f90(%rax,%rax,1)       ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
  0x00007fed0d1e51a8:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1e51b2:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e51b6:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e51bb:   hlt    
 ;; B84: #	out( N1 ) <- in( B53 )  Freq: 8.99955e-07
  0x00007fed0d1e51bc:   mov    $0xffffffcc,%esi
  0x00007fed0d1e51c1:   mov    0x30(%rsp),%rbp
  0x00007fed0d1e51c6:   mov    %r8,0x30(%rsp)
  0x00007fed0d1e51cb:   mov    %r11d,0x3c(%rsp)
  0x00007fed0d1e51d0:   vzeroupper 
  0x00007fed0d1e51d3:   callq  0x00007fed0d11f020           ; ImmutableOopMap {rbp=Oop [48]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 385)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1e51d8:   nopl   0xe000fc8(%rax,%rax,1)       ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
  0x00007fed0d1e51e0:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1e51ea:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e51ee:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e51f3:   hlt    
 ;; B85: #	out( N1 ) <- in( B48 )  Freq: 7.49957e-07
  0x00007fed0d1e51f4:   mov    $0xffffffde,%esi
  0x00007fed0d1e51f9:   mov    %rax,%rbp
  0x00007fed0d1e51fc:   vzeroupper 
  0x00007fed0d1e51ff:   callq  0x00007fed0d11f020           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
                                                            ; - test::copyMem_base@73 (line 18)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1e5204:   nopl   0xf000ff4(%rax,%rax,1)       ;   {other}
  0x00007fed0d1e520c:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1e5216:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e521a:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e521f:   hlt    
 ;; B86: #	out( N1 ) <- in( B25 )  Freq: 5.04961e-07
  0x00007fed0d1e5220:   movabs $0x7fed169e3480,%rdi         ;   {external_word}
  0x00007fed0d1e522a:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e522e:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e5233:   hlt    
 ;; B87: #	out( N1 ) <- in( B26 )  Freq: 5.0496e-07
  0x00007fed0d1e5234:   movabs $0x7fed169e3480,%rdi         ;   {external_word}
  0x00007fed0d1e523e:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e5242:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e5247:   hlt    
 ;; B88: #	out( N1 ) <- in( B27 )  Freq: 5.0496e-07
  0x00007fed0d1e5248:   movabs $0x7fed169e3480,%rdi         ;   {external_word}
  0x00007fed0d1e5252:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e5256:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e525b:   hlt    
 ;; B89: #	out( N1 ) <- in( B28 )  Freq: 5.04959e-07
  0x00007fed0d1e525c:   movabs $0x7fed169e3480,%rdi         ;   {external_word}
  0x00007fed0d1e5266:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e526a:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e526f:   hlt    
 ;; B90: #	out( N1 ) <- in( B33 )  Freq: 4.99992e-07
  0x00007fed0d1e5270:   mov    $0xffffff45,%esi             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e5275:   nop
  0x00007fed0d1e5276:   nop
  0x00007fed0d1e5277:   nop
  0x00007fed0d1e5278:   vzeroupper 
  0x00007fed0d1e527b:   callq  0x00007fed0d11f020           ; ImmutableOopMap {}
                                                            ;*ifle {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) test::copyMem_base@49 (line 16)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1e5280:   nopl   0x10001070(%rax,%rax,1)      ;   {other}
  0x00007fed0d1e5288:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1e5292:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e5296:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e529b:   hlt    
 ;; B91: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
  0x00007fed0d1e529c:   mov    $0xfffffff6,%esi             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e52a1:   nop
  0x00007fed0d1e52a2:   nop
  0x00007fed0d1e52a3:   nop
  0x00007fed0d1e52a4:   vzeroupper 
  0x00007fed0d1e52a7:   callq  0x00007fed0d11f020           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@7 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1e52ac:   nopl   0x1100109c(%rax,%rax,1)      ;   {other}
  0x00007fed0d1e52b4:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1e52be:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e52c2:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e52c7:   hlt    
 ;; B92: #	out( N1 ) <- in( B52 )  Freq: 9.11906e-07
  0x00007fed0d1e52c8:   mov    $0xfffffff6,%esi             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e52cd:   nop
  0x00007fed0d1e52ce:   nop
  0x00007fed0d1e52cf:   nop
  0x00007fed0d1e52d0:   vzeroupper 
  0x00007fed0d1e52d3:   callq  0x00007fed0d11f020           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@6 (line 3364)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1e52d8:   nopl   0x120010c8(%rax,%rax,1)      ;   {other}
  0x00007fed0d1e52e0:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1e52ea:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e52ee:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e52f3:   hlt    
 ;; B93: #	out( N1 ) <- in( B47 )  Freq: 7.59916e-07
  0x00007fed0d1e52f4:   mov    $0xfffffff4,%esi
  0x00007fed0d1e52f9:   mov    0x30(%rsp),%rbp              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e52fe:   nop
  0x00007fed0d1e52ff:   nop
  0x00007fed0d1e5300:   vzeroupper 
  0x00007fed0d1e5303:   callq  0x00007fed0d11f020           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
                                                            ; - jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
                                                            ; - test::copyMem_base@73 (line 18)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1e5308:   nopl   0x130010f8(%rax,%rax,1)      ;   {other}
  0x00007fed0d1e5310:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1e531a:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e531e:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e5323:   hlt    
 ;; B94: #	out( N1 ) <- in( B58 )  Freq: 1.01321e-07
  0x00007fed0d1e5324:   mov    $0xfffffff6,%esi             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e5329:   nop
  0x00007fed0d1e532a:   nop
  0x00007fed0d1e532b:   nop
  0x00007fed0d1e532c:   vzeroupper 
  0x00007fed0d1e532f:   callq  0x00007fed0d11f020           ; ImmutableOopMap {}
                                                            ;*invokevirtual length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@26 (line 3408)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1e5334:   nopl   0x14001124(%rax,%rax,1)      ;   {other}
  0x00007fed0d1e533c:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1e5346:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e534a:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e534f:   hlt    
 ;; B95: #	out( N1 ) <- in( B59 )  Freq: 1.01321e-07
  0x00007fed0d1e5350:   mov    $0xfffffff6,%esi             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
  0x00007fed0d1e5355:   nop
  0x00007fed0d1e5356:   nop
  0x00007fed0d1e5357:   nop
  0x00007fed0d1e5358:   vzeroupper 
  0x00007fed0d1e535b:   callq  0x00007fed0d11f020           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@31 (line 3408)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fed0d1e5360:   nopl   0x15001150(%rax,%rax,1)      ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {other}
  0x00007fed0d1e5368:   movabs $0x7fed1696b4a0,%rdi         ;   {external_word}
  0x00007fed0d1e5372:   and    $0xfffffffffffffff0,%rsp
  0x00007fed0d1e5376:   callq  0x00007fed1607caf0           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fed0d1e537b:   hlt    
 ;; B96: #	out( B107 ) <- in( B70 )  Freq: 2.50037e-10
  0x00007fed0d1e537c:   nop
  0x00007fed0d1e537d:   nop
  0x00007fed0d1e537e:   nop
  0x00007fed0d1e537f:   nop
  0x00007fed0d1e5380:   jmpq   0x00007fed0d1e539c
 ;; B97: #	out( B107 ) <- in( B72 )  Freq: 2.50037e-10
  0x00007fed0d1e5385:   jmpq   0x00007fed0d1e539c
 ;; B98: #	out( B100 ) <- in( B68 )  Freq: 1.00015e-09
  0x00007fed0d1e538a:   jmp    0x00007fed0d1e538c
 ;; B99: #	out( B100 ) <- in( B66 )  Freq: 1.00015e-09
 ;; B100: #	out( B108 ) <- in( B99 B98 )  Freq: 2.0003e-09
  0x00007fed0d1e538c:   mov    %rax,%rsi
  0x00007fed0d1e538f:   jmp    0x00007fed0d1e539f           ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B101: #	out( B104 ) <- in( B57 )  Freq: 9.99952e-07
  0x00007fed0d1e5391:   jmp    0x00007fed0d1e5395           ;*invokevirtual intoArray0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B102: #	out( B104 ) <- in( B63 )  Freq: 9.99915e-07
  0x00007fed0d1e5393:   jmp    0x00007fed0d1e5395           ;*invokestatic test {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Byte256Vector$Byte256Mask::allTrue@23 (line 803)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@1 (line 3404)
                                                            ; - test::copyMem_base@80 (line 19)
 ;; B103: #	out( B104 ) <- in( B62 )  Freq: 7.49947e-07
 ;; B104: #	out( B108 ) <- in( B101 B102 B103 )  Freq: 2.74981e-06
  0x00007fed0d1e5395:   mov    %rax,%rsi
  0x00007fed0d1e5398:   jmp    0x00007fed0d1e539f
 ;; B105: #	out( B107 ) <- in( B45 )  Freq: 7.49988e-06
  0x00007fed0d1e539a:   jmp    0x00007fed0d1e539c           ;*invokestatic checkMaskFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
                                                            ; - test::copyMem_base@73 (line 18)
 ;; B106: #	out( B107 ) <- in( B46 )  Freq: 7.49972e-06
 ;; B107: #	out( B108 ) <- in( B96 B97 B105 B106 )  Freq: 1.50001e-05
  0x00007fed0d1e539c:   mov    %rax,%rsi                    ;*invokevirtual intoArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - test::copyMem_base@26 (line 13)
 ;; B108: #	out( N1 ) <- in( B107 B104 B100 )  Freq: 1.77519e-05
  0x00007fed0d1e539f:   vzeroupper 
  0x00007fed0d1e53a2:   add    $0xc0,%rsp
  0x00007fed0d1e53a9:   pop    %rbp
  0x00007fed0d1e53aa:   jmpq   0x00007fed0d12b2a0           ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
                                                            ; - jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
                                                            ; - test::copyMem_base@80 (line 19)
                                                            ;   {runtime_call _rethrow_Java}
  0x00007fed0d1e53af:   movabs $0x7fed0d1e4db9,%r10         ;   {internal_word}
  0x00007fed0d1e53b9:   mov    %r10,0x3d0(%r15)
  0x00007fed0d1e53c0:   jmpq   0x00007fed0d11e1a0           ;   {runtime_call SafepointBlob}
  0x00007fed0d1e53c5:   callq  Stub::nmethod_entry_barrier  ;   {runtime_call StubRoutines (final stubs)}
  0x00007fed0d1e53ca:   jmpq   0x00007fed0d1e459e
  0x00007fed0d1e53cf:   hlt    
[Stub Code]
  0x00007fed0d1e53d0:   movabs $0x7fecc8178da0,%rbx         ;   {no_reloc}
  0x00007fed0d1e53da:   jmpq   0x00007fed0d19803b           ;   {runtime_call I2C/C2I adapters}
  0x00007fed0d1e53df:   movabs $0x7fecc8787298,%rbx         ;   {static_stub}
  0x00007fed0d1e53e9:   jmpq   0x00007fed0d195b7c           ;   {runtime_call I2C/C2I adapters}
[Exception Handler]
  0x00007fed0d1e53ee:   jmpq   0x00007fed0d07e520           ;   {runtime_call ExceptionBlob}
[Deopt Handler Code]
  0x00007fed0d1e53f3:   callq  0x00007fed0d1e53f8
  0x00007fed0d1e53f8:   subq   $0x5,(%rsp)
  0x00007fed0d1e53fd:   jmpq   0x00007fed0d11d040           ;   {runtime_call DeoptimizationBlob}
  0x00007fed0d1e5402:   hlt    
  0x00007fed0d1e5403:   hlt    
  0x00007fed0d1e5404:   hlt    
  0x00007fed0d1e5405:   hlt    
  0x00007fed0d1e5406:   hlt    
  0x00007fed0d1e5407:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007fed0d1e5408:   0x000000011f949928 a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
  0x00007fed0d1e5410:   0x000000011f949a08 a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
  0x00007fed0d1e5418:   0x000000011f0001c0 a 'java/lang/Class'{0x000000011f0001c0} = byte
  0x00007fed0d1e5420:   0x000000011f977030 a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977030}
  0x00007fed0d1e5428:   0x000000011f949978 a 'java/lang/Class'{0x000000011f949978} = 'jdk/incubator/vector/Byte256Vector'
  0x00007fed0d1e5430:   0x000000011facd530 a 'jdk/incubator/vector/ByteVector$$Lambda+0x00000008000ecd68'{0x000000011facd530}
  0x00007fed0d1e5438:   0x000000011f81fe28 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f81fe28}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007fed0d1e5440:   0x00007fecc8603650 {method} {0x00007fecc8603650} 'copyMem_base' '([B[B)V' in 'test'
  0x00007fed0d1e5448:   0x00007fecc87852d8 {method} {0x00007fecc87852d8} 'intoArray' '([BILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/ByteVector'
  0x00007fed0d1e5450:   0x00007fecc8785190 {method} {0x00007fecc8785190} 'intoArray' '([BI)V' in 'jdk/incubator/vector/ByteVector'
  0x00007fed0d1e5458:   0x00007fecc8784668 {method} {0x00007fecc8784668} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[BILjdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
  0x00007fed0d1e5460:   0x00007fecc8784520 {method} {0x00007fecc8784520} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
  0x00007fed0d1e5468:   0x00007fecc86a2de8 {method} {0x00007fecc86a2de8} 'fromArray0' '([BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/Byte256Vector'
  0x00007fed0d1e5470:   0x00007fecc8785eb8 {method} {0x00007fecc8785eb8} 'fromArray0Template' '([BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
  0x00007fed0d1e5478:   0x00007fecc87876d8 {method} {0x00007fecc87876d8} 'arrayAddress' '([BI)J' in 'jdk/incubator/vector/ByteVector'
  0x00007fed0d1e5480:   0x0000000800040200 {type array bool}
  0x00007fed0d1e5488:   0x00000008000de750 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
  0x00007fed0d1e5490:   0x00007fecc8681ba8 {method} {0x00007fecc8681ba8} 'fromLong' '(Ljdk/incubator/vector/VectorSpecies;J)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
  0x00007fed0d1e5498:   0x0000000800040a00 {type array byte}
  0x00007fed0d1e54a0:   0x00000008000de0b8 'jdk/incubator/vector/Byte256Vector'
  0x00007fed0d1e54a8:   0x00007fecc86d4780 {method} {0x00007fecc86d4780} 'indexInRange' '(JJJ)Z' in 'jdk/incubator/vector/VectorIntrinsics'
  0x00007fed0d1e54b0:   0x00007fecc86a2f00 {method} {0x00007fecc86a2f00} 'fromArray0' '([BILjdk/incubator/vector/VectorMask;I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/Byte256Vector'
  0x00007fed0d1e54b8:   0x00007fecc87860c8 {method} {0x00007fecc87860c8} 'fromArray0Template' '(Ljava/lang/Class;[BILjdk/incubator/vector/VectorMask;I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
  0x00007fed0d1e54c0:   0x00007fecc86d48b8 {method} {0x00007fecc86d48b8} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
  0x00007fed0d1e54c8:   0x00007fecc81a0cb0 {method} {0x00007fecc81a0cb0} 'checkIndex' '(II)I' in 'java/util/Objects'
  0x00007fed0d1e54d0:   0x00007fecc86aa590 {method} {0x00007fecc86aa590} 'allTrue' '()Z' in 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
  0x00007fed0d1e54d8:   0x00000008000d9bc0 'jdk/incubator/vector/AbstractSpecies'
  0x00007fed0d1e54e0:   0x00000008000d9fb0 'jdk/incubator/vector/ByteVector$ByteSpecies'
  0x00007fed0d1e54e8:   0x00007fecc87e3cd0 {method} {0x00007fecc87e3cd0} 'loopBound' '(I)I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007fed0d1e54f0:   0x00000008000d97a8 'jdk/incubator/vector/VectorSpecies'
  0x00007fed0d1e54f8:   0x00007fecc87e1730 {method} {0x00007fecc87e1730} 'loopBound' '(I)I' in 'jdk/incubator/vector/VectorSpecies'
  0x00007fed0d1e5500:   0x00007fecc87e30b0 {method} {0x00007fecc87e30b0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007fed0d1e5508:   0x00007fecc87e1538 {method} {0x00007fecc87e1538} 'length' '()I' in 'jdk/incubator/vector/VectorSpecies'
  0x00007fed0d1e5510:   0x00000008000dbee0 'jdk/incubator/vector/VectorMask'
  0x00007fed0d1e5518:   0x00007fecc8681fb0 {method} {0x00007fecc8681fb0} 'allTrue' '()Z' in 'jdk/incubator/vector/VectorMask'
  0x00007fed0d1e5520:   0x00007fecc87fec58 {method} {0x00007fecc87fec58} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
  0x00007fed0d1e5528:   0x00007fecc86829e0 {method} {0x00007fecc86829e0} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007fed0d1e457f offset=ffffffff bits=0):
PcDesc(pc=0x00007fed0d1e459e offset=1e bits=0):
   test::copyMem_base@-1 (line 10)
PcDesc(pc=0x00007fed0d1e45ae offset=2e bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e45b1 offset=31 bits=0):
   jdk.incubator.vector.ByteVector::fromArray@16 (line 2995)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fed0d1e4637 offset=b7 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e463c offset=bc bits=0):
   jdk.incubator.vector.ByteVector::fromArray0Template@32 (line 3730)
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
   test::copyMem_base@21 (line 12)
PcDesc(pc=0x00007fed0d1e4641 offset=c1 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4647 offset=c7 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e46c3 offset=143 bits=0):
   test::copyMem_base@16 (line 12)
PcDesc(pc=0x00007fed0d1e46d9 offset=159 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e46df offset=15f bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e46f2 offset=172 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e46f8 offset=178 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e470b offset=18b bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4711 offset=191 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e4724 offset=1a4 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e472a offset=1aa bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e4740 offset=1c0 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4749 offset=1c9 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e475f offset=1df bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4768 offset=1e8 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e477e offset=1fe bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4787 offset=207 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e479d offset=21d bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e47a6 offset=226 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e47bc offset=23c bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e47c5 offset=245 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e47db offset=25b bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e47e4 offset=264 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e47fa offset=27a bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4803 offset=283 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e4819 offset=299 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4822 offset=2a2 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e4838 offset=2b8 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4841 offset=2c1 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e4857 offset=2d7 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4860 offset=2e0 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e4876 offset=2f6 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e487f offset=2ff bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e4895 offset=315 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e489e offset=31e bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e48ad offset=32d bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fed0d1e48b4 offset=334 bits=1):
   test::copyMem_base@40 (line 11)  reexecute=true
   Locals
    - l0: stack[48],oop
    - l1: stack[168],oop
    - l2: reg rax [0],int
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1e491c offset=39c bits=0):
   test::copyMem_base@16 (line 12)
PcDesc(pc=0x00007fed0d1e491f offset=39f bits=0):
   jdk.incubator.vector.ByteVector::arrayAddress@4 (line 3956)
   jdk.incubator.vector.ByteVector::fromArray0Template@20 (line 3732)
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
   test::copyMem_base@21 (line 12)
PcDesc(pc=0x00007fed0d1e4933 offset=3b3 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e493a offset=3ba bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e4962 offset=3e2 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4968 offset=3e8 bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fed0d1e4984 offset=404 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e49e2 offset=462 bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fed0d1e49f0 offset=470 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4a7c offset=4fc bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fed0d1e4aea offset=56a bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4aef offset=56f bits=0):
   jdk.incubator.vector.ByteVector::fromArray@7 (line 2995)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fed0d1e4af3 offset=573 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4afb offset=57b bits=0):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
   test::copyMem_base@61 (line 17)
PcDesc(pc=0x00007fed0d1e4b10 offset=590 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4b31 offset=5b1 bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fed0d1e4b87 offset=607 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4bb9 offset=639 bits=0):
   test::copyMem_base@40 (line 11)
PcDesc(pc=0x00007fed0d1e4c27 offset=6a7 bits=0):
   jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
   jdk.incubator.vector.ByteVector::fromArray@17 (line 2995)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fed0d1e4c5d offset=6dd bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4c68 offset=6e8 bits=0):
   jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
   Locals
    - l0: empty
    - l1: stack[168],oop
    - l2: stack[56]
    - l3: stack[160],oop
    - l4: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[48],oop
    - l1: empty
    - l2: stack[56]
    - l3: empty
    - l4: stack[128],oop
PcDesc(pc=0x00007fed0d1e4ceb offset=76b bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4cf4 offset=774 bits=4):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[48],oop
    - l1: empty
    - l2: stack[56]
    - l3: empty
    - l4: stack[128],oop
PcDesc(pc=0x00007fed0d1e4d29 offset=7a9 bits=0):
   jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fed0d1e4d67 offset=7e7 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4d76 offset=7f6 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@2 (line 3364)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4d83 offset=803 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4dae offset=82e bits=0):
   jdk.incubator.vector.ByteVector::intoArray@56 (line 3413)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4dd5 offset=855 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4de8 offset=868 bits=4):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[48],oop
    - l2: stack[56]
    - l3: obj[530]
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 530: jdk.incubator.vector.Byte256Vector$Byte256Mask stack[64],vector
PcDesc(pc=0x00007fed0d1e4e23 offset=8a3 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4e25 offset=8a5 bits=0):
   jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
   jdk.incubator.vector.ByteVector::intoArray@33 (line 3408)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4e34 offset=8b4 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4e44 offset=8c4 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[48],oop
    - l2: stack[56]
    - l3: stack[160],oop
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1e4e4c offset=8cc bits=0):
   jdk.incubator.vector.ByteVector::intoArray@49 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4e60 offset=8e0 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4e74 offset=8f4 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1e4ec3 offset=943 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4ed0 offset=950 bits=5):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @1: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @2: 32
    - @3: 0
    - @4: reg rbp [10],long
    - @5: 1
    - @6: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - @7: a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977030}
   test::copyMem_base@61 (line 17)
   Locals
    - l0: stack[56],oop
    - l1: stack[168],oop
    - l2: stack[68]
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1e4f3f offset=9bf bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e4f48 offset=9c8 bits=5):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @1: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @2: 32
    - @3: 0
    - @4: reg rbp [10],long
    - @5: 1
    - @6: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - @7: a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977030}
   test::copyMem_base@61 (line 17)
   Locals
    - l0: stack[56],oop
    - l1: stack[168],oop
    - l2: stack[68]
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1e4fb0 offset=a30 bits=5):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949978} = 'jdk/incubator/vector/Byte256Vector'
    - @1: a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @2: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @3: 32
    - @4: stack[168],oop
    - @5: 0
    - @6: reg rbp [10],long
    - @7: obj[427]
    - @8: 1
    - @9: stack[168],oop
    - @10: 0
    - @11: stack[152],long
    - @12: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - @13: a 'jdk/incubator/vector/ByteVector$$Lambda+0x00000008000ecd68'{0x000000011facd530}
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[48],oop
    - l1: empty
    - l2: stack[56]
    - l3: empty
    - l4: obj[427]
   Objects
    - 427: jdk.incubator.vector.Byte256Vector$Byte256Mask stack[64],vector
PcDesc(pc=0x00007fed0d1e502b offset=aab bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e5034 offset=ab4 bits=5):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949978} = 'jdk/incubator/vector/Byte256Vector'
    - @1: a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @2: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @3: 32
    - @4: stack[168],oop
    - @5: 0
    - @6: stack[160],long
    - @7: obj[480]
    - @8: 1
    - @9: stack[168],oop
    - @10: 0
    - @11: stack[80],long
    - @12: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - @13: a 'jdk/incubator/vector/ByteVector$$Lambda+0x00000008000ecd68'{0x000000011facd530}
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[56],oop
    - l1: empty
    - l2: stack[64]
    - l3: empty
    - l4: obj[480]
   Objects
    - 480: jdk.incubator.vector.Byte256Vector$Byte256Mask stack[96],vector
PcDesc(pc=0x00007fed0d1e508a offset=b0a bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e5094 offset=b14 bits=1):
   test::copyMem_base@13 (line 11)  reexecute=true
   Locals
    - l0: stack[48],oop
    - l1: stack[168],oop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
PcDesc(pc=0x00007fed0d1e50b5 offset=b35 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e50c0 offset=b40 bits=1):
   test::copyMem_base@13 (line 11)  reexecute=true
   Locals
    - l0: stack[48],oop
    - l1: stack[168],oop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
PcDesc(pc=0x00007fed0d1e50c8 offset=b48 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e50dc offset=b5c bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e5161 offset=be1 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e516c offset=bec bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[56]
    - @1: stack[60]
    - @2: nullptr
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
   Locals
    - l0: stack[48],oop
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1e5197 offset=c17 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e51a0 offset=c20 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@2 (line 3364)
   Locals
    - l0: stack[64],oop
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
   Expression stack
    - @0: stack[56]
    - @1: stack[64],oop
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1e51a8 offset=c28 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e51d8 offset=c58 bits=0):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[56]
    - @1: stack[60]
    - @2: nullptr
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
   Locals
    - l0: stack[48],oop
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1e51e0 offset=c60 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e5204 offset=c84 bits=0):
   jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: reg rbp [10],oop
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@73 (line 18)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1e5275 offset=cf5 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e5280 offset=d00 bits=1):
   test::copyMem_base@49 (line 16)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],int
PcDesc(pc=0x00007fed0d1e52a1 offset=d21 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e52ac offset=d2c bits=0):
   test::copyMem_base@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: nullptr
PcDesc(pc=0x00007fed0d1e52cd offset=d4d bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e52d8 offset=d58 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@6 (line 3364)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: nullptr
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1e52fe offset=d7e bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e5308 offset=d88 bits=0):
   jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: nullptr
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   test::copyMem_base@73 (line 18)
   Locals
    - l0: reg rbp [10],oop
    - l1: empty
    - l2: stack[56]
    - l3: empty
    - l4: obj[387]
   Objects
    - 387: jdk.incubator.vector.Byte256Vector$Byte256Mask stack[64],vector
PcDesc(pc=0x00007fed0d1e5329 offset=da9 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e5334 offset=db4 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@26 (line 3408)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: nullptr
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1e5355 offset=dd5 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e5360 offset=de0 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@31 (line 3408)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: empty
    - @3: empty
    - @4: nullptr
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007fed0d1e5368 offset=de8 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e5391 offset=e11 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e5393 offset=e13 bits=0):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e5395 offset=e15 bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Mask::allTrue@23 (line 803)
   jdk.incubator.vector.ByteVector::intoArray@1 (line 3404)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e539c offset=e1c bits=0):
   jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
   test::copyMem_base@73 (line 18)
PcDesc(pc=0x00007fed0d1e539f offset=e1f bits=0):
   test::copyMem_base@26 (line 13)
PcDesc(pc=0x00007fed0d1e53af offset=e2f bits=0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   test::copyMem_base@80 (line 19)
PcDesc(pc=0x00007fed0d1e5409 offset=e89 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 22 OopMaps

ImmutableOopMap {[48]=Oop [168]=Oop } pc offsets: 820 
ImmutableOopMap {[48]=Oop [128]=Oop [160]=Oop [168]=Oop } pc offsets: 1768 
ImmutableOopMap {[48]=Oop [128]=Oop [160]=Oop } pc offsets: 1908 
ImmutableOopMap {rbp=Oop [48]=Oop [160]=Oop } pc offsets: 2152 2244 
ImmutableOopMap {} pc offsets: 2292 
ImmutableOopMap {[56]=Oop [168]=Oop } pc offsets: 2384 
ImmutableOopMap {[56]=Oop [80]=Oop [168]=Oop } pc offsets: 2504 
ImmutableOopMap {[48]=Oop [160]=Oop [168]=Oop } pc offsets: 2608 
ImmutableOopMap {[56]=Oop [72]=Oop [88]=Oop [168]=Oop } pc offsets: 2740 
ImmutableOopMap {[48]=Oop [168]=Oop } pc offsets: 2836 2880 
ImmutableOopMap {rbp=Oop [48]=Oop } pc offsets: 3052 
ImmutableOopMap {rbp=Oop [64]=Oop } pc offsets: 3104 
ImmutableOopMap {rbp=Oop [48]=Oop } pc offsets: 3160 
ImmutableOopMap {rbp=Oop } pc offsets: 3204 
ImmutableOopMap {} pc offsets: 3328 3372 3416 
ImmutableOopMap {rbp=Oop } pc offsets: 3464 
ImmutableOopMap {} pc offsets: 3508 3552 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007fed0d1e459e offset=1e):
   test::copyMem_base@-1 (line 10)
ScopeDesc(pc=0x00007fed0d1e45ae offset=2e):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e45ae offset=2e):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e45ae offset=2e):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e45b1 offset=31):
   jdk.incubator.vector.ByteVector::fromArray@16 (line 2995)
ScopeDesc(pc=0x00007fed0d1e45b1 offset=31):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fed0d1e4637 offset=b7):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4637 offset=b7):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4637 offset=b7):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e463c offset=bc):
   jdk.incubator.vector.ByteVector::fromArray0Template@32 (line 3730)
ScopeDesc(pc=0x00007fed0d1e463c offset=bc):
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
ScopeDesc(pc=0x00007fed0d1e463c offset=bc):
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
ScopeDesc(pc=0x00007fed0d1e463c offset=bc):
   test::copyMem_base@21 (line 12)
ScopeDesc(pc=0x00007fed0d1e4641 offset=c1):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4641 offset=c1):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4641 offset=c1):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4647 offset=c7):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4647 offset=c7):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e46c3 offset=143):
   test::copyMem_base@16 (line 12)
ScopeDesc(pc=0x00007fed0d1e46d9 offset=159):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e46d9 offset=159):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e46d9 offset=159):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e46df offset=15f):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e46df offset=15f):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e46f2 offset=172):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e46f2 offset=172):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e46f2 offset=172):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e46f8 offset=178):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e46f8 offset=178):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e470b offset=18b):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e470b offset=18b):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e470b offset=18b):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4711 offset=191):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4711 offset=191):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e4724 offset=1a4):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4724 offset=1a4):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4724 offset=1a4):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e472a offset=1aa):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e472a offset=1aa):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e4740 offset=1c0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4740 offset=1c0):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4740 offset=1c0):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4749 offset=1c9):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4749 offset=1c9):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e475f offset=1df):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e475f offset=1df):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e475f offset=1df):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4768 offset=1e8):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4768 offset=1e8):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e477e offset=1fe):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e477e offset=1fe):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e477e offset=1fe):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4787 offset=207):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4787 offset=207):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e479d offset=21d):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e479d offset=21d):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e479d offset=21d):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e47a6 offset=226):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e47a6 offset=226):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e47bc offset=23c):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e47bc offset=23c):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e47bc offset=23c):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e47c5 offset=245):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e47c5 offset=245):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e47db offset=25b):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e47db offset=25b):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e47db offset=25b):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e47e4 offset=264):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e47e4 offset=264):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e47fa offset=27a):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e47fa offset=27a):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e47fa offset=27a):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4803 offset=283):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4803 offset=283):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e4819 offset=299):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4819 offset=299):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4819 offset=299):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4822 offset=2a2):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4822 offset=2a2):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e4838 offset=2b8):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4838 offset=2b8):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4838 offset=2b8):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4841 offset=2c1):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4841 offset=2c1):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e4857 offset=2d7):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4857 offset=2d7):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4857 offset=2d7):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4860 offset=2e0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4860 offset=2e0):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e4876 offset=2f6):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4876 offset=2f6):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4876 offset=2f6):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e487f offset=2ff):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e487f offset=2ff):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e4895 offset=315):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4895 offset=315):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4895 offset=315):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e489e offset=31e):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e489e offset=31e):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e48ad offset=32d):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fed0d1e48b4 offset=334):
   test::copyMem_base@40 (line 11)  reexecute=true
   Locals
    - l0: stack[48],oop
    - l1: stack[168],oop
    - l2: reg rax [0],int
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e491c offset=39c):
   test::copyMem_base@16 (line 12)
ScopeDesc(pc=0x00007fed0d1e491f offset=39f):
   jdk.incubator.vector.ByteVector::arrayAddress@4 (line 3956)
ScopeDesc(pc=0x00007fed0d1e491f offset=39f):
   jdk.incubator.vector.ByteVector::fromArray0Template@20 (line 3732)
ScopeDesc(pc=0x00007fed0d1e491f offset=39f):
   jdk.incubator.vector.Byte256Vector::fromArray0@3 (line 941)
ScopeDesc(pc=0x00007fed0d1e491f offset=39f):
   jdk.incubator.vector.ByteVector::fromArray@24 (line 2965)
ScopeDesc(pc=0x00007fed0d1e491f offset=39f):
   test::copyMem_base@21 (line 12)
ScopeDesc(pc=0x00007fed0d1e4933 offset=3b3):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4933 offset=3b3):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4933 offset=3b3):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e493a offset=3ba):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e493a offset=3ba):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e4962 offset=3e2):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4962 offset=3e2):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4962 offset=3e2):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4968 offset=3e8):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fed0d1e4984 offset=404):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4984 offset=404):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4984 offset=404):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e49e2 offset=462):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fed0d1e49f0 offset=470):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e49f0 offset=470):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e49f0 offset=470):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4a7c offset=4fc):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fed0d1e4aea offset=56a):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4aea offset=56a):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4aea offset=56a):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4aef offset=56f):
   jdk.incubator.vector.ByteVector::fromArray@7 (line 2995)
ScopeDesc(pc=0x00007fed0d1e4aef offset=56f):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fed0d1e4af3 offset=573):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4af3 offset=573):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4af3 offset=573):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4afb offset=57b):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)
ScopeDesc(pc=0x00007fed0d1e4afb offset=57b):
   test::copyMem_base@61 (line 17)
ScopeDesc(pc=0x00007fed0d1e4b10 offset=590):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4b10 offset=590):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4b10 offset=590):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4b31 offset=5b1):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fed0d1e4b87 offset=607):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4b87 offset=607):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4b87 offset=607):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4bb9 offset=639):
   test::copyMem_base@40 (line 11)
ScopeDesc(pc=0x00007fed0d1e4c27 offset=6a7):
   jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
ScopeDesc(pc=0x00007fed0d1e4c27 offset=6a7):
   jdk.incubator.vector.ByteVector::fromArray@17 (line 2995)
ScopeDesc(pc=0x00007fed0d1e4c27 offset=6a7):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fed0d1e4c5d offset=6dd):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4c5d offset=6dd):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4c5d offset=6dd):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4c68 offset=6e8):
   jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
   Locals
    - l0: empty
    - l1: stack[168],oop
    - l2: stack[56]
    - l3: stack[160],oop
    - l4: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
ScopeDesc(pc=0x00007fed0d1e4c68 offset=6e8):
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[48],oop
    - l1: empty
    - l2: stack[56]
    - l3: empty
    - l4: stack[128],oop
ScopeDesc(pc=0x00007fed0d1e4ceb offset=76b):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4ceb offset=76b):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4ceb offset=76b):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4cf4 offset=774):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
ScopeDesc(pc=0x00007fed0d1e4cf4 offset=774):
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e4cf4 offset=774):
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e4cf4 offset=774):
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[48],oop
    - l1: empty
    - l2: stack[56]
    - l3: empty
    - l4: stack[128],oop
ScopeDesc(pc=0x00007fed0d1e4d29 offset=7a9):
   jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
ScopeDesc(pc=0x00007fed0d1e4d29 offset=7a9):
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
ScopeDesc(pc=0x00007fed0d1e4d29 offset=7a9):
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
ScopeDesc(pc=0x00007fed0d1e4d29 offset=7a9):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fed0d1e4d67 offset=7e7):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4d67 offset=7e7):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4d67 offset=7e7):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4d76 offset=7f6):
   jdk.incubator.vector.ByteVector::intoArray@2 (line 3364)
ScopeDesc(pc=0x00007fed0d1e4d76 offset=7f6):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4d76 offset=7f6):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4d83 offset=803):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4d83 offset=803):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4d83 offset=803):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4dae offset=82e):
   jdk.incubator.vector.ByteVector::intoArray@56 (line 3413)
ScopeDesc(pc=0x00007fed0d1e4dae offset=82e):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4dd5 offset=855):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4dd5 offset=855):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4dd5 offset=855):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4de8 offset=868):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[48],oop
    - l2: stack[56]
    - l3: obj[530]
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e4de8 offset=868):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 530: jdk.incubator.vector.Byte256Vector$Byte256Mask stack[64],vector
ScopeDesc(pc=0x00007fed0d1e4e23 offset=8a3):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4e23 offset=8a3):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4e23 offset=8a3):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4e25 offset=8a5):
   jdk.incubator.vector.VectorIntrinsics::indexInRange@19 (line 49)
ScopeDesc(pc=0x00007fed0d1e4e25 offset=8a5):
   jdk.incubator.vector.ByteVector::intoArray@33 (line 3408)
ScopeDesc(pc=0x00007fed0d1e4e25 offset=8a5):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4e34 offset=8b4):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4e34 offset=8b4):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4e34 offset=8b4):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4e44 offset=8c4):
   jdk.incubator.vector.ByteVector::intoArray@46 (line 3409)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[48],oop
    - l2: stack[56]
    - l3: stack[160],oop
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e4e44 offset=8c4):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e4e4c offset=8cc):
   jdk.incubator.vector.ByteVector::intoArray@49 (line 3411)
ScopeDesc(pc=0x00007fed0d1e4e4c offset=8cc):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4e60 offset=8e0):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4e60 offset=8e0):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4e60 offset=8e0):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4e74 offset=8f4):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e4e74 offset=8f4):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e4ec3 offset=943):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4ec3 offset=943):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4ec3 offset=943):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4ed0 offset=950):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @1: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @2: 32
    - @3: 0
    - @4: reg rbp [10],long
    - @5: 1
    - @6: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - @7: a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977030}
ScopeDesc(pc=0x00007fed0d1e4ed0 offset=950):
   test::copyMem_base@61 (line 17)
   Locals
    - l0: stack[56],oop
    - l1: stack[168],oop
    - l2: stack[68]
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e4f3f offset=9bf):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e4f3f offset=9bf):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e4f3f offset=9bf):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e4f48 offset=9c8):
   jdk.incubator.vector.VectorMask::fromLong@39 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @1: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @2: 32
    - @3: 0
    - @4: reg rbp [10],long
    - @5: 1
    - @6: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - @7: a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977030}
ScopeDesc(pc=0x00007fed0d1e4f48 offset=9c8):
   test::copyMem_base@61 (line 17)
   Locals
    - l0: stack[56],oop
    - l1: stack[168],oop
    - l2: stack[68]
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e4fb0 offset=a30):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949978} = 'jdk/incubator/vector/Byte256Vector'
    - @1: a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @2: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @3: 32
    - @4: stack[168],oop
    - @5: 0
    - @6: reg rbp [10],long
    - @7: obj[427]
    - @8: 1
    - @9: stack[168],oop
    - @10: 0
    - @11: stack[152],long
    - @12: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - @13: a 'jdk/incubator/vector/ByteVector$$Lambda+0x00000008000ecd68'{0x000000011facd530}
ScopeDesc(pc=0x00007fed0d1e4fb0 offset=a30):
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e4fb0 offset=a30):
   jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e4fb0 offset=a30):
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[48],oop
    - l1: empty
    - l2: stack[56]
    - l3: empty
    - l4: obj[427]
   Objects
    - 427: jdk.incubator.vector.Byte256Vector$Byte256Mask stack[64],vector
ScopeDesc(pc=0x00007fed0d1e502b offset=aab):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e502b offset=aab):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e502b offset=aab):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e5034 offset=ab4):
   jdk.incubator.vector.ByteVector::fromArray0Template@52 (line 3747)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000011f949978} = 'jdk/incubator/vector/Byte256Vector'
    - @1: a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
    - @2: a 'java/lang/Class'{0x000000011f0001c0} = byte
    - @3: 32
    - @4: stack[168],oop
    - @5: 0
    - @6: stack[160],long
    - @7: obj[480]
    - @8: 1
    - @9: stack[168],oop
    - @10: 0
    - @11: stack[80],long
    - @12: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
    - @13: a 'jdk/incubator/vector/ByteVector$$Lambda+0x00000008000ecd68'{0x000000011facd530}
ScopeDesc(pc=0x00007fed0d1e5034 offset=ab4):
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e5034 offset=ab4):
   jdk.incubator.vector.ByteVector::fromArray@32 (line 2996)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e5034 offset=ab4):
   test::copyMem_base@73 (line 18)
   Locals
    - l0: stack[56],oop
    - l1: empty
    - l2: stack[64]
    - l3: empty
    - l4: obj[480]
   Objects
    - 480: jdk.incubator.vector.Byte256Vector$Byte256Mask stack[96],vector
ScopeDesc(pc=0x00007fed0d1e508a offset=b0a):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e508a offset=b0a):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e508a offset=b0a):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e5094 offset=b14):
   test::copyMem_base@13 (line 11)  reexecute=true
   Locals
    - l0: stack[48],oop
    - l1: stack[168],oop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
ScopeDesc(pc=0x00007fed0d1e50b5 offset=b35):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e50b5 offset=b35):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e50b5 offset=b35):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e50c0 offset=b40):
   test::copyMem_base@13 (line 11)  reexecute=true
   Locals
    - l0: stack[48],oop
    - l1: stack[168],oop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
ScopeDesc(pc=0x00007fed0d1e50c8 offset=b48):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e50c8 offset=b48):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e50c8 offset=b48):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e50dc offset=b5c):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e50dc offset=b5c):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e5161 offset=be1):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e5161 offset=be1):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e5161 offset=be1):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e516c offset=bec):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[56]
    - @1: stack[60]
    - @2: nullptr
ScopeDesc(pc=0x00007fed0d1e516c offset=bec):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007fed0d1e516c offset=bec):
   jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
   Locals
    - l0: stack[48],oop
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fed0d1e516c offset=bec):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e516c offset=bec):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e5197 offset=c17):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e5197 offset=c17):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e5197 offset=c17):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e51a0 offset=c20):
   jdk.incubator.vector.ByteVector::intoArray@2 (line 3364)
   Locals
    - l0: stack[64],oop
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
   Expression stack
    - @0: stack[56]
    - @1: stack[64],oop
ScopeDesc(pc=0x00007fed0d1e51a0 offset=c20):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e51a0 offset=c20):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e51a8 offset=c28):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e51a8 offset=c28):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e51a8 offset=c28):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e51d8 offset=c58):
   java.util.Objects::checkIndex@3 (line 385)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[56]
    - @1: stack[60]
    - @2: nullptr
ScopeDesc(pc=0x00007fed0d1e51d8 offset=c58):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007fed0d1e51d8 offset=c58):
   jdk.incubator.vector.ByteVector::intoArray@7 (line 3364)
   Locals
    - l0: stack[48],oop
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fed0d1e51d8 offset=c58):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e51d8 offset=c58):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e51e0 offset=c60):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e51e0 offset=c60):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e51e0 offset=c60):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e5204 offset=c84):
   jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: reg rbp [10],oop
ScopeDesc(pc=0x00007fed0d1e5204 offset=c84):
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e5204 offset=c84):
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e5204 offset=c84):
   test::copyMem_base@73 (line 18)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e5275 offset=cf5):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e5275 offset=cf5):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e5275 offset=cf5):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e5280 offset=d00):
   test::copyMem_base@49 (line 16)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x00007fed0d1e52a1 offset=d21):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e52a1 offset=d21):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e52a1 offset=d21):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e52ac offset=d2c):
   test::copyMem_base@7 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: nullptr
ScopeDesc(pc=0x00007fed0d1e52cd offset=d4d):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e52cd offset=d4d):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e52cd offset=d4d):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e52d8 offset=d58):
   jdk.incubator.vector.ByteVector::intoArray@6 (line 3364)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: nullptr
ScopeDesc(pc=0x00007fed0d1e52d8 offset=d58):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e52d8 offset=d58):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e52fe offset=d7e):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e52fe offset=d7e):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e52fe offset=d7e):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e5308 offset=d88):
   jdk.incubator.vector.ByteVector::fromArray0Template@55 (line 3747)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: nullptr
ScopeDesc(pc=0x00007fed0d1e5308 offset=d88):
   jdk.incubator.vector.Byte256Vector::fromArray0@11 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e5308 offset=d88):
   jdk.incubator.vector.ByteVector::fromArray@55 (line 3000)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e5308 offset=d88):
   test::copyMem_base@73 (line 18)
   Locals
    - l0: reg rbp [10],oop
    - l1: empty
    - l2: stack[56]
    - l3: empty
    - l4: obj[387]
   Objects
    - 387: jdk.incubator.vector.Byte256Vector$Byte256Mask stack[64],vector
ScopeDesc(pc=0x00007fed0d1e5329 offset=da9):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e5329 offset=da9):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e5329 offset=da9):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e5334 offset=db4):
   jdk.incubator.vector.ByteVector::intoArray@26 (line 3408)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: nullptr
ScopeDesc(pc=0x00007fed0d1e5334 offset=db4):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e5355 offset=dd5):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e5355 offset=dd5):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e5355 offset=dd5):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e5360 offset=de0):
   jdk.incubator.vector.ByteVector::intoArray@31 (line 3408)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: empty
    - @3: empty
    - @4: nullptr
ScopeDesc(pc=0x00007fed0d1e5360 offset=de0):
   test::copyMem_base@80 (line 19)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fed0d1e5368 offset=de8):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e5368 offset=de8):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e5368 offset=de8):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e5391 offset=e11):
   jdk.incubator.vector.ByteVector::intoArray@17 (line 3407)
ScopeDesc(pc=0x00007fed0d1e5391 offset=e11):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e5393 offset=e13):
   jdk.incubator.vector.ByteVector::intoArray@53 (line 3411)
ScopeDesc(pc=0x00007fed0d1e5393 offset=e13):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e5395 offset=e15):
   jdk.incubator.vector.Byte256Vector$Byte256Mask::allTrue@23 (line 803)
ScopeDesc(pc=0x00007fed0d1e5395 offset=e15):
   jdk.incubator.vector.ByteVector::intoArray@1 (line 3404)
ScopeDesc(pc=0x00007fed0d1e5395 offset=e15):
   test::copyMem_base@80 (line 19)
ScopeDesc(pc=0x00007fed0d1e539c offset=e1c):
   jdk.incubator.vector.ByteVector::fromArray@43 (line 2999)
ScopeDesc(pc=0x00007fed0d1e539c offset=e1c):
   test::copyMem_base@73 (line 18)
ScopeDesc(pc=0x00007fed0d1e539f offset=e1f):
   test::copyMem_base@26 (line 13)
ScopeDesc(pc=0x00007fed0d1e53af offset=e2f):
   jdk.incubator.vector.ByteVector::intoArray@43 (line 3366)
ScopeDesc(pc=0x00007fed0d1e53af offset=e2f):
   jdk.incubator.vector.ByteVector::intoArray@10 (line 3405)
ScopeDesc(pc=0x00007fed0d1e53af offset=e2f):
   test::copyMem_base@80 (line 19)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007fed0d1e4380: 01ff
relocInfo@0x00007fed0d1e4380 [type=0(none) addr=0x00007fed0d1e477f offset=511]
         @0x00007fed0d1e4382: 5135
relocInfo@0x00007fed0d1e4382 [type=10(poll) addr=0x00007fed0d1e48b4 offset=309]
         @0x00007fed0d1e4384: 780966fe
relocInfo@0x00007fed0d1e4386 [type=12(metadata) addr=0x00007fed0d1e49b2 offset=254 format=3 data=9] | [metadata_addr=0x00007fed0d1e5480 *=0x0000000800040200 offset=0]metadata_value=0x0000000800040200: {type array bool}
         @0x00007fed0d1e4388: 780a66e0
relocInfo@0x00007fed0d1e438a [type=12(metadata) addr=0x00007fed0d1e4a92 offset=224 format=3 data=10] | [metadata_addr=0x00007fed0d1e5488 *=0x00000008000de750 offset=0]metadata_value=0x00000008000de750: 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
         @0x00007fed0d1e438c: 7c0316e19fb07fed3a07
relocInfo@0x00007fed0d1e4394 [type=7(external_word) addr=0x00007fed0d1e4a99 offset=7 format=1 data={16e19fb07fed}] | [target=0x00007fed16e19fb0]
         @0x00007fed0d1e4396: 7c03169eedf87fed380d
relocInfo@0x00007fed0d1e439e [type=7(external_word) addr=0x00007fed0d1e4aa6 offset=13 data={169eedf87fed}] | [target=0x00007fed169eedf8]
         @0x00007fed0d1e43a0: 320e
relocInfo@0x00007fed0d1e43a0 [type=6(runtime_call) addr=0x00007fed0d1e4ab4 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e43a2: 7c03169eee387fed380f
relocInfo@0x00007fed0d1e43aa [type=7(external_word) addr=0x00007fed0d1e4ac3 offset=15 data={169eee387fed}] | [target=0x00007fed169eee38]
         @0x00007fed0d1e43ac: 320e
relocInfo@0x00007fed0d1e43ac [type=6(runtime_call) addr=0x00007fed0d1e4ad1 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e43ae: 780c667e
relocInfo@0x00007fed0d1e43b0 [type=12(metadata) addr=0x00007fed0d1e4b4f offset=126 format=3 data=12] | [metadata_addr=0x00007fed0d1e5498 *=0x0000000800040a00 offset=0]metadata_value=0x0000000800040a00: {type array byte}
         @0x00007fed0d1e43b2: 780d6680
relocInfo@0x00007fed0d1e43b4 [type=12(metadata) addr=0x00007fed0d1e4bcf offset=128 format=3 data=13] | [metadata_addr=0x00007fed0d1e54a0 *=0x00000008000de0b8 offset=0]metadata_value=0x00000008000de0b8: 'jdk/incubator/vector/Byte256Vector'
         @0x00007fed0d1e43b6: 7c0316e19fb07fed3a07
relocInfo@0x00007fed0d1e43be [type=7(external_word) addr=0x00007fed0d1e4bd6 offset=7 format=1 data={16e19fb07fed}] | [target=0x00007fed16e19fb0]
         @0x00007fed0d1e43c0: 7c03169eedf87fed380d
relocInfo@0x00007fed0d1e43c8 [type=7(external_word) addr=0x00007fed0d1e4be3 offset=13 data={169eedf87fed}] | [target=0x00007fed169eedf8]
         @0x00007fed0d1e43ca: 320e
relocInfo@0x00007fed0d1e43ca [type=6(runtime_call) addr=0x00007fed0d1e4bf1 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e43cc: 7c03169eee387fed380f
relocInfo@0x00007fed0d1e43d4 [type=7(external_word) addr=0x00007fed0d1e4c00 offset=15 data={169eee387fed}] | [target=0x00007fed169eee38]
         @0x00007fed0d1e43d6: 320e
relocInfo@0x00007fed0d1e43d6 [type=6(runtime_call) addr=0x00007fed0d1e4c0e offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e43d8: 0831
relocInfo@0x00007fed0d1e43d8 [type=1(oop) addr=0x00007fed0d1e4c3f offset=49] | [oop_addr=0x00007fed0d1e4c41 *=0x000000011f949928 offset=0]
         @0x00007fed0d1e43da: 2224
relocInfo@0x00007fed0d1e43da [type=4(static_call) addr=0x00007fed0d1e4c63 offset=36 format=1] | [destination=0x00007fed0d1e53df metadata=0x0000000000000000]
         @0x00007fed0d1e43dc: 8005
relocInfo@0x00007fed0d1e43dc [type=16(post_call_nop) addr=0x00007fed0d1e4c68 offset=5]
         @0x00007fed0d1e43de: 0808
relocInfo@0x00007fed0d1e43de [type=1(oop) addr=0x00007fed0d1e4c70 offset=8] | [oop_addr=0x00007fed0d1e4c72 *=0x000000011f949978 offset=0]
         @0x00007fed0d1e43e0: 080a
relocInfo@0x00007fed0d1e43e0 [type=1(oop) addr=0x00007fed0d1e4c7a offset=10] | [oop_addr=0x00007fed0d1e4c7c *=0x000000011f0001c0 offset=0]
         @0x00007fed0d1e43e2: 080a
relocInfo@0x00007fed0d1e43e2 [type=1(oop) addr=0x00007fed0d1e4c84 offset=10] | [oop_addr=0x00007fed0d1e4c86 *=0x000000011f949a08 offset=0]
         @0x00007fed0d1e43e4: 0849
relocInfo@0x00007fed0d1e43e4 [type=1(oop) addr=0x00007fed0d1e4ccd offset=73] | [oop_addr=0x00007fed0d1e4ccf *=0x000000011f949928 offset=0]
         @0x00007fed0d1e43e6: 080f
relocInfo@0x00007fed0d1e43e6 [type=1(oop) addr=0x00007fed0d1e4cdc offset=15] | [oop_addr=0x00007fed0d1e4cde *=0x000000011facd530 offset=0]
         @0x00007fed0d1e43e8: 2213
relocInfo@0x00007fed0d1e43e8 [type=4(static_call) addr=0x00007fed0d1e4cef offset=19 format=1] | [destination=0x00007fed0d1e53d0 metadata=0x0000000000000000]
         @0x00007fed0d1e43ea: 8005
relocInfo@0x00007fed0d1e43ea [type=16(post_call_nop) addr=0x00007fed0d1e4cf4 offset=5]
         @0x00007fed0d1e43ec: 6010
relocInfo@0x00007fed0d1e43ec [type=12(metadata) addr=0x00007fed0d1e4d04 offset=16] | [metadata_addr=0x00007fed0d1e4d06 *=0x00000008000d3660 offset=0]metadata_value=0x00000008000d3660: 'jdk/incubator/vector/ByteVector'
         @0x00007fed0d1e43ee: 780d665c
relocInfo@0x00007fed0d1e43f0 [type=12(metadata) addr=0x00007fed0d1e4d60 offset=92 format=3 data=13] | [metadata_addr=0x00007fed0d1e54a0 *=0x00000008000de0b8 offset=0]metadata_value=0x00000008000de0b8: 'jdk/incubator/vector/Byte256Vector'
         @0x00007fed0d1e43f2: 5859
relocInfo@0x00007fed0d1e43f2 [type=11(poll_return) addr=0x00007fed0d1e4db9 offset=89]
         @0x00007fed0d1e43f4: 780a122a
relocInfo@0x00007fed0d1e43f6 [type=2(virtual_call) addr=0x00007fed0d1e4de3 offset=42 format=1 data=10] | [destination=0x00007fed0d1c2c20 cached_value=0x00007fed0d1e4dd9 metadata=0x0000000000000000]
         @0x00007fed0d1e43f8: 8005
relocInfo@0x00007fed0d1e43f8 [type=16(post_call_nop) addr=0x00007fed0d1e4de8 offset=5]
         @0x00007fed0d1e43fa: 2257
relocInfo@0x00007fed0d1e43fa [type=4(static_call) addr=0x00007fed0d1e4e3f offset=87 format=1] | [destination=0x00007fed0d1e53df metadata=0x0000000000000000]
         @0x00007fed0d1e43fc: 8005
relocInfo@0x00007fed0d1e43fc [type=16(post_call_nop) addr=0x00007fed0d1e4e44 offset=5]
         @0x00007fed0d1e43fe: 780a122b
relocInfo@0x00007fed0d1e4400 [type=2(virtual_call) addr=0x00007fed0d1e4e6f offset=43 format=1 data=10] | [destination=0x00007fed0d113d20 cached_value=0x00007fed0d1e4e65 metadata=0x0000000000000000]
         @0x00007fed0d1e4402: 8005
relocInfo@0x00007fed0d1e4402 [type=16(post_call_nop) addr=0x00007fed0d1e4e74 offset=5]
         @0x00007fed0d1e4404: 6045
relocInfo@0x00007fed0d1e4404 [type=12(metadata) addr=0x00007fed0d1e4eb9 offset=69] | [metadata_addr=0x00007fed0d1e4ebb *=0x0000000800040200 offset=0]metadata_value=0x0000000800040200: {type array bool}
         @0x00007fed0d1e4406: 3212
relocInfo@0x00007fed0d1e4406 [type=6(runtime_call) addr=0x00007fed0d1e4ecb offset=18 format=1] | [destination=0x00007fed0d02b320]
         @0x00007fed0d1e4408: 8005
relocInfo@0x00007fed0d1e4408 [type=16(post_call_nop) addr=0x00007fed0d1e4ed0 offset=5]
         @0x00007fed0d1e440a: 6065
relocInfo@0x00007fed0d1e440a [type=12(metadata) addr=0x00007fed0d1e4f35 offset=101] | [metadata_addr=0x00007fed0d1e4f37 *=0x00000008000de750 offset=0]metadata_value=0x00000008000de750: 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
         @0x00007fed0d1e440c: 320e
relocInfo@0x00007fed0d1e440c [type=6(runtime_call) addr=0x00007fed0d1e4f43 offset=14 format=1] | [destination=0x00007fed0d02b620]
         @0x00007fed0d1e440e: 8005
relocInfo@0x00007fed0d1e440e [type=16(post_call_nop) addr=0x00007fed0d1e4f48 offset=5]
         @0x00007fed0d1e4410: 6049
relocInfo@0x00007fed0d1e4410 [type=12(metadata) addr=0x00007fed0d1e4f91 offset=73] | [metadata_addr=0x00007fed0d1e4f93 *=0x0000000800040a00 offset=0]metadata_value=0x0000000800040a00: {type array byte}
         @0x00007fed0d1e4412: 321a
relocInfo@0x00007fed0d1e4412 [type=6(runtime_call) addr=0x00007fed0d1e4fab offset=26 format=1] | [destination=0x00007fed0d02b320]
         @0x00007fed0d1e4414: 8005
relocInfo@0x00007fed0d1e4414 [type=16(post_call_nop) addr=0x00007fed0d1e4fb0 offset=5]
         @0x00007fed0d1e4416: 6069
relocInfo@0x00007fed0d1e4416 [type=12(metadata) addr=0x00007fed0d1e5019 offset=105] | [metadata_addr=0x00007fed0d1e501b *=0x00000008000de0b8 offset=0]metadata_value=0x00000008000de0b8: 'jdk/incubator/vector/Byte256Vector'
         @0x00007fed0d1e4418: 3216
relocInfo@0x00007fed0d1e4418 [type=6(runtime_call) addr=0x00007fed0d1e502f offset=22 format=1] | [destination=0x00007fed0d02b620]
         @0x00007fed0d1e441a: 8005
relocInfo@0x00007fed0d1e441a [type=16(post_call_nop) addr=0x00007fed0d1e5034 offset=5]
         @0x00007fed0d1e441c: 325b
relocInfo@0x00007fed0d1e441c [type=6(runtime_call) addr=0x00007fed0d1e508f offset=91 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1e441e: 8005
relocInfo@0x00007fed0d1e441e [type=16(post_call_nop) addr=0x00007fed0d1e5094 offset=5]
         @0x00007fed0d1e4420: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1e4428 [type=7(external_word) addr=0x00007fed0d1e509c offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1e442a: 320e
relocInfo@0x00007fed0d1e442a [type=6(runtime_call) addr=0x00007fed0d1e50aa offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e442c: 3211
relocInfo@0x00007fed0d1e442c [type=6(runtime_call) addr=0x00007fed0d1e50bb offset=17 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1e442e: 8005
relocInfo@0x00007fed0d1e442e [type=16(post_call_nop) addr=0x00007fed0d1e50c0 offset=5]
         @0x00007fed0d1e4430: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1e4438 [type=7(external_word) addr=0x00007fed0d1e50c8 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1e443a: 320e
relocInfo@0x00007fed0d1e443a [type=6(runtime_call) addr=0x00007fed0d1e50d6 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e443c: 7c03169e34807fed3813
relocInfo@0x00007fed0d1e4444 [type=7(external_word) addr=0x00007fed0d1e50e9 offset=19 data={169e34807fed}] | [target=0x00007fed169e3480]
         @0x00007fed0d1e4446: 320e
relocInfo@0x00007fed0d1e4446 [type=6(runtime_call) addr=0x00007fed0d1e50f7 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e4448: 7c03169e34807fed3806
relocInfo@0x00007fed0d1e4450 [type=7(external_word) addr=0x00007fed0d1e50fd offset=6 data={169e34807fed}] | [target=0x00007fed169e3480]
         @0x00007fed0d1e4452: 320e
relocInfo@0x00007fed0d1e4452 [type=6(runtime_call) addr=0x00007fed0d1e510b offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e4454: 7c03169e34807fed3806
relocInfo@0x00007fed0d1e445c [type=7(external_word) addr=0x00007fed0d1e5111 offset=6 data={169e34807fed}] | [target=0x00007fed169e3480]
         @0x00007fed0d1e445e: 320e
relocInfo@0x00007fed0d1e445e [type=6(runtime_call) addr=0x00007fed0d1e511f offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e4460: 7c03169e34807fed3806
relocInfo@0x00007fed0d1e4468 [type=7(external_word) addr=0x00007fed0d1e5125 offset=6 data={169e34807fed}] | [target=0x00007fed169e3480]
         @0x00007fed0d1e446a: 320e
relocInfo@0x00007fed0d1e446a [type=6(runtime_call) addr=0x00007fed0d1e5133 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e446c: 7c03169e34807fed3806
relocInfo@0x00007fed0d1e4474 [type=7(external_word) addr=0x00007fed0d1e5139 offset=6 data={169e34807fed}] | [target=0x00007fed169e3480]
         @0x00007fed0d1e4476: 320e
relocInfo@0x00007fed0d1e4476 [type=6(runtime_call) addr=0x00007fed0d1e5147 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e4478: 3220
relocInfo@0x00007fed0d1e4478 [type=6(runtime_call) addr=0x00007fed0d1e5167 offset=32 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1e447a: 8005
relocInfo@0x00007fed0d1e447a [type=16(post_call_nop) addr=0x00007fed0d1e516c offset=5]
         @0x00007fed0d1e447c: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1e4484 [type=7(external_word) addr=0x00007fed0d1e5174 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1e4486: 320e
relocInfo@0x00007fed0d1e4486 [type=6(runtime_call) addr=0x00007fed0d1e5182 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e4488: 3219
relocInfo@0x00007fed0d1e4488 [type=6(runtime_call) addr=0x00007fed0d1e519b offset=25 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1e448a: 8005
relocInfo@0x00007fed0d1e448a [type=16(post_call_nop) addr=0x00007fed0d1e51a0 offset=5]
         @0x00007fed0d1e448c: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1e4494 [type=7(external_word) addr=0x00007fed0d1e51a8 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1e4496: 320e
relocInfo@0x00007fed0d1e4496 [type=6(runtime_call) addr=0x00007fed0d1e51b6 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e4498: 321d
relocInfo@0x00007fed0d1e4498 [type=6(runtime_call) addr=0x00007fed0d1e51d3 offset=29 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1e449a: 8005
relocInfo@0x00007fed0d1e449a [type=16(post_call_nop) addr=0x00007fed0d1e51d8 offset=5]
         @0x00007fed0d1e449c: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1e44a4 [type=7(external_word) addr=0x00007fed0d1e51e0 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1e44a6: 320e
relocInfo@0x00007fed0d1e44a6 [type=6(runtime_call) addr=0x00007fed0d1e51ee offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e44a8: 3211
relocInfo@0x00007fed0d1e44a8 [type=6(runtime_call) addr=0x00007fed0d1e51ff offset=17 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1e44aa: 8005
relocInfo@0x00007fed0d1e44aa [type=16(post_call_nop) addr=0x00007fed0d1e5204 offset=5]
         @0x00007fed0d1e44ac: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1e44b4 [type=7(external_word) addr=0x00007fed0d1e520c offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1e44b6: 320e
relocInfo@0x00007fed0d1e44b6 [type=6(runtime_call) addr=0x00007fed0d1e521a offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e44b8: 7c03169e34807fed3806
relocInfo@0x00007fed0d1e44c0 [type=7(external_word) addr=0x00007fed0d1e5220 offset=6 data={169e34807fed}] | [target=0x00007fed169e3480]
         @0x00007fed0d1e44c2: 320e
relocInfo@0x00007fed0d1e44c2 [type=6(runtime_call) addr=0x00007fed0d1e522e offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e44c4: 7c03169e34807fed3806
relocInfo@0x00007fed0d1e44cc [type=7(external_word) addr=0x00007fed0d1e5234 offset=6 data={169e34807fed}] | [target=0x00007fed169e3480]
         @0x00007fed0d1e44ce: 320e
relocInfo@0x00007fed0d1e44ce [type=6(runtime_call) addr=0x00007fed0d1e5242 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e44d0: 7c03169e34807fed3806
relocInfo@0x00007fed0d1e44d8 [type=7(external_word) addr=0x00007fed0d1e5248 offset=6 data={169e34807fed}] | [target=0x00007fed169e3480]
         @0x00007fed0d1e44da: 320e
relocInfo@0x00007fed0d1e44da [type=6(runtime_call) addr=0x00007fed0d1e5256 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e44dc: 7c03169e34807fed3806
relocInfo@0x00007fed0d1e44e4 [type=7(external_word) addr=0x00007fed0d1e525c offset=6 data={169e34807fed}] | [target=0x00007fed169e3480]
         @0x00007fed0d1e44e6: 320e
relocInfo@0x00007fed0d1e44e6 [type=6(runtime_call) addr=0x00007fed0d1e526a offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e44e8: 3211
relocInfo@0x00007fed0d1e44e8 [type=6(runtime_call) addr=0x00007fed0d1e527b offset=17 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1e44ea: 8005
relocInfo@0x00007fed0d1e44ea [type=16(post_call_nop) addr=0x00007fed0d1e5280 offset=5]
         @0x00007fed0d1e44ec: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1e44f4 [type=7(external_word) addr=0x00007fed0d1e5288 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1e44f6: 320e
relocInfo@0x00007fed0d1e44f6 [type=6(runtime_call) addr=0x00007fed0d1e5296 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e44f8: 3211
relocInfo@0x00007fed0d1e44f8 [type=6(runtime_call) addr=0x00007fed0d1e52a7 offset=17 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1e44fa: 8005
relocInfo@0x00007fed0d1e44fa [type=16(post_call_nop) addr=0x00007fed0d1e52ac offset=5]
         @0x00007fed0d1e44fc: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1e4504 [type=7(external_word) addr=0x00007fed0d1e52b4 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1e4506: 320e
relocInfo@0x00007fed0d1e4506 [type=6(runtime_call) addr=0x00007fed0d1e52c2 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e4508: 3211
relocInfo@0x00007fed0d1e4508 [type=6(runtime_call) addr=0x00007fed0d1e52d3 offset=17 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1e450a: 8005
relocInfo@0x00007fed0d1e450a [type=16(post_call_nop) addr=0x00007fed0d1e52d8 offset=5]
         @0x00007fed0d1e450c: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1e4514 [type=7(external_word) addr=0x00007fed0d1e52e0 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1e4516: 320e
relocInfo@0x00007fed0d1e4516 [type=6(runtime_call) addr=0x00007fed0d1e52ee offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e4518: 3215
relocInfo@0x00007fed0d1e4518 [type=6(runtime_call) addr=0x00007fed0d1e5303 offset=21 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1e451a: 8005
relocInfo@0x00007fed0d1e451a [type=16(post_call_nop) addr=0x00007fed0d1e5308 offset=5]
         @0x00007fed0d1e451c: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1e4524 [type=7(external_word) addr=0x00007fed0d1e5310 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1e4526: 320e
relocInfo@0x00007fed0d1e4526 [type=6(runtime_call) addr=0x00007fed0d1e531e offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e4528: 3211
relocInfo@0x00007fed0d1e4528 [type=6(runtime_call) addr=0x00007fed0d1e532f offset=17 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1e452a: 8005
relocInfo@0x00007fed0d1e452a [type=16(post_call_nop) addr=0x00007fed0d1e5334 offset=5]
         @0x00007fed0d1e452c: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1e4534 [type=7(external_word) addr=0x00007fed0d1e533c offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1e4536: 320e
relocInfo@0x00007fed0d1e4536 [type=6(runtime_call) addr=0x00007fed0d1e534a offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e4538: 3211
relocInfo@0x00007fed0d1e4538 [type=6(runtime_call) addr=0x00007fed0d1e535b offset=17 format=1] | [destination=0x00007fed0d11f020]
         @0x00007fed0d1e453a: 8005
relocInfo@0x00007fed0d1e453a [type=16(post_call_nop) addr=0x00007fed0d1e5360 offset=5]
         @0x00007fed0d1e453c: 7c031696b4a07fed3808
relocInfo@0x00007fed0d1e4544 [type=7(external_word) addr=0x00007fed0d1e5368 offset=8 data={1696b4a07fed}] | [target=0x00007fed1696b4a0]
         @0x00007fed0d1e4546: 320e
relocInfo@0x00007fed0d1e4546 [type=6(runtime_call) addr=0x00007fed0d1e5376 offset=14 format=1] | [destination=0x00007fed1607caf0]
         @0x00007fed0d1e4548: 3234
relocInfo@0x00007fed0d1e4548 [type=6(runtime_call) addr=0x00007fed0d1e53aa offset=52 format=1] | [destination=0x00007fed0d12b2a0]
         @0x00007fed0d1e454a: 7c0105f64005
relocInfo@0x00007fed0d1e454e [type=8(internal_word) addr=0x00007fed0d1e53af offset=5 data=1526] | [target=0x00007fed0d1e4db9]
         @0x00007fed0d1e4550: 3211
relocInfo@0x00007fed0d1e4550 [type=6(runtime_call) addr=0x00007fed0d1e53c0 offset=17 format=1] | [destination=0x00007fed0d11e1a0]
         @0x00007fed0d1e4552: 3205
relocInfo@0x00007fed0d1e4552 [type=6(runtime_call) addr=0x00007fed0d1e53c5 offset=5 format=1] | [destination=0x00007fed0d080440]
         @0x00007fed0d1e4554: 000b
relocInfo@0x00007fed0d1e4554 [type=0(none) addr=0x00007fed0d1e53d0 offset=11]
         @0x00007fed0d1e4556: 7c01f8912800
relocInfo@0x00007fed0d1e455a [type=5(static_stub) addr=0x00007fed0d1e53d0 offset=0 data=-1903] | [static_call=0x00007fed0d1e4cef]
         @0x00007fed0d1e455c: 6000
relocInfo@0x00007fed0d1e455c [type=12(metadata) addr=0x00007fed0d1e53d0 offset=0] | [metadata_addr=0x00007fed0d1e53d2 *=0x00007fecc8178da0 offset=0]metadata_value=0x00007fecc8178da0: {method} {0x00007fecc8178da0} 'loadMasked' '(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;ILjava/lang/Object;JLjdk/internal/vm/vector/VectorSupport$VectorMask;ILjava/lang/Object;JLjdk/internal/vm/vector/VectorSupport$VectorSpecies;Ljdk/internal/vm/vector/VectorSupport$LoadVectorMaskedOperation;)Ljdk/internal/vm/vector/VectorSupport$Vector;' in 'jdk/internal/vm/vector/VectorSupport'
         @0x00007fed0d1e455e: 320a
relocInfo@0x00007fed0d1e455e [type=6(runtime_call) addr=0x00007fed0d1e53da offset=10 format=1] | [destination=0x00007fed0d19803b]
         @0x00007fed0d1e4560: 7c01f91d2805
relocInfo@0x00007fed0d1e4564 [type=5(static_stub) addr=0x00007fed0d1e53df offset=5 data=-1763] | [static_call=0x00007fed0d1e4c63]
         @0x00007fed0d1e4566: 7c01f7412800
relocInfo@0x00007fed0d1e456a [type=5(static_stub) addr=0x00007fed0d1e53df offset=0 data=-2239] | [static_call=0x00007fed0d1e4e3f]
         @0x00007fed0d1e456c: 6000
relocInfo@0x00007fed0d1e456c [type=12(metadata) addr=0x00007fed0d1e53df offset=0] | [metadata_addr=0x00007fed0d1e53e1 *=0x00007fecc8787298 offset=0]metadata_value=0x00007fecc8787298: {method} {0x00007fecc8787298} 'checkMaskFromIndexSize' '(ILjdk/incubator/vector/ByteVector$ByteSpecies;Ljdk/incubator/vector/VectorMask;II)V' in 'jdk/incubator/vector/ByteVector'
         @0x00007fed0d1e456e: 320a
relocInfo@0x00007fed0d1e456e [type=6(runtime_call) addr=0x00007fed0d1e53e9 offset=10 format=1] | [destination=0x00007fed0d195b7c]
         @0x00007fed0d1e4570: 3205
relocInfo@0x00007fed0d1e4570 [type=6(runtime_call) addr=0x00007fed0d1e53ee offset=5 format=1] | [destination=0x00007fed0d07e520]
         @0x00007fed0d1e4572: 320f
relocInfo@0x00007fed0d1e4572 [type=6(runtime_call) addr=0x00007fed0d1e53fd offset=15 format=1] | [destination=0x00007fed0d11d040]
         @0x00007fed0d1e4574: 0000
relocInfo@0x00007fed0d1e4574 [type=0(none) addr=0x00007fed0d1e53fd offset=0]
         @0x00007fed0d1e4576: 0000
relocInfo@0x00007fed0d1e4576 [type=0(none) addr=0x00007fed0d1e53fd offset=0]
         @0x00007fed0d1e4578: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type abstract_with_unique_concrete_subtype
  context = *jdk.incubator.vector.AbstractSpecies
  class   = jdk.incubator.vector.ByteVector$ByteSpecies
   [nmethod<=klass]jdk.incubator.vector.AbstractSpecies
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.ByteVector$ByteSpecies
  method  = {method} {0x00007fecc87e3cd0} 'loopBound' '(I)I' in 'jdk/incubator/vector/AbstractSpecies'
  class   = jdk.incubator.vector.VectorSpecies
  method  = *{method} {0x00007fecc87e1730} 'loopBound' '(I)I' in 'jdk/incubator/vector/VectorSpecies'
   [nmethod<=klass]jdk.incubator.vector.ByteVector$ByteSpecies
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.ByteVector$ByteSpecies
  method  = {method} {0x00007fecc87e30b0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  class   = jdk.incubator.vector.VectorSpecies
  method  = *{method} {0x00007fecc87e1538} 'length' '()I' in 'jdk/incubator/vector/VectorSpecies'
   [nmethod<=klass]jdk.incubator.vector.ByteVector$ByteSpecies
Dependency of type unique_concrete_method_4
  context = *jdk.incubator.vector.VectorMask
  method  = {method} {0x00007fecc86aa590} 'allTrue' '()Z' in 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
  class   = jdk.incubator.vector.VectorMask
  method  = *{method} {0x00007fecc8681fb0} 'allTrue' '()Z' in 'jdk/incubator/vector/VectorMask'
   [nmethod<=klass]jdk.incubator.vector.VectorMask
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.Byte256Vector$Byte256Mask
  method  = {method} {0x00007fecc87fec58} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
  class   = jdk.incubator.vector.VectorMask
  method  = *{method} {0x00007fecc86829e0} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
   [nmethod<=klass]jdk.incubator.vector.Byte256Vector$Byte256Mask
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 216 bytes)
catch_pco = 1768 (pc=0x00007fed0d1e4c68, 1 entries)
  bci -1 at scope depth 0 -> pco 3610 (pc=0x00007fed0d1e539a)
catch_pco = 1908 (pc=0x00007fed0d1e4cf4, 1 entries)
  bci -1 at scope depth 0 -> pco 3612 (pc=0x00007fed0d1e539c)
catch_pco = 2152 (pc=0x00007fed0d1e4de8, 1 entries)
  bci -1 at scope depth 0 -> pco 3601 (pc=0x00007fed0d1e5391)
catch_pco = 2244 (pc=0x00007fed0d1e4e44, 1 entries)
  bci -1 at scope depth 0 -> pco 3605 (pc=0x00007fed0d1e5395)
catch_pco = 2292 (pc=0x00007fed0d1e4e74, 1 entries)
  bci -1 at scope depth 0 -> pco 3603 (pc=0x00007fed0d1e5393)
catch_pco = 2384 (pc=0x00007fed0d1e4ed0, 1 entries)
  bci -1 at scope depth 0 -> pco 3596 (pc=0x00007fed0d1e538c)
catch_pco = 2504 (pc=0x00007fed0d1e4f48, 1 entries)
  bci -1 at scope depth 0 -> pco 3594 (pc=0x00007fed0d1e538a)
catch_pco = 2608 (pc=0x00007fed0d1e4fb0, 1 entries)
  bci -1 at scope depth 0 -> pco 3580 (pc=0x00007fed0d1e537c)
catch_pco = 2740 (pc=0x00007fed0d1e5034, 1 entries)
  bci -1 at scope depth 0 -> pco 3589 (pc=0x00007fed0d1e5385)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 6 entries, 52 bytes):
{
   < 0x00007fed0d1e45ab, 0x00007fed0d1e529c > < 0x00007fed0d1e4600, 0x00007fed0d1e5085 > < 0x00007fed0d1e4d00, 0x00007fed0d1e52f4 > 
   < 0x00007fed0d1e4d72, 0x00007fed0d1e52c8 > < 0x00007fed0d1e4df0, 0x00007fed0d1e5324 > < 0x00007fed0d1e4e00, 0x00007fed0d1e5350 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 nullptr-oop
#1: 0x000000011f949928 a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x000000011f949928}
#2: 0x000000011f949a08 a 'java/lang/Class'{0x000000011f949a08} = 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
#3: 0x000000011f0001c0 a 'java/lang/Class'{0x000000011f0001c0} = byte
#4: 0x000000011f977030 a 'jdk/incubator/vector/VectorMask$$Lambda+0x00000008000e2188'{0x000000011f977030}
#5: 0x000000011f949978 a 'java/lang/Class'{0x000000011f949978} = 'jdk/incubator/vector/Byte256Vector'
#6: 0x000000011facd530 a 'jdk/incubator/vector/ByteVector$$Lambda+0x00000008000ecd68'{0x000000011facd530}
#7: 0x000000011f81fe28 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f81fe28}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
# 0: 0x0000000000000000 nullptr-oop
# 1: 0x00007fecc8603650 {method} {0x00007fecc8603650} 'copyMem_base' '([B[B)V' in 'test'
# 2: 0x00007fecc87852d8 {method} {0x00007fecc87852d8} 'intoArray' '([BILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/ByteVector'
# 3: 0x00007fecc8785190 {method} {0x00007fecc8785190} 'intoArray' '([BI)V' in 'jdk/incubator/vector/ByteVector'
# 4: 0x00007fecc8784668 {method} {0x00007fecc8784668} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[BILjdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
# 5: 0x00007fecc8784520 {method} {0x00007fecc8784520} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
# 6: 0x00007fecc86a2de8 {method} {0x00007fecc86a2de8} 'fromArray0' '([BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/Byte256Vector'
# 7: 0x00007fecc8785eb8 {method} {0x00007fecc8785eb8} 'fromArray0Template' '([BI)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
# 8: 0x00007fecc87876d8 {method} {0x00007fecc87876d8} 'arrayAddress' '([BI)J' in 'jdk/incubator/vector/ByteVector'
# 9: 0x0000000800040200 {type array bool}
#10: 0x00000008000de750 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
#11: 0x00007fecc8681ba8 {method} {0x00007fecc8681ba8} 'fromLong' '(Ljdk/incubator/vector/VectorSpecies;J)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
#12: 0x0000000800040a00 {type array byte}
#13: 0x00000008000de0b8 'jdk/incubator/vector/Byte256Vector'
#14: 0x00007fecc86d4780 {method} {0x00007fecc86d4780} 'indexInRange' '(JJJ)Z' in 'jdk/incubator/vector/VectorIntrinsics'
#15: 0x00007fecc86a2f00 {method} {0x00007fecc86a2f00} 'fromArray0' '([BILjdk/incubator/vector/VectorMask;I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/Byte256Vector'
#16: 0x00007fecc87860c8 {method} {0x00007fecc87860c8} 'fromArray0Template' '(Ljava/lang/Class;[BILjdk/incubator/vector/VectorMask;I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
#17: 0x00007fecc86d48b8 {method} {0x00007fecc86d48b8} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
#18: 0x00007fecc81a0cb0 {method} {0x00007fecc81a0cb0} 'checkIndex' '(II)I' in 'java/util/Objects'
#19: 0x00007fecc86aa590 {method} {0x00007fecc86aa590} 'allTrue' '()Z' in 'jdk/incubator/vector/Byte256Vector$Byte256Mask'
#20: 0x00000008000d9bc0 'jdk/incubator/vector/AbstractSpecies'
#21: 0x00000008000d9fb0 'jdk/incubator/vector/ByteVector$ByteSpecies'
#22: 0x00007fecc87e3cd0 {method} {0x00007fecc87e3cd0} 'loopBound' '(I)I' in 'jdk/incubator/vector/AbstractSpecies'
#23: 0x00000008000d97a8 'jdk/incubator/vector/VectorSpecies'
#24: 0x00007fecc87e1730 {method} {0x00007fecc87e1730} 'loopBound' '(I)I' in 'jdk/incubator/vector/VectorSpecies'
#25: 0x00007fecc87e30b0 {method} {0x00007fecc87e30b0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
#26: 0x00007fecc87e1538 {method} {0x00007fecc87e1538} 'length' '()I' in 'jdk/incubator/vector/VectorSpecies'
#27: 0x00000008000dbee0 'jdk/incubator/vector/VectorMask'
#28: 0x00007fecc8681fb0 {method} {0x00007fecc8681fb0} 'allTrue' '()Z' in 'jdk/incubator/vector/VectorMask'
#29: 0x00007fecc87fec58 {method} {0x00007fecc87fec58} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
#30: 0x00007fecc86829e0 {method} {0x00007fecc86829e0} 'check' '(Ljdk/incubator/vector/VectorSpecies;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[time]  31 ms  [res] 1007739
------------------------------------------------------------------------
static test::copyMem_base([B[B)V
  interpreter_invocation_count:        1130
  invocation_counter:                  1130
  backedge_counter:                  289280
  decompile_count:                        0
  mdo size: 784 bytes

   0 iconst_0
   1 istore_2
   2 iload_2
   3 getstatic 7 <test.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
   6 aload_1
   7 arraylength
   8 invokeinterface 13 <jdk/incubator/vector/VectorSpecies.loopBound(I)I> 
  0    bci: 8    VirtualCallData    count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/ByteVector$ByteSpecies'(285067 1.00)
  13 if_icmpge 43
  56   bci: 13   BranchData         taken(907) displacement(184)
                                    not taken(284160)
  16 getstatic 7 <test.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
  19 aload_1
  20 iload_2
  21 invokestatic 19 <jdk/incubator/vector/ByteVector.fromArray(Ljdk/incubator/vector/VectorSpecies;[BI)Ljdk/incubator/vector/ByteVector;> 
  88   bci: 21   CounterData        count(284160)
  24 fast_aload_0
  25 iload_2
  26 invokevirtual 25 <jdk/incubator/vector/ByteVector.intoArray([BI)V> 
  104  bci: 26   VirtualCallData    count(284160) nonprofiled_count(0) entries(0)
  29 iload_2
  30 getstatic 7 <test.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
  33 invokeinterface 29 <jdk/incubator/vector/VectorSpecies.length()I> 
  160  bci: 33   VirtualCallData    count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/ByteVector$ByteSpecies'(284160 1.00)
  38 iadd
  39 istore_2
  40 goto 2
  216  bci: 40   JumpData           taken(284160) displacement(-216)
  43 aload_1
  44 arraylength
  45 iload_2
  46 isub
  47 istore_3
  48 iload_3
  49 ifle 83
  240  bci: 49   BranchData         taken(0) displacement(120)
                                    not taken(907)
  52 getstatic 7 <test.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
  55 iconst_1
  56 iload_3
  57 ishl
  58 iconst_1
  59 isub
  60 i2l
  61 invokestatic 33 <jdk/incubator/vector/VectorMask.fromLong(Ljdk/incubator/vector/VectorSpecies;J)Ljdk/incubator/vector/VectorMask;> 
  272  bci: 61   CounterData        count(907)
  64 astore #4
  66 getstatic 7 <test.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
  69 aload_1
  70 iload_2
  71 aload #4
  73 invokestatic 39 <jdk/incubator/vector/ByteVector.fromArray(Ljdk/incubator/vector/VectorSpecies;[BILjdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/ByteVector;> 
  288  bci: 73   CounterData        count(907)
  76 fast_aload_0
  77 iload_2
  78 aload #4
  80 invokevirtual 42 <jdk/incubator/vector/ByteVector.intoArray([BILjdk/incubator/vector/VectorMask;)V> 
  304  bci: 80   VirtualCallData    count(907) nonprofiled_count(0) entries(0)
  83 return
------------------------------------------------------------------------
Total MDO size: 784 bytes
