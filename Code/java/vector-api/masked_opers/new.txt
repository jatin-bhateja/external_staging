CompileCommand: print mask.workload9 bool print = true

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 261 ------------------------
{method}
 - this oop:          0x00007fb8cd40eee0
 - method holder:     'mask'
 - constants:         0x00007fb8cd40e0a8 constant pool [160]/operands[5] {0x00007fb8cd40e0a8} for 'mask' cache=0x00007fb8cd40f2d0
 - access:            0x81000009  public static 
 - name:              'workload9'
 - signature:         '([ZI)Z'
 - max stack:         5
 - max locals:        4
 - size of params:    2
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x00007fb92900dc00
 - adapters:          AHE@0x00007fb92c318840: 0xba i2c: 0x00007fb9290a91e0 c2i: 0x00007fb9290a92c3 c2iUV: 0x00007fb9290a928d c2iNCI: 0x00007fb9290a9300
 - compiled entry     0x00007fb9290a92c3
 - code size:         42
 - code start:        0x00007fb8cd40eeb0
 - code end (excl):   0x00007fb8cd40eeda
 - method data:       0x00007fb8cd40f708
 - checked ex length: 0
 - linenumber start:  0x00007fb8cd40eeda
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 261 -----------------------
#
#  bool ( bool[int:>=0]:exact *, int )
#
#r018 rsi:rsi   : parm 0: bool[int:>=0]:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 96 --
#r591 rsp+92: in_preserve
#r590 rsp+88: return address
#r589 rsp+84: in_preserve
#r588 rsp+80: saved fp register
#r587 rsp+76: pad2, stack alignment
#r586 rsp+72: pad2, stack alignment
#r585 rsp+68: Fixed slot 1
#r584 rsp+64: Fixed slot 0
#r607 rsp+60: spill
#r606 rsp+56: spill
#r605 rsp+52: spill
#r604 rsp+48: spill
#r603 rsp+44: spill
#r602 rsp+40: spill
#r601 rsp+36: spill
#r600 rsp+32: spill
#r599 rsp+28: spill
#r598 rsp+24: spill
#r597 rsp+20: outgoing argument
#r596 rsp+16: outgoing argument
#r595 rsp+12: outgoing argument
#r594 rsp+ 8: outgoing argument
#r593 rsp+ 4: outgoing argument
#r592 rsp+ 0: outgoing argument
#
000     N1: #	out( B1 ) <- in( B36 B33 B37 B29 B28 B38 B34 B35 B32 B26 B30 B31 )  Freq: 1

000     B1: #	out( B36 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (496 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

00c     movq    R10, RSI	# spill
00f     movl    [rsp + #24], RDX	# spill
013     movq    R11, java/lang/Class:exact *	# ptr
01d     movl    R8, [R11 + #112 (8-bit)]	# compressed ptr ! Field: mask.SPECIES
021     movl    R11, [R12 + R8 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
026     NullCheck R8

026     B2: #	out( B33 B3 ) <- in( B1 )  Freq: 0.999999
026     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/IntVector$IntSpecies: 0x00007fb8ac068dd0:Constant:exact *	# compressed klass ptr
02d     jne,u   B33  P=0.000000 C=-1.000000

033     B3: #	out( B37 B4 ) <- in( B2 )  Freq: 0.999999
033     movq    R11, RSI	# spill
036     movl    R10, [RSI + #12 (8-bit)]	# range
03a     NullCheck RSI

03a     B4: #	out( B29 B5 ) <- in( B3 )  Freq: 0.999998
03a     decode_heap_oop_not_null RBX,R8
03e     # checkcastPP of RBX
03e     movl    RCX, [RBX + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
041     subl    R10, RCX	# int
044     movl    RBP, R10	# spill
047     incl    RBP	# int
049     testl   RBP, RBP
04b     jl     B29  P=0.000001 C=-1.000000

051     B5: #	out( B28 B6 ) <- in( B4 )  Freq: 0.999997
051     cmpl    R10, #-1
055     je     B28  P=0.000001 C=-1.000000

05b     B6: #	out( B35 B7 ) <- in( B5 )  Freq: 0.999996
05b     movl    R10, [RBX + #48 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.maskType (constant)
05f     decode_heap_oop RSI,R10
08b     movq    RDX, java/lang/Class:exact *	# ptr
095     movl    R9, #16	# long (unsigned 32-bit)
09b     movq    R8, R11	# spill
09e     movq    RDI, R11	# spill
0a1     xorl    R11, R11	# int
0a4     movl    [rsp + #0], R11	# spill
0a8     movq    [rsp + #8], RBX	# spill
0ad     movq    R10, jdk/incubator/vector/VectorMask$$Lambda$31+0x00000008000d0638:exact *	# ptr
0b7     movq    [rsp + #16], R10	# spill
0bc     call,static  jdk.internal.vm.vector.VectorSupport::load
        # jdk.incubator.vector.VectorMask::fromArray @ bci:46 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # mask::workload9 @ bci:5 (line 60) L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_
        # OopMap {off=196/0xc4}

0c4     B7: #	out( B38 B8 ) <- in( B6 )  Freq: 0.999976
        # Block is sole successor of call
0c4     movl    R10, [RAX + #8 (8-bit)]	# compressed klass ptr
0c8     NullCheck RAX

0c8     B8: #	out( B34 B9 ) <- in( B7 )  Freq: 0.999975
0c8     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/Int256Vector$Int256Mask: 0x00007fb8ac0629e0:Constant:exact *	# compressed klass ptr
0cf     jne,u   B34  P=0.000000 C=-1.000000

0d5     B9: #	out( B27 B10 ) <- in( B8 )  Freq: 0.999975
0d5     # checkcastPP of RAX
0d5     movl    R10, [RAX + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0d9     load_vector XMM0,[R12 + R10 << 3 + #16] (compressed oop addressing)
0e0     replicateI XMM1,#0
0e4     # MachConstantBaseNode (empty encoding)
0e4     replicateI XMM2,#1
0f1     vallones XMM3
0f8     vector_loadmask_byte K7,XMM0
	
103     vector_blend  XMM0,XMM1,XMM3,K7	! using R11 and k2 as TEMP
109     vector_compared_evex K7,XMM0,XMM2,#0	!
110     vector_blend  XMM1,XMM1,XMM3,K7	! using R10 and k2 as TEMP
116     movl    R11, [rsp + #24]	# spill
        nop 	# 5 bytes pad for loops and calls
120     cmpl    R11, #4
124     je     B27  P=0.124990 C=1504.000000

12a     B10: #	out( B19 B11 ) <- in( B9 )  Freq: 0.874988
12a     cmpl    R11, #4
12e     jge     B19  P=0.500042 C=6016.000000

134     B11: #	out( B13 B12 ) <- in( B10 )  Freq: 0.437458
134     cmpl    R11, #1
138     jne,s   B13  P=0.750000 C=1504.000000

13a     B12: #	out( B25 ) <- in( B11 )  Freq: 0.109364
13a     vextractI RBP,XMM1,#1	! using XMM0 as TEMP
140     jmp     B25

145     B13: #	out( B16 B14 ) <- in( B11 )  Freq: 0.328093
145     cmpl    R11, #1
149     jge,s   B16  P=0.750000 C=1504.000000

14b     B14: #	out( B32 B15 ) <- in( B13 )  Freq: 0.0820233
14b     testl   R11, R11
14e     jne     B32  P=0.000001 C=1504.000000

154     B15: #	out( B25 ) <- in( B14 )  Freq: 0.0820233
154     vextractI RBP,XMM1,#0	! using XMM0 as TEMP
158     jmp     B25

15d     B16: #	out( B18 B17 ) <- in( B13 )  Freq: 0.24607
        nop 	# 3 bytes pad for loops and calls
160     cmpl    R11, #2
164     je,s   B18  P=0.500000 C=1504.000000

166     B17: #	out( B25 ) <- in( B16 )  Freq: 0.123035
166     vextractI RBP,XMM1,#3	! using XMM0 as TEMP
16c     jmp     B25

171     B18: #	out( B25 ) <- in( B16 )  Freq: 0.123035
171     vextractI RBP,XMM1,#2	! using XMM0 as TEMP
177     jmp     B25

17c     B19: #	out( B21 B20 ) <- in( B10 )  Freq: 0.437531
        nop 	# 4 bytes pad for loops and calls
180     cmpl    R11, #6
184     jne,s   B21  P=0.666741 C=1504.000000

186     B20: #	out( B25 ) <- in( B19 )  Freq: 0.145811
186     vextractI RBP,XMM1,#6	! using XMM0 as TEMP
192     jmp,s   B25

194     B21: #	out( B23 B22 ) <- in( B19 )  Freq: 0.291719
194     cmpl    R11, #6
198     jge,s   B23  P=0.666741 C=1504.000000

19a     B22: #	out( B25 ) <- in( B21 )  Freq: 0.0972182
19a     vextractI RBP,XMM1,#5	! using XMM0 as TEMP
1a6     jmp,s   B25

1a8     B23: #	out( B31 B24 ) <- in( B21 )  Freq: 0.194501
1a8     cmpl    R11, #7
1ac     jne     B31  P=0.000001 C=1505.000000

1b2     B24: #	out( B25 ) <- in( B23 )  Freq: 0.194501
1b2     vextractI RBP,XMM1,#7	! using XMM0 as TEMP

1be     B25: #	out( B30 B26 ) <- in( B24 B20 B22 B27 B17 B18 B12 B15 )  Freq: 0.999975
        nop 	# 2 bytes pad for loops and calls
1c0     cmpl    RBP, #-1
1c3     je     B30  P=0.000000 C=8615.000000

1c9     B26: #	out( N1 ) <- in( B25 )  Freq: 0.999974
1c9     xorl    RAX, RAX	# int
1cb     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

1e0     ret

1e1     B27: #	out( B25 ) <- in( B9 )  Freq: 0.124986
1e1     vextractI RBP,XMM1,#4	! using XMM0 as TEMP
1eb     jmp,s   B25

1ed     B28: #	out( N1 ) <- in( B5 )  Freq: 1.01328e-06
1ed     movl    RSI, #-28	# int
1f2     movq    [rsp + #32], R11	# spill
1f7     movq    [rsp + #40], RBX	# spill
1fc     movl    [rsp + #28], RCX	# spill
200     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 359) L[0]=_ L[1]=_ STK[0]=#0 STK[1]=RBP STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 52) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.VectorMask::fromArray @ bci:16 (line 207) L[0]=_ L[1]=rsp + #32 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #28
        # mask::workload9 @ bci:5 (line 60) L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_
        # OopMap {[32]=Oop [40]=Oop off=520/0x208}
208     stop	# ShouldNotReachHere

21c     B29: #	out( N1 ) <- in( B4 )  Freq: 9.99998e-07
21c     movl    RSI, #-52	# int
221     movq    [rsp + #32], R11	# spill
226     movq    [rsp + #40], RBX	# spill
22b     movl    [rsp + #28], RCX	# spill
        nop 	# 1 bytes pad for loops and calls
230     call,static  wrapper for: uncommon_trap(reason='intrinsic_or_type_checked_inlining' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 359) L[0]=_ L[1]=_ STK[0]=#0 STK[1]=RBP STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 52) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.VectorMask::fromArray @ bci:16 (line 207) L[0]=_ L[1]=rsp + #32 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #28
        # mask::workload9 @ bci:5 (line 60) L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_
        # OopMap {[32]=Oop [40]=Oop off=568/0x238}
238     stop	# ShouldNotReachHere

24c     B30: #	out( N1 ) <- in( B25 )  Freq: 4.76825e-07
24c     movl    RSI, #-187	# int
        nop 	# 3 bytes pad for loops and calls
254     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # mask::workload9 @ bci:33 (line 62) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP STK[1]=#-1
        # OopMap {off=604/0x25c}
25c     stop	# ShouldNotReachHere

270     B31: #	out( N1 ) <- in( B23 )  Freq: 1.94501e-07
270     movl    RSI, #-187	# int
275     movl    RBP, R11	# spill
278     vmovdqu [rsp + 32],XMM1	# spill
        nop 	# 2 bytes pad for loops and calls
280     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.Int256Vector::lane @ bci:1 (line 491) L[0]=#ScObj0 L[1]=RBP STK[0]=RBP
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #32 }
        # mask::workload9 @ bci:29 (line 62) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {off=648/0x288}
288     stop	# ShouldNotReachHere

29c     B32: #	out( N1 ) <- in( B14 )  Freq: 8.20233e-08
29c     movl    RSI, #-187	# int
2a1     movl    RBP, R11	# spill
2a4     vmovdqu [rsp + 32],XMM1	# spill
        nop 	# 2 bytes pad for loops and calls
2ac     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.Int256Vector::lane @ bci:1 (line 491) L[0]=#ScObj0 L[1]=RBP STK[0]=RBP
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #32 }
        # mask::workload9 @ bci:29 (line 62) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {off=692/0x2b4}
2b4     stop	# ShouldNotReachHere

2c8     B33: #	out( N1 ) <- in( B2 )  Freq: 1e-35
2c8     movl    RSI, #-34	# int
2cd     movl    RBP, RDX	# spill
2cf     movq    [rsp + #24], R10	# spill
2d4     movl    [rsp + #32], R8	# spill
        nop 	# 3 bytes pad for loops and calls
2dc     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:1 (line 205) L[0]=_ L[1]=rsp + #24 L[2]=#0 L[3]=_ L[4]=_ STK[0]=rsp + #32
        # mask::workload9 @ bci:5 (line 60) L[0]=_ L[1]=RBP L[2]=_ L[3]=_
        # OopMap {[24]=Oop [32]=NarrowOop off=740/0x2e4}
2e4     stop	# ShouldNotReachHere

2f8     B34: #	out( N1 ) <- in( B8 )  Freq: 1e-35
2f8     movl    RSI, #-34	# int
2fd     movl    RBP, [rsp + #24]	# spill
301     movq    [rsp + #24], RAX	# spill
        nop 	# 2 bytes pad for loops and calls
308     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:49 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #24
        # mask::workload9 @ bci:5 (line 60) L[0]=_ L[1]=RBP L[2]=_ L[3]=_
        # OopMap {[24]=Oop off=784/0x310}
310     stop	# ShouldNotReachHere

324     B35: #	out( N1 ) <- in( B6 )  Freq: 9.99996e-06
324     # exception oop is in rax; no code emitted
324     movq    RSI, RAX	# spill
327     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp

32f     jmp     rethrow_stub

334     B36: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
334     movl    RSI, #-12	# int
339     movl    RBP, RDX	# spill
33b     movq    [rsp + #24], R10	# spill
340     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:1 (line 205) L[0]=_ L[1]=rsp + #24 L[2]=#0 L[3]=_ L[4]=_ STK[0]=#NULL
        # mask::workload9 @ bci:5 (line 60) L[0]=_ L[1]=RBP L[2]=_ L[3]=_
        # OopMap {[24]=Oop off=840/0x348}
348     stop	# ShouldNotReachHere

35c     B37: #	out( N1 ) <- in( B3 )  Freq: 1.01328e-06
35c     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
364     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:15 (line 207) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL
        # mask::workload9 @ bci:5 (line 60) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {off=876/0x36c}
36c     stop	# ShouldNotReachHere

380     B38: #	out( N1 ) <- in( B7 )  Freq: 1.01325e-06
380     movl    RSI, #-12	# int
385     movl    RBP, [rsp + #24]	# spill
        nop 	# 3 bytes pad for loops and calls
38c     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:49 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL
        # mask::workload9 @ bci:5 (line 60) L[0]=_ L[1]=RBP L[2]=_ L[3]=_
        # OopMap {off=916/0x394}
394     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    1897  261             mask::workload9 (42 bytes)
 total in heap  [0x00007fb92915cb10,0x00007fb92915d778] = 3176
 relocation     [0x00007fb92915cc88,0x00007fb92915cd68] = 224
 constants      [0x00007fb92915cd80,0x00007fb92915cda0] = 32
 main code      [0x00007fb92915cda0,0x00007fb92915d160] = 960
 stub code      [0x00007fb92915d160,0x00007fb92915d188] = 40
 oops           [0x00007fb92915d188,0x00007fb92915d198] = 16
 metadata       [0x00007fb92915d198,0x00007fb92915d1f8] = 96
 scopes data    [0x00007fb92915d1f8,0x00007fb92915d350] = 344
 scopes pcs     [0x00007fb92915d350,0x00007fb92915d730] = 992
 dependencies   [0x00007fb92915d730,0x00007fb92915d740] = 16
 handler table  [0x00007fb92915d740,0x00007fb92915d758] = 24
 nul chk table  [0x00007fb92915d758,0x00007fb92915d778] = 32

--------------------------------------------------------------------------------

[Constant Pool]
             Address          hex4                    hex8      
  0x00007fb92915cd80:   0x00000001      0x0000000100000001      
  0x00007fb92915cd84:   0x00000001                              
  0x00007fb92915cd88:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007fb92915cd8c:   0xf4f4f4f4                              
  0x00007fb92915cd90:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007fb92915cd94:   0xf4f4f4f4                              
  0x00007fb92915cd98:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007fb92915cd9c:   0xf4f4f4f4                              

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007fb8cd40eee0} 'workload9' '([ZI)Z' in 'mask'
  # parm0:    rsi:rsi   = '[Z'
  # parm1:    rdx       = int
  #           [sp+0x60]  (sp of caller)
 ;; N1: #	out( B1 ) <- in( B36 B33 B37 B29 B28 B38 B34 B35 B32 B26 B30 B31 )  Freq: 1
 ;; B1: #	out( B36 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fb92915cda0:   mov    %eax,-0x16000(%rsp)          ;   {no_reloc}
  0x00007fb92915cda7:   push   %rbp
  0x00007fb92915cda8:   sub    $0x50,%rsp                   ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915cdac:   mov    %rsi,%r10
  0x00007fb92915cdaf:   mov    %edx,0x18(%rsp)
  0x00007fb92915cdb3:   movabs $0x1015830a8,%r11            ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
                                                            ;   {oop(a 'java/lang/Class'{0x00000001015830a8} = 'mask')}
  0x00007fb92915cdbd:   mov    0x70(%r11),%r8d              ;*isub {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@41 (line 52)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915cdc1:   mov    0x8(%r12,%r8,8),%r11d        ; implicit exception: dispatches to 0x00007fb92915d0d4
 ;; B2: #	out( B33 B3 ) <- in( B1 )  Freq: 0.999999
  0x00007fb92915cdc6:   cmp    $0xca890,%r11d               ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
                                                            ;   {metadata('jdk/incubator/vector/IntVector$IntSpecies')}
  0x00007fb92915cdcd:   jne    0x00007fb92915d068
 ;; B3: #	out( B37 B4 ) <- in( B2 )  Freq: 0.999999
  0x00007fb92915cdd3:   mov    %rsi,%r11
  0x00007fb92915cdd6:   mov    0xc(%rsi),%r10d              ; implicit exception: dispatches to 0x00007fb92915d0fc
 ;; B4: #	out( B29 B5 ) <- in( B3 )  Freq: 0.999998
  0x00007fb92915cdda:   lea    (%r12,%r8,8),%rbx
  0x00007fb92915cdde:   mov    0xc(%rbx),%ecx               ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915cde1:   sub    %ecx,%r10d
  0x00007fb92915cde4:   mov    %r10d,%ebp
  0x00007fb92915cde7:   inc    %ebp
  0x00007fb92915cde9:   test   %ebp,%ebp
  0x00007fb92915cdeb:   jl     0x00007fb92915cfbc
 ;; B5: #	out( B28 B6 ) <- in( B4 )  Freq: 0.999997
  0x00007fb92915cdf1:   cmp    $0xffffffff,%r10d
  0x00007fb92915cdf5:   je     0x00007fb92915cf8d
 ;; B6: #	out( B35 B7 ) <- in( B5 )  Freq: 0.999996
  0x00007fb92915cdfb:   mov    0x30(%rbx),%r10d
  0x00007fb92915cdff:   mov    %r10,%rsi
  0x00007fb92915ce02:   push   %r10
  0x00007fb92915ce04:   cmp    0x9cf5095(%rip),%r12        # 0x00007fb932e51ea0
                                                            ;   {external_word}
  0x00007fb92915ce0b:   je     0x00007fb92915ce25
 ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fb92915ce11:   movabs $0x7fb9325b99c8,%rdi         ;   {external_word}
  0x00007fb92915ce1b:   and    $0xfffffffffffffff0,%rsp
  0x00007fb92915ce1f:   callq  0x00007fb931b98f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb92915ce24:   hlt    
  0x00007fb92915ce25:   pop    %r10
  0x00007fb92915ce27:   shl    $0x3,%rsi                    ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
  0x00007fb92915ce2b:   movabs $0x1010002a0,%rdx            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
                                                            ; - mask::workload9@5 (line 60)
                                                            ;   {oop(a 'java/lang/Class'{0x00000001010002a0} = int)}
  0x00007fb92915ce35:   mov    $0x10,%r9d                   ;*invokevirtual laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915ce3b:   mov    %r11,%r8
  0x00007fb92915ce3e:   mov    %r11,%rdi
  0x00007fb92915ce41:   xor    %r11d,%r11d
  0x00007fb92915ce44:   mov    %r11d,(%rsp)
  0x00007fb92915ce48:   mov    %rbx,0x8(%rsp)
  0x00007fb92915ce4d:   movabs $0x10159f500,%r10            ;   {oop(a 'jdk/incubator/vector/VectorMask$$Lambda$31+0x00000008000d0638'{0x000000010159f500})}
  0x00007fb92915ce57:   mov    %r10,0x10(%rsp)
  0x00007fb92915ce5c:   vzeroupper 
  0x00007fb92915ce5f:   callq  0x00007fb929156bc0           ; ImmutableOopMap {}
                                                            ;*invokestatic load {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
                                                            ; - mask::workload9@5 (line 60)
                                                            ;   {static_call}
 ;; B7: #	out( B38 B8 ) <- in( B6 )  Freq: 0.999976
  0x00007fb92915ce64:   mov    0x8(%rax),%r10d              ; implicit exception: dispatches to 0x00007fb92915d120
 ;; B8: #	out( B34 B9 ) <- in( B7 )  Freq: 0.999975
  0x00007fb92915ce68:   cmp    $0xce3d8,%r10d               ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
                                                            ;   {metadata('jdk/incubator/vector/Int256Vector$Int256Mask')}
  0x00007fb92915ce6f:   jne    0x00007fb92915d098           ;*invokestatic fromArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - mask::workload9@5 (line 60)
 ;; B9: #	out( B27 B10 ) <- in( B8 )  Freq: 0.999975
  0x00007fb92915ce75:   mov    0xc(%rax),%r10d              ;*invokevirtual elementType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915ce79:   vmovq  0x10(%r12,%r10,8),%xmm0
  0x00007fb92915ce80:   vpxor  %ymm1,%ymm1,%ymm1
  0x00007fb92915ce84:   vmovq  -0x10c(%rip),%xmm2        # 0x00007fb92915cd80
                                                            ;   {section_word}
  0x00007fb92915ce8c:   vpbroadcastd %xmm2,%ymm2
  0x00007fb92915ce91:   vpternlogd $0xff,%ymm3,%ymm3,%ymm3  ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
  0x00007fb92915ce98:   vpcmpb $0x0,-0xad943(%rip),%xmm0,%k7        # Stub::vector_mask_cmp_bits
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - mask::workload9@5 (line 60)
                                                            ;   {external_word}
  0x00007fb92915cea3:   vpblendmd %ymm3,%ymm1,%ymm0{%k7}
  0x00007fb92915cea9:   vpcmpeqd %ymm2,%ymm0,%k7            ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
  0x00007fb92915ceb0:   vpblendmd %ymm3,%ymm1,%ymm1{%k7}    ;*invokevirtual laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915ceb6:   mov    0x18(%rsp),%r11d
  0x00007fb92915cebb:   nop
  0x00007fb92915cebc:   nop
  0x00007fb92915cebd:   nop
  0x00007fb92915cebe:   nop
  0x00007fb92915cebf:   nop
  0x00007fb92915cec0:   cmp    $0x4,%r11d
  0x00007fb92915cec4:   je     0x00007fb92915cf81
 ;; B10: #	out( B19 B11 ) <- in( B9 )  Freq: 0.874988
  0x00007fb92915ceca:   cmp    $0x4,%r11d
  0x00007fb92915cece:   jge    0x00007fb92915cf1c
 ;; B11: #	out( B13 B12 ) <- in( B10 )  Freq: 0.437458
  0x00007fb92915ced4:   cmp    $0x1,%r11d
  0x00007fb92915ced8:   jne    0x00007fb92915cee5           ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
 ;; B12: #	out( B25 ) <- in( B11 )  Freq: 0.109364
  0x00007fb92915ceda:   vpextrd $0x1,%xmm1,%ebp             ;*invokestatic checkFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915cee0:   jmpq   0x00007fb92915cf5e
 ;; B13: #	out( B16 B14 ) <- in( B11 )  Freq: 0.328093
  0x00007fb92915cee5:   cmp    $0x1,%r11d
  0x00007fb92915cee9:   jge    0x00007fb92915cefd
 ;; B14: #	out( B32 B15 ) <- in( B13 )  Freq: 0.0820233
  0x00007fb92915ceeb:   test   %r11d,%r11d
  0x00007fb92915ceee:   jne    0x00007fb92915d03c
 ;; B15: #	out( B25 ) <- in( B14 )  Freq: 0.0820233
  0x00007fb92915cef4:   vmovd  %xmm1,%ebp
  0x00007fb92915cef8:   jmpq   0x00007fb92915cf5e
 ;; B16: #	out( B18 B17 ) <- in( B13 )  Freq: 0.24607
  0x00007fb92915cefd:   nop
  0x00007fb92915cefe:   nop
  0x00007fb92915ceff:   nop
  0x00007fb92915cf00:   cmp    $0x2,%r11d
  0x00007fb92915cf04:   je     0x00007fb92915cf11           ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
 ;; B17: #	out( B25 ) <- in( B16 )  Freq: 0.123035
  0x00007fb92915cf06:   vpextrd $0x3,%xmm1,%ebp             ;*invokestatic checkFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915cf0c:   jmpq   0x00007fb92915cf5e           ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
 ;; B18: #	out( B25 ) <- in( B16 )  Freq: 0.123035
  0x00007fb92915cf11:   vpextrd $0x2,%xmm1,%ebp             ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@-1 (line 49)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915cf17:   jmpq   0x00007fb92915cf5e
 ;; B19: #	out( B21 B20 ) <- in( B10 )  Freq: 0.437531
  0x00007fb92915cf1c:   nop
  0x00007fb92915cf1d:   nop
  0x00007fb92915cf1e:   nop
  0x00007fb92915cf1f:   nop
  0x00007fb92915cf20:   cmp    $0x6,%r11d
  0x00007fb92915cf24:   jne    0x00007fb92915cf34           ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
 ;; B20: #	out( B25 ) <- in( B19 )  Freq: 0.145811
  0x00007fb92915cf26:   vextractf128 $0x1,%ymm1,%xmm0
  0x00007fb92915cf2c:   vpextrd $0x2,%xmm0,%ebp             ;*invokestatic checkFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915cf32:   jmp    0x00007fb92915cf5e
 ;; B21: #	out( B23 B22 ) <- in( B19 )  Freq: 0.291719
  0x00007fb92915cf34:   cmp    $0x6,%r11d
  0x00007fb92915cf38:   jge    0x00007fb92915cf48           ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
 ;; B22: #	out( B25 ) <- in( B21 )  Freq: 0.0972182
  0x00007fb92915cf3a:   vextractf128 $0x1,%ymm1,%xmm0
  0x00007fb92915cf40:   vpextrd $0x1,%xmm0,%ebp             ;*invokestatic checkFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915cf46:   jmp    0x00007fb92915cf5e
 ;; B23: #	out( B31 B24 ) <- in( B21 )  Freq: 0.194501
  0x00007fb92915cf48:   cmp    $0x7,%r11d
  0x00007fb92915cf4c:   jne    0x00007fb92915d010           ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
 ;; B24: #	out( B25 ) <- in( B23 )  Freq: 0.194501
  0x00007fb92915cf52:   vextractf128 $0x1,%ymm1,%xmm0
  0x00007fb92915cf58:   vpextrd $0x3,%xmm0,%ebp             ;*invokevirtual laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
                                                            ; - mask::workload9@5 (line 60)
 ;; B25: #	out( B30 B26 ) <- in( B24 B20 B22 B27 B17 B18 B12 B15 )  Freq: 0.999975
  0x00007fb92915cf5e:   nop
  0x00007fb92915cf5f:   nop
  0x00007fb92915cf60:   cmp    $0xffffffff,%ebp
  0x00007fb92915cf63:   je     0x00007fb92915cfec
 ;; B26: #	out( N1 ) <- in( B25 )  Freq: 0.999974
  0x00007fb92915cf69:   xor    %eax,%eax
  0x00007fb92915cf6b:   vzeroupper 
  0x00007fb92915cf6e:   add    $0x50,%rsp
  0x00007fb92915cf72:   pop    %rbp
  0x00007fb92915cf73:   cmp    0x388(%r15),%rsp             ;   {poll_return}
  0x00007fb92915cf7a:   ja     0x00007fb92915d148
  0x00007fb92915cf80:   retq                                ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
 ;; B27: #	out( B25 ) <- in( B9 )  Freq: 0.124986
  0x00007fb92915cf81:   vextractf128 $0x1,%ymm1,%xmm0
  0x00007fb92915cf87:   vmovd  %xmm0,%ebp                   ;*invokestatic checkFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915cf8b:   jmp    0x00007fb92915cf5e           ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
 ;; B28: #	out( N1 ) <- in( B5 )  Freq: 1.01328e-06
  0x00007fb92915cf8d:   mov    $0xffffffe4,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915cf92:   mov    %r11,0x20(%rsp)
  0x00007fb92915cf97:   mov    %rbx,0x28(%rsp)
  0x00007fb92915cf9c:   mov    %ecx,0x1c(%rsp)
  0x00007fb92915cfa0:   vzeroupper 
  0x00007fb92915cfa3:   callq  0x00007fb92911e940           ; ImmutableOopMap {[32]=Oop [40]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - mask::workload9@5 (line 60)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb92915cfa8:   movabs $0x7fb93240c980,%rdi         ;   {external_word}
  0x00007fb92915cfb2:   and    $0xfffffffffffffff0,%rsp
  0x00007fb92915cfb6:   callq  0x00007fb931b98f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb92915cfbb:   hlt    
 ;; B29: #	out( N1 ) <- in( B4 )  Freq: 9.99998e-07
  0x00007fb92915cfbc:   mov    $0xffffffcc,%esi
  0x00007fb92915cfc1:   mov    %r11,0x20(%rsp)
  0x00007fb92915cfc6:   mov    %rbx,0x28(%rsp)
  0x00007fb92915cfcb:   mov    %ecx,0x1c(%rsp)              ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
  0x00007fb92915cfcf:   nop
  0x00007fb92915cfd0:   vzeroupper 
  0x00007fb92915cfd3:   callq  0x00007fb92911e940           ; ImmutableOopMap {[32]=Oop [40]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - mask::workload9@5 (line 60)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb92915cfd8:   movabs $0x7fb93240c980,%rdi         ;   {external_word}
  0x00007fb92915cfe2:   and    $0xfffffffffffffff0,%rsp
  0x00007fb92915cfe6:   callq  0x00007fb931b98f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb92915cfeb:   hlt                                 ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
 ;; B30: #	out( N1 ) <- in( B25 )  Freq: 4.76825e-07
  0x00007fb92915cfec:   mov    $0xffffff45,%esi             ;*invokestatic fromArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915cff1:   nop
  0x00007fb92915cff2:   nop
  0x00007fb92915cff3:   nop
  0x00007fb92915cff4:   vzeroupper 
  0x00007fb92915cff7:   callq  0x00007fb92911e940           ; ImmutableOopMap {}
                                                            ;*if_icmpne {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) mask::workload9@33 (line 62)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb92915cffc:   movabs $0x7fb93240c980,%rdi         ;   {external_word}
  0x00007fb92915d006:   and    $0xfffffffffffffff0,%rsp
  0x00007fb92915d00a:   callq  0x00007fb931b98f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb92915d00f:   hlt    
 ;; B31: #	out( N1 ) <- in( B23 )  Freq: 1.94501e-07
  0x00007fb92915d010:   mov    $0xffffff45,%esi             ;*invokevirtual laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915d015:   mov    %r11d,%ebp
  0x00007fb92915d018:   vmovdqu %ymm1,0x20(%rsp)            ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
  0x00007fb92915d01e:   nop
  0x00007fb92915d01f:   nop
  0x00007fb92915d020:   vzeroupper 
  0x00007fb92915d023:   callq  0x00007fb92911e940           ; ImmutableOopMap {}
                                                            ;*tableswitch {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.Int256Vector::lane@1 (line 491)
                                                            ; - mask::workload9@29 (line 62)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb92915d028:   movabs $0x7fb93240c980,%rdi         ;   {external_word}
  0x00007fb92915d032:   and    $0xfffffffffffffff0,%rsp
  0x00007fb92915d036:   callq  0x00007fb931b98f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb92915d03b:   hlt                                 ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
 ;; B32: #	out( N1 ) <- in( B14 )  Freq: 8.20233e-08
  0x00007fb92915d03c:   mov    $0xffffff45,%esi             ;*invokevirtual laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915d041:   mov    %r11d,%ebp
  0x00007fb92915d044:   vmovdqu %ymm1,0x20(%rsp)            ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
  0x00007fb92915d04a:   nop
  0x00007fb92915d04b:   nop
  0x00007fb92915d04c:   vzeroupper 
  0x00007fb92915d04f:   callq  0x00007fb92911e940           ; ImmutableOopMap {}
                                                            ;*tableswitch {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.Int256Vector::lane@1 (line 491)
                                                            ; - mask::workload9@29 (line 62)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb92915d054:   movabs $0x7fb93240c980,%rdi         ;   {external_word}
  0x00007fb92915d05e:   and    $0xfffffffffffffff0,%rsp
  0x00007fb92915d062:   callq  0x00007fb931b98f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb92915d067:   hlt    
 ;; B33: #	out( N1 ) <- in( B2 )  Freq: 1e-35
  0x00007fb92915d068:   mov    $0xffffffde,%esi
  0x00007fb92915d06d:   mov    %edx,%ebp
  0x00007fb92915d06f:   mov    %r10,0x18(%rsp)
  0x00007fb92915d074:   mov    %r8d,0x20(%rsp)              ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
  0x00007fb92915d079:   nop
  0x00007fb92915d07a:   nop
  0x00007fb92915d07b:   nop
  0x00007fb92915d07c:   vzeroupper 
  0x00007fb92915d07f:   callq  0x00007fb92911e940           ; ImmutableOopMap {[24]=Oop [32]=NarrowOop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
                                                            ; - mask::workload9@5 (line 60)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb92915d084:   movabs $0x7fb93240c980,%rdi         ;   {external_word}
  0x00007fb92915d08e:   and    $0xfffffffffffffff0,%rsp
  0x00007fb92915d092:   callq  0x00007fb931b98f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb92915d097:   hlt                                 ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
 ;; B34: #	out( N1 ) <- in( B8 )  Freq: 1e-35
  0x00007fb92915d098:   mov    $0xffffffde,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915d09d:   mov    0x18(%rsp),%ebp
  0x00007fb92915d0a1:   mov    %rax,0x18(%rsp)              ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
  0x00007fb92915d0a6:   nop
  0x00007fb92915d0a7:   nop
  0x00007fb92915d0a8:   vzeroupper 
  0x00007fb92915d0ab:   callq  0x00007fb92911e940           ; ImmutableOopMap {[24]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - mask::workload9@5 (line 60)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb92915d0b0:   movabs $0x7fb93240c980,%rdi         ;   {external_word}
  0x00007fb92915d0ba:   and    $0xfffffffffffffff0,%rsp
  0x00007fb92915d0be:   callq  0x00007fb931b98f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb92915d0c3:   hlt                                 ;*getstatic SPECIES {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - mask::workload9@0 (line 60)
 ;; B35: #	out( N1 ) <- in( B6 )  Freq: 9.99996e-06
  0x00007fb92915d0c4:   mov    %rax,%rsi
  0x00007fb92915d0c7:   vzeroupper 
  0x00007fb92915d0ca:   add    $0x50,%rsp
  0x00007fb92915d0ce:   pop    %rbp                         ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
  0x00007fb92915d0cf:   jmpq   0x00007fb92907a5a0           ;   {runtime_call _rethrow_Java}
 ;; B36: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
  0x00007fb92915d0d4:   mov    $0xfffffff4,%esi
  0x00007fb92915d0d9:   mov    %edx,%ebp
  0x00007fb92915d0db:   mov    %r10,0x18(%rsp)
  0x00007fb92915d0e0:   vzeroupper 
  0x00007fb92915d0e3:   callq  0x00007fb92911e940           ; ImmutableOopMap {[24]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
                                                            ; - mask::workload9@5 (line 60)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb92915d0e8:   movabs $0x7fb93240c980,%rdi         ;   {external_word}
  0x00007fb92915d0f2:   and    $0xfffffffffffffff0,%rsp
  0x00007fb92915d0f6:   callq  0x00007fb931b98f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb92915d0fb:   hlt                                 ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
 ;; B37: #	out( N1 ) <- in( B3 )  Freq: 1.01328e-06
  0x00007fb92915d0fc:   mov    $0xfffffff6,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
                                                            ; - mask::workload9@5 (line 60)
  0x00007fb92915d101:   nop
  0x00007fb92915d102:   nop
  0x00007fb92915d103:   nop
  0x00007fb92915d104:   vzeroupper 
  0x00007fb92915d107:   callq  0x00007fb92911e940           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@15 (line 207)
                                                            ; - mask::workload9@5 (line 60)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb92915d10c:   movabs $0x7fb93240c980,%rdi         ;   {external_word}
  0x00007fb92915d116:   and    $0xfffffffffffffff0,%rsp
  0x00007fb92915d11a:   callq  0x00007fb931b98f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb92915d11f:   hlt    
 ;; B38: #	out( N1 ) <- in( B7 )  Freq: 1.01325e-06
  0x00007fb92915d120:   mov    $0xfffffff4,%esi
  0x00007fb92915d125:   mov    0x18(%rsp),%ebp              ;*invokestatic extract {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
                                                            ; - jdk.incubator.vector.Int256Vector::lane@50 (line 492)
                                                            ; - mask::workload9@29 (line 62)
  0x00007fb92915d129:   nop
  0x00007fb92915d12a:   nop
  0x00007fb92915d12b:   nop
  0x00007fb92915d12c:   vzeroupper 
  0x00007fb92915d12f:   callq  0x00007fb92911e940           ; ImmutableOopMap {}
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - mask::workload9@5 (line 60)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007fb92915d134:   movabs $0x7fb93240c980,%rdi         ;   {external_word}
  0x00007fb92915d13e:   and    $0xfffffffffffffff0,%rsp
  0x00007fb92915d142:   callq  0x00007fb931b98f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fb92915d147:   hlt                                 ;*synchronization entry
                                                            ; - mask::workload9@-1 (line 60)
  0x00007fb92915d148:   movabs $0x7fb92915cf73,%r10         ;   {internal_word}
  0x00007fb92915d152:   mov    %r10,0x3a0(%r15)
  0x00007fb92915d159:   jmpq   0x00007fb92911d6a0           ;   {runtime_call SafepointBlob}
  0x00007fb92915d15e:   hlt    
  0x00007fb92915d15f:   hlt    
[Stub Code]
  0x00007fb92915d160:   movabs $0x0,%rbx                    ;   {no_reloc}
  0x00007fb92915d16a:   jmpq   0x00007fb92915d16a           ;   {runtime_call}
[Exception Handler]
  0x00007fb92915d16f:   jmpq   0x00007fb929081720           ;   {runtime_call ExceptionBlob}
[Deopt Handler Code]
  0x00007fb92915d174:   callq  0x00007fb92915d179
  0x00007fb92915d179:   subq   $0x5,(%rsp)
  0x00007fb92915d17e:   jmpq   0x00007fb92911ec60           ;   {runtime_call DeoptimizationBlob}
  0x00007fb92915d183:   hlt    
  0x00007fb92915d184:   hlt    
  0x00007fb92915d185:   hlt    
  0x00007fb92915d186:   hlt    
  0x00007fb92915d187:   hlt    
--------------------------------------------------------------------------------
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007fb92915d188:   0x0000000101590918 a 'java/lang/Class'{0x0000000101590918} = 'jdk/incubator/vector/Int256Vector'
  0x00007fb92915d190:   0x00000001014bcd38 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000001014bcd38}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007fb92915d198:   0x00007fb8cd40eee0 {method} {0x00007fb8cd40eee0} 'workload9' '([ZI)Z' in 'mask'
  0x00007fb92915d1a0:   0x00007fb8cd436420 {method} {0x00007fb8cd436420} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[ZI)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
  0x00007fb92915d1a8:   0x00007fb8cd41e250 {method} {0x00007fb8cd41e250} 'lane' '(I)I' in 'jdk/incubator/vector/Int256Vector'
  0x00007fb92915d1b0:   0x00007fb8cd41e330 {method} {0x00007fb8cd41e330} 'laneHelper' '(I)I' in 'jdk/incubator/vector/Int256Vector'
  0x00007fb92915d1b8:   0x00007fb8cd628820 {method} {0x00007fb8cd628820} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
  0x00007fb92915d1c0:   0x00000008000ca890 'jdk/incubator/vector/IntVector$IntSpecies'
  0x00007fb92915d1c8:   0x00000008000ce3d8 'jdk/incubator/vector/Int256Vector$Int256Mask'
  0x00007fb92915d1d0:   0x00007fb8cd15e498 {method} {0x00007fb8cd15e498} 'checkIndex' '(II)I' in 'java/util/Objects'
  0x00007fb92915d1d8:   0x00000008000d7760 'jdk/incubator/vector/VectorOperators$ComparisonImpl'
  0x00007fb92915d1e0:   0x00007fb8cd6a5a78 {method} {0x00007fb8cd6a5a78} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007fb92915d1e8:   0x00000008000d6380 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007fb92915d1f0:   0x00007fb8cd6a5b48 {method} {0x00007fb8cd6a5b48} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007fb92915cd9f offset=ffffffff bits=0):
PcDesc(pc=0x00007fb92915cdac offset=c bits=0):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915cdbd offset=1d bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915cdc1 offset=21 bits=0):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@41 (line 52)
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915cdcd offset=2d bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915cde1 offset=41 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915ce2b offset=8b bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915ce35 offset=95 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915ce3b offset=9b bits=0):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915ce64 offset=c4 bits=4):
   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   mask::workload9@5 (line 60)
   Locals
    - l0: empty
    - l1: stack[24]
    - l2: empty
    - l3: empty
PcDesc(pc=0x00007fb92915ce6f offset=cf bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915ce75 offset=d5 bits=0):
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915ce79 offset=d9 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915ce98 offset=f8 bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915cea3 offset=103 bits=0):
   java.util.Objects::checkIndex@3 (line 359)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915ceb0 offset=110 bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915ceb6 offset=116 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915ceda offset=13a bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915cee0 offset=140 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915cf06 offset=166 bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915cf0c offset=16c bits=0):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915cf11 offset=171 bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915cf17 offset=177 bits=0):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@-1 (line 49)
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915cf26 offset=186 bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915cf32 offset=192 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915cf3a offset=19a bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915cf46 offset=1a6 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915cf52 offset=1b2 bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915cf5e offset=1be bits=0):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915cf81 offset=1e1 bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915cf8b offset=1eb bits=0):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915cf8d offset=1ed bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915cf92 offset=1f2 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915cfa8 offset=208 bits=0):
   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[28]
   mask::workload9@5 (line 60)
   Locals
    - l0: empty
    - l1: stack[24]
    - l2: empty
    - l3: empty
PcDesc(pc=0x00007fb92915cfcf offset=22f bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915cfd8 offset=238 bits=0):
   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[28]
   mask::workload9@5 (line 60)
   Locals
    - l0: empty
    - l1: stack[24]
    - l2: empty
    - l3: empty
PcDesc(pc=0x00007fb92915cfec offset=24c bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915cff1 offset=251 bits=0):
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915cffc offset=25c bits=1):
   mask::workload9@33 (line 62)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: reg rbp [10],int
    - @1: -1
PcDesc(pc=0x00007fb92915d015 offset=275 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915d01e offset=27e bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915d028 offset=288 bits=1):
   jdk.incubator.vector.Int256Vector::lane@1 (line 491)  reexecute=true
   Locals
    - l0: obj[206]
    - l1: reg rbp [10],int
   Expression stack
    - @0: reg rbp [10],int
   mask::workload9@29 (line 62)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Objects
    - 206: jdk.incubator.vector.Int256Vector stack[32],vector
PcDesc(pc=0x00007fb92915d03c offset=29c bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915d041 offset=2a1 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915d04a offset=2aa bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915d054 offset=2b4 bits=1):
   jdk.incubator.vector.Int256Vector::lane@1 (line 491)  reexecute=true
   Locals
    - l0: obj[134]
    - l1: reg rbp [10],int
   Expression stack
    - @0: reg rbp [10],int
   mask::workload9@29 (line 62)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Objects
    - 134: jdk.incubator.vector.Int256Vector stack[32],vector
PcDesc(pc=0x00007fb92915d079 offset=2d9 bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915d084 offset=2e4 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[32],narrowoop
   mask::workload9@5 (line 60)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
PcDesc(pc=0x00007fb92915d098 offset=2f8 bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915d09d offset=2fd bits=0):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915d0a6 offset=306 bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915d0b0 offset=310 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[24],oop
   mask::workload9@5 (line 60)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
PcDesc(pc=0x00007fb92915d0c4 offset=324 bits=0):
   mask::workload9@0 (line 60)
PcDesc(pc=0x00007fb92915d0cf offset=32f bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915d0e8 offset=348 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
   mask::workload9@5 (line 60)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
PcDesc(pc=0x00007fb92915d0fc offset=35c bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915d101 offset=361 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
   mask::workload9@5 (line 60)
PcDesc(pc=0x00007fb92915d10c offset=36c bits=0):
   jdk.incubator.vector.VectorMask::fromArray@15 (line 207)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: NULL
   mask::workload9@5 (line 60)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
PcDesc(pc=0x00007fb92915d129 offset=389 bits=0):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
   mask::workload9@29 (line 62)
PcDesc(pc=0x00007fb92915d134 offset=394 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
   mask::workload9@5 (line 60)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
PcDesc(pc=0x00007fb92915d148 offset=3a8 bits=0):
   mask::workload9@-1 (line 60)
PcDesc(pc=0x00007fb92915d1a9 offset=409 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 11 OopMaps

ImmutableOopMap {} pc offsets: 196 
ImmutableOopMap {[32]=Oop [40]=Oop } pc offsets: 520 568 
ImmutableOopMap {} pc offsets: 604 648 692 
ImmutableOopMap {[24]=Oop [32]=NarrowOop } pc offsets: 740 
ImmutableOopMap {[24]=Oop } pc offsets: 784 840 
ImmutableOopMap {} pc offsets: 876 916 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007fb92915cdac offset=c):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
ScopeDesc(pc=0x00007fb92915cdac offset=c):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915cdbd offset=1d):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915cdbd offset=1d):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915cdbd offset=1d):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915cdc1 offset=21):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@41 (line 52)
ScopeDesc(pc=0x00007fb92915cdc1 offset=21):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007fb92915cdc1 offset=21):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915cdcd offset=2d):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915cdcd offset=2d):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915cdcd offset=2d):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915cde1 offset=41):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
ScopeDesc(pc=0x00007fb92915cde1 offset=41):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915ce2b offset=8b):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915ce2b offset=8b):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915ce2b offset=8b):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915ce35 offset=95):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
ScopeDesc(pc=0x00007fb92915ce35 offset=95):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915ce3b offset=9b):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
ScopeDesc(pc=0x00007fb92915ce3b offset=9b):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915ce64 offset=c4):
   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007fb92915ce64 offset=c4):
   mask::workload9@5 (line 60)
   Locals
    - l0: empty
    - l1: stack[24]
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fb92915ce6f offset=cf):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915ce6f offset=cf):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915ce6f offset=cf):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915ce75 offset=d5):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915ce79 offset=d9):
   jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
ScopeDesc(pc=0x00007fb92915ce79 offset=d9):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915ce98 offset=f8):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915ce98 offset=f8):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915ce98 offset=f8):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915cea3 offset=103):
   java.util.Objects::checkIndex@3 (line 359)
ScopeDesc(pc=0x00007fb92915cea3 offset=103):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
ScopeDesc(pc=0x00007fb92915cea3 offset=103):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007fb92915cea3 offset=103):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915ceb0 offset=110):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915ceb0 offset=110):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915ceb0 offset=110):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915ceb6 offset=116):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
ScopeDesc(pc=0x00007fb92915ceb6 offset=116):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915ceda offset=13a):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915ceda offset=13a):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915ceda offset=13a):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915cee0 offset=140):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007fb92915cee0 offset=140):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915cf06 offset=166):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915cf06 offset=166):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915cf06 offset=166):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915cf0c offset=16c):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007fb92915cf0c offset=16c):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915cf11 offset=171):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915cf11 offset=171):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915cf11 offset=171):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915cf17 offset=177):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@-1 (line 49)
ScopeDesc(pc=0x00007fb92915cf17 offset=177):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007fb92915cf17 offset=177):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915cf26 offset=186):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915cf26 offset=186):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915cf26 offset=186):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915cf32 offset=192):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007fb92915cf32 offset=192):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915cf3a offset=19a):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915cf3a offset=19a):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915cf3a offset=19a):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915cf46 offset=1a6):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007fb92915cf46 offset=1a6):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915cf52 offset=1b2):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915cf52 offset=1b2):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915cf52 offset=1b2):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915cf5e offset=1be):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
ScopeDesc(pc=0x00007fb92915cf5e offset=1be):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915cf81 offset=1e1):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915cf81 offset=1e1):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915cf81 offset=1e1):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915cf8b offset=1eb):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007fb92915cf8b offset=1eb):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915cf8d offset=1ed):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915cf8d offset=1ed):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915cf8d offset=1ed):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915cf92 offset=1f2):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
ScopeDesc(pc=0x00007fb92915cf92 offset=1f2):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915cfa8 offset=208):
   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
ScopeDesc(pc=0x00007fb92915cfa8 offset=208):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007fb92915cfa8 offset=208):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[28]
ScopeDesc(pc=0x00007fb92915cfa8 offset=208):
   mask::workload9@5 (line 60)
   Locals
    - l0: empty
    - l1: stack[24]
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fb92915cfcf offset=22f):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915cfcf offset=22f):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915cfcf offset=22f):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915cfd8 offset=238):
   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
ScopeDesc(pc=0x00007fb92915cfd8 offset=238):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007fb92915cfd8 offset=238):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[28]
ScopeDesc(pc=0x00007fb92915cfd8 offset=238):
   mask::workload9@5 (line 60)
   Locals
    - l0: empty
    - l1: stack[24]
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fb92915cfec offset=24c):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915cfec offset=24c):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915cfec offset=24c):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915cff1 offset=251):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915cffc offset=25c):
   mask::workload9@33 (line 62)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: reg rbp [10],int
    - @1: -1
ScopeDesc(pc=0x00007fb92915d015 offset=275):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
ScopeDesc(pc=0x00007fb92915d015 offset=275):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915d01e offset=27e):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915d01e offset=27e):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915d01e offset=27e):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915d028 offset=288):
   jdk.incubator.vector.Int256Vector::lane@1 (line 491)  reexecute=true
   Locals
    - l0: obj[206]
    - l1: reg rbp [10],int
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x00007fb92915d028 offset=288):
   mask::workload9@29 (line 62)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Objects
    - 206: jdk.incubator.vector.Int256Vector stack[32],vector
ScopeDesc(pc=0x00007fb92915d03c offset=29c):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915d03c offset=29c):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915d03c offset=29c):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915d041 offset=2a1):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
ScopeDesc(pc=0x00007fb92915d041 offset=2a1):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915d04a offset=2aa):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915d04a offset=2aa):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915d04a offset=2aa):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915d054 offset=2b4):
   jdk.incubator.vector.Int256Vector::lane@1 (line 491)  reexecute=true
   Locals
    - l0: obj[134]
    - l1: reg rbp [10],int
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x00007fb92915d054 offset=2b4):
   mask::workload9@29 (line 62)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Objects
    - 134: jdk.incubator.vector.Int256Vector stack[32],vector
ScopeDesc(pc=0x00007fb92915d079 offset=2d9):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915d079 offset=2d9):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915d079 offset=2d9):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915d084 offset=2e4):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[32],narrowoop
ScopeDesc(pc=0x00007fb92915d084 offset=2e4):
   mask::workload9@5 (line 60)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fb92915d098 offset=2f8):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915d098 offset=2f8):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915d098 offset=2f8):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915d09d offset=2fd):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
ScopeDesc(pc=0x00007fb92915d09d offset=2fd):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915d0a6 offset=306):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915d0a6 offset=306):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915d0a6 offset=306):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915d0b0 offset=310):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[24],oop
ScopeDesc(pc=0x00007fb92915d0b0 offset=310):
   mask::workload9@5 (line 60)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fb92915d0c4 offset=324):
   mask::workload9@0 (line 60)
ScopeDesc(pc=0x00007fb92915d0cf offset=32f):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915d0cf offset=32f):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915d0cf offset=32f):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915d0e8 offset=348):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007fb92915d0e8 offset=348):
   mask::workload9@5 (line 60)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fb92915d0fc offset=35c):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915d0fc offset=35c):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915d0fc offset=35c):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915d101 offset=361):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
ScopeDesc(pc=0x00007fb92915d101 offset=361):
   mask::workload9@5 (line 60)
ScopeDesc(pc=0x00007fb92915d10c offset=36c):
   jdk.incubator.vector.VectorMask::fromArray@15 (line 207)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: NULL
ScopeDesc(pc=0x00007fb92915d10c offset=36c):
   mask::workload9@5 (line 60)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fb92915d129 offset=389):
   jdk.incubator.vector.Int256Vector::laneHelper@16 (line 505)
ScopeDesc(pc=0x00007fb92915d129 offset=389):
   jdk.incubator.vector.Int256Vector::lane@50 (line 492)
ScopeDesc(pc=0x00007fb92915d129 offset=389):
   mask::workload9@29 (line 62)
ScopeDesc(pc=0x00007fb92915d134 offset=394):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007fb92915d134 offset=394):
   mask::workload9@5 (line 60)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007fb92915d148 offset=3a8):
   mask::workload9@-1 (line 60)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007fb92915cc88: 0020
relocInfo@0x00007fb92915cc88 [type=0(none) addr=0x00007fb92915cda0 offset=32]
         @0x00007fb92915cc8a: 1013
relocInfo@0x00007fb92915cc8a [type=1(oop) addr=0x00007fb92915cdb3 offset=19] | [oop_addr=0x00007fb92915cdb5 *=0x00000001015830a8 offset=0]
         @0x00007fb92915cc8c: f006cc13
relocInfo@0x00007fb92915cc8e [type=12(metadata) addr=0x00007fb92915cdc6 offset=19 format=3 data=6] | [metadata_addr=0x00007fb92915d1c0 *=0x00000008000ca890 offset=0]metadata_value=0x00000008000ca890: 'jdk/incubator/vector/IntVector$IntSpecies'
         @0x00007fb92915cc90: f80332e51ea07fb9743e
relocInfo@0x00007fb92915cc98 [type=7(external_word) addr=0x00007fb92915ce04 offset=62 format=1 data={32e51ea07fb9}] | [target=0x00007fb932e51ea0]
         @0x00007fb92915cc9a: f803325b99c87fb9700d
relocInfo@0x00007fb92915cca2 [type=7(external_word) addr=0x00007fb92915ce11 offset=13 data={325b99c87fb9}] | [target=0x00007fb9325b99c8]
         @0x00007fb92915cca4: 640e
relocInfo@0x00007fb92915cca4 [type=6(runtime_call) addr=0x00007fb92915ce1f offset=14 format=1] | [destination=0x00007fb931b98f80]
         @0x00007fb92915cca6: 100c
relocInfo@0x00007fb92915cca6 [type=1(oop) addr=0x00007fb92915ce2b offset=12] | [oop_addr=0x00007fb92915ce2d *=0x00000001010002a0 offset=0]
         @0x00007fb92915cca8: 1022
relocInfo@0x00007fb92915cca8 [type=1(oop) addr=0x00007fb92915ce4d offset=34] | [oop_addr=0x00007fb92915ce4f *=0x000000010159f500 offset=0]
         @0x00007fb92915ccaa: 4412
relocInfo@0x00007fb92915ccaa [type=4(static_call) addr=0x00007fb92915ce5f offset=18 format=1] | [destination=0x00007fb929156bc0 metadata=0x0000000000000000]
         @0x00007fb92915ccac: f007cc09
relocInfo@0x00007fb92915ccae [type=12(metadata) addr=0x00007fb92915ce68 offset=9 format=3 data=7] | [metadata_addr=0x00007fb92915d1c8 *=0x00000008000ce3d8 offset=0]metadata_value=0x00000008000ce3d8: 'jdk/incubator/vector/Int256Vector$Int256Mask'
         @0x00007fb92915ccb0: 941c
relocInfo@0x00007fb92915ccb0 [type=9(section_word) addr=0x00007fb92915ce84 offset=28 format=1] | [target=0x00007fb92915cd80]
         @0x00007fb92915ccb2: f803290af5607fb97414
relocInfo@0x00007fb92915ccba [type=7(external_word) addr=0x00007fb92915ce98 offset=20 format=1 data={290af5607fb9}] | [target=0x00007fb9290af560]
         @0x00007fb92915ccbc: b0db
relocInfo@0x00007fb92915ccbc [type=11(poll_return) addr=0x00007fb92915cf73 offset=219]
         @0x00007fb92915ccbe: 6430
relocInfo@0x00007fb92915ccbe [type=6(runtime_call) addr=0x00007fb92915cfa3 offset=48 format=1] | [destination=0x00007fb92911e940]
         @0x00007fb92915ccc0: f8033240c9807fb97005
relocInfo@0x00007fb92915ccc8 [type=7(external_word) addr=0x00007fb92915cfa8 offset=5 data={3240c9807fb9}] | [target=0x00007fb93240c980]
         @0x00007fb92915ccca: 640e
relocInfo@0x00007fb92915ccca [type=6(runtime_call) addr=0x00007fb92915cfb6 offset=14 format=1] | [destination=0x00007fb931b98f80]
         @0x00007fb92915cccc: 641d
relocInfo@0x00007fb92915cccc [type=6(runtime_call) addr=0x00007fb92915cfd3 offset=29 format=1] | [destination=0x00007fb92911e940]
         @0x00007fb92915ccce: f8033240c9807fb97005
relocInfo@0x00007fb92915ccd6 [type=7(external_word) addr=0x00007fb92915cfd8 offset=5 data={3240c9807fb9}] | [target=0x00007fb93240c980]
         @0x00007fb92915ccd8: 640e
relocInfo@0x00007fb92915ccd8 [type=6(runtime_call) addr=0x00007fb92915cfe6 offset=14 format=1] | [destination=0x00007fb931b98f80]
         @0x00007fb92915ccda: 6411
relocInfo@0x00007fb92915ccda [type=6(runtime_call) addr=0x00007fb92915cff7 offset=17 format=1] | [destination=0x00007fb92911e940]
         @0x00007fb92915ccdc: f8033240c9807fb97005
relocInfo@0x00007fb92915cce4 [type=7(external_word) addr=0x00007fb92915cffc offset=5 data={3240c9807fb9}] | [target=0x00007fb93240c980]
         @0x00007fb92915cce6: 640e
relocInfo@0x00007fb92915cce6 [type=6(runtime_call) addr=0x00007fb92915d00a offset=14 format=1] | [destination=0x00007fb931b98f80]
         @0x00007fb92915cce8: 6419
relocInfo@0x00007fb92915cce8 [type=6(runtime_call) addr=0x00007fb92915d023 offset=25 format=1] | [destination=0x00007fb92911e940]
         @0x00007fb92915ccea: f8033240c9807fb97005
relocInfo@0x00007fb92915ccf2 [type=7(external_word) addr=0x00007fb92915d028 offset=5 data={3240c9807fb9}] | [target=0x00007fb93240c980]
         @0x00007fb92915ccf4: 640e
relocInfo@0x00007fb92915ccf4 [type=6(runtime_call) addr=0x00007fb92915d036 offset=14 format=1] | [destination=0x00007fb931b98f80]
         @0x00007fb92915ccf6: 6419
relocInfo@0x00007fb92915ccf6 [type=6(runtime_call) addr=0x00007fb92915d04f offset=25 format=1] | [destination=0x00007fb92911e940]
         @0x00007fb92915ccf8: f8033240c9807fb97005
relocInfo@0x00007fb92915cd00 [type=7(external_word) addr=0x00007fb92915d054 offset=5 data={3240c9807fb9}] | [target=0x00007fb93240c980]
         @0x00007fb92915cd02: 640e
relocInfo@0x00007fb92915cd02 [type=6(runtime_call) addr=0x00007fb92915d062 offset=14 format=1] | [destination=0x00007fb931b98f80]
         @0x00007fb92915cd04: 641d
relocInfo@0x00007fb92915cd04 [type=6(runtime_call) addr=0x00007fb92915d07f offset=29 format=1] | [destination=0x00007fb92911e940]
         @0x00007fb92915cd06: f8033240c9807fb97005
relocInfo@0x00007fb92915cd0e [type=7(external_word) addr=0x00007fb92915d084 offset=5 data={3240c9807fb9}] | [target=0x00007fb93240c980]
         @0x00007fb92915cd10: 640e
relocInfo@0x00007fb92915cd10 [type=6(runtime_call) addr=0x00007fb92915d092 offset=14 format=1] | [destination=0x00007fb931b98f80]
         @0x00007fb92915cd12: 6419
relocInfo@0x00007fb92915cd12 [type=6(runtime_call) addr=0x00007fb92915d0ab offset=25 format=1] | [destination=0x00007fb92911e940]
         @0x00007fb92915cd14: f8033240c9807fb97005
relocInfo@0x00007fb92915cd1c [type=7(external_word) addr=0x00007fb92915d0b0 offset=5 data={3240c9807fb9}] | [target=0x00007fb93240c980]
         @0x00007fb92915cd1e: 640e
relocInfo@0x00007fb92915cd1e [type=6(runtime_call) addr=0x00007fb92915d0be offset=14 format=1] | [destination=0x00007fb931b98f80]
         @0x00007fb92915cd20: 6411
relocInfo@0x00007fb92915cd20 [type=6(runtime_call) addr=0x00007fb92915d0cf offset=17 format=1] | [destination=0x00007fb92907a5a0]
         @0x00007fb92915cd22: 6414
relocInfo@0x00007fb92915cd22 [type=6(runtime_call) addr=0x00007fb92915d0e3 offset=20 format=1] | [destination=0x00007fb92911e940]
         @0x00007fb92915cd24: f8033240c9807fb97005
relocInfo@0x00007fb92915cd2c [type=7(external_word) addr=0x00007fb92915d0e8 offset=5 data={3240c9807fb9}] | [target=0x00007fb93240c980]
         @0x00007fb92915cd2e: 640e
relocInfo@0x00007fb92915cd2e [type=6(runtime_call) addr=0x00007fb92915d0f6 offset=14 format=1] | [destination=0x00007fb931b98f80]
         @0x00007fb92915cd30: 6411
relocInfo@0x00007fb92915cd30 [type=6(runtime_call) addr=0x00007fb92915d107 offset=17 format=1] | [destination=0x00007fb92911e940]
         @0x00007fb92915cd32: f8033240c9807fb97005
relocInfo@0x00007fb92915cd3a [type=7(external_word) addr=0x00007fb92915d10c offset=5 data={3240c9807fb9}] | [target=0x00007fb93240c980]
         @0x00007fb92915cd3c: 640e
relocInfo@0x00007fb92915cd3c [type=6(runtime_call) addr=0x00007fb92915d11a offset=14 format=1] | [destination=0x00007fb931b98f80]
         @0x00007fb92915cd3e: 6415
relocInfo@0x00007fb92915cd3e [type=6(runtime_call) addr=0x00007fb92915d12f offset=21 format=1] | [destination=0x00007fb92911e940]
         @0x00007fb92915cd40: f8033240c9807fb97005
relocInfo@0x00007fb92915cd48 [type=7(external_word) addr=0x00007fb92915d134 offset=5 data={3240c9807fb9}] | [target=0x00007fb93240c980]
         @0x00007fb92915cd4a: 640e
relocInfo@0x00007fb92915cd4a [type=6(runtime_call) addr=0x00007fb92915d142 offset=14 format=1] | [destination=0x00007fb931b98f80]
         @0x00007fb92915cd4c: f1d58006
relocInfo@0x00007fb92915cd4e [type=8(internal_word) addr=0x00007fb92915d148 offset=6 data=469] | [target=0x00007fb92915cf73]
         @0x00007fb92915cd50: 6411
relocInfo@0x00007fb92915cd50 [type=6(runtime_call) addr=0x00007fb92915d159 offset=17 format=1] | [destination=0x00007fb92911d6a0]
         @0x00007fb92915cd52: 0007
relocInfo@0x00007fb92915cd52 [type=0(none) addr=0x00007fb92915d160 offset=7]
         @0x00007fb92915cd54: f801ff415000
relocInfo@0x00007fb92915cd58 [type=5(static_stub) addr=0x00007fb92915d160 offset=0 data=-191] | [static_call=0x00007fb92915ce5f]
         @0x00007fb92915cd5a: c000
relocInfo@0x00007fb92915cd5a [type=12(metadata) addr=0x00007fb92915d160 offset=0] | [metadata_addr=0x00007fb92915d162 *=0x0000000000000000 offset=0]
         @0x00007fb92915cd5c: 640a
relocInfo@0x00007fb92915cd5c [type=6(runtime_call) addr=0x00007fb92915d16a offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007fb92915cd5e: 6405
relocInfo@0x00007fb92915cd5e [type=6(runtime_call) addr=0x00007fb92915d16f offset=5 format=1] | [destination=0x00007fb929081720]
         @0x00007fb92915cd60: 640f
relocInfo@0x00007fb92915cd60 [type=6(runtime_call) addr=0x00007fb92915d17e offset=15 format=1] | [destination=0x00007fb92911ec60]
         @0x00007fb92915cd62: 0000
relocInfo@0x00007fb92915cd62 [type=0(none) addr=0x00007fb92915d17e offset=0]
         @0x00007fb92915cd64: 0000
relocInfo@0x00007fb92915cd64 [type=0(none) addr=0x00007fb92915d17e offset=0]
         @0x00007fb92915cd66: 0000
relocInfo@0x00007fb92915cd66 [type=0(none) addr=0x00007fb92915d17e offset=0]
         @0x00007fb92915cd68: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.VectorOperators$ComparisonImpl
  method  = {method} {0x00007fb8cd6a5a78} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  class   = jdk.incubator.vector.VectorOperators$OperatorImpl
  method  = {method} {0x00007fb8cd6a5a78} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$ComparisonImpl
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.VectorOperators$ComparisonImpl
  method  = {method} {0x00007fb8cd6a5b48} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  class   = jdk.incubator.vector.VectorOperators$OperatorImpl
  method  = {method} {0x00007fb8cd6a5b48} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$ComparisonImpl
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 24 bytes)
catch_pco = 196 (pc=0x00007fb92915ce64, 1 entries)
  bci -1 at scope depth 0 -> pco 804 (pc=0x00007fb92915d0c4)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 3 entries, 28 bytes):
{
   < 0x00007fb92915cdc1, 0x00007fb92915d0d4 > < 0x00007fb92915cdd6, 0x00007fb92915d0fc > < 0x00007fb92915ce64, 0x00007fb92915d120 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000101590918 a 'java/lang/Class'{0x0000000101590918} = 'jdk/incubator/vector/Int256Vector'
#2: 0x00000001014bcd38 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000001014bcd38}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
# 0: 0x0000000000000000 NULL-oop
# 1: 0x00007fb8cd40eee0 {method} {0x00007fb8cd40eee0} 'workload9' '([ZI)Z' in 'mask'
# 2: 0x00007fb8cd436420 {method} {0x00007fb8cd436420} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[ZI)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
# 3: 0x00007fb8cd41e250 {method} {0x00007fb8cd41e250} 'lane' '(I)I' in 'jdk/incubator/vector/Int256Vector'
# 4: 0x00007fb8cd41e330 {method} {0x00007fb8cd41e330} 'laneHelper' '(I)I' in 'jdk/incubator/vector/Int256Vector'
# 5: 0x00007fb8cd628820 {method} {0x00007fb8cd628820} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
# 6: 0x00000008000ca890 'jdk/incubator/vector/IntVector$IntSpecies'
# 7: 0x00000008000ce3d8 'jdk/incubator/vector/Int256Vector$Int256Mask'
# 8: 0x00007fb8cd15e498 {method} {0x00007fb8cd15e498} 'checkIndex' '(II)I' in 'java/util/Objects'
# 9: 0x00000008000d7760 'jdk/incubator/vector/VectorOperators$ComparisonImpl'
#10: 0x00007fb8cd6a5a78 {method} {0x00007fb8cd6a5a78} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#11: 0x00000008000d6380 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#12: 0x00007fb8cd6a5b48 {method} {0x00007fb8cd6a5b48} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[Time] 14ms   [Res] 0
------------------------------------------------------------------------
static mask::workload9([ZI)Z
  interpreter_invocation_count:       53683
  invocation_counter:                 53683
  backedge_counter:                       0
  decompile_count:                        0
  mdo size: 792 bytes

0 getstatic 7 <mask.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
3 fast_aload_0
4 iconst_0
5 invokestatic 13 <jdk/incubator/vector/VectorMask.fromArray(Ljdk/incubator/vector/VectorSpecies;[ZI)Ljdk/incubator/vector/VectorMask;> 
  0   bci: 5    CounterData         count(52020)
8 astore_2
9 aload_2
10 invokevirtual 64 <jdk/incubator/vector/VectorMask.toVector()Ljdk/incubator/vector/Vector;> 
  16  bci: 10   VirtualCallData     count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/Int256Vector$Int256Mask'(52020 1.00)
13 getstatic 68 <jdk/incubator/vector/VectorOperators.EQ/Ljdk/incubator/vector/VectorOperators$Comparison;> 
16 lconst_1
17 invokevirtual 74 <jdk/incubator/vector/Vector.compare(Ljdk/incubator/vector/VectorOperators$Comparison;J)Ljdk/incubator/vector/VectorMask;> 
  72  bci: 17   VirtualCallData     count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/Int256Vector'(52020 1.00)
20 astore_3
21 aload_3
22 invokevirtual 64 <jdk/incubator/vector/VectorMask.toVector()Ljdk/incubator/vector/Vector;> 
  128 bci: 22   VirtualCallData     count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/Int256Vector$Int256Mask'(52020 1.00)
25 checkcast 80 <jdk/incubator/vector/IntVector>
  184 bci: 25   ReceiverTypeData    count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/Int256Vector'(52020 1.00)
28 iload_1
29 invokevirtual 82 <jdk/incubator/vector/IntVector.lane(I)I> 
  240 bci: 29   VirtualCallData     count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/Int256Vector'(52020 1.00)
32 iconst_m1
33 if_icmpne 40
  296 bci: 33   BranchData          taken(52020) displacement(56)
                                    not taken(0)
36 iconst_1
37 goto 41
  328 bci: 37   JumpData            taken(0) displacement(24)
40 iconst_0
41 ireturn
------------------------------------------------------------------------
Total MDO size: 792 bytes
