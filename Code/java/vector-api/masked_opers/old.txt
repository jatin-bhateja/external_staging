CompileCommand: print mask.workload10 bool print = true

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 254 ------------------------
{method}
 - this oop:          0x00007ff1edc0efb8
 - method holder:     'mask'
 - constants:         0x00007ff1edc0e0a8 constant pool [160]/operands[5] {0x00007ff1edc0e0a8} for 'mask' cache=0x00007ff1edc0f2d0
 - access:            0x81000009  public static 
 - name:              'workload10'
 - signature:         '([ZI)Z'
 - max stack:         5
 - max locals:        4
 - size of params:    2
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x00007ff24900dc00
 - adapters:          AHE@0x00007ff24c318840: 0xba i2c: 0x00007ff2490a91e0 c2i: 0x00007ff2490a92c3 c2iUV: 0x00007ff2490a928d c2iNCI: 0x00007ff2490a9300
 - compiled entry     0x00007ff2490a92c3
 - code size:         27
 - code start:        0x00007ff1edc0ef90
 - code end (excl):   0x00007ff1edc0efab
 - method data:       0x00007ff1edc0f708
 - checked ex length: 0
 - linenumber start:  0x00007ff1edc0efab
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 254 -----------------------
#
#  bool ( bool[int:>=0]:exact *, int )
#
#r018 rsi:rsi   : parm 0: bool[int:>=0]:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 128 --
#r591 rsp+124: in_preserve
#r590 rsp+120: return address
#r589 rsp+116: in_preserve
#r588 rsp+112: saved fp register
#r587 rsp+108: pad2, stack alignment
#r586 rsp+104: pad2, stack alignment
#r585 rsp+100: Fixed slot 1
#r584 rsp+96: Fixed slot 0
#r615 rsp+92: spill
#r614 rsp+88: spill
#r613 rsp+84: spill
#r612 rsp+80: spill
#r611 rsp+76: spill
#r610 rsp+72: spill
#r609 rsp+68: spill
#r608 rsp+64: spill
#r607 rsp+60: spill
#r606 rsp+56: spill
#r605 rsp+52: spill
#r604 rsp+48: spill
#r603 rsp+44: spill
#r602 rsp+40: spill
#r601 rsp+36: spill
#r600 rsp+32: spill
#r599 rsp+28: spill
#r598 rsp+24: spill
#r597 rsp+20: outgoing argument
#r596 rsp+16: outgoing argument
#r595 rsp+12: outgoing argument
#r594 rsp+ 8: outgoing argument
#r593 rsp+ 4: outgoing argument
#r592 rsp+ 0: outgoing argument
#
000     N1: #	out( B1 ) <- in( B20 B18 B21 B17 B15 B22 B19 B12 B16 B25 )  Freq: 1

000     B1: #	out( B20 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (704 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #112	# Create frame

00c     movq    R10, RSI	# spill
00f     movl    [rsp + #24], RDX	# spill
013     movq    R11, java/lang/Class:exact *	# ptr
01d     movl    R8, [R11 + #112 (8-bit)]	# compressed ptr ! Field: mask.SPECIES
021     movl    R11, [R12 + R8 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
026     NullCheck R8

026     B2: #	out( B18 B3 ) <- in( B1 )  Freq: 0.999999
026     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/IntVector$IntSpecies: 0x00007ff1ac0ef818:Constant:exact *	# compressed klass ptr
02d     jne,u   B18  P=0.000000 C=-1.000000

033     B3: #	out( B21 B4 ) <- in( B2 )  Freq: 0.999999
033     movq    R11, RSI	# spill
036     movl    R10, [RSI + #12 (8-bit)]	# range
03a     NullCheck RSI

03a     B4: #	out( B17 B5 ) <- in( B3 )  Freq: 0.999998
03a     decode_heap_oop_not_null RBX,R8
03e     # checkcastPP of RBX
03e     movl    RCX, [RBX + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
041     subl    R10, RCX	# int
044     movl    RBP, R10	# spill
047     incl    RBP	# int
049     testl   RBP, RBP
04b     jl     B17  P=0.000001 C=-1.000000

051     B5: #	out( B15 B6 ) <- in( B4 )  Freq: 0.999997
051     cmpl    R10, #-1
055     je     B15  P=0.000001 C=-1.000000

05b     B6: #	out( B24 B7 ) <- in( B5 )  Freq: 0.999996
05b     movl    R10, [RBX + #48 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.maskType (constant)
05f     decode_heap_oop RSI,R10
08b     movl    R9, #16	# long (unsigned 32-bit)
091     movq    RDX, java/lang/Class:exact *	# ptr
09b     movq    R8, R11	# spill
09e     movq    RDI, R11	# spill
0a1     xorl    R11, R11	# int
0a4     movl    [rsp + #0], R11	# spill
0a8     movq    [rsp + #8], RBX	# spill
0ad     movq    R10, jdk/incubator/vector/VectorMask$$Lambda$31+0x00000008000d0638:exact *	# ptr
0b7     movq    [rsp + #16], R10	# spill
0bc     call,static  jdk.internal.vm.vector.VectorSupport::load
        # jdk.incubator.vector.VectorMask::fromArray @ bci:46 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # mask::workload10 @ bci:5 (line 66) L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_
        # OopMap {off=196/0xc4}

0c4     B7: #	out( B22 B8 ) <- in( B6 )  Freq: 0.999976
        # Block is sole successor of call
0c4     movl    R10, [RAX + #8 (8-bit)]	# compressed klass ptr
0c8     NullCheck RAX

0c8     B8: #	out( B19 B9 ) <- in( B7 )  Freq: 0.999975
0c8     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/Int256Vector$Int256Mask: 0x00007ff1ac0ea3e8:Constant:exact *	# compressed klass ptr
0cf     jne,u   B19  P=0.000000 C=-1.000000

0d5     B9: #	out( B13 B10 ) <- in( B8 )  Freq: 0.999975
0d5     # checkcastPP of RAX
0d5     movl    R10, [RAX + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0d9     load_vector XMM0,[R12 + R10 << 3 + #16] (compressed oop addressing)
0e0     replicateI XMM1,#0
0e4     # TLS is in R15
0e4     movq    R9, [R15 + #280 (32-bit)]	# ptr
0eb     movq    R10, R9	# spill
0ee     addq    R10, #24	# ptr
0f2     # MachConstantBaseNode (empty encoding)
0f2     replicateI XMM2,#1
0ff     vector_loadmask_byte K7,XMM0
	
10a     vallones XMM0
111     vector_blend  XMM1,XMM1,XMM0,K7	! using R11 and k2 as TEMP
        nop 	# 9 bytes pad for loops and calls
120     cmpq    R10, [R15 + #296 (32-bit)]	# raw ptr
127     jnb,u   B13  P=0.000100 C=-1.000000

12d     B10: #	out( B11 ) <- in( B9 )  Freq: 0.999875
12d     movq    [R15 + #280 (32-bit)], R10	# ptr
134     movq    R11, R9	# spill
137     addq    R11, #16	# ptr
13b     movq    [R9], #1	# long
142     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
14a     movl    [R9 + #8 (8-bit)], narrowklass: precise klass [Z: 0x00007ff1cc013aa8:Constant:exact *	# compressed klass ptr
152     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
15a     movl    [R9 + #12 (8-bit)], #8	# int
162     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
16a     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
172     clear_mem_imm R11 , #1  
	

17b     B11: #	out( B16 B12 ) <- in( B14 B10 )  Freq: 0.999975
17b     
17b     # checkcastPP of R9
17b     vector_compared_evex K7,XMM1,XMM2,#0	!
182     vector_store_mask XMM0,K7	!
18d     store_vector [R9 + #16 (8-bit)],XMM0
	
193     
193     MEMBAR-acquire ! (empty encoding)
193     # checkcastPP of R9
193     movl    R11, [R9 + #12 (8-bit)]	# range
197     movl    R8, [rsp + #24]	# spill
        nop 	# 4 bytes pad for loops and calls
1a0     cmpl    R8, R11	# unsigned
1a3     jnb,u   B16  P=0.000001 C=-1.000000

1a9     B12: #	out( N1 ) <- in( B11 )  Freq: 0.999974
1a9     movzbl  RAX, [R9 + #16 + R8]	# ubyte
1af     vzeroupper
	addq    rsp, 112	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

1c4     ret

1c5     B13: #	out( B23 B14 ) <- in( B9 )  Freq: 0.000100014
1c5     vmovdqu [rsp + 64],XMM1	# spill
1cb     vmovdqu [rsp + 32],XMM2	# spill
1d1     movq    RSI, precise klass [Z: 0x00007ff1cc013aa8:Constant:exact *	# ptr
1db     movl    RDX, #8	# int
1e0     movl    RBP, [rsp + #24]	# spill
1e4     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::compareTemplate @ bci:42 (line 1899) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#0 STK[1]=#Ptr0x00007ff1a40385a0 STK[2]=#Ptr0x00007ff1a80026d0 STK[3]=#Ptr0x00007ff1bc063a60 STK[4]=#8 STK[5]=#ScObj0 STK[6]=#ScObj1 STK[7]=#NULL STK[8]=#Ptr0x00007ff1a00138a0
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #64 }
        # ScObj1 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #32 }
        # jdk.incubator.vector.IntVector::compareTemplate @ bci:8 (line 2024) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.Int256Vector::compare @ bci:5 (line 390) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.incubator.vector.Int256Vector::compare @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # mask::workload10 @ bci:17 (line 67) L[0]=_ L[1]=RBP L[2]=_ L[3]=_
        # OopMap {off=492/0x1ec}

1ec     B14: #	out( B11 ) <- in( B13 )  Freq: 0.000100012
        # Block is sole successor of call
1ec     movq    R9, RAX	# spill
1ef     vmovdqu XMM2,[rsp + 32]	# spill
1f5     vmovdqu XMM1,[rsp + 64]	# spill
        nop 	# 5 bytes pad for loops and calls
200     jmp     B11

205     B15: #	out( N1 ) <- in( B5 )  Freq: 1.01328e-06
205     movl    RSI, #-28	# int
20a     movq    [rsp + #32], R11	# spill
20f     movq    [rsp + #40], RBX	# spill
214     movl    [rsp + #28], RCX	# spill
218     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 359) L[0]=_ L[1]=_ STK[0]=#0 STK[1]=RBP STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 52) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.VectorMask::fromArray @ bci:16 (line 207) L[0]=_ L[1]=rsp + #32 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #28
        # mask::workload10 @ bci:5 (line 66) L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_
        # OopMap {[32]=Oop [40]=Oop off=544/0x220}
220     stop	# ShouldNotReachHere

234     B16: #	out( N1 ) <- in( B11 )  Freq: 1.01325e-06
234     movl    RSI, #-28	# int
239     movl    RBP, R8	# spill
23c     movq    [rsp + #24], R9	# spill
        nop 	# 3 bytes pad for loops and calls
244     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.AbstractMask::laneIsSet @ bci:5 (line 66) L[0]=_ L[1]=_ STK[0]=rsp + #24 STK[1]=RBP
        # mask::workload10 @ bci:23 (line 68) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {[24]=Oop off=588/0x24c}
24c     stop	# ShouldNotReachHere

260     B17: #	out( N1 ) <- in( B4 )  Freq: 9.99998e-07
260     movl    RSI, #-52	# int
265     movq    [rsp + #32], R11	# spill
26a     movq    [rsp + #40], RBX	# spill
26f     movl    [rsp + #28], RCX	# spill
        nop 	# 1 bytes pad for loops and calls
274     call,static  wrapper for: uncommon_trap(reason='intrinsic_or_type_checked_inlining' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 359) L[0]=_ L[1]=_ STK[0]=#0 STK[1]=RBP STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 52) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.VectorMask::fromArray @ bci:16 (line 207) L[0]=_ L[1]=rsp + #32 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #28
        # mask::workload10 @ bci:5 (line 66) L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_
        # OopMap {[32]=Oop [40]=Oop off=636/0x27c}
27c     stop	# ShouldNotReachHere

290     B18: #	out( N1 ) <- in( B2 )  Freq: 1e-35
290     movl    RSI, #-34	# int
295     movl    RBP, RDX	# spill
297     movq    [rsp + #24], R10	# spill
29c     movl    [rsp + #32], R8	# spill
        nop 	# 3 bytes pad for loops and calls
2a4     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:1 (line 205) L[0]=_ L[1]=rsp + #24 L[2]=#0 L[3]=_ L[4]=_ STK[0]=rsp + #32
        # mask::workload10 @ bci:5 (line 66) L[0]=_ L[1]=RBP L[2]=_ L[3]=_
        # OopMap {[24]=Oop [32]=NarrowOop off=684/0x2ac}
2ac     stop	# ShouldNotReachHere

2c0     B19: #	out( N1 ) <- in( B8 )  Freq: 1e-35
2c0     movl    RSI, #-34	# int
2c5     movl    RBP, [rsp + #24]	# spill
2c9     movq    [rsp + #24], RAX	# spill
        nop 	# 2 bytes pad for loops and calls
2d0     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:49 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #24
        # mask::workload10 @ bci:5 (line 66) L[0]=_ L[1]=RBP L[2]=_ L[3]=_
        # OopMap {[24]=Oop off=728/0x2d8}
2d8     stop	# ShouldNotReachHere

2ec     B20: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
2ec     movl    RSI, #-12	# int
2f1     movl    RBP, RDX	# spill
2f3     movq    [rsp + #24], R10	# spill
2f8     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:1 (line 205) L[0]=_ L[1]=rsp + #24 L[2]=#0 L[3]=_ L[4]=_ STK[0]=#NULL
        # mask::workload10 @ bci:5 (line 66) L[0]=_ L[1]=RBP L[2]=_ L[3]=_
        # OopMap {[24]=Oop off=768/0x300}
300     stop	# ShouldNotReachHere

314     B21: #	out( N1 ) <- in( B3 )  Freq: 1.01328e-06
314     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
31c     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:15 (line 207) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL
        # mask::workload10 @ bci:5 (line 66) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {off=804/0x324}
324     stop	# ShouldNotReachHere

338     B22: #	out( N1 ) <- in( B7 )  Freq: 1.01325e-06
338     movl    RSI, #-12	# int
33d     movl    RBP, [rsp + #24]	# spill
        nop 	# 3 bytes pad for loops and calls
344     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:49 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL
        # mask::workload10 @ bci:5 (line 66) L[0]=_ L[1]=RBP L[2]=_ L[3]=_
        # OopMap {off=844/0x34c}
34c     stop	# ShouldNotReachHere

360     B23: #	out( B25 ) <- in( B13 )  Freq: 1.00014e-09
360     # exception oop is in rax; no code emitted
360     movq    RSI, RAX	# spill
363     jmp,s   B25

365     B24: #	out( B25 ) <- in( B6 )  Freq: 9.99996e-06
365     # exception oop is in rax; no code emitted
365     movq    RSI, RAX	# spill

368     B25: #	out( N1 ) <- in( B24 B23 )  Freq: 1.0001e-05
368     vzeroupper
	addq    rsp, 112	# Destroy frame
	popq    rbp

370     jmp     rethrow_stub

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    1758  254             mask::workload10 (27 bytes)
 total in heap  [0x00007ff24914ec10,0x00007ff24914f7c8] = 3000
 relocation     [0x00007ff24914ed88,0x00007ff24914ee50] = 200
 constants      [0x00007ff24914ee60,0x00007ff24914ee80] = 32
 main code      [0x00007ff24914ee80,0x00007ff24914f220] = 928
 stub code      [0x00007ff24914f220,0x00007ff24914f248] = 40
 oops           [0x00007ff24914f248,0x00007ff24914f270] = 40
 metadata       [0x00007ff24914f270,0x00007ff24914f348] = 216
 scopes data    [0x00007ff24914f348,0x00007ff24914f518] = 464
 scopes pcs     [0x00007ff24914f518,0x00007ff24914f768] = 592
 dependencies   [0x00007ff24914f768,0x00007ff24914f778] = 16
 handler table  [0x00007ff24914f778,0x00007ff24914f7a8] = 48
 nul chk table  [0x00007ff24914f7a8,0x00007ff24914f7c8] = 32

--------------------------------------------------------------------------------

[Constant Pool]
             Address          hex4                    hex8      
  0x00007ff24914ee60:   0x00000001      0x0000000100000001      
  0x00007ff24914ee64:   0x00000001                              
  0x00007ff24914ee68:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007ff24914ee6c:   0xf4f4f4f4                              
  0x00007ff24914ee70:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007ff24914ee74:   0xf4f4f4f4                              
  0x00007ff24914ee78:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007ff24914ee7c:   0xf4f4f4f4                              

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007ff1edc0efb8} 'workload10' '([ZI)Z' in 'mask'
  # parm0:    rsi:rsi   = '[Z'
  # parm1:    rdx       = int
  #           [sp+0x80]  (sp of caller)
 ;; N1: #	out( B1 ) <- in( B20 B18 B21 B17 B15 B22 B19 B12 B16 B25 )  Freq: 1
 ;; B1: #	out( B20 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007ff24914ee80:   mov    %eax,-0x16000(%rsp)          ;   {no_reloc}
  0x00007ff24914ee87:   push   %rbp
  0x00007ff24914ee88:   sub    $0x70,%rsp                   ;*synchronization entry
                                                            ; - mask::workload10@-1 (line 66)
  0x00007ff24914ee8c:   mov    %rsi,%r10
  0x00007ff24914ee8f:   mov    %edx,0x18(%rsp)
  0x00007ff24914ee93:   movabs $0x101583280,%r11            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
                                                            ; - jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
                                                            ; - mask::workload10@23 (line 68)
                                                            ;   {oop(a 'java/lang/Class'{0x0000000101583280} = 'mask')}
  0x00007ff24914ee9d:   mov    0x70(%r11),%r8d              ;*getstatic SPECIES {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - mask::workload10@0 (line 66)
  0x00007ff24914eea1:   mov    0x8(%r12,%r8,8),%r11d        ; implicit exception: dispatches to 0x00007ff24914f16c
 ;; B2: #	out( B18 B3 ) <- in( B1 )  Freq: 0.999999
  0x00007ff24914eea6:   cmp    $0xca890,%r11d               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
                                                            ; - jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
                                                            ; - mask::workload10@23 (line 68)
                                                            ;   {metadata('jdk/incubator/vector/IntVector$IntSpecies')}
  0x00007ff24914eead:   jne    0x00007ff24914f110
 ;; B3: #	out( B21 B4 ) <- in( B2 )  Freq: 0.999999
  0x00007ff24914eeb3:   mov    %rsi,%r11
  0x00007ff24914eeb6:   mov    0xc(%rsi),%r10d              ; implicit exception: dispatches to 0x00007ff24914f194
 ;; B4: #	out( B17 B5 ) <- in( B3 )  Freq: 0.999998
  0x00007ff24914eeba:   lea    (%r12,%r8,8),%rbx            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
                                                            ; - mask::workload10@5 (line 66)
  0x00007ff24914eebe:   mov    0xc(%rbx),%ecx               ;*getfield laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::laneCount@1 (line 125)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
                                                            ; - mask::workload10@5 (line 66)
  0x00007ff24914eec1:   sub    %ecx,%r10d
  0x00007ff24914eec4:   mov    %r10d,%ebp
  0x00007ff24914eec7:   inc    %ebp
  0x00007ff24914eec9:   test   %ebp,%ebp
  0x00007ff24914eecb:   jl     0x00007ff24914f0e0
 ;; B5: #	out( B15 B6 ) <- in( B4 )  Freq: 0.999997
  0x00007ff24914eed1:   cmp    $0xffffffff,%r10d
  0x00007ff24914eed5:   je     0x00007ff24914f085
 ;; B6: #	out( B24 B7 ) <- in( B5 )  Freq: 0.999996
  0x00007ff24914eedb:   mov    0x30(%rbx),%r10d             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
                                                            ; - jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
                                                            ; - mask::workload10@23 (line 68)
  0x00007ff24914eedf:   mov    %r10,%rsi
  0x00007ff24914eee2:   push   %r10
  0x00007ff24914eee4:   cmp    0xa26dfb5(%rip),%r12        # 0x00007ff2533bcea0
                                                            ;   {external_word}
  0x00007ff24914eeeb:   je     0x00007ff24914ef05
 ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007ff24914eef1:   movabs $0x7ff252b249c8,%rdi         ;   {external_word}
  0x00007ff24914eefb:   and    $0xfffffffffffffff0,%rsp
  0x00007ff24914eeff:   callq  0x00007ff252103f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff24914ef04:   hlt    
  0x00007ff24914ef05:   pop    %r10
  0x00007ff24914ef07:   shl    $0x3,%rsi
  0x00007ff24914ef0b:   mov    $0x10,%r9d
  0x00007ff24914ef11:   movabs $0x1010002a0,%rdx            ;   {oop(a 'java/lang/Class'{0x00000001010002a0} = int)}
  0x00007ff24914ef1b:   mov    %r11,%r8
  0x00007ff24914ef1e:   mov    %r11,%rdi
  0x00007ff24914ef21:   xor    %r11d,%r11d
  0x00007ff24914ef24:   mov    %r11d,(%rsp)
  0x00007ff24914ef28:   mov    %rbx,0x8(%rsp)
  0x00007ff24914ef2d:   movabs $0x10159f6d8,%r10            ;   {oop(a 'jdk/incubator/vector/VectorMask$$Lambda$31+0x00000008000d0638'{0x000000010159f6d8})}
  0x00007ff24914ef37:   mov    %r10,0x10(%rsp)
  0x00007ff24914ef3c:   vzeroupper 
  0x00007ff24914ef3f:   callq  0x00007ff24914cb40           ; ImmutableOopMap {}
                                                            ;*invokestatic load {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
                                                            ; - mask::workload10@5 (line 66)
                                                            ;   {static_call}
 ;; B7: #	out( B22 B8 ) <- in( B6 )  Freq: 0.999976
  0x00007ff24914ef44:   mov    0x8(%rax),%r10d              ; implicit exception: dispatches to 0x00007ff24914f1b8
 ;; B8: #	out( B19 B9 ) <- in( B7 )  Freq: 0.999975
  0x00007ff24914ef48:   cmp    $0xce3d8,%r10d               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
                                                            ; - jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
                                                            ; - mask::workload10@23 (line 68)
                                                            ;   {metadata('jdk/incubator/vector/Int256Vector$Int256Mask')}
  0x00007ff24914ef4f:   jne    0x00007ff24914f140           ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - mask::workload10@5 (line 66)
 ;; B9: #	out( B13 B10 ) <- in( B8 )  Freq: 0.999975
  0x00007ff24914ef55:   mov    0xc(%rax),%r10d              ;*invokestatic compare {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@42 (line 1899)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@8 (line 2024)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 390)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - mask::workload10@17 (line 67)
  0x00007ff24914ef59:   vmovq  0x10(%r12,%r10,8),%xmm0
  0x00007ff24914ef60:   vpxor  %ymm1,%ymm1,%ymm1
  0x00007ff24914ef64:   mov    0x118(%r15),%r9
  0x00007ff24914ef6b:   mov    %r9,%r10
  0x00007ff24914ef6e:   add    $0x18,%r10
  0x00007ff24914ef72:   vmovq  -0x11a(%rip),%xmm2        # 0x00007ff24914ee60
                                                            ;   {section_word}
  0x00007ff24914ef7a:   vpbroadcastd %xmm2,%ymm2
  0x00007ff24914ef7f:   vpcmpb $0x0,-0x9fa2a(%rip),%xmm0,%k7        # Stub::vector_mask_cmp_bits
                                                            ;   {external_word}
  0x00007ff24914ef8a:   vpternlogd $0xff,%ymm0,%ymm0,%ymm0  ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
                                                            ; - jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
                                                            ; - mask::workload10@23 (line 68)
  0x00007ff24914ef91:   vpblendmd %ymm0,%ymm1,%ymm1{%k7}    ;*invokestatic blend {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::blendTemplate@26 (line 2052)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@11 (line 404)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::toVectorTemplate@22 (line 200)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::toVector@1 (line 612)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::toVector@1 (line 543)
                                                            ; - mask::workload10@10 (line 67)
  0x00007ff24914ef97:   nop
  0x00007ff24914ef98:   nop
  0x00007ff24914ef99:   nop
  0x00007ff24914ef9a:   nop
  0x00007ff24914ef9b:   nop
  0x00007ff24914ef9c:   nop
  0x00007ff24914ef9d:   nop
  0x00007ff24914ef9e:   nop
  0x00007ff24914ef9f:   nop
  0x00007ff24914efa0:   cmp    0x128(%r15),%r10
  0x00007ff24914efa7:   jae    0x00007ff24914f045
 ;; B10: #	out( B11 ) <- in( B9 )  Freq: 0.999875
  0x00007ff24914efad:   mov    %r10,0x118(%r15)
  0x00007ff24914efb4:   mov    %r9,%r11
  0x00007ff24914efb7:   add    $0x10,%r11
  0x00007ff24914efbb:   movq   $0x1,(%r9)
  0x00007ff24914efc2:   prefetchw 0xc0(%r10)
  0x00007ff24914efca:   movl   $0x40000,0x8(%r9)            ;   {metadata({type array bool})}
  0x00007ff24914efd2:   prefetchw 0x100(%r10)
  0x00007ff24914efda:   movl   $0x8,0xc(%r9)
  0x00007ff24914efe2:   prefetchw 0x140(%r10)
  0x00007ff24914efea:   prefetchw 0x180(%r10)
  0x00007ff24914eff2:   vpxor  %ymm0,%ymm0,%ymm0
  0x00007ff24914eff6:   vmovq  %xmm0,(%r11)
 ;; B11: #	out( B16 B12 ) <- in( B14 B10 )  Freq: 0.999975
  0x00007ff24914effb:   vpcmpeqd %ymm2,%ymm1,%k7
  0x00007ff24914f002:   vpmovm2b %k7,%xmm0
  0x00007ff24914f008:   vpabsb %xmm0,%xmm0
  0x00007ff24914f00d:   vmovq  %xmm0,0x10(%r9)              ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@4 (line 584)
                                                            ; - jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
                                                            ; - mask::workload10@23 (line 68)
  0x00007ff24914f013:   mov    0xc(%r9),%r11d
  0x00007ff24914f017:   mov    0x18(%rsp),%r8d
  0x00007ff24914f01c:   nop
  0x00007ff24914f01d:   nop
  0x00007ff24914f01e:   nop
  0x00007ff24914f01f:   nop
  0x00007ff24914f020:   cmp    %r11d,%r8d
  0x00007ff24914f023:   jae    0x00007ff24914f0b4           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
                                                            ; - jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
                                                            ; - mask::workload10@23 (line 68)
 ;; B12: #	out( N1 ) <- in( B11 )  Freq: 0.999974
  0x00007ff24914f029:   movzbl 0x10(%r9,%r8,1),%eax         ;*baload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractMask::laneIsSet@5 (line 66)
                                                            ; - mask::workload10@23 (line 68)
  0x00007ff24914f02f:   vzeroupper 
  0x00007ff24914f032:   add    $0x70,%rsp
  0x00007ff24914f036:   pop    %rbp
  0x00007ff24914f037:   cmp    0x388(%r15),%rsp             ;   {poll_return}
  0x00007ff24914f03e:   ja     0x00007ff24914f1f5
  0x00007ff24914f044:   retq   
 ;; B13: #	out( B23 B14 ) <- in( B9 )  Freq: 0.000100014
  0x00007ff24914f045:   vmovdqu %ymm1,0x40(%rsp)
  0x00007ff24914f04b:   vmovdqu %ymm2,0x20(%rsp)
  0x00007ff24914f051:   movabs $0x800040000,%rsi            ;*invokestatic compare {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@42 (line 1899)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@8 (line 2024)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 390)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - mask::workload10@17 (line 67)
                                                            ;   {metadata({type array bool})}
  0x00007ff24914f05b:   mov    $0x8,%edx
  0x00007ff24914f060:   mov    0x18(%rsp),%ebp
  0x00007ff24914f064:   vzeroupper 
  0x00007ff24914f067:   callq  0x00007ff24907d6a0           ; ImmutableOopMap {}
                                                            ;*invokestatic compare {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::compareTemplate@42 (line 1899)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@8 (line 2024)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 390)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - mask::workload10@17 (line 67)
                                                            ;   {runtime_call _new_array_Java}
 ;; B14: #	out( B11 ) <- in( B13 )  Freq: 0.000100012
  0x00007ff24914f06c:   mov    %rax,%r9
  0x00007ff24914f06f:   vmovdqu 0x20(%rsp),%ymm2
  0x00007ff24914f075:   vmovdqu 0x40(%rsp),%ymm1
  0x00007ff24914f07b:   nop
  0x00007ff24914f07c:   nop
  0x00007ff24914f07d:   nop
  0x00007ff24914f07e:   nop
  0x00007ff24914f07f:   nop
  0x00007ff24914f080:   jmpq   0x00007ff24914effb
 ;; B15: #	out( N1 ) <- in( B5 )  Freq: 1.01328e-06
  0x00007ff24914f085:   mov    $0xffffffe4,%esi
  0x00007ff24914f08a:   mov    %r11,0x20(%rsp)
  0x00007ff24914f08f:   mov    %rbx,0x28(%rsp)
  0x00007ff24914f094:   mov    %ecx,0x1c(%rsp)
  0x00007ff24914f098:   vzeroupper 
  0x00007ff24914f09b:   callq  0x00007ff24911e940           ; ImmutableOopMap {[32]=Oop [40]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - mask::workload10@5 (line 66)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007ff24914f0a0:   movabs $0x7ff252977980,%rdi         ;   {external_word}
  0x00007ff24914f0aa:   and    $0xfffffffffffffff0,%rsp
  0x00007ff24914f0ae:   callq  0x00007ff252103f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff24914f0b3:   hlt    
 ;; B16: #	out( N1 ) <- in( B11 )  Freq: 1.01325e-06
  0x00007ff24914f0b4:   mov    $0xffffffe4,%esi
  0x00007ff24914f0b9:   mov    %r8d,%ebp
  0x00007ff24914f0bc:   mov    %r9,0x18(%rsp)               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
                                                            ; - jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
                                                            ; - mask::workload10@23 (line 68)
  0x00007ff24914f0c1:   nop
  0x00007ff24914f0c2:   nop
  0x00007ff24914f0c3:   nop
  0x00007ff24914f0c4:   vzeroupper 
  0x00007ff24914f0c7:   callq  0x00007ff24911e940           ; ImmutableOopMap {[24]=Oop }
                                                            ;*baload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractMask::laneIsSet@5 (line 66)
                                                            ; - mask::workload10@23 (line 68)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007ff24914f0cc:   movabs $0x7ff252977980,%rdi         ;   {external_word}
  0x00007ff24914f0d6:   and    $0xfffffffffffffff0,%rsp
  0x00007ff24914f0da:   callq  0x00007ff252103f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff24914f0df:   hlt    
 ;; B17: #	out( N1 ) <- in( B4 )  Freq: 9.99998e-07
  0x00007ff24914f0e0:   mov    $0xffffffcc,%esi
  0x00007ff24914f0e5:   mov    %r11,0x20(%rsp)
  0x00007ff24914f0ea:   mov    %rbx,0x28(%rsp)
  0x00007ff24914f0ef:   mov    %ecx,0x1c(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
                                                            ; - jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
                                                            ; - mask::workload10@23 (line 68)
  0x00007ff24914f0f3:   nop
  0x00007ff24914f0f4:   vzeroupper 
  0x00007ff24914f0f7:   callq  0x00007ff24911e940           ; ImmutableOopMap {[32]=Oop [40]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - mask::workload10@5 (line 66)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007ff24914f0fc:   movabs $0x7ff252977980,%rdi         ;   {external_word}
  0x00007ff24914f106:   and    $0xfffffffffffffff0,%rsp
  0x00007ff24914f10a:   callq  0x00007ff252103f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff24914f10f:   hlt    
 ;; B18: #	out( N1 ) <- in( B2 )  Freq: 1e-35
  0x00007ff24914f110:   mov    $0xffffffde,%esi
  0x00007ff24914f115:   mov    %edx,%ebp
  0x00007ff24914f117:   mov    %r10,0x18(%rsp)
  0x00007ff24914f11c:   mov    %r8d,0x20(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
                                                            ; - jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
                                                            ; - mask::workload10@23 (line 68)
  0x00007ff24914f121:   nop
  0x00007ff24914f122:   nop
  0x00007ff24914f123:   nop
  0x00007ff24914f124:   vzeroupper 
  0x00007ff24914f127:   callq  0x00007ff24911e940           ; ImmutableOopMap {[24]=Oop [32]=NarrowOop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
                                                            ; - mask::workload10@5 (line 66)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007ff24914f12c:   movabs $0x7ff252977980,%rdi         ;   {external_word}
  0x00007ff24914f136:   and    $0xfffffffffffffff0,%rsp
  0x00007ff24914f13a:   callq  0x00007ff252103f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff24914f13f:   hlt    
 ;; B19: #	out( N1 ) <- in( B8 )  Freq: 1e-35
  0x00007ff24914f140:   mov    $0xffffffde,%esi
  0x00007ff24914f145:   mov    0x18(%rsp),%ebp
  0x00007ff24914f149:   mov    %rax,0x18(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
                                                            ; - jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
                                                            ; - mask::workload10@23 (line 68)
  0x00007ff24914f14e:   nop
  0x00007ff24914f14f:   nop
  0x00007ff24914f150:   vzeroupper 
  0x00007ff24914f153:   callq  0x00007ff24911e940           ; ImmutableOopMap {[24]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - mask::workload10@5 (line 66)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007ff24914f158:   movabs $0x7ff252977980,%rdi         ;   {external_word}
  0x00007ff24914f162:   and    $0xfffffffffffffff0,%rsp
  0x00007ff24914f166:   callq  0x00007ff252103f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff24914f16b:   hlt    
 ;; B20: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
  0x00007ff24914f16c:   mov    $0xfffffff4,%esi
  0x00007ff24914f171:   mov    %edx,%ebp
  0x00007ff24914f173:   mov    %r10,0x18(%rsp)
  0x00007ff24914f178:   vzeroupper 
  0x00007ff24914f17b:   callq  0x00007ff24911e940           ; ImmutableOopMap {[24]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
                                                            ; - mask::workload10@5 (line 66)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007ff24914f180:   movabs $0x7ff252977980,%rdi         ;   {external_word}
  0x00007ff24914f18a:   and    $0xfffffffffffffff0,%rsp
  0x00007ff24914f18e:   callq  0x00007ff252103f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff24914f193:   hlt    
 ;; B21: #	out( N1 ) <- in( B3 )  Freq: 1.01328e-06
  0x00007ff24914f194:   mov    $0xfffffff6,%esi             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
                                                            ; - jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
                                                            ; - mask::workload10@23 (line 68)
  0x00007ff24914f199:   nop
  0x00007ff24914f19a:   nop
  0x00007ff24914f19b:   nop
  0x00007ff24914f19c:   vzeroupper 
  0x00007ff24914f19f:   callq  0x00007ff24911e940           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@15 (line 207)
                                                            ; - mask::workload10@5 (line 66)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007ff24914f1a4:   movabs $0x7ff252977980,%rdi         ;   {external_word}
  0x00007ff24914f1ae:   and    $0xfffffffffffffff0,%rsp
  0x00007ff24914f1b2:   callq  0x00007ff252103f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff24914f1b7:   hlt    
 ;; B22: #	out( N1 ) <- in( B7 )  Freq: 1.01325e-06
  0x00007ff24914f1b8:   mov    $0xfffffff4,%esi
  0x00007ff24914f1bd:   mov    0x18(%rsp),%ebp              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
                                                            ; - jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
                                                            ; - mask::workload10@23 (line 68)
  0x00007ff24914f1c1:   nop
  0x00007ff24914f1c2:   nop
  0x00007ff24914f1c3:   nop
  0x00007ff24914f1c4:   vzeroupper 
  0x00007ff24914f1c7:   callq  0x00007ff24911e940           ; ImmutableOopMap {}
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - mask::workload10@5 (line 66)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007ff24914f1cc:   movabs $0x7ff252977980,%rdi         ;   {external_word}
  0x00007ff24914f1d6:   and    $0xfffffffffffffff0,%rsp
  0x00007ff24914f1da:   callq  0x00007ff252103f80           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007ff24914f1df:   hlt    
 ;; B23: #	out( B25 ) <- in( B13 )  Freq: 1.00014e-09
  0x00007ff24914f1e0:   mov    %rax,%rsi
  0x00007ff24914f1e3:   jmp    0x00007ff24914f1e8           ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
                                                            ; - mask::workload10@5 (line 66)
 ;; B24: #	out( B25 ) <- in( B6 )  Freq: 9.99996e-06
  0x00007ff24914f1e5:   mov    %rax,%rsi                    ;*synchronization entry
                                                            ; - mask::workload10@-1 (line 66)
 ;; B25: #	out( N1 ) <- in( B24 B23 )  Freq: 1.0001e-05
  0x00007ff24914f1e8:   vzeroupper 
  0x00007ff24914f1eb:   add    $0x70,%rsp
  0x00007ff24914f1ef:   pop    %rbp
  0x00007ff24914f1f0:   jmpq   0x00007ff24907e920           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
                                                            ; - jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
                                                            ; - mask::workload10@23 (line 68)
                                                            ;   {runtime_call _rethrow_Java}
  0x00007ff24914f1f5:   movabs $0x7ff24914f037,%r10         ;   {internal_word}
  0x00007ff24914f1ff:   mov    %r10,0x3a0(%r15)
  0x00007ff24914f206:   jmpq   0x00007ff24911d6a0           ;   {runtime_call SafepointBlob}
  0x00007ff24914f20b:   hlt    
  0x00007ff24914f20c:   hlt    
  0x00007ff24914f20d:   hlt    
  0x00007ff24914f20e:   hlt    
  0x00007ff24914f20f:   hlt    
  0x00007ff24914f210:   hlt    
  0x00007ff24914f211:   hlt    
  0x00007ff24914f212:   hlt    
  0x00007ff24914f213:   hlt    
  0x00007ff24914f214:   hlt    
  0x00007ff24914f215:   hlt    
  0x00007ff24914f216:   hlt    
  0x00007ff24914f217:   hlt    
  0x00007ff24914f218:   hlt    
  0x00007ff24914f219:   hlt    
  0x00007ff24914f21a:   hlt    
  0x00007ff24914f21b:   hlt    
  0x00007ff24914f21c:   hlt    
  0x00007ff24914f21d:   hlt    
  0x00007ff24914f21e:   hlt    
  0x00007ff24914f21f:   hlt    
[Stub Code]
  0x00007ff24914f220:   movabs $0x0,%rbx                    ;   {no_reloc}
  0x00007ff24914f22a:   jmpq   0x00007ff24914f22a           ;   {runtime_call}
[Exception Handler]
  0x00007ff24914f22f:   jmpq   0x00007ff249081720           ;   {runtime_call ExceptionBlob}
[Deopt Handler Code]
  0x00007ff24914f234:   callq  0x00007ff24914f239
  0x00007ff24914f239:   subq   $0x5,(%rsp)
  0x00007ff24914f23e:   jmpq   0x00007ff24911ec60           ;   {runtime_call DeoptimizationBlob}
  0x00007ff24914f243:   hlt    
  0x00007ff24914f244:   hlt    
  0x00007ff24914f245:   hlt    
  0x00007ff24914f246:   hlt    
  0x00007ff24914f247:   hlt    
--------------------------------------------------------------------------------
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007ff24914f248:   0x0000000101590af0 a 'java/lang/Class'{0x0000000101590af0} = 'jdk/incubator/vector/Int256Vector'
  0x00007ff24914f250:   0x0000000101590b90 a 'java/lang/Class'{0x0000000101590b90} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
  0x00007ff24914f258:   0x00000001010002a0 a 'java/lang/Class'{0x00000001010002a0} = int
  0x00007ff24914f260:   0x0000000101733150 a 'jdk/incubator/vector/IntVector$$Lambda$42+0x00000008000df9d8'{0x0000000101733150}
  0x00007ff24914f268:   0x00000001014bcf50 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000001014bcf50}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007ff24914f270:   0x00007ff1edc0efb8 {method} {0x00007ff1edc0efb8} 'workload10' '([ZI)Z' in 'mask'
  0x00007ff24914f278:   0x00007ff1edc34068 {method} {0x00007ff1edc34068} 'laneIsSet' '(I)Z' in 'jdk/incubator/vector/AbstractMask'
  0x00007ff24914f280:   0x00007ff1ede045c8 {method} {0x00007ff1ede045c8} 'getBits' '()[Z' in 'jdk/incubator/vector/Int256Vector$Int256Mask'
  0x00007ff24914f288:   0x00007ff1ed93d620 {method} {0x00007ff1ed93d620} 'getPayload' '()Ljava/lang/Object;' in 'jdk/internal/vm/vector/VectorSupport$VectorPayload'
  0x00007ff24914f290:   0x00000008000ca890 'jdk/incubator/vector/IntVector$IntSpecies'
  0x00007ff24914f298:   0x00007ff1edc36420 {method} {0x00007ff1edc36420} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[ZI)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
  0x00007ff24914f2a0:   0x00007ff1edc7a9b0 {method} {0x00007ff1edc7a9b0} 'laneCount' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007ff24914f2a8:   0x00000008000ce3d8 'jdk/incubator/vector/Int256Vector$Int256Mask'
  0x00007ff24914f2b0:   0x00007ff1edc1fd28 {method} {0x00007ff1edc1fd28} 'compare' '(Ljdk/incubator/vector/VectorOperators$Comparison;J)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/Int256Vector'
  0x00007ff24914f2b8:   0x00007ff1edc1d5b0 {method} {0x00007ff1edc1d5b0} 'compare' '(Ljdk/incubator/vector/VectorOperators$Comparison;J)Ljdk/incubator/vector/Int256Vector$Int256Mask;' in 'jdk/incubator/vector/Int256Vector'
  0x00007ff24914f2c0:   0x00007ff1edc50e20 {method} {0x00007ff1edc50e20} 'compareTemplate' '(Ljava/lang/Class;Ljdk/incubator/vector/VectorOperators$Comparison;J)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/IntVector'
  0x00007ff24914f2c8:   0x00007ff1edc506b0 {method} {0x00007ff1edc506b0} 'compareTemplate' '(Ljava/lang/Class;Ljdk/incubator/vector/VectorOperators$Comparison;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/IntVector'
  0x00007ff24914f2d0:   0x00007ff1ede05940 {method} {0x00007ff1ede05940} 'toVector' '()Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/Int256Vector$Int256Mask'
  0x00007ff24914f2d8:   0x00007ff1ede04900 {method} {0x00007ff1ede04900} 'toVector' '()Ljdk/incubator/vector/Int256Vector;' in 'jdk/incubator/vector/Int256Vector$Int256Mask'
  0x00007ff24914f2e0:   0x00007ff1edc34e30 {method} {0x00007ff1edc34e30} 'toVectorTemplate' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractMask'
  0x00007ff24914f2e8:   0x00007ff1ede02058 {method} {0x00007ff1ede02058} 'blend' '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/Int256Vector'
  0x00007ff24914f2f0:   0x00007ff1edc1d7a8 {method} {0x00007ff1edc1d7a8} 'blend' '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/Int256Vector;' in 'jdk/incubator/vector/Int256Vector'
  0x00007ff24914f2f8:   0x00007ff1edc510c8 {method} {0x00007ff1edc510c8} 'blendTemplate' '(Ljava/lang/Class;Ljdk/incubator/vector/IntVector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007ff24914f300:   0x0000000800040000 {type array bool}
  0x00007ff24914f308:   0x00007ff1ede28820 {method} {0x00007ff1ede28820} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
  0x00007ff24914f310:   0x00007ff1ed95e498 {method} {0x00007ff1ed95e498} 'checkIndex' '(II)I' in 'java/util/Objects'
  0x00007ff24914f318:   0x00000008000cc6f8 'jdk/incubator/vector/VectorMask'
  0x00007ff24914f320:   0x00007ff1edc37048 {method} {0x00007ff1edc37048} 'laneIsSet' '(I)Z' in 'jdk/incubator/vector/VectorMask'
  0x00007ff24914f328:   0x00000008000d7760 'jdk/incubator/vector/VectorOperators$ComparisonImpl'
  0x00007ff24914f330:   0x00007ff1edea5a78 {method} {0x00007ff1edea5a78} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007ff24914f338:   0x00000008000d6380 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007ff24914f340:   0x00007ff1edea5b48 {method} {0x00007ff1edea5b48} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007ff24914ee7f offset=ffffffff bits=0):
PcDesc(pc=0x00007ff24914ee8c offset=c bits=0):
   mask::workload10@-1 (line 66)
PcDesc(pc=0x00007ff24914ee9d offset=1d bits=0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
   mask::workload10@23 (line 68)
PcDesc(pc=0x00007ff24914eea1 offset=21 bits=0):
   mask::workload10@0 (line 66)
PcDesc(pc=0x00007ff24914eead offset=2d bits=0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
   mask::workload10@23 (line 68)
PcDesc(pc=0x00007ff24914eebe offset=3e bits=0):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
   mask::workload10@5 (line 66)
PcDesc(pc=0x00007ff24914eec1 offset=41 bits=0):
   jdk.incubator.vector.AbstractSpecies::laneCount@1 (line 125)
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
   mask::workload10@5 (line 66)
PcDesc(pc=0x00007ff24914eedf offset=5f bits=0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
   mask::workload10@23 (line 68)
PcDesc(pc=0x00007ff24914ef44 offset=c4 bits=4):
   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   mask::workload10@5 (line 66)
   Locals
    - l0: empty
    - l1: stack[24]
    - l2: empty
    - l3: empty
PcDesc(pc=0x00007ff24914ef4f offset=cf bits=0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
   mask::workload10@23 (line 68)
PcDesc(pc=0x00007ff24914ef55 offset=d5 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   mask::workload10@5 (line 66)
PcDesc(pc=0x00007ff24914ef59 offset=d9 bits=0):
   jdk.incubator.vector.IntVector::compareTemplate@42 (line 1899)
   jdk.incubator.vector.IntVector::compareTemplate@8 (line 2024)
   jdk.incubator.vector.Int256Vector::compare@5 (line 390)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   mask::workload10@17 (line 67)
PcDesc(pc=0x00007ff24914ef91 offset=111 bits=0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
   mask::workload10@23 (line 68)
PcDesc(pc=0x00007ff24914ef97 offset=117 bits=0):
   jdk.incubator.vector.IntVector::blendTemplate@26 (line 2052)
   jdk.incubator.vector.Int256Vector::blend@11 (line 404)
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   jdk.incubator.vector.AbstractMask::toVectorTemplate@22 (line 200)
   jdk.incubator.vector.Int256Vector$Int256Mask::toVector@1 (line 612)
   jdk.incubator.vector.Int256Vector$Int256Mask::toVector@1 (line 543)
   mask::workload10@10 (line 67)
PcDesc(pc=0x00007ff24914f013 offset=193 bits=0):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@4 (line 584)
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
   mask::workload10@23 (line 68)
PcDesc(pc=0x00007ff24914f029 offset=1a9 bits=0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
   mask::workload10@23 (line 68)
PcDesc(pc=0x00007ff24914f02f offset=1af bits=0):
   jdk.incubator.vector.AbstractMask::laneIsSet@5 (line 66)
   mask::workload10@23 (line 68)
PcDesc(pc=0x00007ff24914f05b offset=1db bits=0):
   jdk.incubator.vector.IntVector::compareTemplate@42 (line 1899)
   jdk.incubator.vector.IntVector::compareTemplate@8 (line 2024)
   jdk.incubator.vector.Int256Vector::compare@5 (line 390)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   mask::workload10@17 (line 67)
PcDesc(pc=0x00007ff24914f06c offset=1ec bits=5):
   jdk.incubator.vector.IntVector::compareTemplate@42 (line 1899)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: 0
    - @1: a 'java/lang/Class'{0x0000000101590af0} = 'jdk/incubator/vector/Int256Vector'
    - @2: a 'java/lang/Class'{0x0000000101590b90} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @3: a 'java/lang/Class'{0x00000001010002a0} = int
    - @4: 8
    - @5: obj[144]
    - @6: obj[145]
    - @7: NULL
    - @8: a 'jdk/incubator/vector/IntVector$$Lambda$42+0x00000008000df9d8'{0x0000000101733150}
   jdk.incubator.vector.IntVector::compareTemplate@8 (line 2024)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.Int256Vector::compare@5 (line 390)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   mask::workload10@17 (line 67)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
   Objects
    - 144: jdk.incubator.vector.Int256Vector stack[64],vector
    - 145: jdk.incubator.vector.Int256Vector stack[32],vector
PcDesc(pc=0x00007ff24914f0a0 offset=220 bits=0):
   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[28]
   mask::workload10@5 (line 66)
   Locals
    - l0: empty
    - l1: stack[24]
    - l2: empty
    - l3: empty
PcDesc(pc=0x00007ff24914f0c1 offset=241 bits=0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
   mask::workload10@23 (line 68)
PcDesc(pc=0x00007ff24914f0cc offset=24c bits=0):
   jdk.incubator.vector.AbstractMask::laneIsSet@5 (line 66)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[24],oop
    - @1: reg rbp [10],int
   mask::workload10@23 (line 68)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
PcDesc(pc=0x00007ff24914f0f3 offset=273 bits=0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
   mask::workload10@23 (line 68)
PcDesc(pc=0x00007ff24914f0fc offset=27c bits=0):
   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[28]
   mask::workload10@5 (line 66)
   Locals
    - l0: empty
    - l1: stack[24]
    - l2: empty
    - l3: empty
PcDesc(pc=0x00007ff24914f121 offset=2a1 bits=0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
   mask::workload10@23 (line 68)
PcDesc(pc=0x00007ff24914f12c offset=2ac bits=0):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[32],narrowoop
   mask::workload10@5 (line 66)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
PcDesc(pc=0x00007ff24914f14e offset=2ce bits=0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
   mask::workload10@23 (line 68)
PcDesc(pc=0x00007ff24914f158 offset=2d8 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[24],oop
   mask::workload10@5 (line 66)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
PcDesc(pc=0x00007ff24914f180 offset=300 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
   mask::workload10@5 (line 66)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
PcDesc(pc=0x00007ff24914f199 offset=319 bits=0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
   mask::workload10@23 (line 68)
PcDesc(pc=0x00007ff24914f1a4 offset=324 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@15 (line 207)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: NULL
   mask::workload10@5 (line 66)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
PcDesc(pc=0x00007ff24914f1c1 offset=341 bits=0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
   mask::workload10@23 (line 68)
PcDesc(pc=0x00007ff24914f1cc offset=34c bits=0):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
   mask::workload10@5 (line 66)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
PcDesc(pc=0x00007ff24914f1e5 offset=365 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
   mask::workload10@5 (line 66)
PcDesc(pc=0x00007ff24914f1e8 offset=368 bits=0):
   mask::workload10@-1 (line 66)
PcDesc(pc=0x00007ff24914f1f5 offset=375 bits=0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
   mask::workload10@23 (line 68)
PcDesc(pc=0x00007ff24914f269 offset=3e9 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 10 OopMaps

ImmutableOopMap {} pc offsets: 196 492 
ImmutableOopMap {[32]=Oop [40]=Oop } pc offsets: 544 
ImmutableOopMap {[24]=Oop } pc offsets: 588 
ImmutableOopMap {[32]=Oop [40]=Oop } pc offsets: 636 
ImmutableOopMap {[24]=Oop [32]=NarrowOop } pc offsets: 684 
ImmutableOopMap {[24]=Oop } pc offsets: 728 768 
ImmutableOopMap {} pc offsets: 804 844 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007ff24914ee8c offset=c):
   mask::workload10@-1 (line 66)
ScopeDesc(pc=0x00007ff24914ee9d offset=1d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
ScopeDesc(pc=0x00007ff24914ee9d offset=1d):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
ScopeDesc(pc=0x00007ff24914ee9d offset=1d):
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
ScopeDesc(pc=0x00007ff24914ee9d offset=1d):
   mask::workload10@23 (line 68)
ScopeDesc(pc=0x00007ff24914eea1 offset=21):
   mask::workload10@0 (line 66)
ScopeDesc(pc=0x00007ff24914eead offset=2d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
ScopeDesc(pc=0x00007ff24914eead offset=2d):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
ScopeDesc(pc=0x00007ff24914eead offset=2d):
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
ScopeDesc(pc=0x00007ff24914eead offset=2d):
   mask::workload10@23 (line 68)
ScopeDesc(pc=0x00007ff24914eebe offset=3e):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
ScopeDesc(pc=0x00007ff24914eebe offset=3e):
   mask::workload10@5 (line 66)
ScopeDesc(pc=0x00007ff24914eec1 offset=41):
   jdk.incubator.vector.AbstractSpecies::laneCount@1 (line 125)
ScopeDesc(pc=0x00007ff24914eec1 offset=41):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
ScopeDesc(pc=0x00007ff24914eec1 offset=41):
   mask::workload10@5 (line 66)
ScopeDesc(pc=0x00007ff24914eedf offset=5f):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
ScopeDesc(pc=0x00007ff24914eedf offset=5f):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
ScopeDesc(pc=0x00007ff24914eedf offset=5f):
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
ScopeDesc(pc=0x00007ff24914eedf offset=5f):
   mask::workload10@23 (line 68)
ScopeDesc(pc=0x00007ff24914ef44 offset=c4):
   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007ff24914ef44 offset=c4):
   mask::workload10@5 (line 66)
   Locals
    - l0: empty
    - l1: stack[24]
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007ff24914ef4f offset=cf):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
ScopeDesc(pc=0x00007ff24914ef4f offset=cf):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
ScopeDesc(pc=0x00007ff24914ef4f offset=cf):
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
ScopeDesc(pc=0x00007ff24914ef4f offset=cf):
   mask::workload10@23 (line 68)
ScopeDesc(pc=0x00007ff24914ef55 offset=d5):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
ScopeDesc(pc=0x00007ff24914ef55 offset=d5):
   mask::workload10@5 (line 66)
ScopeDesc(pc=0x00007ff24914ef59 offset=d9):
   jdk.incubator.vector.IntVector::compareTemplate@42 (line 1899)
ScopeDesc(pc=0x00007ff24914ef59 offset=d9):
   jdk.incubator.vector.IntVector::compareTemplate@8 (line 2024)
ScopeDesc(pc=0x00007ff24914ef59 offset=d9):
   jdk.incubator.vector.Int256Vector::compare@5 (line 390)
ScopeDesc(pc=0x00007ff24914ef59 offset=d9):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007ff24914ef59 offset=d9):
   mask::workload10@17 (line 67)
ScopeDesc(pc=0x00007ff24914ef91 offset=111):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
ScopeDesc(pc=0x00007ff24914ef91 offset=111):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
ScopeDesc(pc=0x00007ff24914ef91 offset=111):
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
ScopeDesc(pc=0x00007ff24914ef91 offset=111):
   mask::workload10@23 (line 68)
ScopeDesc(pc=0x00007ff24914ef97 offset=117):
   jdk.incubator.vector.IntVector::blendTemplate@26 (line 2052)
ScopeDesc(pc=0x00007ff24914ef97 offset=117):
   jdk.incubator.vector.Int256Vector::blend@11 (line 404)
ScopeDesc(pc=0x00007ff24914ef97 offset=117):
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
ScopeDesc(pc=0x00007ff24914ef97 offset=117):
   jdk.incubator.vector.AbstractMask::toVectorTemplate@22 (line 200)
ScopeDesc(pc=0x00007ff24914ef97 offset=117):
   jdk.incubator.vector.Int256Vector$Int256Mask::toVector@1 (line 612)
ScopeDesc(pc=0x00007ff24914ef97 offset=117):
   jdk.incubator.vector.Int256Vector$Int256Mask::toVector@1 (line 543)
ScopeDesc(pc=0x00007ff24914ef97 offset=117):
   mask::workload10@10 (line 67)
ScopeDesc(pc=0x00007ff24914f013 offset=193):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@4 (line 584)
ScopeDesc(pc=0x00007ff24914f013 offset=193):
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
ScopeDesc(pc=0x00007ff24914f013 offset=193):
   mask::workload10@23 (line 68)
ScopeDesc(pc=0x00007ff24914f029 offset=1a9):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
ScopeDesc(pc=0x00007ff24914f029 offset=1a9):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
ScopeDesc(pc=0x00007ff24914f029 offset=1a9):
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
ScopeDesc(pc=0x00007ff24914f029 offset=1a9):
   mask::workload10@23 (line 68)
ScopeDesc(pc=0x00007ff24914f02f offset=1af):
   jdk.incubator.vector.AbstractMask::laneIsSet@5 (line 66)
ScopeDesc(pc=0x00007ff24914f02f offset=1af):
   mask::workload10@23 (line 68)
ScopeDesc(pc=0x00007ff24914f05b offset=1db):
   jdk.incubator.vector.IntVector::compareTemplate@42 (line 1899)
ScopeDesc(pc=0x00007ff24914f05b offset=1db):
   jdk.incubator.vector.IntVector::compareTemplate@8 (line 2024)
ScopeDesc(pc=0x00007ff24914f05b offset=1db):
   jdk.incubator.vector.Int256Vector::compare@5 (line 390)
ScopeDesc(pc=0x00007ff24914f05b offset=1db):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007ff24914f05b offset=1db):
   mask::workload10@17 (line 67)
ScopeDesc(pc=0x00007ff24914f06c offset=1ec):
   jdk.incubator.vector.IntVector::compareTemplate@42 (line 1899)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: 0
    - @1: a 'java/lang/Class'{0x0000000101590af0} = 'jdk/incubator/vector/Int256Vector'
    - @2: a 'java/lang/Class'{0x0000000101590b90} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @3: a 'java/lang/Class'{0x00000001010002a0} = int
    - @4: 8
    - @5: obj[144]
    - @6: obj[145]
    - @7: NULL
    - @8: a 'jdk/incubator/vector/IntVector$$Lambda$42+0x00000008000df9d8'{0x0000000101733150}
ScopeDesc(pc=0x00007ff24914f06c offset=1ec):
   jdk.incubator.vector.IntVector::compareTemplate@8 (line 2024)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007ff24914f06c offset=1ec):
   jdk.incubator.vector.Int256Vector::compare@5 (line 390)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007ff24914f06c offset=1ec):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007ff24914f06c offset=1ec):
   mask::workload10@17 (line 67)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
   Objects
    - 144: jdk.incubator.vector.Int256Vector stack[64],vector
    - 145: jdk.incubator.vector.Int256Vector stack[32],vector
ScopeDesc(pc=0x00007ff24914f0a0 offset=220):
   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
ScopeDesc(pc=0x00007ff24914f0a0 offset=220):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007ff24914f0a0 offset=220):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[28]
ScopeDesc(pc=0x00007ff24914f0a0 offset=220):
   mask::workload10@5 (line 66)
   Locals
    - l0: empty
    - l1: stack[24]
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007ff24914f0c1 offset=241):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
ScopeDesc(pc=0x00007ff24914f0c1 offset=241):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
ScopeDesc(pc=0x00007ff24914f0c1 offset=241):
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
ScopeDesc(pc=0x00007ff24914f0c1 offset=241):
   mask::workload10@23 (line 68)
ScopeDesc(pc=0x00007ff24914f0cc offset=24c):
   jdk.incubator.vector.AbstractMask::laneIsSet@5 (line 66)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[24],oop
    - @1: reg rbp [10],int
ScopeDesc(pc=0x00007ff24914f0cc offset=24c):
   mask::workload10@23 (line 68)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007ff24914f0f3 offset=273):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
ScopeDesc(pc=0x00007ff24914f0f3 offset=273):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
ScopeDesc(pc=0x00007ff24914f0f3 offset=273):
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
ScopeDesc(pc=0x00007ff24914f0f3 offset=273):
   mask::workload10@23 (line 68)
ScopeDesc(pc=0x00007ff24914f0fc offset=27c):
   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
ScopeDesc(pc=0x00007ff24914f0fc offset=27c):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007ff24914f0fc offset=27c):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[28]
ScopeDesc(pc=0x00007ff24914f0fc offset=27c):
   mask::workload10@5 (line 66)
   Locals
    - l0: empty
    - l1: stack[24]
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007ff24914f121 offset=2a1):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
ScopeDesc(pc=0x00007ff24914f121 offset=2a1):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
ScopeDesc(pc=0x00007ff24914f121 offset=2a1):
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
ScopeDesc(pc=0x00007ff24914f121 offset=2a1):
   mask::workload10@23 (line 68)
ScopeDesc(pc=0x00007ff24914f12c offset=2ac):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[32],narrowoop
ScopeDesc(pc=0x00007ff24914f12c offset=2ac):
   mask::workload10@5 (line 66)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007ff24914f14e offset=2ce):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
ScopeDesc(pc=0x00007ff24914f14e offset=2ce):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
ScopeDesc(pc=0x00007ff24914f14e offset=2ce):
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
ScopeDesc(pc=0x00007ff24914f14e offset=2ce):
   mask::workload10@23 (line 68)
ScopeDesc(pc=0x00007ff24914f158 offset=2d8):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[24],oop
ScopeDesc(pc=0x00007ff24914f158 offset=2d8):
   mask::workload10@5 (line 66)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007ff24914f180 offset=300):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007ff24914f180 offset=300):
   mask::workload10@5 (line 66)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007ff24914f199 offset=319):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
ScopeDesc(pc=0x00007ff24914f199 offset=319):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
ScopeDesc(pc=0x00007ff24914f199 offset=319):
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
ScopeDesc(pc=0x00007ff24914f199 offset=319):
   mask::workload10@23 (line 68)
ScopeDesc(pc=0x00007ff24914f1a4 offset=324):
   jdk.incubator.vector.VectorMask::fromArray@15 (line 207)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: NULL
ScopeDesc(pc=0x00007ff24914f1a4 offset=324):
   mask::workload10@5 (line 66)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007ff24914f1c1 offset=341):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
ScopeDesc(pc=0x00007ff24914f1c1 offset=341):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
ScopeDesc(pc=0x00007ff24914f1c1 offset=341):
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
ScopeDesc(pc=0x00007ff24914f1c1 offset=341):
   mask::workload10@23 (line 68)
ScopeDesc(pc=0x00007ff24914f1cc offset=34c):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007ff24914f1cc offset=34c):
   mask::workload10@5 (line 66)
   Locals
    - l0: empty
    - l1: reg rbp [10],int
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007ff24914f1e5 offset=365):
   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
ScopeDesc(pc=0x00007ff24914f1e5 offset=365):
   mask::workload10@5 (line 66)
ScopeDesc(pc=0x00007ff24914f1e8 offset=368):
   mask::workload10@-1 (line 66)
ScopeDesc(pc=0x00007ff24914f1f5 offset=375):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 138)
ScopeDesc(pc=0x00007ff24914f1f5 offset=375):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@1 (line 584)
ScopeDesc(pc=0x00007ff24914f1f5 offset=375):
   jdk.incubator.vector.AbstractMask::laneIsSet@1 (line 66)
ScopeDesc(pc=0x00007ff24914f1f5 offset=375):
   mask::workload10@23 (line 68)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007ff24914ed88: 0020
relocInfo@0x00007ff24914ed88 [type=0(none) addr=0x00007ff24914ee80 offset=32]
         @0x00007ff24914ed8a: 1013
relocInfo@0x00007ff24914ed8a [type=1(oop) addr=0x00007ff24914ee93 offset=19] | [oop_addr=0x00007ff24914ee95 *=0x0000000101583280 offset=0]
         @0x00007ff24914ed8c: f005cc13
relocInfo@0x00007ff24914ed8e [type=12(metadata) addr=0x00007ff24914eea6 offset=19 format=3 data=5] | [metadata_addr=0x00007ff24914f290 *=0x00000008000ca890 offset=0]metadata_value=0x00000008000ca890: 'jdk/incubator/vector/IntVector$IntSpecies'
         @0x00007ff24914ed90: f803533bcea07ff2743e
relocInfo@0x00007ff24914ed98 [type=7(external_word) addr=0x00007ff24914eee4 offset=62 format=1 data={533bcea07ff2}] | [target=0x00007ff2533bcea0]
         @0x00007ff24914ed9a: f80352b249c87ff2700d
relocInfo@0x00007ff24914eda2 [type=7(external_word) addr=0x00007ff24914eef1 offset=13 data={52b249c87ff2}] | [target=0x00007ff252b249c8]
         @0x00007ff24914eda4: 640e
relocInfo@0x00007ff24914eda4 [type=6(runtime_call) addr=0x00007ff24914eeff offset=14 format=1] | [destination=0x00007ff252103f80]
         @0x00007ff24914eda6: 1012
relocInfo@0x00007ff24914eda6 [type=1(oop) addr=0x00007ff24914ef11 offset=18] | [oop_addr=0x00007ff24914ef13 *=0x00000001010002a0 offset=0]
         @0x00007ff24914eda8: 101c
relocInfo@0x00007ff24914eda8 [type=1(oop) addr=0x00007ff24914ef2d offset=28] | [oop_addr=0x00007ff24914ef2f *=0x000000010159f6d8 offset=0]
         @0x00007ff24914edaa: 4412
relocInfo@0x00007ff24914edaa [type=4(static_call) addr=0x00007ff24914ef3f offset=18 format=1] | [destination=0x00007ff24914cb40 metadata=0x0000000000000000]
         @0x00007ff24914edac: f008cc09
relocInfo@0x00007ff24914edae [type=12(metadata) addr=0x00007ff24914ef48 offset=9 format=3 data=8] | [metadata_addr=0x00007ff24914f2a8 *=0x00000008000ce3d8 offset=0]metadata_value=0x00000008000ce3d8: 'jdk/incubator/vector/Int256Vector$Int256Mask'
         @0x00007ff24914edb0: 942a
relocInfo@0x00007ff24914edb0 [type=9(section_word) addr=0x00007ff24914ef72 offset=42 format=1] | [target=0x00007ff24914ee60]
         @0x00007ff24914edb2: f803490af5607ff2740d
relocInfo@0x00007ff24914edba [type=7(external_word) addr=0x00007ff24914ef7f offset=13 format=1 data={490af5607ff2}] | [target=0x00007ff2490af560]
         @0x00007ff24914edbc: f013cc4b
relocInfo@0x00007ff24914edbe [type=12(metadata) addr=0x00007ff24914efca offset=75 format=3 data=19] | [metadata_addr=0x00007ff24914f300 *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007ff24914edc0: b06d
relocInfo@0x00007ff24914edc0 [type=11(poll_return) addr=0x00007ff24914f037 offset=109]
         @0x00007ff24914edc2: c01a
relocInfo@0x00007ff24914edc2 [type=12(metadata) addr=0x00007ff24914f051 offset=26] | [metadata_addr=0x00007ff24914f053 *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007ff24914edc4: 6416
relocInfo@0x00007ff24914edc4 [type=6(runtime_call) addr=0x00007ff24914f067 offset=22 format=1] | [destination=0x00007ff24907d6a0]
         @0x00007ff24914edc6: 6434
relocInfo@0x00007ff24914edc6 [type=6(runtime_call) addr=0x00007ff24914f09b offset=52 format=1] | [destination=0x00007ff24911e940]
         @0x00007ff24914edc8: f803529779807ff27005
relocInfo@0x00007ff24914edd0 [type=7(external_word) addr=0x00007ff24914f0a0 offset=5 data={529779807ff2}] | [target=0x00007ff252977980]
         @0x00007ff24914edd2: 640e
relocInfo@0x00007ff24914edd2 [type=6(runtime_call) addr=0x00007ff24914f0ae offset=14 format=1] | [destination=0x00007ff252103f80]
         @0x00007ff24914edd4: 6419
relocInfo@0x00007ff24914edd4 [type=6(runtime_call) addr=0x00007ff24914f0c7 offset=25 format=1] | [destination=0x00007ff24911e940]
         @0x00007ff24914edd6: f803529779807ff27005
relocInfo@0x00007ff24914edde [type=7(external_word) addr=0x00007ff24914f0cc offset=5 data={529779807ff2}] | [target=0x00007ff252977980]
         @0x00007ff24914ede0: 640e
relocInfo@0x00007ff24914ede0 [type=6(runtime_call) addr=0x00007ff24914f0da offset=14 format=1] | [destination=0x00007ff252103f80]
         @0x00007ff24914ede2: 641d
relocInfo@0x00007ff24914ede2 [type=6(runtime_call) addr=0x00007ff24914f0f7 offset=29 format=1] | [destination=0x00007ff24911e940]
         @0x00007ff24914ede4: f803529779807ff27005
relocInfo@0x00007ff24914edec [type=7(external_word) addr=0x00007ff24914f0fc offset=5 data={529779807ff2}] | [target=0x00007ff252977980]
         @0x00007ff24914edee: 640e
relocInfo@0x00007ff24914edee [type=6(runtime_call) addr=0x00007ff24914f10a offset=14 format=1] | [destination=0x00007ff252103f80]
         @0x00007ff24914edf0: 641d
relocInfo@0x00007ff24914edf0 [type=6(runtime_call) addr=0x00007ff24914f127 offset=29 format=1] | [destination=0x00007ff24911e940]
         @0x00007ff24914edf2: f803529779807ff27005
relocInfo@0x00007ff24914edfa [type=7(external_word) addr=0x00007ff24914f12c offset=5 data={529779807ff2}] | [target=0x00007ff252977980]
         @0x00007ff24914edfc: 640e
relocInfo@0x00007ff24914edfc [type=6(runtime_call) addr=0x00007ff24914f13a offset=14 format=1] | [destination=0x00007ff252103f80]
         @0x00007ff24914edfe: 6419
relocInfo@0x00007ff24914edfe [type=6(runtime_call) addr=0x00007ff24914f153 offset=25 format=1] | [destination=0x00007ff24911e940]
         @0x00007ff24914ee00: f803529779807ff27005
relocInfo@0x00007ff24914ee08 [type=7(external_word) addr=0x00007ff24914f158 offset=5 data={529779807ff2}] | [target=0x00007ff252977980]
         @0x00007ff24914ee0a: 640e
relocInfo@0x00007ff24914ee0a [type=6(runtime_call) addr=0x00007ff24914f166 offset=14 format=1] | [destination=0x00007ff252103f80]
         @0x00007ff24914ee0c: 6415
relocInfo@0x00007ff24914ee0c [type=6(runtime_call) addr=0x00007ff24914f17b offset=21 format=1] | [destination=0x00007ff24911e940]
         @0x00007ff24914ee0e: f803529779807ff27005
relocInfo@0x00007ff24914ee16 [type=7(external_word) addr=0x00007ff24914f180 offset=5 data={529779807ff2}] | [target=0x00007ff252977980]
         @0x00007ff24914ee18: 640e
relocInfo@0x00007ff24914ee18 [type=6(runtime_call) addr=0x00007ff24914f18e offset=14 format=1] | [destination=0x00007ff252103f80]
         @0x00007ff24914ee1a: 6411
relocInfo@0x00007ff24914ee1a [type=6(runtime_call) addr=0x00007ff24914f19f offset=17 format=1] | [destination=0x00007ff24911e940]
         @0x00007ff24914ee1c: f803529779807ff27005
relocInfo@0x00007ff24914ee24 [type=7(external_word) addr=0x00007ff24914f1a4 offset=5 data={529779807ff2}] | [target=0x00007ff252977980]
         @0x00007ff24914ee26: 640e
relocInfo@0x00007ff24914ee26 [type=6(runtime_call) addr=0x00007ff24914f1b2 offset=14 format=1] | [destination=0x00007ff252103f80]
         @0x00007ff24914ee28: 6415
relocInfo@0x00007ff24914ee28 [type=6(runtime_call) addr=0x00007ff24914f1c7 offset=21 format=1] | [destination=0x00007ff24911e940]
         @0x00007ff24914ee2a: f803529779807ff27005
relocInfo@0x00007ff24914ee32 [type=7(external_word) addr=0x00007ff24914f1cc offset=5 data={529779807ff2}] | [target=0x00007ff252977980]
         @0x00007ff24914ee34: 640e
relocInfo@0x00007ff24914ee34 [type=6(runtime_call) addr=0x00007ff24914f1da offset=14 format=1] | [destination=0x00007ff252103f80]
         @0x00007ff24914ee36: 6416
relocInfo@0x00007ff24914ee36 [type=6(runtime_call) addr=0x00007ff24914f1f0 offset=22 format=1] | [destination=0x00007ff24907e920]
         @0x00007ff24914ee38: f1be8005
relocInfo@0x00007ff24914ee3a [type=8(internal_word) addr=0x00007ff24914f1f5 offset=5 data=446] | [target=0x00007ff24914f037]
         @0x00007ff24914ee3c: 6411
relocInfo@0x00007ff24914ee3c [type=6(runtime_call) addr=0x00007ff24914f206 offset=17 format=1] | [destination=0x00007ff24911d6a0]
         @0x00007ff24914ee3e: 001a
relocInfo@0x00007ff24914ee3e [type=0(none) addr=0x00007ff24914f220 offset=26]
         @0x00007ff24914ee40: f801ff415000
relocInfo@0x00007ff24914ee44 [type=5(static_stub) addr=0x00007ff24914f220 offset=0 data=-191] | [static_call=0x00007ff24914ef3f]
         @0x00007ff24914ee46: c000
relocInfo@0x00007ff24914ee46 [type=12(metadata) addr=0x00007ff24914f220 offset=0] | [metadata_addr=0x00007ff24914f222 *=0x0000000000000000 offset=0]
         @0x00007ff24914ee48: 640a
relocInfo@0x00007ff24914ee48 [type=6(runtime_call) addr=0x00007ff24914f22a offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007ff24914ee4a: 6405
relocInfo@0x00007ff24914ee4a [type=6(runtime_call) addr=0x00007ff24914f22f offset=5 format=1] | [destination=0x00007ff249081720]
         @0x00007ff24914ee4c: 640f
relocInfo@0x00007ff24914ee4c [type=6(runtime_call) addr=0x00007ff24914f23e offset=15 format=1] | [destination=0x00007ff24911ec60]
         @0x00007ff24914ee4e: 0000
relocInfo@0x00007ff24914ee4e [type=0(none) addr=0x00007ff24914f23e offset=0]
         @0x00007ff24914ee50: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.Int256Vector$Int256Mask
  method  = {method} {0x00007ff1edc34068} 'laneIsSet' '(I)Z' in 'jdk/incubator/vector/AbstractMask'
  class   = jdk.incubator.vector.VectorMask
  method  = *{method} {0x00007ff1edc37048} 'laneIsSet' '(I)Z' in 'jdk/incubator/vector/VectorMask'
   [nmethod<=klass]jdk.incubator.vector.Int256Vector$Int256Mask
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.VectorOperators$ComparisonImpl
  method  = {method} {0x00007ff1edea5a78} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  class   = jdk.incubator.vector.VectorOperators$OperatorImpl
  method  = {method} {0x00007ff1edea5a78} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$ComparisonImpl
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.VectorOperators$ComparisonImpl
  method  = {method} {0x00007ff1edea5b48} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  class   = jdk.incubator.vector.VectorOperators$OperatorImpl
  method  = {method} {0x00007ff1edea5b48} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$ComparisonImpl
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 48 bytes)
catch_pco = 196 (pc=0x00007ff24914ef44, 1 entries)
  bci -1 at scope depth 0 -> pco 869 (pc=0x00007ff24914f1e5)
catch_pco = 492 (pc=0x00007ff24914f06c, 1 entries)
  bci -1 at scope depth 0 -> pco 864 (pc=0x00007ff24914f1e0)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 3 entries, 28 bytes):
{
   < 0x00007ff24914eea1, 0x00007ff24914f16c > < 0x00007ff24914eeb6, 0x00007ff24914f194 > < 0x00007ff24914ef44, 0x00007ff24914f1b8 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x0000000101590af0 a 'java/lang/Class'{0x0000000101590af0} = 'jdk/incubator/vector/Int256Vector'
#2: 0x0000000101590b90 a 'java/lang/Class'{0x0000000101590b90} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
#3: 0x00000001010002a0 a 'java/lang/Class'{0x00000001010002a0} = int
#4: 0x0000000101733150 a 'jdk/incubator/vector/IntVector$$Lambda$42+0x00000008000df9d8'{0x0000000101733150}
#5: 0x00000001014bcf50 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000001014bcf50}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
# 0: 0x0000000000000000 NULL-oop
# 1: 0x00007ff1edc0efb8 {method} {0x00007ff1edc0efb8} 'workload10' '([ZI)Z' in 'mask'
# 2: 0x00007ff1edc34068 {method} {0x00007ff1edc34068} 'laneIsSet' '(I)Z' in 'jdk/incubator/vector/AbstractMask'
# 3: 0x00007ff1ede045c8 {method} {0x00007ff1ede045c8} 'getBits' '()[Z' in 'jdk/incubator/vector/Int256Vector$Int256Mask'
# 4: 0x00007ff1ed93d620 {method} {0x00007ff1ed93d620} 'getPayload' '()Ljava/lang/Object;' in 'jdk/internal/vm/vector/VectorSupport$VectorPayload'
# 5: 0x00000008000ca890 'jdk/incubator/vector/IntVector$IntSpecies'
# 6: 0x00007ff1edc36420 {method} {0x00007ff1edc36420} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[ZI)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
# 7: 0x00007ff1edc7a9b0 {method} {0x00007ff1edc7a9b0} 'laneCount' '()I' in 'jdk/incubator/vector/AbstractSpecies'
# 8: 0x00000008000ce3d8 'jdk/incubator/vector/Int256Vector$Int256Mask'
# 9: 0x00007ff1edc1fd28 {method} {0x00007ff1edc1fd28} 'compare' '(Ljdk/incubator/vector/VectorOperators$Comparison;J)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/Int256Vector'
#10: 0x00007ff1edc1d5b0 {method} {0x00007ff1edc1d5b0} 'compare' '(Ljdk/incubator/vector/VectorOperators$Comparison;J)Ljdk/incubator/vector/Int256Vector$Int256Mask;' in 'jdk/incubator/vector/Int256Vector'
#11: 0x00007ff1edc50e20 {method} {0x00007ff1edc50e20} 'compareTemplate' '(Ljava/lang/Class;Ljdk/incubator/vector/VectorOperators$Comparison;J)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/IntVector'
#12: 0x00007ff1edc506b0 {method} {0x00007ff1edc506b0} 'compareTemplate' '(Ljava/lang/Class;Ljdk/incubator/vector/VectorOperators$Comparison;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/IntVector'
#13: 0x00007ff1ede05940 {method} {0x00007ff1ede05940} 'toVector' '()Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/Int256Vector$Int256Mask'
#14: 0x00007ff1ede04900 {method} {0x00007ff1ede04900} 'toVector' '()Ljdk/incubator/vector/Int256Vector;' in 'jdk/incubator/vector/Int256Vector$Int256Mask'
#15: 0x00007ff1edc34e30 {method} {0x00007ff1edc34e30} 'toVectorTemplate' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractMask'
#16: 0x00007ff1ede02058 {method} {0x00007ff1ede02058} 'blend' '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/Int256Vector'
#17: 0x00007ff1edc1d7a8 {method} {0x00007ff1edc1d7a8} 'blend' '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/Int256Vector;' in 'jdk/incubator/vector/Int256Vector'
#18: 0x00007ff1edc510c8 {method} {0x00007ff1edc510c8} 'blendTemplate' '(Ljava/lang/Class;Ljdk/incubator/vector/IntVector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#19: 0x0000000800040000 {type array bool}
#20: 0x00007ff1ede28820 {method} {0x00007ff1ede28820} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
#21: 0x00007ff1ed95e498 {method} {0x00007ff1ed95e498} 'checkIndex' '(II)I' in 'java/util/Objects'
#22: 0x00000008000cc6f8 'jdk/incubator/vector/VectorMask'
#23: 0x00007ff1edc37048 {method} {0x00007ff1edc37048} 'laneIsSet' '(I)Z' in 'jdk/incubator/vector/VectorMask'
#24: 0x00000008000d7760 'jdk/incubator/vector/VectorOperators$ComparisonImpl'
#25: 0x00007ff1edea5a78 {method} {0x00007ff1edea5a78} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#26: 0x00000008000d6380 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#27: 0x00007ff1edea5b48 {method} {0x00007ff1edea5b48} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[Time] 105ms   [Res] 0
------------------------------------------------------------------------
static mask::workload10([ZI)Z
  interpreter_invocation_count:       11755
  invocation_counter:                 11755
  backedge_counter:                       0
  decompile_count:                        0
  mdo size: 624 bytes

0 getstatic 7 <mask.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
3 fast_aload_0
4 iconst_0
5 invokestatic 13 <jdk/incubator/vector/VectorMask.fromArray(Ljdk/incubator/vector/VectorSpecies;[ZI)Ljdk/incubator/vector/VectorMask;> 
  0   bci: 5    CounterData         count(10092)
8 astore_2
9 aload_2
10 invokevirtual 64 <jdk/incubator/vector/VectorMask.toVector()Ljdk/incubator/vector/Vector;> 
  16  bci: 10   VirtualCallData     count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/Int256Vector$Int256Mask'(10092 1.00)
13 getstatic 68 <jdk/incubator/vector/VectorOperators.EQ/Ljdk/incubator/vector/VectorOperators$Comparison;> 
16 lconst_1
17 invokevirtual 74 <jdk/incubator/vector/Vector.compare(Ljdk/incubator/vector/VectorOperators$Comparison;J)Ljdk/incubator/vector/VectorMask;> 
  72  bci: 17   VirtualCallData     count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/Int256Vector'(10092 1.00)
20 astore_3
21 aload_3
22 iload_1
23 invokevirtual 51 <jdk/incubator/vector/VectorMask.laneIsSet(I)Z> 
  128 bci: 23   VirtualCallData     count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/Int256Vector$Int256Mask'(10092 1.00)
26 ireturn
------------------------------------------------------------------------
Total MDO size: 624 bytes
