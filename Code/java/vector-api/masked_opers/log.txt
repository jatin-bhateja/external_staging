CompileCommand: print mul.workload bool print = true
WARNING: Using incubator modules: jdk.incubator.vector

============================= C2-compiled nmethod ==============================
#r018 rsi:rsi   : parm 0: int[int:>=0]:exact *
#r016 rdx:rdx   : parm 1: int[int:>=0]:exact *
# -- Old rsp -- Framesize: 96 --
#r591 rsp+92: in_preserve
#r590 rsp+88: return address
#r589 rsp+84: in_preserve
#r588 rsp+80: saved fp register
#r587 rsp+76: Fixed slot 3
#r586 rsp+72: Fixed slot 2
#r585 rsp+68: Fixed slot 1
#r584 rsp+64: Fixed slot 0
#r607 rsp+60: spill
#r606 rsp+56: spill
#r605 rsp+52: spill
#r604 rsp+48: spill
#r603 rsp+44: spill
#r602 rsp+40: spill
#r601 rsp+36: spill
#r600 rsp+32: spill
#r599 rsp+28: spill
#r598 rsp+24: spill
#r597 rsp+20: outgoing argument
#r596 rsp+16: outgoing argument
#r595 rsp+12: outgoing argument
#r594 rsp+ 8: outgoing argument
#r593 rsp+ 4: outgoing argument
#r592 rsp+ 0: outgoing argument
#
----------------------- MetaData before Compile_id = 176 ------------------------
{method}
 - this oop:          0x00007f4f38401630
 - method holder:     'mul'
 - constants:         0x00007f4f38401078 constant pool [111]/operands[10] {0x00007f4f38401078} for 'mul' cache=0x00007f4f384019b8
 - access:            0x81000009  public static 
 - name:              'workload'
 - signature:         '([I[I)V'
 - max stack:         5
 - max locals:        5
 - size of params:    2
 - method size:       16
 - vtable index:      -2
 - i2i entry:         0x00007f4f80c5d580
 - adapters:          AHE@0x00007f4f8c312b50: 0xbb000000 i2c: 0x00007f4f80ccda80 c2i: 0x00007f4f80ccdb61 c2iVE: 0x00007f4f80ccdb61 c2iVROE: 0x00007f4f80ccdb61 c2iUE: 0x00007f4f80ccdb2f c2iUVE: 0x00007f4f80ccdb2f c2iNCI: 0x00007f4f80ccdb9b
 - compiled entry           0x00007f4f80ccdb61
 - compiled inline entry    0x00007f4f80ccdb61
 - compiled inline ro entry 0x00007f4f80ccdb61
 - code size:         46
 - code start:        0x00007f4f384015f8
 - code end (excl):   0x00007f4f38401626
 - method data:       0x00007f4f38401c90
 - checked ex length: 0
 - linenumber start:  0x00007f4f38401626
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 176 -----------------------
#
#  void ( int[int:>=0]:exact *, int[int:>=0]:exact * )
#
000     N1: #	out( B1 ) <- in( B31 B27 B32 B23 B20 B33 B28 B34 B24 B35 B25 B21 B37 B29 B30 B26 B19 B22 B36 )  Freq: 1

000     B1: #	out( B31 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (504 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

01a     movq    [rsp + #32], RDX	# spill
01f     movq    [rsp + #24], RSI	# spill
024     movq    R10, java/lang/Class:exact *	# ptr
02e     movl    R11, [R10 + #120 (8-bit)]	# compressed ptr ! Field: mul.SPECIES
032     movl    R9, [R10 + #124 (8-bit)]	# compressed ptr ! Field: mul.mask_arr
        nop 	# 10 bytes pad for loops and calls
040     movl    R8, [R12 + R11 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
045     NullCheck R11

045     B2: #	out( B27 B3 ) <- in( B1 )  Freq: 0.999999
045     cmpl    R8, narrowklass: precise jdk/incubator/vector/IntVector$IntSpecies: 0x00007f4f14053238:Constant:exact *	# compressed klass ptr
04c     jne,u   B27  P=0.000000 C=-1.000000

052     B3: #	out( B32 B4 ) <- in( B2 )  Freq: 0.999999
052     movl    R10, [R12 + R9 << 3 + #12] (compressed oop addressing)	# range
057     NullCheck R9

057     B4: #	out( B23 B5 ) <- in( B3 )  Freq: 0.999998
057     decode_heap_oop_not_null R11,R11
05b     movq    RBX, R11	# spill
05e     # checkcastPP of RBX
05e     movl    R11, [RBX + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
062     subl    R10, R11	# int
065     leal    RBP, [R10 + #1]
069     testl   RBP, RBP
06b     jl     B23  P=0.000001 C=-1.000000

071     B5: #	out( B20 B6 ) <- in( B4 )  Freq: 0.999997
071     cmpl    R10, #-1
075     je     B20  P=0.000001 C=-1.000000

07b     B6: #	out( B30 B7 ) <- in( B5 )  Freq: 0.999996
07b     movl    R10, [RBX + #48 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.maskType (constant)
07f     decode_heap_oop_not_null R8,R9
083     decode_heap_oop RSI,R10
0ab     movq    RDX, java/lang/Class:exact *	# ptr
0b5     movl    R9, #16	# long (unsigned 32-bit)
0bb     movl    RCX, R11	# spill
0be     movq    RDI, R8	# spill
0c1     xorl    R10, R10	# long
0c4     movq    [rsp + #0], R10	# spill
0c8     movq    [rsp + #8], RBX	# spill
0cd     movq    R10, jdk/incubator/vector/VectorMask$$Lambda$18+0x000000080104f340:exact *	# ptr
0d7     movq    [rsp + #16], R10	# spill
0dc     call,static  jdk.internal.vm.vector.VectorSupport::load
        # jdk.incubator.vector.VectorMask::fromArray @ bci:47 (line 212) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # mul::workload @ bci:7 (line 8) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=_ L[3]=_ L[4]=_
        # OopMap {[24]=Oop [32]=Oop off=228/0xe4}

0e4     B7: #	out( B33 B8 ) <- in( B6 )  Freq: 0.999976
        # Block is sole successor of call
0e4     movl    R11, [RAX + #8 (8-bit)]	# compressed klass ptr
0e8     NullCheck RAX

0e8     B8: #	out( B28 B9 ) <- in( B7 )  Freq: 0.999975
0e8     cmpl    R11, narrowklass: precise jdk/incubator/vector/Int256Vector$Int256Mask: 0x00007f4f14053388:Constant:exact *	# compressed klass ptr
0ef     jne,u   B28  P=0.000000 C=-1.000000

0f5     B9: #	out( B34 B10 ) <- in( B8 )  Freq: 0.999975
0f5     movq    R10, java/lang/Class:exact *	# ptr
0ff     movl    RBP, [R10 + #120 (8-bit)]	# compressed ptr ! Field: mul.SPECIES
103     movl    R11, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
108     NullCheck RBP

108     B10: #	out( B24 B11 ) <- in( B9 )  Freq: 0.999974
108     # checkcastPP of RAX
108     load_vector XMM1,[RAX + #16 (8-bit)] ! Field: jdk/incubator/vector/Int256Vector$Int256Mask.mfield (constant)
10d     cmpl    R11, narrowklass: precise jdk/incubator/vector/IntVector$IntSpecies: 0x00007f4f14053238:Constant:exact *	# compressed klass ptr
114     jne,u   B24  P=0.000001 C=-1.000000

11a     B11: #	out( B35 B12 ) <- in( B10 )  Freq: 0.999973
11a     movq    R9, [rsp + #24]	# spill
        nop 	# 1 bytes pad for loops and calls
120     movl    R11, [R9 + #12 (8-bit)]	# range
124     NullCheck R9

124     B12: #	out( B25 B13 ) <- in( B11 )  Freq: 0.999972
124     decode_heap_oop_not_null RCX,RBP
128     # checkcastPP of RCX
128     movl    R8, [RCX + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
12c     subl    R11, R8	# int
12f     leal    RBP, [R11 + #1]
133     testl   RBP, RBP
135     jl     B25  P=0.000001 C=-1.000000

13b     B13: #	out( B21 B14 ) <- in( B12 )  Freq: 0.999971
        nop 	# 5 bytes pad for loops and calls
140     cmpl    R11, #-1
144     je     B21  P=0.000001 C=-1.000000

14a     B14: #	out( B37 B15 ) <- in( B13 )  Freq: 0.99997
14a     movl    RBP, [RCX + #72 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.dummyVectorMF (constant)
14d     movl    R10, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
152     NullCheck RBP

152     B15: #	out( B29 B16 ) <- in( B14 )  Freq: 0.999969
        nop 	# 14 bytes pad for loops and calls
160     cmpl    R10, narrowklass: precise jdk/incubator/vector/Int256Vector: 0x00007f4f1404d9b0:Constant:exact *	# compressed klass ptr
167     jne,u   B29  P=0.000000 C=-1.000000

16d     B16: #	out( B36 B17 ) <- in( B15 )  Freq: 0.999969
16d     movq    R11, [rsp + #32]	# spill
172     movl    R10, [R11 + #12 (8-bit)]	# range
176     NullCheck R11

176     B17: #	out( B26 B18 ) <- in( B16 )  Freq: 0.999968
176     load_vector XMM2,[R9 + #16 (8-bit)]
17c     leal    RBP, [R10 + #-7]
180     vector_loadmask_byte K7, XMM1	! using XMM0 as TEMP
18e     vpmul_masked XMM2, XMM2, XMM2, K7	! mul masked operation
194     testl   RBP, RBP
196     jl     B26  P=0.000001 C=-1.000000

19c     B18: #	out( B22 B19 ) <- in( B17 )  Freq: 0.999967
        nop 	# 4 bytes pad for loops and calls
1a0     cmpl    R10, #7
1a4     je,s   B22  P=0.000001 C=-1.000000

1a6     B19: #	out( N1 ) <- in( B18 )  Freq: 0.999966
1a6     store_vector [R11 + #16 (8-bit)],XMM2
	
1ac     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

1c1     ret

1c2     B20: #	out( N1 ) <- in( B5 )  Freq: 1.01328e-06
1c2     movl    RSI, #-28	# int
1c7     movl    [rsp + #40], R9	# spill
1cc     movq    [rsp + #48], RBX	# spill
1d1     movl    [rsp + #44], R11	# spill
        nop 	# 2 bytes pad for loops and calls
1d8     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 473) L[0]=_ L[1]=_ STK[0]=#0 STK[1]=RBP STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.VectorMask::fromArray @ bci:16 (line 211) L[0]=_ L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #44
        # mul::workload @ bci:7 (line 8) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=_ L[3]=_ L[4]=_
        # OopMap {[24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop off=480/0x1e0}
1e0     stop	# ShouldNotReachHere

1f4     B21: #	out( N1 ) <- in( B13 )  Freq: 1.01325e-06
1f4     movl    RSI, #-28	# int
1f9     movq    [rsp + #48], RCX	# spill
1fe     movq    [rsp + 56],XMM1	# spill
204     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 473) L[0]=_ L[1]=_ STK[0]=#0 STK[1]=RBP STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 3079) L[0]=rsp + #48 L[1]=rsp + #24 L[2]=_ L[3]=_
        # mul::workload @ bci:16 (line 9) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=#ScObj0 L[3]=_ L[4]=_
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [mfield :0]=#0 }
        # OopMap {[24]=Oop [32]=Oop [48]=Oop off=524/0x20c}
20c     stop	# ShouldNotReachHere

220     B22: #	out( N1 ) <- in( B18 )  Freq: 1.01325e-06
220     movl    RSI, #-28	# int
225     movq    [rsp + #24], R11	# spill
22a     vmovdqu [rsp + 32],XMM2	# spill
230     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 473) L[0]=_ L[1]=_ STK[0]=#0 STK[1]=RBP STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:7 (line 3352) L[0]=#ScObj0 L[1]=rsp + #24 L[2]=_ L[3]=_
        # ScObj0 jdk/incubator/vector/Int256Vector={ [mfield :0]=#0 }
        # mul::workload @ bci:42 (line 11) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {[24]=Oop off=568/0x238}
238     stop	# ShouldNotReachHere

24c     B23: #	out( N1 ) <- in( B4 )  Freq: 9.99998e-07
24c     movl    RSI, #-52	# int
251     movl    [rsp + #40], R9	# spill
256     movq    [rsp + #48], RBX	# spill
25b     movl    [rsp + #44], R11	# spill
260     call,static  wrapper for: uncommon_trap(reason='intrinsic_or_type_checked_inlining' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 473) L[0]=_ L[1]=_ STK[0]=#0 STK[1]=RBP STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.VectorMask::fromArray @ bci:16 (line 211) L[0]=_ L[1]=rsp + #40 L[2]=_ L[3]=rsp + #48 L[4]=rsp + #44
        # mul::workload @ bci:7 (line 8) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=_ L[3]=_ L[4]=_
        # OopMap {[24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop off=616/0x268}
268     stop	# ShouldNotReachHere

27c     B24: #	out( N1 ) <- in( B10 )  Freq: 9.99974e-07
27c     movl    RSI, #-34	# int
281     movq    [rsp + 48],XMM1	# spill
        nop 	# 1 bytes pad for loops and calls
288     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:2 (line 3079) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=_ STK[0]=#0 STK[1]=RBP
        # mul::workload @ bci:16 (line 9) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=#ScObj0 L[3]=_ L[4]=_
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [mfield :0]=#0 }
        # OopMap {rbp=NarrowOop [24]=Oop [32]=Oop off=656/0x290}
290     stop	# ShouldNotReachHere

2a4     B25: #	out( N1 ) <- in( B12 )  Freq: 9.99972e-07
2a4     movl    RSI, #-52	# int
2a9     movq    [rsp + #48], RCX	# spill
2ae     movq    [rsp + 56],XMM1	# spill
2b4     call,static  wrapper for: uncommon_trap(reason='intrinsic_or_type_checked_inlining' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 473) L[0]=_ L[1]=_ STK[0]=#0 STK[1]=RBP STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 3079) L[0]=rsp + #48 L[1]=rsp + #24 L[2]=_ L[3]=_
        # mul::workload @ bci:16 (line 9) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=#ScObj0 L[3]=_ L[4]=_
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [mfield :0]=#0 }
        # OopMap {[24]=Oop [32]=Oop [48]=Oop off=700/0x2bc}
2bc     stop	# ShouldNotReachHere

2d0     B26: #	out( N1 ) <- in( B17 )  Freq: 9.99968e-07
2d0     movl    RSI, #-52	# int
2d5     movq    [rsp + #24], R11	# spill
2da     vmovdqu [rsp + 32],XMM2	# spill
2e0     call,static  wrapper for: uncommon_trap(reason='intrinsic_or_type_checked_inlining' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 473) L[0]=_ L[1]=_ STK[0]=#0 STK[1]=RBP STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 57) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:7 (line 3352) L[0]=#ScObj0 L[1]=rsp + #24 L[2]=_ L[3]=_
        # ScObj0 jdk/incubator/vector/Int256Vector={ [mfield :0]=#0 }
        # mul::workload @ bci:42 (line 11) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {[24]=Oop off=744/0x2e8}
2e8     stop	# ShouldNotReachHere

2fc     B27: #	out( N1 ) <- in( B2 )  Freq: 1e-35
2fc     movl    RSI, #-34	# int
301     movq    RBP, [rsp + #24]	# spill
306     movq    [rsp + #24], RDX	# spill
30b     movl    [rsp + #32], R9	# spill
310     movl    [rsp + #36], R11	# spill
        nop 	# 3 bytes pad for loops and calls
318     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:1 (line 209) L[0]=_ L[1]=rsp + #32 L[2]=#0 L[3]=_ L[4]=_ STK[0]=rsp + #36
        # mul::workload @ bci:7 (line 8) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=_ L[4]=_
        # OopMap {rbp=Oop [24]=Oop [32]=NarrowOop [36]=NarrowOop off=800/0x320}
320     stop	# ShouldNotReachHere

334     B28: #	out( N1 ) <- in( B8 )  Freq: 1e-35
334     movl    RSI, #-34	# int
339     movq    RBP, [rsp + #24]	# spill
33e     movq    R10, [rsp + #32]	# spill
343     movq    [rsp + #24], R10	# spill
348     movq    [rsp + #32], RAX	# spill
        nop 	# 3 bytes pad for loops and calls
350     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:50 (line 212) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #32
        # mul::workload @ bci:7 (line 8) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=_ L[4]=_
        # OopMap {rbp=Oop [24]=Oop [32]=Oop off=856/0x358}
358     stop	# ShouldNotReachHere

36c     B29: #	out( N1 ) <- in( B15 )  Freq: 1e-35
36c     movl    RSI, #-34	# int
371     movq    [rsp + 48],XMM1	# spill
        nop 	# 1 bytes pad for loops and calls
378     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::dummyVectorMF @ bci:4 (line 4045) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::fromArray @ bci:19 (line 3081) L[0]=_ L[1]=rsp + #24 L[2]=#0 L[3]=_
        # mul::workload @ bci:16 (line 9) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=#ScObj0 L[3]=_ L[4]=_
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [mfield :0]=#0 }
        # OopMap {rbp=NarrowOop [24]=Oop [32]=Oop off=896/0x380}
380     stop	# ShouldNotReachHere

394     B30: #	out( N1 ) <- in( B6 )  Freq: 9.99996e-06
394     # exception oop is in rax; no code emitted
394     movq    RSI, RAX	# spill
397     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp

39f     jmp     rethrow_stub

3a4     B31: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
3a4     movl    RSI, #-12	# int
3a9     movq    RBP, [rsp + #24]	# spill
3ae     movq    [rsp + #24], RDX	# spill
3b3     movl    [rsp + #32], R9	# spill
3b8     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:1 (line 209) L[0]=_ L[1]=rsp + #32 L[2]=#0 L[3]=_ L[4]=_ STK[0]=#NULL
        # mul::workload @ bci:7 (line 8) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=_ L[4]=_
        # OopMap {rbp=Oop [24]=Oop [32]=NarrowOop off=960/0x3c0}
3c0     stop	# ShouldNotReachHere

3d4     B32: #	out( N1 ) <- in( B3 )  Freq: 1.01328e-06
3d4     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
3dc     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:15 (line 211) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL
        # mul::workload @ bci:7 (line 8) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {off=996/0x3e4}
3e4     stop	# ShouldNotReachHere

3f8     B33: #	out( N1 ) <- in( B7 )  Freq: 1.01325e-06
3f8     movl    RSI, #-12	# int
3fd     movq    RBP, [rsp + #24]	# spill
        nop 	# 2 bytes pad for loops and calls
404     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:50 (line 212) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL
        # mul::workload @ bci:7 (line 8) L[0]=RBP L[1]=rsp + #32 L[2]=_ L[3]=_ L[4]=_
        # OopMap {rbp=Oop [32]=Oop off=1036/0x40c}
40c     stop	# ShouldNotReachHere

420     B34: #	out( N1 ) <- in( B9 )  Freq: 1.01325e-06
420     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
428     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:2 (line 3079) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # mul::workload @ bci:16 (line 9) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {off=1072/0x430}
430     stop	# ShouldNotReachHere

444     B35: #	out( N1 ) <- in( B11 )  Freq: 1.01325e-06
444     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
44c     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:8 (line 3079) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL
        # mul::workload @ bci:16 (line 9) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {off=1108/0x454}
454     stop	# ShouldNotReachHere

468     B36: #	out( N1 ) <- in( B16 )  Freq: 1.01325e-06
468     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
470     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::intoArray @ bci:6 (line 3352) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL
        # mul::workload @ bci:42 (line 11) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {off=1144/0x478}
478     stop	# ShouldNotReachHere

48c     B37: #	out( N1 ) <- in( B14 )  Freq: 4.76823e-07
48c     movl    RSI, #-187	# int
491     movq    [rsp + #48], RCX	# spill
496     movq    [rsp + 56],XMM1	# spill
49c     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.AbstractSpecies::dummyVectorMF @ bci:6 (line 325) L[0]=rsp + #48 L[1]=RBP STK[0]=RBP
        # jdk.incubator.vector.IntVector$IntSpecies::dummyVectorMF @ bci:1 (line 4045) L[0]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:19 (line 3081) L[0]=_ L[1]=rsp + #24 L[2]=#0 L[3]=_
        # mul::workload @ bci:16 (line 9) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=#ScObj0 L[3]=_ L[4]=_
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [mfield :0]=#0 }
        # OopMap {rbp=NarrowOop [24]=Oop [32]=Oop [48]=Oop off=1188/0x4a4}
4a4     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    1258  176             mul::workload (46 bytes)
 total in heap  [0x00007f4f80de6990,0x00007f4f80de7938] = 4008
 relocation     [0x00007f4f80de6b00,0x00007f4f80de6c40] = 320
 main code      [0x00007f4f80de6c40,0x00007f4f80de7118] = 1240
 stub code      [0x00007f4f80de7118,0x00007f4f80de7140] = 40
 oops           [0x00007f4f80de7140,0x00007f4f80de7158] = 24
 metadata       [0x00007f4f80de7158,0x00007f4f80de7238] = 224
 scopes data    [0x00007f4f80de7238,0x00007f4f80de7580] = 840
 scopes pcs     [0x00007f4f80de7580,0x00007f4f80de78c0] = 832
 dependencies   [0x00007f4f80de78c0,0x00007f4f80de78e0] = 32
 handler table  [0x00007f4f80de78e0,0x00007f4f80de78f8] = 24
 nul chk table  [0x00007f4f80de78f8,0x00007f4f80de7938] = 64

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Entry Point]
[Inline Entry Point]
[Verified Entry Point]
[Verified Inline Entry Point]
[Verified Inline Entry Point (RO)]
  # {method} {0x00007f4f38401630} 'workload' '([I[I)V' in 'mul'
  # parm0:    rsi:rsi   = '[I'
  # parm1:    rdx:rdx   = '[I'
  #           [sp+0x60]  (sp of caller)
 ;; N1: #	out( B1 ) <- in( B31 B27 B32 B23 B20 B33 B28 B34 B24 B35 B25 B21 B37 B29 B30 B26 B19 B22 B36 )  Freq: 1
 ;; B1: #	out( B31 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007f4f80de6c40:   mov    %eax,-0x18000(%rsp)
  0x00007f4f80de6c47:   push   %rbp
  0x00007f4f80de6c48:   sub    $0x50,%rsp
  0x00007f4f80de6c4c:   cmpl   $0x1,0x20(%r15)
  0x00007f4f80de6c54:   jne    0x00007f4f80de710e           ;*synchronization entry
                                                            ; - mul::workload@-1 (line 8)
  0x00007f4f80de6c5a:   mov    %rdx,0x20(%rsp)
  0x00007f4f80de6c5f:   mov    %rsi,0x18(%rsp)              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
  0x00007f4f80de6c64:   movabs $0x11f0dcdf8,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f0dcdf8} = 'mul')}
  0x00007f4f80de6c6e:   mov    0x78(%r10),%r11d             ;*getstatic SPECIES {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - mul::workload@0 (line 8)
  0x00007f4f80de6c72:   mov    0x7c(%r10),%r9d              ;*getstatic mask_arr {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - mul::workload@3 (line 8)
  0x00007f4f80de6c76:   nop
  0x00007f4f80de6c77:   nop
  0x00007f4f80de6c78:   nop
  0x00007f4f80de6c79:   nop
  0x00007f4f80de6c7a:   nop
  0x00007f4f80de6c7b:   nop
  0x00007f4f80de6c7c:   nop
  0x00007f4f80de6c7d:   nop
  0x00007f4f80de6c7e:   nop
  0x00007f4f80de6c7f:   nop
  0x00007f4f80de6c80:   mov    0x8(%r12,%r11,8),%r8d        ; implicit exception: dispatches to 0x00007f4f80de6fe4
 ;; B2: #	out( B27 B3 ) <- in( B1 )  Freq: 0.999999
  0x00007f4f80de6c85:   cmp    $0x1048770,%r8d              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
                                                            ;   {metadata('jdk/incubator/vector/IntVector$IntSpecies')}
  0x00007f4f80de6c8c:   jne    0x00007f4f80de6f3c
 ;; B3: #	out( B32 B4 ) <- in( B2 )  Freq: 0.999999
  0x00007f4f80de6c92:   mov    0xc(%r12,%r9,8),%r10d        ; implicit exception: dispatches to 0x00007f4f80de7014
 ;; B4: #	out( B23 B5 ) <- in( B3 )  Freq: 0.999998
  0x00007f4f80de6c97:   shl    $0x3,%r11
  0x00007f4f80de6c9b:   mov    %r11,%rbx                    ;*checkcast {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@1 (line 209)
                                                            ; - mul::workload@7 (line 8)
  0x00007f4f80de6c9e:   mov    0xc(%rbx),%r11d              ;*getfield laneCount {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::laneCount@1 (line 133)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@6 (line 210)
                                                            ; - mul::workload@7 (line 8)
  0x00007f4f80de6ca2:   sub    %r11d,%r10d
  0x00007f4f80de6ca5:   lea    0x1(%r10),%ebp
  0x00007f4f80de6ca9:   test   %ebp,%ebp
  0x00007f4f80de6cab:   jl     0x00007f4f80de6e8c
 ;; B5: #	out( B20 B6 ) <- in( B4 )  Freq: 0.999997
  0x00007f4f80de6cb1:   cmp    $0xffffffff,%r10d
  0x00007f4f80de6cb5:   je     0x00007f4f80de6e02
 ;; B6: #	out( B30 B7 ) <- in( B5 )  Freq: 0.999996
  0x00007f4f80de6cbb:   mov    0x30(%rbx),%r10d
  0x00007f4f80de6cbf:   lea    (%r12,%r9,8),%r8             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
  0x00007f4f80de6cc3:   mov    %r10,%rsi
  0x00007f4f80de6cc6:   cmp    0x13419e03(%rip),%r12        # 0x00007f4f94200ad0
                                                            ;   {external_word}
  0x00007f4f80de6ccd:   je     0x00007f4f80de6ce7
 ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f4f80de6cd3:   movabs $0x7f4f938fdfa8,%rdi         ;   {external_word}
  0x00007f4f80de6cdd:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de6ce1:   callq  0x00007f4f92d808b4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de6ce6:   hlt    
  0x00007f4f80de6ce7:   shl    $0x3,%rsi
  0x00007f4f80de6ceb:   movabs $0x7fef002d0,%rdx            ;   {oop(a 'java/lang/Class'{0x00000007fef002d0} = int)}
  0x00007f4f80de6cf5:   mov    $0x10,%r9d
  0x00007f4f80de6cfb:   mov    %r11d,%ecx
  0x00007f4f80de6cfe:   mov    %r8,%rdi
  0x00007f4f80de6d01:   xor    %r10d,%r10d
  0x00007f4f80de6d04:   mov    %r10,(%rsp)
  0x00007f4f80de6d08:   mov    %rbx,0x8(%rsp)
  0x00007f4f80de6d0d:   movabs $0x11f0f87f8,%r10            ;   {oop(a 'jdk/incubator/vector/VectorMask$$Lambda$18+0x000000080104f340'{0x000000011f0f87f8})}
  0x00007f4f80de6d17:   mov    %r10,0x10(%rsp)
  0x00007f4f80de6d1c:   vzeroupper 
  0x00007f4f80de6d1f:   callq  0x00007f4f80dde360           ; ImmutableOopMap {[24]=Oop [32]=Oop }
                                                            ;*invokestatic load {reexecute=0 rethrow=0 return_oop=1 return_scalarized=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@47 (line 212)
                                                            ; - mul::workload@7 (line 8)
                                                            ;   {static_call}
 ;; B7: #	out( B33 B8 ) <- in( B6 )  Freq: 0.999976
  0x00007f4f80de6d24:   mov    0x8(%rax),%r11d              ; implicit exception: dispatches to 0x00007f4f80de7038
 ;; B8: #	out( B28 B9 ) <- in( B7 )  Freq: 0.999975
  0x00007f4f80de6d28:   cmp    $0x104d4e8,%r11d             ;   {metadata('jdk/incubator/vector/Int256Vector$Int256Mask')}
  0x00007f4f80de6d2f:   jne    0x00007f4f80de6f74           ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
 ;; B9: #	out( B34 B10 ) <- in( B8 )  Freq: 0.999975
  0x00007f4f80de6d35:   movabs $0x11f0dcdf8,%r10            ;   {oop(a 'java/lang/Class'{0x000000011f0dcdf8} = 'mul')}
  0x00007f4f80de6d3f:   mov    0x78(%r10),%ebp              ;*getstatic SPECIES {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - mul::workload@11 (line 9)
  0x00007f4f80de6d43:   mov    0x8(%r12,%rbp,8),%r11d       ; implicit exception: dispatches to 0x00007f4f80de7060
 ;; B10: #	out( B24 B11 ) <- in( B9 )  Freq: 0.999974
  0x00007f4f80de6d48:   vmovq  0x10(%rax),%xmm1             ;*checkcast {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@50 (line 212)
                                                            ; - mul::workload@7 (line 8)
  0x00007f4f80de6d4d:   cmp    $0x1048770,%r11d             ;   {metadata('jdk/incubator/vector/IntVector$IntSpecies')}
  0x00007f4f80de6d54:   jne    0x00007f4f80de6ebc
 ;; B11: #	out( B35 B12 ) <- in( B10 )  Freq: 0.999973
  0x00007f4f80de6d5a:   mov    0x18(%rsp),%r9               ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
  0x00007f4f80de6d5f:   nop
  0x00007f4f80de6d60:   mov    0xc(%r9),%r11d               ; implicit exception: dispatches to 0x00007f4f80de7084
 ;; B12: #	out( B25 B13 ) <- in( B11 )  Freq: 0.999972
  0x00007f4f80de6d64:   lea    (%r12,%rbp,8),%rcx           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 3079)
                                                            ; - mul::workload@16 (line 9)
  0x00007f4f80de6d68:   mov    0xc(%rcx),%r8d               ;*getfield laneCount {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::length@1 (line 124)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 3079)
                                                            ; - mul::workload@16 (line 9)
  0x00007f4f80de6d6c:   sub    %r8d,%r11d
  0x00007f4f80de6d6f:   lea    0x1(%r11),%ebp
  0x00007f4f80de6d73:   test   %ebp,%ebp
  0x00007f4f80de6d75:   jl     0x00007f4f80de6ee4
 ;; B13: #	out( B21 B14 ) <- in( B12 )  Freq: 0.999971
  0x00007f4f80de6d7b:   nop
  0x00007f4f80de6d7c:   nop
  0x00007f4f80de6d7d:   nop
  0x00007f4f80de6d7e:   nop
  0x00007f4f80de6d7f:   nop
  0x00007f4f80de6d80:   cmp    $0xffffffff,%r11d
  0x00007f4f80de6d84:   je     0x00007f4f80de6e34           ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
 ;; B14: #	out( B37 B15 ) <- in( B13 )  Freq: 0.99997
  0x00007f4f80de6d8a:   mov    0x48(%rcx),%ebp              ;*getfield dummyVectorMF {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::dummyVectorMF@1 (line 324)
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVectorMF@1 (line 4045)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 3081)
                                                            ; - mul::workload@16 (line 9)
  0x00007f4f80de6d8d:   mov    0x8(%r12,%rbp,8),%r10d       ; implicit exception: dispatches to 0x00007f4f80de70cc
 ;; B15: #	out( B29 B16 ) <- in( B14 )  Freq: 0.999969
  0x00007f4f80de6d92:   nop
  0x00007f4f80de6d93:   nop
  0x00007f4f80de6d94:   nop
  0x00007f4f80de6d95:   nop
  0x00007f4f80de6d96:   nop
  0x00007f4f80de6d97:   nop
  0x00007f4f80de6d98:   nop
  0x00007f4f80de6d99:   nop
  0x00007f4f80de6d9a:   nop
  0x00007f4f80de6d9b:   nop
  0x00007f4f80de6d9c:   nop
  0x00007f4f80de6d9d:   nop
  0x00007f4f80de6d9e:   nop
  0x00007f4f80de6d9f:   nop
  0x00007f4f80de6da0:   cmp    $0x104cb88,%r10d             ;   {metadata('jdk/incubator/vector/Int256Vector')}
  0x00007f4f80de6da7:   jne    0x00007f4f80de6fac
 ;; B16: #	out( B36 B17 ) <- in( B15 )  Freq: 0.999969
  0x00007f4f80de6dad:   mov    0x20(%rsp),%r11
  0x00007f4f80de6db2:   mov    0xc(%r11),%r10d              ; implicit exception: dispatches to 0x00007f4f80de70a8
                                                            ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
 ;; B17: #	out( B26 B18 ) <- in( B16 )  Freq: 0.999968
  0x00007f4f80de6db6:   vmovdqu 0x10(%r9),%ymm2             ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@32 (line 3569)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 828)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 3081)
                                                            ; - mul::workload@16 (line 9)
  0x00007f4f80de6dbc:   lea    -0x7(%r10),%ebp              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
  0x00007f4f80de6dc0:   vpxor  %xmm0,%xmm0,%xmm0
  0x00007f4f80de6dc4:   vpsubb %xmm1,%xmm0,%xmm0
  0x00007f4f80de6dc8:   vpmovb2m %xmm0,%k7
  0x00007f4f80de6dce:   vpmulld %ymm2,%ymm2,%ymm2{%k7}      ;*invokestatic binaryOp {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@192 (line 921)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@9 (line 310)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@4 (line 42)
                                                            ; - mul::workload@37 (line 11)
  0x00007f4f80de6dd4:   test   %ebp,%ebp
  0x00007f4f80de6dd6:   jl     0x00007f4f80de6f10
 ;; B18: #	out( B22 B19 ) <- in( B17 )  Freq: 0.999967
  0x00007f4f80de6ddc:   nop
  0x00007f4f80de6ddd:   nop
  0x00007f4f80de6dde:   nop
  0x00007f4f80de6ddf:   nop
  0x00007f4f80de6de0:   cmp    $0x7,%r10d
  0x00007f4f80de6de4:   je     0x00007f4f80de6e60
 ;; B19: #	out( N1 ) <- in( B18 )  Freq: 0.999966
  0x00007f4f80de6de6:   vmovdqu %ymm2,0x10(%r11)
  0x00007f4f80de6dec:   vzeroupper 
  0x00007f4f80de6def:   add    $0x50,%rsp
  0x00007f4f80de6df3:   pop    %rbp
  0x00007f4f80de6df4:   cmp    0x3c0(%r15),%rsp             ;   {poll_return}
  0x00007f4f80de6dfb:   ja     0x00007f4f80de70f8
  0x00007f4f80de6e01:   retq   
 ;; B20: #	out( N1 ) <- in( B5 )  Freq: 1.01328e-06
  0x00007f4f80de6e02:   mov    $0xffffffe4,%esi
  0x00007f4f80de6e07:   mov    %r9d,0x28(%rsp)
  0x00007f4f80de6e0c:   mov    %rbx,0x30(%rsp)
  0x00007f4f80de6e11:   mov    %r11d,0x2c(%rsp)             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
  0x00007f4f80de6e16:   nop
  0x00007f4f80de6e17:   nop
  0x00007f4f80de6e18:   vzeroupper 
  0x00007f4f80de6e1b:   callq  0x00007f4f80c57ea0           ; ImmutableOopMap {[24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 473)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 211)
                                                            ; - mul::workload@7 (line 8)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f4f80de6e20:   movabs $0x7f4f93707640,%rdi         ;   {external_word}
  0x00007f4f80de6e2a:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de6e2e:   callq  0x00007f4f92d808b4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de6e33:   hlt    
 ;; B21: #	out( N1 ) <- in( B13 )  Freq: 1.01325e-06
  0x00007f4f80de6e34:   mov    $0xffffffe4,%esi
  0x00007f4f80de6e39:   mov    %rcx,0x30(%rsp)
  0x00007f4f80de6e3e:   vmovq  %xmm1,0x38(%rsp)
  0x00007f4f80de6e44:   vzeroupper 
  0x00007f4f80de6e47:   callq  0x00007f4f80c57ea0           ; ImmutableOopMap {[24]=Oop [32]=Oop [48]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 473)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 3079)
                                                            ; - mul::workload@16 (line 9)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f4f80de6e4c:   movabs $0x7f4f93707640,%rdi         ;   {external_word}
  0x00007f4f80de6e56:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de6e5a:   callq  0x00007f4f92d808b4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de6e5f:   hlt    
 ;; B22: #	out( N1 ) <- in( B18 )  Freq: 1.01325e-06
  0x00007f4f80de6e60:   mov    $0xffffffe4,%esi
  0x00007f4f80de6e65:   mov    %r11,0x18(%rsp)
  0x00007f4f80de6e6a:   vmovdqu %ymm2,0x20(%rsp)
  0x00007f4f80de6e70:   vzeroupper 
  0x00007f4f80de6e73:   callq  0x00007f4f80c57ea0           ; ImmutableOopMap {[24]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 473)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 3352)
                                                            ; - mul::workload@42 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f4f80de6e78:   movabs $0x7f4f93707640,%rdi         ;   {external_word}
  0x00007f4f80de6e82:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de6e86:   callq  0x00007f4f92d808b4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de6e8b:   hlt    
 ;; B23: #	out( N1 ) <- in( B4 )  Freq: 9.99998e-07
  0x00007f4f80de6e8c:   mov    $0xffffffcc,%esi
  0x00007f4f80de6e91:   mov    %r9d,0x28(%rsp)
  0x00007f4f80de6e96:   mov    %rbx,0x30(%rsp)
  0x00007f4f80de6e9b:   mov    %r11d,0x2c(%rsp)
  0x00007f4f80de6ea0:   vzeroupper 
  0x00007f4f80de6ea3:   callq  0x00007f4f80c57ea0           ; ImmutableOopMap {[24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 473)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 211)
                                                            ; - mul::workload@7 (line 8)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f4f80de6ea8:   movabs $0x7f4f93707640,%rdi         ;   {external_word}
  0x00007f4f80de6eb2:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de6eb6:   callq  0x00007f4f92d808b4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de6ebb:   hlt    
 ;; B24: #	out( N1 ) <- in( B10 )  Freq: 9.99974e-07
  0x00007f4f80de6ebc:   mov    $0xffffffde,%esi
  0x00007f4f80de6ec1:   vmovq  %xmm1,0x30(%rsp)             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
  0x00007f4f80de6ec7:   nop
  0x00007f4f80de6ec8:   vzeroupper 
  0x00007f4f80de6ecb:   callq  0x00007f4f80c57ea0           ; ImmutableOopMap {rbp=NarrowOop [24]=Oop [32]=Oop }
                                                            ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 3079)
                                                            ; - mul::workload@16 (line 9)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f4f80de6ed0:   movabs $0x7f4f93707640,%rdi         ;   {external_word}
  0x00007f4f80de6eda:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de6ede:   callq  0x00007f4f92d808b4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de6ee3:   hlt    
 ;; B25: #	out( N1 ) <- in( B12 )  Freq: 9.99972e-07
  0x00007f4f80de6ee4:   mov    $0xffffffcc,%esi
  0x00007f4f80de6ee9:   mov    %rcx,0x30(%rsp)
  0x00007f4f80de6eee:   vmovq  %xmm1,0x38(%rsp)
  0x00007f4f80de6ef4:   vzeroupper 
  0x00007f4f80de6ef7:   callq  0x00007f4f80c57ea0           ; ImmutableOopMap {[24]=Oop [32]=Oop [48]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 473)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 3079)
                                                            ; - mul::workload@16 (line 9)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f4f80de6efc:   movabs $0x7f4f93707640,%rdi         ;   {external_word}
  0x00007f4f80de6f06:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de6f0a:   callq  0x00007f4f92d808b4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de6f0f:   hlt    
 ;; B26: #	out( N1 ) <- in( B17 )  Freq: 9.99968e-07
  0x00007f4f80de6f10:   mov    $0xffffffcc,%esi
  0x00007f4f80de6f15:   mov    %r11,0x18(%rsp)
  0x00007f4f80de6f1a:   vmovdqu %ymm2,0x20(%rsp)
  0x00007f4f80de6f20:   vzeroupper 
  0x00007f4f80de6f23:   callq  0x00007f4f80c57ea0           ; ImmutableOopMap {[24]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 473)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 3352)
                                                            ; - mul::workload@42 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f4f80de6f28:   movabs $0x7f4f93707640,%rdi         ;   {external_word}
  0x00007f4f80de6f32:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de6f36:   callq  0x00007f4f92d808b4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de6f3b:   hlt    
 ;; B27: #	out( N1 ) <- in( B2 )  Freq: 1e-35
  0x00007f4f80de6f3c:   mov    $0xffffffde,%esi
  0x00007f4f80de6f41:   mov    0x18(%rsp),%rbp
  0x00007f4f80de6f46:   mov    %rdx,0x18(%rsp)
  0x00007f4f80de6f4b:   mov    %r9d,0x20(%rsp)
  0x00007f4f80de6f50:   mov    %r11d,0x24(%rsp)             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
  0x00007f4f80de6f55:   nop
  0x00007f4f80de6f56:   nop
  0x00007f4f80de6f57:   nop
  0x00007f4f80de6f58:   vzeroupper 
  0x00007f4f80de6f5b:   callq  0x00007f4f80c57ea0           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=NarrowOop [36]=NarrowOop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@1 (line 209)
                                                            ; - mul::workload@7 (line 8)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f4f80de6f60:   movabs $0x7f4f93707640,%rdi         ;   {external_word}
  0x00007f4f80de6f6a:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de6f6e:   callq  0x00007f4f92d808b4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de6f73:   hlt    
 ;; B28: #	out( N1 ) <- in( B8 )  Freq: 1e-35
  0x00007f4f80de6f74:   mov    $0xffffffde,%esi
  0x00007f4f80de6f79:   mov    0x18(%rsp),%rbp
  0x00007f4f80de6f7e:   mov    0x20(%rsp),%r10
  0x00007f4f80de6f83:   mov    %r10,0x18(%rsp)
  0x00007f4f80de6f88:   mov    %rax,0x20(%rsp)              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
  0x00007f4f80de6f8d:   nop
  0x00007f4f80de6f8e:   nop
  0x00007f4f80de6f8f:   nop
  0x00007f4f80de6f90:   vzeroupper 
  0x00007f4f80de6f93:   callq  0x00007f4f80c57ea0           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@50 (line 212)
                                                            ; - mul::workload@7 (line 8)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f4f80de6f98:   movabs $0x7f4f93707640,%rdi         ;   {external_word}
  0x00007f4f80de6fa2:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de6fa6:   callq  0x00007f4f92d808b4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de6fab:   hlt    
 ;; B29: #	out( N1 ) <- in( B15 )  Freq: 1e-35
  0x00007f4f80de6fac:   mov    $0xffffffde,%esi
  0x00007f4f80de6fb1:   vmovq  %xmm1,0x30(%rsp)             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
  0x00007f4f80de6fb7:   nop
  0x00007f4f80de6fb8:   vzeroupper 
  0x00007f4f80de6fbb:   callq  0x00007f4f80c57ea0           ; ImmutableOopMap {rbp=NarrowOop [24]=Oop [32]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVectorMF@4 (line 4045)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 3081)
                                                            ; - mul::workload@16 (line 9)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f4f80de6fc0:   movabs $0x7f4f93707640,%rdi         ;   {external_word}
  0x00007f4f80de6fca:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de6fce:   callq  0x00007f4f92d808b4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de6fd3:   hlt                                 ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@47 (line 212)
                                                            ; - mul::workload@7 (line 8)
 ;; B30: #	out( N1 ) <- in( B6 )  Freq: 9.99996e-06
  0x00007f4f80de6fd4:   mov    %rax,%rsi
  0x00007f4f80de6fd7:   vzeroupper 
  0x00007f4f80de6fda:   add    $0x50,%rsp
  0x00007f4f80de6fde:   pop    %rbp
  0x00007f4f80de6fdf:   jmpq   0x00007f4f80c84880           ;   {runtime_call _rethrow_Java}
 ;; B31: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
  0x00007f4f80de6fe4:   mov    $0xfffffff4,%esi
  0x00007f4f80de6fe9:   mov    0x18(%rsp),%rbp
  0x00007f4f80de6fee:   mov    %rdx,0x18(%rsp)
  0x00007f4f80de6ff3:   mov    %r9d,0x20(%rsp)
  0x00007f4f80de6ff8:   vzeroupper 
  0x00007f4f80de6ffb:   callq  0x00007f4f80c57ea0           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=NarrowOop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@1 (line 209)
                                                            ; - mul::workload@7 (line 8)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f4f80de7000:   movabs $0x7f4f93707640,%rdi         ;   {external_word}
  0x00007f4f80de700a:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de700e:   callq  0x00007f4f92d808b4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de7013:   hlt    
 ;; B32: #	out( N1 ) <- in( B3 )  Freq: 1.01328e-06
  0x00007f4f80de7014:   mov    $0xfffffff6,%esi             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
  0x00007f4f80de7019:   nop
  0x00007f4f80de701a:   nop
  0x00007f4f80de701b:   nop
  0x00007f4f80de701c:   vzeroupper 
  0x00007f4f80de701f:   callq  0x00007f4f80c57ea0           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@15 (line 211)
                                                            ; - mul::workload@7 (line 8)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f4f80de7024:   movabs $0x7f4f93707640,%rdi         ;   {external_word}
  0x00007f4f80de702e:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de7032:   callq  0x00007f4f92d808b4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de7037:   hlt    
 ;; B33: #	out( N1 ) <- in( B7 )  Freq: 1.01325e-06
  0x00007f4f80de7038:   mov    $0xfffffff4,%esi
  0x00007f4f80de703d:   mov    0x18(%rsp),%rbp              ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
  0x00007f4f80de7042:   nop
  0x00007f4f80de7043:   nop
  0x00007f4f80de7044:   vzeroupper 
  0x00007f4f80de7047:   callq  0x00007f4f80c57ea0           ; ImmutableOopMap {rbp=Oop [32]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@50 (line 212)
                                                            ; - mul::workload@7 (line 8)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f4f80de704c:   movabs $0x7f4f93707640,%rdi         ;   {external_word}
  0x00007f4f80de7056:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de705a:   callq  0x00007f4f92d808b4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de705f:   hlt    
 ;; B34: #	out( N1 ) <- in( B9 )  Freq: 1.01325e-06
  0x00007f4f80de7060:   mov    $0xfffffff6,%esi             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
  0x00007f4f80de7065:   nop
  0x00007f4f80de7066:   nop
  0x00007f4f80de7067:   nop
  0x00007f4f80de7068:   vzeroupper 
  0x00007f4f80de706b:   callq  0x00007f4f80c57ea0           ; ImmutableOopMap {}
                                                            ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 3079)
                                                            ; - mul::workload@16 (line 9)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f4f80de7070:   movabs $0x7f4f93707640,%rdi         ;   {external_word}
  0x00007f4f80de707a:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de707e:   callq  0x00007f4f92d808b4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de7083:   hlt    
 ;; B35: #	out( N1 ) <- in( B11 )  Freq: 1.01325e-06
  0x00007f4f80de7084:   mov    $0xfffffff6,%esi             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
  0x00007f4f80de7089:   nop
  0x00007f4f80de708a:   nop
  0x00007f4f80de708b:   nop
  0x00007f4f80de708c:   vzeroupper 
  0x00007f4f80de708f:   callq  0x00007f4f80c57ea0           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@8 (line 3079)
                                                            ; - mul::workload@16 (line 9)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f4f80de7094:   movabs $0x7f4f93707640,%rdi         ;   {external_word}
  0x00007f4f80de709e:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de70a2:   callq  0x00007f4f92d808b4Time = 10
           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de70a7:   hlt    
 ;; B36: #	out( N1 ) <- in( B16 )  Freq: 1.01325e-06
  0x00007f4f80de70a8:   mov    $0xfffffff6,%esi             ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
                                                            ; - mul::workload@42 (line 11)
  0x00007f4f80de70ad:   nop
  0x00007f4f80de70ae:   nop
  0x00007f4f80de70af:   nop
  0x00007f4f80de70b0:   vzeroupper 
  0x00007f4f80de70b3:   callq  0x00007f4f80c57ea0           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@6 (line 3352)
                                                            ; - mul::workload@42 (line 11)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f4f80de70b8:   movabs $0x7f4f93707640,%rdi         ;   {external_word}
  0x00007f4f80de70c2:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de70c6:   callq  0x00007f4f92d808b4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de70cb:   hlt    
 ;; B37: #	out( N1 ) <- in( B14 )  Freq: 4.76823e-07
  0x00007f4f80de70cc:   mov    $0xffffff45,%esi
  0x00007f4f80de70d1:   mov    %rcx,0x30(%rsp)
  0x00007f4f80de70d6:   vmovq  %xmm1,0x38(%rsp)
  0x00007f4f80de70dc:   vzeroupper 
  0x00007f4f80de70df:   callq  0x00007f4f80c57ea0           ; ImmutableOopMap {rbp=NarrowOop [24]=Oop [32]=Oop [48]=Oop }
                                                            ;*ifnull {reexecute=1 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractSpecies::dummyVectorMF@6 (line 325)
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVectorMF@1 (line 4045)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 3081)
                                                            ; - mul::workload@16 (line 9)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f4f80de70e4:   movabs $0x7f4f93707640,%rdi         ;   {external_word}
  0x00007f4f80de70ee:   and    $0xfffffffffffffff0,%rsp
  0x00007f4f80de70f2:   callq  0x00007f4f92d808b4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f4f80de70f7:   hlt                                 ;*ifnull {reexecute=0 rethrow=0 return_oop=0 return_scalarized=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::dummyVectorMF@6 (line 325)
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVectorMF@1 (line 4045)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 3081)
                                                            ; - mul::workload@16 (line 9)
  0x00007f4f80de70f8:   movabs $0x7f4f80de6df4,%r10         ;   {internal_word}
  0x00007f4f80de7102:   mov    %r10,0x3d8(%r15)
  0x00007f4f80de7109:   jmpq   0x00007f4f80d84520           ;   {runtime_call SafepointBlob}
  0x00007f4f80de710e:   callq  Stub::nmethod_entry_barrier  ;   {runtime_call StubRoutines (2)}
  0x00007f4f80de7113:   jmpq   0x00007f4f80de6c5a
[Exception Handler]
  0x00007f4f80de7118:   jmpq   0x00007f4f80c8b1a0           ;   {no_reloc}
[Deopt Handler Code]
  0x00007f4f80de711d:   callq  0x00007f4f80de7122
  0x00007f4f80de7122:   subq   $0x5,(%rsp)
  0x00007f4f80de7127:   jmpq   0x00007f4f80d859c0           ;   {runtime_call DeoptimizationBlob}
  0x00007f4f80de712c:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00007f4f80de7136:   jmpq   0x00007f4f80de7136           ;   {runtime_call}
  0x00007f4f80de713b:   1 
hlt    
  0x00007f4f80de713c:   hlt    
  0x00007f4f80de713d:   hlt    
  0x00007f4f80de713e:   hlt    
  0x00007f4f80de713f:   4 
hlt    
--------------------------------------------------------------------------------
[/Disassembly]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007f4f80de7140:   0x000000011f0ebfb0 a 'java/la9 
ng/Class'{0x000000011f0ebfb0} = 'jdk/incubator/vector/Int25616 
Vector$Int256Mask'
  0x00007f4f80de7148:   0x000000011f0ebe60 a 'java/lang/Cla5 
ss'{0x000000011f0ebe60} = 'jdk/incubator/vector/Int256Vector'
  0x00007f4f80de7150:   0x000000011f014b90 a 'jdk/internal/loader/Class6 
Loaders$AppClassLoader'{0x000000011f014b90}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007f4f80de7158:   0x00007f4f38401630 {method} {0x00007f4f38401630} 'w7 
orkload' '([I[I)V' in 'mul'
  0x00007f4f80de7160:   0x00007f4f38047058 {method} {0x00007f4f38047058} 'intoA8 
rray' '([II)V' in 'jdk/incubator/vector/IntVector'
  0x00007f4f80de7168:   0x0000000801048770 'jdk/incubator/vector/IntVector$IntSpecies'
  0x00007f4f80de7170:   0x00007f4f380ba628 {method} {0x00007f4f380ba628} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[ZI)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
  0x00007f4f80de7178:   0x00007f4f380978f0 {method} {0x00007f4f380978f0} 'laneCount' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007f4f80de7180:   0x000000080104d4e8 'jdk/incubator/vector/Int256Vector$Int256Mask'
  0x00007f4f80de7188:   0x00007f4f380467f8 {method} {0x00007f4f380467f8} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f4f80de7190:   0x00007f4f38097808 {method} {0x00007f4f38097808} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007f4f80de7198:   0x00007f4f38093680 {method} {0x00007f4f38093680} 'dummyVectorMF' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
  0x00007f4f80de71a0:   0x00007f4f38099340 {method} {0x00007f4f38099340} 'dummyVectorMF' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007f4f80de71a8:   0x000000080104cb88 'jdk/incubator/vector/Int256Vector'
  0x00007f4f80de71b0:   0x00007f4f380d4918 {method} {0x00007f4f380d4918} 'fromArray0' '([II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f4f80de71b8:   0x00007f4f38047950 {method} {0x00007f4f38047950} 'fromArray0Template' '([II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f4f80de71c0:   0x00007f4f380d6948 {method} {0x00007f4f380d6948} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f4f80de71c8:   0x00007f4f380d24b8 {method} {0x00007f4f380d24b8} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/Int256Vector;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f4f80de71d0:   0x00007f4f3803e8d0 {method} {0x00007f4f3803e8d0} 'lanewiseTemplate' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljava/lang/Class;Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f4f80de71d8:   0x00007f4f380ef130 {method} {0x00007f4f380ef130} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
  0x00007f4f80de71e0:   0x000000080007c100 {method} {0x000000080007c100} 'checkIndex' '(II)I' in 'java/util/Objects'
  0x00007f4f80de71e8:   0x00007f4f380b7c68 {method} {0x00007f4f380b7c68} 'check' '(Ljava/lang/Class;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
  0x00007f4f80de71f0:   0x000000080104ab30 'jdk/incubator/vector/VectorMask'
  0x00007f4f80de71f8:   0x00007f4f380bb6e0 {method} {0x00007f4f380bb6e0} 'check' '(Ljava/lang/Class;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
  0x00007f4f80de7200:   0x0000000801055d60 'jdk/incubator/vector/VectorOperators$AssociativeImpl'
  0x00007f4f80de7208:   0x00007f4f38167470 {method} {0x00007f4f38167470} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007f4f80de7210:   0x00000008010554d0 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007f4f80de7218:   0x00007f4f38166fa8 {method} {0x00007f4f38166fa8} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007f4f80de7220:   0x00007f4f38167098 {method} {0x00007f4f38167098} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007f4f80de7228:   0x00007f4f3808c950 {method} {0x00007f4f3808c950} 'find' '(Ljdk/incubator/vector/VectorOperators$Operator;ILjava/util/function/IntFunction;)Ljava/lang/Object;' in 'jdk/incubator/vector/VectorOperators$ImplCache'
  0x00007f4f80de7230:   0x00000008010473d0 'jdk/incubator/vector/VectorOperators$ImplCache'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007f4f80de6c3f offset=ffffffff bits=0):
PcDesc(pc=0x00007f4f80de6c5a offset=1a bits=0):
   mul::workload@-1 (line 8)
PcDesc(pc=0x00007f4f80de6c64 offset=24 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de6c72 offset=32 bits=0):
   mul::workload@0 (line 8)
PcDesc(pc=0x00007f4f80de6c76 offset=36 bits=0):
   mul::workload@3 (line 8)
PcDesc(pc=0x00007f4f80de6c8c offset=4c bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de6c9e offset=5e bits=0):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 209)
   mul::workload@7 (line 8)
PcDesc(pc=0x00007f4f80de6ca2 offset=62 bits=0):
   jdk.incubator.vector.AbstractSpecies::laneCount@1 (line 133)
   jdk.incubator.vector.VectorMask::fromArray@6 (line 210)
   mul::workload@7 (line 8)
PcDesc(pc=0x00007f4f80de6cc3 offset=83 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de6d24 offset=e4 bits=4):
   jdk.incubator.vector.VectorMask::fromArray@47 (line 212)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   mul::workload@7 (line 8)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007f4f80de6d35 offset=f5 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de6d43 offset=103 bits=0):
   mul::workload@11 (line 9)
PcDesc(pc=0x00007f4f80de6d4d offset=10d bits=0):
   jdk.incubator.vector.VectorMask::fromArray@50 (line 212)
   mul::workload@7 (line 8)
PcDesc(pc=0x00007f4f80de6d5f offset=11f bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de6d68 offset=128 bits=0):
   jdk.incubator.vector.IntVector::fromArray@2 (line 3079)
   mul::workload@16 (line 9)
PcDesc(pc=0x00007f4f80de6d6c offset=12c bits=0):
   jdk.incubator.vector.AbstractSpecies::length@1 (line 124)
   jdk.incubator.vector.IntVector::fromArray@2 (line 3079)
   mul::workload@16 (line 9)
PcDesc(pc=0x00007f4f80de6d8a offset=14a bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de6d8d offset=14d bits=0):
   jdk.incubator.vector.AbstractSpecies::dummyVectorMF@1 (line 324)
   jdk.incubator.vector.IntVector$IntSpecies::dummyVectorMF@1 (line 4045)
   jdk.incubator.vector.IntVector::fromArray@19 (line 3081)
   mul::workload@16 (line 9)
PcDesc(pc=0x00007f4f80de6db6 offset=176 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de6dbc offset=17c bits=0):
   jdk.incubator.vector.IntVector::fromArray0Template@32 (line 3569)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 828)
   jdk.incubator.vector.IntVector::fromArray@24 (line 3081)
   mul::workload@16 (line 9)
PcDesc(pc=0x00007f4f80de6dc0 offset=180 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de6dd4 offset=194 bits=0):
   jdk.incubator.vector.IntVector::lanewiseTemplate@192 (line 921)
   jdk.incubator.vector.Int256Vector::lanewise@9 (line 310)
   jdk.incubator.vector.Int256Vector::lanewise@4 (line 42)
   mul::workload@37 (line 11)
PcDesc(pc=0x00007f4f80de6e16 offset=1d6 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de6e20 offset=1e0 bits=0):
   java.util.Objects::checkIndex@3 (line 473)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.VectorMask::fromArray@16 (line 211)
   Locals
    - l0: empty
    - l1: stack[40],narrowoop
    - l2: empty
    - l3: stack[48],oop
    - l4: stack[44]
   mul::workload@7 (line 8)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007f4f80de6e4c offset=20c bits=0):
   java.util.Objects::checkIndex@3 (line 473)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@9 (line 3079)
   Locals
    - l0: stack[48],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
   mul::workload@16 (line 9)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: obj[183]
    - l3: empty
    - l4: empty
   Objects
    - 183: jdk.incubator.vector.Int256Vector$Int256Mask stack[56],vector
PcDesc(pc=0x00007f4f80de6e78 offset=238 bits=0):
   java.util.Objects::checkIndex@3 (line 473)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::intoArray@7 (line 3352)
   Locals
    - l0: obj[252]
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
   mul::workload@42 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 252: jdk.incubator.vector.Int256Vector stack[32],vector
PcDesc(pc=0x00007f4f80de6ea8 offset=268 bits=0):
   java.util.Objects::checkIndex@3 (line 473)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.VectorMask::fromArray@16 (line 211)
   Locals
    - l0: empty
    - l1: stack[40],narrowoop
    - l2: empty
    - l3: stack[48],oop
    - l4: stack[44]
   mul::workload@7 (line 8)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007f4f80de6ec7 offset=287 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de6ed0 offset=290 bits=0):
   jdk.incubator.vector.IntVector::fromArray@2 (line 3079)
   Locals
    - l0: reg rbp [10],narrowoop
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],narrowoop
   mul::workload@16 (line 9)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: obj[136]
    - l3: empty
    - l4: empty
   Objects
    - 136: jdk.incubator.vector.Int256Vector$Int256Mask stack[48],vector
PcDesc(pc=0x00007f4f80de6efc offset=2bc bits=0):
   java.util.Objects::checkIndex@3 (line 473)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@9 (line 3079)
   Locals
    - l0: stack[48],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
   mul::workload@16 (line 9)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: obj[170]
    - l3: empty
    - l4: empty
   Objects
    - 170: jdk.incubator.vector.Int256Vector$Int256Mask stack[56],vector
PcDesc(pc=0x00007f4f80de6f28 offset=2e8 bits=0):
   java.util.Objects::checkIndex@3 (line 473)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::intoArray@7 (line 3352)
   Locals
    - l0: obj[231]
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
   mul::workload@42 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 231: jdk.incubator.vector.Int256Vector stack[32],vector
PcDesc(pc=0x00007f4f80de6f55 offset=315 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de6f60 offset=320 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 209)
   Locals
    - l0: empty
    - l1: stack[32],narrowoop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[36],narrowoop
   mul::workload@7 (line 8)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007f4f80de6f8d offset=34d bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de6f98 offset=358 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@50 (line 212)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[32],oop
   mul::workload@7 (line 8)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007f4f80de6fb7 offset=377 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de6fc0 offset=380 bits=0):
   jdk.incubator.vector.IntVector$IntSpecies::dummyVectorMF@4 (line 4045)
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
   jdk.incubator.vector.IntVector::fromArray@19 (line 3081)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: 0
    - l3: empty
   mul::workload@16 (line 9)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: obj[209]
    - l3: empty
    - l4: empty
   Objects
    - 209: jdk.incubator.vector.Int256Vector$Int256Mask stack[48],vector
PcDesc(pc=0x00007f4f80de6fd4 offset=394 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@47 (line 212)
   mul::workload@7 (line 8)
PcDesc(pc=0x00007f4f80de7000 offset=3c0 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 209)
   Locals
    - l0: empty
    - l1: stack[32],narrowoop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
   mul::workload@7 (line 8)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007f4f80de7019 offset=3d9 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de7024 offset=3e4 bits=0):
   jdk.incubator.vector.VectorMask::fromArray@15 (line 211)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: NULL
   mul::workload@7 (line 8)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007f4f80de7042 offset=402 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de704c offset=40c bits=0):
   jdk.incubator.vector.VectorMask::fromArray@50 (line 212)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
   mul::workload@7 (line 8)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007f4f80de7065 offset=425 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de7070 offset=430 bits=0):
   jdk.incubator.vector.IntVector::fromArray@2 (line 3079)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: NULL
   mul::workload@16 (line 9)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007f4f80de7089 offset=449 bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de7094 offset=454 bits=0):
   jdk.incubator.vector.IntVector::fromArray@8 (line 3079)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: NULL
   mul::workload@16 (line 9)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007f4f80de70ad offset=46d bits=0):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
   mul::workload@42 (line 11)
PcDesc(pc=0x00007f4f80de70b8 offset=478 bits=0):
   jdk.incubator.vector.IntVector::intoArray@6 (line 3352)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: NULL
   mul::workload@42 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x00007f4f80de70e4 offset=4a4 bits=1):
   jdk.incubator.vector.AbstractSpecies::dummyVectorMF@6 (line 325)  reexecute=true
   Locals
    - l0: stack[48],oop
    - l1: reg rbp [10],narrowoop
   Expression stack
    - @0: reg rbp [10],narrowoop
   jdk.incubator.vector.IntVector$IntSpecies::dummyVectorMF@1 (line 4045)
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::fromArray@19 (line 3081)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: 0
    - l3: empty
   mul::workload@16 (line 9)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: obj[196]
    - l3: empty
    - l4: empty
   Objects
    - 196: jdk.incubator.vector.Int256Vector$Int256Mask stack[56],vector
PcDesc(pc=0x00007f4f80de70f8 offset=4b8 bits=0):
   jdk.incubator.vector.AbstractSpecies::dummyVectorMF@6 (line 325)
   jdk.incubator.vector.IntVector$IntSpecies::dummyVectorMF@1 (line 4045)
   jdk.incubator.vector.IntVector::fromArray@19 (line 3081)
   mul::workload@16 (line 9)
PcDesc(pc=0x00007f4f80de7141 offset=501 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 18 OopMaps

ImmutableOopMap {[24]=Oop [32]=Oop } pc offsets: 228 
ImmutableOopMap {[24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop } pc offsets: 480 
ImmutableOopMap {[24]=Oop [32]=Oop [48]=Oop } pc offsets: 524 
ImmutableOopMap {[24]=Oop } pc offsets: 568 
ImmutableOopMap {[24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop } pc offsets: 616 
ImmutableOopMap {rbp=NarrowOop [24]=Oop [32]=Oop } pc offsets: 656 
ImmutableOopMap {[24]=Oop [32]=Oop [48]=Oop } pc offsets: 700 
ImmutableOopMap {[24]=Oop } pc offsets: 744 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=NarrowOop [36]=NarrowOop } pc offsets: 800 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop } pc offsets: 856 
ImmutableOopMap {rbp=NarrowOop [24]=Oop [32]=Oop } pc offsets: 896 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=NarrowOop } pc offsets: 960 
ImmutableOopMap {} pc offsets: 996 
ImmutableOopMap {rbp=Oop [32]=Oop } pc offsets: 1036 
ImmutableOopMap {} pc offsets: 1072 1108 1144 
ImmutableOopMap {rbp=NarrowOop [24]=Oop [32]=Oop [48]=Oop } pc offsets: 1188 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007f4f80de6c5a offset=1a):
   mul::workload@-1 (line 8)
ScopeDesc(pc=0x00007f4f80de6c64 offset=24):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de6c64 offset=24):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de6c72 offset=32):
   mul::workload@0 (line 8)
ScopeDesc(pc=0x00007f4f80de6c76 offset=36):
   mul::workload@3 (line 8)
ScopeDesc(pc=0x00007f4f80de6c8c offset=4c):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de6c8c offset=4c):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de6c9e offset=5e):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 209)
ScopeDesc(pc=0x00007f4f80de6c9e offset=5e):
   mul::workload@7 (line 8)
ScopeDesc(pc=0x00007f4f80de6ca2 offset=62):
   jdk.incubator.vector.AbstractSpecies::laneCount@1 (line 133)
ScopeDesc(pc=0x00007f4f80de6ca2 offset=62):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 210)
ScopeDesc(pc=0x00007f4f80de6ca2 offset=62):
   mul::workload@7 (line 8)
ScopeDesc(pc=0x00007f4f80de6cc3 offset=83):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de6cc3 offset=83):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de6d24 offset=e4):
   jdk.incubator.vector.VectorMask::fromArray@47 (line 212)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f4f80de6d24 offset=e4):
   mul::workload@7 (line 8)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f4f80de6d35 offset=f5):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de6d35 offset=f5):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de6d43 offset=103):
   mul::workload@11 (line 9)
ScopeDesc(pc=0x00007f4f80de6d4d offset=10d):
   jdk.incubator.vector.VectorMask::fromArray@50 (line 212)
ScopeDesc(pc=0x00007f4f80de6d4d offset=10d):
   mul::workload@7 (line 8)
ScopeDesc(pc=0x00007f4f80de6d5f offset=11f):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de6d5f offset=11f):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de6d68 offset=128):
   jdk.incubator.vector.IntVector::fromArray@2 (line 3079)
ScopeDesc(pc=0x00007f4f80de6d68 offset=128):
   mul::workload@16 (line 9)
ScopeDesc(pc=0x00007f4f80de6d6c offset=12c):
   jdk.incubator.vector.AbstractSpecies::length@1 (line 124)
ScopeDesc(pc=0x00007f4f80de6d6c offset=12c):
   jdk.incubator.vector.IntVector::fromArray@2 (line 3079)
ScopeDesc(pc=0x00007f4f80de6d6c offset=12c):
   mul::workload@16 (line 9)
ScopeDesc(pc=0x00007f4f80de6d8a offset=14a):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de6d8a offset=14a):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de6d8d offset=14d):
   jdk.incubator.vector.AbstractSpecies::dummyVectorMF@1 (line 324)
ScopeDesc(pc=0x00007f4f80de6d8d offset=14d):
   jdk.incubator.vector.IntVector$IntSpecies::dummyVectorMF@1 (line 4045)
ScopeDesc(pc=0x00007f4f80de6d8d offset=14d):
   jdk.incubator.vector.IntVector::fromArray@19 (line 3081)
ScopeDesc(pc=0x00007f4f80de6d8d offset=14d):
   mul::workload@16 (line 9)
ScopeDesc(pc=0x00007f4f80de6db6 offset=176):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de6db6 offset=176):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de6dbc offset=17c):
   jdk.incubator.vector.IntVector::fromArray0Template@32 (line 3569)
ScopeDesc(pc=0x00007f4f80de6dbc offset=17c):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 828)
ScopeDesc(pc=0x00007f4f80de6dbc offset=17c):
   jdk.incubator.vector.IntVector::fromArray@24 (line 3081)
ScopeDesc(pc=0x00007f4f80de6dbc offset=17c):
   mul::workload@16 (line 9)
ScopeDesc(pc=0x00007f4f80de6dc0 offset=180):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de6dc0 offset=180):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de6dd4 offset=194):
   jdk.incubator.vector.IntVector::lanewiseTemplate@192 (line 921)
ScopeDesc(pc=0x00007f4f80de6dd4 offset=194):
   jdk.incubator.vector.Int256Vector::lanewise@9 (line 310)
ScopeDesc(pc=0x00007f4f80de6dd4 offset=194):
   jdk.incubator.vector.Int256Vector::lanewise@4 (line 42)
ScopeDesc(pc=0x00007f4f80de6dd4 offset=194):
   mul::workload@37 (line 11)
ScopeDesc(pc=0x00007f4f80de6e16 offset=1d6):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de6e16 offset=1d6):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de6e20 offset=1e0):
   java.util.Objects::checkIndex@3 (line 473)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
ScopeDesc(pc=0x00007f4f80de6e20 offset=1e0):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f4f80de6e20 offset=1e0):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 211)
   Locals
    - l0: empty
    - l1: stack[40],narrowoop
    - l2: empty
    - l3: stack[48],oop
    - l4: stack[44]
ScopeDesc(pc=0x00007f4f80de6e20 offset=1e0):
   mul::workload@7 (line 8)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f4f80de6e4c offset=20c):
   java.util.Objects::checkIndex@3 (line 473)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
ScopeDesc(pc=0x00007f4f80de6e4c offset=20c):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f4f80de6e4c offset=20c):
   jdk.incubator.vector.IntVector::fromArray@9 (line 3079)
   Locals
    - l0: stack[48],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007f4f80de6e4c offset=20c):
   mul::workload@16 (line 9)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: obj[183]
    - l3: empty
    - l4: empty
   Objects
    - 183: jdk.incubator.vector.Int256Vector$Int256Mask stack[56],vector
ScopeDesc(pc=0x00007f4f80de6e78 offset=238):
   java.util.Objects::checkIndex@3 (line 473)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
ScopeDesc(pc=0x00007f4f80de6e78 offset=238):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f4f80de6e78 offset=238):
   jdk.incubator.vector.IntVector::intoArray@7 (line 3352)
   Locals
    - l0: obj[252]
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007f4f80de6e78 offset=238):
   mul::workload@42 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 252: jdk.incubator.vector.Int256Vector stack[32],vector
ScopeDesc(pc=0x00007f4f80de6ea8 offset=268):
   java.util.Objects::checkIndex@3 (line 473)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
ScopeDesc(pc=0x00007f4f80de6ea8 offset=268):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f4f80de6ea8 offset=268):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 211)
   Locals
    - l0: empty
    - l1: stack[40],narrowoop
    - l2: empty
    - l3: stack[48],oop
    - l4: stack[44]
ScopeDesc(pc=0x00007f4f80de6ea8 offset=268):
   mul::workload@7 (line 8)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f4f80de6ec7 offset=287):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de6ec7 offset=287):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de6ed0 offset=290):
   jdk.incubator.vector.IntVector::fromArray@2 (line 3079)
   Locals
    - l0: reg rbp [10],narrowoop
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],narrowoop
ScopeDesc(pc=0x00007f4f80de6ed0 offset=290):
   mul::workload@16 (line 9)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: obj[136]
    - l3: empty
    - l4: empty
   Objects
    - 136: jdk.incubator.vector.Int256Vector$Int256Mask stack[48],vector
ScopeDesc(pc=0x00007f4f80de6efc offset=2bc):
   java.util.Objects::checkIndex@3 (line 473)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
ScopeDesc(pc=0x00007f4f80de6efc offset=2bc):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f4f80de6efc offset=2bc):
   jdk.incubator.vector.IntVector::fromArray@9 (line 3079)
   Locals
    - l0: stack[48],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007f4f80de6efc offset=2bc):
   mul::workload@16 (line 9)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: obj[170]
    - l3: empty
    - l4: empty
   Objects
    - 170: jdk.incubator.vector.Int256Vector$Int256Mask stack[56],vector
ScopeDesc(pc=0x00007f4f80de6f28 offset=2e8):
   java.util.Objects::checkIndex@3 (line 473)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
    - @2: NULL
ScopeDesc(pc=0x00007f4f80de6f28 offset=2e8):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 57)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f4f80de6f28 offset=2e8):
   jdk.incubator.vector.IntVector::intoArray@7 (line 3352)
   Locals
    - l0: obj[231]
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007f4f80de6f28 offset=2e8):
   mul::workload@42 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 231: jdk.incubator.vector.Int256Vector stack[32],vector
ScopeDesc(pc=0x00007f4f80de6f55 offset=315):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de6f55 offset=315):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de6f60 offset=320):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 209)
   Locals
    - l0: empty
    - l1: stack[32],narrowoop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[36],narrowoop
ScopeDesc(pc=0x00007f4f80de6f60 offset=320):
   mul::workload@7 (line 8)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f4f80de6f8d offset=34d):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de6f8d offset=34d):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de6f98 offset=358):
   jdk.incubator.vector.VectorMask::fromArray@50 (line 212)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[32],oop
ScopeDesc(pc=0x00007f4f80de6f98 offset=358):
   mul::workload@7 (line 8)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f4f80de6fb7 offset=377):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de6fb7 offset=377):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de6fc0 offset=380):
   jdk.incubator.vector.IntVector$IntSpecies::dummyVectorMF@4 (line 4045)
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
ScopeDesc(pc=0x00007f4f80de6fc0 offset=380):
   jdk.incubator.vector.IntVector::fromArray@19 (line 3081)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: 0
    - l3: empty
ScopeDesc(pc=0x00007f4f80de6fc0 offset=380):
   mul::workload@16 (line 9)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: obj[209]
    - l3: empty
    - l4: empty
   Objects
    - 209: jdk.incubator.vector.Int256Vector$Int256Mask stack[48],vector
ScopeDesc(pc=0x00007f4f80de6fd4 offset=394):
   jdk.incubator.vector.VectorMask::fromArray@47 (line 212)
ScopeDesc(pc=0x00007f4f80de6fd4 offset=394):
   mul::workload@7 (line 8)
ScopeDesc(pc=0x00007f4f80de7000 offset=3c0):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 209)
   Locals
    - l0: empty
    - l1: stack[32],narrowoop
    - l2: 0
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f4f80de7000 offset=3c0):
   mul::workload@7 (line 8)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f4f80de7019 offset=3d9):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de7019 offset=3d9):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de7024 offset=3e4):
   jdk.incubator.vector.VectorMask::fromArray@15 (line 211)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: NULL
ScopeDesc(pc=0x00007f4f80de7024 offset=3e4):
   mul::workload@7 (line 8)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f4f80de7042 offset=402):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de7042 offset=402):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de704c offset=40c):
   jdk.incubator.vector.VectorMask::fromArray@50 (line 212)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f4f80de704c offset=40c):
   mul::workload@7 (line 8)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f4f80de7065 offset=425):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de7065 offset=425):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de7070 offset=430):
   jdk.incubator.vector.IntVector::fromArray@2 (line 3079)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: NULL
ScopeDesc(pc=0x00007f4f80de7070 offset=430):
   mul::workload@16 (line 9)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f4f80de7089 offset=449):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de7089 offset=449):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de7094 offset=454):
   jdk.incubator.vector.IntVector::fromArray@8 (line 3079)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: NULL
ScopeDesc(pc=0x00007f4f80de7094 offset=454):
   mul::workload@16 (line 9)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f4f80de70ad offset=46d):
   jdk.incubator.vector.IntVector::intoArray@43 (line 3354)
ScopeDesc(pc=0x00007f4f80de70ad offset=46d):
   mul::workload@42 (line 11)
ScopeDesc(pc=0x00007f4f80de70b8 offset=478):
   jdk.incubator.vector.IntVector::intoArray@6 (line 3352)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: NULL
ScopeDesc(pc=0x00007f4f80de70b8 offset=478):
   mul::workload@42 (line 11)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f4f80de70e4 offset=4a4):
   jdk.incubator.vector.AbstractSpecies::dummyVectorMF@6 (line 325)  reexecute=true
   Locals
    - l0: stack[48],oop
    - l1: reg rbp [10],narrowoop
   Expression stack
    - @0: reg rbp [10],narrowoop
ScopeDesc(pc=0x00007f4f80de70e4 offset=4a4):
   jdk.incubator.vector.IntVector$IntSpecies::dummyVectorMF@1 (line 4045)
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f4f80de70e4 offset=4a4):
   jdk.incubator.vector.IntVector::fromArray@19 (line 3081)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: 0
    - l3: empty
ScopeDesc(pc=0x00007f4f80de70e4 offset=4a4):
   mul::workload@16 (line 9)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: obj[196]
    - l3: empty
    - l4: empty
   Objects
    - 196: jdk.incubator.vector.Int256Vector$Int256Mask stack[56],vector
ScopeDesc(pc=0x00007f4f80de70f8 offset=4b8):
   jdk.incubator.vector.AbstractSpecies::dummyVectorMF@6 (line 325)
ScopeDesc(pc=0x00007f4f80de70f8 offset=4b8):
   jdk.incubator.vector.IntVector$IntSpecies::dummyVectorMF@1 (line 4045)
ScopeDesc(pc=0x00007f4f80de70f8 offset=4b8):
   jdk.incubator.vector.IntVector::fromArray@19 (line 3081)
ScopeDesc(pc=0x00007f4f80de70f8 offset=4b8):
   mul::workload@16 (line 9)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007f4f80de6b00: 0824
relocInfo@0x00007f4f80de6b00 [type=1(oop) addr=0x00007f4f80de6c64 offset=36] | [oop_addr=0x00007f4f80de6c66 *=0x000000011f0dcdf8 offset=0]
         @0x00007f4f80de6b02: 78036621
relocInfo@0x00007f4f80de6b04 [type=12(metadata) addr=0x00007f4f80de6c85 offset=33 format=3 data=3] | [metadata_addr=0x00007f4f80de7168 *=0x0000000801048770 offset=0]metadata_value=0x0000000801048770: 'jdk/incubator/vector/IntVector$IntSpecies'
         @0x00007f4f80de6b06: 7c0394200ad07f4f3a41
relocInfo@0x00007f4f80de6b0e [type=7(external_word) addr=0x00007f4f80de6cc6 offset=65 format=1 data={94200ad07f4f}] | [target=0x00007f4f94200ad0]
         @0x00007f4f80de6b10: 7c03938fdfa87f4f380d
relocInfo@0x00007f4f80de6b18 [type=7(external_word) addr=0x00007f4f80de6cd3 offset=13 data={938fdfa87f4f}] | [target=0x00007f4f938fdfa8]
         @0x00007f4f80de6b1a: 320e
relocInfo@0x00007f4f80de6b1a [type=6(runtime_call) addr=0x00007f4f80de6ce1 offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6b1c: 080a
relocInfo@0x00007f4f80de6b1c [type=1(oop) addr=0x00007f4f80de6ceb offset=10] | [oop_addr=0x00007f4f80de6ced *=0x00000007fef002d0 offset=0]
         @0x00007f4f80de6b1e: 0822
relocInfo@0x00007f4f80de6b1e [type=1(oop) addr=0x00007f4f80de6d0d offset=34] | [oop_addr=0x00007f4f80de6d0f *=0x000000011f0f87f8 offset=0]
         @0x00007f4f80de6b20: 2212
relocInfo@0x00007f4f80de6b20 [type=4(static_call) addr=0x00007f4f80de6d1f offset=18 format=1] | [destination=0x00007f4f80dde360 metadata=0x0000000000000000]
         @0x00007f4f80de6b22: 78066609
relocInfo@0x00007f4f80de6b24 [type=12(metadata) addr=0x00007f4f80de6d28 offset=9 format=3 data=6] | [metadata_addr=0x00007f4f80de7180 *=0x000000080104d4e8 offset=0]metadata_value=0x000000080104d4e8: 'jdk/incubator/vector/Int256Vector$Int256Mask'
         @0x00007f4f80de6b26: 080d
relocInfo@0x00007f4f80de6b26 [type=1(oop) addr=0x00007f4f80de6d35 offset=13] | [oop_addr=0x00007f4f80de6d37 *=0x000000011f0dcdf8 offset=0]
         @0x00007f4f80de6b28: 78036618
relocInfo@0x00007f4f80de6b2a [type=12(metadata) addr=0x00007f4f80de6d4d offset=24 format=3 data=3] | [metadata_addr=0x00007f4f80de7168 *=0x0000000801048770 offset=0]metadata_value=0x0000000801048770: 'jdk/incubator/vector/IntVector$IntSpecies'
         @0x00007f4f80de6b2c: 780b6653
relocInfo@0x00007f4f80de6b2e [type=12(metadata) addr=0x00007f4f80de6da0 offset=83 format=3 data=11] | [metadata_addr=0x00007f4f80de71a8 *=0x000000080104cb88 offset=0]metadata_value=0x000000080104cb88: 'jdk/incubator/vector/Int256Vector'
         @0x00007f4f80de6b30: 5854
relocInfo@0x00007f4f80de6b30 [type=11(poll_return) addr=0x00007f4f80de6df4 offset=84]
         @0x00007f4f80de6b32: 3227
relocInfo@0x00007f4f80de6b32 [type=6(runtime_call) addr=0x00007f4f80de6e1b offset=39 format=1] | [destination=0x00007f4f80c57ea0]
         @0x00007f4f80de6b34: 7c03937076407f4f3805
relocInfo@0x00007f4f80de6b3c [type=7(external_word) addr=0x00007f4f80de6e20 offset=5 data={937076407f4f}] | [target=0x00007f4f93707640]
         @0x00007f4f80de6b3e: 320e
relocInfo@0x00007f4f80de6b3e [type=6(runtime_call) addr=0x00007f4f80de6e2e offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6b40: 3219
relocInfo@0x00007f4f80de6b40 [type=6(runtime_call) addr=0x00007f4f80de6e47 offset=25 format=1] | [destination=0x00007f4f80c57ea0]
         @0x00007f4f80de6b42: 7c03937076407f4f3805
relocInfo@0x00007f4f80de6b4a [type=7(external_word) addr=0x00007f4f80de6e4c offset=5 data={937076407f4f}] | [target=0x00007f4f93707640]
         @0x00007f4f80de6b4c: 320e
relocInfo@0x00007f4f80de6b4c [type=6(runtime_call) addr=0x00007f4f80de6e5a offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6b4e: 3219
relocInfo@0x00007f4f80de6b4e [type=6(runtime_call) addr=0x00007f4f80de6e73 offset=25 format=1] | [destination=0x00007f4f80c57ea0]
         @0x00007f4f80de6b50: 7c03937076407f4f3805
relocInfo@0x00007f4f80de6b58 [type=7(external_word) addr=0x00007f4f80de6e78 offset=5 data={937076407f4f}] | [target=0x00007f4f93707640]
         @0x00007f4f80de6b5a: 320e
relocInfo@0x00007f4f80de6b5a [type=6(runtime_call) addr=0x00007f4f80de6e86 offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6b5c: 321d
relocInfo@0x00007f4f80de6b5c [type=6(runtime_call) addr=0x00007f4f80de6ea3 offset=29 format=1] | [destination=0x00007f4f80c57ea0]
         @0x00007f4f80de6b5e: 7c03937076407f4f3805
relocInfo@0x00007f4f80de6b66 [type=7(external_word) addr=0x00007f4f80de6ea8 offset=5 data={937076407f4f}] | [target=0x00007f4f93707640]
         @0x00007f4f80de6b68: 320e
relocInfo@0x00007f4f80de6b68 [type=6(runtime_call) addr=0x00007f4f80de6eb6 offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6b6a: 3215
relocInfo@0x00007f4f80de6b6a [type=6(runtime_call) addr=0x00007f4f80de6ecb offset=21 format=1] | [destination=0x00007f4f80c57ea0]
         @0x00007f4f80de6b6c: 7c03937076407f4f3805
relocInfo@0x00007f4f80de6b74 [type=7(external_word) addr=0x00007f4f80de6ed0 offset=5 data={937076407f4f}] | [target=0x00007f4f93707640]
         @0x00007f4f80de6b76: 320e
relocInfo@0x00007f4f80de6b76 [type=6(runtime_call) addr=0x00007f4f80de6ede offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6b78: 3219
relocInfo@0x00007f4f80de6b78 [type=6(runtime_call) addr=0x00007f4f80de6ef7 offset=25 format=1] | [destination=0x00007f4f80c57ea0]
         @0x00007f4f80de6b7a: 7c03937076407f4f3805
relocInfo@0x00007f4f80de6b82 [type=7(external_word) addr=0x00007f4f80de6efc offset=5 data={937076407f4f}] | [target=0x00007f4f93707640]
         @0x00007f4f80de6b84: 320e
relocInfo@0x00007f4f80de6b84 [type=6(runtime_call) addr=0x00007f4f80de6f0a offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6b86: 3219
relocInfo@0x00007f4f80de6b86 [type=6(runtime_call) addr=0x00007f4f80de6f23 offset=25 format=1] | [destination=0x00007f4f80c57ea0]
         @0x00007f4f80de6b88: 7c03937076407f4f3805
relocInfo@0x00007f4f80de6b90 [type=7(external_word) addr=0x00007f4f80de6f28 offset=5 data={937076407f4f}] | [target=0x00007f4f93707640]
         @0x00007f4f80de6b92: 320e
relocInfo@0x00007f4f80de6b92 [type=6(runtime_call) addr=0x00007f4f80de6f36 offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6b94: 3225
relocInfo@0x00007f4f80de6b94 [type=6(runtime_call) addr=0x00007f4f80de6f5b offset=37 format=1] | [destination=0x00007f4f80c57ea0]
         @0x00007f4f80de6b96: 7c03937076407f4f3805
relocInfo@0x00007f4f80de6b9e [type=7(external_word) addr=0x00007f4f80de6f60 offset=5 data={937076407f4f}] | [target=0x00007f4f93707640]
         @0x00007f4f80de6ba0: 320e
relocInfo@0x00007f4f80de6ba0 [type=6(runtime_call) addr=0x00007f4f80de6f6e offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6ba2: 3225
relocInfo@0x00007f4f80de6ba2 [type=6(runtime_call) addr=0x00007f4f80de6f93 offset=37 format=1] | [destination=0x00007f4f80c57ea0]
         @0x00007f4f80de6ba4: 7c03937076407f4f3805
relocInfo@0x00007f4f80de6bac [type=7(external_word) addr=0x00007f4f80de6f98 offset=5 data={937076407f4f}] | [target=0x00007f4f93707640]
         @0x00007f4f80de6bae: 320e
relocInfo@0x00007f4f80de6bae [type=6(runtime_call) addr=0x00007f4f80de6fa6 offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6bb0: 3215
relocInfo@0x00007f4f80de6bb0 [type=6(runtime_call) addr=0x00007f4f80de6fbb offset=21 format=1] | [destination=0x00007f4f80c57ea0]
         @0x00007f4f80de6bb2: 7c03937076407f4f3805
relocInfo@0x00007f4f80de6bba [type=7(external_word) addr=0x00007f4f80de6fc0 offset=5 data={937076407f4f}] | [target=0x00007f4f93707640]
         @0x00007f4f80de6bbc: 320e
relocInfo@0x00007f4f80de6bbc [type=6(runtime_call) addr=0x00007f4f80de6fce offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6bbe: 3211
relocInfo@0x00007f4f80de6bbe [type=6(runtime_call) addr=0x00007f4f80de6fdf offset=17 format=1] | [destination=0x00007f4f80c84880]
         @0x00007f4f80de6bc0: 321c
relocInfo@0x00007f4f80de6bc0 [type=6(runtime_call) addr=0x00007f4f80de6ffb offset=28 format=1] | [destination=0x00007f4f80c57ea0]
         @0x00007f4f80de6bc2: 7c03937076407f4f3805
relocInfo@0x00007f4f80de6bca [type=7(external_word) addr=0x00007f4f80de7000 offset=5 data={937076407f4f}] | [target=0x00007f4f93707640]
         @0x00007f4f80de6bcc: 320e
relocInfo@0x00007f4f80de6bcc [type=6(runtime_call) addr=0x00007f4f80de700e offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6bce: 3211
relocInfo@0x00007f4f80de6bce [type=6(runtime_call) addr=0x00007f4f80de701f offset=17 format=1] | [destination=0x00007f4f80c57ea0]
         @0x00007f4f80de6bd0: 7c03937076407f4f3805
relocInfo@0x00007f4f80de6bd8 [type=7(external_word) addr=0x00007f4f80de7024 offset=5 data={937076407f4f}] | [target=0x00007f4f93707640]
         @0x00007f4f80de6bda: 320e
relocInfo@0x00007f4f80de6bda [type=6(runtime_call) addr=0x00007f4f80de7032 offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6bdc: 3215
relocInfo@0x00007f4f80de6bdc [type=6(runtime_call) addr=0x00007f4f80de7047 offset=21 format=1] | [destination=0x00007f4f80c57ea0]
         @0x00007f4f80de6bde: 7c03937076407f4f3805
relocInfo@0x00007f4f80de6be6 [type=7(external_word) addr=0x00007f4f80de704c offset=5 data={937076407f4f}] | [target=0x00007f4f93707640]
         @0x00007f4f80de6be8: 320e
relocInfo@0x00007f4f80de6be8 [type=6(runtime_call) addr=0x00007f4f80de705a offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6bea: 3211
relocInfo@0x00007f4f80de6bea [type=6(runtime_call) addr=0x00007f4f80de706b offset=17 format=1] | [destination=0x00007f4f80c57ea0]
         @0x00007f4f80de6bec: 7c03937076407f4f3805
relocInfo@0x00007f4f80de6bf4 [type=7(external_word) addr=0x00007f4f80de7070 offset=5 data={937076407f4f}] | [target=0x00007f4f93707640]
         @0x00007f4f80de6bf6: 320e
relocInfo@0x00007f4f80de6bf6 [type=6(runtime_call) addr=0x00007f4f80de707e offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6bf8: 3211
relocInfo@0x00007f4f80de6bf8 [type=6(runtime_call) addr=0x00007f4f80de708f offset=17 format=1] | [destination=0x00007f4f80c57ea0]
         @0x00007f4f80de6bfa: 7c03937076407f4f3805
relocInfo@0x00007f4f80de6c02 [type=7(external_word) addr=0x00007f4f80de7094 offset=5 data={937076407f4f}] | [target=0x00007f4f93707640]
         @0x00007f4f80de6c04: 320e
relocInfo@0x00007f4f80de6c04 [type=6(runtime_call) addr=0x00007f4f80de70a2 offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6c06: 3211
relocInfo@0x00007f4f80de6c06 [type=6(runtime_call) addr=0x00007f4f80de70b3 offset=17 format=1] | [destination=0x00007f4f80c57ea0]
         @0x00007f4f80de6c08: 7c03937076407f4f3805
relocInfo@0x00007f4f80de6c10 [type=7(external_word) addr=0x00007f4f80de70b8 offset=5 data={937076407f4f}] | [target=0x00007f4f93707640]
         @0x00007f4f80de6c12: 320e
relocInfo@0x00007f4f80de6c12 [type=6(runtime_call) addr=0x00007f4f80de70c6 offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6c14: 3219
relocInfo@0x00007f4f80de6c14 [type=6(runtime_call) addr=0x00007f4f80de70df offset=25 format=1] | [destination=0x00007f4f80c57ea0]
         @0x00007f4f80de6c16: 7c03937076407f4f3805
relocInfo@0x00007f4f80de6c1e [type=7(external_word) addr=0x00007f4f80de70e4 offset=5 data={937076407f4f}] | [target=0x00007f4f93707640]
         @0x00007f4f80de6c20: 320e
relocInfo@0x00007f4f80de6c20 [type=6(runtime_call) addr=0x00007f4f80de70f2 offset=14 format=1] | [destination=0x00007f4f92d808b4]
         @0x00007f4f80de6c22: 7b044006
relocInfo@0x00007f4f80de6c24 [type=8(internal_word) addr=0x00007f4f80de70f8 offset=6 data=772] | [target=0x00007f4f80de6df4]
         @0x00007f4f80de6c26: 3211
relocInfo@0x00007f4f80de6c26 [type=6(runtime_call) addr=0x00007f4f80de7109 offset=17 format=1] | [destination=0x00007f4f80d84520]
         @0x00007f4f80de6c28: 3205
relocInfo@0x00007f4f80de6c28 [type=6(runtime_call) addr=0x00007f4f80de710e offset=5 format=1] | [destination=0x00007f4f80cdf800]
         @0x00007f4f80de6c2a: 000a
relocInfo@0x00007f4f80de6c2a [type=0(none) addr=0x00007f4f80de7118 offset=10]
         @0x00007f4f80de6c2c: 3200
relocInfo@0x00007f4f80de6c2c [type=6(runtime_call) addr=0x00007f4f80de7118 offset=0 format=1] | [destination=0x00007f4f80c8b1a0]
         @0x00007f4f80de6c2e: 320f
relocInfo@0x00007f4f80de6c2e [type=6(runtime_call) addr=0x00007f4f80de7127 offset=15 format=1] | [destination=0x00007f4f80d859c0]
         @0x00007f4f80de6c30: 7c01ff212805
relocInfo@0x00007f4f80de6c34 [type=5(static_stub) addr=0x00007f4f80de712c offset=5 data=-223] | [static_call=0x00007f4f80de6d1f]
         @0x00007f4f80de6c36: 6000
relocInfo@0x00007f4f80de6c36 [type=12(metadata) addr=0x00007f4f80de712c offset=0] | [metadata_addr=0x00007f4f80de712e *=0x0000000000000000 offset=0]
         @0x00007f4f80de6c38: 320a
relocInfo@0x00007f4f80de6c38 [type=6(runtime_call) addr=0x00007f4f80de7136 offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007f4f80de6c3a: 0000
relocInfo@0x00007f4f80de6c3a [type=0(none) addr=0x00007f4f80de7136 offset=0]
         @0x00007f4f80de6c3c: 0000
relocInfo@0x00007f4f80de6c3c [type=0(none) addr=0x00007f4f80de7136 offset=0]
         @0x00007f4f80de6c3e: 0000
relocInfo@0x00007f4f80de6c3e [type=0(none) addr=0x00007f4f80de7136 offset=0]
         @0x00007f4f80de6c40: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.Int256Vector$Int256Mask
  method  = {method} {0x00007f4f380b7c68} 'check' '(Ljava/lang/Class;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
  class   = jdk.incubator.vector.VectorMask
  method  = *{method} {0x00007f4f380bb6e0} 'check' '(Ljava/lang/Class;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
   [nmethod<=klass]jdk.incubator.vector.Int256Vector$Int256Mask
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.VectorOperators$AssociativeImpl
  method  = {method} {0x00007f4f38167470} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  class   = jdk.incubator.vector.VectorOperators$OperatorImpl
  method  = {method} {0x00007f4f38167470} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$AssociativeImpl
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.VectorOperators$AssociativeImpl
  method  = {method} {0x00007f4f38166fa8} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  class   = jdk.incubator.vector.VectorOperators$OperatorImpl
  method  = {method} {0x00007f4f38166fa8} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$AssociativeImpl
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.VectorOperators$AssociativeImpl
  method  = {method} {0x00007f4f38167098} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  class   = jdk.incubator.vector.VectorOperators$OperatorImpl
  method  = {method} {0x00007f4f38167098} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$AssociativeImpl
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.VectorOperators$ImplCache
  method  = {method} {0x00007f4f3808c950} 'find' '(Ljdk/incubator/vector/VectorOperators$Operator;ILjava/util/function/IntFunction;)Ljava/lang/Object;' in 'jdk/incubator/vector/VectorOperators$ImplCache'
  class   = jdk.incubator.vector.VectorOperators$ImplCache
  method  = {method} {0x00007f4f3808c950} 'find' '(Ljdk/incubator/vector/VectorOperators$Operator;ILjava/util/function/IntFunction;)Ljava/lang/Object;' in 'jdk/incubator/vector/VectorOperators$ImplCache'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$ImplCache
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 24 bytes)
catch_pco = 228 (pc=0x00007f4f80de6d24, 1 entries)
  bci -1 at scope depth 0 -> pco 916 (pc=0x00007f4f80de6fd4)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 7 entries, 60 bytes):
{
   < 0x00007f4f80de6c80, 0x00007f4f80de6fe4 > < 0x00007f4f80de6c92, 0x00007f4f80de7014 > < 0x00007f4f80de6d24, 0x00007f4f80de7038 > 
   < 0x00007f4f80de6d43, 0x00007f4f80de7060 > < 0x00007f4f80de6d60, 0x00007f4f80de7084 > < 0x00007f4f80de6d8d, 0x00007f4f80de70cc > 
   < 0x00007f4f80de6db2, 0x00007f4f80de70a8 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 NULL-oop
#1: 0x000000011f0ebfb0 a 'java/lang/Class'{0x000000011f0ebfb0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
#2: 0x000000011f0ebe60 a 'java/lang/Class'{0x000000011f0ebe60} = 'jdk/incubator/vector/Int256Vector'
#3: 0x000000011f014b90 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000011f014b90}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
# 0: 0x0000000000000000 NULL-oop
# 1: 0x00007f4f38401630 {method} {0x00007f4f38401630} 'workload' '([I[I)V' in 'mul'
# 2: 0x00007f4f38047058 {method} {0x00007f4f38047058} 'intoArray' '([II)V' in 'jdk/incubator/vector/IntVector'
# 3: 0x0000000801048770 'jdk/incubator/vector/IntVector$IntSpecies'
# 4: 0x00007f4f380ba628 {method} {0x00007f4f380ba628} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[ZI)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
# 5: 0x00007f4f380978f0 {method} {0x00007f4f380978f0} 'laneCount' '()I' in 'jdk/incubator/vector/AbstractSpecies'
# 6: 0x000000080104d4e8 'jdk/incubator/vector/Int256Vector$Int256Mask'
# 7: 0x00007f4f380467f8 {method} {0x00007f4f380467f8} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
# 8: 0x00007f4f38097808 {method} {0x00007f4f38097808} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
# 9: 0x00007f4f38093680 {method} {0x00007f4f38093680} 'dummyVectorMF' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
#10: 0x00007f4f38099340 {method} {0x00007f4f38099340} 'dummyVectorMF' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies'
#11: 0x000000080104cb88 'jdk/incubator/vector/Int256Vector'
#12: 0x00007f4f380d4918 {method} {0x00007f4f380d4918} 'fromArray0' '([II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int256Vector'
#13: 0x00007f4f38047950 {method} {0x00007f4f38047950} 'fromArray0Template' '([II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#14: 0x00007f4f380d6948 {method} {0x00007f4f380d6948} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int256Vector'
#15: 0x00007f4f380d24b8 {method} {0x00007f4f380d24b8} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/Int256Vector;' in 'jdk/incubator/vector/Int256Vector'
#16: 0x00007f4f3803e8d0 {method} {0x00007f4f3803e8d0} 'lanewiseTemplate' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljava/lang/Class;Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#17: 0x00007f4f380ef130 {method} {0x00007f4f380ef130} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
#18: 0x000000080007c100 {method} {0x000000080007c100} 'checkIndex' '(II)I' in 'java/util/Objects'
#19: 0x00007f4f380b7c68 {method} {0x00007f4f380b7c68} 'check' '(Ljava/lang/Class;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
#20: 0x000000080104ab30 'jdk/incubator/vector/VectorMask'
#21: 0x00007f4f380bb6e0 {method} {0x00007f4f380bb6e0} 'check' '(Ljava/lang/Class;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
#22: 0x0000000801055d60 'jdk/incubator/vector/VectorOperators$AssociativeImpl'
#23: 0x00007f4f38167470 {method} {0x00007f4f38167470} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#24: 0x00000008010554d0 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#25: 0x00007f4f38166fa8 {method} {0x00007f4f38166fa8} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#26: 0x00007f4f38167098 {method} {0x00007f4f38167098} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#27: 0x00007f4f3808c950 {method} {0x00007f4f3808c950} 'find' '(Ljdk/incubator/vector/VectorOperators$Operator;ILjava/util/function/IntFunction;)Ljava/lang/Object;' in 'jdk/incubator/vector/VectorOperators$ImplCache'
#28: 0x00000008010473d0 'jdk/incubator/vector/VectorOperators$ImplCache'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
------------------------------------------------------------------------
static mul::workload([I[I)V
  interpreter_invocation_count:       18560
  invocation_counter:                 18560
  backedge_counter:                       0
  decompile_count:                        0
  mdo size: 584 bytes

   0 getstatic 7 <mul.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
   3 getstatic 13 <mul.mask_arr/[Z> 
   6 iconst_0
   7 invokestatic 17 <jdk/incubator/vector/VectorMask.fromArray(Ljdk/incubator/vector/VectorSpecies;[ZI)Ljdk/incubator/vector/VectorMask;> 
  0   bci: 7    CounterData         count(16897)
  10 astore_2
  11 getstatic 7 <mul.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
  14 fast_aload_0
  15 iconst_0
  16 invokestatic 23 <jdk/incubator/vector/IntVector.fromArray(Ljdk/incubator/vector/VectorSpecies;[II)Ljdk/incubator/vector/IntVector;> 
  16  bci: 16   CounterData         count(16897)
  19 astore_3
  20 getstatic 7 <mul.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
  23 fast_aload_0
  24 iconst_0
  25 invokestatic 23 <jdk/incubator/vector/IntVector.fromArray(Ljdk/incubator/vector/VectorSpecies;[II)Ljdk/incubator/vector/IntVector;> 
  32  bci: 25   CounterData         count(16897)
  28 astore #4
  30 aload #4
  32 getstatic 28 <jdk/incubator/vector/VectorOperators.MUL/Ljdk/incubator/vector/VectorOperators$Associative;> 
  35 aload_3
  36 aload_2
  37 invokevirtual 34 <jdk/incubator/vector/IntVector.lanewise(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;> 
  48  bci: 37   VirtualCallData     count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/Int256Vector'(16897 1.00)
  40 aload_1
  41 iconst_0
  42 invokevirtual 38 <jdk/incubator/vector/IntVector.intoArray([II)V> 
  104 bci: 42   VirtualCallData     count(16897) nonprofiled_count(0) entries(0)
  45 return
------------------------------------------------------------------------
Total MDO size: 584 bytes
