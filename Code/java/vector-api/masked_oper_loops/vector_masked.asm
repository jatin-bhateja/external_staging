CompileCommand: print App.micro_vector_masked bool print = true
OpenJDK 64-Bit Server VM warning: printing of assembly code is enabled; turning on DebugNonSafepoints to gain additional output
SCALAR : [Time] 14 ms   [Res] 93000000
VECTOR : [Time] 13 ms   [Res] 93000000

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 267 ------------------------
{method}
 - this oop:          0x00007f03b08119b8
 - method holder:     'App'
 - constants:         0x00007f03b0811090 constant pool [134]/operands[15] {0x00007f03b0811090} for 'App' cache=0x00007f03b0b00000
 - access:            0xc1000001  public 
 - name:              'micro_vector_masked'
 - signature:         '([I[I[I)V'
 - max stack:         7
 - max locals:        10
 - size of params:    4
 - method size:       13
 - vtable index:      5
 - i2i entry:         0x00007f03f900e220
 - adapters:          AHE@0x00007f03fc3a44a0: 0xbbbb0000 i2c: 0x00007f03f907f6e0 c2i: 0x00007f03f907f7cc c2iUV: 0x00007f03f907f796 c2iNCI: 0x00007f03f907f809
 - compiled entry     0x00007f03f907f7cc
 - code size:         200
 - code start:        0x00007f03b08118d0
 - code end (excl):   0x00007f03b0811998
 - method data:       0x00007f03b0b2b000
 - checked ex length: 0
 - linenumber start:  0x00007f03b0811998
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 267 -----------------------
#
#  void ( App:NotNull *, int[int:>=0]:exact *, int[int:>=0]:exact *, int[int:>=0]:exact * )
#
#r018 rsi:rsi   : parm 0: App:NotNull *
#r016 rdx:rdx   : parm 1: int[int:>=0]:exact *
#r010 rcx:rcx   : parm 2: int[int:>=0]:exact *
#r004 r8:r8   : parm 3: int[int:>=0]:exact *
# -- Old rsp -- Framesize: 224 --
#r583 rsp+220: in_preserve
#r582 rsp+216: return address
#r581 rsp+212: in_preserve
#r580 rsp+208: saved fp register
#r579 rsp+204: pad2, stack alignment
#r578 rsp+200: pad2, stack alignment
#r577 rsp+196: Fixed slot 1
#r576 rsp+192: Fixed slot 0
#r631 rsp+188: spill
#r630 rsp+184: spill
#r629 rsp+180: spill
#r628 rsp+176: spill
#r627 rsp+172: spill
#r626 rsp+168: spill
#r625 rsp+164: spill
#r624 rsp+160: spill
#r623 rsp+156: spill
#r622 rsp+152: spill
#r621 rsp+148: spill
#r620 rsp+144: spill
#r619 rsp+140: spill
#r618 rsp+136: spill
#r617 rsp+132: spill
#r616 rsp+128: spill
#r615 rsp+124: spill
#r614 rsp+120: spill
#r613 rsp+116: spill
#r612 rsp+112: spill
#r611 rsp+108: spill
#r610 rsp+104: spill
#r609 rsp+100: spill
#r608 rsp+96: spill
#r607 rsp+92: spill
#r606 rsp+88: spill
#r605 rsp+84: spill
#r604 rsp+80: spill
#r603 rsp+76: spill
#r602 rsp+72: spill
#r601 rsp+68: spill
#r600 rsp+64: spill
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: outgoing argument
#r588 rsp+16: outgoing argument
#r587 rsp+12: outgoing argument
#r586 rsp+ 8: outgoing argument
#r585 rsp+ 4: outgoing argument
#r584 rsp+ 0: outgoing argument
#
0000    N5788: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
0000    movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

        nop 	# 4 bytes pad for loops and calls

0020    B1: #	out( B403 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
0020    # stack bang (1040 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #208	# Create frame

002f    movq    [rsp + #48], R8	# spill
0034    movq    [rsp + #40], RCX	# spill
0039    movq    [rsp + #56], RDX	# spill
003e    movq    RBX, RSI	# spill
0041    movl    R10, [RSI + #12 (8-bit)]	# compressed ptr ! Field: App.SPECIES
0045    movl    RBP, [R12 + R10 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
004a    NullCheck R10

004a    B2: #	out( B317 B3 ) <- in( B1 )  Freq: 0.999999
004a    cmpl    RBP, narrowklass: precise klass jdk/incubator/vector/IntVector$IntSpecies: 0x00007f038028e830:Constant:exact *	# compressed klass ptr
0050    jne,u   B317  P=0.000001 C=-1.000000

0056    B3: #	out( B315 B4 ) <- in( B2 )  Freq: 0.999998
0056    decode_heap_oop_not_null RSI,R10
005a    # checkcastPP of RSI
005a    movl    RDX, [RSI + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
        nop 	# 3 bytes pad for loops and calls
0060    cmpl    RDX, #1048576	# unsigned
0066    jnbe,u   B315  P=0.000001 C=-1.000000

006c    B4: #	out( B5 ) <- in( B3 )  Freq: 0.999997
006c    movslq  RCX, RDX	# i2l

006f    B5: #	out( B249 B6 ) <- in( B4 B315 )  Freq: 0.999998
006f    cmpl    RDX, #1048576	# unsigned
0075    jnbe,u   B249  P=0.000001 C=-1.000000

007b    B6: #	out( B249 B7 ) <- in( B5 )  Freq: 0.999997
007b    # TLS is in R15
007b    movq    R8, [R15 + #328 (32-bit)]	# ptr
0082    addq    RCX, #23	# long
0086    movq    R11, RCX	# spill
0089    andq    R11, #-8	# long
008d    movq    R9, R8	# spill
0090    addq    R9, R11	# ptr
0093    # TLS is in R15
        nop 	# 13 bytes pad for loops and calls
00a0    cmpq    R9, [R15 + #344 (32-bit)]	# raw ptr
00a7    jnb,u   B249  P=0.000100 C=-1.000000

00ad    B7: #	out( B8 ) <- in( B6 )  Freq: 0.999897
00ad    # TLS is in R15
00ad    movq    [R15 + #328 (32-bit)], R9	# ptr
00b4    movq    RDI, R8	# spill
00b7    addq    RDI, #16	# ptr
00bb    movq    [R8], #1	# long
00c2    PREFETCHW [R9 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
00ca    movl    [R8 + #8 (8-bit)], narrowklass: precise klass [Z: 0x00007f03fc45a840:Constant:exact *	# compressed klass ptr
00d2    movl    [R8 + #12 (8-bit)], RDX	# int
00d6    PREFETCHW [R9 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
00de    PREFETCHW [R9 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
00e6    PREFETCHW [R9 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
00ee    shrq    RCX, #3
00f2    addq    RCX, #-2	# long
00f6    xorq    rax, rax	# ClearArray:
	cmp     InitArrayShortSize,rcx
	jg      LARGE
	dec     rcx
	js      DONE	# Zero length
	mov     rax,(rdi,rcx,8)	# LOOP
	dec     rcx
	jge     LOOP
	jmp     DONE
	# LARGE:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
	# DONE

0116    B8: #	out( B23 B9 ) <- in( B250 B7 )  Freq: 0.999998
0116    
0116    MEMBAR-storestore (empty encoding)
0116    movq    R11, R8	# spill
0119    # checkcastPP of R11
0119    movl    RDI, RDX	# spill
011b    # castII of RDI
011b    testl   RDI, RDI
        nop 	# 3 bytes pad for loops and calls
0120    jle     B23  P=0.111111 C=11286.000000

0126    B9: #	out( B323 B10 ) <- in( B8 )  Freq: 0.888887
0126    testl   RDI, RDI
0128    je     B323  P=0.000001 C=-1.000000

012e    B10: #	out( B323 B11 ) <- in( B9 )  Freq: 0.888886
012e    movl    R9, RDI	# spill
0131    decl    R9	# int
0134    cmpl    R9, RDI	# unsigned
0137    jnb,u   B323  P=0.000001 C=-1.000000

013d    B11: #	out( B12 ) <- in( B10 )  Freq: 0.888885
013d    movl    R9, #4	# int
0143    cmpl    RDI, R9
0146    movl    RCX, RDI	# spill
0148    cmovlgt RCX, R9	# min
014c    xorl    R9, R9	# int

014f    B12: #	out( B12 B13 ) <- in( B11 B12 ) Loop( B12-B12 inner pre of N2231) Freq: 1.77777
014f    movb    [R11 + #16 + R9], #1	# byte
0155    incl    R9	# int
0158    cmpl    R9, RCX
015b    jl,s   B12	# loop end  P=0.500000 C=10032.000000

015d    B13: #	out( B20 B14 ) <- in( B12 )  Freq: 0.888885
015d    movl    RCX, RDI	# spill
015f    addl    RCX, #-3	# int
0162    cmpl    R9, RCX
0165    jge     B20  P=0.000001 C=-1.000000

016b    B14: #	out( B324 B15 ) <- in( B13 )  Freq: 0.888884
016b    # castII of R9
016b    cmpl    R9, RDI	# unsigned
016e    jnb,u   B324  P=0.000001 C=-1.000000

0174    B15: #	out( B325 B16 ) <- in( B14 )  Freq: 0.888883
0174    movl    R8, R9	# spill
0177    addl    R8, #3	# int
        nop 	# 5 bytes pad for loops and calls
0180    cmpl    R8, RDI	# unsigned
0183    jnb,u   B325  P=0.000001 C=-1.000000

0189    B16: #	out( B17 ) <- in( B15 )  Freq: 0.888883
0189    # MachConstantBaseNode (empty encoding)
0189    replicateB XMM0,#1

0191    B17: #	out( B18 ) <- in( B16 B19 ) Loop( B17-B19 ) Freq: 7.99994
0191    movl    RAX, RDI	# spill
0193    subl    RAX, R9	# int
0196    addl    RAX, #-3	# int
0199    xorl    R8, R8	# int
019c    cmpl    RCX, R9
019f    cmovll RAX, R8	# signed, int
01a3    cmpl    RAX, #4000	# unsigned
01a9    movl    R8, #4000	# int
01af    cmovlnbe RAX, R8	# unsigned, int
01b3    addl    RAX, R9	# int
        nop 	# 10 bytes pad for loops and calls

01c0    B18: #	out( B18 B19 ) <- in( B17 B18 ) Loop( B18-B18 inner main of N690 strip mined) Freq: 71.9995
01c0    store_vector [R11 + #16 + R9],XMM0
	
01c7    addl    R9, #4	# int
01cb    cmpl    R9, RAX
01ce    jl,s   B18	# loop end  P=0.888889 C=10032.000000

01d0    B19: #	out( B17 B20 ) <- in( B18 )  Freq: 7.99994
01d0    # TLS is in R15
01d0    movq    R8, [R15 + #304 (32-bit)]	# ptr
01d7    testl   rax, [R8]	# Safepoint: poll for GC        # App::micro_vector_masked @ bci:42 (line 37) L[0]=RBX L[1]=rsp + #56 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=#0 L[5]=_ L[6]=_ L[7]=R11 L[8]=R9 L[9]=_
        # OopMap {r10=NarrowOop r11=Oop rbx=Oop rsi=Oop [40]=Oop [48]=Oop [56]=Oop off=471/0x1d7}
        nop 	# 6 bytes pad for loops and calls
01e0    cmpl    R9, RCX
01e3    jl,s   B17  P=0.888889 C=10032.000000

01e5    B20: #	out( B23 B21 ) <- in( B13 B19 )  Freq: 0.888883
01e5    cmpl    R9, RDI
01e8    jge,s   B23  P=0.500000 C=-1.000000

01ea    B21: #	out( B22 ) <- in( B20 )  Freq: 0.444442
01ea    # castII of R9
        nop 	# 2 bytes pad for loops and calls

01ec    B22: #	out( B22 B23 ) <- in( B21 B22 ) Loop( B22-B22 inner post of N2231) Freq: 0.888883
01ec    movb    [R11 + #16 + R9], #1	# byte
01f2    incl    R9	# int
01f5    cmpl    R9, RDI
01f8    jl,s   B22	# loop end  P=0.500000 C=10032.000000

01fa    B23: #	out( B318 B24 ) <- in( B22 B20 B8 )  Freq: 0.999994
01fa    decode_and_move_klass_not_null R8,RBP
0207    movq    R8, [R8 + #72 (8-bit)]	# class
020b    movq    R9, precise klass jdk/incubator/vector/AbstractSpecies: 0x00007f03fc5f8d60:Constant:exact *	# ptr
0215    cmpq    R8, R9	# ptr
0218    jne,u   B318  P=0.000001 C=-1.000000

021e    B24: #	out( B449 B25 ) <- in( B23 )  Freq: 0.999993
021e    movq    [rsp + #72], R11	# spill
0223    movl    [rsp + #64], RDX	# spill
0227    movq    [rsp + #24], RBX	# spill
022c    movl    RBP, [RSI + #48 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.maskType (constant)
022f    movq    [rsp + #32], RSI	# spill
        nop 	# 2 bytes pad for loops and calls
0236    movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.AbstractSpecies::elementType
        # jdk.incubator.vector.VectorMask::fromArray @ bci:25 (line 209) L[0]=_ L[1]=rsp + #72 L[2]=#0 L[3]=rsp + #32 L[4]=rsp + #64 STK[0]=RBP
        # App::micro_vector_masked @ bci:52 (line 40) L[0]=rsp + #24 L[1]=rsp + #56 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=#0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [48]=Oop [56]=Oop [72]=Oop off=584/0x248}

0248    B25: #	out( B450 B26 ) <- in( B24 )  Freq: 0.999973
        # Block is sole successor of call
0248    decode_heap_oop RSI,RBP
0274    movq    RDX, RAX	# spill
0277    movl    RCX, [rsp + #64]	# spill
027b    movq    R8, [rsp + #72]	# spill
0280    movl    R9, #16	# long (unsigned 32-bit)
0286    movq    RDI, R8	# spill
0289    xorl    R11, R11	# int
028c    movl    [rsp + #0], R11	# spill
0290    movq    R10, [rsp + #32]	# spill
0295    movq    [rsp + #8], R10	# spill
029a    movq    R10, jdk/incubator/vector/VectorMask$$Lambda$53+0x00000008000aa6e0:exact *	# ptr
02a4    movq    [rsp + #16], R10	# spill
        nop 	# 3 bytes pad for loops and calls
02ac    call,static  jdk.internal.vm.vector.VectorSupport::load
        # jdk.incubator.vector.VectorMask::fromArray @ bci:46 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:52 (line 40) L[0]=rsp + #24 L[1]=rsp + #56 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=#0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[24]=Oop [40]=Oop [48]=Oop [56]=Oop off=692/0x2b4}

02b4    B26: #	out( B404 B27 ) <- in( B25 )  Freq: 0.999953
        # Block is sole successor of call
02b4    movl    R10, [RAX + #8 (8-bit)]	# compressed klass ptr
02b8    NullCheck RAX

02b8    B27: #	out( B319 B28 ) <- in( B26 )  Freq: 0.999952
02b8    decode_and_move_klass_not_null R11,R10
02c5    movq    R10, [R11 + #80 (8-bit)]	# class
02c9    movq    R11, precise klass jdk/incubator/vector/VectorMask: 0x00007f0380291780:Constant:exact *	# ptr
02d3    cmpq    R10, R11	# ptr
02d6    jne,u   B319  P=0.000001 C=-1.000000

02dc    B28: #	out( B405 B29 ) <- in( B27 )  Freq: 0.999951
02dc    movq    R10, [rsp + #56]	# spill
02e1    movl    RBX, [R10 + #12 (8-bit)]	# range
02e5    NullCheck R10

02e5    B29: #	out( B406 B30 ) <- in( B28 )  Freq: 0.99995
02e5    movq    R10, [rsp + #24]	# spill
02ea    movl    RBP, [R10 + #12 (8-bit)]	# compressed ptr ! Field: App.SPECIES
02ee    movl    R11, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
02f3    NullCheck RBP

02f3    B30: #	out( B320 B31 ) <- in( B29 )  Freq: 0.999949
        nop 	# 13 bytes pad for loops and calls
0300    cmpl    R11, narrowklass: precise klass jdk/incubator/vector/IntVector$IntSpecies: 0x00007f038028e830:Constant:exact *	# compressed klass ptr
0307    jne,u   B320  P=0.000001 C=-1.000000

030d    B31: #	out( B344 B32 ) <- in( B30 )  Freq: 0.999948
030d    decode_heap_oop_not_null R9,RBP
0311    # checkcastPP of R9
0311    movl    R11, [R9 + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
0315    movl    RDX, R11	# spill
0318    decl    RDX	# int
031a    movl    RBP, R11	# spill
031d    andl    RBP, RDX	# int
        nop 	# 1 bytes pad for loops and calls
0320    testl   RBP, RBP
0322    jne     B344  P=0.000000 C=7249.000000

0328    B32: #	out( B34 B33 ) <- in( B31 )  Freq: 0.999948
0328    andnl  R10, RDX, RBX
032d    movl    RSI, RBX	# spill
032f    addl    RSI, #-7	# int
0332    testl   R10, R10
0335    jg,s   B34  P=0.749851 C=5017.000000

0337    B33: #	out( B47 ) <- in( B32 )  Freq: 0.250136
0337    xorl    R8, R8	# int
033a    movq    R14, [rsp + #40]	# spill
033f    movq    R13, [rsp + #48]	# spill
0344    jmp     B47

0349    B34: #	out( B336 B35 ) <- in( B32 )  Freq: 0.749811
0349    movq    R14, [rsp + #40]	# spill
034e    movl    RCX, [R14 + #12 (8-bit)]	# range
0352    NullCheck R14

0352    B35: #	out( B334 B36 ) <- in( B34 )  Freq: 0.749811
0352    subl    RCX, R11	# int
0355    incl    RCX	# int
0357    testl   RCX, RCX
0359    jl     B334  P=0.000001 C=-1.000000

035f    B36: #	out( B335 B37 ) <- in( B35 )  Freq: 0.74981
035f    movl    RDI, [R9 + #68 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.dummyVector (constant)
0363    movl    R8, [R12 + RDI << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0368    NullCheck RDI

0368    B37: #	out( B338 B38 ) <- in( B36 )  Freq: 0.749809
0368    cmpl    R8, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007f036c330ed0:Constant:exact *	# compressed klass ptr
036f    jne,u   B338  P=0.000001 C=-1.000000

0375    B38: #	out( B337 B39 ) <- in( B37 )  Freq: 0.749808
0375    movq    R13, [rsp + #48]	# spill
        nop 	# 6 bytes pad for loops and calls
0380    movl    R8, [R13 + #12 (8-bit)]	# range
0384    NullCheck R13

0384    B39: #	out( B337 B40 ) <- in( B38 )  Freq: 0.749808
0384    subl    R8, R11	# int
0387    incl    R8	# int
038a    testl   R8, R8
038d    jl     B337  P=0.000001 C=-1.000000

0393    B40: #	out( B337 B41 ) <- in( B39 )  Freq: 0.749807
0393    testl   RSI, RSI
0395    jl     B337  P=0.000001 C=-1.000000

039b    B41: #	out( B42 ) <- in( B40 )  Freq: 0.749806
039b    # castII of R8
039b    # castII of RCX
039b    movl    RAX, RSI	# spill
039d    # castII of RAX
039d    xorl    RDI, RDI	# int
        nop 	# 1 bytes pad for loops and calls

03a0    B42: #	out( B305 B43 ) <- in( B41 B45 ) Loop( B42-B45 inner ) Freq: 2.9974
03a0    cmpl    RDI, RCX	# unsigned
03a2    jnb,u   B305  P=0.000001 C=-1.000000

03a8    B43: #	out( B306 B44 ) <- in( B42 )  Freq: 2.9974
03a8    # castII of RDI
03a8    load_vector XMM0,[R14 + #16 + RDI << #2]
03af    cmpl    RDI, R8	# unsigned
03b2    jnb,u   B306  P=0.000001 C=-1.000000

03b8    B44: #	out( B307 B45 ) <- in( B43 )  Freq: 2.9974
03b8    vpaddd  XMM0,XMM0,[R13 + #16 + RDI << #2]	! add packedI
        nop 	# 1 bytes pad for loops and calls
03c0    cmpl    RDI, RAX	# unsigned
03c2    jnb,u   B307  P=0.000001 C=-1.000000

03c8    B45: #	out( B42 B46 ) <- in( B44 )  Freq: 2.9974
03c8    movq    RBP, [rsp + #56]	# spill
03cd    store_vector [RBP + #16 + RDI << #2],XMM0
	
03d3    # TLS is in R15
03d3    movq    RBP, [R15 + #304 (32-bit)]	# ptr
03da    addl    RDI, R11	# int
03dd    testl   rax, [RBP]	# Safepoint: poll for GC        # App::micro_vector_masked @ bci:124 (line 43) L[0]=rsp + #24 L[1]=rsp + #56 L[2]=R14 L[3]=R13 L[4]=RDI L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {r9=Oop r13=Oop r14=Oop [24]=Oop [56]=Oop off=989/0x3dd}
03e0    cmpl    RDI, R10
03e3    jl,s   B42  P=0.749851 C=3762.000000

03e5    B46: #	out( B47 ) <- in( B45 )  Freq: 0.749797
03e5    movl    R8, RDI	# spill

03e8    B47: #	out( B346 B48 ) <- in( B46 B33 )  Freq: 0.999933
03e8    movl    RCX, RBX	# spill
03ea    andl    RCX, RDX	# int
03ec    movl    R10, #1	# long (unsigned 32-bit)
03f2    salq    R10, RCX
03f5    decq    R10	# long
        nop 	# 8 bytes pad for loops and calls
0400    cmpl    R11, #64
0404    jge     B346  P=0.000000 C=1287.000000

040a    B48: #	out( B347 B49 ) <- in( B47 )  Freq: 0.999933
040a    movl    RCX, #64	# int
040f    subl    RCX, R11	# int
0412    salq    R10, RCX
0415    sarq    R10, RCX
0418    movq    RBP, R10	# spill
041b    sarq    RBP, #1
        nop 	# 2 bytes pad for loops and calls
0420    cmpq    R10, RBP
0423    je     B347  P=0.000000 C=1287.000000

0429    B49: #	out( B316 B50 ) <- in( B48 )  Freq: 0.999932
0429    cmpl    R11, #1048576	# unsigned
0430    jnbe,u   B316  P=0.000001 C=-1.000000

0436    B50: #	out( B51 ) <- in( B49 )  Freq: 0.999931
0436    movslq  RCX, R11	# i2l

0439    B51: #	out( B251 B52 ) <- in( B50 B316 )  Freq: 0.999932
        nop 	# 7 bytes pad for loops and calls
0440    cmpl    R11, #1048576	# unsigned
0447    jnbe,u   B251  P=0.000001 C=-1.000000

044d    B52: #	out( B251 B53 ) <- in( B51 )  Freq: 0.999931
044d    # TLS is in R15
044d    movq    RDX, [R15 + #328 (32-bit)]	# ptr
0454    addq    RCX, #23	# long
0458    movq    RDI, RCX	# spill
045b    andq    RDI, #-8	# long
045f    movq    RAX, RDX	# spill
0462    addq    RAX, RDI	# ptr
0465    # TLS is in R15
0465    cmpq    RAX, [R15 + #344 (32-bit)]	# raw ptr
046c    jnb,u   B251  P=0.000100 C=-1.000000

0472    B53: #	out( B54 ) <- in( B52 )  Freq: 0.999831
0472    # TLS is in R15
0472    movq    [R15 + #328 (32-bit)], RAX	# ptr
0479    PREFETCHW [RAX + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0480    movq    [RDX], #1	# long
0487    PREFETCHW [RAX + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
048e    movl    [RDX + #8 (8-bit)], narrowklass: precise klass [Z: 0x00007f03fc45a840:Constant:exact *	# compressed klass ptr
0495    movl    [RDX + #12 (8-bit)], R11	# int
0499    PREFETCHW [RAX + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
04a0    movq    RDI, RDX	# spill
04a3    addq    RDI, #16	# ptr
04a7    PREFETCHW [RAX + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
04ae    shrq    RCX, #3
04b2    addq    RCX, #-2	# long
04b6    xorq    rax, rax	# ClearArray:
	cmp     InitArrayShortSize,rcx
	jg      LARGE
	dec     rcx
	js      DONE	# Zero length
	mov     rax,(rdi,rcx,8)	# LOOP
	dec     rcx
	jge     LOOP
	jmp     DONE
	# LARGE:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
	# DONE

04d6    B54: #	out( B215 B55 ) <- in( B252 B53 )  Freq: 0.999932
04d6    
04d6    MEMBAR-storestore (empty encoding)
04d6    movq    RCX, RDX	# spill
04d9    # checkcastPP of RCX
04d9    movl    RDX, R11	# spill
04dc    # castII of RDX
        nop 	# 4 bytes pad for loops and calls
04e0    testl   RDX, RDX
04e2    jle     B215  P=0.111159 C=11587.000000

04e8    B55: #	out( B327 B56 ) <- in( B54 )  Freq: 0.888781
04e8    testl   RDX, RDX
04ea    je     B327  P=0.000001 C=-1.000000

04f0    B56: #	out( B326 B57 ) <- in( B55 )  Freq: 0.88878
04f0    movl    [rsp + #32], RDX	# spill
04f4    decl    RDX	# int
04f6    cmpl    RDX, [RSP + #32 (32-bit)]	# unsigned
        nop 	# 6 bytes pad for loops and calls
0500    jnb,u   B326  P=0.000001 C=-1.000000

0506    B57: #	out( B216 B58 ) <- in( B56 )  Freq: 0.888779
0506    testq   R10, #1	# long
050d    je     B216  P=0.125061 C=10299.000000

0513    B58: #	out( B59 ) <- in( B57 )  Freq: 0.777628
0513    movl    RDX, #1	# int

0518    B59: #	out( B328 B60 ) <- in( B216 B58 )  Freq: 0.888779
0518    movb    [RCX + #16 (8-bit)], RDX	# byte
051b    movl    R10, [rsp + #32]	# spill
0520    addl    R10, #-3	# int
0524    cmpl    R10, #1
0528    jle     B328  P=0.000001 C=-1.000000

052e    B60: #	out( B329 B61 ) <- in( B59 )  Freq: 0.888778
052e    movl    RDX, [rsp + #32]	# spill
0532    cmpl    RDX, #1	# unsigned
0535    jbe,u   B329  P=0.000001 C=-1.000000

053b    B61: #	out( B330 B62 ) <- in( B60 )  Freq: 0.888777
        nop 	# 5 bytes pad for loops and calls
0540    cmpl    RDX, #4	# unsigned
0543    jbe,u   B330  P=0.000001 C=-1.000000

0549    B62: #	out( B79 ) <- in( B61 )  Freq: 0.888776
0549    movl    [rsp + #36], R10	# spill
054e    movl    R10, #1	# int
0554    movl    RDX, #1	# int
0559    movl    [rsp + #40], RDX	# spill
        nop 	# 3 bytes pad for loops and calls
0560    jmp     B79
        nop 	# 11 bytes pad for loops and calls

0570    B63: #	out( B64 ) <- in( B72 ) top-of-loop Freq: 62.9333
0570    movl    R10, #1	# int

0576    B64: #	out( B77 B65 ) <- in( B73 B63 ) top-of-loop Freq: 71.9288
0576    sarq    RBP, #1
0579    movslq  R8, [RSP + #40 (32-bit)]	# int -> long
057e    movb    [RAX + #16 + R8], RDI	# byte
0583    movb    [RAX + #17 + R8], RDX	# byte
0588    movb    [RAX + #18 + R8], R11	# byte
058d    movb    [RAX + #19 + R8], R10	# byte
0592    sarq    RBP, #1
0595    movl    R10, [rsp + #40]	# spill
059a    addl    R10, #4	# int
        nop 	# 2 bytes pad for loops and calls
05a0    cmpl    R10, [RSP + #44 (32-bit)]
05a5    jge     B77	# loop end  P=0.111159 C=10299.000000

05ab    B65: #	out( B66 ) <- in( B64 )  Freq: 63.9332
05ab    movl    [rsp + #40], R10	# spill
05b0    movl    R11, RCX	# spill
05b3    movdl   R8, XMM0	# spill
05b8    movq    RCX, RAX	# spill
05bb    movdl   R10, XMM2	# spill

05c0    B66: #	out( B74 B67 ) <- in( B79 B65 ) Loop( B66-B65 inner main of N882 strip mined) Freq: 71.9288
05c0    testq   RBP, #1	# long
05c7    je     B74  P=0.125061 C=10299.000000

05cd    B67: #	out( B68 ) <- in( B66 )  Freq: 62.9333
05cd    movl    RDI, #1	# int

05d2    B68: #	out( B75 B69 ) <- in( B74 B67 )  Freq: 71.9288
05d2    movq    RDX, RBP	# spill
05d5    shrq    RDX, #1
        nop 	# 8 bytes pad for loops and calls
05e0    testq   RDX, #1	# long
05e7    je     B75  P=0.125061 C=10299.000000

05ed    B69: #	out( B70 ) <- in( B68 )  Freq: 62.9333
05ed    movl    RDX, #1	# int

05f2    B70: #	out( B76 B71 ) <- in( B75 B69 )  Freq: 71.9288
05f2    movdl   XMM2, R10	# spill
05f7    movq    RAX, RCX	# spill
05fa    movdl   XMM0, R8	# spill
05ff    movl    RCX, R11	# spill
0602    sarq    RBP, #1
0605    movq    R10, RBP	# spill
0608    shrq    R10, #1
060b    testq   R10, #1	# long
0612    je     B76  P=0.125061 C=10299.000000

0618    B71: #	out( B72 ) <- in( B70 )  Freq: 62.9333
0618    movl    R11, #1	# int

061e    B72: #	out( B63 B73 ) <- in( B76 B71 )  Freq: 71.9288
061e    sarq    RBP, #1
0621    movq    R10, RBP	# spill
0624    shrq    R10, #1
0627    testq   R10, #1	# long
062e    jne     B63  P=0.874939 C=10299.000000

0634    B73: #	out( B64 ) <- in( B72 )  Freq: 8.99546
0634    xorl    R10, R10	# int
0637    jmp     B64

063c    B74: #	out( B68 ) <- in( B66 )  Freq: 8.99546
063c    xorl    RDI, RDI	# int
        nop 	# 2 bytes pad for loops and calls
0640    jmp,s   B68

0642    B75: #	out( B70 ) <- in( B68 )  Freq: 8.99546
0642    xorl    RDX, RDX	# int
0644    jmp,s   B70

0646    B76: #	out( B72 ) <- in( B70 )  Freq: 8.99546
0646    xorl    R11, R11	# int
0649    jmp,s   B72

064b    B77: #	out( B80 B78 ) <- in( B64 )  Freq: 7.99553
064b    # TLS is in R15
064b    movq    R11, [R15 + #304 (32-bit)]	# ptr
0652    testl   rax, [R11]	# Safepoint: poll for GC        # jdk.incubator.vector.VectorMask::fromLong @ bci:135 (line 255) L[0]=_ L[1]=_ L[2]=_ L[3]=R9 L[4]=_ L[5]=RBP L[6]=_ L[7]=RAX L[8]=R10
        # App::micro_vector_masked @ bci:149 (line 51) L[0]=rsp + #24 L[1]=rsp + #56 L[2]=R14 L[3]=R13 L[4]=XMM0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {r9=Oop rax=Oop r13=Oop r14=Oop [24]=Oop [56]=Oop off=1618/0x652}
0655    cmpl    R10, [RSP + #36 (32-bit)]
065a    jge,s   B80  P=0.111159 C=10299.000000

065c    B78: #	out( B79 ) <- in( B77 )  Freq: 7.10676
065c    movl    [rsp + #40], R10	# spill
0661    movl    R11, RCX	# spill
0664    movdl   R8, XMM0	# spill
0669    movq    RCX, RAX	# spill
066c    movdl   R10, XMM2	# spill

0671    B79: #	out( B66 ) <- in( B62 B78 ) Loop( B79-B78 ) Freq: 7.99553
0671    movl    RDX, [rsp + #32]	# spill
0675    subl    RDX, [RSP + #40 (32-bit)]	# int
0679    addl    RDX, #-3	# int
067c    movdl   XMM0, RDX	# spill
0680    movl    RAX, [rsp + #36]	# spill
0684    xorl    RDX, RDX	# int
0686    movl    RDI, RDX	# spill
0688    cmpl    RAX, [RSP + #40 (32-bit)]
068c    movdl   RDX, XMM0	# spill
0690    cmovll RDX, RDI	# signed, int
0693    movl    RAX, RDX	# spill
0695    cmpl    RDX, #4000	# unsigned
069b    movl    RDX, #4000	# int
06a0    movl    RDI, RDX	# spill
06a2    movl    RDX, RAX	# spill
06a4    cmovlnbe RDX, RDI	# unsigned, int
06a7    addl    RDX, [RSP + #40 (32-bit)]	# int
06ab    movl    [rsp + #44], RDX	# spill
06af    jmp     B66

06b4    B80: #	out( B81 ) <- in( B77 )  Freq: 0.888776
06b4    movl    RDI, R10	# spill
06b7    movl    R11, RCX	# spill
06ba    movdl   R8, XMM0	# spill
06bf    movq    RCX, RAX	# spill
06c2    movdl   R10, XMM2	# spill
06c7    movl    RDX, RDI	# spill

06c9    B81: #	out( B87 B82 ) <- in( B328 B80 )  Freq: 0.888777
06c9    cmpl    RDX, [RSP + #32 (32-bit)]
06cd    jge,s   B87  P=0.500000 C=-1.000000

06cf    B82: #	out( B83 ) <- in( B81 )  Freq: 0.444389
06cf    # castII of RDX
06cf    movl    RAX, RDX	# spill
        nop 	# 3 bytes pad for loops and calls

06d4    B83: #	out( B217 B84 ) <- in( B82 B86 ) Loop( B83-B86 inner post of N2241) Freq: 0.888777
        nop 	# 12 bytes pad for loops and calls
06e0    testq   RBP, #1	# long
06e7    je     B217  P=0.125061 C=10299.000000

06ed    B84: #	out( B85 ) <- in( B83 )  Freq: 0.777626
06ed    movl    RDX, #1	# int

06f2    B85: #	out( B87 B86 ) <- in( B217 B84 )  Freq: 0.888777
06f2    movb    [RCX + #16 + RAX], RDX	# byte
06f6    movl    RDX, RAX	# spill
06f8    incl    RDX	# int
06fa    movl    RAX, RDX	# spill
        nop 	# 4 bytes pad for loops and calls
0700    cmpl    RDX, [RSP + #32 (32-bit)]
0704    jge,s   B87	# loop end  P=0.500000 C=10299.000000

0706    B86: #	out( B83 ) <- in( B85 )  Freq: 0.444389
0706    sarq    RBP, #1
0709    jmp,s   B83

070b    B87: #	out( B88 ) <- in( B85 B81 )  Freq: 0.888777
070b    movq    [rsp + #64], R14	# spill
0710    movq    [rsp + #40], R13	# spill
0715    movl    [rsp + #168], RBX	# spill
071c    movl    RAX, R11	# spill
071f    movl    [rsp + #172], RSI	# spill
0726    movl    [rsp + #72], R8	# spill
072b    movq    R8, RCX	# spill
072e    movl    [rsp + #176], R10	# spill

0736    B88: #	out( B456 B89 ) <- in( B87 B215 )  Freq: 0.999929
0736    movl    R10, [R9 + #48 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.maskType (constant)
073a    movq    R11, R9	# spill
073d    decode_heap_oop RSI,R10
0769    movq    RDX, java/lang/Class:exact *	# ptr
0773    movl    RCX, RAX	# spill
0775    movl    R9, #16	# long (unsigned 32-bit)
077b    movq    RDI, R8	# spill
077e    xorl    R10, R10	# int
0781    movl    [rsp + #0], R10	# spill
0785    movq    [rsp + #8], R11	# spill
078a    movq    R10, jdk/incubator/vector/VectorMask$$Lambda$53+0x00000008000aa6e0:exact *	# ptr
0794    movq    [rsp + #16], R10	# spill
        nop 	# 3 bytes pad for loops and calls
079c    call,static  jdk.internal.vm.vector.VectorSupport::load
        # jdk.incubator.vector.VectorMask::fromArray @ bci:46 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.VectorMask::fromValues @ bci:17 (line 183) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.VectorMask::fromLong @ bci:141 (line 259) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # App::micro_vector_masked @ bci:149 (line 51) L[0]=rsp + #24 L[1]=rsp + #56 L[2]=rsp + #64 L[3]=rsp + #40 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop off=1956/0x7a4}

07a4    B89: #	out( B407 B90 ) <- in( B88 )  Freq: 0.999909
        # Block is sole successor of call
07a4    movl    R10, [RAX + #8 (8-bit)]	# compressed klass ptr
07a8    NullCheck RAX

07a8    B90: #	out( B321 B91 ) <- in( B89 )  Freq: 0.999908
07a8    decode_and_move_klass_not_null R11,R10
07b5    movq    R10, [R11 + #80 (8-bit)]	# class
07b9    movq    R11, precise klass jdk/incubator/vector/VectorMask: 0x00007f0380291780:Constant:exact *	# ptr
07c3    cmpq    R10, R11	# ptr
07c6    jne,u   B321  P=0.000001 C=-1.000000

07cc    B91: #	out( B408 B92 ) <- in( B90 )  Freq: 0.999907
07cc    # checkcastPP of RAX
07cc    movq    R11, [rsp + #24]	# spill
07d1    movl    RDI, [R11 + #12 (8-bit)]	# compressed ptr ! Field: App.SPECIES
07d5    movl    R10, [R12 + RDI << 3 + #8] (compressed oop addressing)	# compressed klass ptr
07da    NullCheck RDI

07da    B92: #	out( B322 B93 ) <- in( B91 )  Freq: 0.999906
        nop 	# 6 bytes pad for loops and calls
07e0    cmpl    R10, narrowklass: precise klass jdk/incubator/vector/IntVector$IntSpecies: 0x00007f038028e830:Constant:exact *	# compressed klass ptr
07e7    jne,u   B322  P=0.000001 C=-1.000000

07ed    B93: #	out( B185 B94 ) <- in( B92 )  Freq: 0.999905
07ed    movl    R8, [RAX + #8 (8-bit)]	# compressed klass ptr
07f1    movl    [rsp + #32], R8	# spill
07f6    movq    [rsp + #80], RAX	# spill
07fb    decode_heap_oop_not_null R9,RDI
07ff    # checkcastPP of R9
07ff    movl    R8, [R9 + #44 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.vectorType (constant)
0803    movl    R11, [R9 + #28 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.vectorBitSize (constant)
0807    movq    [rsp + #88], R9	# spill
080c    movslq  R9, [RSP + #72 (32-bit)]	# int -> long
0811    movq    [rsp + #48], R9	# spill
0816    movl    RCX, R11	# spill
0819    addl    RCX, #-64	# int
081c    movl    R9, [rsp + #32]	# spill
0821    decode_and_move_klass_not_null RBX,R9
082e    movq    R9, [RBX + #88 (8-bit)]	# class
0832    movq    [rsp + #96], R9	# spill
0837    movl    RBX, [rsp + #72]	# spill
083b    testl   RBX, RBX
        nop 	# 3 bytes pad for loops and calls
0840    jl     B185  P=0.500000 C=-1.000000

0846    B94: #	out( B409 B95 ) <- in( B93 )  Freq: 0.499952
0846    movq    R9, [rsp + #64]	# spill
084b    movl    RBP, [R9 + #12 (8-bit)]	# range
084f    NullCheck R9

084f    B95: #	out( B345 B96 ) <- in( B94 )  Freq: 0.499952
084f    decode_and_move_klass_not_null R9,R10
085c    movq    R10, [R9 + #72 (8-bit)]	# class
0860    movq    R9, precise klass jdk/incubator/vector/AbstractSpecies: 0x00007f03fc5f8d60:Constant:exact *	# ptr
086a    cmpq    R10, R9	# ptr
086d    jne,u   B345  P=0.000001 C=-1.000000

0873    B96: #	out( B186 B97 ) <- in( B95 )  Freq: 0.499951
0873    movq    R10, [rsp + #88]	# spill
0878    movl    R10, [R10 + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
087c    subl    RBP, R10	# int
        nop 	# 1 bytes pad for loops and calls
0880    cmpl    RBX, RBP
0882    jg     B186  P=0.500000 C=-1.000000

0888    B97: #	out( B348 B98 ) <- in( B96 )  Freq: 0.249976
0888    cmpl    R8, narrowoop: java/lang/Class:exact *	# compressed ptr
088f    je,u   B348  P=0.000001 C=-1.000000

0895    B98: #	out( B349 B99 ) <- in( B97 )  Freq: 0.249975
        nop 	# 11 bytes pad for loops and calls
08a0    cmpl    RCX, #449	# unsigned
08a6    jnb,u   B349  P=0.000001 C=2147483136.000000

08ac    B99: #	out( B183 B100 ) <- in( B98 )  Freq: 0.249975
08ac    cmpl    R11, #257
08b3    jge     B183  P=0.570156 C=256.000000

08b9    B100: #	out( B104 B101 ) <- in( B99 )  Freq: 0.10745
        nop 	# 7 bytes pad for loops and calls
08c0    cmpl    R11, #129
08c7    jge     B104  P=0.663212 C=128.000000

08cd    B101: #	out( B364 B102 ) <- in( B100 )  Freq: 0.0361879
08cd    cmpl    R11, #65
08d1    jl     B364  P=0.000001 C=64.000000

08d7    B102: #	out( B349 B103 ) <- in( B101 )  Freq: 0.0361879
08d7    cmpl    R11, #127
        nop 	# 5 bytes pad for loops and calls
08e0    jle     B349  P=0.000001 C=1.000000

08e6    B103: #	out( N5788 ) <- in( B102 )  Freq: 0.0361879
08e6    movl    RSI, #-83	# int
08eb    movq    RBP, [rsp + #24]	# spill
08f0    movq    R10, [rsp + #56]	# spill
08f5    movq    [rsp + #24], R10	# spill
08fa    movq    R10, [rsp + #40]	# spill
08ff    movq    [rsp + #32], R10	# spill
0904    movq    R10, [rsp + #64]	# spill
0909    movq    [rsp + #48], R10	# spill
090e    movq    [rsp + #64], RAX	# spill
        nop 	# 1 bytes pad for loops and calls
0914    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::zero @ bci:64 (line 3652) L[0]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:25 (line 2722) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #64
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop [80]=Oop off=2332/0x91c}
091c    stop	# ShouldNotReachHere

0930    B104: #	out( B349 B105 ) <- in( B100 )  Freq: 0.0712624
0930    cmpl    R11, #255
0937    jle     B349  P=0.000001 C=1.000000

093d    B105: #	out( B358 B106 ) <- in( B104 )  Freq: 0.0712623
093d    movl    R11, [rsp + #32]	# spill
0942    cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector$Int256Mask: 0x00007f03fc6e78f0:Constant:exact *	# compressed klass ptr
0949    jne,u   B358  P=0.000001 C=-1.000000

094f    B106: #	out( B301 B107 ) <- in( B105 )  Freq: 0.0712623
094f    movq    RBP, RAX	# spill
0952    # checkcastPP of RBP
0952    movq    R10, [rsp + #64]	# spill
0957    movq    R11, [rsp + #48]	# spill
095c    load_vector XMM3,[R10 + #16 + R11 << #2]
0963    # TLS is in R15
0963    movq    R10, [R15 + #328 (32-bit)]	# ptr
096a    movq    R11, R10	# spill
096d    addq    R11, #48	# ptr
0971    # TLS is in R15
0971    cmpq    R11, [R15 + #344 (32-bit)]	# raw ptr
0978    jnb,u   B301  P=0.000100 C=-1.000000

097e    B107: #	out( B108 ) <- in( B106 )  Freq: 0.0712551
097e    # TLS is in R15
097e    movq    [R15 + #328 (32-bit)], R11	# ptr
0985    PREFETCHW [R11 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
098d    movq    [R10], #1	# long
0994    PREFETCHW [R11 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
099c    movl    [R10 + #8 (8-bit)], narrowklass: precise klass [I: 0x00007f03fc45aa50:Constant:exact *	# compressed klass ptr
09a4    PREFETCHW [R11 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
09ac    movl    [R10 + #12 (8-bit)], #8	# int
09b4    PREFETCHW [R11 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
09bc    movq    [R10 + #16 (8-bit)], R12	# long (R12_heapbase==0)
09c0    movq    [R10 + #24 (8-bit)], R12	# long (R12_heapbase==0)
09c4    movq    [R10 + #32 (8-bit)], R12	# long (R12_heapbase==0)
09c8    movq    [R10 + #40 (8-bit)], R12	# long (R12_heapbase==0)

09cc    B108: #	out( B303 B109 ) <- in( B302 B107 )  Freq: 0.0712623
09cc    
09cc    MEMBAR-storestore (empty encoding)
09cc    # checkcastPP of R10
09cc    movq    [rsp + #64], R10	# spill
09d1    movl    R10, [RBP + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
09d5    # TLS is in R15
09d5    movq    RAX, [R15 + #328 (32-bit)]	# ptr
09dc    load_vector XMM0,[R12 + R10 << 3 + #16] (compressed oop addressing)
09e3    movq    R10, RAX	# spill
09e6    addq    R10, #16	# ptr
09ea    movq    R11, int[int:8]<ciTypeArray length=8 type=<ciTypeArrayKlass name=[I ident=1229 address=0x00007f03fc45aa50> ident=1570 address=0x00007f036c376050> *	# ptr
09f4    load_vector XMM1,[R11 + #16 (8-bit)]
09fa    vector_loadmask_byte XMM2,XMM0
	
0a07    vector_blend  XMM0,XMM1,XMM3,XMM2	!
0a0d    movq    R11, [rsp + #64]	# spill
0a12    store_vector [R11 + #16 (8-bit)],XMM0
	
0a18    # TLS is in R15
        nop 	# 8 bytes pad for loops and calls
0a20    cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
0a27    jnb,u   B303  P=0.000100 C=-1.000000

0a2d    B109: #	out( B110 ) <- in( B108 )  Freq: 0.0712551
0a2d    # TLS is in R15
0a2d    movq    [R15 + #328 (32-bit)], R10	# ptr
0a34    PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0a3c    movq    [RAX], #1	# long
0a43    movl    [RAX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007f036c330ed0:Constant:exact *	# compressed klass ptr

0a4a    B110: #	out( B115 ) <- in( B304 B109 )  Freq: 0.0712623
0a4a    movq    R10, [rsp + #64]	# spill
0a4f    encode_heap_oop_not_null R11,R10
0a98    movl    [RAX + #12 (8-bit)], R11	# compressed ptr
0a9c    
0a9c    MEMBAR-storestore (empty encoding)
0a9c    # checkcastPP of RAX
0a9c    movq    [rsp + #160], RAX	# spill
0aa4    jmp     B115

0aa9    B111: #	out( B309 B112 ) <- in( B207 )  Freq: 0.0213774
0aa9    # TLS is in R15
0aa9    movq    RCX, [R15 + #328 (32-bit)]	# ptr
0ab0    movq    R10, RCX	# spill
0ab3    addq    R10, #24	# ptr
0ab7    # TLS is in R15
        nop 	# 9 bytes pad for loops and calls
0ac0    cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
0ac7    jnb,u   B309  P=0.000100 C=-1.000000

0acd    B112: #	out( B113 ) <- in( B111 )  Freq: 0.0213752
0acd    # TLS is in R15
0acd    movq    [R15 + #328 (32-bit)], R10	# ptr
0ad4    PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0adc    movq    [RCX], #1	# long
0ae3    movl    [RCX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58: 0x00007f038026a490:Constant:exact *	# compressed klass ptr
0aea    movl    [RCX + #12 (8-bit)], R12	# int (R12_heapbase==0)
0aee    movl    [RCX + #20 (8-bit)], R12	# int (R12_heapbase==0)

0af2    B113: #	out( B442 B114 ) <- in( B310 B112 )  Freq: 0.0213774
0af2    movq    R10, [rsp + #64]	# spill
0af7    encode_heap_oop_not_null R11,R10
0b40    movl    [RCX + #16 (8-bit)], R11	# compressed ptr
0b44    
0b44    # checkcastPP of RCX
0b44    movl    R10, [rsp + #72]	# spill
0b49    movl    [RCX + #12 (8-bit)], R10	# int ! Field: jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58.arg$2 (constant)
0b4d    MEMBAR-release ! (empty encoding)
0b4d    # checkcastPP of RCX
0b4d    movq    RSI, [rsp + #88]	# spill
0b52    movq    RDX, [rsp + #80]	# spill
        nop 	# 1 bytes pad for loops and calls
0b58    call,static  jdk.incubator.vector.IntVector$IntSpecies::vOp
        # jdk.incubator.vector.IntVector::fromArray @ bci:64 (line 2728) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=rsp + #24 L[1]=rsp + #56 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {[24]=Oop [40]=Oop [56]=Oop [80]=Oop off=2912/0xb60}

0b60    B114: #	out( B115 ) <- in( B113 )  Freq: 0.0213769
        # Block is sole successor of call
0b60    movq    [rsp + #160], RAX	# spill

0b68    B115: #	out( B411 B116 ) <- in( B110 B114 )  Freq: 0.0926392
0b68    movq    R10, [rsp + #24]	# spill
0b6d    movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: App.SPECIES
0b71    movl    R11, [R12 + R10 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0b76    NullCheck R10

0b76    B116: #	out( B357 B117 ) <- in( B115 )  Freq: 0.0926391
        nop 	# 10 bytes pad for loops and calls
0b80    cmpl    R11, narrowklass: precise klass jdk/incubator/vector/IntVector$IntSpecies: 0x00007f038028e830:Constant:exact *	# compressed klass ptr
0b87    jne,u   B357  P=0.000001 C=-1.000000

0b8d    B117: #	out( B153 B118 ) <- in( B116 )  Freq: 0.092639
0b8d    movl    R8, R10	# spill
0b90    decode_heap_oop_not_null R10,R10
0b94    # checkcastPP of R10
0b94    movq    [rsp + #64], R10	# spill
0b99    movl    R9, [R10 + #44 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.vectorType (constant)
0b9d    movl    RBX, [R10 + #28 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.vectorBitSize (constant)
0ba1    movl    RCX, RBX	# spill
0ba3    addl    RCX, #-64	# int
0ba6    movl    R10, [rsp + #72]	# spill
0bab    testl   R10, R10
0bae    jl     B153  P=0.500000 C=-1.000000

0bb4    B118: #	out( B412 B119 ) <- in( B117 )  Freq: 0.0463195
0bb4    movq    R10, [rsp + #40]	# spill
        nop 	# 7 bytes pad for loops and calls
0bc0    movl    RBP, [R10 + #12 (8-bit)]	# range
0bc4    NullCheck R10

0bc4    B119: #	out( B363 B120 ) <- in( B118 )  Freq: 0.0463195
0bc4    decode_and_move_klass_not_null R10,R11
0bd1    movq    R10, [R10 + #72 (8-bit)]	# class
0bd5    movq    R11, precise klass jdk/incubator/vector/AbstractSpecies: 0x00007f03fc5f8d60:Constant:exact *	# ptr
        nop 	# 1 bytes pad for loops and calls
0be0    cmpq    R10, R11	# ptr
0be3    jne,u   B363  P=0.000001 C=-1.000000

0be9    B120: #	out( B152 B121 ) <- in( B119 )  Freq: 0.0463194
0be9    movq    R10, [rsp + #64]	# spill
0bee    movl    R11, [R10 + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
0bf2    subl    RBP, R11	# int
0bf5    movl    R11, [rsp + #72]	# spill
        nop 	# 6 bytes pad for loops and calls
0c00    cmpl    R11, RBP
0c03    jg     B152  P=0.500000 C=-1.000000

0c09    B121: #	out( B369 B122 ) <- in( B120 )  Freq: 0.0231597
0c09    cmpl    R9, narrowoop: java/lang/Class:exact *	# compressed ptr
0c10    je,u   B369  P=0.000001 C=-1.000000

0c16    B122: #	out( B370 B123 ) <- in( B121 )  Freq: 0.0231597
        nop 	# 10 bytes pad for loops and calls
0c20    cmpl    RCX, #449	# unsigned
0c26    jnb,u   B370  P=0.000001 C=2147483136.000000

0c2c    B123: #	out( B150 B124 ) <- in( B122 )  Freq: 0.0231597
0c2c    cmpl    RBX, #257
0c32    jge     B150  P=0.570156 C=256.000000

0c38    B124: #	out( B128 B125 ) <- in( B123 )  Freq: 0.00995504
        nop 	# 8 bytes pad for loops and calls
0c40    cmpl    RBX, #129
0c46    jge,s   B128  P=0.663212 C=128.000000

0c48    B125: #	out( B381 B126 ) <- in( B124 )  Freq: 0.00335273
0c48    cmpl    RBX, #65
0c4b    jl     B381  P=0.000001 C=64.000000

0c51    B126: #	out( B370 B127 ) <- in( B125 )  Freq: 0.00335273
0c51    cmpl    RBX, #127
0c54    jle     B370  P=0.000001 C=1.000000

0c5a    B127: #	out( N5788 ) <- in( B126 )  Freq: 0.00335273
0c5a    movl    RSI, #-83	# int
0c5f    movq    RBP, [rsp + #56]	# spill
0c64    movq    R10, [rsp + #40]	# spill
0c69    movq    [rsp + #32], R10	# spill
0c6e    movq    R10, [rsp + #80]	# spill
0c73    movq    [rsp + #56], R10	# spill
0c78    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::zero @ bci:64 (line 3652) L[0]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:25 (line 2722) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #56
        # OopMap {rbp=Oop [32]=Oop [56]=Oop [80]=Oop [160]=Oop off=3200/0xc80}
0c80    stop	# ShouldNotReachHere

0c94    B128: #	out( B370 B129 ) <- in( B124 )  Freq: 0.00660231
        nop 	# 12 bytes pad for loops and calls
0ca0    cmpl    RBX, #255
0ca6    jle     B370  P=0.000001 C=1.000000

0cac    B129: #	out( B380 B130 ) <- in( B128 )  Freq: 0.0066023
0cac    movl    R10, [rsp + #32]	# spill
0cb1    cmpl    R10, narrowklass: precise klass jdk/incubator/vector/Int256Vector$Int256Mask: 0x00007f03fc6e78f0:Constant:exact *	# compressed klass ptr
0cb8    jne,u   B380  P=0.000001 C=-1.000000

0cbe    B130: #	out( B339 B131 ) <- in( B129 )  Freq: 0.00660229
0cbe    movq    RBP, [rsp + #80]	# spill
0cc3    # checkcastPP of RBP
0cc3    movq    R10, [rsp + #40]	# spill
0cc8    movq    R11, [rsp + #48]	# spill
0ccd    load_vector XMM3,[R10 + #16 + R11 << #2]
0cd4    # TLS is in R15
0cd4    movq    R10, [R15 + #328 (32-bit)]	# ptr
0cdb    movq    R11, R10	# spill
0cde    addq    R11, #48	# ptr
0ce2    # TLS is in R15
0ce2    cmpq    R11, [R15 + #344 (32-bit)]	# raw ptr
0ce9    jnb,u   B339  P=0.000100 C=-1.000000

0cef    B131: #	out( B132 ) <- in( B130 )  Freq: 0.00660163
0cef    # TLS is in R15
0cef    movq    [R15 + #328 (32-bit)], R11	# ptr
0cf6    PREFETCHW [R11 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0cfe    movq    [R10], #1	# long
0d05    PREFETCHW [R11 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0d0d    movl    [R10 + #8 (8-bit)], narrowklass: precise klass [I: 0x00007f03fc45aa50:Constant:exact *	# compressed klass ptr
0d15    PREFETCHW [R11 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0d1d    movl    [R10 + #12 (8-bit)], #8	# int
0d25    PREFETCHW [R11 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0d2d    movq    [R10 + #16 (8-bit)], R12	# long (R12_heapbase==0)
0d31    movq    [R10 + #24 (8-bit)], R12	# long (R12_heapbase==0)
0d35    movq    [R10 + #32 (8-bit)], R12	# long (R12_heapbase==0)
0d39    movq    [R10 + #40 (8-bit)], R12	# long (R12_heapbase==0)

0d3d    B132: #	out( B341 B133 ) <- in( B340 B131 )  Freq: 0.00660229
0d3d    
0d3d    MEMBAR-storestore (empty encoding)
0d3d    # checkcastPP of R10
0d3d    movq    [rsp + #24], R10	# spill
0d42    movl    R8, [RBP + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0d46    # TLS is in R15
0d46    movq    R10, [R15 + #328 (32-bit)]	# ptr
0d4d    load_vector XMM0,[R12 + R8 << 3 + #16] (compressed oop addressing)
0d54    movq    R11, R10	# spill
0d57    addq    R11, #16	# ptr
0d5b    movq    R8, int[int:8]<ciTypeArray length=8 type=<ciTypeArrayKlass name=[I ident=1229 address=0x00007f03fc45aa50> ident=1570 address=0x00007f036c376050> *	# ptr
0d65    load_vector XMM1,[R8 + #16 (8-bit)]
0d6b    vector_loadmask_byte XMM2,XMM0
	
0d78    vector_blend  XMM0,XMM1,XMM3,XMM2	!
0d7e    movq    R8, [rsp + #24]	# spill
0d83    store_vector [R8 + #16 (8-bit)],XMM0
	
0d89    # TLS is in R15
0d89    cmpq    R11, [R15 + #344 (32-bit)]	# raw ptr
0d90    jnb,u   B341  P=0.000100 C=-1.000000

0d96    B133: #	out( B134 ) <- in( B132 )  Freq: 0.00660163
0d96    # TLS is in R15
0d96    movq    [R15 + #328 (32-bit)], R11	# ptr
0d9d    PREFETCHW [R11 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0da5    movq    R11, R10	# spill
0da8    movq    [R11], #1	# long
0daf    movl    [R11 + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007f036c330ed0:Constant:exact *	# compressed klass ptr

0db7    B134: #	out( B139 ) <- in( B342 B133 )  Freq: 0.00660229
0db7    movq    R10, [rsp + #24]	# spill
0dbc    encode_heap_oop_not_null R10,R10
0e02    movl    [R11 + #12 (8-bit)], R10	# compressed ptr
0e06    
0e06    MEMBAR-storestore (empty encoding)
0e06    # checkcastPP of R11
0e06    jmp     B139

0e0b    B135: #	out( B351 B136 ) <- in( B175 )  Freq: 0.00198057
0e0b    # TLS is in R15
0e0b    movq    RCX, [R15 + #328 (32-bit)]	# ptr
0e12    movq    R10, RCX	# spill
0e15    addq    R10, #24	# ptr
0e19    # TLS is in R15
        nop 	# 7 bytes pad for loops and calls
0e20    cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
0e27    jnb,u   B351  P=0.000100 C=-1.000000

0e2d    B136: #	out( B137 ) <- in( B135 )  Freq: 0.00198037
0e2d    # TLS is in R15
0e2d    movq    [R15 + #328 (32-bit)], R10	# ptr
0e34    PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0e3c    movq    [RCX], #1	# long
0e43    movl    [RCX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58: 0x00007f038026a490:Constant:exact *	# compressed klass ptr
0e4a    movl    [RCX + #12 (8-bit)], R12	# int (R12_heapbase==0)
0e4e    movl    [RCX + #20 (8-bit)], R12	# int (R12_heapbase==0)

0e52    B137: #	out( B435 B138 ) <- in( B352 B136 )  Freq: 0.00198057
0e52    movq    R10, [rsp + #40]	# spill
0e57    encode_heap_oop_not_null R11,R10
0ea0    movl    [RCX + #16 (8-bit)], R11	# compressed ptr
0ea4    
0ea4    # checkcastPP of RCX
0ea4    movl    R10, [rsp + #72]	# spill
0ea9    movl    [RCX + #12 (8-bit)], R10	# int ! Field: jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58.arg$2 (constant)
0ead    MEMBAR-release ! (empty encoding)
0ead    # checkcastPP of RCX
0ead    movq    RSI, [rsp + #64]	# spill
0eb2    movq    RDX, [rsp + #80]	# spill
        nop 	# 1 bytes pad for loops and calls
0eb8    call,static  jdk.incubator.vector.IntVector$IntSpecies::vOp
        # jdk.incubator.vector.IntVector::fromArray @ bci:64 (line 2728) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #56 L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {[56]=Oop [80]=Oop [160]=Oop off=3776/0xec0}

0ec0    B138: #	out( B139 ) <- in( B137 )  Freq: 0.00198053
        # Block is sole successor of call
0ec0    movq    R11, RAX	# spill

0ec3    B139: #	out( B376 B140 ) <- in( B134 B138 )  Freq: 0.00858282
0ec3    movq    R8, [rsp + #160]	# spill
0ecb    testq   R8, R8	# ptr
0ece    je     B376  P=0.000001 C=-1.000000

0ed4    B140: #	out( B437 B141 ) <- in( B139 )  Freq: 0.00858281
0ed4    movq    RDX, jdk/incubator/vector/VectorOperators$AssociativeImpl:exact *	# ptr
0ede    movq    RSI, [rsp + #160]	# spill
0ee6    movq    RCX, R11	# spill
0ee9    movq    R10, [rsp + #80]	# spill
0eee    movq    [rsp + #64], R10	# spill
        nop 	# 3 bytes pad for loops and calls
0ef6    movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.IntVector::lanewise
        # jdk.incubator.vector.IntVector::lanewise @ bci:70 (line 688) L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #80 L[4]=_ L[5]=_ STK[0]=rsp + #160
        # jdk.incubator.vector.IntVector::add @ bci:6 (line 1133) L[0]=_ L[1]=_ L[2]=_
        # App::micro_vector_masked @ bci:188 (line 54) L[0]=_ L[1]=rsp + #56 L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #64
        # OopMap {[56]=Oop [64]=Oop [80]=Oop [160]=Oop off=3848/0xf08}

0f08    B141: #	out( B436 B142 ) <- in( B140 )  Freq: 0.00858264
        # Block is sole successor of call
0f08    movq    RSI, [rsp + #160]	# spill
0f10    movq    RDX, RAX	# spill
0f13    movq    RCX, [rsp + #64]	# spill
        nop 	# 2 bytes pad for loops and calls
0f1a    movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.IntVector::blend
        # jdk.incubator.vector.IntVector::lanewise @ bci:74 (line 688) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector::add @ bci:6 (line 1133) L[0]=_ L[1]=_ L[2]=_
        # App::micro_vector_masked @ bci:188 (line 54) L[0]=_ L[1]=rsp + #56 L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #64
        # OopMap {[56]=Oop [64]=Oop [80]=Oop off=3884/0xf2c}

0f2c    B142: #	out( B414 B143 ) <- in( B141 )  Freq: 0.00858247
        # Block is sole successor of call
0f2c    movl    RBP, [RAX + #8 (8-bit)]	# compressed klass ptr
0f2f    NullCheck RAX

0f2f    B143: #	out( B438 B144 ) <- in( B142 )  Freq: 0.00858246
0f2f    movq    [rsp + #40], RAX	# spill
0f34    movq    RSI, [rsp + #64]	# spill
        nop 	# 1 bytes pad for loops and calls
0f3a    movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.VectorMask::allTrue
        # jdk.incubator.vector.IntVector::intoArray @ bci:1 (line 3000) L[0]=rsp + #40 L[1]=rsp + #56 L[2]=rsp + #72 L[3]=rsp + #64 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop off=3916/0xf4c}

0f4c    B144: #	out( B218 B145 ) <- in( B143 )  Freq: 0.00858229
        # Block is sole successor of call
0f4c    testl   RAX, RAX
0f4e    je     B218  P=0.100000 C=-1.000000

0f54    B145: #	out( B378 B146 ) <- in( B144 )  Freq: 0.00772406
        nop 	# 12 bytes pad for loops and calls
0f60    cmpl    RBP, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007f036c330ed0:Constant:exact *	# compressed klass ptr
0f66    jne,u   B378  P=0.000001 C=-1.000000

0f6c    B146: #	out( B379 B147 ) <- in( B145 )  Freq: 0.00772405
0f6c    movq    R10, [rsp + #40]	# spill
0f71    movq    R8, R10	# spill
0f74    # checkcastPP of R8
0f74    movl    R11, [rsp + #172]	# spill
        nop 	# 4 bytes pad for loops and calls
0f80    testl   R11, R11
0f83    jl     B379  P=0.000001 C=-1.000000

0f89    B147: #	out( B377 B148 ) <- in( B146 )  Freq: 0.00772404
0f89    # castII of R11
0f89    movl    R9, [rsp + #72]	# spill
0f8e    cmpl    R9, R11	# unsigned
0f91    jnb,u   B377  P=0.000001 C=-1.000000

0f97    B148: #	out( B149 ) <- in( B147 )  Freq: 0.00772403
0f97    movl    R11, [R8 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0f9b    load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
0fa2    movl    R10, [rsp + #72]	# spill
0fa7    # castII of R10
0fa7    movq    R11, [rsp + #56]	# spill
0fac    store_vector [R11 + #16 + R10 << #2],XMM0
	

0fb3    B149: #	out( N5788 ) <- in( B296 B291 B259 B148 )  Freq: 0.0077485
0fb3    vzeroupper
	addq    rsp, 208	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

0fcb    ret

0fcc    B150: #	out( B370 B151 ) <- in( B123 )  Freq: 0.0132046
0fcc    cmpl    RBX, #511
0fd2    jle     B370  P=0.000001 C=1.000000

0fd8    B151: #	out( N5788 ) <- in( B150 )  Freq: 0.0132046
0fd8    movl    RSI, #-83	# int
0fdd    movq    RBP, [rsp + #56]	# spill
0fe2    movq    R10, [rsp + #40]	# spill
0fe7    movq    [rsp + #32], R10	# spill
0fec    movq    R10, [rsp + #80]	# spill
0ff1    movq    [rsp + #56], R10	# spill
        nop 	# 2 bytes pad for loops and calls
0ff8    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::zero @ bci:72 (line 3654) L[0]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:25 (line 2722) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #56
        # OopMap {rbp=Oop [32]=Oop [56]=Oop [80]=Oop [160]=Oop off=4096/0x1000}
1000    stop	# ShouldNotReachHere

1014    B152: #	out( B154 ) <- in( B120 )  Freq: 0.0231597
1014    movq    R8, [rsp + #40]	# spill
1019    jmp,s   B154

101b    B153: #	out( B362 B154 ) <- in( B117 )  Freq: 0.0463195
101b    movq    R8, [rsp + #40]	# spill
1020    testq   R8, R8	# ptr
1023    je     B362  P=0.000001 C=-1.000000

1029    B154: #	out( B361 B155 ) <- in( B152 B153 )  Freq: 0.0694792
1029    movq    RDI, [rsp + #96]	# spill
102e    movq    R10, precise klass jdk/incubator/vector/AbstractMask: 0x00007f03fc6eafd0:Constant:exact *	# ptr
1038    cmpq    RDI, R10	# ptr
        nop 	# 5 bytes pad for loops and calls
1040    jne,u   B361  P=0.000001 C=-1.000000

1046    B155: #	out( B359 B156 ) <- in( B154 )  Freq: 0.0694791
1046    movq    R10, [rsp + #80]	# spill
104b    # checkcastPP of R10
104b    movl    R11, [R8 + #12 (8-bit)]	# range
104f    cmpl    R9, narrowoop: java/lang/Class:exact *	# compressed ptr
1056    je,u   B359  P=0.000001 C=-1.000000

105c    B156: #	out( B360 B157 ) <- in( B155 )  Freq: 0.069479
        nop 	# 4 bytes pad for loops and calls
1060    cmpl    RCX, #449	# unsigned
1066    jnb,u   B360  P=0.000001 C=2147483136.000000

106c    B157: #	out( B181 B158 ) <- in( B156 )  Freq: 0.0694789
106c    cmpl    RBX, #257
1072    jge     B181  P=0.570156 C=256.000000

1078    B158: #	out( B162 B159 ) <- in( B157 )  Freq: 0.0298651
        nop 	# 8 bytes pad for loops and calls
1080    cmpl    RBX, #129
1086    jge     B162  P=0.663212 C=128.000000

108c    B159: #	out( B374 B160 ) <- in( B158 )  Freq: 0.0100582
108c    cmpl    RBX, #65
108f    jl     B374  P=0.000001 C=64.000000

1095    B160: #	out( B360 B161 ) <- in( B159 )  Freq: 0.0100582
1095    cmpl    RBX, #127
1098    jle     B360  P=0.000001 C=1.000000

109e    B161: #	out( N5788 ) <- in( B160 )  Freq: 0.0100582
109e    movl    RSI, #-83	# int
10a3    movq    RBP, [rsp + #56]	# spill
10a8    movl    R9, [rsp + #72]	# spill
10ad    movq    [rsp + #32], R8	# spill
10b2    movl    [rsp + #28], R9	# spill
10b7    movl    [rsp + #40], R9	# spill
10bc    movq    R8, [rsp + #80]	# spill
10c1    movq    [rsp + #72], R8	# spill
10c6    movq    [rsp + #80], R10	# spill
10cb    movl    [rsp + #44], R11	# spill
10d0    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:64 (line 3666) L[0]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #80 STK[1]=rsp + #28 STK[2]=rsp + #44
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #72 L[4]=rsp + #64 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #28 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #72
        # OopMap {rbp=Oop [32]=Oop [64]=Oop [72]=Oop [80]=Oop [160]=Oop off=4312/0x10d8}
10d8    stop	# ShouldNotReachHere

10ec    B162: #	out( B360 B163 ) <- in( B158 )  Freq: 0.0198069
10ec    cmpl    RBX, #255
10f2    jle     B360  P=0.000001 C=1.000000

10f8    B163: #	out( B443 B164 ) <- in( B162 )  Freq: 0.0198069
10f8    movl    [rsp + #76], R11	# spill
10fd    movq    [rsp + #88], R10	# spill
1102    movq    [rsp + #40], R8	# spill
1107    movq    RSI, R10	# spill
110a    movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.AbstractMask::vspecies
        # jdk.incubator.vector.AbstractMask::vectorSpecies @ bci:1 (line 61) L[0]=_
        # jdk.incubator.vector.VectorMask::length @ bci:1 (line 154) L[0]=_ L[1]=_
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:8 (line 220) L[0]=rsp + #88 L[1]=rsp + #72 L[2]=rsp + #76 L[3]=#Ptr0x00007f03801c5c30 L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #40 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #64 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #56 L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop off=4380/0x111c}

111c    B164: #	out( B413 B165 ) <- in( B163 )  Freq: 0.0198065
        # Block is sole successor of call
111c    movq    R8, RAX	# spill
111f    # checkcastPP of R8
        nop 	# 1 bytes pad for loops and calls
1120    movl    R10, [R8 + #8 (8-bit)]	# compressed klass ptr
1124    NullCheck R8

1124    B165: #	out( B371 B166 ) <- in( B164 )  Freq: 0.0198065
1124    decode_and_move_klass_not_null R11,R10
1131    movq    R10, [R11 + #72 (8-bit)]	# class
1135    movq    R11, precise klass jdk/incubator/vector/AbstractSpecies: 0x00007f03fc5f8d60:Constant:exact *	# ptr
        nop 	# 1 bytes pad for loops and calls
1140    cmpq    R10, R11	# ptr
1143    jne,u   B371  P=0.000001 C=-1.000000

1149    B166: #	out( B169 B167 ) <- in( B165 )  Freq: 0.0198065
1149    # checkcastPP of R8
1149    movq    R10, int[int:8]<ciTypeArray length=8 type=<ciTypeArrayKlass name=[I ident=1229 address=0x00007f03fc45aa50> ident=1569 address=0x00007f036c375d40> *	# ptr
1153    load_vector XMM0,[R10 + #16 (8-bit)]
1159    movl    R9, [R8 + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
115d    movl    R11, [rsp + #76]	# spill
1162    subl    R11, [RSP + #72 (32-bit)]	# int
1167    cmpl    R11, R9
116a    movl    R8, R9	# spill
116d    cmovll R8, R11	# signed, int
1171    xorl    R11, R11	# int
1174    testl   R8, R8
1177    cmovlle R8, R11	# signed, int
117b    replicateI XMM1,R8
1185    vector_compare XMM2,XMM0,XMM1,#7	! using R10 as TEMP
1191    movl    RCX, [rsp + #72]	# spill
1195    testl   RCX, RCX
1197    jge,s   B169  P=0.500000 C=-1.000000

1199    B167: #	out( B375 B168 ) <- in( B166 )  Freq: 0.00990323
1199    movl    R10, [rsp + #72]	# spill
119e    movl    R11, R9	# spill
11a1    negl    R11	# int
11a4    cmpl    R10, R11
11a7    movl    RBX, [rsp + #72]	# spill
11ab    cmovll RBX, R11	# signed, int
11af    negl    RBX	# int
11b1    replicateI XMM1,RBX
11ba    vector_compare XMM0,XMM0,XMM1,#3	! using R11 as TEMP
        nop 	# 2 bytes pad for loops and calls
11c0    cmpl    R8, R9
11c3    jl     B375  P=0.000001 C=-1.000000

11c9    B168: #	out( B169 ) <- in( B167 )  Freq: 0.00990322
11c9    vmovdqu XMM2,XMM0	# spill

11cd    B169: #	out( B311 B170 ) <- in( B166 B168 )  Freq: 0.0198064
11cd    # TLS is in R15
11cd    movq    R11, [R15 + #328 (32-bit)]	# ptr
11d4    movq    R10, R11	# spill
11d7    addq    R10, #24	# ptr
11db    # TLS is in R15
        nop 	# 5 bytes pad for loops and calls
11e0    cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
11e7    jnb,u   B311  P=0.000100 C=-1.000000

11ed    B170: #	out( B171 ) <- in( B169 )  Freq: 0.0198045
11ed    # TLS is in R15
11ed    movq    [R15 + #328 (32-bit)], R10	# ptr
11f4    PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
11fc    movq    [R11], #1	# long
1203    PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
120b    movl    [R11 + #8 (8-bit)], narrowklass: precise klass [Z: 0x00007f03fc45a840:Constant:exact *	# compressed klass ptr
1213    PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
121b    movl    [R11 + #12 (8-bit)], #8	# int
1223    PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
122b    movq    [R11 + #16 (8-bit)], R12	# long (R12_heapbase==0)

122f    B171: #	out( B313 B172 ) <- in( B312 B170 )  Freq: 0.0198064
122f    
122f    MEMBAR-storestore (empty encoding)
122f    # checkcastPP of R11
122f    # TLS is in R15
122f    movq    RSI, [R15 + #328 (32-bit)]	# ptr
1236    movq    R10, RSI	# spill
1239    addq    R10, #16	# ptr
123d    vector_store_mask XMM0,XMM2	!
1250    store_vector [R11 + #16 (8-bit)],XMM0
	
1256    # TLS is in R15
        nop 	# 10 bytes pad for loops and calls
1260    cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
1267    jnb,u   B313  P=0.000100 C=-1.000000

126d    B172: #	out( B173 ) <- in( B171 )  Freq: 0.0198045
126d    # TLS is in R15
126d    movq    [R15 + #328 (32-bit)], R10	# ptr
1274    PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
127c    movq    [RSI], #1	# long
1283    movl    [RSI + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector$Int256Mask: 0x00007f03fc6e78f0:Constant:exact *	# compressed klass ptr
128a    movl    [rsp + #72], RCX	# spill

128e    B173: #	out( B444 B174 ) <- in( B314 B172 )  Freq: 0.0198064
128e    encode_heap_oop_not_null R10,R11
12d7    movl    [RSI + #12 (8-bit)], R10	# compressed ptr
12db    
12db    MEMBAR-storestore (empty encoding)
12db    # checkcastPP of RSI
12db    movq    RDX, [rsp + #88]	# spill
        nop 	# 2 bytes pad for loops and calls
12e2    movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.VectorMask::and
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:140 (line 239) L[0]=_ L[1]=rsp + #72 L[2]=rsp + #76 L[3]=_ L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #40 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #64 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #56 L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop [160]=Oop off=4852/0x12f4}

12f4    B174: #	out( B445 B175 ) <- in( B173 )  Freq: 0.019806
        # Block is sole successor of call
12f4    movq    RBP, RAX	# spill
12f7    movq    RSI, RAX	# spill
12fa    movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.VectorMask::anyTrue
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:147 (line 240) L[0]=_ L[1]=rsp + #72 L[2]=rsp + #76 L[3]=_ L[4]=#1 L[5]=_ L[6]=RBP L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #40 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #64 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #56 L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [160]=Oop off=4876/0x130c}

130c    B175: #	out( B135 B176 ) <- in( B174 )  Freq: 0.0198057
        # Block is sole successor of call
130c    testl   RAX, RAX
130e    je     B135  P=0.100000 C=-1.000000

1314    B176: #	out( B441 B177 ) <- in( B175 )  Freq: 0.0178251
1314    movq    RSI, RBP	# spill
        nop 	# 3 bytes pad for loops and calls
131a    movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.VectorMask::firstTrue
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:155 (line 241) L[0]=_ L[1]=rsp + #72 L[2]=rsp + #76 L[3]=_ L[4]=#1 L[5]=_ L[6]=RBP L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #40 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #64 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #56 L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [160]=Oop off=4908/0x132c}

132c    B177: #	out( B373 B178 ) <- in( B176 )  Freq: 0.0178247
        # Block is sole successor of call
132c    movq    R9, RBP	# spill
132f    movl    R10, [R9 + #8 (8-bit)]	# compressed klass ptr
1333    decode_and_move_klass_not_null R8,R10
1340    movq    R10, [R8 + #88 (8-bit)]	# class
1344    movq    R8, precise klass jdk/incubator/vector/AbstractMask: 0x00007f03fc6eafd0:Constant:exact *	# ptr
134e    cmpq    R10, R8	# ptr
1351    jne,u   B373  P=0.000001 C=-1.000000

1357    B178: #	out( B440 B179 ) <- in( B177 )  Freq: 0.0178247
1357    movq    RSI, R9	# spill
135a    # checkcastPP of RSI
135a    movl    RDX, [rsp + #72]	# spill
135e    movl    RCX, RAX	# spill
1360    movl    R8, [rsp + #76]	# spill
1365    movl    R9, [rsp + #176]	# spill
136d    pushq   [rsp + #80]	# 64-bit mem-mem spill
	popq    [rsp + #48]
        nop 	# 1 bytes pad for loops and calls
1378    call,static  jdk.incubator.vector.AbstractMask::checkIndexFailed
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:171 (line 243) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #40 L[2]=rsp + #72 L[3]=rsp + #48 L[4]=rsp + #64 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #56 L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #48
        # OopMap {[40]=Oop [48]=Oop [56]=Oop [64]=Oop [160]=Oop off=4992/0x1380}

1380    B179: #	out( B372 B180 ) <- in( B178 )  Freq: 0.0178244
        # Block is sole successor of call
1380    testq   RAX, RAX	# ptr
1383    je     B372  P=0.000001 C=-1.000000

1389    B180: #	out( N5788 ) <- in( B179 )  Freq: 0.0178243
1389    movl    RSI, #-20	# int
138e    movq    RBP, [rsp + #56]	# spill
1393    movq    R10, [rsp + #40]	# spill
1398    movq    [rsp + #32], R10	# spill
139d    movl    R8, [rsp + #72]	# spill
13a2    movl    [rsp + #28], R8	# spill
13a7    movq    [rsp + #72], RAX	# spill
13ac    call,static  wrapper for: uncommon_trap(reason='null_assert_or_unreached0' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:174 (line 243) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #72
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #28 L[3]=rsp + #48 L[4]=rsp + #64 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #28 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #48
        # OopMap {rbp=Oop [32]=Oop [48]=Oop [64]=Oop [72]=Oop [160]=Oop off=5044/0x13b4}
13b4    stop	# ShouldNotReachHere

13c8    B181: #	out( B360 B182 ) <- in( B157 )  Freq: 0.0396138
13c8    cmpl    RBX, #511
13ce    jle     B360  P=0.000001 C=1.000000

13d4    B182: #	out( N5788 ) <- in( B181 )  Freq: 0.0396138
13d4    movl    RSI, #-83	# int
13d9    movq    RBP, [rsp + #56]	# spill
13de    movl    RCX, [rsp + #72]	# spill
13e2    movq    [rsp + #32], R8	# spill
13e7    movl    [rsp + #28], RCX	# spill
13eb    movl    [rsp + #40], RCX	# spill
13ef    movq    R8, [rsp + #80]	# spill
13f4    movq    [rsp + #72], R8	# spill
13f9    movq    [rsp + #80], R10	# spill
13fe    movl    [rsp + #44], R11	# spill
        nop 	# 1 bytes pad for loops and calls
1404    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:72 (line 3668) L[0]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #80 STK[1]=rsp + #28 STK[2]=rsp + #44
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #72 L[4]=rsp + #64 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #28 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #72
        # OopMap {rbp=Oop [32]=Oop [64]=Oop [72]=Oop [80]=Oop [160]=Oop off=5132/0x140c}
140c    stop	# ShouldNotReachHere

1420    B183: #	out( B349 B184 ) <- in( B99 )  Freq: 0.142525
1420    cmpl    R11, #511
1427    jle     B349  P=0.000001 C=1.000000

142d    B184: #	out( N5788 ) <- in( B183 )  Freq: 0.142525
142d    movl    RSI, #-83	# int
1432    movq    RBP, [rsp + #24]	# spill
1437    movq    R10, [rsp + #56]	# spill
143c    movq    [rsp + #24], R10	# spill
1441    movq    R10, [rsp + #40]	# spill
1446    movq    [rsp + #32], R10	# spill
144b    movq    R10, [rsp + #64]	# spill
1450    movq    [rsp + #48], R10	# spill
1455    movq    [rsp + #64], RAX	# spill
        nop 	# 2 bytes pad for loops and calls
145c    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::zero @ bci:72 (line 3654) L[0]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:25 (line 2722) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #64
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop [80]=Oop off=5220/0x1464}
1464    stop	# ShouldNotReachHere

1478    B185: #	out( B343 B186 ) <- in( B93 )  Freq: 0.499952
1478    movq    R10, [rsp + #64]	# spill
        nop 	# 3 bytes pad for loops and calls
1480    testq   R10, R10	# ptr
1483    je     B343  P=0.000001 C=-1.000000

1489    B186: #	out( B333 B187 ) <- in( B96 B185 )  Freq: 0.749927
1489    movq    R10, [rsp + #96]	# spill
148e    movq    R9, precise klass jdk/incubator/vector/AbstractMask: 0x00007f03fc6eafd0:Constant:exact *	# ptr
1498    cmpq    R10, R9	# ptr
        nop 	# 5 bytes pad for loops and calls
14a0    jne,u   B333  P=0.000001 C=-1.000000

14a6    B187: #	out( B331 B188 ) <- in( B186 )  Freq: 0.749927
14a6    movq    R10, RAX	# spill
14a9    # checkcastPP of R10
14a9    movq    [rsp + #104], R10	# spill
14ae    movq    R10, [rsp + #64]	# spill
14b3    movl    R10, [R10 + #12 (8-bit)]	# range
14b7    movl    [rsp + #76], R10	# spill
        nop 	# 4 bytes pad for loops and calls
14c0    cmpl    R8, narrowoop: java/lang/Class:exact *	# compressed ptr
14c7    je,u   B331  P=0.000001 C=-1.000000

14cd    B188: #	out( B332 B189 ) <- in( B187 )  Freq: 0.749926
14cd    cmpl    RCX, #449	# unsigned
14d3    jnb,u   B332  P=0.000001 C=2147483136.000000

14d9    B189: #	out( B213 B190 ) <- in( B188 )  Freq: 0.749925
        nop 	# 7 bytes pad for loops and calls
14e0    cmpl    R11, #257
14e7    jge     B213  P=0.570156 C=256.000000

14ed    B190: #	out( B194 B191 ) <- in( B189 )  Freq: 0.322351
14ed    cmpl    R11, #129
14f4    jge     B194  P=0.663212 C=128.000000

14fa    B191: #	out( B355 B192 ) <- in( B190 )  Freq: 0.108564
        nop 	# 6 bytes pad for loops and calls
1500    cmpl    R11, #65
1504    jl     B355  P=0.000001 C=64.000000

150a    B192: #	out( B332 B193 ) <- in( B191 )  Freq: 0.108564
150a    cmpl    R11, #127
150e    jle     B332  P=0.000001 C=1.000000

1514    B193: #	out( N5788 ) <- in( B192 )  Freq: 0.108564
1514    movl    RSI, #-83	# int
1519    movq    RBP, [rsp + #24]	# spill
151e    movq    R10, [rsp + #56]	# spill
1523    movq    [rsp + #24], R10	# spill
1528    movq    R10, [rsp + #40]	# spill
152d    movq    [rsp + #32], R10	# spill
1532    movq    R10, [rsp + #64]	# spill
1537    movq    [rsp + #48], R10	# spill
153c    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:64 (line 3666) L[0]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #104 STK[1]=rsp + #72 STK[2]=rsp + #76
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop off=5444/0x1544}
1544    stop	# ShouldNotReachHere

1558    B194: #	out( B332 B195 ) <- in( B190 )  Freq: 0.213787
        nop 	# 8 bytes pad for loops and calls
1560    cmpl    R11, #255
1567    jle     B332  P=0.000001 C=1.000000

156d    B195: #	out( B452 B196 ) <- in( B194 )  Freq: 0.213787
156d    movq    RSI, [rsp + #104]	# spill
1572    movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.AbstractMask::vspecies
        # jdk.incubator.vector.AbstractMask::vectorSpecies @ bci:1 (line 61) L[0]=_
        # jdk.incubator.vector.VectorMask::length @ bci:1 (line 154) L[0]=_ L[1]=_
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:8 (line 220) L[0]=rsp + #104 L[1]=rsp + #72 L[2]=rsp + #76 L[3]=#Ptr0x00007f03801c5c30 L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #64 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=rsp + #24 L[1]=rsp + #56 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [104]=Oop off=5508/0x1584}

1584    B196: #	out( B410 B197 ) <- in( B195 )  Freq: 0.213783
        # Block is sole successor of call
1584    # checkcastPP of RAX
1584    movl    R11, [RAX + #8 (8-bit)]	# compressed klass ptr
1588    NullCheck RAX

1588    B197: #	out( B350 B198 ) <- in( B196 )  Freq: 0.213782
1588    decode_and_move_klass_not_null R10,R11
1595    movq    R10, [R10 + #72 (8-bit)]	# class
1599    movq    R11, precise klass jdk/incubator/vector/AbstractSpecies: 0x00007f03fc5f8d60:Constant:exact *	# ptr
15a3    cmpq    R10, R11	# ptr
15a6    jne,u   B350  P=0.000001 C=-1.000000

15ac    B198: #	out( B201 B199 ) <- in( B197 )  Freq: 0.213782
15ac    # checkcastPP of RAX
15ac    movq    R10, int[int:8]<ciTypeArray length=8 type=<ciTypeArrayKlass name=[I ident=1229 address=0x00007f03fc45aa50> ident=1569 address=0x00007f036c375d40> *	# ptr
15b6    load_vector XMM0,[R10 + #16 (8-bit)]
15bc    movl    RCX, [RAX + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
15bf    movl    R10, [rsp + #76]	# spill
15c4    subl    R10, [RSP + #72 (32-bit)]	# int
15c9    cmpl    R10, RCX
15cc    movl    R9, RCX	# spill
15cf    cmovll R9, R10	# signed, int
15d3    xorl    R11, R11	# int
15d6    testl   R9, R9
15d9    cmovlle R9, R11	# signed, int
15dd    replicateI XMM1,R9
15e7    vector_compare XMM2,XMM0,XMM1,#7	! using R10 as TEMP
15f3    movl    R11, [rsp + #72]	# spill
15f8    testl   R11, R11
15fb    jge,s   B201  P=0.500000 C=-1.000000

15fd    B199: #	out( B356 B200 ) <- in( B198 )  Freq: 0.106891
15fd    movl    R10, RCX	# spill
1600    negl    R10	# int
1603    cmpl    R11, R10
1606    movl    R8, [rsp + #72]	# spill
160b    cmovll R8, R10	# signed, int
160f    negl    R8	# int
1612    replicateI XMM1,R8
161c    vector_compare XMM0,XMM0,XMM1,#3	! using R10 as TEMP
1620    cmpl    R9, RCX
1623    jl     B356  P=0.000001 C=-1.000000

1629    B200: #	out( B201 ) <- in( B199 )  Freq: 0.106891
1629    vmovdqu XMM2,XMM0	# spill

162d    B201: #	out( B297 B202 ) <- in( B198 B200 )  Freq: 0.213782
162d    # TLS is in R15
162d    movq    RBP, [R15 + #328 (32-bit)]	# ptr
1634    movq    R10, RBP	# spill
1637    addq    R10, #24	# ptr
163b    # TLS is in R15
        nop 	# 5 bytes pad for loops and calls
1640    cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
1647    jnb,u   B297  P=0.000100 C=-1.000000

164d    B202: #	out( B203 ) <- in( B201 )  Freq: 0.213761
164d    # TLS is in R15
164d    movq    [R15 + #328 (32-bit)], R10	# ptr
1654    PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
165c    movq    [RBP], #1	# long
1664    PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
166c    movl    [RBP + #8 (8-bit)], narrowklass: precise klass [Z: 0x00007f03fc45a840:Constant:exact *	# compressed klass ptr
1673    PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
167b    movl    [RBP + #12 (8-bit)], #8	# int
1682    PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
168a    movq    [RBP + #16 (8-bit)], R12	# long (R12_heapbase==0)

168e    B203: #	out( B299 B204 ) <- in( B298 B202 )  Freq: 0.213782
168e    
168e    MEMBAR-storestore (empty encoding)
168e    # checkcastPP of RBP
168e    # TLS is in R15
168e    movq    RSI, [R15 + #328 (32-bit)]	# ptr
1695    movq    R10, RSI	# spill
1698    addq    R10, #16	# ptr
169c    vector_store_mask XMM0,XMM2	!
16af    store_vector [RBP + #16 (8-bit)],XMM0
	
16b4    # TLS is in R15
        nop 	# 12 bytes pad for loops and calls
16c0    cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
16c7    jnb,u   B299  P=0.000100 C=-1.000000

16cd    B204: #	out( B205 ) <- in( B203 )  Freq: 0.213761
16cd    # TLS is in R15
16cd    movq    [R15 + #328 (32-bit)], R10	# ptr
16d4    PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
16dc    movq    [RSI], #1	# long
16e3    movl    [RSI + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector$Int256Mask: 0x00007f03fc6e78f0:Constant:exact *	# compressed klass ptr

16ea    B205: #	out( B453 B206 ) <- in( B300 B204 )  Freq: 0.213782
16ea    encode_heap_oop_not_null R10,RBP
1733    movl    [RSI + #12 (8-bit)], R10	# compressed ptr
1737    
1737    MEMBAR-storestore (empty encoding)
1737    # checkcastPP of RSI
1737    movq    RDX, [rsp + #104]	# spill
        nop 	# 2 bytes pad for loops and calls
173e    movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.VectorMask::and
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:140 (line 239) L[0]=_ L[1]=rsp + #72 L[2]=rsp + #76 L[3]=_ L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #64 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=rsp + #24 L[1]=rsp + #56 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop off=5968/0x1750}

1750    B206: #	out( B454 B207 ) <- in( B205 )  Freq: 0.213778
        # Block is sole successor of call
1750    movq    [rsp + #104], RAX	# spill
1755    movq    RSI, RAX	# spill
        nop 	# 2 bytes pad for loops and calls
175a    movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.VectorMask::anyTrue
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:147 (line 240) L[0]=_ L[1]=rsp + #72 L[2]=rsp + #76 L[3]=_ L[4]=#1 L[5]=_ L[6]=rsp + #104 L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #64 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=rsp + #24 L[1]=rsp + #56 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [104]=Oop off=5996/0x176c}

176c    B207: #	out( B111 B208 ) <- in( B206 )  Freq: 0.213774
        # Block is sole successor of call
176c    testl   RAX, RAX
176e    je     B111  P=0.100000 C=-1.000000

1774    B208: #	out( B448 B209 ) <- in( B207 )  Freq: 0.192396
1774    movq    RSI, [rsp + #104]	# spill
1779    movq    R10, [rsp + #80]	# spill
177e    movq    [rsp + #48], R10	# spill
        nop 	# 3 bytes pad for loops and calls
1786    movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.VectorMask::firstTrue
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:155 (line 241) L[0]=_ L[1]=rsp + #72 L[2]=rsp + #76 L[3]=_ L[4]=#1 L[5]=_ L[6]=rsp + #104 L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #64 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=rsp + #24 L[1]=rsp + #56 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #48
        # OopMap {[24]=Oop [40]=Oop [48]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [104]=Oop off=6040/0x1798}

1798    B209: #	out( B353 B210 ) <- in( B208 )  Freq: 0.192392
        # Block is sole successor of call
1798    movq    R8, [rsp + #104]	# spill
179d    movl    R10, [R8 + #8 (8-bit)]	# compressed klass ptr
17a1    decode_and_move_klass_not_null R11,R10
17ae    movq    R10, [R11 + #88 (8-bit)]	# class
17b2    movq    R11, precise klass jdk/incubator/vector/AbstractMask: 0x00007f03fc6eafd0:Constant:exact *	# ptr
        nop 	# 4 bytes pad for loops and calls
17c0    cmpq    R10, R11	# ptr
17c3    jne,u   B353  P=0.000001 C=-1.000000

17c9    B210: #	out( B447 B211 ) <- in( B209 )  Freq: 0.192392
17c9    movq    RSI, R8	# spill
17cc    # checkcastPP of RSI
17cc    movl    RDX, [rsp + #72]	# spill
17d0    movl    RCX, RAX	# spill
17d2    movl    R8, [rsp + #76]	# spill
17d7    movl    R9, [rsp + #176]	# spill
17df    movq    RBP, [rsp + #48]	# spill
17e4    call,static  jdk.incubator.vector.AbstractMask::checkIndexFailed
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:171 (line 243) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #64 L[2]=rsp + #72 L[3]=RBP L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=rsp + #24 L[1]=rsp + #56 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=RBP
        # OopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop off=6124/0x17ec}

17ec    B211: #	out( B354 B212 ) <- in( B210 )  Freq: 0.192388
        # Block is sole successor of call
17ec    testq   RAX, RAX	# ptr
17ef    jne     B354  P=0.000001 C=-1.000000

17f5    B212: #	out( N5788 ) <- in( B211 )  Freq: 0.192388
17f5    movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
17fc    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:174 (line 243) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {off=6148/0x1804}
1804    stop	# ShouldNotReachHere

1818    B213: #	out( B332 B214 ) <- in( B189 )  Freq: 0.427574
        nop 	# 8 bytes pad for loops and calls
1820    cmpl    R11, #511
1827    jle     B332  P=0.000001 C=1.000000

182d    B214: #	out( N5788 ) <- in( B213 )  Freq: 0.427574
182d    movl    RSI, #-83	# int
1832    movq    RBP, [rsp + #24]	# spill
1837    movq    R10, [rsp + #56]	# spill
183c    movq    [rsp + #24], R10	# spill
1841    movq    R10, [rsp + #40]	# spill
1846    movq    [rsp + #32], R10	# spill
184b    movq    R10, [rsp + #64]	# spill
1850    movq    [rsp + #48], R10	# spill
        nop 	# 3 bytes pad for loops and calls
1858    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:72 (line 3668) L[0]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #104 STK[1]=rsp + #72 STK[2]=rsp + #76
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop off=6240/0x1860}
1860    stop	# ShouldNotReachHere

1874    B215: #	out( B88 ) <- in( B54 )  Freq: 0.111152
1874    movl    RDI, #1	# int
1879    movq    [rsp + #64], R14	# spill
187e    movq    [rsp + #40], R13	# spill
1883    movl    [rsp + #168], RBX	# spill
188a    movl    RAX, R11	# spill
188d    movl    [rsp + #172], RSI	# spill
1894    movl    [rsp + #72], R8	# spill
1899    movq    R8, RCX	# spill
189c    movl    [rsp + #176], RDI	# spill
18a3    jmp     B88

18a8    B216: #	out( B59 ) <- in( B57 )  Freq: 0.111151
18a8    xorl    RDX, RDX	# int
18aa    jmp     B59

18af    B217: #	out( B85 ) <- in( B83 )  Freq: 0.111151
18af    xorl    RDX, RDX	# int
18b1    jmp     B85

18b6    B218: #	out( B434 B219 ) <- in( B144 )  Freq: 0.000858229
18b6    movq    RSI, [rsp + #40]	# spill
        nop 	# 3 bytes pad for loops and calls
18be    movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.IntVector::vspecies
        # jdk.incubator.vector.IntVector::intoArray @ bci:17 (line 3004) L[0]=rsp + #40 L[1]=rsp + #56 L[2]=rsp + #72 L[3]=rsp + #64 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop off=6352/0x18d0}

18d0    B219: #	out( B384 B220 ) <- in( B218 )  Freq: 0.000858212
        # Block is sole successor of call
18d0    movq    R10, [rsp + #96]	# spill
18d5    movq    R11, precise klass jdk/incubator/vector/AbstractMask: 0x00007f03fc6eafd0:Constant:exact *	# ptr
        nop 	# 1 bytes pad for loops and calls
18e0    cmpq    R10, R11	# ptr
18e3    jne,u   B384  P=0.000001 C=-1.000000

18e9    B220: #	out( B415 B221 ) <- in( B219 )  Freq: 0.000858211
18e9    movl    R11, [RAX + #44 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.vectorType (constant)
18ed    NullCheck RAX

18ed    B221: #	out( B382 B222 ) <- in( B220 )  Freq: 0.00085821
18ed    movq    R10, [rsp + #64]	# spill
18f2    # checkcastPP of R10
        nop 	# 14 bytes pad for loops and calls
1900    cmpl    R11, narrowoop: java/lang/Class:exact *	# compressed ptr
1907    je,u   B382  P=0.000001 C=-1.000000

190d    B222: #	out( B383 B223 ) <- in( B221 )  Freq: 0.000858209
190d    movl    R11, [RAX + #28 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.vectorBitSize (constant)
1911    movl    R9, R11	# spill
1914    addl    R9, #-64	# int
        nop 	# 8 bytes pad for loops and calls
1920    cmpl    R9, #449	# unsigned
1927    jnb,u   B383  P=0.000001 C=2147483136.000000

192d    B223: #	out( B247 B224 ) <- in( B222 )  Freq: 0.000858208
192d    cmpl    R11, #257
1934    jge     B247  P=0.570156 C=256.000000

193a    B224: #	out( B228 B225 ) <- in( B223 )  Freq: 0.000368896
        nop 	# 6 bytes pad for loops and calls
1940    cmpl    R11, #129
1947    jge,s   B228  P=0.663212 C=128.000000

1949    B225: #	out( B388 B226 ) <- in( B224 )  Freq: 0.000124239
1949    cmpl    R11, #65
194d    jl     B388  P=0.000001 C=64.000000

1953    B226: #	out( B383 B227 ) <- in( B225 )  Freq: 0.000124239
1953    cmpl    R11, #127
1957    jle     B383  P=0.000001 C=1.000000

195d    B227: #	out( N5788 ) <- in( B226 )  Freq: 0.000124239
195d    movl    RSI, #-83	# int
1962    movq    RBP, [rsp + #56]	# spill
1967    movq    R11, [rsp + #40]	# spill
196c    movq    [rsp + #32], R11	# spill
1971    movq    [rsp + #48], R10	# spill
        nop 	# 2 bytes pad for loops and calls
1978    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:64 (line 3666) L[0]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #48 STK[1]=rsp + #72 STK[2]=rsp + #168
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #72 L[3]=rsp + #64 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [32]=Oop [48]=Oop [64]=Oop off=6528/0x1980}
1980    stop	# ShouldNotReachHere

1994    B228: #	out( B383 B229 ) <- in( B224 )  Freq: 0.000244656
        nop 	# 12 bytes pad for loops and calls
19a0    cmpl    R11, #255
19a7    jle     B383  P=0.000001 C=1.000000

19ad    B229: #	out( B433 B230 ) <- in( B228 )  Freq: 0.000244656
19ad    movq    [rsp + #64], R10	# spill
19b2    movq    RSI, R10	# spill
        nop 	# 1 bytes pad for loops and calls
19b6    movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.AbstractMask::vspecies
        # jdk.incubator.vector.AbstractMask::vectorSpecies @ bci:1 (line 61) L[0]=_
        # jdk.incubator.vector.VectorMask::length @ bci:1 (line 154) L[0]=_ L[1]=_
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:8 (line 220) L[0]=rsp + #64 L[1]=rsp + #72 L[2]=rsp + #168 L[3]=#Ptr0x00007f03801c5c30 L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=rsp + #40 L[1]=rsp + #56 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop off=6600/0x19c8}

19c8    B230: #	out( B417 B231 ) <- in( B229 )  Freq: 0.000244651
        # Block is sole successor of call
19c8    movq    R8, RAX	# spill
19cb    # checkcastPP of R8
19cb    movl    R10, [R8 + #8 (8-bit)]	# compressed klass ptr
19cf    NullCheck R8

19cf    B231: #	out( B385 B232 ) <- in( B230 )  Freq: 0.000244651
19cf    decode_and_move_klass_not_null R11,R10
19dc    movq    R10, [R11 + #72 (8-bit)]	# class
19e0    movq    R11, precise klass jdk/incubator/vector/AbstractSpecies: 0x00007f03fc5f8d60:Constant:exact *	# ptr
19ea    cmpq    R10, R11	# ptr
19ed    jne,u   B385  P=0.000001 C=-1.000000

19f3    B232: #	out( B235 B233 ) <- in( B231 )  Freq: 0.000244651
19f3    # checkcastPP of R8
19f3    movq    R10, int[int:8]<ciTypeArray length=8 type=<ciTypeArrayKlass name=[I ident=1229 address=0x00007f03fc45aa50> ident=1569 address=0x00007f036c375d40> *	# ptr
19fd    load_vector XMM0,[R10 + #16 (8-bit)]
1a03    movl    R9, [R8 + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
1a07    movl    R11, [rsp + #168]	# spill
1a0f    subl    R11, [RSP + #72 (32-bit)]	# int
1a14    cmpl    R11, R9
1a17    movl    RBX, R9	# spill
1a1a    cmovll RBX, R11	# signed, int
1a1e    xorl    R10, R10	# int
1a21    testl   RBX, RBX
1a23    cmovlle RBX, R10	# signed, int
1a27    replicateI XMM1,RBX
1a30    vector_compare XMM2,XMM0,XMM1,#7	! using R10 as TEMP
1a3c    movl    R11, [rsp + #72]	# spill
1a41    testl   R11, R11
1a44    jge,s   B235  P=0.500000 C=-1.000000

1a46    B233: #	out( B389 B234 ) <- in( B232 )  Freq: 0.000122325
1a46    movl    R8, R9	# spill
1a49    negl    R8	# int
1a4c    cmpl    R11, R8
1a4f    movl    R10, [rsp + #72]	# spill
1a54    cmovll R10, R8	# signed, int
1a58    negl    R10	# int
1a5b    replicateI XMM1,R10
1a65    vector_compare XMM0,XMM0,XMM1,#3	! using R10 as TEMP
1a69    cmpl    RBX, R9
1a6c    jl     B389  P=0.000001 C=-1.000000

1a72    B234: #	out( B235 ) <- in( B233 )  Freq: 0.000122325
1a72    vmovdqu XMM2,XMM0	# spill

1a76    B235: #	out( B365 B236 ) <- in( B232 B234 )  Freq: 0.00024465
1a76    # TLS is in R15
1a76    movq    R8, [R15 + #328 (32-bit)]	# ptr
1a7d    movq    R10, R8	# spill
1a80    addq    R10, #24	# ptr
1a84    # TLS is in R15
1a84    cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
1a8b    jnb,u   B365  P=0.000100 C=-1.000000

1a91    B236: #	out( B237 ) <- in( B235 )  Freq: 0.000244626
1a91    # TLS is in R15
1a91    movq    [R15 + #328 (32-bit)], R10	# ptr
1a98    PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1aa0    movq    [R8], #1	# long
1aa7    PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1aaf    movl    [R8 + #8 (8-bit)], narrowklass: precise klass [Z: 0x00007f03fc45a840:Constant:exact *	# compressed klass ptr
1ab7    PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1abf    movl    [R8 + #12 (8-bit)], #8	# int
1ac7    PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1acf    movq    [R8 + #16 (8-bit)], R12	# long (R12_heapbase==0)

1ad3    B237: #	out( B367 B238 ) <- in( B366 B236 )  Freq: 0.00024465
1ad3    
1ad3    MEMBAR-storestore (empty encoding)
1ad3    # checkcastPP of R8
1ad3    # TLS is in R15
1ad3    movq    RAX, [R15 + #328 (32-bit)]	# ptr
1ada    movq    R10, RAX	# spill
1add    addq    R10, #16	# ptr
1ae1    vector_store_mask XMM0,XMM2	!
1af4    store_vector [R8 + #16 (8-bit)],XMM0
	
1afa    # TLS is in R15
        nop 	# 6 bytes pad for loops and calls
1b00    cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
1b07    jnb,u   B367  P=0.000100 C=-1.000000

1b0d    B238: #	out( B239 ) <- in( B237 )  Freq: 0.000244626
1b0d    # TLS is in R15
1b0d    movq    [R15 + #328 (32-bit)], R10	# ptr
1b14    PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1b1c    movq    [RAX], #1	# long
1b23    movl    [RAX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector$Int256Mask: 0x00007f03fc6e78f0:Constant:exact *	# compressed klass ptr
1b2a    movl    [rsp + #36], R11	# spill

1b2f    B239: #	out( B432 B240 ) <- in( B368 B238 )  Freq: 0.00024465
1b2f    encode_heap_oop_not_null R11,R8
1b78    movl    [RAX + #12 (8-bit)], R11	# compressed ptr
1b7c    
1b7c    MEMBAR-storestore (empty encoding)
1b7c    movq    RSI, RAX	# spill
1b7f    # checkcastPP of RSI
1b7f    movq    RDX, [rsp + #64]	# spill
        nop 	# 2 bytes pad for loops and calls
1b86    movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.VectorMask::and
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:140 (line 239) L[0]=_ L[1]=rsp + #36 L[2]=rsp + #168 L[3]=_ L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=rsp + #40 L[1]=rsp + #56 L[2]=rsp + #36 L[3]=rsp + #80 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[40]=Oop [56]=Oop [80]=Oop off=7064/0x1b98}

1b98    B240: #	out( B431 B241 ) <- in( B239 )  Freq: 0.000244646
        # Block is sole successor of call
1b98    movq    [rsp + #24], RAX	# spill
1b9d    movq    RSI, RAX	# spill
        nop 	# 2 bytes pad for loops and calls
1ba2    movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.VectorMask::anyTrue
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:147 (line 240) L[0]=_ L[1]=rsp + #36 L[2]=rsp + #168 L[3]=_ L[4]=#1 L[5]=_ L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=rsp + #40 L[1]=rsp + #56 L[2]=rsp + #36 L[3]=rsp + #80 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[24]=Oop [40]=Oop [56]=Oop [80]=Oop off=7092/0x1bb4}

1bb4    B241: #	out( B253 B242 ) <- in( B240 )  Freq: 0.000244641
        # Block is sole successor of call
1bb4    testl   RAX, RAX
1bb6    je     B253  P=0.100000 C=-1.000000

1bbc    B242: #	out( B430 B243 ) <- in( B241 )  Freq: 0.000220177
1bbc    movq    RSI, [rsp + #24]	# spill
1bc1    movq    RBP, [rsp + #40]	# spill
1bc6    movq    rax, #Universe::non_oop_word()
	call,dynamic  jdk.incubator.vector.VectorMask::firstTrue
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:155 (line 241) L[0]=_ L[1]=rsp + #36 L[2]=rsp + #168 L[3]=_ L[4]=#1 L[5]=_ L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=RBP L[1]=rsp + #56 L[2]=rsp + #36 L[3]=rsp + #80 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [80]=Oop off=7128/0x1bd8}

1bd8    B243: #	out( B387 B244 ) <- in( B242 )  Freq: 0.000220172
        # Block is sole successor of call
1bd8    movq    R9, [rsp + #24]	# spill
1bdd    movl    R8, [R9 + #8 (8-bit)]	# compressed klass ptr
1be1    decode_and_move_klass_not_null R10,R8
1bee    movq    R10, [R10 + #88 (8-bit)]	# class
1bf2    movq    R8, precise klass jdk/incubator/vector/AbstractMask: 0x00007f03fc6eafd0:Constant:exact *	# ptr
        nop 	# 4 bytes pad for loops and calls
1c00    cmpq    R10, R8	# ptr
1c03    jne,u   B387  P=0.000001 C=-1.000000

1c09    B244: #	out( B429 B245 ) <- in( B243 )  Freq: 0.000220172
1c09    movq    RSI, R9	# spill
1c0c    # checkcastPP of RSI
1c0c    movl    RDX, [rsp + #36]	# spill
1c10    movl    RCX, RAX	# spill
1c12    movl    R8, [rsp + #168]	# spill
1c1a    movl    R9, [rsp + #176]	# spill
        nop 	# 2 bytes pad for loops and calls
1c24    call,static  jdk.incubator.vector.AbstractMask::checkIndexFailed
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:171 (line 243) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=RBP L[1]=rsp + #56 L[2]=rsp + #36 L[3]=rsp + #80 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [40]=Oop [56]=Oop [80]=Oop off=7212/0x1c2c}

1c2c    B245: #	out( B386 B246 ) <- in( B244 )  Freq: 0.000220168
        # Block is sole successor of call
1c2c    testq   RAX, RAX	# ptr
1c2f    je     B386  P=0.000001 C=-1.000000

1c35    B246: #	out( N5788 ) <- in( B245 )  Freq: 0.000220167
1c35    movl    RSI, #-20	# int
1c3a    movl    R8, [rsp + #36]	# spill
1c3f    movl    [rsp + #24], R8	# spill
1c44    movq    R11, [rsp + #40]	# spill
1c49    movq    [rsp + #32], R11	# spill
1c4e    movq    [rsp + #48], RAX	# spill
        nop 	# 1 bytes pad for loops and calls
1c54    call,static  wrapper for: uncommon_trap(reason='null_assert_or_unreached0' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:174 (line 243) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #48
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=rsp + #32 L[1]=rsp + #56 L[2]=rsp + #24 L[3]=rsp + #80 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[32]=Oop [48]=Oop [56]=Oop [80]=Oop off=7260/0x1c5c}
1c5c    stop	# ShouldNotReachHere

1c70    B247: #	out( B383 B248 ) <- in( B223 )  Freq: 0.000489312
1c70    cmpl    R11, #511
1c77    jle     B383  P=0.000001 C=1.000000

1c7d    B248: #	out( N5788 ) <- in( B247 )  Freq: 0.000489312
1c7d    movl    RSI, #-83	# int
1c82    movq    RBP, [rsp + #56]	# spill
1c87    movq    R11, [rsp + #40]	# spill
1c8c    movq    [rsp + #32], R11	# spill
1c91    movq    [rsp + #48], R10	# spill
        nop 	# 2 bytes pad for loops and calls
1c98    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:72 (line 3668) L[0]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #48 STK[1]=rsp + #72 STK[2]=rsp + #168
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #72 L[3]=rsp + #64 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [32]=Oop [48]=Oop [64]=Oop off=7328/0x1ca0}
1ca0    stop	# ShouldNotReachHere

1cb4    B249: #	out( B428 B250 ) <- in( B5 B6 )  Freq: 0.00010103
1cb4    movl    [rsp + #68], R10	# spill
1cb9    movl    [rsp + #64], RDX	# spill
1cbd    movq    [rsp + #32], RSI	# spill
1cc2    movq    [rsp + #24], RBX	# spill
1cc7    movq    RSI, precise klass [Z: 0x00007f03fc45a840:Constant:exact *	# ptr
        nop 	# 3 bytes pad for loops and calls
1cd4    call,static  wrapper for: _new_array_Java
        # App::micro_vector_masked @ bci:18 (line 36) L[0]=rsp + #24 L[1]=rsp + #56 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=#0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [56]=Oop [68]=NarrowOop off=7388/0x1cdc}

1cdc    B250: #	out( B8 ) <- in( B249 )  Freq: 0.000101028
        # Block is sole successor of call
1cdc    movq    RBX, [rsp + #24]	# spill
1ce1    movq    RSI, [rsp + #32]	# spill
1ce6    movl    RDX, [rsp + #64]	# spill
1cea    movq    R8, RAX	# spill
1ced    movl    R10, [rsp + #68]	# spill
1cf2    jmp     B8

1cf7    B251: #	out( B427 B252 ) <- in( B51 B52 )  Freq: 0.000101023
1cf7    movq    [rsp + #88], R10	# spill
1cfc    movl    [rsp + #84], R8	# spill
1d01    movl    [rsp + #80], RSI	# spill
1d05    movl    [rsp + #68], R11	# spill
1d0a    movq    [rsp + #72], R9	# spill
1d0f    movl    [rsp + #64], RBX	# spill
1d13    movq    [rsp + #48], R13	# spill
1d18    movq    [rsp + #40], R14	# spill
1d1d    pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #32]
1d27    movq    RSI, precise klass [Z: 0x00007f03fc45a840:Constant:exact *	# ptr
1d31    movl    RDX, R11	# spill
1d34    call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.VectorMask::fromLong @ bci:92 (line 254) L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #72 L[4]=_ L[5]=rsp + #88 L[6]=_ L[7]=_ L[8]=_
        # App::micro_vector_masked @ bci:149 (line 51) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=rsp + #84 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [72]=Oop off=7484/0x1d3c}

1d3c    B252: #	out( B54 ) <- in( B251 )  Freq: 0.000101021
        # Block is sole successor of call
1d3c    pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #56]
1d46    movq    R14, [rsp + #40]	# spill
1d4b    movq    R13, [rsp + #48]	# spill
1d50    movl    RBX, [rsp + #64]	# spill
1d54    movq    R9, [rsp + #72]	# spill
1d59    movl    R11, [rsp + #68]	# spill
1d5e    movl    RSI, [rsp + #80]	# spill
1d62    movl    R8, [rsp + #84]	# spill
1d67    movq    R10, [rsp + #88]	# spill
1d6c    movq    RDX, RAX	# spill
1d6f    jmp     B54

1d74    B253: #	out( B390 B254 ) <- in( B241 )  Freq: 2.44641e-05
        nop 	# 12 bytes pad for loops and calls
1d80    cmpl    RBP, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007f036c330ed0:Constant:exact *	# compressed klass ptr
1d86    jne,u   B390  P=0.000001 C=-1.000000

1d8c    B254: #	out( B419 B255 ) <- in( B253 )  Freq: 2.4464e-05
1d8c    movq    R10, [rsp + #40]	# spill
1d91    # checkcastPP of R10
1d91    
1d91    MEMBAR-acquire ! (empty encoding)
1d91    # checkcastPP of R10
1d91    movl    RBP, [R10 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
1d95    movl    R11, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
1d9a    NullCheck RBP

1d9a    B255: #	out( B400 B256 ) <- in( B254 )  Freq: 2.4464e-05
        nop 	# 6 bytes pad for loops and calls
1da0    cmpl    R11, narrowklass: precise klass [I: 0x00007f03fc45aa50:Constant:exact *	# compressed klass ptr
1da7    jne,u   B400  P=0.000000 C=-1.000000

1dad    B256: #	out( B401 B257 ) <- in( B255 )  Freq: 2.4464e-05
1dad    decode_heap_oop_not_null R9,RBP
1db1    # checkcastPP of R9
1db1    movl    R10, [rsp + #32]	# spill
        nop 	# 10 bytes pad for loops and calls
1dc0    cmpl    R10, narrowklass: precise klass jdk/incubator/vector/Int256Vector$Int256Mask: 0x00007f03fc6e78f0:Constant:exact *	# compressed klass ptr
1dc7    jne,u   B401  P=0.000000 C=-1.000000

1dcd    B257: #	out( B420 B258 ) <- in( B256 )  Freq: 2.4464e-05
1dcd    movq    R10, [rsp + #80]	# spill
1dd2    # checkcastPP of R10
1dd2    
1dd2    MEMBAR-acquire ! (empty encoding)
1dd2    # checkcastPP of R10
1dd2    movl    R8, [R10 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
        nop 	# 10 bytes pad for loops and calls
1de0    movl    R11, [R12 + R8 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
1de5    NullCheck R8

1de5    B258: #	out( B402 B259 ) <- in( B257 )  Freq: 2.4464e-05
1de5    cmpl    R11, narrowklass: precise klass [Z: 0x00007f03fc45a840:Constant:exact *	# compressed klass ptr
1dec    jne,u   B402  P=0.000000 C=-1.000000

1df2    B259: #	out( B149 B260 ) <- in( B258 )  Freq: 2.4464e-05
1df2    movl    RAX, [R9 + #12 (8-bit)]	# range
1df6    testl   RAX, RAX	# unsigned
1df8    jbe,u   B149  P=0.111153 C=13360.000000

1dfe    B260: #	out( B391 B261 ) <- in( B259 )  Freq: 2.17448e-05
1dfe    decode_heap_oop_not_null RBP,R8
1e02    # checkcastPP of RBP
1e02    movl    RCX, [RBP + #12 (8-bit)]	# range
1e05    testl   RCX, RCX	# unsigned
1e07    jbe,u   B391  P=0.000001 C=-1.000000

1e0d    B261: #	out( B391 B262 ) <- in( B260 )  Freq: 2.17447e-05
1e0d    movl    R10, RAX	# spill
1e10    decl    R10	# int
1e13    cmpl    R10, RCX	# unsigned
1e16    jnb,u   B391  P=0.000001 C=-1.000000

1e1c    B262: #	out( B392 B263 ) <- in( B261 )  Freq: 2.17447e-05
        nop 	# 4 bytes pad for loops and calls
1e20    cmpl    R10, RAX	# unsigned
1e23    jnb,u   B392  P=0.000001 C=-1.000000

1e29    B263: #	out( B393 B264 ) <- in( B262 )  Freq: 2.17447e-05
1e29    movl    RBX, [rsp + #36]	# spill
1e2d    cmpl    RBX, [RSP + #168 (32-bit)]	# unsigned
1e34    jnb,u   B393  P=0.000001 C=-1.000000

1e3a    B264: #	out( B393 B265 ) <- in( B263 )  Freq: 2.17447e-05
1e3a    movslq  R10, RAX	# i2l
1e3d    addq    R10, [RSP + #48 (32-bit)]	# long
1e42    movslq  R11, [RSP + #168 (32-bit)]	# int -> long
1e4a    decq    R10	# long
1e4d    cmpq    R10, R11	# unsigned
1e50    jnb,u   B393  P=0.000001 C=-1.000000

1e56    B265: #	out( B308 B266 ) <- in( B264 )  Freq: 2.17446e-05
1e56    movzbl  R8, [RBP + #16 (8-bit)]	# ubyte
        nop 	# 5 bytes pad for loops and calls
1e60    testl   R8, R8
1e63    je     B308  P=0.125053 C=11875.000000

1e69    B266: #	out( B267 ) <- in( B265 )  Freq: 1.90254e-05
1e69    movl    R8, [R9 + #16 (8-bit)]	# int
1e6d    movq    RDX, [rsp + #56]	# spill
1e72    movl    [RDX + #16 + RBX << #2], R8	# int

1e77    B267: #	out( B290 B268 ) <- in( B266 B308 )  Freq: 2.17446e-05
1e77    movl    R10, RAX	# spill
1e7a    addl    R10, #-3	# int
        nop 	# 2 bytes pad for loops and calls
1e80    cmpl    R10, #1
1e84    jle     B290  P=0.000001 C=-1.000000

1e8a    B268: #	out( B396 B269 ) <- in( B267 )  Freq: 2.17446e-05
1e8a    cmpl    RCX, #1	# unsigned
1e8d    jbe,u   B396  P=0.000001 C=-1.000000

1e93    B269: #	out( B394 B270 ) <- in( B268 )  Freq: 2.17446e-05
1e93    movq    R8, [rsp + #48]	# spill
1e98    addq    R8, #1	# long
        nop 	# 4 bytes pad for loops and calls
1ea0    cmpq    R8, R11	# unsigned
1ea3    jnb,u   B394  P=0.000001 C=-1.000000

1ea9    B270: #	out( B397 B271 ) <- in( B269 )  Freq: 2.17446e-05
1ea9    cmpl    RAX, #1	# unsigned
1eac    jbe,u   B397  P=0.000001 C=-1.000000

1eb2    B271: #	out( B398 B272 ) <- in( B270 )  Freq: 2.17446e-05
1eb2    cmpl    RAX, #4	# unsigned
1eb5    jbe,u   B398  P=0.000001 C=-1.000000

1ebb    B272: #	out( B395 B273 ) <- in( B271 )  Freq: 2.17445e-05
1ebb    movq    R8, [rsp + #48]	# spill
1ec0    addq    R8, #4	# long
1ec4    cmpq    R8, R11	# unsigned
1ec7    jnb,u   B395  P=0.000001 C=-1.000000

1ecd    B273: #	out( B399 B274 ) <- in( B272 )  Freq: 2.17445e-05
1ecd    cmpl    RCX, #1	# unsigned
1ed0    jbe,u   B399  P=0.000001 C=-1.000000

1ed6    B274: #	out( B289 B275 ) <- in( B273 )  Freq: 2.17445e-05
1ed6    cmpl    RCX, #4	# unsigned
1ed9    jnbe,u   B289  P=0.999999 C=-1.000000

1edf    B275: #	out( N5788 ) <- in( B274 )  Freq: 2.17445e-11
1edf    stop	# ShouldNotReachHere

1ef3    B276: #	out( B277 ) <- in( B285 ) top-of-loop Freq: 0.00153989
1ef3    movl    RDI, [R9 + #28 + RDI << #2]	# int
1ef8    movl    [RDX + #28 + RCX << #2], RDI	# int

1efc    B277: #	out( B287 B278 ) <- in( B276 B286 ) top-of-loop Freq: 0.00175998
1efc    movl    RDI, [rsp + #176]	# spill
1f03    addl    RDI, #4	# int
1f06    cmpl    RDI, R8
1f09    jge     B287	# loop end  P=0.111153 C=11875.000000

1f0f    B278: #	out( B279 ) <- in( B277 )  Freq: 0.00156436
1f0f    movl    [rsp + #176], RDI	# spill

1f16    B279: #	out( B281 B280 ) <- in( B289 B278 ) Loop( B279-B278 inner main of N2350 strip mined) Freq: 0.00175998
1f16    movl    R11, RBX	# spill
1f19    addl    R11, [RSP + #176 (32-bit)]	# int
1f21    movslq  RCX, [RSP + #176 (32-bit)]	# int -> long
1f29    movzbl  RDI, [RBP + #16 + RCX]	# ubyte
1f2e    testl   RDI, RDI
1f30    je,s   B281  P=0.125053 C=11875.000000

1f32    B280: #	out( B281 ) <- in( B279 )  Freq: 0.00153989
1f32    movl    RDI, [R9 + #16 + RCX << #2]	# int
1f37    movl    [RDX + #16 + R11 << #2], RDI	# int

1f3c    B281: #	out( B283 B282 ) <- in( B280 B279 )  Freq: 0.00175998
1f3c    movslq  RCX, R11	# i2l
1f3f    movslq  RDI, [RSP + #176 (32-bit)]	# int -> long
1f47    movzbl  R11, [RBP + #17 + RDI]	# ubyte
1f4d    testl   R11, R11
1f50    je,s   B283  P=0.125053 C=11875.000000

1f52    B282: #	out( B283 ) <- in( B281 )  Freq: 0.00153989
1f52    movl    R11, [R9 + #20 + RDI << #2]	# int
1f57    movl    [RDX + #20 + RCX << #2], R11	# int

1f5c    B283: #	out( B285 B284 ) <- in( B282 B281 )  Freq: 0.00175998
1f5c    movzbl  R11, [RBP + #18 + RDI]	# ubyte
1f62    testl   R11, R11
1f65    je,s   B285  P=0.125053 C=11875.000000

1f67    B284: #	out( B285 ) <- in( B283 )  Freq: 0.00153989
1f67    movl    R11, [R9 + #24 + RDI << #2]	# int
1f6c    movl    [RDX + #24 + RCX << #2], R11	# int

1f71    B285: #	out( B276 B286 ) <- in( B284 B283 )  Freq: 0.00175998
1f71    movzbl  R11, [RBP + #19 + RDI]	# ubyte
1f77    testl   R11, R11
        nop 	# 6 bytes pad for loops and calls
1f80    jne     B276  P=0.874947 C=11875.000000

1f86    B286: #	out( B277 ) <- in( B285 )  Freq: 0.000220091
1f86    jmp     B277

1f8b    B287: #	out( B291 B288 ) <- in( B277 )  Freq: 0.000195627
1f8b    # TLS is in R15
1f8b    movq    RCX, [R15 + #304 (32-bit)]	# ptr
1f92    testl   rax, [RCX]	# Safepoint: poll for GC        # jdk.incubator.vector.IntVector::stOp @ bci:53 (line 353) L[0]=_ L[1]=RDX L[2]=RBX L[3]=_ L[4]=#Ptr0x00007f03801918b0 L[5]=R9 L[6]=RBP L[7]=RDI
        # jdk.incubator.vector.IntVector::intoArray @ bci:41 (line 3006) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {r9=Oop rdx=Oop rbp=Oop off=8082/0x1f92}
1f94    cmpl    RDI, R10
1f97    jge,s   B291  P=0.111153 C=11875.000000

1f99    B288: #	out( B289 ) <- in( B287 )  Freq: 0.000173883
1f99    movl    [rsp + #176], RDI	# spill

1fa0    B289: #	out( B279 ) <- in( B274 B288 ) Loop( B289-B288 ) Freq: 0.000195627
1fa0    movl    R8, RAX	# spill
1fa3    subl    R8, [RSP + #176 (32-bit)]	# int
1fab    addl    R8, #-3	# int
1faf    xorl    RDI, RDI	# int
1fb1    cmpl    R10, [RSP + #176 (32-bit)]
1fb9    cmovll R8, RDI	# signed, int
1fbd    cmpl    R8, #4000	# unsigned
1fc4    movl    RCX, #4000	# int
1fc9    cmovlnbe R8, RCX	# unsigned, int
1fcd    addl    R8, [RSP + #176 (32-bit)]	# int
1fd5    jmp     B279

1fda    B290: #	out( B291 ) <- in( B267 )  Freq: 2.20334e-11
1fda    movl    RDI, [rsp + #176]	# spill

1fe1    B291: #	out( B149 B292 ) <- in( B290 B287 )  Freq: 2.17445e-05
1fe1    cmpl    RDI, RAX
1fe3    jge     B149  P=0.500000 C=-1.000000

1fe9    B292: #	out( B293 ) <- in( B291 )  Freq: 1.08722e-05
1fe9    # castII of RDI
        nop 	# 3 bytes pad for loops and calls

1fec    B293: #	out( B295 B294 ) <- in( B292 B295 ) Loop( B293-B295 inner post of N2251) Freq: 2.17445e-05
1fec    movslq  R10, RDI	# i2l
1fef    movzbl  R8, [RBP + #16 + R10]	# ubyte
1ff5    testl   R8, R8
1ff8    je,s   B295  P=0.125053 C=11875.000000

1ffa    B294: #	out( B295 ) <- in( B293 )  Freq: 1.90253e-05
1ffa    movl    R8, [R9 + #16 + R10 << #2]	# int
1fff    movl    R11, RDI	# spill
2002    addl    R11, RBX	# int
2005    movl    [RDX + #16 + R11 << #2], R8	# int

200a    B295: #	out( B293 B296 ) <- in( B294 B293 )  Freq: 2.17445e-05
200a    incl    RDI	# int
200c    cmpl    RDI, RAX
200e    jl,s   B293	# loop end  P=0.500000 C=11875.000000

2010    B296: #	out( B149 ) <- in( B295 )  Freq: 1.08722e-05
2010    jmp     B149

2015    B297: #	out( B416 B298 ) <- in( B201 )  Freq: 2.13818e-05
2015    vmovdqu [rsp + 128],XMM2	# spill
201e    movq    RSI, precise klass [Z: 0x00007f03fc45a840:Constant:exact *	# ptr
2028    movl    RDX, #8	# int
        nop 	# 3 bytes pad for loops and calls
2030    call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:140 (line 239) L[0]=_ L[1]=rsp + #72 L[2]=rsp + #76 L[3]=_ L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#ScObj0 STK[1]=rsp + #104
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #128 }
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #64 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=rsp + #24 L[1]=rsp + #56 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [104]=Oop off=8248/0x2038}

2038    B298: #	out( B203 ) <- in( B297 )  Freq: 2.13813e-05
        # Block is sole successor of call
2038    vmovdqu XMM2,[rsp + 128]	# spill
2041    movq    RBP, RAX	# spill
2044    jmp     B203

2049    B299: #	out( B416 B300 ) <- in( B203 )  Freq: 2.13818e-05
2049    vmovdqu [rsp + 128],XMM2	# spill
2052    movq    RSI, precise klass jdk/incubator/vector/Int256Vector$Int256Mask: 0x00007f03fc6e78f0:Constant:exact *	# ptr
205c    call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:140 (line 239) L[0]=_ L[1]=rsp + #72 L[2]=rsp + #76 L[3]=_ L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#ScObj0 STK[1]=rsp + #104
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #128 }
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #64 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=rsp + #24 L[1]=rsp + #56 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [104]=Oop off=8292/0x2064}

2064    B300: #	out( B205 ) <- in( B299 )  Freq: 2.13813e-05
        # Block is sole successor of call
2064    movq    RSI, RAX	# spill
2067    jmp     B205

206c    B301: #	out( B425 B302 ) <- in( B106 )  Freq: 7.12741e-06
206c    vmovdqu [rsp + 128],XMM3	# spill
2075    movq    RSI, precise klass [I: 0x00007f03fc45aa50:Constant:exact *	# ptr
207f    movl    RDX, #8	# int
2084    call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::blendTemplate @ bci:26 (line 1895) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007f03803e3dd0 STK[1]=#Ptr0x00007f03fc6e79c0 STK[2]=#Ptr0x00007f03803e5960 STK[3]=#8 STK[4]=#Ptr0x00007f036c040e60 STK[5]=#ScObj0 STK[6]=RBP STK[7]=#Ptr0x00007f03fc6ea290
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #128 }
        # jdk.incubator.vector.Int256Vector::blend @ bci:11 (line 376) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::blend @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:40 (line 2723) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=rsp + #24 L[1]=rsp + #56 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [80]=Oop off=8332/0x208c}

208c    B302: #	out( B108 ) <- in( B301 )  Freq: 7.12727e-06
        # Block is sole successor of call
208c    movq    R10, RAX	# spill
208f    vmovdqu XMM3,[rsp + 128]	# spill
2098    jmp     B108

209d    B303: #	out( B426 B304 ) <- in( B108 )  Freq: 7.12741e-06
209d    movq    RSI, precise klass jdk/incubator/vector/Int256Vector: 0x00007f036c330ed0:Constant:exact *	# ptr
20a7    vmovdqu [rsp + 128],XMM3	# spill
20b0    call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.IntVector::blendTemplate @ bci:26 (line 1895) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007f03803e3dd0 STK[1]=#Ptr0x00007f03fc6e79c0 STK[2]=#Ptr0x00007f03803e5960 STK[3]=#8 STK[4]=#Ptr0x00007f036c040e60 STK[5]=#ScObj0 STK[6]=RBP STK[7]=#Ptr0x00007f03fc6ea290
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #128 }
        # jdk.incubator.vector.Int256Vector::blend @ bci:11 (line 376) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::blend @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:40 (line 2723) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=rsp + #24 L[1]=rsp + #56 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop off=8376/0x20b8}

20b8    B304: #	out( B110 ) <- in( B303 )  Freq: 7.12727e-06
        # Block is sole successor of call
20b8    jmp     B110

20bd    B305: #	out( N5788 ) <- in( B42 )  Freq: 3.03721e-06
20bd    movl    RSI, #-28	# int
20c2    movq    RBP, [rsp + #24]	# spill
20c7    pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #24]
20d1    movq    [rsp + #40], R13	# spill
20d6    movq    [rsp + #56], R9	# spill
20db    movq    [rsp + #64], R14	# spill
20e0    movl    [rsp + #52], RDI	# spill
20e4    movl    [rsp + #72], RCX	# spill
20e8    call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 359) L[0]=_ L[1]=_ STK[0]=rsp + #52 STK[1]=rsp + #72 STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 74) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 2689) L[0]=rsp + #56 L[1]=rsp + #64 L[2]=_ L[3]=_
        # App::micro_vector_masked @ bci:80 (line 44) L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #64 L[3]=rsp + #40 L[4]=rsp + #52 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [64]=Oop off=8432/0x20f0}
20f0    stop	# ShouldNotReachHere

2104    B306: #	out( N5788 ) <- in( B43 )  Freq: 3.0372e-06
2104    movl    RSI, #-28	# int
2109    movq    RBP, [rsp + #24]	# spill
210e    pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #24]
2118    movq    [rsp + #32], R14	# spill
211d    movq    [rsp + #56], R9	# spill
2122    movq    [rsp + #64], R13	# spill
2127    movl    [rsp + #52], RDI	# spill
212b    movl    [rsp + #72], R8	# spill
2130    vmovdqu [rsp + 96],XMM0	# spill
        nop 	# 2 bytes pad for loops and calls
2138    call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 359) L[0]=_ L[1]=_ STK[0]=rsp + #52 STK[1]=rsp + #72 STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 74) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 2689) L[0]=rsp + #56 L[1]=rsp + #64 L[2]=_ L[3]=_
        # App::micro_vector_masked @ bci:92 (line 45) L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #64 L[4]=rsp + #52 L[5]=#ScObj0 L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #96 }
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [56]=Oop [64]=Oop off=8512/0x2140}
2140    stop	# ShouldNotReachHere

2154    B307: #	out( N5788 ) <- in( B44 )  Freq: 3.0372e-06
2154    movl    RSI, #-28	# int
2159    movq    RBP, [rsp + #24]	# spill
215e    movq    [rsp + #32], R14	# spill
2163    movq    [rsp + #40], R13	# spill
2168    movl    [rsp + #52], RDI	# spill
216c    movl    [rsp + #64], RAX	# spill
2170    vmovdqu [rsp + 96],XMM0	# spill
        nop 	# 2 bytes pad for loops and calls
2178    call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 359) L[0]=_ L[1]=_ STK[0]=rsp + #52 STK[1]=rsp + #64 STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 74) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:7 (line 2960) L[0]=#ScObj0 L[1]=rsp + #56 L[2]=_ L[3]=_
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #96 }
        # App::micro_vector_masked @ bci:107 (line 46) L[0]=RBP L[1]=rsp + #56 L[2]=rsp + #32 L[3]=rsp + #40 L[4]=rsp + #52 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop off=8576/0x2180}
2180    stop	# ShouldNotReachHere

2194    B308: #	out( B267 ) <- in( B265 )  Freq: 2.71923e-06
2194    movq    RDX, [rsp + #56]	# spill
2199    jmp     B267

219e    B309: #	out( B424 B310 ) <- in( B111 )  Freq: 2.13809e-06
219e    movq    RSI, precise klass jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58: 0x00007f038026a490:Constant:exact *	# ptr
21a8    call,static  wrapper for: _new_instance_Java
        # java.lang.invoke.DirectMethodHandle::allocateInstance @ bci:12 (line 522) L[0]=_ L[1]=_
        # java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial @ bci:1 L[0]=#Ptr0x00007f03fc543c00 L[1]=rsp + #64 L[2]=rsp + #72 L[3]=_ L[4]=_
        # java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod @ bci:6 L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:59 (line 2728) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=rsp + #88 STK[1]=rsp + #80
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=rsp + #24 L[1]=rsp + #56 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop off=8624/0x21b0}

21b0    B310: #	out( B113 ) <- in( B309 )  Freq: 2.13805e-06
        # Block is sole successor of call
21b0    movq    RCX, RAX	# spill
21b3    jmp     B113

21b8    B311: #	out( B418 B312 ) <- in( B169 )  Freq: 1.98097e-06
21b8    vmovdqu [rsp + 128],XMM2	# spill
21c1    movq    RSI, precise klass [Z: 0x00007f03fc45a840:Constant:exact *	# ptr
21cb    movl    RDX, #8	# int
21d0    call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:140 (line 239) L[0]=_ L[1]=rsp + #72 L[2]=rsp + #76 L[3]=_ L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#ScObj0 STK[1]=rsp + #88
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #128 }
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #40 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #64 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #56 L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop off=8664/0x21d8}

21d8    B312: #	out( B171 ) <- in( B311 )  Freq: 1.98093e-06
        # Block is sole successor of call
21d8    movl    RCX, [rsp + #72]	# spill
21dc    vmovdqu XMM2,[rsp + 128]	# spill
21e5    movq    R11, RAX	# spill
21e8    jmp     B171

21ed    B313: #	out( B418 B314 ) <- in( B171 )  Freq: 1.98097e-06
21ed    movq    RBP, R11	# spill
21f0    vmovdqu [rsp + 128],XMM2	# spill
21f9    movl    [rsp + #72], RCX	# spill
21fd    movq    RSI, precise klass jdk/incubator/vector/Int256Vector$Int256Mask: 0x00007f03fc6e78f0:Constant:exact *	# ptr
        nop 	# 1 bytes pad for loops and calls
2208    call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:140 (line 239) L[0]=_ L[1]=rsp + #72 L[2]=rsp + #76 L[3]=_ L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#ScObj0 STK[1]=rsp + #88
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #128 }
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #40 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #64 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #56 L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop off=8720/0x2210}

2210    B314: #	out( B173 ) <- in( B313 )  Freq: 1.98093e-06
        # Block is sole successor of call
2210    movq    RSI, RAX	# spill
2213    movq    R11, RBP	# spill
2216    jmp     B173

221b    B315: #	out( B5 ) <- in( B3 )  Freq: 1.01328e-06
221b    movslq  RCX, RDX	# i2l
        nop 	# 2 bytes pad for loops and calls
2220    jmp     B5

2225    B316: #	out( B51 ) <- in( B49 )  Freq: 1.01321e-06
2225    movslq  RCX, R11	# i2l
2228    jmp     B51

222d    B317: #	out( N5788 ) <- in( B2 )  Freq: 9.99999e-07
222d    movl    RSI, #-34	# int
2232    movq    RBP, RBX	# spill
2235    movq    [rsp + #32], RCX	# spill
223a    movq    [rsp + #40], R8	# spill
223f    movl    [rsp + #48], R10	# spill
2244    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # App::micro_vector_masked @ bci:13 (line 36) L[0]=RBP L[1]=rsp + #56 L[2]=rsp + #32 L[3]=rsp + #40 L[4]=#0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #48
        # OopMap {rbp=Oop [32]=Oop [40]=Oop [48]=NarrowOop [56]=Oop off=8780/0x224c}
224c    stop	# ShouldNotReachHere

2260    B318: #	out( N5788 ) <- in( B23 )  Freq: 9.99994e-07
2260    movl    RSI, #-34	# int
2265    movl    RBP, R10	# spill
2268    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:1 (line 205) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP
        # App::micro_vector_masked @ bci:52 (line 40) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=NarrowOop off=8816/0x2270}
2270    stop	# ShouldNotReachHere

2284    B319: #	out( N5788 ) <- in( B27 )  Freq: 9.99952e-07
2284    movl    RSI, #-34	# int
2289    movq    RBP, RAX	# spill
228c    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:49 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP
        # App::micro_vector_masked @ bci:52 (line 40) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=8852/0x2294}
2294    stop	# ShouldNotReachHere

22a8    B320: #	out( N5788 ) <- in( B30 )  Freq: 9.99949e-07
22a8    movl    RSI, #-34	# int
22ad    pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #32]
22b7    movl    [rsp + #56], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
22bc    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # App::micro_vector_masked @ bci:65 (line 43) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=#0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#0 STK[1]=RBP STK[2]=rsp + #56
        # OopMap {rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [48]=Oop off=8900/0x22c4}
22c4    stop	# ShouldNotReachHere

22d8    B321: #	out( N5788 ) <- in( B90 )  Freq: 9.99908e-07
22d8    movl    RSI, #-34	# int
22dd    movq    RBP, RAX	# spill
22e0    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:49 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP
        # jdk.incubator.vector.VectorMask::fromValues @ bci:17 (line 183) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.VectorMask::fromLong @ bci:141 (line 259) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # App::micro_vector_masked @ bci:149 (line 51) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=8936/0x22e8}
22e8    stop	# ShouldNotReachHere

22fc    B322: #	out( N5788 ) <- in( B92 )  Freq: 9.99906e-07
22fc    movl    RSI, #-34	# int
2301    movl    RBP, RDI	# spill
        nop 	# 1 bytes pad for loops and calls
2304    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:1 (line 2720) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=RBP
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=NarrowOop off=8972/0x230c}
230c    stop	# ShouldNotReachHere

2320    B323: #	out( N5788 ) <- in( B10 B9 )  Freq: 1.80138e-06
2320    movl    RSI, #-138	# int
2325    movq    RBP, RBX	# spill
2328    pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #24]
2332    movq    R10, [rsp + #40]	# spill
2337    movq    [rsp + #32], R10	# spill
233c    movq    R10, [rsp + #48]	# spill
2341    movq    [rsp + #40], R10	# spill
2346    movq    [rsp + #48], R11	# spill
234b    movl    [rsp + #56], RDI	# spill
        nop 	# 1 bytes pad for loops and calls
2350    call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # App::micro_vector_masked @ bci:30 (line 37) L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #40 L[4]=#0 L[5]=_ L[6]=_ L[7]=rsp + #48 L[8]=#0 L[9]=_ STK[0]=#0 STK[1]=rsp + #56
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop off=9048/0x2358}
2358    stop	# ShouldNotReachHere

236c    B324: #	out( N5788 ) <- in( B14 )  Freq: 9.00688e-07
236c    stop	# ShouldNotReachHere

2380    B325: #	out( N5788 ) <- in( B15 )  Freq: 9.00687e-07
2380    stop	# ShouldNotReachHere

2394    B326: #	out( B327 ) <- in( B56 )  Freq: 9.00582e-07
2394    movl    RDX, [rsp + #32]	# spill

2398    B327: #	out( N5788 ) <- in( B326 B55 )  Freq: 1.80116e-06
2398    movl    RSI, #-138	# int
239d    movq    RBP, [rsp + #24]	# spill
23a2    pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #24]
23ac    movq    [rsp + #32], R14	# spill
23b1    movq    [rsp + #40], R13	# spill
23b6    movl    [rsp + #48], R8	# spill
23bb    movq    [rsp + #56], R9	# spill
23c0    movq    [rsp + #64], RCX	# spill
23c5    movl    [rsp + #52], RDX	# spill
23c9    movq    [rsp + #72], R10	# spill
        nop 	# 2 bytes pad for loops and calls
23d0    call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromLong @ bci:104 (line 255) L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #56 L[4]=_ L[5]=rsp + #72 L[6]=_ L[7]=rsp + #64 L[8]=#0 STK[0]=#0 STK[1]=rsp + #52
        # App::micro_vector_masked @ bci:149 (line 51) L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #40 L[4]=rsp + #48 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop [64]=Oop off=9176/0x23d8}
23d8    stop	# ShouldNotReachHere

23ec    B328: #	out( B81 ) <- in( B59 )  Freq: 9.00581e-07
23ec    movl    R10, #1	# int
23f2    movl    RDX, #1	# int
23f7    jmp     B81

23fc    B329: #	out( N5788 ) <- in( B60 )  Freq: 8.88778e-07
23fc    stop	# ShouldNotReachHere

2410    B330: #	out( N5788 ) <- in( B61 )  Freq: 8.88777e-07
2410    stop	# ShouldNotReachHere

2424    B331: #	out( N5788 ) <- in( B187 )  Freq: 7.59885e-07
2424    movl    RSI, #-83	# int
2429    movq    RBP, [rsp + #24]	# spill
242e    movq    R10, [rsp + #56]	# spill
2433    movq    [rsp + #24], R10	# spill
2438    movq    R10, [rsp + #40]	# spill
243d    movq    [rsp + #32], R10	# spill
2442    movq    R10, [rsp + #64]	# spill
2447    movq    [rsp + #48], R10	# spill
244c    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:9 (line 3663) L[0]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #104 STK[1]=rsp + #72 STK[2]=rsp + #76
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop off=9300/0x2454}
2454    stop	# ShouldNotReachHere

2468    B332: #	out( N5788 ) <- in( B192 B188 B213 B194 )  Freq: 1.50981e-06
2468    movl    RSI, #29	# int
246d    movq    RBP, [rsp + #24]	# spill
2472    movq    R10, [rsp + #56]	# spill
2477    movq    [rsp + #24], R10	# spill
247c    movq    R10, [rsp + #40]	# spill
2481    movq    [rsp + #32], R10	# spill
2486    movq    R10, [rsp + #64]	# spill
248b    movq    [rsp + #48], R10	# spill
2490    call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='29' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:76 (line 3670) L[0]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #104 STK[1]=rsp + #72 STK[2]=rsp + #76
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop off=9368/0x2498}
2498    stop	# ShouldNotReachHere

24ac    B333: #	out( N5788 ) <- in( B186 )  Freq: 7.49927e-07
24ac    movl    RSI, #-34	# int
24b1    movq    RBP, RAX	# spill
24b4    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:1 (line 3311) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=9404/0x24bc}
24bc    stop	# ShouldNotReachHere

24d0    B334: #	out( B337 ) <- in( B35 )  Freq: 7.49811e-07
24d0    movq    R13, [rsp + #48]	# spill
24d5    jmp,s   B337

24d7    B335: #	out( B337 ) <- in( B36 )  Freq: 7.59767e-07
24d7    movq    R13, [rsp + #48]	# spill
24dc    jmp,s   B337

24de    B336: #	out( B337 ) <- in( B34 )  Freq: 7.59768e-07
24de    movq    R13, [rsp + #48]	# spill

24e3    B337: #	out( N5788 ) <- in( B40 B336 B334 B335 B338 B38 B39 )  Freq: 5.27853e-06
24e3    movl    RSI, #-138	# int
24e8    movq    RBP, [rsp + #24]	# spill
24ed    movq    [rsp + #32], R14	# spill
24f2    movq    [rsp + #40], R13	# spill
24f7    movl    [rsp + #48], R10	# spill
24fc    call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # App::micro_vector_masked @ bci:70 (line 43) L[0]=RBP L[1]=rsp + #56 L[2]=rsp + #32 L[3]=rsp + #40 L[4]=#0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#0 STK[1]=rsp + #48
        # OopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop off=9476/0x2504}
2504    stop	# ShouldNotReachHere

2518    B338: #	out( B337 ) <- in( B37 )  Freq: 7.49809e-07
2518    movq    R13, [rsp + #48]	# spill
251d    jmp,s   B337

251f    B339: #	out( B422 B340 ) <- in( B130 )  Freq: 6.60339e-07
251f    vmovdqu [rsp + 128],XMM3	# spill
2528    movq    RSI, precise klass [I: 0x00007f03fc45aa50:Constant:exact *	# ptr
2532    movl    RDX, #8	# int
        nop 	# 1 bytes pad for loops and calls
2538    call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::blendTemplate @ bci:26 (line 1895) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007f03803e3dd0 STK[1]=#Ptr0x00007f03fc6e79c0 STK[2]=#Ptr0x00007f03803e5960 STK[3]=#8 STK[4]=#Ptr0x00007f036c040e60 STK[5]=#ScObj0 STK[6]=RBP STK[7]=#Ptr0x00007f03fc6ea290
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #128 }
        # jdk.incubator.vector.Int256Vector::blend @ bci:11 (line 376) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::blend @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:40 (line 2723) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #56 L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [56]=Oop [80]=Oop [160]=Oop off=9536/0x2540}

2540    B340: #	out( B132 ) <- in( B339 )  Freq: 6.60326e-07
        # Block is sole successor of call
2540    movq    R10, RAX	# spill
2543    vmovdqu XMM3,[rsp + 128]	# spill
254c    jmp     B132

2551    B341: #	out( B423 B342 ) <- in( B132 )  Freq: 6.60339e-07
2551    movq    RSI, precise klass jdk/incubator/vector/Int256Vector: 0x00007f036c330ed0:Constant:exact *	# ptr
255b    vmovdqu [rsp + 128],XMM3	# spill
2564    call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.IntVector::blendTemplate @ bci:26 (line 1895) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007f03803e3dd0 STK[1]=#Ptr0x00007f03fc6e79c0 STK[2]=#Ptr0x00007f03803e5960 STK[3]=#8 STK[4]=#Ptr0x00007f036c040e60 STK[5]=#ScObj0 STK[6]=RBP STK[7]=#Ptr0x00007f03fc6ea290
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #128 }
        # jdk.incubator.vector.Int256Vector::blend @ bci:11 (line 376) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::blend @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:40 (line 2723) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #56 L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [24]=Oop [56]=Oop [80]=Oop [160]=Oop off=9580/0x256c}

256c    B342: #	out( B134 ) <- in( B341 )  Freq: 6.60326e-07
        # Block is sole successor of call
256c    movq    R11, RAX	# spill
256f    jmp     B134

2574    B343: #	out( N5788 ) <- in( B185 )  Freq: 5.06591e-07
2574    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
257c    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:50 (line 2727) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=_ STK[4]=#NULL
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {off=9604/0x2584}
2584    stop	# ShouldNotReachHere

2598    B344: #	out( N5788 ) <- in( B31 )  Freq: 4.99974e-07
2598    movl    RSI, #-187	# int
259d    pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #32]
25a7    movl    [rsp + #56], R11	# spill
25ac    movl    [rsp + #60], RBX	# spill
25b0    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::roundDown @ bci:5 (line 106) L[0]=rsp + #60 L[1]=rsp + #56 STK[0]=RBP
        # jdk.incubator.vector.AbstractSpecies::loopBound @ bci:5 (line 203) L[0]=_ L[1]=_
        # App::micro_vector_masked @ bci:65 (line 43) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=#0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#0
        # OopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop off=9656/0x25b8}
25b8    stop	# ShouldNotReachHere

25cc    B345: #	out( N5788 ) <- in( B95 )  Freq: 4.99952e-07
25cc    movl    RSI, #-33	# int
25d1    pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #32]
25db    pushq   [rsp + #64]	# 64-bit mem-mem spill
	popq    [rsp + #56]
25e5    movl    [rsp + #52], RBX	# spill
25e9    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #72]
	movl    [rsp + #64], rax
	movq    rax, [rsp - #8]
25fb    movl    [rsp + #68], RDI	# spill
        nop 	# 1 bytes pad for loops and calls
2600    call,static  wrapper for: uncommon_trap(reason='class_check' action='none' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:14 (line 2721) L[0]=_ L[1]=rsp + #56 L[2]=rsp + #64 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_ STK[0]=rsp + #52 STK[1]=RBP STK[2]=rsp + #68
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #52 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {[24]=Oop [32]=Oop [40]=Oop [56]=Oop [68]=NarrowOop [80]=Oop [88]=Oop off=9736/0x2608}
2608    stop	# ShouldNotReachHere

261c    B346: #	out( N5788 ) <- in( B47 )  Freq: 4.76805e-07
261c    movl    RSI, #-187	# int
2621    movq    RBP, [rsp + #24]	# spill
2626    pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #24]
2630    movq    [rsp + #32], R14	# spill
2635    movq    [rsp + #40], R13	# spill
263a    movl    [rsp + #48], R8	# spill
263f    movq    [rsp + #56], R9	# spill
2644    movl    [rsp + #64], R11	# spill
2649    movq    [rsp + #72], R10	# spill
        nop 	# 2 bytes pad for loops and calls
2650    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromLong @ bci:15 (line 242) L[0]=_ L[1]=rsp + #72 L[2]=_ L[3]=rsp + #56 L[4]=rsp + #64 L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=rsp + #64 STK[1]=#64
        # App::micro_vector_masked @ bci:149 (line 51) L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #40 L[4]=rsp + #48 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop off=9816/0x2658}
2658    stop	# ShouldNotReachHere

266c    B347: #	out( N5788 ) <- in( B48 )  Freq: 4.76805e-07
266c    cmpq    R10, RBP	# CmpL3
	movl    RBP, -1
	jl,s    done
	setne   RBP
	movzbl  RBP, RBP
	done:
267e    movl    RSI, #-187	# int
2683    pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #32]
268d    movq    [rsp + #40], R14	# spill
2692    movq    [rsp + #48], R13	# spill
2697    movl    [rsp + #56], R8	# spill
269c    movq    [rsp + #64], R9	# spill
26a1    movl    [rsp + #60], R11	# spill
26a6    movq    [rsp + #72], R10	# spill
        nop 	# 1 bytes pad for loops and calls
26ac    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromLong @ bci:40 (line 247) L[0]=_ L[1]=rsp + #72 L[2]=_ L[3]=rsp + #64 L[4]=rsp + #60 L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=RBP
        # App::micro_vector_masked @ bci:149 (line 51) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=rsp + #56 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [64]=Oop off=9908/0x26b4}
26b4    stop	# ShouldNotReachHere

26c8    B348: #	out( N5788 ) <- in( B97 )  Freq: 2.53295e-07
26c8    movl    RSI, #-83	# int
26cd    movq    RBP, [rsp + #24]	# spill
26d2    movq    R10, [rsp + #56]	# spill
26d7    movq    [rsp + #24], R10	# spill
26dc    movq    R10, [rsp + #40]	# spill
26e1    movq    [rsp + #32], R10	# spill
26e6    movq    R10, [rsp + #64]	# spill
26eb    movq    [rsp + #48], R10	# spill
26f0    movq    [rsp + #64], RAX	# spill
        nop 	# 3 bytes pad for loops and calls
26f8    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::zero @ bci:9 (line 3649) L[0]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:25 (line 2722) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #64
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop [80]=Oop off=9984/0x2700}
2700    stop	# ShouldNotReachHere

2714    B349: #	out( N5788 ) <- in( B102 B98 B183 B104 )  Freq: 5.0327e-07
2714    movl    RSI, #29	# int
2719    movq    RBP, [rsp + #24]	# spill
271e    movq    R10, [rsp + #56]	# spill
2723    movq    [rsp + #24], R10	# spill
2728    movq    R10, [rsp + #40]	# spill
272d    movq    [rsp + #32], R10	# spill
2732    movq    R10, [rsp + #64]	# spill
2737    movq    [rsp + #48], R10	# spill
273c    movq    [rsp + #64], RAX	# spill
        nop 	# 3 bytes pad for loops and calls
2744    call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='29' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::zero @ bci:76 (line 3656) L[0]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:25 (line 2722) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #64
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop [80]=Oop off=10060/0x274c}
274c    stop	# ShouldNotReachHere

2760    B350: #	out( N5788 ) <- in( B197 )  Freq: 2.13782e-07
2760    movl    RSI, #-34	# int
2765    movq    RBP, RAX	# spill
2768    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::length @ bci:4 (line 154) L[0]=_ L[1]=_ STK[0]=RBP
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:8 (line 220) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=10096/0x2770}
2770    stop	# ShouldNotReachHere

2784    B351: #	out( B421 B352 ) <- in( B135 )  Freq: 1.98089e-07
2784    movq    RSI, precise klass jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58: 0x00007f038026a490:Constant:exact *	# ptr
        nop 	# 2 bytes pad for loops and calls
2790    call,static  wrapper for: _new_instance_Java
        # java.lang.invoke.DirectMethodHandle::allocateInstance @ bci:12 (line 522) L[0]=_ L[1]=_
        # java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial @ bci:1 L[0]=#Ptr0x00007f03fc543c00 L[1]=rsp + #40 L[2]=rsp + #72 L[3]=_ L[4]=_
        # java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod @ bci:6 L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:59 (line 2728) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=rsp + #64 STK[1]=rsp + #80
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #56 L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop [160]=Oop off=10136/0x2798}

2798    B352: #	out( B137 ) <- in( B351 )  Freq: 1.98085e-07
        # Block is sole successor of call
2798    movq    RCX, RAX	# spill
        nop 	# 5 bytes pad for loops and calls
27a0    jmp     B137

27a5    B353: #	out( N5788 ) <- in( B209 )  Freq: 1.92392e-07
27a5    movl    RSI, #-34	# int
27aa    movq    RBP, R8	# spill
        nop 	# 3 bytes pad for loops and calls
27b0    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:162 (line 242) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=10168/0x27b8}
27b8    stop	# ShouldNotReachHere

27cc    B354: #	out( N5788 ) <- in( B211 )  Freq: 1.92388e-07
27cc    movl    RSI, #-20	# int
27d1    movq    RBP, [rsp + #24]	# spill
27d6    movq    R10, [rsp + #56]	# spill
27db    movq    [rsp + #24], R10	# spill
27e0    movq    R10, [rsp + #40]	# spill
27e5    movq    [rsp + #32], R10	# spill
27ea    movl    R11, [rsp + #72]	# spill
27ef    movq    R10, [rsp + #64]	# spill
27f4    movq    [rsp + #48], R10	# spill
27f9    movl    [rsp + #44], R11	# spill
27fe    movq    R10, [rsp + #80]	# spill
2803    movq    [rsp + #64], R10	# spill
2808    movq    [rsp + #80], RAX	# spill
        nop 	# 3 bytes pad for loops and calls
2810    call,static  wrapper for: uncommon_trap(reason='null_assert_or_unreached0' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:174 (line 243) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #80
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #44 L[3]=rsp + #64 L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #44 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #64
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop [80]=Oop [88]=Oop off=10264/0x2818}
2818    stop	# ShouldNotReachHere

282c    B355: #	out( N5788 ) <- in( B191 )  Freq: 1.08564e-07
282c    movl    RSI, #-83	# int
2831    movq    RBP, [rsp + #24]	# spill
2836    movq    R10, [rsp + #56]	# spill
283b    movq    [rsp + #24], R10	# spill
2840    movq    R10, [rsp + #40]	# spill
2845    movq    [rsp + #32], R10	# spill
284a    movq    R10, [rsp + #64]	# spill
284f    movq    [rsp + #48], R10	# spill
2854    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:60 (line 3665) L[0]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #104 STK[1]=rsp + #72 STK[2]=rsp + #76
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop off=10332/0x285c}
285c    stop	# ShouldNotReachHere

2870    B356: #	out( N5788 ) <- in( B199 )  Freq: 1.06891e-07
2870    vmovdqu XMM1,XMM0	# spill
2874    movl    RSI, #-83	# int
2879    movq    RBP, [rsp + #24]	# spill
287e    movq    R10, [rsp + #56]	# spill
2883    movq    [rsp + #24], R10	# spill
2888    movq    R10, [rsp + #40]	# spill
288d    movq    [rsp + #32], R10	# spill
2892    movq    R10, [rsp + #64]	# spill
2897    movq    [rsp + #48], R10	# spill
289c    vmovdqu [rsp + 128],XMM1	# spill
28a5    vmovdqu [rsp + 160],XMM2	# spill
        nop 	# 2 bytes pad for loops and calls
28b0    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.Int256Vector$Int256Mask::or @ bci:22 (line 652) L[0]=_ L[1]=_ L[2]=_ STK[0]=#11 STK[1]=#Ptr0x00007f03fc6e79c0 STK[2]=#Ptr0x00007f03803e5960 STK[3]=#8 STK[4]=#ScObj0 STK[5]=#ScObj1
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #160 }
        # ScObj1 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #128 }
        # jdk.incubator.vector.Int256Vector$Int256Mask::or @ bci:2 (line 528) L[0]=_ L[1]=_
        # jdk.incubator.vector.AbstractMask::checkIndex0 @ bci:78 (line 272) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:25 (line 223) L[0]=rsp + #104 L[1]=rsp + #72 L[2]=rsp + #76 L[3]=_ L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop off=10424/0x28b8}
28b8    stop	# ShouldNotReachHere

28cc    B357: #	out( N5788 ) <- in( B116 )  Freq: 9.26391e-08
28cc    movl    RSI, #-34	# int
28d1    movl    RBP, R10	# spill
28d4    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:1 (line 2720) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=RBP
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=NarrowOop off=10460/0x28dc}
28dc    stop	# ShouldNotReachHere

28f0    B358: #	out( N5788 ) <- in( B105 )  Freq: 7.12623e-08
28f0    movl    RSI, #-34	# int
28f5    movq    RBP, RAX	# spill
28f8    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::blend @ bci:8 (line 375) L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=RBP
        # jdk.incubator.vector.Int256Vector::blend @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:40 (line 2723) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=10496/0x2900}
2900    stop	# ShouldNotReachHere

2914    B359: #	out( N5788 ) <- in( B155 )  Freq: 7.04017e-08
2914    movl    RSI, #-83	# int
2919    movq    RBP, [rsp + #56]	# spill
291e    movl    R9, [rsp + #72]	# spill
2923    movq    [rsp + #32], R8	# spill
2928    movl    [rsp + #28], R9	# spill
292d    movl    [rsp + #40], R9	# spill
2932    movq    R8, [rsp + #80]	# spill
2937    movq    [rsp + #72], R8	# spill
293c    movq    [rsp + #80], R10	# spill
2941    movl    [rsp + #44], R11	# spill
        nop 	# 2 bytes pad for loops and calls
2948    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:9 (line 3663) L[0]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #80 STK[1]=rsp + #28 STK[2]=rsp + #44
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #72 L[4]=rsp + #64 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #28 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #72
        # OopMap {rbp=Oop [32]=Oop [64]=Oop [72]=Oop [80]=Oop [160]=Oop off=10576/0x2950}
2950    stop	# ShouldNotReachHere

2964    B360: #	out( N5788 ) <- in( B160 B156 B181 B162 )  Freq: 1.39881e-07
2964    movl    RSI, #29	# int
2969    movq    RBP, [rsp + #56]	# spill
296e    movl    RCX, [rsp + #72]	# spill
2972    movq    [rsp + #32], R8	# spill
2977    movl    [rsp + #28], RCX	# spill
297b    movl    [rsp + #40], RCX	# spill
297f    movq    R8, [rsp + #80]	# spill
2984    movq    [rsp + #72], R8	# spill
2989    movq    [rsp + #80], R10	# spill
298e    movl    [rsp + #44], R11	# spill
        nop 	# 1 bytes pad for loops and calls
2994    call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='29' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:76 (line 3670) L[0]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #80 STK[1]=rsp + #28 STK[2]=rsp + #44
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #72 L[4]=rsp + #64 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #28 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #72
        # OopMap {rbp=Oop [32]=Oop [64]=Oop [72]=Oop [80]=Oop [160]=Oop off=10652/0x299c}
299c    stop	# ShouldNotReachHere

29b0    B361: #	out( N5788 ) <- in( B154 )  Freq: 6.94792e-08
29b0    movl    RSI, #-34	# int
29b5    movq    RBP, [rsp + #80]	# spill
        nop 	# 2 bytes pad for loops and calls
29bc    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:1 (line 3311) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=10692/0x29c4}
29c4    stop	# ShouldNotReachHere

29d8    B362: #	out( N5788 ) <- in( B153 )  Freq: 4.69346e-08
29d8    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
29e0    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:50 (line 2727) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=_ STK[4]=#NULL
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {off=10728/0x29e8}
29e8    stop	# ShouldNotReachHere

29fc    B363: #	out( N5788 ) <- in( B119 )  Freq: 4.63195e-08
29fc    movl    RSI, #-33	# int
2a01    movq    R10, [rsp + #56]	# spill
2a06    movq    [rsp + #24], R10	# spill
2a0b    movl    R10, [rsp + #72]	# spill
2a10    movl    [rsp + #36], R10	# spill
2a15    movl    [rsp + #48], R10	# spill
2a1a    movl    [rsp + #52], R8	# spill
        nop 	# 1 bytes pad for loops and calls
2a20    call,static  wrapper for: uncommon_trap(reason='class_check' action='none' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:14 (line 2721) L[0]=_ L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #80 L[4]=rsp + #64 L[5]=_ STK[0]=rsp + #36 STK[1]=RBP STK[2]=rsp + #52
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_ L[4]=rsp + #36 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {[24]=Oop [40]=Oop [52]=NarrowOop [64]=Oop [80]=Oop [160]=Oop off=10792/0x2a28}
2a28    stop	# ShouldNotReachHere

2a3c    B364: #	out( N5788 ) <- in( B101 )  Freq: 3.61879e-08
2a3c    movl    RSI, #-83	# int
2a41    movq    RBP, [rsp + #24]	# spill
2a46    movq    R10, [rsp + #56]	# spill
2a4b    movq    [rsp + #24], R10	# spill
2a50    movq    R10, [rsp + #40]	# spill
2a55    movq    [rsp + #32], R10	# spill
2a5a    movq    R10, [rsp + #64]	# spill
2a5f    movq    [rsp + #48], R10	# spill
2a64    movq    [rsp + #64], RAX	# spill
        nop 	# 3 bytes pad for loops and calls
2a6c    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::zero @ bci:60 (line 3651) L[0]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:25 (line 2722) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #64
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop [80]=Oop off=10868/0x2a74}
2a74    stop	# ShouldNotReachHere

2a88    B365: #	out( B458 B366 ) <- in( B235 )  Freq: 2.44691e-08
2a88    vmovdqu [rsp + 96],XMM2	# spill
2a8e    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #72]
	movl    [rsp + #36], rax
	movq    rax, [rsp - #8]
2aa0    movq    RSI, precise klass [Z: 0x00007f03fc45a840:Constant:exact *	# ptr
2aaa    movl    RDX, #8	# int
        nop 	# 1 bytes pad for loops and calls
2ab0    call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:140 (line 239) L[0]=_ L[1]=rsp + #36 L[2]=rsp + #168 L[3]=_ L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#ScObj0 STK[1]=rsp + #64
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #96 }
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=rsp + #40 L[1]=rsp + #56 L[2]=rsp + #36 L[3]=rsp + #80 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop off=10936/0x2ab8}

2ab8    B366: #	out( B237 ) <- in( B365 )  Freq: 2.44686e-08
        # Block is sole successor of call
2ab8    movl    R11, [rsp + #36]	# spill
2abd    vmovdqu XMM2,[rsp + 96]	# spill
2ac3    movq    R8, RAX	# spill
2ac6    jmp     B237

2acb    B367: #	out( B458 B368 ) <- in( B237 )  Freq: 2.44691e-08
2acb    movq    [rsp + #24], R8	# spill
2ad0    vmovdqu [rsp + 96],XMM2	# spill
2ad6    movl    [rsp + #36], R11	# spill
2adb    movq    RSI, precise klass jdk/incubator/vector/Int256Vector$Int256Mask: 0x00007f03fc6e78f0:Constant:exact *	# ptr
        nop 	# 3 bytes pad for loops and calls
2ae8    call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:140 (line 239) L[0]=_ L[1]=rsp + #36 L[2]=rsp + #168 L[3]=_ L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#ScObj0 STK[1]=rsp + #64
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #96 }
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=rsp + #40 L[1]=rsp + #56 L[2]=rsp + #36 L[3]=rsp + #80 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop off=10992/0x2af0}

2af0    B368: #	out( B239 ) <- in( B367 )  Freq: 2.44686e-08
        # Block is sole successor of call
2af0    movq    R8, [rsp + #24]	# spill
2af5    jmp     B239

2afa    B369: #	out( N5788 ) <- in( B121 )  Freq: 2.34672e-08
2afa    movl    RSI, #-83	# int
2aff    movq    RBP, [rsp + #56]	# spill
2b04    movq    R10, [rsp + #40]	# spill
2b09    movq    [rsp + #32], R10	# spill
2b0e    movq    R10, [rsp + #80]	# spill
2b13    movq    [rsp + #56], R10	# spill
2b18    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::zero @ bci:9 (line 3649) L[0]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:25 (line 2722) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #56
        # OopMap {rbp=Oop [32]=Oop [56]=Oop [80]=Oop [160]=Oop off=11040/0x2b20}
2b20    stop	# ShouldNotReachHere

2b34    B370: #	out( N5788 ) <- in( B126 B122 B150 B128 )  Freq: 4.66269e-08
2b34    movl    RSI, #29	# int
2b39    movq    RBP, [rsp + #56]	# spill
2b3e    movq    R10, [rsp + #40]	# spill
2b43    movq    [rsp + #32], R10	# spill
2b48    movq    R10, [rsp + #80]	# spill
2b4d    movq    [rsp + #56], R10	# spill
        nop 	# 2 bytes pad for loops and calls
2b54    call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='29' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::zero @ bci:76 (line 3656) L[0]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:25 (line 2722) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #56
        # OopMap {rbp=Oop [32]=Oop [56]=Oop [80]=Oop [160]=Oop off=11100/0x2b5c}
2b5c    stop	# ShouldNotReachHere

2b70    B371: #	out( N5788 ) <- in( B165 )  Freq: 1.98065e-08
2b70    movl    RSI, #-34	# int
2b75    movq    RBP, R8	# spill
2b78    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::length @ bci:4 (line 154) L[0]=_ L[1]=_ STK[0]=RBP
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:8 (line 220) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=11136/0x2b80}
2b80    stop	# ShouldNotReachHere

2b94    B372: #	out( N5788 ) <- in( B179 )  Freq: 1.8061e-08
2b94    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
2b9c    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:174 (line 243) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {off=11172/0x2ba4}
2ba4    stop	# ShouldNotReachHere

2bb8    B373: #	out( N5788 ) <- in( B177 )  Freq: 1.78247e-08
2bb8    movl    RSI, #-34	# int
        nop 	# 3 bytes pad for loops and calls
2bc0    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:162 (line 242) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=11208/0x2bc8}
2bc8    stop	# ShouldNotReachHere

2bdc    B374: #	out( N5788 ) <- in( B159 )  Freq: 1.00582e-08
2bdc    movl    RSI, #-83	# int
2be1    movq    RBP, [rsp + #56]	# spill
2be6    movl    RCX, [rsp + #72]	# spill
2bea    movq    [rsp + #32], R8	# spill
2bef    movl    [rsp + #28], RCX	# spill
2bf3    movl    [rsp + #40], RCX	# spill
2bf7    movq    R8, [rsp + #80]	# spill
2bfc    movq    [rsp + #72], R8	# spill
2c01    movq    [rsp + #80], R10	# spill
2c06    movl    [rsp + #44], R11	# spill
        nop 	# 1 bytes pad for loops and calls
2c0c    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:60 (line 3665) L[0]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #80 STK[1]=rsp + #28 STK[2]=rsp + #44
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #72 L[4]=rsp + #64 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #28 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #72
        # OopMap {rbp=Oop [32]=Oop [64]=Oop [72]=Oop [80]=Oop [160]=Oop off=11284/0x2c14}
2c14    stop	# ShouldNotReachHere

2c28    B375: #	out( N5788 ) <- in( B167 )  Freq: 9.90323e-09
2c28    vmovdqu XMM1,XMM0	# spill
2c2c    movl    RSI, #-83	# int
2c31    movq    RBP, [rsp + #56]	# spill
2c36    movq    R11, [rsp + #40]	# spill
2c3b    movq    [rsp + #32], R11	# spill
2c40    vmovdqu [rsp + 96],XMM1	# spill
2c46    vmovdqu [rsp + 128],XMM2	# spill
        nop 	# 1 bytes pad for loops and calls
2c50    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.Int256Vector$Int256Mask::or @ bci:22 (line 652) L[0]=_ L[1]=_ L[2]=_ STK[0]=#11 STK[1]=#Ptr0x00007f03fc6e79c0 STK[2]=#Ptr0x00007f03803e5960 STK[3]=#8 STK[4]=#ScObj0 STK[5]=#ScObj1
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #128 }
        # ScObj1 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #96 }
        # jdk.incubator.vector.Int256Vector$Int256Mask::or @ bci:2 (line 528) L[0]=_ L[1]=_
        # jdk.incubator.vector.AbstractMask::checkIndex0 @ bci:78 (line 272) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:25 (line 223) L[0]=rsp + #88 L[1]=rsp + #72 L[2]=rsp + #76 L[3]=_ L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #64 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [32]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop off=11352/0x2c58}
2c58    stop	# ShouldNotReachHere

2c6c    B376: #	out( N5788 ) <- in( B139 )  Freq: 8.69679e-09
2c6c    movl    RSI, #-10	# int
2c71    movq    RBP, R11	# spill
2c74    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # App::micro_vector_masked @ bci:188 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #80
        # OopMap {rbp=Oop [80]=Oop off=11388/0x2c7c}
2c7c    stop	# ShouldNotReachHere

2c90    B377: #	out( N5788 ) <- in( B147 )  Freq: 7.82661e-09
2c90    movl    RSI, #-28	# int
2c95    movq    [rsp + #32], R8	# spill
2c9a    movl    [rsp + #28], R11	# spill
        nop 	# 1 bytes pad for loops and calls
2ca0    call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 359) L[0]=_ L[1]=_ STK[0]=rsp + #72 STK[1]=rsp + #28 STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 74) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:7 (line 2960) L[0]=rsp + #32 L[1]=rsp + #56 L[2]=_ L[3]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:10 (line 3001) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[32]=Oop [56]=Oop off=11432/0x2ca8}
2ca8    stop	# ShouldNotReachHere

2cbc    B378: #	out( N5788 ) <- in( B145 )  Freq: 7.72406e-09
2cbc    movl    RSI, #-34	# int
        nop 	# 3 bytes pad for loops and calls
2cc4    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::intoArray @ bci:2 (line 2960) L[0]=rsp + #40 L[1]=rsp + #56 L[2]=_ L[3]=_ STK[0]=rsp + #72 STK[1]=rsp + #40
        # jdk.incubator.vector.IntVector::intoArray @ bci:10 (line 3001) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[40]=Oop [56]=Oop off=11468/0x2ccc}
2ccc    stop	# ShouldNotReachHere

2ce0    B379: #	out( N5788 ) <- in( B146 )  Freq: 7.72405e-09
2ce0    movl    RSI, #-52	# int
2ce5    movq    [rsp + #32], R8	# spill
        nop 	# 2 bytes pad for loops and calls
2cec    call,static  wrapper for: uncommon_trap(reason='intrinsic_or_type_checked_inlining' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 359) L[0]=_ L[1]=_ STK[0]=rsp + #72 STK[1]=rsp + #172 STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 74) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:7 (line 2960) L[0]=rsp + #32 L[1]=rsp + #56 L[2]=_ L[3]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:10 (line 3001) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[32]=Oop [56]=Oop off=11508/0x2cf4}
2cf4    stop	# ShouldNotReachHere

2d08    B380: #	out( N5788 ) <- in( B129 )  Freq: 6.6023e-09
2d08    movl    RSI, #-34	# int
2d0d    movq    RBP, [rsp + #80]	# spill
        nop 	# 2 bytes pad for loops and calls
2d14    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::blend @ bci:8 (line 375) L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=RBP
        # jdk.incubator.vector.Int256Vector::blend @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:40 (line 2723) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=11548/0x2d1c}
2d1c    stop	# ShouldNotReachHere

2d30    B381: #	out( N5788 ) <- in( B125 )  Freq: 3.35273e-09
2d30    movl    RSI, #-83	# int
2d35    movq    RBP, [rsp + #56]	# spill
2d3a    movq    R10, [rsp + #40]	# spill
2d3f    movq    [rsp + #32], R10	# spill
2d44    movq    R10, [rsp + #80]	# spill
2d49    movq    [rsp + #56], R10	# spill
        nop 	# 2 bytes pad for loops and calls
2d50    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::zero @ bci:60 (line 3651) L[0]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:25 (line 2722) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #56
        # OopMap {rbp=Oop [32]=Oop [56]=Oop [80]=Oop [160]=Oop off=11608/0x2d58}
2d58    stop	# ShouldNotReachHere

2d6c    B382: #	out( N5788 ) <- in( B221 )  Freq: 8.69606e-10
2d6c    movl    RSI, #-83	# int
2d71    movq    RBP, [rsp + #56]	# spill
2d76    movq    R11, [rsp + #40]	# spill
2d7b    movq    [rsp + #32], R11	# spill
2d80    movq    [rsp + #48], R10	# spill
        nop 	# 3 bytes pad for loops and calls
2d88    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:9 (line 3663) L[0]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #48 STK[1]=rsp + #72 STK[2]=rsp + #168
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #72 L[3]=rsp + #64 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [32]=Oop [48]=Oop [64]=Oop off=11664/0x2d90}
2d90    stop	# ShouldNotReachHere

2da4    B383: #	out( N5788 ) <- in( B226 B222 B247 B228 )  Freq: 1.72781e-09
2da4    movl    RSI, #29	# int
2da9    movq    RBP, [rsp + #56]	# spill
2dae    movq    R11, [rsp + #40]	# spill
2db3    movq    [rsp + #32], R11	# spill
2db8    movq    [rsp + #48], R10	# spill
        nop 	# 3 bytes pad for loops and calls
2dc0    call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='29' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:76 (line 3670) L[0]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #48 STK[1]=rsp + #72 STK[2]=rsp + #168
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #72 L[3]=rsp + #64 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [32]=Oop [48]=Oop [64]=Oop off=11720/0x2dc8}
2dc8    stop	# ShouldNotReachHere

2ddc    B384: #	out( N5788 ) <- in( B219 )  Freq: 8.58212e-10
2ddc    movl    RSI, #-34	# int
2de1    movq    RBP, [rsp + #64]	# spill
        nop 	# 2 bytes pad for loops and calls
2de8    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:1 (line 3311) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=11760/0x2df0}
2df0    stop	# ShouldNotReachHere

2e04    B385: #	out( N5788 ) <- in( B231 )  Freq: 2.44651e-10
2e04    movl    RSI, #-34	# int
2e09    movq    RBP, R8	# spill
2e0c    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::length @ bci:4 (line 154) L[0]=_ L[1]=_ STK[0]=RBP
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:8 (line 220) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=11796/0x2e14}
2e14    stop	# ShouldNotReachHere

2e28    B386: #	out( N5788 ) <- in( B245 )  Freq: 2.23091e-10
2e28    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
2e30    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:174 (line 243) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {off=11832/0x2e38}
2e38    stop	# ShouldNotReachHere

2e4c    B387: #	out( N5788 ) <- in( B243 )  Freq: 2.20172e-10
2e4c    movl    RSI, #-34	# int
2e51    movq    RBP, R9	# spill
2e54    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:162 (line 242) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=11868/0x2e5c}
2e5c    stop	# ShouldNotReachHere

2e70    B388: #	out( N5788 ) <- in( B225 )  Freq: 1.24239e-10
2e70    movl    RSI, #-83	# int
2e75    movq    RBP, [rsp + #56]	# spill
2e7a    movq    R11, [rsp + #40]	# spill
2e7f    movq    [rsp + #32], R11	# spill
2e84    movq    [rsp + #48], R10	# spill
        nop 	# 3 bytes pad for loops and calls
2e8c    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:60 (line 3665) L[0]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #48 STK[1]=rsp + #72 STK[2]=rsp + #168
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #72 L[3]=rsp + #64 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [32]=Oop [48]=Oop [64]=Oop off=11924/0x2e94}
2e94    stop	# ShouldNotReachHere

2ea8    B389: #	out( N5788 ) <- in( B233 )  Freq: 1.22325e-10
2ea8    vmovdqu XMM1,XMM0	# spill
2eac    movl    RSI, #-83	# int
2eb1    movq    RBP, [rsp + #56]	# spill
2eb6    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #72]
	movl    [rsp + #28], rax
	movq    rax, [rsp - #8]
2ec8    movq    R10, [rsp + #40]	# spill
2ecd    movq    [rsp + #32], R10	# spill
2ed2    movq    R10, [rsp + #80]	# spill
2ed7    movq    [rsp + #40], R10	# spill
2edc    movq    R10, [rsp + #64]	# spill
2ee1    movq    [rsp + #48], R10	# spill
2ee6    vmovdqu [rsp + 64],XMM1	# spill
2eec    vmovdqu [rsp + 96],XMM2	# spill
        nop 	# 2 bytes pad for loops and calls
2ef4    call,static  wrapper for: uncommon_trap(reason='uninitialized' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.Int256Vector$Int256Mask::or @ bci:22 (line 652) L[0]=_ L[1]=_ L[2]=_ STK[0]=#11 STK[1]=#Ptr0x00007f03fc6e79c0 STK[2]=#Ptr0x00007f03803e5960 STK[3]=#8 STK[4]=#ScObj0 STK[5]=#ScObj1
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #96 }
        # ScObj1 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #64 }
        # jdk.incubator.vector.Int256Vector$Int256Mask::or @ bci:2 (line 528) L[0]=_ L[1]=_
        # jdk.incubator.vector.AbstractMask::checkIndex0 @ bci:78 (line 272) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:25 (line 223) L[0]=rsp + #48 L[1]=rsp + #28 L[2]=rsp + #168 L[3]=_ L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #28 L[3]=rsp + #40 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [32]=Oop [40]=Oop [48]=Oop off=12028/0x2efc}
2efc    stop	# ShouldNotReachHere

2f10    B390: #	out( N5788 ) <- in( B253 )  Freq: 2.44641e-11
2f10    movl    RSI, #-34	# int
2f15    movl    R11, [rsp + #36]	# spill
2f1a    movl    [rsp + #24], R11	# spill
        nop 	# 1 bytes pad for loops and calls
2f20    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::stOp @ bci:1 (line 351) L[0]=_ L[1]=rsp + #56 L[2]=rsp + #24 L[3]=rsp + #80 L[4]=#Ptr0x00007f03801918b0 L[5]=_ L[6]=_ L[7]=_ STK[0]=rsp + #40
        # jdk.incubator.vector.IntVector::intoArray @ bci:41 (line 3006) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[40]=Oop [56]=Oop [80]=Oop off=12072/0x2f28}
2f28    stop	# ShouldNotReachHere

2f3c    B391: #	out( N5788 ) <- in( B261 B260 )  Freq: 4.37782e-11
2f3c    movl    RSI, #-138	# int
2f41    movl    R10, [rsp + #36]	# spill
2f46    movl    [rsp + #32], R10	# spill
2f4b    movq    [rsp + #40], R9	# spill
2f50    movl    [rsp + #36], RAX	# spill
2f54    call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::stOp @ bci:23 (line 353) L[0]=_ L[1]=rsp + #56 L[2]=rsp + #32 L[3]=_ L[4]=#Ptr0x00007f03801918b0 L[5]=rsp + #40 L[6]=RBP L[7]=#0 STK[0]=#0 STK[1]=rsp + #36
        # jdk.incubator.vector.IntVector::intoArray @ bci:41 (line 3006) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [40]=Oop [56]=Oop off=12124/0x2f5c}
2f5c    stop	# ShouldNotReachHere

2f70    B392: #	out( B393 ) <- in( B262 )  Freq: 2.20335e-11
2f70    movl    RBX, [rsp + #36]	# spill

2f74    B393: #	out( N5788 ) <- in( B264 B263 B392 )  Freq: 6.61003e-11
2f74    movl    RSI, #-66	# int
2f79    movl    [rsp + #32], RBX	# spill
2f7d    movq    [rsp + #40], R9	# spill
2f82    movl    [rsp + #36], RAX	# spill
        nop 	# 2 bytes pad for loops and calls
2f88    call,static  wrapper for: uncommon_trap(reason='profile_predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::stOp @ bci:23 (line 353) L[0]=_ L[1]=rsp + #56 L[2]=rsp + #32 L[3]=_ L[4]=#Ptr0x00007f03801918b0 L[5]=rsp + #40 L[6]=RBP L[7]=#0 STK[0]=#0 STK[1]=rsp + #36
        # jdk.incubator.vector.IntVector::intoArray @ bci:41 (line 3006) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [40]=Oop [56]=Oop off=12176/0x2f90}
2f90    stop	# ShouldNotReachHere

2fa4    B394: #	out( N5788 ) <- in( B269 )  Freq: 2.20333e-11
2fa4    stop	# ShouldNotReachHere

2fb8    B395: #	out( N5788 ) <- in( B272 )  Freq: 2.20333e-11
2fb8    stop	# ShouldNotReachHere

2fcc    B396: #	out( N5788 ) <- in( B268 )  Freq: 2.17446e-11
2fcc    stop	# ShouldNotReachHere

2fe0    B397: #	out( N5788 ) <- in( B270 )  Freq: 2.17446e-11
2fe0    stop	# ShouldNotReachHere

2ff4    B398: #	out( N5788 ) <- in( B271 )  Freq: 2.17446e-11
2ff4    stop	# ShouldNotReachHere

3008    B399: #	out( N5788 ) <- in( B273 )  Freq: 2.17445e-11
3008    stop	# ShouldNotReachHere

301c    B400: #	out( N5788 ) <- in( B255 )  Freq: 1e-35
301c    movl    RSI, #-34	# int
        nop 	# 3 bytes pad for loops and calls
3024    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::stOp @ bci:1 (line 351) L[0]=_ L[1]=rsp + #56 L[2]=rsp + #36 L[3]=rsp + #80 L[4]=#Ptr0x00007f03801918b0 L[5]=_ L[6]=_ L[7]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:41 (line 3006) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=NarrowOop [56]=Oop [80]=Oop off=12332/0x302c}
302c    stop	# ShouldNotReachHere

3040    B401: #	out( N5788 ) <- in( B256 )  Freq: 1e-35
3040    movl    RSI, #-34	# int
3045    movl    R11, [rsp + #36]	# spill
304a    movl    [rsp + #24], R11	# spill
304f    movq    [rsp + #32], R9	# spill
3054    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::stOp @ bci:7 (line 352) L[0]=_ L[1]=rsp + #56 L[2]=rsp + #24 L[3]=_ L[4]=#Ptr0x00007f03801918b0 L[5]=rsp + #32 L[6]=_ L[7]=_ STK[0]=rsp + #80
        # jdk.incubator.vector.IntVector::intoArray @ bci:41 (line 3006) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[32]=Oop [56]=Oop [80]=Oop off=12380/0x305c}
305c    stop	# ShouldNotReachHere

3070    B402: #	out( N5788 ) <- in( B258 )  Freq: 1e-35
3070    movl    RSI, #-34	# int
3075    movl    R11, [rsp + #36]	# spill
307a    movl    [rsp + #24], R11	# spill
307f    movq    [rsp + #32], R9	# spill
3084    movl    [rsp + #28], R8	# spill
        nop 	# 3 bytes pad for loops and calls
308c    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector$Int256Mask::getBits @ bci:4 (line 569) L[0]=_ STK[0]=rsp + #28
        # jdk.incubator.vector.IntVector::stOp @ bci:10 (line 352) L[0]=_ L[1]=rsp + #56 L[2]=rsp + #24 L[3]=_ L[4]=#Ptr0x00007f03801918b0 L[5]=rsp + #32 L[6]=_ L[7]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:41 (line 3006) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[28]=NarrowOop [32]=Oop [56]=Oop off=12436/0x3094}
3094    stop	# ShouldNotReachHere

30a8    B403: #	out( N5788 ) <- in( B1 )  Freq: 1.01328e-06
30a8    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
30b0    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # App::micro_vector_masked @ bci:13 (line 36) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap {off=12472/0x30b8}
30b8    stop	# ShouldNotReachHere

30cc    B404: #	out( N5788 ) <- in( B26 )  Freq: 1.01323e-06
30cc    movl    RSI, #-12	# int
30d1    movq    RBP, [rsp + #24]	# spill
30d6    movq    R10, [rsp + #40]	# spill
30db    movq    [rsp + #32], R10	# spill
30e0    call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:49 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL
        # App::micro_vector_masked @ bci:52 (line 40) L[0]=RBP L[1]=rsp + #56 L[2]=rsp + #32 L[3]=rsp + #48 L[4]=#0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [32]=Oop [48]=Oop [56]=Oop off=12520/0x30e8}
30e8    stop	# ShouldNotReachHere

30fc    B405: #	out( N5788 ) <- in( B28 )  Freq: 1.01323e-06
30fc    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
3104    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # App::micro_vector_masked @ bci:64 (line 43) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL
        # OopMap {off=12556/0x310c}
310c    stop	# ShouldNotReachHere

3120    B406: #	out( N5788 ) <- in( B29 )  Freq: 1.01323e-06
3120    movl    RSI, #-10	# int
3125    movl    RBP, RBX	# spill
        nop 	# 1 bytes pad for loops and calls
3128    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # App::micro_vector_masked @ bci:65 (line 43) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=#NULL STK[2]=RBP
        # OopMap {off=12592/0x3130}
3130    stop	# ShouldNotReachHere

3144    B407: #	out( N5788 ) <- in( B89 )  Freq: 1.01319e-06
3144    movl    RSI, #-12	# int
3149    movq    RBP, [rsp + #24]	# spill
        nop 	# 2 bytes pad for loops and calls
3150    call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:49 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL
        # jdk.incubator.vector.VectorMask::fromValues @ bci:17 (line 183) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.VectorMask::fromLong @ bci:141 (line 259) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # App::micro_vector_masked @ bci:149 (line 51) L[0]=RBP L[1]=rsp + #56 L[2]=rsp + #64 L[3]=rsp + #40 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop off=12632/0x3158}
3158    stop	# ShouldNotReachHere

316c    B408: #	out( N5788 ) <- in( B91 )  Freq: 1.01318e-06
316c    movl    RSI, #-12	# int
3171    movq    RBP, [rsp + #24]	# spill
3176    movq    R10, [rsp + #56]	# spill
317b    movq    [rsp + #24], R10	# spill
3180    movq    R10, [rsp + #40]	# spill
3185    movq    [rsp + #32], R10	# spill
318a    movq    R10, [rsp + #64]	# spill
318f    movq    [rsp + #48], R10	# spill
3194    movq    [rsp + #64], RAX	# spill
        nop 	# 3 bytes pad for loops and calls
319c    call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:1 (line 2720) L[0]=#NULL L[1]=rsp + #48 L[2]=rsp + #72 L[3]=rsp + #64 L[4]=_ L[5]=_ STK[0]=#NULL
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #64
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop off=12708/0x31a4}
31a4    stop	# ShouldNotReachHere

31b8    B409: #	out( N5788 ) <- in( B94 )  Freq: 5.06591e-07
31b8    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
31c0    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:12 (line 2721) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=_ STK[1]=#NULL
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {off=12744/0x31c8}
31c8    stop	# ShouldNotReachHere

31dc    B410: #	out( N5788 ) <- in( B196 )  Freq: 2.16621e-07
31dc    movl    RSI, #-12	# int
31e1    movq    RBP, [rsp + #24]	# spill
31e6    movq    R10, [rsp + #56]	# spill
31eb    movq    [rsp + #24], R10	# spill
31f0    movq    R10, [rsp + #40]	# spill
31f5    movq    [rsp + #32], R10	# spill
31fa    movq    R10, [rsp + #64]	# spill
31ff    movq    [rsp + #48], R10	# spill
3204    call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorMask::length @ bci:4 (line 154) L[0]=_ L[1]=_ STK[0]=#NULL
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:8 (line 220) L[0]=rsp + #104 L[1]=rsp + #72 L[2]=rsp + #76 L[3]=#Ptr0x00007f03801c5c30 L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop off=12812/0x320c}
320c    stop	# ShouldNotReachHere

3220    B411: #	out( N5788 ) <- in( B115 )  Freq: 9.38693e-08
3220    movl    RSI, #-12	# int
3225    movq    RBP, [rsp + #56]	# spill
322a    movq    R10, [rsp + #40]	# spill
322f    movq    [rsp + #32], R10	# spill
3234    movq    R10, [rsp + #80]	# spill
3239    movq    [rsp + #56], R10	# spill
        nop 	# 2 bytes pad for loops and calls
3240    call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:1 (line 2720) L[0]=#NULL L[1]=rsp + #32 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=_ L[5]=_ STK[0]=#NULL
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #56
        # OopMap {rbp=Oop [32]=Oop [56]=Oop [80]=Oop [160]=Oop off=12872/0x3248}
3248    stop	# ShouldNotReachHere

325c    B412: #	out( N5788 ) <- in( B118 )  Freq: 4.69346e-08
325c    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
3264    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:12 (line 2721) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=_ STK[1]=#NULL
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {off=12908/0x326c}
326c    stop	# ShouldNotReachHere

3280    B413: #	out( N5788 ) <- in( B164 )  Freq: 2.00695e-08
3280    movl    RSI, #-12	# int
3285    movq    RBP, [rsp + #56]	# spill
328a    movq    R10, [rsp + #40]	# spill
328f    movq    [rsp + #32], R10	# spill
3294    call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorMask::length @ bci:4 (line 154) L[0]=_ L[1]=_ STK[0]=#NULL
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:8 (line 220) L[0]=rsp + #88 L[1]=rsp + #72 L[2]=rsp + #76 L[3]=#Ptr0x00007f03801c5c30 L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #64 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #72 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [32]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop off=12956/0x329c}
329c    stop	# ShouldNotReachHere

32b0    B414: #	out( N5788 ) <- in( B142 )  Freq: 8.69643e-09
32b0    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
32b8    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=rsp + #56 STK[2]=rsp + #72 STK[3]=rsp + #64
        # OopMap {[56]=Oop [64]=Oop off=12992/0x32c0}
32c0    stop	# ShouldNotReachHere

32d4    B415: #	out( N5788 ) <- in( B220 )  Freq: 8.69607e-10
32d4    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
32dc    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=#NULL
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {off=13028/0x32e4}
32e4    stop	# ShouldNotReachHere

32f8    B416: #	out( N5788 ) <- in( B297 B299 )  Freq: 4.27635e-10
32f8    movl    RSI, #-105	# int
32fd    movq    RBP, [rsp + #24]	# spill
3302    movq    R10, [rsp + #56]	# spill
3307    movq    [rsp + #24], R10	# spill
330c    movq    R10, [rsp + #40]	# spill
3311    movq    [rsp + #32], R10	# spill
3316    movq    R10, [rsp + #64]	# spill
331b    movq    [rsp + #48], R10	# spill
3320    movl    R11, [rsp + #72]	# spill
3325    movl    [rsp + #44], R11	# spill
332a    movl    [rsp + #56], R11	# spill
332f    movl    R10, [rsp + #76]	# spill
3334    movl    [rsp + #60], R10	# spill
3339    movq    R10, [rsp + #104]	# spill
333e    movq    [rsp + #72], R10	# spill
        nop 	# 1 bytes pad for loops and calls
3344    call,static  wrapper for: uncommon_trap(reason='unhandled' action='none' debug_id='0')
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:140 (line 239) L[0]=_ L[1]=rsp + #44 L[2]=rsp + #60 L[3]=_ L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#ScObj0 STK[1]=rsp + #72
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #128 }
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #56 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #44 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [72]=Oop [80]=Oop [88]=Oop off=13132/0x334c}
334c    stop	# ShouldNotReachHere

3360    B417: #	out( N5788 ) <- in( B230 )  Freq: 2.479e-10
3360    movl    RSI, #-12	# int
3365    movq    RBP, [rsp + #56]	# spill
336a    movq    R10, [rsp + #40]	# spill
336f    movq    [rsp + #32], R10	# spill
3374    call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorMask::length @ bci:4 (line 154) L[0]=_ L[1]=_ STK[0]=#NULL
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:8 (line 220) L[0]=rsp + #64 L[1]=rsp + #72 L[2]=rsp + #168 L[3]=#Ptr0x00007f03801c5c30 L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #72 L[3]=rsp + #80 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [32]=Oop [64]=Oop [80]=Oop off=13180/0x337c}
337c    stop	# ShouldNotReachHere

3390    B418: #	out( N5788 ) <- in( B311 B313 )  Freq: 3.96195e-11
3390    movl    RSI, #-105	# int
3395    movq    RBP, [rsp + #56]	# spill
339a    movl    R11, [rsp + #72]	# spill
339f    movq    R10, [rsp + #40]	# spill
33a4    movq    [rsp + #32], R10	# spill
33a9    movl    [rsp + #28], R11	# spill
33ae    movl    [rsp + #40], R11	# spill
33b3    movl    R11, [rsp + #76]	# spill
33b8    movl    [rsp + #44], R11	# spill
        nop 	# 3 bytes pad for loops and calls
33c0    call,static  wrapper for: uncommon_trap(reason='unhandled' action='none' debug_id='0')
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:140 (line 239) L[0]=_ L[1]=rsp + #28 L[2]=rsp + #44 L[3]=_ L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#ScObj0 STK[1]=rsp + #88
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #128 }
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #80 L[4]=rsp + #64 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #28 L[5]=rsp + #160 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [32]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop off=13256/0x33c8}
33c8    stop	# ShouldNotReachHere

33dc    B419: #	out( N5788 ) <- in( B254 )  Freq: 2.47889e-11
33dc    movl    RSI, #-12	# int
33e1    movl    R11, [rsp + #36]	# spill
33e6    movl    [rsp + #24], R11	# spill
        nop 	# 1 bytes pad for loops and calls
33ec    call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::stOp @ bci:1 (line 351) L[0]=_ L[1]=rsp + #56 L[2]=rsp + #24 L[3]=rsp + #80 L[4]=#Ptr0x00007f03801918b0 L[5]=_ L[6]=_ L[7]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:41 (line 3006) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[56]=Oop [80]=Oop off=13300/0x33f4}
33f4    stop	# ShouldNotReachHere

3408    B420: #	out( N5788 ) <- in( B257 )  Freq: 2.47889e-11
3408    movl    RSI, #-12	# int
340d    movl    R10, [rsp + #36]	# spill
3412    movl    [rsp + #24], R10	# spill
3417    movq    [rsp + #32], R9	# spill
341c    call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector$Int256Mask::getBits @ bci:4 (line 569) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::stOp @ bci:10 (line 352) L[0]=_ L[1]=rsp + #56 L[2]=rsp + #24 L[3]=_ L[4]=#Ptr0x00007f03801918b0 L[5]=rsp + #32 L[6]=_ L[7]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:41 (line 3006) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[32]=Oop [56]=Oop off=13348/0x3424}
3424    stop	# ShouldNotReachHere

3438    B421: #	out( B446 ) <- in( B351 )  Freq: 1.98089e-12
3438    # exception oop is in rax; no code emitted
3438    jmp     B446

343d    B422: #	out( B446 ) <- in( B339 )  Freq: 6.60339e-12
343d    # exception oop is in rax; no code emitted
        nop 	# 3 bytes pad for loops and calls
3440    jmp     B446

3445    B423: #	out( B446 ) <- in( B341 )  Freq: 6.60339e-12
3445    # exception oop is in rax; no code emitted
3445    jmp     B446

344a    B424: #	out( B455 ) <- in( B309 )  Freq: 2.13809e-11
344a    # exception oop is in rax; no code emitted
344a    jmp     B455

344f    B425: #	out( B455 ) <- in( B301 )  Freq: 7.12741e-11
344f    # exception oop is in rax; no code emitted
344f    jmp     B455

3454    B426: #	out( B455 ) <- in( B303 )  Freq: 7.12741e-11
3454    # exception oop is in rax; no code emitted
3454    jmp     B455

3459    B427: #	out( B457 ) <- in( B251 )  Freq: 1.01023e-09
3459    # exception oop is in rax; no code emitted
3459    movq    RSI, RAX	# spill
        nop 	# 4 bytes pad for loops and calls
3460    jmp     B457

3465    B428: #	out( B457 ) <- in( B249 )  Freq: 1.0103e-09
3465    # exception oop is in rax; no code emitted
3465    movq    RSI, RAX	# spill
3468    jmp     B457

346d    B429: #	out( B439 ) <- in( B244 )  Freq: 2.20172e-09
346d    # exception oop is in rax; no code emitted
346d    jmp     B439

3472    B430: #	out( B439 ) <- in( B242 )  Freq: 2.20177e-09
3472    # exception oop is in rax; no code emitted
3472    jmp     B439

3477    B431: #	out( B439 ) <- in( B240 )  Freq: 2.44646e-09
3477    # exception oop is in rax; no code emitted
3477    jmp     B439

347c    B432: #	out( B439 ) <- in( B239 )  Freq: 2.4465e-09
347c    # exception oop is in rax; no code emitted
347c    jmp,s   B439

347e    B433: #	out( B439 ) <- in( B229 )  Freq: 2.44656e-09
347e    # exception oop is in rax; no code emitted
        nop 	# 2 bytes pad for loops and calls
3480    jmp,s   B439

3482    B434: #	out( B439 ) <- in( B218 )  Freq: 8.58229e-09
3482    # exception oop is in rax; no code emitted
3482    jmp,s   B439

3484    B435: #	out( B446 ) <- in( B137 )  Freq: 1.98057e-08
3484    # exception oop is in rax; no code emitted
3484    jmp     B446

3489    B436: #	out( B457 ) <- in( B141 )  Freq: 8.58264e-08
3489    # exception oop is in rax; no code emitted
3489    movq    RSI, RAX	# spill
348c    jmp     B457

3491    B437: #	out( B457 ) <- in( B140 )  Freq: 8.58281e-08
3491    # exception oop is in rax; no code emitted
3491    movq    RSI, RAX	# spill
3494    jmp     B457

3499    B438: #	out( B439 ) <- in( B143 )  Freq: 8.58246e-08
3499    # exception oop is in rax; no code emitted

3499    B439: #	out( B457 ) <- in( B438 B433 B429 B430 B431 B432 B434 )  Freq: 1.0615e-07
3499    movq    RSI, RAX	# spill
        nop 	# 4 bytes pad for loops and calls
34a0    jmp     B457

34a5    B440: #	out( B446 ) <- in( B178 )  Freq: 1.78247e-07
34a5    # exception oop is in rax; no code emitted
34a5    jmp,s   B446

34a7    B441: #	out( B446 ) <- in( B176 )  Freq: 1.78251e-07
34a7    # exception oop is in rax; no code emitted
34a7    jmp,s   B446

34a9    B442: #	out( B455 ) <- in( B113 )  Freq: 2.13774e-07
34a9    # exception oop is in rax; no code emitted
34a9    jmp     B455

34ae    B443: #	out( B446 ) <- in( B163 )  Freq: 1.98069e-07
34ae    # exception oop is in rax; no code emitted
34ae    jmp,s   B446

34b0    B444: #	out( B446 ) <- in( B173 )  Freq: 1.98064e-07
34b0    # exception oop is in rax; no code emitted
34b0    jmp,s   B446

34b2    B445: #	out( B446 ) <- in( B174 )  Freq: 1.9806e-07
34b2    # exception oop is in rax; no code emitted

34b2    B446: #	out( B457 ) <- in( B435 B422 B423 B443 B440 B441 B445 B444 B421 )  Freq: 9.70513e-07
34b2    movq    RSI, RAX	# spill
34b5    jmp     B457

34ba    B447: #	out( B455 ) <- in( B210 )  Freq: 1.92392e-06
34ba    # exception oop is in rax; no code emitted
34ba    jmp,s   B455

34bc    B448: #	out( B455 ) <- in( B208 )  Freq: 1.92396e-06
34bc    # exception oop is in rax; no code emitted
34bc    jmp,s   B455

34be    B449: #	out( B451 ) <- in( B24 )  Freq: 9.99993e-06
34be    # exception oop is in rax; no code emitted
        nop 	# 2 bytes pad for loops and calls
34c0    jmp,s   B451

34c2    B450: #	out( B451 ) <- in( B25 )  Freq: 9.99973e-06
34c2    # exception oop is in rax; no code emitted

34c2    B451: #	out( B457 ) <- in( B449 B450 )  Freq: 1.99997e-05
34c2    movq    RSI, RAX	# spill
34c5    jmp,s   B457

34c7    B452: #	out( B455 ) <- in( B195 )  Freq: 2.13787e-06
34c7    # exception oop is in rax; no code emitted
34c7    jmp,s   B455

34c9    B453: #	out( B455 ) <- in( B205 )  Freq: 2.13782e-06
34c9    # exception oop is in rax; no code emitted
34c9    jmp,s   B455

34cb    B454: #	out( B455 ) <- in( B206 )  Freq: 2.13778e-06
34cb    # exception oop is in rax; no code emitted

34cb    B455: #	out( B457 ) <- in( B442 B425 B426 B452 B447 B448 B454 B453 B424 )  Freq: 1.04753e-05
34cb    movq    RSI, RAX	# spill
34ce    jmp,s   B457

34d0    B456: #	out( B457 ) <- in( B88 )  Freq: 9.99929e-06
34d0    # exception oop is in rax; no code emitted
34d0    movq    RSI, RAX	# spill

34d3    B457: #	out( N5788 ) <- in( B428 B451 B437 B446 B455 B436 B427 B439 B456 )  Freq: 4.17246e-05
34d3    vzeroupper
	addq    rsp, 208	# Destroy frame
	popq    rbp

34de    jmp     rethrow_stub

34e3    B458: #	out( N5788 ) <- in( B365 B367 )  Freq: 4.89382e-13
34e3    movl    RSI, #-105	# int
34e8    movq    RBP, [rsp + #56]	# spill
34ed    movl    R11, [rsp + #36]	# spill
34f2    movl    [rsp + #28], R11	# spill
34f7    movq    R10, [rsp + #40]	# spill
34fc    movq    [rsp + #32], R10	# spill
3501    movq    R10, [rsp + #80]	# spill
3506    movq    [rsp + #40], R10	# spill
350b    pushq   [rsp + #64]	# 64-bit mem-mem spill
	popq    [rsp + #56]
        nop 	# 3 bytes pad for loops and calls
3518    call,static  wrapper for: uncommon_trap(reason='unhandled' action='none' debug_id='0')
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:140 (line 239) L[0]=_ L[1]=rsp + #28 L[2]=rsp + #168 L[3]=_ L[4]=#1 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#ScObj0 STK[1]=rsp + #56
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #96 }
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=rsp + #32 L[1]=RBP L[2]=rsp + #28 L[3]=rsp + #40 L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop off=13600/0x3520}
3520    stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    2946  267             App::micro_vector_masked (200 bytes)
 total in heap  [0x00007f03f91a5110,0x00007f03f91adc90] = 35712
 relocation     [0x00007f03f91a5288,0x00007f03f91a5b08] = 2176
 constants      [0x00007f03f91a5b20,0x00007f03f91a5b40] = 32
 main code      [0x00007f03f91a5b40,0x00007f03f91a90a0] = 13664
 stub code      [0x00007f03f91a90a0,0x00007f03f91a9120] = 128
 oops           [0x00007f03f91a9120,0x00007f03f91a9188] = 104
 metadata       [0x00007f03f91a9188,0x00007f03f91a93e0] = 600
 scopes data    [0x00007f03f91a93e0,0x00007f03f91aab38] = 5976
 scopes pcs     [0x00007f03f91aab38,0x00007f03f91ad848] = 11536
 dependencies   [0x00007f03f91ad848,0x00007f03f91ad860] = 24
 handler table  [0x00007f03f91ad860,0x00007f03f91adbf0] = 912
 nul chk table  [0x00007f03f91adbf0,0x00007f03f91adc90] = 160

--------------------------------------------------------------------------------

[Constant Pool]
             Address          hex4                    hex8      
  0x00007f03f91a5b20:   0x01010101      0x0101010101010101      
  0x00007f03f91a5b24:   0x01010101                              
  0x00007f03f91a5b28:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007f03f91a5b2c:   0xf4f4f4f4                              
  0x00007f03f91a5b30:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007f03f91a5b34:   0xf4f4f4f4                              
  0x00007f03f91a5b38:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007f03f91a5b3c:   0xf4f4f4f4                              

--------------------------------------------------------------------------------

[Entry Point]
  # {method} {0x00007f03b08119b8} 'micro_vector_masked' '([I[I[I)V' in 'App'
  # this:     rsi:rsi   = 'App'
  # parm0:    rdx:rdx   = '[I'
  # parm1:    rcx:rcx   = '[I'
  # parm2:    r8:r8     = '[I'
  #           [sp+0xe0]  (sp of caller)
 ;; N5788: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007f03f91a5b40:   mov    0x8(%rsi),%r10d              ;   {no_reloc}
  0x00007f03f91a5b44:   movabs $0x800000000,%r11
  0x00007f03f91a5b4e:   add    %r11,%r10
  0x00007f03f91a5b51:   cmp    %r10,%rax
  0x00007f03f91a5b54:   jne    0x00007f03f9115920           ;   {runtime_call ic_miss_stub}
  0x00007f03f91a5b5a:   nop
  0x00007f03f91a5b5b:   nop
  0x00007f03f91a5b5c:   nop
  0x00007f03f91a5b5d:   nop
  0x00007f03f91a5b5e:   nop
  0x00007f03f91a5b5f:   nop
[Verified Entry Point]
 ;; B1: #	out( B403 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007f03f91a5b60:   jmpq   0x00007f03f9115320
  0x00007f03f91a5b65:   (bad)  
  0x00007f03f91a5b66:   callq  *0x48(%rbp)
  0x00007f03f91a5b69:   sub    $0xd0,%esp
  0x00007f03f91a5b6f:   mov    %r8,0x30(%rsp)
  0x00007f03f91a5b74:   mov    %rcx,0x28(%rsp)
  0x00007f03f91a5b79:   mov    %rdx,0x38(%rsp)
  0x00007f03f91a5b7e:   mov    %rsi,%rbx                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a5b81:   mov    0xc(%rsi),%r10d              ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@1 (line 3208)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91a5b85:   mov    0x8(%r12,%r10,8),%ebp        ; implicit exception: dispatches to 0x00007f03f91a8be8
 ;; B2: #	out( B317 B3 ) <- in( B1 )  Freq: 0.999999
  0x00007f03f91a5b8a:   cmp    $0x94b80,%ebp                ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {metadata('jdk/incubator/vector/IntVector$IntSpecies')}
  0x00007f03f91a5b90:   jne    0x00007f03f91a7d6d
 ;; B3: #	out( B315 B4 ) <- in( B2 )  Freq: 0.999998
  0x00007f03f91a5b96:   lea    (%r12,%r10,8),%rsi           ;*if_icmpne {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$OperatorImpl::opCode@26 (line 775)
                                                            ; - jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
                                                            ; - jdk.incubator.vector.IntVector::opCode@7 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a5b9a:   mov    0xc(%rsi),%edx               ;*getfield dummyVector {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::dummyVector@1 (line 295)
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91a5b9d:   nop
  0x00007f03f91a5b9e:   nop
  0x00007f03f91a5b9f:   nop
  0x00007f03f91a5ba0:   cmp    $0x100000,%edx
  0x00007f03f91a5ba6:   ja     0x00007f03f91a7d5b           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B4: #	out( B5 ) <- in( B3 )  Freq: 0.999997
  0x00007f03f91a5bac:   movslq %edx,%rcx                    ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@247 (line 633)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
 ;; B5: #	out( B249 B6 ) <- in( B4 B315 )  Freq: 0.999998
  0x00007f03f91a5baf:   cmp    $0x100000,%edx
  0x00007f03f91a5bb5:   ja     0x00007f03f91a77f4           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B6: #	out( B249 B7 ) <- in( B5 )  Freq: 0.999997
  0x00007f03f91a5bbb:   mov    0x148(%r15),%r8              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a5bc2:   add    $0x17,%rcx
  0x00007f03f91a5bc6:   mov    %rcx,%r11
  0x00007f03f91a5bc9:   and    $0xfffffffffffffff8,%r11
  0x00007f03f91a5bcd:   mov    %r8,%r9
  0x00007f03f91a5bd0:   add    %r11,%r9                     ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
  0x00007f03f91a5bd3:   nop
  0x00007f03f91a5bd4:   nop
  0x00007f03f91a5bd5:   nop
  0x00007f03f91a5bd6:   nop
  0x00007f03f91a5bd7:   nop
  0x00007f03f91a5bd8:   nop
  0x00007f03f91a5bd9:   nop
  0x00007f03f91a5bda:   nop
  0x00007f03f91a5bdb:   nop
  0x00007f03f91a5bdc:   nop
  0x00007f03f91a5bdd:   nop
  0x00007f03f91a5bde:   nop
  0x00007f03f91a5bdf:   nop
  0x00007f03f91a5be0:   cmp    0x158(%r15),%r9              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a5be7:   jae    0x00007f03f91a77f4           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B7: #	out( B8 ) <- in( B6 )  Freq: 0.999897
  0x00007f03f91a5bed:   mov    %r9,0x148(%r15)
  0x00007f03f91a5bf4:   mov    %r8,%rdi
  0x00007f03f91a5bf7:   add    $0x10,%rdi
  0x00007f03f91a5bfb:   movq   $0x1,(%r8)
  0x00007f03f91a5c02:   prefetchw 0xc0(%r9)
  0x00007f03f91a5c0a:   movl   $0x40000,0x8(%r8)            ;   {metadata({type array bool})}
  0x00007f03f91a5c12:   mov    %edx,0xc(%r8)
  0x00007f03f91a5c16:   prefetchw 0x100(%r9)
  0x00007f03f91a5c1e:   prefetchw 0x140(%r9)
  0x00007f03f91a5c26:   prefetchw 0x180(%r9)
  0x00007f03f91a5c2e:   shr    $0x3,%rcx
  0x00007f03f91a5c32:   add    $0xfffffffffffffffe,%rcx
  0x00007f03f91a5c36:   xor    %rax,%rax
  0x00007f03f91a5c39:   cmp    $0x8,%rcx
  0x00007f03f91a5c3d:   jg     0x00007f03f91a5c4f
  0x00007f03f91a5c3f:   dec    %rcx
  0x00007f03f91a5c42:   js     0x00007f03f91a5c56
 ;; LOOP:
  0x00007f03f91a5c44:   mov    %rax,(%rdi,%rcx,8)
  0x00007f03f91a5c48:   dec    %rcx
  0x00007f03f91a5c4b:   jge    0x00007f03f91a5c44
  0x00007f03f91a5c4d:   jmp    0x00007f03f91a5c56
 ;; LONG:
  0x00007f03f91a5c4f:   shl    $0x3,%rcx
  0x00007f03f91a5c53:   rep rex.W stos %al,%es:(%rdi)
 ;; DONE:
 ;; B8: #	out( B23 B9 ) <- in( B250 B7 )  Freq: 0.999998
  0x00007f03f91a5c56:   mov    %r8,%r11
  0x00007f03f91a5c59:   mov    %edx,%edi                    ;*invokevirtual invokeBasic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@4
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91a5c5b:   test   %edi,%edi                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a5c5d:   nop
  0x00007f03f91a5c5e:   nop
  0x00007f03f91a5c5f:   nop
  0x00007f03f91a5c60:   jle    0x00007f03f91a5d3a
 ;; B9: #	out( B323 B10 ) <- in( B8 )  Freq: 0.888887
  0x00007f03f91a5c66:   test   %edi,%edi
  0x00007f03f91a5c68:   je     0x00007f03f91a7e60
 ;; B10: #	out( B323 B11 ) <- in( B9 )  Freq: 0.888886
  0x00007f03f91a5c6e:   mov    %edi,%r9d
  0x00007f03f91a5c71:   dec    %r9d
  0x00007f03f91a5c74:   cmp    %edi,%r9d
  0x00007f03f91a5c77:   jae    0x00007f03f91a7e60
 ;; B11: #	out( B12 ) <- in( B10 )  Freq: 0.888885
  0x00007f03f91a5c7d:   mov    $0x4,%r9d
  0x00007f03f91a5c83:   cmp    %r9d,%edi
  0x00007f03f91a5c86:   mov    %edi,%ecx
  0x00007f03f91a5c88:   cmovg  %r9d,%ecx
  0x00007f03f91a5c8c:   xor    %r9d,%r9d                    ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
 ;; B12: #	out( B12 B13 ) <- in( B11 B12 ) Loop( B12-B12 inner pre of N2231) Freq: 1.77777
  0x00007f03f91a5c8f:   movb   $0x1,0x10(%r11,%r9,1)
  0x00007f03f91a5c95:   inc    %r9d
  0x00007f03f91a5c98:   cmp    %ecx,%r9d
  0x00007f03f91a5c9b:   jl     0x00007f03f91a5c8f
 ;; B13: #	out( B20 B14 ) <- in( B12 )  Freq: 0.888885
  0x00007f03f91a5c9d:   mov    %edi,%ecx
  0x00007f03f91a5c9f:   add    $0xfffffffd,%ecx
  0x00007f03f91a5ca2:   cmp    %ecx,%r9d
  0x00007f03f91a5ca5:   jge    0x00007f03f91a5d25
 ;; B14: #	out( B324 B15 ) <- in( B13 )  Freq: 0.888884
  0x00007f03f91a5cab:   cmp    %edi,%r9d
  0x00007f03f91a5cae:   jae    0x00007f03f91a7eac
 ;; B15: #	out( B325 B16 ) <- in( B14 )  Freq: 0.888883
  0x00007f03f91a5cb4:   mov    %r9d,%r8d
  0x00007f03f91a5cb7:   add    $0x3,%r8d
  0x00007f03f91a5cbb:   nop
  0x00007f03f91a5cbc:   nop
  0x00007f03f91a5cbd:   nop
  0x00007f03f91a5cbe:   nop
  0x00007f03f91a5cbf:   nop
  0x00007f03f91a5cc0:   cmp    %edi,%r8d
  0x00007f03f91a5cc3:   jae    0x00007f03f91a7ec0
 ;; B16: #	out( B17 ) <- in( B15 )  Freq: 0.888883
  0x00007f03f91a5cc9:   vmovd  -0x1b1(%rip),%xmm0        # 0x00007f03f91a5b20
                                                            ;   {section_word}
 ;; B17: #	out( B18 ) <- in( B16 B19 ) Loop( B17-B19 ) Freq: 7.99994
  0x00007f03f91a5cd1:   mov    %edi,%eax
  0x00007f03f91a5cd3:   sub    %r9d,%eax
  0x00007f03f91a5cd6:   add    $0xfffffffd,%eax
  0x00007f03f91a5cd9:   xor    %r8d,%r8d
  0x00007f03f91a5cdc:   cmp    %r9d,%ecx
  0x00007f03f91a5cdf:   cmovl  %r8d,%eax
  0x00007f03f91a5ce3:   cmp    $0xfa0,%eax
  0x00007f03f91a5ce9:   mov    $0xfa0,%r8d
  0x00007f03f91a5cef:   cmova  %r8d,%eax
  0x00007f03f91a5cf3:   add    %r9d,%eax                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a5cf6:   nop
  0x00007f03f91a5cf7:   nop
  0x00007f03f91a5cf8:   nop
  0x00007f03f91a5cf9:   nop
  0x00007f03f91a5cfa:   nop
  0x00007f03f91a5cfb:   nop
  0x00007f03f91a5cfc:   nop
  0x00007f03f91a5cfd:   nop
  0x00007f03f91a5cfe:   nop
  0x00007f03f91a5cff:   nop                                 ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::blend@14 (line 376)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B18: #	out( B18 B19 ) <- in( B17 B18 ) Loop( B18-B18 inner main of N690 strip mined) Freq: 71.9995
  0x00007f03f91a5d00:   vmovd  %xmm0,0x10(%r11,%r9,1)       ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a5d07:   add    $0x4,%r9d
  0x00007f03f91a5d0b:   cmp    %eax,%r9d
  0x00007f03f91a5d0e:   jl     0x00007f03f91a5d00           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B19: #	out( B17 B20 ) <- in( B18 )  Freq: 7.99994
  0x00007f03f91a5d10:   mov    0x130(%r15),%r8              ; ImmutableOopMap {r10=NarrowOop r11=Oop rbx=Oop rsi=Oop [40]=Oop [48]=Oop [56]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) App::micro_vector_masked@42 (line 37)
  0x00007f03f91a5d17:   test   %eax,(%r8)                   ;   {poll}
  0x00007f03f91a5d1a:   nop
  0x00007f03f91a5d1b:   nop
  0x00007f03f91a5d1c:   nop
  0x00007f03f91a5d1d:   nop
  0x00007f03f91a5d1e:   nop
  0x00007f03f91a5d1f:   nop
  0x00007f03f91a5d20:   cmp    %ecx,%r9d
  0x00007f03f91a5d23:   jl     0x00007f03f91a5cd1
 ;; B20: #	out( B23 B21 ) <- in( B13 B19 )  Freq: 0.888883
  0x00007f03f91a5d25:   cmp    %edi,%r9d
  0x00007f03f91a5d28:   jge    0x00007f03f91a5d3a           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B21: #	out( B22 ) <- in( B20 )  Freq: 0.444442
  0x00007f03f91a5d2a:   nop
  0x00007f03f91a5d2b:   nop
 ;; B22: #	out( B22 B23 ) <- in( B21 B22 ) Loop( B22-B22 inner post of N2231) Freq: 0.888883
  0x00007f03f91a5d2c:   movb   $0x1,0x10(%r11,%r9,1)        ;*invokevirtual invokeBasic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@4
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91a5d32:   inc    %r9d
  0x00007f03f91a5d35:   cmp    %edi,%r9d
  0x00007f03f91a5d38:   jl     0x00007f03f91a5d2c
 ;; B23: #	out( B318 B24 ) <- in( B22 B20 B8 )  Freq: 0.999994
  0x00007f03f91a5d3a:   movabs $0x800000000,%r8
  0x00007f03f91a5d44:   add    %rbp,%r8
  0x00007f03f91a5d47:   mov    0x48(%r8),%r8
  0x00007f03f91a5d4b:   movabs $0x800094798,%r9             ;   {metadata('jdk/incubator/vector/AbstractSpecies')}
  0x00007f03f91a5d55:   cmp    %r9,%r8                      ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a5d58:   jne    0x00007f03f91a7da0
 ;; B24: #	out( B449 B25 ) <- in( B23 )  Freq: 0.999993
  0x00007f03f91a5d5e:   mov    %r11,0x48(%rsp)
  0x00007f03f91a5d63:   mov    %edx,0x40(%rsp)
  0x00007f03f91a5d67:   mov    %rbx,0x18(%rsp)              ;*invokevirtual lanewise {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a5d6c:   mov    0x30(%rsi),%ebp              ;*invokevirtual length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@222 (line 634)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a5d6f:   mov    %rsi,0x20(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a5d74:   nop
  0x00007f03f91a5d75:   nop
  0x00007f03f91a5d76:   vzeroupper 
  0x00007f03f91a5d79:   movabs $0x800094b80,%rax
  0x00007f03f91a5d83:   callq  0x00007f03f9165f20           ; ImmutableOopMap {rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [48]=Oop [56]=Oop [72]=Oop }
                                                            ;*invokevirtual elementType {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
                                                            ; - App::micro_vector_masked@52 (line 40)
                                                            ;   {virtual_call}
 ;; B25: #	out( B450 B26 ) <- in( B24 )  Freq: 0.999973
  0x00007f03f91a5d88:   mov    %rbp,%rsi
  0x00007f03f91a5d8b:   push   %r10
  0x00007f03f91a5d8d:   cmp    0xce3eadc(%rip),%r12        # 0x00007f0405fe4870
                                                            ;   {external_word}
  0x00007f03f91a5d94:   je     0x00007f03f91a5dae
 ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f03f91a5d9a:   movabs $0x7f0405592180,%rdi         ;   {external_word}
  0x00007f03f91a5da4:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a5da8:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a5dad:   hlt    
  0x00007f03f91a5dae:   pop    %r10
  0x00007f03f91a5db0:   shl    $0x3,%rsi
  0x00007f03f91a5db4:   mov    %rax,%rdx
  0x00007f03f91a5db7:   mov    0x40(%rsp),%ecx
  0x00007f03f91a5dbb:   mov    0x48(%rsp),%r8
  0x00007f03f91a5dc0:   mov    $0x10,%r9d
  0x00007f03f91a5dc6:   mov    %r8,%rdi
  0x00007f03f91a5dc9:   xor    %r11d,%r11d
  0x00007f03f91a5dcc:   mov    %r11d,(%rsp)
  0x00007f03f91a5dd0:   mov    0x20(%rsp),%r10
  0x00007f03f91a5dd5:   mov    %r10,0x8(%rsp)
  0x00007f03f91a5dda:   movabs $0x101bdc6a0,%r10            ;   {oop(a 'jdk/incubator/vector/VectorMask$$Lambda$53+0x00000008000aa6e0'{0x0000000101bdc6a0})}
  0x00007f03f91a5de4:   mov    %r10,0x10(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a5de9:   nop
  0x00007f03f91a5dea:   nop
  0x00007f03f91a5deb:   nop
  0x00007f03f91a5dec:   vzeroupper 
  0x00007f03f91a5def:   callq  0x00007f03f918f760           ; ImmutableOopMap {[24]=Oop [40]=Oop [48]=Oop [56]=Oop }
                                                            ;*invokestatic load {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
                                                            ;   {static_call}
 ;; B26: #	out( B404 B27 ) <- in( B25 )  Freq: 0.999953
  0x00007f03f91a5df4:   mov    0x8(%rax),%r10d              ; implicit exception: dispatches to 0x00007f03f91a8c0c
 ;; B27: #	out( B319 B28 ) <- in( B26 )  Freq: 0.999952
  0x00007f03f91a5df8:   movabs $0x800000000,%r11
  0x00007f03f91a5e02:   add    %r10,%r11
  0x00007f03f91a5e05:   mov    0x50(%r11),%r10
  0x00007f03f91a5e09:   movabs $0x800096638,%r11            ;   {metadata('jdk/incubator/vector/VectorMask')}
  0x00007f03f91a5e13:   cmp    %r11,%r10
  0x00007f03f91a5e16:   jne    0x00007f03f91a7dc4
 ;; B28: #	out( B405 B29 ) <- in( B27 )  Freq: 0.999951
  0x00007f03f91a5e1c:   mov    0x38(%rsp),%r10
  0x00007f03f91a5e21:   mov    0xc(%r10),%ebx               ; implicit exception: dispatches to 0x00007f03f91a8c3c
 ;; B29: #	out( B406 B30 ) <- in( B28 )  Freq: 0.99995
  0x00007f03f91a5e25:   mov    0x18(%rsp),%r10              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a5e2a:   mov    0xc(%r10),%ebp               ;*synchronization entry
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::elementType@-1 (line 3476)
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@10 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91a5e2e:   mov    0x8(%r12,%rbp,8),%r11d       ; implicit exception: dispatches to 0x00007f03f91a8c60
 ;; B30: #	out( B320 B31 ) <- in( B29 )  Freq: 0.999949
  0x00007f03f91a5e33:   nop
  0x00007f03f91a5e34:   nop
  0x00007f03f91a5e35:   nop
  0x00007f03f91a5e36:   nop
  0x00007f03f91a5e37:   nop
  0x00007f03f91a5e38:   nop
  0x00007f03f91a5e39:   nop
  0x00007f03f91a5e3a:   nop
  0x00007f03f91a5e3b:   nop
  0x00007f03f91a5e3c:   nop
  0x00007f03f91a5e3d:   nop
  0x00007f03f91a5e3e:   nop
  0x00007f03f91a5e3f:   nop
  0x00007f03f91a5e40:   cmp    $0x94b80,%r11d               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {metadata('jdk/incubator/vector/IntVector$IntSpecies')}
  0x00007f03f91a5e47:   jne    0x00007f03f91a7de8
 ;; B31: #	out( B344 B32 ) <- in( B30 )  Freq: 0.999948
  0x00007f03f91a5e4d:   lea    (%r12,%rbp,8),%r9            ;*invokevirtual laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@14 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91a5e51:   mov    0xc(%r9),%r11d               ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91a5e55:   mov    %r11d,%edx
  0x00007f03f91a5e58:   dec    %edx
  0x00007f03f91a5e5a:   mov    %r11d,%ebp
  0x00007f03f91a5e5d:   and    %edx,%ebp
  0x00007f03f91a5e5f:   nop
  0x00007f03f91a5e60:   test   %ebp,%ebp
  0x00007f03f91a5e62:   jne    0x00007f03f91a80d8
 ;; B32: #	out( B34 B33 ) <- in( B31 )  Freq: 0.999948
  0x00007f03f91a5e68:   andn   %ebx,%edx,%r10d
  0x00007f03f91a5e6d:   mov    %ebx,%esi
  0x00007f03f91a5e6f:   add    $0xfffffff9,%esi
  0x00007f03f91a5e72:   test   %r10d,%r10d
  0x00007f03f91a5e75:   jg     0x00007f03f91a5e89
 ;; B33: #	out( B47 ) <- in( B32 )  Freq: 0.250136
  0x00007f03f91a5e77:   xor    %r8d,%r8d
  0x00007f03f91a5e7a:   mov    0x28(%rsp),%r14
  0x00007f03f91a5e7f:   mov    0x30(%rsp),%r13
  0x00007f03f91a5e84:   jmpq   0x00007f03f91a5f28
 ;; B34: #	out( B336 B35 ) <- in( B32 )  Freq: 0.749811
  0x00007f03f91a5e89:   mov    0x28(%rsp),%r14
  0x00007f03f91a5e8e:   mov    0xc(%r14),%ecx               ; implicit exception: dispatches to 0x00007f03f91a801e
 ;; B35: #	out( B334 B36 ) <- in( B34 )  Freq: 0.749811
  0x00007f03f91a5e92:   sub    %r11d,%ecx
  0x00007f03f91a5e95:   inc    %ecx
  0x00007f03f91a5e97:   test   %ecx,%ecx
  0x00007f03f91a5e99:   jl     0x00007f03f91a8010           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B36: #	out( B335 B37 ) <- in( B35 )  Freq: 0.74981
  0x00007f03f91a5e9f:   mov    0x44(%r9),%edi               ;*invokespecial fromArray0Template {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91a5ea3:   mov    0x8(%r12,%rdi,8),%r8d        ; implicit exception: dispatches to 0x00007f03f91a8017
 ;; B37: #	out( B338 B38 ) <- in( B36 )  Freq: 0.749809
  0x00007f03f91a5ea8:   cmp    $0x98110,%r8d                ;   {metadata('jdk/incubator/vector/Int256Vector')}
  0x00007f03f91a5eaf:   jne    0x00007f03f91a8058
 ;; B38: #	out( B337 B39 ) <- in( B37 )  Freq: 0.749808
  0x00007f03f91a5eb5:   mov    0x30(%rsp),%r13
  0x00007f03f91a5eba:   nop
  0x00007f03f91a5ebb:   nop
  0x00007f03f91a5ebc:   nop
  0x00007f03f91a5ebd:   nop
  0x00007f03f91a5ebe:   nop
  0x00007f03f91a5ebf:   nop
  0x00007f03f91a5ec0:   mov    0xc(%r13),%r8d               ; implicit exception: dispatches to 0x00007f03f91a8023
 ;; B39: #	out( B337 B40 ) <- in( B38 )  Freq: 0.749808
  0x00007f03f91a5ec4:   sub    %r11d,%r8d
  0x00007f03f91a5ec7:   inc    %r8d
  0x00007f03f91a5eca:   test   %r8d,%r8d                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a5ecd:   jl     0x00007f03f91a8023
 ;; B40: #	out( B337 B41 ) <- in( B39 )  Freq: 0.749807
  0x00007f03f91a5ed3:   test   %esi,%esi
  0x00007f03f91a5ed5:   jl     0x00007f03f91a8023           ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B41: #	out( B42 ) <- in( B40 )  Freq: 0.749806
  0x00007f03f91a5edb:   mov    %esi,%eax                    ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a5edd:   xor    %edi,%edi
  0x00007f03f91a5edf:   nop
 ;; B42: #	out( B305 B43 ) <- in( B41 B45 ) Loop( B42-B45 inner ) Freq: 2.9974
  0x00007f03f91a5ee0:   cmp    %ecx,%edi
  0x00007f03f91a5ee2:   jae    0x00007f03f91a7bfd           ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B43: #	out( B306 B44 ) <- in( B42 )  Freq: 2.9974
  0x00007f03f91a5ee8:   vmovdqu 0x10(%r14,%rdi,4),%ymm0     ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@64 (line 43)
  0x00007f03f91a5eef:   cmp    %r8d,%edi
  0x00007f03f91a5ef2:   jae    0x00007f03f91a7c44           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B44: #	out( B307 B45 ) <- in( B43 )  Freq: 2.9974
  0x00007f03f91a5ef8:   vpaddd 0x10(%r13,%rdi,4),%ymm0,%ymm0;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a5eff:   nop
  0x00007f03f91a5f00:   cmp    %eax,%edi
  0x00007f03f91a5f02:   jae    0x00007f03f91a7c94
 ;; B45: #	out( B42 B46 ) <- in( B44 )  Freq: 2.9974
  0x00007f03f91a5f08:   mov    0x38(%rsp),%rbp              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a5f0d:   vmovdqu %ymm0,0x10(%rbp,%rdi,4)     ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
  0x00007f03f91a5f13:   mov    0x130(%r15),%rbp             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a5f1a:   add    %r11d,%edi                   ; ImmutableOopMap {r9=Oop r13=Oop r14=Oop [24]=Oop [56]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) App::micro_vector_masked@124 (line 43)
  0x00007f03f91a5f1d:   test   %eax,0x0(%rbp)               ;   {poll}
  0x00007f03f91a5f20:   cmp    %r10d,%edi
  0x00007f03f91a5f23:   jl     0x00007f03f91a5ee0
 ;; B46: #	out( B47 ) <- in( B45 )  Freq: 0.749797
  0x00007f03f91a5f25:   mov    %edi,%r8d
 ;; B47: #	out( B346 B48 ) <- in( B46 B33 )  Freq: 0.999933
  0x00007f03f91a5f28:   mov    %ebx,%ecx
  0x00007f03f91a5f2a:   and    %edx,%ecx
  0x00007f03f91a5f2c:   mov    $0x1,%r10d
  0x00007f03f91a5f32:   shl    %cl,%r10
  0x00007f03f91a5f35:   dec    %r10
  0x00007f03f91a5f38:   nop
  0x00007f03f91a5f39:   nop
  0x00007f03f91a5f3a:   nop
  0x00007f03f91a5f3b:   nop
  0x00007f03f91a5f3c:   nop
  0x00007f03f91a5f3d:   nop
  0x00007f03f91a5f3e:   nop
  0x00007f03f91a5f3f:   nop
  0x00007f03f91a5f40:   cmp    $0x40,%r11d
  0x00007f03f91a5f44:   jge    0x00007f03f91a815c
 ;; B48: #	out( B347 B49 ) <- in( B47 )  Freq: 0.999933
  0x00007f03f91a5f4a:   mov    $0x40,%ecx
  0x00007f03f91a5f4f:   sub    %r11d,%ecx
  0x00007f03f91a5f52:   shl    %cl,%r10
  0x00007f03f91a5f55:   sar    %cl,%r10
  0x00007f03f91a5f58:   mov    %r10,%rbp
  0x00007f03f91a5f5b:   sar    %rbp
  0x00007f03f91a5f5e:   nop
  0x00007f03f91a5f5f:   nop
  0x00007f03f91a5f60:   cmp    %rbp,%r10
  0x00007f03f91a5f63:   je     0x00007f03f91a81ac
 ;; B49: #	out( B316 B50 ) <- in( B48 )  Freq: 0.999932
  0x00007f03f91a5f69:   cmp    $0x100000,%r11d
  0x00007f03f91a5f70:   ja     0x00007f03f91a7d65           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B50: #	out( B51 ) <- in( B49 )  Freq: 0.999931
  0x00007f03f91a5f76:   movslq %r11d,%rcx                   ;*invokevirtual length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@2 (line 2960)
                                                            ; - App::micro_vector_masked@107 (line 46)
 ;; B51: #	out( B251 B52 ) <- in( B50 B316 )  Freq: 0.999932
  0x00007f03f91a5f79:   nop
  0x00007f03f91a5f7a:   nop
  0x00007f03f91a5f7b:   nop
  0x00007f03f91a5f7c:   nop
  0x00007f03f91a5f7d:   nop
  0x00007f03f91a5f7e:   nop
  0x00007f03f91a5f7f:   nop
  0x00007f03f91a5f80:   cmp    $0x100000,%r11d
  0x00007f03f91a5f87:   ja     0x00007f03f91a7837           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B52: #	out( B251 B53 ) <- in( B51 )  Freq: 0.999931
  0x00007f03f91a5f8d:   mov    0x148(%r15),%rdx             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a5f94:   add    $0x17,%rcx
  0x00007f03f91a5f98:   mov    %rcx,%rdi
  0x00007f03f91a5f9b:   and    $0xfffffffffffffff8,%rdi
  0x00007f03f91a5f9f:   mov    %rdx,%rax
  0x00007f03f91a5fa2:   add    %rdi,%rax                    ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
  0x00007f03f91a5fa5:   cmp    0x158(%r15),%rax             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a5fac:   jae    0x00007f03f91a7837           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B53: #	out( B54 ) <- in( B52 )  Freq: 0.999831
  0x00007f03f91a5fb2:   mov    %rax,0x148(%r15)
  0x00007f03f91a5fb9:   prefetchw 0xc0(%rax)
  0x00007f03f91a5fc0:   movq   $0x1,(%rdx)
  0x00007f03f91a5fc7:   prefetchw 0x100(%rax)
  0x00007f03f91a5fce:   movl   $0x40000,0x8(%rdx)           ;   {metadata({type array bool})}
  0x00007f03f91a5fd5:   mov    %r11d,0xc(%rdx)
  0x00007f03f91a5fd9:   prefetchw 0x140(%rax)
  0x00007f03f91a5fe0:   mov    %rdx,%rdi
  0x00007f03f91a5fe3:   add    $0x10,%rdi
  0x00007f03f91a5fe7:   prefetchw 0x180(%rax)
  0x00007f03f91a5fee:   shr    $0x3,%rcx
  0x00007f03f91a5ff2:   add    $0xfffffffffffffffe,%rcx
  0x00007f03f91a5ff6:   xor    %rax,%rax
  0x00007f03f91a5ff9:   cmp    $0x8,%rcx
  0x00007f03f91a5ffd:   jg     0x00007f03f91a600f
  0x00007f03f91a5fff:   dec    %rcx
  0x00007f03f91a6002:   js     0x00007f03f91a6016
 ;; LOOP:
  0x00007f03f91a6004:   mov    %rax,(%rdi,%rcx,8)
  0x00007f03f91a6008:   dec    %rcx
  0x00007f03f91a600b:   jge    0x00007f03f91a6004
  0x00007f03f91a600d:   jmp    0x00007f03f91a6016
 ;; LONG:
  0x00007f03f91a600f:   shl    $0x3,%rcx
  0x00007f03f91a6013:   rep rex.W stos %al,%es:(%rdi)
 ;; DONE:
 ;; B54: #	out( B215 B55 ) <- in( B252 B53 )  Freq: 0.999932
  0x00007f03f91a6016:   mov    %rdx,%rcx
  0x00007f03f91a6019:   mov    %r11d,%edx                   ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@73 (line 44)
  0x00007f03f91a601c:   nop
  0x00007f03f91a601d:   nop
  0x00007f03f91a601e:   nop
  0x00007f03f91a601f:   nop
  0x00007f03f91a6020:   test   %edx,%edx
  0x00007f03f91a6022:   jle    0x00007f03f91a73b4
 ;; B55: #	out( B327 B56 ) <- in( B54 )  Freq: 0.888781
  0x00007f03f91a6028:   test   %edx,%edx
  0x00007f03f91a602a:   je     0x00007f03f91a7ed8
 ;; B56: #	out( B326 B57 ) <- in( B55 )  Freq: 0.88878
  0x00007f03f91a6030:   mov    %edx,0x20(%rsp)
  0x00007f03f91a6034:   dec    %edx
  0x00007f03f91a6036:   cmp    0x20(%rsp),%edx
  0x00007f03f91a603a:   nop
  0x00007f03f91a603b:   nop
  0x00007f03f91a603c:   nop
  0x00007f03f91a603d:   nop
  0x00007f03f91a603e:   nop
  0x00007f03f91a603f:   nop
  0x00007f03f91a6040:   jae    0x00007f03f91a7ed4
 ;; B57: #	out( B216 B58 ) <- in( B56 )  Freq: 0.888779
  0x00007f03f91a6046:   test   $0x1,%r10
  0x00007f03f91a604d:   je     0x00007f03f91a73e8           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B58: #	out( B59 ) <- in( B57 )  Freq: 0.777628
  0x00007f03f91a6053:   mov    $0x1,%edx
 ;; B59: #	out( B328 B60 ) <- in( B216 B58 )  Freq: 0.888779
  0x00007f03f91a6058:   mov    %dl,0x10(%rcx)               ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a605b:   mov    0x20(%rsp),%r10d
  0x00007f03f91a6060:   add    $0xfffffffd,%r10d
  0x00007f03f91a6064:   cmp    $0x1,%r10d
  0x00007f03f91a6068:   jle    0x00007f03f91a7f2c
 ;; B60: #	out( B329 B61 ) <- in( B59 )  Freq: 0.888778
  0x00007f03f91a606e:   mov    0x20(%rsp),%edx
  0x00007f03f91a6072:   cmp    $0x1,%edx
  0x00007f03f91a6075:   jbe    0x00007f03f91a7f3c
 ;; B61: #	out( B330 B62 ) <- in( B60 )  Freq: 0.888777
  0x00007f03f91a607b:   nop
  0x00007f03f91a607c:   nop
  0x00007f03f91a607d:   nop
  0x00007f03f91a607e:   nop
  0x00007f03f91a607f:   nop
  0x00007f03f91a6080:   cmp    $0x4,%edx
  0x00007f03f91a6083:   jbe    0x00007f03f91a7f50
 ;; B62: #	out( B79 ) <- in( B61 )  Freq: 0.888776
  0x00007f03f91a6089:   mov    %r10d,0x24(%rsp)
  0x00007f03f91a608e:   mov    $0x1,%r10d
  0x00007f03f91a6094:   mov    $0x1,%edx
  0x00007f03f91a6099:   mov    %edx,0x28(%rsp)
  0x00007f03f91a609d:   nop
  0x00007f03f91a609e:   nop
  0x00007f03f91a609f:   nop
  0x00007f03f91a60a0:   jmpq   0x00007f03f91a61b1
  0x00007f03f91a60a5:   nop
  0x00007f03f91a60a6:   nop
  0x00007f03f91a60a7:   nop
  0x00007f03f91a60a8:   nop
  0x00007f03f91a60a9:   nop
  0x00007f03f91a60aa:   nop
  0x00007f03f91a60ab:   nop
  0x00007f03f91a60ac:   nop
  0x00007f03f91a60ad:   nop
  0x00007f03f91a60ae:   nop
  0x00007f03f91a60af:   nop
 ;; B63: #	out( B64 ) <- in( B72 ) top-of-loop Freq: 62.9333
  0x00007f03f91a60b0:   mov    $0x1,%r10d
 ;; B64: #	out( B77 B65 ) <- in( B73 B63 ) top-of-loop Freq: 71.9288
  0x00007f03f91a60b6:   sar    %rbp                         ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a60b9:   movslq 0x28(%rsp),%r8               ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a60be:   mov    %dil,0x10(%rax,%r8,1)        ;*invokestatic checkMaskFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a60c3:   mov    %dl,0x11(%rax,%r8,1)         ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@50 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a60c8:   mov    %r11b,0x12(%rax,%r8,1)       ;*invokevirtual zero {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a60cd:   mov    %r10b,0x13(%rax,%r8,1)       ;*invokevirtual getClass {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractVector::sameSpecies@5 (line 133)
                                                            ; - jdk.incubator.vector.AbstractVector::check@2 (line 124)
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@7 (line 602)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a60d2:   sar    %rbp
  0x00007f03f91a60d5:   mov    0x28(%rsp),%r10d
  0x00007f03f91a60da:   add    $0x4,%r10d
  0x00007f03f91a60de:   nop
  0x00007f03f91a60df:   nop
  0x00007f03f91a60e0:   cmp    0x2c(%rsp),%r10d
  0x00007f03f91a60e5:   jge    0x00007f03f91a618b
 ;; B65: #	out( B66 ) <- in( B64 )  Freq: 63.9332
  0x00007f03f91a60eb:   mov    %r10d,0x28(%rsp)
  0x00007f03f91a60f0:   mov    %ecx,%r11d
  0x00007f03f91a60f3:   vmovd  %xmm0,%r8d
  0x00007f03f91a60f8:   mov    %rax,%rcx
  0x00007f03f91a60fb:   vmovd  %xmm2,%r10d
 ;; B66: #	out( B74 B67 ) <- in( B79 B65 ) Loop( B66-B65 inner main of N882 strip mined) Freq: 71.9288
  0x00007f03f91a6100:   test   $0x1,%rbp
  0x00007f03f91a6107:   je     0x00007f03f91a617c           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B67: #	out( B68 ) <- in( B66 )  Freq: 62.9333
  0x00007f03f91a610d:   mov    $0x1,%edi                    ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B68: #	out( B75 B69 ) <- in( B74 B67 )  Freq: 71.9288
  0x00007f03f91a6112:   mov    %rbp,%rdx
  0x00007f03f91a6115:   shr    %rdx
  0x00007f03f91a6118:   nop
  0x00007f03f91a6119:   nop
  0x00007f03f91a611a:   nop
  0x00007f03f91a611b:   nop
  0x00007f03f91a611c:   nop
  0x00007f03f91a611d:   nop
  0x00007f03f91a611e:   nop
  0x00007f03f91a611f:   nop
  0x00007f03f91a6120:   test   $0x1,%rdx
  0x00007f03f91a6127:   je     0x00007f03f91a6182           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B69: #	out( B70 ) <- in( B68 )  Freq: 62.9333
  0x00007f03f91a612d:   mov    $0x1,%edx                    ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B70: #	out( B76 B71 ) <- in( B75 B69 )  Freq: 71.9288
  0x00007f03f91a6132:   vmovd  %r10d,%xmm2
  0x00007f03f91a6137:   mov    %rcx,%rax
  0x00007f03f91a613a:   vmovd  %r8d,%xmm0
  0x00007f03f91a613f:   mov    %r11d,%ecx
  0x00007f03f91a6142:   sar    %rbp
  0x00007f03f91a6145:   mov    %rbp,%r10
  0x00007f03f91a6148:   shr    %r10
  0x00007f03f91a614b:   test   $0x1,%r10
  0x00007f03f91a6152:   je     0x00007f03f91a6186           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B71: #	out( B72 ) <- in( B70 )  Freq: 62.9333
  0x00007f03f91a6158:   mov    $0x1,%r11d                   ;*lookupswitch {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::zero@17 (line 3650)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B72: #	out( B63 B73 ) <- in( B76 B71 )  Freq: 71.9288
  0x00007f03f91a615e:   sar    %rbp
  0x00007f03f91a6161:   mov    %rbp,%r10
  0x00007f03f91a6164:   shr    %r10
  0x00007f03f91a6167:   test   $0x1,%r10                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a616e:   jne    0x00007f03f91a60b0
 ;; B73: #	out( B64 ) <- in( B72 )  Freq: 8.99546
  0x00007f03f91a6174:   xor    %r10d,%r10d
  0x00007f03f91a6177:   jmpq   0x00007f03f91a60b6
 ;; B74: #	out( B68 ) <- in( B66 )  Freq: 8.99546
  0x00007f03f91a617c:   xor    %edi,%edi
  0x00007f03f91a617e:   nop
  0x00007f03f91a617f:   nop
  0x00007f03f91a6180:   jmp    0x00007f03f91a6112
 ;; B75: #	out( B70 ) <- in( B68 )  Freq: 8.99546
  0x00007f03f91a6182:   xor    %edx,%edx
  0x00007f03f91a6184:   jmp    0x00007f03f91a6132
 ;; B76: #	out( B72 ) <- in( B70 )  Freq: 8.99546
  0x00007f03f91a6186:   xor    %r11d,%r11d
  0x00007f03f91a6189:   jmp    0x00007f03f91a615e           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B77: #	out( B80 B78 ) <- in( B64 )  Freq: 7.99553
  0x00007f03f91a618b:   mov    0x130(%r15),%r11             ; ImmutableOopMap {r9=Oop rax=Oop r13=Oop r14=Oop [24]=Oop [56]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorMask::fromLong@135 (line 255)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91a6192:   test   %eax,(%r11)                  ;   {poll}
  0x00007f03f91a6195:   cmp    0x24(%rsp),%r10d
  0x00007f03f91a619a:   jge    0x00007f03f91a61f4
 ;; B78: #	out( B79 ) <- in( B77 )  Freq: 7.10676
  0x00007f03f91a619c:   mov    %r10d,0x28(%rsp)
  0x00007f03f91a61a1:   mov    %ecx,%r11d
  0x00007f03f91a61a4:   vmovd  %xmm0,%r8d
  0x00007f03f91a61a9:   mov    %rax,%rcx
  0x00007f03f91a61ac:   vmovd  %xmm2,%r10d
 ;; B79: #	out( B66 ) <- in( B62 B78 ) Loop( B79-B78 ) Freq: 7.99553
  0x00007f03f91a61b1:   mov    0x20(%rsp),%edx
  0x00007f03f91a61b5:   sub    0x28(%rsp),%edx
  0x00007f03f91a61b9:   add    $0xfffffffd,%edx
  0x00007f03f91a61bc:   vmovd  %edx,%xmm0
  0x00007f03f91a61c0:   mov    0x24(%rsp),%eax
  0x00007f03f91a61c4:   xor    %edx,%edx
  0x00007f03f91a61c6:   mov    %edx,%edi
  0x00007f03f91a61c8:   cmp    0x28(%rsp),%eax
  0x00007f03f91a61cc:   vmovd  %xmm0,%edx
  0x00007f03f91a61d0:   cmovl  %edi,%edx
  0x00007f03f91a61d3:   mov    %edx,%eax
  0x00007f03f91a61d5:   cmp    $0xfa0,%edx
  0x00007f03f91a61db:   mov    $0xfa0,%edx
  0x00007f03f91a61e0:   mov    %edx,%edi
  0x00007f03f91a61e2:   mov    %eax,%edx
  0x00007f03f91a61e4:   cmova  %edi,%edx
  0x00007f03f91a61e7:   add    0x28(%rsp),%edx
  0x00007f03f91a61eb:   mov    %edx,0x2c(%rsp)
  0x00007f03f91a61ef:   jmpq   0x00007f03f91a6100
 ;; B80: #	out( B81 ) <- in( B77 )  Freq: 0.888776
  0x00007f03f91a61f4:   mov    %r10d,%edi
  0x00007f03f91a61f7:   mov    %ecx,%r11d
  0x00007f03f91a61fa:   vmovd  %xmm0,%r8d
  0x00007f03f91a61ff:   mov    %rax,%rcx
  0x00007f03f91a6202:   vmovd  %xmm2,%r10d
  0x00007f03f91a6207:   mov    %edi,%edx
 ;; B81: #	out( B87 B82 ) <- in( B328 B80 )  Freq: 0.888777
  0x00007f03f91a6209:   cmp    0x20(%rsp),%edx
  0x00007f03f91a620d:   jge    0x00007f03f91a624b
 ;; B82: #	out( B83 ) <- in( B81 )  Freq: 0.444389
  0x00007f03f91a620f:   mov    %edx,%eax                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6211:   nop
  0x00007f03f91a6212:   nop
  0x00007f03f91a6213:   nop                                 ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B83: #	out( B217 B84 ) <- in( B82 B86 ) Loop( B83-B86 inner post of N2241) Freq: 0.888777
  0x00007f03f91a6214:   nop
  0x00007f03f91a6215:   nop
  0x00007f03f91a6216:   nop
  0x00007f03f91a6217:   nop
  0x00007f03f91a6218:   nop
  0x00007f03f91a6219:   nop
  0x00007f03f91a621a:   nop
  0x00007f03f91a621b:   nop
  0x00007f03f91a621c:   nop
  0x00007f03f91a621d:   nop
  0x00007f03f91a621e:   nop
  0x00007f03f91a621f:   nop
  0x00007f03f91a6220:   test   $0x1,%rbp
  0x00007f03f91a6227:   je     0x00007f03f91a73ef           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B84: #	out( B85 ) <- in( B83 )  Freq: 0.777626
  0x00007f03f91a622d:   mov    $0x1,%edx                    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B85: #	out( B87 B86 ) <- in( B217 B84 )  Freq: 0.888777
  0x00007f03f91a6232:   mov    %dl,0x10(%rcx,%rax,1)        ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a6236:   mov    %eax,%edx
  0x00007f03f91a6238:   inc    %edx
  0x00007f03f91a623a:   mov    %edx,%eax
  0x00007f03f91a623c:   nop
  0x00007f03f91a623d:   nop
  0x00007f03f91a623e:   nop
  0x00007f03f91a623f:   nop
  0x00007f03f91a6240:   cmp    0x20(%rsp),%edx
  0x00007f03f91a6244:   jge    0x00007f03f91a624b
 ;; B86: #	out( B83 ) <- in( B85 )  Freq: 0.444389
  0x00007f03f91a6246:   sar    %rbp
  0x00007f03f91a6249:   jmp    0x00007f03f91a6214
 ;; B87: #	out( B88 ) <- in( B85 B81 )  Freq: 0.888777
  0x00007f03f91a624b:   mov    %r14,0x40(%rsp)
  0x00007f03f91a6250:   mov    %r13,0x28(%rsp)
  0x00007f03f91a6255:   mov    %ebx,0xa8(%rsp)
  0x00007f03f91a625c:   mov    %r11d,%eax
  0x00007f03f91a625f:   mov    %esi,0xac(%rsp)
  0x00007f03f91a6266:   mov    %r8d,0x48(%rsp)
  0x00007f03f91a626b:   mov    %rcx,%r8
  0x00007f03f91a626e:   mov    %r10d,0xb0(%rsp)
 ;; B88: #	out( B456 B89 ) <- in( B87 B215 )  Freq: 0.999929
  0x00007f03f91a6276:   mov    0x30(%r9),%r10d
  0x00007f03f91a627a:   mov    %r9,%r11
  0x00007f03f91a627d:   mov    %r10,%rsi
  0x00007f03f91a6280:   push   %r10
  0x00007f03f91a6282:   cmp    0xce3e5e7(%rip),%r12        # 0x00007f0405fe4870
                                                            ;   {external_word}
  0x00007f03f91a6289:   je     0x00007f03f91a62a3
 ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f03f91a628f:   movabs $0x7f0405592180,%rdi         ;   {external_word}
  0x00007f03f91a6299:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a629d:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a62a2:   hlt    
  0x00007f03f91a62a3:   pop    %r10
  0x00007f03f91a62a5:   shl    $0x3,%rsi                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a62a9:   movabs $0x1010002b0,%rdx            ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
                                                            ;   {oop(a 'java/lang/Class'{0x00000001010002b0} = int)}
  0x00007f03f91a62b3:   mov    %eax,%ecx
  0x00007f03f91a62b5:   mov    $0x10,%r9d
  0x00007f03f91a62bb:   mov    %r8,%rdi
  0x00007f03f91a62be:   xor    %r10d,%r10d
  0x00007f03f91a62c1:   mov    %r10d,(%rsp)
  0x00007f03f91a62c5:   mov    %r11,0x8(%rsp)
  0x00007f03f91a62ca:   movabs $0x101bdc6a0,%r10            ;   {oop(a 'jdk/incubator/vector/VectorMask$$Lambda$53+0x00000008000aa6e0'{0x0000000101bdc6a0})}
  0x00007f03f91a62d4:   mov    %r10,0x10(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a62d9:   nop
  0x00007f03f91a62da:   nop
  0x00007f03f91a62db:   nop
  0x00007f03f91a62dc:   vzeroupper 
  0x00007f03f91a62df:   callq  0x00007f03f918f760           ; ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop }
                                                            ;*invokestatic load {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
                                                            ;   {static_call}
 ;; B89: #	out( B407 B90 ) <- in( B88 )  Freq: 0.999909
  0x00007f03f91a62e4:   mov    0x8(%rax),%r10d              ; implicit exception: dispatches to 0x00007f03f91a8c84
 ;; B90: #	out( B321 B91 ) <- in( B89 )  Freq: 0.999908
  0x00007f03f91a62e8:   movabs $0x800000000,%r11
  0x00007f03f91a62f2:   add    %r10,%r11
  0x00007f03f91a62f5:   mov    0x50(%r11),%r10
  0x00007f03f91a62f9:   movabs $0x800096638,%r11            ;   {metadata('jdk/incubator/vector/VectorMask')}
  0x00007f03f91a6303:   cmp    %r11,%r10                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6306:   jne    0x00007f03f91a7e18           ;*synchronization entry
                                                            ; - App::micro_vector_masked@-1 (line 32)
 ;; B91: #	out( B408 B92 ) <- in( B90 )  Freq: 0.999907
  0x00007f03f91a630c:   mov    0x18(%rsp),%r11              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6311:   mov    0xc(%r11),%edi               ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractVector::sameSpecies@52 (line 136)
                                                            ; - jdk.incubator.vector.AbstractVector::check@2 (line 124)
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@7 (line 602)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a6315:   mov    0x8(%r12,%rdi,8),%r10d       ; implicit exception: dispatches to 0x00007f03f91a8cac
 ;; B92: #	out( B322 B93 ) <- in( B91 )  Freq: 0.999906
  0x00007f03f91a631a:   nop
  0x00007f03f91a631b:   nop
  0x00007f03f91a631c:   nop
  0x00007f03f91a631d:   nop
  0x00007f03f91a631e:   nop
  0x00007f03f91a631f:   nop
  0x00007f03f91a6320:   cmp    $0x94b80,%r10d               ;   {metadata('jdk/incubator/vector/IntVector$IntSpecies')}
  0x00007f03f91a6327:   jne    0x00007f03f91a7e3c           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B93: #	out( B185 B94 ) <- in( B92 )  Freq: 0.999905
  0x00007f03f91a632d:   mov    0x8(%rax),%r8d               ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@15 (line 242)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91a6331:   mov    %r8d,0x20(%rsp)
  0x00007f03f91a6336:   mov    %rax,0x50(%rsp)
  0x00007f03f91a633b:   lea    (%r12,%rdi,8),%r9            ;*synchronization entry
                                                            ; - jdk.incubator.vector.AbstractSpecies::loopBound@-1 (line 203)
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a633f:   mov    0x2c(%r9),%r8d               ;*lsub {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@148 (line 51)
  0x00007f03f91a6343:   mov    0x1c(%r9),%r11d              ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a6347:   mov    %r9,0x58(%rsp)               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a634c:   movslq 0x48(%rsp),%r9               ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@104 (line 255)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91a6351:   mov    %r9,0x30(%rsp)
  0x00007f03f91a6356:   mov    %r11d,%ecx
  0x00007f03f91a6359:   add    $0xffffffc0,%ecx
  0x00007f03f91a635c:   mov    0x20(%rsp),%r9d
  0x00007f03f91a6361:   movabs $0x800000000,%rbx
  0x00007f03f91a636b:   add    %r9,%rbx
  0x00007f03f91a636e:   mov    0x58(%rbx),%r9
  0x00007f03f91a6372:   mov    %r9,0x60(%rsp)
  0x00007f03f91a6377:   mov    0x48(%rsp),%ebx
  0x00007f03f91a637b:   test   %ebx,%ebx
  0x00007f03f91a637d:   nop
  0x00007f03f91a637e:   nop
  0x00007f03f91a637f:   nop
  0x00007f03f91a6380:   jl     0x00007f03f91a6fb8
 ;; B94: #	out( B409 B95 ) <- in( B93 )  Freq: 0.499952
  0x00007f03f91a6386:   mov    0x40(%rsp),%r9
  0x00007f03f91a638b:   mov    0xc(%r9),%ebp                ; implicit exception: dispatches to 0x00007f03f91a8cf8
 ;; B95: #	out( B345 B96 ) <- in( B94 )  Freq: 0.499952
  0x00007f03f91a638f:   movabs $0x800000000,%r9
  0x00007f03f91a6399:   add    %r10,%r9
  0x00007f03f91a639c:   mov    0x48(%r9),%r10
  0x00007f03f91a63a0:   movabs $0x800094798,%r9             ;   {metadata('jdk/incubator/vector/AbstractSpecies')}
  0x00007f03f91a63aa:   cmp    %r9,%r10
  0x00007f03f91a63ad:   jne    0x00007f03f91a810c
 ;; B96: #	out( B186 B97 ) <- in( B95 )  Freq: 0.499951
  0x00007f03f91a63b3:   mov    0x58(%rsp),%r10              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a63b8:   mov    0xc(%r10),%r10d              ;*newarray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91a63bc:   sub    %r10d,%ebp
  0x00007f03f91a63bf:   nop
  0x00007f03f91a63c0:   cmp    %ebp,%ebx
  0x00007f03f91a63c2:   jg     0x00007f03f91a6fc9
 ;; B97: #	out( B348 B98 ) <- in( B96 )  Freq: 0.249976
  0x00007f03f91a63c8:   cmp    $0x20311f9a,%r8d             ;   {oop(a 'java/lang/Class'{0x000000010188fcd0} = 'jdk/incubator/vector/IntMaxVector')}
  0x00007f03f91a63cf:   je     0x00007f03f91a8208
 ;; B98: #	out( B349 B99 ) <- in( B97 )  Freq: 0.249975
  0x00007f03f91a63d5:   nop
  0x00007f03f91a63d6:   nop
  0x00007f03f91a63d7:   nop
  0x00007f03f91a63d8:   nop
  0x00007f03f91a63d9:   nop
  0x00007f03f91a63da:   nop
  0x00007f03f91a63db:   nop
  0x00007f03f91a63dc:   nop
  0x00007f03f91a63dd:   nop
  0x00007f03f91a63de:   nop
  0x00007f03f91a63df:   nop
  0x00007f03f91a63e0:   cmp    $0x1c1,%ecx
  0x00007f03f91a63e6:   jae    0x00007f03f91a8254
 ;; B99: #	out( B183 B100 ) <- in( B98 )  Freq: 0.249975
  0x00007f03f91a63ec:   cmp    $0x101,%r11d
  0x00007f03f91a63f3:   jge    0x00007f03f91a6f60
 ;; B100: #	out( B104 B101 ) <- in( B99 )  Freq: 0.10745
  0x00007f03f91a63f9:   nop
  0x00007f03f91a63fa:   nop
  0x00007f03f91a63fb:   nop
  0x00007f03f91a63fc:   nop
  0x00007f03f91a63fd:   nop
  0x00007f03f91a63fe:   nop
  0x00007f03f91a63ff:   nop
  0x00007f03f91a6400:   cmp    $0x81,%r11d
  0x00007f03f91a6407:   jge    0x00007f03f91a6470
 ;; B101: #	out( B364 B102 ) <- in( B100 )  Freq: 0.0361879
  0x00007f03f91a640d:   cmp    $0x41,%r11d
  0x00007f03f91a6411:   jl     0x00007f03f91a857c
 ;; B102: #	out( B349 B103 ) <- in( B101 )  Freq: 0.0361879
  0x00007f03f91a6417:   cmp    $0x7f,%r11d
  0x00007f03f91a641b:   nop
  0x00007f03f91a641c:   nop
  0x00007f03f91a641d:   nop
  0x00007f03f91a641e:   nop
  0x00007f03f91a641f:   nop
  0x00007f03f91a6420:   jle    0x00007f03f91a8254           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B103: #	out( N5788 ) <- in( B102 )  Freq: 0.0361879
  0x00007f03f91a6426:   mov    $0xffffffad,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a642b:   mov    0x18(%rsp),%rbp
  0x00007f03f91a6430:   mov    0x38(%rsp),%r10
  0x00007f03f91a6435:   mov    %r10,0x18(%rsp)
  0x00007f03f91a643a:   mov    0x28(%rsp),%r10
  0x00007f03f91a643f:   mov    %r10,0x20(%rsp)
  0x00007f03f91a6444:   mov    0x40(%rsp),%r10
  0x00007f03f91a6449:   mov    %r10,0x30(%rsp)
  0x00007f03f91a644e:   mov    %rax,0x40(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6453:   nop
  0x00007f03f91a6454:   vzeroupper 
  0x00007f03f91a6457:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop [80]=Oop }
                                                            ;*getstatic ZERO {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::zero@64 (line 3652)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a645c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a6466:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a646a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a646f:   hlt    
 ;; B104: #	out( B349 B105 ) <- in( B100 )  Freq: 0.0712624
  0x00007f03f91a6470:   cmp    $0xff,%r11d                  ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6477:   jle    0x00007f03f91a8254
 ;; B105: #	out( B358 B106 ) <- in( B104 )  Freq: 0.0712623
  0x00007f03f91a647d:   mov    0x20(%rsp),%r11d
  0x00007f03f91a6482:   cmp    $0x98750,%r11d               ;   {metadata('jdk/incubator/vector/Int256Vector$Int256Mask')}
  0x00007f03f91a6489:   jne    0x00007f03f91a8430
 ;; B106: #	out( B301 B107 ) <- in( B105 )  Freq: 0.0712623
  0x00007f03f91a648f:   mov    %rax,%rbp                    ;*invokevirtual intoArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@107 (line 46)
  0x00007f03f91a6492:   mov    0x40(%rsp),%r10
  0x00007f03f91a6497:   mov    0x30(%rsp),%r11              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a649c:   vmovdqu 0x10(%r10,%r11,4),%ymm3
  0x00007f03f91a64a3:   mov    0x148(%r15),%r10
  0x00007f03f91a64aa:   mov    %r10,%r11
  0x00007f03f91a64ad:   add    $0x30,%r11                   ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
  0x00007f03f91a64b1:   cmp    0x158(%r15),%r11             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a64b8:   jae    0x00007f03f91a7bac           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B107: #	out( B108 ) <- in( B106 )  Freq: 0.0712551
  0x00007f03f91a64be:   mov    %r11,0x148(%r15)
  0x00007f03f91a64c5:   prefetchw 0xc0(%r11)
  0x00007f03f91a64cd:   movq   $0x1,(%r10)
  0x00007f03f91a64d4:   prefetchw 0x100(%r11)
  0x00007f03f91a64dc:   movl   $0x40c30,0x8(%r10)           ;   {metadata({type array int})}
  0x00007f03f91a64e4:   prefetchw 0x140(%r11)
  0x00007f03f91a64ec:   movl   $0x8,0xc(%r10)
  0x00007f03f91a64f4:   prefetchw 0x180(%r11)
  0x00007f03f91a64fc:   mov    %r12,0x10(%r10)
  0x00007f03f91a6500:   mov    %r12,0x18(%r10)
  0x00007f03f91a6504:   mov    %r12,0x20(%r10)
  0x00007f03f91a6508:   mov    %r12,0x28(%r10)              ;*isub {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::roundDown@3 (line 106)
                                                            ; - jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
                                                            ; - App::micro_vector_masked@65 (line 43)
 ;; B108: #	out( B303 B109 ) <- in( B302 B107 )  Freq: 0.0712623
  0x00007f03f91a650c:   mov    %r10,0x40(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6511:   mov    0xc(%rbp),%r10d              ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
  0x00007f03f91a6515:   mov    0x148(%r15),%rax             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a651c:   vmovq  0x10(%r12,%r10,8),%xmm0      ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::laneCount@0 (line 125)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@6 (line 241)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91a6523:   mov    %rax,%r10
  0x00007f03f91a6526:   add    $0x10,%r10
  0x00007f03f91a652a:   movabs $0x101964e68,%r11            ;   {oop([I{0x0000000101964e68})}
  0x00007f03f91a6534:   vmovdqu 0x10(%r11),%ymm1
  0x00007f03f91a653a:   vpxor  %ymm2,%ymm2,%ymm2
  0x00007f03f91a653e:   vpsubb %ymm0,%ymm2,%ymm2
  0x00007f03f91a6542:   vpmovsxbd %xmm2,%ymm2
  0x00007f03f91a6547:   vpblendvb %ymm2,%ymm3,%ymm1,%ymm0
  0x00007f03f91a654d:   mov    0x40(%rsp),%r11              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6552:   vmovdqu %ymm0,0x10(%r11)            ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
  0x00007f03f91a6558:   nop
  0x00007f03f91a6559:   nop
  0x00007f03f91a655a:   nop
  0x00007f03f91a655b:   nop
  0x00007f03f91a655c:   nop
  0x00007f03f91a655d:   nop
  0x00007f03f91a655e:   nop
  0x00007f03f91a655f:   nop
  0x00007f03f91a6560:   cmp    0x158(%r15),%r10             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6567:   jae    0x00007f03f91a7bdd           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B109: #	out( B110 ) <- in( B108 )  Freq: 0.0712551
  0x00007f03f91a656d:   mov    %r10,0x148(%r15)
  0x00007f03f91a6574:   prefetchw 0xc0(%r10)
  0x00007f03f91a657c:   movq   $0x1,(%rax)
  0x00007f03f91a6583:   movl   $0x98110,0x8(%rax)           ;*synchronization entry
                                                            ; - App::micro_vector_masked@-1 (line 32)
                                                            ;   {metadata('jdk/incubator/vector/Int256Vector')}
 ;; B110: #	out( B115 ) <- in( B304 B109 )  Freq: 0.0712623
  0x00007f03f91a658a:   mov    0x40(%rsp),%r10
  0x00007f03f91a658f:   push   %r10
  0x00007f03f91a6591:   cmp    0xce3e2d8(%rip),%r12        # 0x00007f0405fe4870
                                                            ;   {external_word}
  0x00007f03f91a6598:   je     0x00007f03f91a65b2
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007f03f91a659e:   movabs $0x7f04055920d0,%rdi         ;   {external_word}
  0x00007f03f91a65a8:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a65ac:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a65b1:   hlt    
  0x00007f03f91a65b2:   pop    %r10
  0x00007f03f91a65b4:   test   %r10,%r10
  0x00007f03f91a65b7:   jne    0x00007f03f91a65d1
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007f03f91a65bd:   movabs $0x7f0405592110,%rdi         ;   {external_word}
  0x00007f03f91a65c7:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a65cb:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a65d0:   hlt    
  0x00007f03f91a65d1:   mov    %r10,%r11
  0x00007f03f91a65d4:   shr    $0x3,%r11
  0x00007f03f91a65d8:   mov    %r11d,0xc(%rax)              ;*ifnull {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::dummyVector@6 (line 296)
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91a65dc:   mov    %rax,0xa0(%rsp)
  0x00007f03f91a65e4:   jmpq   0x00007f03f91a66a8
 ;; B111: #	out( B309 B112 ) <- in( B207 )  Freq: 0.0213774
  0x00007f03f91a65e9:   mov    0x148(%r15),%rcx
  0x00007f03f91a65f0:   mov    %rcx,%r10
  0x00007f03f91a65f3:   add    $0x18,%r10                   ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
  0x00007f03f91a65f7:   nop
  0x00007f03f91a65f8:   nop
  0x00007f03f91a65f9:   nop
  0x00007f03f91a65fa:   nop
  0x00007f03f91a65fb:   nop
  0x00007f03f91a65fc:   nop
  0x00007f03f91a65fd:   nop
  0x00007f03f91a65fe:   nop
  0x00007f03f91a65ff:   nop
  0x00007f03f91a6600:   cmp    0x158(%r15),%r10             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6607:   jae    0x00007f03f91a7cde           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B112: #	out( B113 ) <- in( B111 )  Freq: 0.0213752
  0x00007f03f91a660d:   mov    %r10,0x148(%r15)
  0x00007f03f91a6614:   prefetchw 0xc0(%r10)
  0x00007f03f91a661c:   movq   $0x1,(%rcx)
  0x00007f03f91a6623:   movl   $0xacb58,0x8(%rcx)           ;   {metadata('jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58')}
  0x00007f03f91a662a:   mov    %r12d,0xc(%rcx)
  0x00007f03f91a662e:   mov    %r12d,0x14(%rcx)             ;*ifne {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@40 (line 247)
                                                            ; - App::micro_vector_masked@149 (line 51)
 ;; B113: #	out( B442 B114 ) <- in( B310 B112 )  Freq: 0.0213774
  0x00007f03f91a6632:   mov    0x40(%rsp),%r10
  0x00007f03f91a6637:   push   %r10
  0x00007f03f91a6639:   cmp    0xce3e230(%rip),%r12        # 0x00007f0405fe4870
                                                            ;   {external_word}
  0x00007f03f91a6640:   je     0x00007f03f91a665a
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007f03f91a6646:   movabs $0x7f04055920d0,%rdi         ;   {external_word}
  0x00007f03f91a6650:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a6654:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a6659:   hlt    
  0x00007f03f91a665a:   pop    %r10
  0x00007f03f91a665c:   test   %r10,%r10
  0x00007f03f91a665f:   jne    0x00007f03f91a6679
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007f03f91a6665:   movabs $0x7f0405592110,%rdi         ;   {external_word}
  0x00007f03f91a666f:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a6673:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a6678:   hlt    
  0x00007f03f91a6679:   mov    %r10,%r11
  0x00007f03f91a667c:   shr    $0x3,%r11
  0x00007f03f91a6680:   mov    %r11d,0x10(%rcx)
  0x00007f03f91a6684:   mov    0x48(%rsp),%r10d             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6689:   mov    %r10d,0xc(%rcx)              ;*invokevirtual lanewise {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a668d:   mov    0x58(%rsp),%rsi
  0x00007f03f91a6692:   mov    0x50(%rsp),%rdx              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6697:   nop
  0x00007f03f91a6698:   vzeroupper 
  0x00007f03f91a669b:   callq  0x00007f03f918e380           ; ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [80]=Oop }
                                                            ;*invokevirtual vOp {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@64 (line 2728)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {optimized virtual_call}
 ;; B114: #	out( B115 ) <- in( B113 )  Freq: 0.0213769
  0x00007f03f91a66a0:   mov    %rax,0xa0(%rsp)              ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
 ;; B115: #	out( B411 B116 ) <- in( B110 B114 )  Freq: 0.0926392
  0x00007f03f91a66a8:   mov    0x18(%rsp),%r10              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a66ad:   mov    0xc(%r10),%r10d              ;*invokestatic opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::opCode@7 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a66b1:   mov    0x8(%r12,%r10,8),%r11d       ; implicit exception: dispatches to 0x00007f03f91a8d60
 ;; B116: #	out( B357 B117 ) <- in( B115 )  Freq: 0.0926391
  0x00007f03f91a66b6:   nop
  0x00007f03f91a66b7:   nop
  0x00007f03f91a66b8:   nop
  0x00007f03f91a66b9:   nop
  0x00007f03f91a66ba:   nop
  0x00007f03f91a66bb:   nop
  0x00007f03f91a66bc:   nop
  0x00007f03f91a66bd:   nop
  0x00007f03f91a66be:   nop
  0x00007f03f91a66bf:   nop
  0x00007f03f91a66c0:   cmp    $0x94b80,%r11d               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {metadata('jdk/incubator/vector/IntVector$IntSpecies')}
  0x00007f03f91a66c7:   jne    0x00007f03f91a840c
 ;; B117: #	out( B153 B118 ) <- in( B116 )  Freq: 0.092639
  0x00007f03f91a66cd:   mov    %r10d,%r8d
  0x00007f03f91a66d0:   shl    $0x3,%r10                    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@64 (line 43)
  0x00007f03f91a66d4:   mov    %r10,0x40(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a66d9:   mov    0x2c(%r10),%r9d              ;*getfield laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::laneCount@1 (line 125)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@6 (line 241)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91a66dd:   mov    0x1c(%r10),%ebx              ;*invokestatic roundDown {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a66e1:   mov    %ebx,%ecx
  0x00007f03f91a66e3:   add    $0xffffffc0,%ecx
  0x00007f03f91a66e6:   mov    0x48(%rsp),%r10d
  0x00007f03f91a66eb:   test   %r10d,%r10d
  0x00007f03f91a66ee:   jl     0x00007f03f91a6b5b
 ;; B118: #	out( B412 B119 ) <- in( B117 )  Freq: 0.0463195
  0x00007f03f91a66f4:   mov    0x28(%rsp),%r10
  0x00007f03f91a66f9:   nop
  0x00007f03f91a66fa:   nop
  0x00007f03f91a66fb:   nop
  0x00007f03f91a66fc:   nop
  0x00007f03f91a66fd:   nop
  0x00007f03f91a66fe:   nop
  0x00007f03f91a66ff:   nop
  0x00007f03f91a6700:   mov    0xc(%r10),%ebp               ; implicit exception: dispatches to 0x00007f03f91a8d9c
 ;; B119: #	out( B363 B120 ) <- in( B118 )  Freq: 0.0463195
  0x00007f03f91a6704:   movabs $0x800000000,%r10
  0x00007f03f91a670e:   add    %r11,%r10
  0x00007f03f91a6711:   mov    0x48(%r10),%r10
  0x00007f03f91a6715:   movabs $0x800094798,%r11            ;   {metadata('jdk/incubator/vector/AbstractSpecies')}
  0x00007f03f91a671f:   nop
  0x00007f03f91a6720:   cmp    %r11,%r10
  0x00007f03f91a6723:   jne    0x00007f03f91a853c
 ;; B120: #	out( B152 B121 ) <- in( B119 )  Freq: 0.0463194
  0x00007f03f91a6729:   mov    0x40(%rsp),%r10              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a672e:   mov    0xc(%r10),%r11d              ;*newarray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91a6732:   sub    %r11d,%ebp
  0x00007f03f91a6735:   mov    0x48(%rsp),%r11d
  0x00007f03f91a673a:   nop
  0x00007f03f91a673b:   nop
  0x00007f03f91a673c:   nop
  0x00007f03f91a673d:   nop
  0x00007f03f91a673e:   nop
  0x00007f03f91a673f:   nop
  0x00007f03f91a6740:   cmp    %ebp,%r11d
  0x00007f03f91a6743:   jg     0x00007f03f91a6b54
 ;; B121: #	out( B369 B122 ) <- in( B120 )  Freq: 0.0231597
  0x00007f03f91a6749:   cmp    $0x20311f9a,%r9d             ;   {oop(a 'java/lang/Class'{0x000000010188fcd0} = 'jdk/incubator/vector/IntMaxVector')}
  0x00007f03f91a6750:   je     0x00007f03f91a863a
 ;; B122: #	out( B370 B123 ) <- in( B121 )  Freq: 0.0231597
  0x00007f03f91a6756:   nop
  0x00007f03f91a6757:   nop
  0x00007f03f91a6758:   nop
  0x00007f03f91a6759:   nop
  0x00007f03f91a675a:   nop
  0x00007f03f91a675b:   nop
  0x00007f03f91a675c:   nop
  0x00007f03f91a675d:   nop
  0x00007f03f91a675e:   nop
  0x00007f03f91a675f:   nop
  0x00007f03f91a6760:   cmp    $0x1c1,%ecx
  0x00007f03f91a6766:   jae    0x00007f03f91a8674
 ;; B123: #	out( B150 B124 ) <- in( B122 )  Freq: 0.0231597
  0x00007f03f91a676c:   cmp    $0x101,%ebx
  0x00007f03f91a6772:   jge    0x00007f03f91a6b0c
 ;; B124: #	out( B128 B125 ) <- in( B123 )  Freq: 0.00995504
  0x00007f03f91a6778:   nop
  0x00007f03f91a6779:   nop
  0x00007f03f91a677a:   nop
  0x00007f03f91a677b:   nop
  0x00007f03f91a677c:   nop
  0x00007f03f91a677d:   nop
  0x00007f03f91a677e:   nop
  0x00007f03f91a677f:   nop
  0x00007f03f91a6780:   cmp    $0x81,%ebx
  0x00007f03f91a6786:   jge    0x00007f03f91a67d4
 ;; B125: #	out( B381 B126 ) <- in( B124 )  Freq: 0.00335273
  0x00007f03f91a6788:   cmp    $0x41,%ebx
  0x00007f03f91a678b:   jl     0x00007f03f91a8870
 ;; B126: #	out( B370 B127 ) <- in( B125 )  Freq: 0.00335273
  0x00007f03f91a6791:   cmp    $0x7f,%ebx
  0x00007f03f91a6794:   jle    0x00007f03f91a8674           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B127: #	out( N5788 ) <- in( B126 )  Freq: 0.00335273
  0x00007f03f91a679a:   mov    $0xffffffad,%esi             ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a679f:   mov    0x38(%rsp),%rbp
  0x00007f03f91a67a4:   mov    0x28(%rsp),%r10
  0x00007f03f91a67a9:   mov    %r10,0x20(%rsp)
  0x00007f03f91a67ae:   mov    0x50(%rsp),%r10
  0x00007f03f91a67b3:   mov    %r10,0x38(%rsp)
  0x00007f03f91a67b8:   vzeroupper 
  0x00007f03f91a67bb:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [56]=Oop [80]=Oop [160]=Oop }
                                                            ;*getstatic ZERO {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::zero@64 (line 3652)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a67c0:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a67ca:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a67ce:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a67d3:   hlt    
 ;; B128: #	out( B370 B129 ) <- in( B124 )  Freq: 0.00660231
  0x00007f03f91a67d4:   nop
  0x00007f03f91a67d5:   nop
  0x00007f03f91a67d6:   nop
  0x00007f03f91a67d7:   nop
  0x00007f03f91a67d8:   nop
  0x00007f03f91a67d9:   nop
  0x00007f03f91a67da:   nop
  0x00007f03f91a67db:   nop
  0x00007f03f91a67dc:   nop
  0x00007f03f91a67dd:   nop
  0x00007f03f91a67de:   nop
  0x00007f03f91a67df:   nop
  0x00007f03f91a67e0:   cmp    $0xff,%ebx                   ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a67e6:   jle    0x00007f03f91a8674
 ;; B129: #	out( B380 B130 ) <- in( B128 )  Freq: 0.0066023
  0x00007f03f91a67ec:   mov    0x20(%rsp),%r10d
  0x00007f03f91a67f1:   cmp    $0x98750,%r10d               ;   {metadata('jdk/incubator/vector/Int256Vector$Int256Mask')}
  0x00007f03f91a67f8:   jne    0x00007f03f91a8848
 ;; B130: #	out( B339 B131 ) <- in( B129 )  Freq: 0.00660229
  0x00007f03f91a67fe:   mov    0x50(%rsp),%rbp              ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@247 (line 633)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a6803:   mov    0x28(%rsp),%r10
  0x00007f03f91a6808:   mov    0x30(%rsp),%r11              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a680d:   vmovdqu 0x10(%r10,%r11,4),%ymm3
  0x00007f03f91a6814:   mov    0x148(%r15),%r10
  0x00007f03f91a681b:   mov    %r10,%r11
  0x00007f03f91a681e:   add    $0x30,%r11                   ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
  0x00007f03f91a6822:   cmp    0x158(%r15),%r11             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6829:   jae    0x00007f03f91a805f           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B131: #	out( B132 ) <- in( B130 )  Freq: 0.00660163
  0x00007f03f91a682f:   mov    %r11,0x148(%r15)
  0x00007f03f91a6836:   prefetchw 0xc0(%r11)
  0x00007f03f91a683e:   movq   $0x1,(%r10)
  0x00007f03f91a6845:   prefetchw 0x100(%r11)
  0x00007f03f91a684d:   movl   $0x40c30,0x8(%r10)           ;   {metadata({type array int})}
  0x00007f03f91a6855:   prefetchw 0x140(%r11)
  0x00007f03f91a685d:   movl   $0x8,0xc(%r10)
  0x00007f03f91a6865:   prefetchw 0x180(%r11)
  0x00007f03f91a686d:   mov    %r12,0x10(%r10)
  0x00007f03f91a6871:   mov    %r12,0x18(%r10)
  0x00007f03f91a6875:   mov    %r12,0x20(%r10)
  0x00007f03f91a6879:   mov    %r12,0x28(%r10)              ;*getfield laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::loopBound@2 (line 203)
                                                            ; - App::micro_vector_masked@65 (line 43)
 ;; B132: #	out( B341 B133 ) <- in( B340 B131 )  Freq: 0.00660229
  0x00007f03f91a687d:   mov    %r10,0x18(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6882:   mov    0xc(%rbp),%r8d               ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
  0x00007f03f91a6886:   mov    0x148(%r15),%r10             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a688d:   vmovq  0x10(%r12,%r8,8),%xmm0       ;*invokevirtual laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@6 (line 241)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91a6894:   mov    %r10,%r11
  0x00007f03f91a6897:   add    $0x10,%r11
  0x00007f03f91a689b:   movabs $0x101964e68,%r8             ;   {oop([I{0x0000000101964e68})}
  0x00007f03f91a68a5:   vmovdqu 0x10(%r8),%ymm1
  0x00007f03f91a68ab:   vpxor  %ymm2,%ymm2,%ymm2
  0x00007f03f91a68af:   vpsubb %ymm0,%ymm2,%ymm2
  0x00007f03f91a68b3:   vpmovsxbd %xmm2,%ymm2
  0x00007f03f91a68b8:   vpblendvb %ymm2,%ymm3,%ymm1,%ymm0
  0x00007f03f91a68be:   mov    0x18(%rsp),%r8               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a68c3:   vmovdqu %ymm0,0x10(%r8)             ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
  0x00007f03f91a68c9:   cmp    0x158(%r15),%r11             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a68d0:   jae    0x00007f03f91a8091           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B133: #	out( B134 ) <- in( B132 )  Freq: 0.00660163
  0x00007f03f91a68d6:   mov    %r11,0x148(%r15)
  0x00007f03f91a68dd:   prefetchw 0xc0(%r11)
  0x00007f03f91a68e5:   mov    %r10,%r11
  0x00007f03f91a68e8:   movq   $0x1,(%r11)
  0x00007f03f91a68ef:   movl   $0x98110,0x8(%r11)           ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
                                                            ;   {metadata('jdk/incubator/vector/Int256Vector')}
 ;; B134: #	out( B139 ) <- in( B342 B133 )  Freq: 0.00660229
  0x00007f03f91a68f7:   mov    0x18(%rsp),%r10
  0x00007f03f91a68fc:   push   %r10
  0x00007f03f91a68fe:   cmp    0xce3df6b(%rip),%r12        # 0x00007f0405fe4870
                                                            ;   {external_word}
  0x00007f03f91a6905:   je     0x00007f03f91a691f
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007f03f91a690b:   movabs $0x7f04055920d0,%rdi         ;   {external_word}
  0x00007f03f91a6915:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a6919:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a691e:   hlt    
  0x00007f03f91a691f:   pop    %r10
  0x00007f03f91a6921:   test   %r10,%r10
  0x00007f03f91a6924:   jne    0x00007f03f91a693e
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007f03f91a692a:   movabs $0x7f0405592110,%rdi         ;   {external_word}
  0x00007f03f91a6934:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a6938:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a693d:   hlt    
  0x00007f03f91a693e:   shr    $0x3,%r10                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6942:   mov    %r10d,0xc(%r11)              ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVector@0 (line 3574)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91a6946:   jmpq   0x00007f03f91a6a03
 ;; B135: #	out( B351 B136 ) <- in( B175 )  Freq: 0.00198057
  0x00007f03f91a694b:   mov    0x148(%r15),%rcx
  0x00007f03f91a6952:   mov    %rcx,%r10
  0x00007f03f91a6955:   add    $0x18,%r10                   ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
  0x00007f03f91a6959:   nop
  0x00007f03f91a695a:   nop
  0x00007f03f91a695b:   nop
  0x00007f03f91a695c:   nop
  0x00007f03f91a695d:   nop
  0x00007f03f91a695e:   nop
  0x00007f03f91a695f:   nop
  0x00007f03f91a6960:   cmp    0x158(%r15),%r10             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6967:   jae    0x00007f03f91a82c4           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B136: #	out( B137 ) <- in( B135 )  Freq: 0.00198037
  0x00007f03f91a696d:   mov    %r10,0x148(%r15)
  0x00007f03f91a6974:   prefetchw 0xc0(%r10)
  0x00007f03f91a697c:   movq   $0x1,(%rcx)
  0x00007f03f91a6983:   movl   $0xacb58,0x8(%rcx)           ;   {metadata('jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58')}
  0x00007f03f91a698a:   mov    %r12d,0xc(%rcx)
  0x00007f03f91a698e:   mov    %r12d,0x14(%rcx)             ;*ifne {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@40 (line 247)
                                                            ; - App::micro_vector_masked@149 (line 51)
 ;; B137: #	out( B435 B138 ) <- in( B352 B136 )  Freq: 0.00198057
  0x00007f03f91a6992:   mov    0x28(%rsp),%r10
  0x00007f03f91a6997:   push   %r10
  0x00007f03f91a6999:   cmp    0xce3ded0(%rip),%r12        # 0x00007f0405fe4870
                                                            ;   {external_word}
  0x00007f03f91a69a0:   je     0x00007f03f91a69ba
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007f03f91a69a6:   movabs $0x7f04055920d0,%rdi         ;   {external_word}
  0x00007f03f91a69b0:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a69b4:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a69b9:   hlt    
  0x00007f03f91a69ba:   pop    %r10
  0x00007f03f91a69bc:   test   %r10,%r10
  0x00007f03f91a69bf:   jne    0x00007f03f91a69d9
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007f03f91a69c5:   movabs $0x7f0405592110,%rdi         ;   {external_word}
  0x00007f03f91a69cf:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a69d3:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a69d8:   hlt    
  0x00007f03f91a69d9:   mov    %r10,%r11
  0x00007f03f91a69dc:   shr    $0x3,%r11                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a69e0:   mov    %r11d,0x10(%rcx)             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@247 (line 633)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a69e4:   mov    0x48(%rsp),%r10d             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a69e9:   mov    %r10d,0xc(%rcx)              ;*synchronization entry
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@-1 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a69ed:   mov    0x40(%rsp),%rsi
  0x00007f03f91a69f2:   mov    0x50(%rsp),%rdx              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a69f7:   nop
  0x00007f03f91a69f8:   vzeroupper 
  0x00007f03f91a69fb:   callq  0x00007f03f918e380           ; ImmutableOopMap {[56]=Oop [80]=Oop [160]=Oop }
                                                            ;*invokevirtual vOp {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@64 (line 2728)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {optimized virtual_call}
 ;; B138: #	out( B139 ) <- in( B137 )  Freq: 0.00198053
  0x00007f03f91a6a00:   mov    %rax,%r11
 ;; B139: #	out( B376 B140 ) <- in( B134 B138 )  Freq: 0.00858282
  0x00007f03f91a6a03:   mov    0xa0(%rsp),%r8
  0x00007f03f91a6a0b:   test   %r8,%r8
  0x00007f03f91a6a0e:   je     0x00007f03f91a87ac           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B140: #	out( B437 B141 ) <- in( B139 )  Freq: 0.00858281
  0x00007f03f91a6a14:   movabs $0x101985d48,%rdx            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
                                                            ;   {oop(a 'jdk/incubator/vector/VectorOperators$AssociativeImpl'{0x0000000101985d48})}
  0x00007f03f91a6a1e:   mov    0xa0(%rsp),%rsi
  0x00007f03f91a6a26:   mov    %r11,%rcx
  0x00007f03f91a6a29:   mov    0x50(%rsp),%r10
  0x00007f03f91a6a2e:   mov    %r10,0x40(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6a33:   nop
  0x00007f03f91a6a34:   nop
  0x00007f03f91a6a35:   nop
  0x00007f03f91a6a36:   vzeroupper 
  0x00007f03f91a6a39:   movabs $0x800098110,%rax
  0x00007f03f91a6a43:   callq  0x00007f03f9179880           ; ImmutableOopMap {[56]=Oop [64]=Oop [80]=Oop [160]=Oop }
                                                            ;*invokevirtual lanewise {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.IntVector::lanewise@70 (line 688)
                                                            ; - jdk.incubator.vector.IntVector::add@6 (line 1133)
                                                            ; - App::micro_vector_masked@188 (line 54)
                                                            ;   {virtual_call}
 ;; B141: #	out( B436 B142 ) <- in( B140 )  Freq: 0.00858264
  0x00007f03f91a6a48:   mov    0xa0(%rsp),%rsi
  0x00007f03f91a6a50:   mov    %rax,%rdx
  0x00007f03f91a6a53:   mov    0x40(%rsp),%rcx              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6a58:   nop
  0x00007f03f91a6a59:   nop
  0x00007f03f91a6a5a:   vzeroupper 
  0x00007f03f91a6a5d:   movabs $0xffffffffffffffff,%rax
  0x00007f03f91a6a67:   callq  0x00007f03f9112540           ; ImmutableOopMap {[56]=Oop [64]=Oop [80]=Oop }
                                                            ;*invokevirtual blend {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.IntVector::lanewise@74 (line 688)
                                                            ; - jdk.incubator.vector.IntVector::add@6 (line 1133)
                                                            ; - App::micro_vector_masked@188 (line 54)
                                                            ;   {virtual_call}
 ;; B142: #	out( B414 B143 ) <- in( B141 )  Freq: 0.00858247
  0x00007f03f91a6a6c:   mov    0x8(%rax),%ebp               ; implicit exception: dispatches to 0x00007f03f91a8df0
 ;; B143: #	out( B438 B144 ) <- in( B142 )  Freq: 0.00858246
  0x00007f03f91a6a6f:   mov    %rax,0x28(%rsp)
  0x00007f03f91a6a74:   mov    0x40(%rsp),%rsi              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6a79:   nop
  0x00007f03f91a6a7a:   vzeroupper 
  0x00007f03f91a6a7d:   movabs $0xffffffffffffffff,%rax
  0x00007f03f91a6a87:   callq  0x00007f03f9112580           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop }
                                                            ;*invokevirtual allTrue {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@1 (line 3000)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {virtual_call}
 ;; B144: #	out( B218 B145 ) <- in( B143 )  Freq: 0.00858229
  0x00007f03f91a6a8c:   test   %eax,%eax
  0x00007f03f91a6a8e:   je     0x00007f03f91a73f6
 ;; B145: #	out( B378 B146 ) <- in( B144 )  Freq: 0.00772406
  0x00007f03f91a6a94:   nop
  0x00007f03f91a6a95:   nop
  0x00007f03f91a6a96:   nop
  0x00007f03f91a6a97:   nop
  0x00007f03f91a6a98:   nop
  0x00007f03f91a6a99:   nop
  0x00007f03f91a6a9a:   nop
  0x00007f03f91a6a9b:   nop
  0x00007f03f91a6a9c:   nop
  0x00007f03f91a6a9d:   nop
  0x00007f03f91a6a9e:   nop
  0x00007f03f91a6a9f:   nop
  0x00007f03f91a6aa0:   cmp    $0x98110,%ebp                ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {metadata('jdk/incubator/vector/Int256Vector')}
  0x00007f03f91a6aa6:   jne    0x00007f03f91a87fc
 ;; B146: #	out( B379 B147 ) <- in( B145 )  Freq: 0.00772405
  0x00007f03f91a6aac:   mov    0x28(%rsp),%r10
  0x00007f03f91a6ab1:   mov    %r10,%r8                     ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a6ab4:   mov    0xac(%rsp),%r11d
  0x00007f03f91a6abc:   nop
  0x00007f03f91a6abd:   nop
  0x00007f03f91a6abe:   nop
  0x00007f03f91a6abf:   nop
  0x00007f03f91a6ac0:   test   %r11d,%r11d                  ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6ac3:   jl     0x00007f03f91a8820           ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
 ;; B147: #	out( B377 B148 ) <- in( B146 )  Freq: 0.00772404
  0x00007f03f91a6ac9:   mov    0x48(%rsp),%r9d
  0x00007f03f91a6ace:   cmp    %r11d,%r9d
  0x00007f03f91a6ad1:   jae    0x00007f03f91a87d0           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B148: #	out( B149 ) <- in( B147 )  Freq: 0.00772403
  0x00007f03f91a6ad7:   mov    0xc(%r8),%r11d               ;*isub {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@144 (line 51)
  0x00007f03f91a6adb:   vmovdqu 0x10(%r12,%r11,8),%ymm0
  0x00007f03f91a6ae2:   mov    0x48(%rsp),%r10d
  0x00007f03f91a6ae7:   mov    0x38(%rsp),%r11              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6aec:   vmovdqu %ymm0,0x10(%r11,%r10,4)     ;*aload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@33 (line 38)
 ;; B149: #	out( N5788 ) <- in( B296 B291 B259 B148 )  Freq: 0.0077485
  0x00007f03f91a6af3:   vzeroupper 
  0x00007f03f91a6af6:   add    $0xd0,%rsp
  0x00007f03f91a6afd:   pop    %rbp
  0x00007f03f91a6afe:   cmp    0x128(%r15),%rsp             ;   {poll_return}
  0x00007f03f91a6b05:   ja     0x00007f03f91a9074
  0x00007f03f91a6b0b:   retq   
 ;; B150: #	out( B370 B151 ) <- in( B123 )  Freq: 0.0132046
  0x00007f03f91a6b0c:   cmp    $0x1ff,%ebx
  0x00007f03f91a6b12:   jle    0x00007f03f91a8674           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B151: #	out( N5788 ) <- in( B150 )  Freq: 0.0132046
  0x00007f03f91a6b18:   mov    $0xffffffad,%esi             ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a6b1d:   mov    0x38(%rsp),%rbp
  0x00007f03f91a6b22:   mov    0x28(%rsp),%r10
  0x00007f03f91a6b27:   mov    %r10,0x20(%rsp)
  0x00007f03f91a6b2c:   mov    0x50(%rsp),%r10
  0x00007f03f91a6b31:   mov    %r10,0x38(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6b36:   nop
  0x00007f03f91a6b37:   nop
  0x00007f03f91a6b38:   vzeroupper 
  0x00007f03f91a6b3b:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [56]=Oop [80]=Oop [160]=Oop }
                                                            ;*getstatic ZERO {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::zero@72 (line 3654)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a6b40:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a6b4a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a6b4e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a6b53:   hlt    
 ;; B152: #	out( B154 ) <- in( B120 )  Freq: 0.0231597
  0x00007f03f91a6b54:   mov    0x28(%rsp),%r8
  0x00007f03f91a6b59:   jmp    0x00007f03f91a6b69
 ;; B153: #	out( B362 B154 ) <- in( B117 )  Freq: 0.0463195
  0x00007f03f91a6b5b:   mov    0x28(%rsp),%r8
  0x00007f03f91a6b60:   test   %r8,%r8                      ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6b63:   je     0x00007f03f91a8518
 ;; B154: #	out( B361 B155 ) <- in( B152 B153 )  Freq: 0.0694792
  0x00007f03f91a6b69:   mov    0x60(%rsp),%rdi
  0x00007f03f91a6b6e:   movabs $0x8000968f8,%r10            ;   {metadata('jdk/incubator/vector/AbstractMask')}
  0x00007f03f91a6b78:   cmp    %r10,%rdi
  0x00007f03f91a6b7b:   nop
  0x00007f03f91a6b7c:   nop
  0x00007f03f91a6b7d:   nop
  0x00007f03f91a6b7e:   nop
  0x00007f03f91a6b7f:   nop
  0x00007f03f91a6b80:   jne    0x00007f03f91a84f0
 ;; B155: #	out( B359 B156 ) <- in( B154 )  Freq: 0.0694791
  0x00007f03f91a6b86:   mov    0x50(%rsp),%r10
  0x00007f03f91a6b8b:   mov    0xc(%r8),%r11d               ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a6b8f:   cmp    $0x20311f9a,%r9d             ;   {oop(a 'java/lang/Class'{0x000000010188fcd0} = 'jdk/incubator/vector/IntMaxVector')}
  0x00007f03f91a6b96:   je     0x00007f03f91a8454
 ;; B156: #	out( B360 B157 ) <- in( B155 )  Freq: 0.069479
  0x00007f03f91a6b9c:   nop
  0x00007f03f91a6b9d:   nop
  0x00007f03f91a6b9e:   nop
  0x00007f03f91a6b9f:   nop
  0x00007f03f91a6ba0:   cmp    $0x1c1,%ecx
  0x00007f03f91a6ba6:   jae    0x00007f03f91a84a4
 ;; B157: #	out( B181 B158 ) <- in( B156 )  Freq: 0.0694789
  0x00007f03f91a6bac:   cmp    $0x101,%ebx
  0x00007f03f91a6bb2:   jge    0x00007f03f91a6f08
 ;; B158: #	out( B162 B159 ) <- in( B157 )  Freq: 0.0298651
  0x00007f03f91a6bb8:   nop
  0x00007f03f91a6bb9:   nop
  0x00007f03f91a6bba:   nop
  0x00007f03f91a6bbb:   nop
  0x00007f03f91a6bbc:   nop
  0x00007f03f91a6bbd:   nop
  0x00007f03f91a6bbe:   nop
  0x00007f03f91a6bbf:   nop
  0x00007f03f91a6bc0:   cmp    $0x81,%ebx
  0x00007f03f91a6bc6:   jge    0x00007f03f91a6c2c
 ;; B159: #	out( B374 B160 ) <- in( B158 )  Freq: 0.0100582
  0x00007f03f91a6bcc:   cmp    $0x41,%ebx
  0x00007f03f91a6bcf:   jl     0x00007f03f91a871c
 ;; B160: #	out( B360 B161 ) <- in( B159 )  Freq: 0.0100582
  0x00007f03f91a6bd5:   cmp    $0x7f,%ebx
  0x00007f03f91a6bd8:   jle    0x00007f03f91a84a4           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B161: #	out( N5788 ) <- in( B160 )  Freq: 0.0100582
  0x00007f03f91a6bde:   mov    $0xffffffad,%esi             ;*invokestatic fromArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a6be3:   mov    0x38(%rsp),%rbp
  0x00007f03f91a6be8:   mov    0x48(%rsp),%r9d
  0x00007f03f91a6bed:   mov    %r8,0x20(%rsp)
  0x00007f03f91a6bf2:   mov    %r9d,0x1c(%rsp)
  0x00007f03f91a6bf7:   mov    %r9d,0x28(%rsp)
  0x00007f03f91a6bfc:   mov    0x50(%rsp),%r8
  0x00007f03f91a6c01:   mov    %r8,0x48(%rsp)
  0x00007f03f91a6c06:   mov    %r10,0x50(%rsp)
  0x00007f03f91a6c0b:   mov    %r11d,0x2c(%rsp)
  0x00007f03f91a6c10:   vzeroupper 
  0x00007f03f91a6c13:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [64]=Oop [72]=Oop [80]=Oop [160]=Oop }
                                                            ;*getstatic IOTA {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::iota@64 (line 3666)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a6c18:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a6c22:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a6c26:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a6c2b:   hlt    
 ;; B162: #	out( B360 B163 ) <- in( B158 )  Freq: 0.0198069
  0x00007f03f91a6c2c:   cmp    $0xff,%ebx                   ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6c32:   jle    0x00007f03f91a84a4
 ;; B163: #	out( B443 B164 ) <- in( B162 )  Freq: 0.0198069
  0x00007f03f91a6c38:   mov    %r11d,0x4c(%rsp)
  0x00007f03f91a6c3d:   mov    %r10,0x58(%rsp)
  0x00007f03f91a6c42:   mov    %r8,0x28(%rsp)
  0x00007f03f91a6c47:   mov    %r10,%rsi
  0x00007f03f91a6c4a:   vzeroupper 
  0x00007f03f91a6c4d:   movabs $0x800098750,%rax
  0x00007f03f91a6c57:   callq  0x00007f03f9199820           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop }
                                                            ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.AbstractMask::vectorSpecies@1 (line 61)
                                                            ; - jdk.incubator.vector.VectorMask::length@1 (line 154)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {virtual_call}
 ;; B164: #	out( B413 B165 ) <- in( B163 )  Freq: 0.0198065
  0x00007f03f91a6c5c:   mov    %rax,%r8                     ;*invokespecial fromArray0Template {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91a6c5f:   nop
  0x00007f03f91a6c60:   mov    0x8(%r8),%r10d               ; implicit exception: dispatches to 0x00007f03f91a8dc0
 ;; B165: #	out( B371 B166 ) <- in( B164 )  Freq: 0.0198065
  0x00007f03f91a6c64:   movabs $0x800000000,%r11
  0x00007f03f91a6c6e:   add    %r10,%r11
  0x00007f03f91a6c71:   mov    0x48(%r11),%r10
  0x00007f03f91a6c75:   movabs $0x800094798,%r11            ;   {metadata('jdk/incubator/vector/AbstractSpecies')}
  0x00007f03f91a6c7f:   nop
  0x00007f03f91a6c80:   cmp    %r11,%r10                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6c83:   jne    0x00007f03f91a86b0           ;*lload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@35 (line 247)
                                                            ; - App::micro_vector_masked@149 (line 51)
 ;; B166: #	out( B169 B167 ) <- in( B165 )  Freq: 0.0198065
  0x00007f03f91a6c89:   movabs $0x101964ea8,%r10            ;   {oop([I{0x0000000101964ea8})}
  0x00007f03f91a6c93:   vmovdqu 0x10(%r10),%ymm0            ;*invokestatic arrayAddress {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@20 (line 3211)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91a6c99:   mov    0xc(%r8),%r9d
  0x00007f03f91a6c9d:   mov    0x4c(%rsp),%r11d
  0x00007f03f91a6ca2:   sub    0x48(%rsp),%r11d
  0x00007f03f91a6ca7:   cmp    %r9d,%r11d
  0x00007f03f91a6caa:   mov    %r9d,%r8d                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6cad:   cmovl  %r11d,%r8d                   ;*ifnull {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ImplCache::find@10 (line 1265)
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@238 (line 636)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a6cb1:   xor    %r11d,%r11d
  0x00007f03f91a6cb4:   test   %r8d,%r8d                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6cb7:   cmovle %r11d,%r8d                   ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91a6cbb:   vmovd  %r8d,%xmm1
  0x00007f03f91a6cc0:   vpbroadcastd %xmm1,%ymm1            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6cc5:   vpcmpgtd %ymm0,%ymm1,%ymm2
  0x00007f03f91a6cc9:   vpxor  -0x11f731(%rip),%ymm2,%ymm2        # Stub::vector_all_bits_set
                                                            ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
                                                            ;   {external_word}
  0x00007f03f91a6cd1:   mov    0x48(%rsp),%ecx
  0x00007f03f91a6cd5:   test   %ecx,%ecx
  0x00007f03f91a6cd7:   jge    0x00007f03f91a6d0d
 ;; B167: #	out( B375 B168 ) <- in( B166 )  Freq: 0.00990323
  0x00007f03f91a6cd9:   mov    0x48(%rsp),%r10d
  0x00007f03f91a6cde:   mov    %r9d,%r11d
  0x00007f03f91a6ce1:   neg    %r11d
  0x00007f03f91a6ce4:   cmp    %r11d,%r10d
  0x00007f03f91a6ce7:   mov    0x48(%rsp),%ebx
  0x00007f03f91a6ceb:   cmovl  %r11d,%ebx
  0x00007f03f91a6cef:   neg    %ebx
  0x00007f03f91a6cf1:   vmovd  %ebx,%xmm1
  0x00007f03f91a6cf5:   vpbroadcastd %xmm1,%ymm1            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6cfa:   vpcmpgtd %ymm0,%ymm1,%ymm0          ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a6cfe:   nop
  0x00007f03f91a6cff:   nop
  0x00007f03f91a6d00:   cmp    %r9d,%r8d                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6d03:   jl     0x00007f03f91a8768
 ;; B168: #	out( B169 ) <- in( B167 )  Freq: 0.00990322
  0x00007f03f91a6d09:   vmovdqu %ymm0,%ymm2
 ;; B169: #	out( B311 B170 ) <- in( B166 B168 )  Freq: 0.0198064
  0x00007f03f91a6d0d:   mov    0x148(%r15),%r11
  0x00007f03f91a6d14:   mov    %r11,%r10
  0x00007f03f91a6d17:   add    $0x18,%r10                   ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
  0x00007f03f91a6d1b:   nop
  0x00007f03f91a6d1c:   nop
  0x00007f03f91a6d1d:   nop
  0x00007f03f91a6d1e:   nop
  0x00007f03f91a6d1f:   nop
  0x00007f03f91a6d20:   cmp    0x158(%r15),%r10             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6d27:   jae    0x00007f03f91a7cf8
 ;; B170: #	out( B171 ) <- in( B169 )  Freq: 0.0198045
  0x00007f03f91a6d2d:   mov    %r10,0x148(%r15)
  0x00007f03f91a6d34:   prefetchw 0xc0(%r10)
  0x00007f03f91a6d3c:   movq   $0x1,(%r11)
  0x00007f03f91a6d43:   prefetchw 0x100(%r10)
  0x00007f03f91a6d4b:   movl   $0x40000,0x8(%r11)           ;   {metadata({type array bool})}
  0x00007f03f91a6d53:   prefetchw 0x140(%r10)
  0x00007f03f91a6d5b:   movl   $0x8,0xc(%r11)
  0x00007f03f91a6d63:   prefetchw 0x180(%r10)
  0x00007f03f91a6d6b:   mov    %r12,0x10(%r11)              ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B171: #	out( B313 B172 ) <- in( B312 B170 )  Freq: 0.0198064
  0x00007f03f91a6d6f:   mov    0x148(%r15),%rsi
  0x00007f03f91a6d76:   mov    %rsi,%r10
  0x00007f03f91a6d79:   add    $0x10,%r10
  0x00007f03f91a6d7d:   vextracti128 $0x1,%ymm2,%xmm0
  0x00007f03f91a6d83:   vpackssdw %xmm0,%xmm2,%xmm0
  0x00007f03f91a6d87:   vpacksswb %xmm0,%xmm0,%xmm0
  0x00007f03f91a6d8b:   vpabsb %xmm0,%xmm0                  ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6d90:   vmovq  %xmm0,0x10(%r11)             ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
  0x00007f03f91a6d96:   nop
  0x00007f03f91a6d97:   nop
  0x00007f03f91a6d98:   nop
  0x00007f03f91a6d99:   nop
  0x00007f03f91a6d9a:   nop
  0x00007f03f91a6d9b:   nop
  0x00007f03f91a6d9c:   nop
  0x00007f03f91a6d9d:   nop
  0x00007f03f91a6d9e:   nop
  0x00007f03f91a6d9f:   nop
  0x00007f03f91a6da0:   cmp    0x158(%r15),%r10             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6da7:   jae    0x00007f03f91a7d2d
 ;; B172: #	out( B173 ) <- in( B171 )  Freq: 0.0198045
  0x00007f03f91a6dad:   mov    %r10,0x148(%r15)
  0x00007f03f91a6db4:   prefetchw 0xc0(%r10)
  0x00007f03f91a6dbc:   movq   $0x1,(%rsi)
  0x00007f03f91a6dc3:   movl   $0x98750,0x8(%rsi)           ;   {metadata('jdk/incubator/vector/Int256Vector$Int256Mask')}
  0x00007f03f91a6dca:   mov    %ecx,0x48(%rsp)              ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B173: #	out( B444 B174 ) <- in( B314 B172 )  Freq: 0.0198064
  0x00007f03f91a6dce:   push   %r10
  0x00007f03f91a6dd0:   cmp    0xce3da99(%rip),%r12        # 0x00007f0405fe4870
                                                            ;   {external_word}
  0x00007f03f91a6dd7:   je     0x00007f03f91a6df1
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007f03f91a6ddd:   movabs $0x7f04055920d0,%rdi         ;   {external_word}
  0x00007f03f91a6de7:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a6deb:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a6df0:   hlt    
  0x00007f03f91a6df1:   pop    %r10
  0x00007f03f91a6df3:   test   %r11,%r11
  0x00007f03f91a6df6:   jne    0x00007f03f91a6e10
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007f03f91a6dfc:   movabs $0x7f0405592110,%rdi         ;   {external_word}
  0x00007f03f91a6e06:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a6e0a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a6e0f:   hlt    
  0x00007f03f91a6e10:   mov    %r11,%r10
  0x00007f03f91a6e13:   shr    $0x3,%r10                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6e17:   mov    %r10d,0xc(%rsi)              ;*invokevirtual add {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a6e1b:   mov    0x58(%rsp),%rdx              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6e20:   nop
  0x00007f03f91a6e21:   nop
  0x00007f03f91a6e22:   vzeroupper 
  0x00007f03f91a6e25:   movabs $0xffffffffffffffff,%rax
  0x00007f03f91a6e2f:   callq  0x00007f03f91124c0           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop [160]=Oop }
                                                            ;*invokevirtual and {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {virtual_call}
 ;; B174: #	out( B445 B175 ) <- in( B173 )  Freq: 0.019806
  0x00007f03f91a6e34:   mov    %rax,%rbp
  0x00007f03f91a6e37:   mov    %rax,%rsi
  0x00007f03f91a6e3a:   vzeroupper 
  0x00007f03f91a6e3d:   movabs $0xffffffffffffffff,%rax
  0x00007f03f91a6e47:   callq  0x00007f03f9112500           ; ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [160]=Oop }
                                                            ;*invokevirtual anyTrue {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@147 (line 240)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {virtual_call}
 ;; B175: #	out( B135 B176 ) <- in( B174 )  Freq: 0.0198057
  0x00007f03f91a6e4c:   test   %eax,%eax
  0x00007f03f91a6e4e:   je     0x00007f03f91a694b
 ;; B176: #	out( B441 B177 ) <- in( B175 )  Freq: 0.0178251
  0x00007f03f91a6e54:   mov    %rbp,%rsi                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6e57:   nop
  0x00007f03f91a6e58:   nop
  0x00007f03f91a6e59:   nop
  0x00007f03f91a6e5a:   vzeroupper 
  0x00007f03f91a6e5d:   movabs $0xffffffffffffffff,%rax
  0x00007f03f91a6e67:   callq  0x00007f03f9115f20           ; ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [160]=Oop }
                                                            ;*invokevirtual firstTrue {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@155 (line 241)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {virtual_call}
 ;; B177: #	out( B373 B178 ) <- in( B176 )  Freq: 0.0178247
  0x00007f03f91a6e6c:   mov    %rbp,%r9
  0x00007f03f91a6e6f:   mov    0x8(%r9),%r10d
  0x00007f03f91a6e73:   movabs $0x800000000,%r8
  0x00007f03f91a6e7d:   add    %r10,%r8
  0x00007f03f91a6e80:   mov    0x58(%r8),%r10
  0x00007f03f91a6e84:   movabs $0x8000968f8,%r8             ;   {metadata('jdk/incubator/vector/AbstractMask')}
  0x00007f03f91a6e8e:   cmp    %r8,%r10                     ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6e91:   jne    0x00007f03f91a86f8
 ;; B178: #	out( B440 B179 ) <- in( B177 )  Freq: 0.0178247
  0x00007f03f91a6e97:   mov    %r9,%rsi                     ;*invokevirtual opCodeRaw {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$OperatorImpl::opCode@1 (line 774)
                                                            ; - jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
                                                            ; - jdk.incubator.vector.IntVector::opCode@7 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a6e9a:   mov    0x48(%rsp),%edx
  0x00007f03f91a6e9e:   mov    %eax,%ecx
  0x00007f03f91a6ea0:   mov    0x4c(%rsp),%r8d
  0x00007f03f91a6ea5:   mov    0xb0(%rsp),%r9d
  0x00007f03f91a6ead:   rex.W pushq 0x50(%rsp)
  0x00007f03f91a6eb2:   rex.W popq 0x30(%rsp)               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6eb7:   nop
  0x00007f03f91a6eb8:   vzeroupper 
  0x00007f03f91a6ebb:   callq  0x00007f03f9115c20           ; ImmutableOopMap {[40]=Oop [48]=Oop [56]=Oop [64]=Oop [160]=Oop }
                                                            ;*invokevirtual checkIndexFailed {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@171 (line 243)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {optimized virtual_call}
 ;; B179: #	out( B372 B180 ) <- in( B178 )  Freq: 0.0178244
  0x00007f03f91a6ec0:   test   %rax,%rax
  0x00007f03f91a6ec3:   je     0x00007f03f91a86d4           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B180: #	out( N5788 ) <- in( B179 )  Freq: 0.0178243
  0x00007f03f91a6ec9:   mov    $0xffffffec,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a6ece:   mov    0x38(%rsp),%rbp
  0x00007f03f91a6ed3:   mov    0x28(%rsp),%r10
  0x00007f03f91a6ed8:   mov    %r10,0x20(%rsp)
  0x00007f03f91a6edd:   mov    0x48(%rsp),%r8d
  0x00007f03f91a6ee2:   mov    %r8d,0x1c(%rsp)
  0x00007f03f91a6ee7:   mov    %rax,0x48(%rsp)
  0x00007f03f91a6eec:   vzeroupper 
  0x00007f03f91a6eef:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [48]=Oop [64]=Oop [72]=Oop [160]=Oop }
                                                            ;*athrow {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a6ef4:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a6efe:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a6f02:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a6f07:   hlt    
 ;; B181: #	out( B360 B182 ) <- in( B157 )  Freq: 0.0396138
  0x00007f03f91a6f08:   cmp    $0x1ff,%ebx
  0x00007f03f91a6f0e:   jle    0x00007f03f91a84a4           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B182: #	out( N5788 ) <- in( B181 )  Freq: 0.0396138
  0x00007f03f91a6f14:   mov    $0xffffffad,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a6f19:   mov    0x38(%rsp),%rbp
  0x00007f03f91a6f1e:   mov    0x48(%rsp),%ecx
  0x00007f03f91a6f22:   mov    %r8,0x20(%rsp)
  0x00007f03f91a6f27:   mov    %ecx,0x1c(%rsp)
  0x00007f03f91a6f2b:   mov    %ecx,0x28(%rsp)
  0x00007f03f91a6f2f:   mov    0x50(%rsp),%r8
  0x00007f03f91a6f34:   mov    %r8,0x48(%rsp)
  0x00007f03f91a6f39:   mov    %r10,0x50(%rsp)
  0x00007f03f91a6f3e:   mov    %r11d,0x2c(%rsp)             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6f43:   nop
  0x00007f03f91a6f44:   vzeroupper 
  0x00007f03f91a6f47:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [64]=Oop [72]=Oop [80]=Oop [160]=Oop }
                                                            ;*getstatic IOTA {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::iota@72 (line 3668)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a6f4c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a6f56:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a6f5a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a6f5f:   hlt    
 ;; B183: #	out( B349 B184 ) <- in( B99 )  Freq: 0.142525
  0x00007f03f91a6f60:   cmp    $0x1ff,%r11d
  0x00007f03f91a6f67:   jle    0x00007f03f91a8254           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B184: #	out( N5788 ) <- in( B183 )  Freq: 0.142525
  0x00007f03f91a6f6d:   mov    $0xffffffad,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a6f72:   mov    0x18(%rsp),%rbp
  0x00007f03f91a6f77:   mov    0x38(%rsp),%r10
  0x00007f03f91a6f7c:   mov    %r10,0x18(%rsp)
  0x00007f03f91a6f81:   mov    0x28(%rsp),%r10
  0x00007f03f91a6f86:   mov    %r10,0x20(%rsp)
  0x00007f03f91a6f8b:   mov    0x40(%rsp),%r10
  0x00007f03f91a6f90:   mov    %r10,0x30(%rsp)
  0x00007f03f91a6f95:   mov    %rax,0x40(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6f9a:   nop
  0x00007f03f91a6f9b:   nop
  0x00007f03f91a6f9c:   vzeroupper 
  0x00007f03f91a6f9f:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop [80]=Oop }
                                                            ;*getstatic ZERO {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::zero@72 (line 3654)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a6fa4:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a6fae:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a6fb2:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a6fb7:   hlt    
 ;; B185: #	out( B343 B186 ) <- in( B93 )  Freq: 0.499952
  0x00007f03f91a6fb8:   mov    0x40(%rsp),%r10
  0x00007f03f91a6fbd:   nop
  0x00007f03f91a6fbe:   nop
  0x00007f03f91a6fbf:   nop
  0x00007f03f91a6fc0:   test   %r10,%r10                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6fc3:   je     0x00007f03f91a80b4           ;*synchronization entry
                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@-1
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@26 (line 3211)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
 ;; B186: #	out( B333 B187 ) <- in( B96 B185 )  Freq: 0.749927
  0x00007f03f91a6fc9:   mov    0x60(%rsp),%r10
  0x00007f03f91a6fce:   movabs $0x8000968f8,%r9             ;   {metadata('jdk/incubator/vector/AbstractMask')}
  0x00007f03f91a6fd8:   cmp    %r9,%r10                     ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6fdb:   nop
  0x00007f03f91a6fdc:   nop
  0x00007f03f91a6fdd:   nop
  0x00007f03f91a6fde:   nop
  0x00007f03f91a6fdf:   nop
  0x00007f03f91a6fe0:   jne    0x00007f03f91a7fec
 ;; B187: #	out( B331 B188 ) <- in( B186 )  Freq: 0.749927
  0x00007f03f91a6fe6:   mov    %rax,%r10                    ;*getfield laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::loopBound@2 (line 203)
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a6fe9:   mov    %r10,0x68(%rsp)
  0x00007f03f91a6fee:   mov    0x40(%rsp),%r10              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a6ff3:   mov    0xc(%r10),%r10d              ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a6ff7:   mov    %r10d,0x4c(%rsp)
  0x00007f03f91a6ffc:   nop
  0x00007f03f91a6ffd:   nop
  0x00007f03f91a6ffe:   nop
  0x00007f03f91a6fff:   nop
  0x00007f03f91a7000:   cmp    $0x20311f9a,%r8d             ;   {oop(a 'java/lang/Class'{0x000000010188fcd0} = 'jdk/incubator/vector/IntMaxVector')}
  0x00007f03f91a7007:   je     0x00007f03f91a7f64
 ;; B188: #	out( B332 B189 ) <- in( B187 )  Freq: 0.749926
  0x00007f03f91a700d:   cmp    $0x1c1,%ecx
  0x00007f03f91a7013:   jae    0x00007f03f91a7fa8
 ;; B189: #	out( B213 B190 ) <- in( B188 )  Freq: 0.749925
  0x00007f03f91a7019:   nop
  0x00007f03f91a701a:   nop
  0x00007f03f91a701b:   nop
  0x00007f03f91a701c:   nop
  0x00007f03f91a701d:   nop
  0x00007f03f91a701e:   nop
  0x00007f03f91a701f:   nop
  0x00007f03f91a7020:   cmp    $0x101,%r11d
  0x00007f03f91a7027:   jge    0x00007f03f91a7358
 ;; B190: #	out( B194 B191 ) <- in( B189 )  Freq: 0.322351
  0x00007f03f91a702d:   cmp    $0x81,%r11d
  0x00007f03f91a7034:   jge    0x00007f03f91a7098
 ;; B191: #	out( B355 B192 ) <- in( B190 )  Freq: 0.108564
  0x00007f03f91a703a:   nop
  0x00007f03f91a703b:   nop
  0x00007f03f91a703c:   nop
  0x00007f03f91a703d:   nop
  0x00007f03f91a703e:   nop
  0x00007f03f91a703f:   nop
  0x00007f03f91a7040:   cmp    $0x41,%r11d
  0x00007f03f91a7044:   jl     0x00007f03f91a836c
 ;; B192: #	out( B332 B193 ) <- in( B191 )  Freq: 0.108564
  0x00007f03f91a704a:   cmp    $0x7f,%r11d
  0x00007f03f91a704e:   jle    0x00007f03f91a7fa8           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B193: #	out( N5788 ) <- in( B192 )  Freq: 0.108564
  0x00007f03f91a7054:   mov    $0xffffffad,%esi             ;*invokestatic fromArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a7059:   mov    0x18(%rsp),%rbp
  0x00007f03f91a705e:   mov    0x38(%rsp),%r10
  0x00007f03f91a7063:   mov    %r10,0x18(%rsp)
  0x00007f03f91a7068:   mov    0x28(%rsp),%r10
  0x00007f03f91a706d:   mov    %r10,0x20(%rsp)
  0x00007f03f91a7072:   mov    0x40(%rsp),%r10
  0x00007f03f91a7077:   mov    %r10,0x30(%rsp)
  0x00007f03f91a707c:   vzeroupper 
  0x00007f03f91a707f:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop }
                                                            ;*getstatic IOTA {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::iota@64 (line 3666)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a7084:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a708e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7092:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7097:   hlt    
 ;; B194: #	out( B332 B195 ) <- in( B190 )  Freq: 0.213787
  0x00007f03f91a7098:   nop
  0x00007f03f91a7099:   nop
  0x00007f03f91a709a:   nop
  0x00007f03f91a709b:   nop
  0x00007f03f91a709c:   nop
  0x00007f03f91a709d:   nop
  0x00007f03f91a709e:   nop
  0x00007f03f91a709f:   nop
  0x00007f03f91a70a0:   cmp    $0xff,%r11d                  ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a70a7:   jle    0x00007f03f91a7fa8
 ;; B195: #	out( B452 B196 ) <- in( B194 )  Freq: 0.213787
  0x00007f03f91a70ad:   mov    0x68(%rsp),%rsi
  0x00007f03f91a70b2:   vzeroupper 
  0x00007f03f91a70b5:   movabs $0x800098750,%rax
  0x00007f03f91a70bf:   callq  0x00007f03f9199820           ; ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [104]=Oop }
                                                            ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.AbstractMask::vectorSpecies@1 (line 61)
                                                            ; - jdk.incubator.vector.VectorMask::length@1 (line 154)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {virtual_call}
 ;; B196: #	out( B410 B197 ) <- in( B195 )  Freq: 0.213783
  0x00007f03f91a70c4:   mov    0x8(%rax),%r11d              ; implicit exception: dispatches to 0x00007f03f91a8d1c
 ;; B197: #	out( B350 B198 ) <- in( B196 )  Freq: 0.213782
  0x00007f03f91a70c8:   movabs $0x800000000,%r10
  0x00007f03f91a70d2:   add    %r11,%r10
  0x00007f03f91a70d5:   mov    0x48(%r10),%r10
  0x00007f03f91a70d9:   movabs $0x800094798,%r11            ;   {metadata('jdk/incubator/vector/AbstractSpecies')}
  0x00007f03f91a70e3:   cmp    %r11,%r10                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a70e6:   jne    0x00007f03f91a82a0           ;*newarray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
                                                            ; - App::micro_vector_masked@149 (line 51)
 ;; B198: #	out( B201 B199 ) <- in( B197 )  Freq: 0.213782
  0x00007f03f91a70ec:   movabs $0x101964ea8,%r10            ;   {oop([I{0x0000000101964ea8})}
  0x00007f03f91a70f6:   vmovdqu 0x10(%r10),%ymm0            ;*getfield dummyVector {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::dummyVector@1 (line 295)
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91a70fc:   mov    0xc(%rax),%ecx               ;*invokestatic roundDown {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a70ff:   mov    0x4c(%rsp),%r10d
  0x00007f03f91a7104:   sub    0x48(%rsp),%r10d
  0x00007f03f91a7109:   cmp    %ecx,%r10d
  0x00007f03f91a710c:   mov    %ecx,%r9d                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a710f:   cmovl  %r10d,%r9d                   ;*invokevirtual elementType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@21 (line 2963)
                                                            ; - App::micro_vector_masked@107 (line 46)
  0x00007f03f91a7113:   xor    %r11d,%r11d
  0x00007f03f91a7116:   test   %r9d,%r9d                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7119:   cmovle %r11d,%r9d                   ;*invokestatic opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a711d:   vmovd  %r9d,%xmm1
  0x00007f03f91a7122:   vpbroadcastd %xmm1,%ymm1            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7127:   vpcmpgtd %ymm0,%ymm1,%ymm2
  0x00007f03f91a712b:   vpxor  -0x11fb93(%rip),%ymm2,%ymm2        # Stub::vector_all_bits_set
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
                                                            ;   {external_word}
  0x00007f03f91a7133:   mov    0x48(%rsp),%r11d
  0x00007f03f91a7138:   test   %r11d,%r11d
  0x00007f03f91a713b:   jge    0x00007f03f91a716d
 ;; B199: #	out( B356 B200 ) <- in( B198 )  Freq: 0.106891
  0x00007f03f91a713d:   mov    %ecx,%r10d
  0x00007f03f91a7140:   neg    %r10d
  0x00007f03f91a7143:   cmp    %r10d,%r11d
  0x00007f03f91a7146:   mov    0x48(%rsp),%r8d
  0x00007f03f91a714b:   cmovl  %r10d,%r8d
  0x00007f03f91a714f:   neg    %r8d
  0x00007f03f91a7152:   vmovd  %r8d,%xmm1
  0x00007f03f91a7157:   vpbroadcastd %xmm1,%ymm1            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a715c:   vpcmpgtd %ymm0,%ymm1,%ymm0          ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91a7160:   cmp    %ecx,%r9d                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7163:   jl     0x00007f03f91a83b0
 ;; B200: #	out( B201 ) <- in( B199 )  Freq: 0.106891
  0x00007f03f91a7169:   vmovdqu %ymm0,%ymm2
 ;; B201: #	out( B297 B202 ) <- in( B198 B200 )  Freq: 0.213782
  0x00007f03f91a716d:   mov    0x148(%r15),%rbp
  0x00007f03f91a7174:   mov    %rbp,%r10
  0x00007f03f91a7177:   add    $0x18,%r10                   ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
  0x00007f03f91a717b:   nop
  0x00007f03f91a717c:   nop
  0x00007f03f91a717d:   nop
  0x00007f03f91a717e:   nop
  0x00007f03f91a717f:   nop
  0x00007f03f91a7180:   cmp    0x158(%r15),%r10             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7187:   jae    0x00007f03f91a7b55
 ;; B202: #	out( B203 ) <- in( B201 )  Freq: 0.213761
  0x00007f03f91a718d:   mov    %r10,0x148(%r15)
  0x00007f03f91a7194:   prefetchw 0xc0(%r10)
  0x00007f03f91a719c:   movq   $0x1,0x0(%rbp)
  0x00007f03f91a71a4:   prefetchw 0x100(%r10)
  0x00007f03f91a71ac:   movl   $0x40000,0x8(%rbp)           ;   {metadata({type array bool})}
  0x00007f03f91a71b3:   prefetchw 0x140(%r10)
  0x00007f03f91a71bb:   movl   $0x8,0xc(%rbp)
  0x00007f03f91a71c2:   prefetchw 0x180(%r10)
  0x00007f03f91a71ca:   mov    %r12,0x10(%rbp)              ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B203: #	out( B299 B204 ) <- in( B298 B202 )  Freq: 0.213782
  0x00007f03f91a71ce:   mov    0x148(%r15),%rsi
  0x00007f03f91a71d5:   mov    %rsi,%r10
  0x00007f03f91a71d8:   add    $0x10,%r10
  0x00007f03f91a71dc:   vextracti128 $0x1,%ymm2,%xmm0
  0x00007f03f91a71e2:   vpackssdw %xmm0,%xmm2,%xmm0
  0x00007f03f91a71e6:   vpacksswb %xmm0,%xmm0,%xmm0
  0x00007f03f91a71ea:   vpabsb %xmm0,%xmm0                  ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a71ef:   vmovq  %xmm0,0x10(%rbp)             ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
  0x00007f03f91a71f4:   nop
  0x00007f03f91a71f5:   nop
  0x00007f03f91a71f6:   nop
  0x00007f03f91a71f7:   nop
  0x00007f03f91a71f8:   nop
  0x00007f03f91a71f9:   nop
  0x00007f03f91a71fa:   nop
  0x00007f03f91a71fb:   nop
  0x00007f03f91a71fc:   nop
  0x00007f03f91a71fd:   nop
  0x00007f03f91a71fe:   nop
  0x00007f03f91a71ff:   nop
  0x00007f03f91a7200:   cmp    0x158(%r15),%r10             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7207:   jae    0x00007f03f91a7b89
 ;; B204: #	out( B205 ) <- in( B203 )  Freq: 0.213761
  0x00007f03f91a720d:   mov    %r10,0x148(%r15)
  0x00007f03f91a7214:   prefetchw 0xc0(%r10)
  0x00007f03f91a721c:   movq   $0x1,(%rsi)
  0x00007f03f91a7223:   movl   $0x98750,0x8(%rsi)           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
                                                            ;   {metadata('jdk/incubator/vector/Int256Vector$Int256Mask')}
 ;; B205: #	out( B453 B206 ) <- in( B300 B204 )  Freq: 0.213782
  0x00007f03f91a722a:   push   %r10
  0x00007f03f91a722c:   cmp    0xce3d63d(%rip),%r12        # 0x00007f0405fe4870
                                                            ;   {external_word}
  0x00007f03f91a7233:   je     0x00007f03f91a724d
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007f03f91a7239:   movabs $0x7f04055920d0,%rdi         ;   {external_word}
  0x00007f03f91a7243:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7247:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a724c:   hlt    
  0x00007f03f91a724d:   pop    %r10
  0x00007f03f91a724f:   test   %rbp,%rbp
  0x00007f03f91a7252:   jne    0x00007f03f91a726c
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007f03f91a7258:   movabs $0x7f0405592110,%rdi         ;   {external_word}
  0x00007f03f91a7262:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7266:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a726b:   hlt    
  0x00007f03f91a726c:   mov    %rbp,%r10
  0x00007f03f91a726f:   shr    $0x3,%r10                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7273:   mov    %r10d,0xc(%rsi)              ;*invokevirtual length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@2 (line 2960)
                                                            ; - App::micro_vector_masked@107 (line 46)
  0x00007f03f91a7277:   mov    0x68(%rsp),%rdx              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a727c:   nop
  0x00007f03f91a727d:   nop
  0x00007f03f91a727e:   vzeroupper 
  0x00007f03f91a7281:   movabs $0xffffffffffffffff,%rax
  0x00007f03f91a728b:   callq  0x00007f03f9112440           ; ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop }
                                                            ;*invokevirtual and {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {virtual_call}
 ;; B206: #	out( B454 B207 ) <- in( B205 )  Freq: 0.213778
  0x00007f03f91a7290:   mov    %rax,0x68(%rsp)
  0x00007f03f91a7295:   mov    %rax,%rsi                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7298:   nop
  0x00007f03f91a7299:   nop
  0x00007f03f91a729a:   vzeroupper 
  0x00007f03f91a729d:   movabs $0xffffffffffffffff,%rax
  0x00007f03f91a72a7:   callq  0x00007f03f9112480           ; ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [104]=Oop }
                                                            ;*invokevirtual anyTrue {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@147 (line 240)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {virtual_call}
 ;; B207: #	out( B111 B208 ) <- in( B206 )  Freq: 0.213774
  0x00007f03f91a72ac:   test   %eax,%eax
  0x00007f03f91a72ae:   je     0x00007f03f91a65e9
 ;; B208: #	out( B448 B209 ) <- in( B207 )  Freq: 0.192396
  0x00007f03f91a72b4:   mov    0x68(%rsp),%rsi
  0x00007f03f91a72b9:   mov    0x50(%rsp),%r10
  0x00007f03f91a72be:   mov    %r10,0x30(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a72c3:   nop
  0x00007f03f91a72c4:   nop
  0x00007f03f91a72c5:   nop
  0x00007f03f91a72c6:   vzeroupper 
  0x00007f03f91a72c9:   movabs $0xffffffffffffffff,%rax
  0x00007f03f91a72d3:   callq  0x00007f03f9115f20           ; ImmutableOopMap {[24]=Oop [40]=Oop [48]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [104]=Oop }
                                                            ;*invokevirtual firstTrue {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@155 (line 241)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {virtual_call}
 ;; B209: #	out( B353 B210 ) <- in( B208 )  Freq: 0.192392
  0x00007f03f91a72d8:   mov    0x68(%rsp),%r8
  0x00007f03f91a72dd:   mov    0x8(%r8),%r10d
  0x00007f03f91a72e1:   movabs $0x800000000,%r11
  0x00007f03f91a72eb:   add    %r10,%r11
  0x00007f03f91a72ee:   mov    0x58(%r11),%r10
  0x00007f03f91a72f2:   movabs $0x8000968f8,%r11            ;   {metadata('jdk/incubator/vector/AbstractMask')}
  0x00007f03f91a72fc:   nop
  0x00007f03f91a72fd:   nop
  0x00007f03f91a72fe:   nop
  0x00007f03f91a72ff:   nop
  0x00007f03f91a7300:   cmp    %r11,%r10                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7303:   jne    0x00007f03f91a82e5
 ;; B210: #	out( B447 B211 ) <- in( B209 )  Freq: 0.192392
  0x00007f03f91a7309:   mov    %r8,%rsi                     ;*invokestatic opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a730c:   mov    0x48(%rsp),%edx
  0x00007f03f91a7310:   mov    %eax,%ecx
  0x00007f03f91a7312:   mov    0x4c(%rsp),%r8d
  0x00007f03f91a7317:   mov    0xb0(%rsp),%r9d
  0x00007f03f91a731f:   mov    0x30(%rsp),%rbp
  0x00007f03f91a7324:   vzeroupper 
  0x00007f03f91a7327:   callq  0x00007f03f9115c20           ; ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop }
                                                            ;*invokevirtual checkIndexFailed {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@171 (line 243)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {optimized virtual_call}
 ;; B211: #	out( B354 B212 ) <- in( B210 )  Freq: 0.192388
  0x00007f03f91a732c:   test   %rax,%rax
  0x00007f03f91a732f:   jne    0x00007f03f91a830c           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B212: #	out( N5788 ) <- in( B211 )  Freq: 0.192388
  0x00007f03f91a7335:   mov    $0xfffffff6,%esi             ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a733a:   nop
  0x00007f03f91a733b:   nop
  0x00007f03f91a733c:   vzeroupper 
  0x00007f03f91a733f:   callq  0x00007f03f9116540           ; ImmutableOopMap {}
                                                            ;*athrow {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a7344:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a734e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7352:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7357:   hlt    
 ;; B213: #	out( B332 B214 ) <- in( B189 )  Freq: 0.427574
  0x00007f03f91a7358:   nop
  0x00007f03f91a7359:   nop
  0x00007f03f91a735a:   nop
  0x00007f03f91a735b:   nop
  0x00007f03f91a735c:   nop
  0x00007f03f91a735d:   nop
  0x00007f03f91a735e:   nop
  0x00007f03f91a735f:   nop
  0x00007f03f91a7360:   cmp    $0x1ff,%r11d
  0x00007f03f91a7367:   jle    0x00007f03f91a7fa8           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B214: #	out( N5788 ) <- in( B213 )  Freq: 0.427574
  0x00007f03f91a736d:   mov    $0xffffffad,%esi             ;*iflt {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a7372:   mov    0x18(%rsp),%rbp
  0x00007f03f91a7377:   mov    0x38(%rsp),%r10
  0x00007f03f91a737c:   mov    %r10,0x18(%rsp)
  0x00007f03f91a7381:   mov    0x28(%rsp),%r10
  0x00007f03f91a7386:   mov    %r10,0x20(%rsp)
  0x00007f03f91a738b:   mov    0x40(%rsp),%r10
  0x00007f03f91a7390:   mov    %r10,0x30(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7395:   nop
  0x00007f03f91a7396:   nop
  0x00007f03f91a7397:   nop
  0x00007f03f91a7398:   vzeroupper 
  0x00007f03f91a739b:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop }
                                                            ;*getstatic IOTA {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::iota@72 (line 3668)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a73a0:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a73aa:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a73ae:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a73b3:   hlt    
 ;; B215: #	out( B88 ) <- in( B54 )  Freq: 0.111152
  0x00007f03f91a73b4:   mov    $0x1,%edi
  0x00007f03f91a73b9:   mov    %r14,0x40(%rsp)
  0x00007f03f91a73be:   mov    %r13,0x28(%rsp)
  0x00007f03f91a73c3:   mov    %ebx,0xa8(%rsp)
  0x00007f03f91a73ca:   mov    %r11d,%eax
  0x00007f03f91a73cd:   mov    %esi,0xac(%rsp)
  0x00007f03f91a73d4:   mov    %r8d,0x48(%rsp)
  0x00007f03f91a73d9:   mov    %rcx,%r8
  0x00007f03f91a73dc:   mov    %edi,0xb0(%rsp)
  0x00007f03f91a73e3:   jmpq   0x00007f03f91a6276
 ;; B216: #	out( B59 ) <- in( B57 )  Freq: 0.111151
  0x00007f03f91a73e8:   xor    %edx,%edx
  0x00007f03f91a73ea:   jmpq   0x00007f03f91a6058
 ;; B217: #	out( B85 ) <- in( B83 )  Freq: 0.111151
  0x00007f03f91a73ef:   xor    %edx,%edx
  0x00007f03f91a73f1:   jmpq   0x00007f03f91a6232
 ;; B218: #	out( B434 B219 ) <- in( B144 )  Freq: 0.000858229
  0x00007f03f91a73f6:   mov    0x28(%rsp),%rsi              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a73fb:   nop
  0x00007f03f91a73fc:   nop
  0x00007f03f91a73fd:   nop
  0x00007f03f91a73fe:   vzeroupper 
  0x00007f03f91a7401:   movabs $0x800098110,%rax
  0x00007f03f91a740b:   callq  0x00007f03f91652a0           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop }
                                                            ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@17 (line 3004)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {virtual_call}
 ;; B219: #	out( B384 B220 ) <- in( B218 )  Freq: 0.000858212
  0x00007f03f91a7410:   mov    0x60(%rsp),%r10
  0x00007f03f91a7415:   movabs $0x8000968f8,%r11            ;   {metadata('jdk/incubator/vector/AbstractMask')}
  0x00007f03f91a741f:   nop
  0x00007f03f91a7420:   cmp    %r11,%r10
  0x00007f03f91a7423:   jne    0x00007f03f91a891c
 ;; B220: #	out( B415 B221 ) <- in( B219 )  Freq: 0.000858211
  0x00007f03f91a7429:   mov    0x2c(%rax),%r11d             ; implicit exception: dispatches to 0x00007f03f91a8e14
 ;; B221: #	out( B382 B222 ) <- in( B220 )  Freq: 0.00085821
  0x00007f03f91a742d:   mov    0x40(%rsp),%r10              ;*synchronization entry
                                                            ; - App::micro_vector_masked@-1 (line 32)
  0x00007f03f91a7432:   nop
  0x00007f03f91a7433:   nop
  0x00007f03f91a7434:   nop
  0x00007f03f91a7435:   nop
  0x00007f03f91a7436:   nop
  0x00007f03f91a7437:   nop
  0x00007f03f91a7438:   nop
  0x00007f03f91a7439:   nop
  0x00007f03f91a743a:   nop
  0x00007f03f91a743b:   nop
  0x00007f03f91a743c:   nop
  0x00007f03f91a743d:   nop
  0x00007f03f91a743e:   nop
  0x00007f03f91a743f:   nop
  0x00007f03f91a7440:   cmp    $0x20311f9a,%r11d            ;   {oop(a 'java/lang/Class'{0x000000010188fcd0} = 'jdk/incubator/vector/IntMaxVector')}
  0x00007f03f91a7447:   je     0x00007f03f91a88ac           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B222: #	out( B383 B223 ) <- in( B221 )  Freq: 0.000858209
  0x00007f03f91a744d:   mov    0x1c(%rax),%r11d             ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a7451:   mov    %r11d,%r9d
  0x00007f03f91a7454:   add    $0xffffffc0,%r9d
  0x00007f03f91a7458:   nop
  0x00007f03f91a7459:   nop
  0x00007f03f91a745a:   nop
  0x00007f03f91a745b:   nop
  0x00007f03f91a745c:   nop
  0x00007f03f91a745d:   nop
  0x00007f03f91a745e:   nop
  0x00007f03f91a745f:   nop
  0x00007f03f91a7460:   cmp    $0x1c1,%r9d
  0x00007f03f91a7467:   jae    0x00007f03f91a88e4
 ;; B223: #	out( B247 B224 ) <- in( B222 )  Freq: 0.000858208
  0x00007f03f91a746d:   cmp    $0x101,%r11d
  0x00007f03f91a7474:   jge    0x00007f03f91a77b0
 ;; B224: #	out( B228 B225 ) <- in( B223 )  Freq: 0.000368896
  0x00007f03f91a747a:   nop
  0x00007f03f91a747b:   nop
  0x00007f03f91a747c:   nop
  0x00007f03f91a747d:   nop
  0x00007f03f91a747e:   nop
  0x00007f03f91a747f:   nop
  0x00007f03f91a7480:   cmp    $0x81,%r11d
  0x00007f03f91a7487:   jge    0x00007f03f91a74d4
 ;; B225: #	out( B388 B226 ) <- in( B224 )  Freq: 0.000124239
  0x00007f03f91a7489:   cmp    $0x41,%r11d
  0x00007f03f91a748d:   jl     0x00007f03f91a89b0
 ;; B226: #	out( B383 B227 ) <- in( B225 )  Freq: 0.000124239
  0x00007f03f91a7493:   cmp    $0x7f,%r11d
  0x00007f03f91a7497:   jle    0x00007f03f91a88e4           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B227: #	out( N5788 ) <- in( B226 )  Freq: 0.000124239
  0x00007f03f91a749d:   mov    $0xffffffad,%esi             ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a74a2:   mov    0x38(%rsp),%rbp
  0x00007f03f91a74a7:   mov    0x28(%rsp),%r11
  0x00007f03f91a74ac:   mov    %r11,0x20(%rsp)
  0x00007f03f91a74b1:   mov    %r10,0x30(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a74b6:   nop
  0x00007f03f91a74b7:   nop
  0x00007f03f91a74b8:   vzeroupper 
  0x00007f03f91a74bb:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [48]=Oop [64]=Oop }
                                                            ;*getstatic IOTA {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::iota@64 (line 3666)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a74c0:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a74ca:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a74ce:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a74d3:   hlt    
 ;; B228: #	out( B383 B229 ) <- in( B224 )  Freq: 0.000244656
  0x00007f03f91a74d4:   nop
  0x00007f03f91a74d5:   nop
  0x00007f03f91a74d6:   nop
  0x00007f03f91a74d7:   nop
  0x00007f03f91a74d8:   nop
  0x00007f03f91a74d9:   nop
  0x00007f03f91a74da:   nop
  0x00007f03f91a74db:   nop
  0x00007f03f91a74dc:   nop
  0x00007f03f91a74dd:   nop
  0x00007f03f91a74de:   nop
  0x00007f03f91a74df:   nop
  0x00007f03f91a74e0:   cmp    $0xff,%r11d
  0x00007f03f91a74e7:   jle    0x00007f03f91a88e4
 ;; B229: #	out( B433 B230 ) <- in( B228 )  Freq: 0.000244656
  0x00007f03f91a74ed:   mov    %r10,0x40(%rsp)
  0x00007f03f91a74f2:   mov    %r10,%rsi                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a74f5:   nop
  0x00007f03f91a74f6:   vzeroupper 
  0x00007f03f91a74f9:   movabs $0x800098750,%rax
  0x00007f03f91a7503:   callq  0x00007f03f9199820           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop }
                                                            ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.AbstractMask::vectorSpecies@1 (line 61)
                                                            ; - jdk.incubator.vector.VectorMask::length@1 (line 154)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {virtual_call}
 ;; B230: #	out( B417 B231 ) <- in( B229 )  Freq: 0.000244651
  0x00007f03f91a7508:   mov    %rax,%r8                     ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91a750b:   mov    0x8(%r8),%r10d               ; implicit exception: dispatches to 0x00007f03f91a8ea0
 ;; B231: #	out( B385 B232 ) <- in( B230 )  Freq: 0.000244651
  0x00007f03f91a750f:   movabs $0x800000000,%r11
  0x00007f03f91a7519:   add    %r10,%r11
  0x00007f03f91a751c:   mov    0x48(%r11),%r10
  0x00007f03f91a7520:   movabs $0x800094798,%r11            ;   {metadata('jdk/incubator/vector/AbstractSpecies')}
  0x00007f03f91a752a:   cmp    %r11,%r10                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a752d:   jne    0x00007f03f91a8944           ;*newarray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
                                                            ; - App::micro_vector_masked@149 (line 51)
 ;; B232: #	out( B235 B233 ) <- in( B231 )  Freq: 0.000244651
  0x00007f03f91a7533:   movabs $0x101964ea8,%r10            ;   {oop([I{0x0000000101964ea8})}
  0x00007f03f91a753d:   vmovdqu 0x10(%r10),%ymm0            ;*invokevirtual dummyVector {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91a7543:   mov    0xc(%r8),%r9d                ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a7547:   mov    0xa8(%rsp),%r11d
  0x00007f03f91a754f:   sub    0x48(%rsp),%r11d
  0x00007f03f91a7554:   cmp    %r9d,%r11d
  0x00007f03f91a7557:   mov    %r9d,%ebx                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a755a:   cmovl  %r11d,%ebx                   ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@17 (line 2963)
                                                            ; - App::micro_vector_masked@107 (line 46)
  0x00007f03f91a755e:   xor    %r10d,%r10d
  0x00007f03f91a7561:   test   %ebx,%ebx                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7563:   cmovle %r10d,%ebx                   ;*invokevirtual opKind {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators::opKind@5 (line 409)
                                                            ; - jdk.incubator.vector.IntVector::opKind@2 (line 71)
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@15 (line 603)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a7567:   vmovd  %ebx,%xmm1
  0x00007f03f91a756b:   vpbroadcastd %xmm1,%ymm1            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7570:   vpcmpgtd %ymm0,%ymm1,%ymm2
  0x00007f03f91a7574:   vpxor  -0x11ffdc(%rip),%ymm2,%ymm2        # Stub::vector_all_bits_set
                                                            ;*invokestatic checkFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
                                                            ;   {external_word}
  0x00007f03f91a757c:   mov    0x48(%rsp),%r11d
  0x00007f03f91a7581:   test   %r11d,%r11d
  0x00007f03f91a7584:   jge    0x00007f03f91a75b6
 ;; B233: #	out( B389 B234 ) <- in( B232 )  Freq: 0.000122325
  0x00007f03f91a7586:   mov    %r9d,%r8d
  0x00007f03f91a7589:   neg    %r8d
  0x00007f03f91a758c:   cmp    %r8d,%r11d
  0x00007f03f91a758f:   mov    0x48(%rsp),%r10d
  0x00007f03f91a7594:   cmovl  %r8d,%r10d
  0x00007f03f91a7598:   neg    %r10d
  0x00007f03f91a759b:   vmovd  %r10d,%xmm1
  0x00007f03f91a75a0:   vpbroadcastd %xmm1,%ymm1            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a75a5:   vpcmpgtd %ymm0,%ymm1,%ymm0          ;*invokestatic checkFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91a75a9:   cmp    %r9d,%ebx                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a75ac:   jl     0x00007f03f91a89e8
 ;; B234: #	out( B235 ) <- in( B233 )  Freq: 0.000122325
  0x00007f03f91a75b2:   vmovdqu %ymm0,%ymm2
 ;; B235: #	out( B365 B236 ) <- in( B232 B234 )  Freq: 0.00024465
  0x00007f03f91a75b6:   mov    0x148(%r15),%r8
  0x00007f03f91a75bd:   mov    %r8,%r10
  0x00007f03f91a75c0:   add    $0x18,%r10                   ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
  0x00007f03f91a75c4:   cmp    0x158(%r15),%r10             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a75cb:   jae    0x00007f03f91a85c8
 ;; B236: #	out( B237 ) <- in( B235 )  Freq: 0.000244626
  0x00007f03f91a75d1:   mov    %r10,0x148(%r15)
  0x00007f03f91a75d8:   prefetchw 0xc0(%r10)
  0x00007f03f91a75e0:   movq   $0x1,(%r8)
  0x00007f03f91a75e7:   prefetchw 0x100(%r10)
  0x00007f03f91a75ef:   movl   $0x40000,0x8(%r8)            ;   {metadata({type array bool})}
  0x00007f03f91a75f7:   prefetchw 0x140(%r10)
  0x00007f03f91a75ff:   movl   $0x8,0xc(%r8)
  0x00007f03f91a7607:   prefetchw 0x180(%r10)
  0x00007f03f91a760f:   mov    %r12,0x10(%r8)               ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B237: #	out( B367 B238 ) <- in( B366 B236 )  Freq: 0.00024465
  0x00007f03f91a7613:   mov    0x148(%r15),%rax
  0x00007f03f91a761a:   mov    %rax,%r10
  0x00007f03f91a761d:   add    $0x10,%r10
  0x00007f03f91a7621:   vextracti128 $0x1,%ymm2,%xmm0
  0x00007f03f91a7627:   vpackssdw %xmm0,%xmm2,%xmm0
  0x00007f03f91a762b:   vpacksswb %xmm0,%xmm0,%xmm0
  0x00007f03f91a762f:   vpabsb %xmm0,%xmm0                  ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7634:   vmovq  %xmm0,0x10(%r8)              ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
  0x00007f03f91a763a:   nop
  0x00007f03f91a763b:   nop
  0x00007f03f91a763c:   nop
  0x00007f03f91a763d:   nop
  0x00007f03f91a763e:   nop
  0x00007f03f91a763f:   nop
  0x00007f03f91a7640:   cmp    0x158(%r15),%r10             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7647:   jae    0x00007f03f91a860b           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B238: #	out( B239 ) <- in( B237 )  Freq: 0.000244626
  0x00007f03f91a764d:   mov    %r10,0x148(%r15)
  0x00007f03f91a7654:   prefetchw 0xc0(%r10)
  0x00007f03f91a765c:   movq   $0x1,(%rax)
  0x00007f03f91a7663:   movl   $0x98750,0x8(%rax)           ;   {metadata('jdk/incubator/vector/Int256Vector$Int256Mask')}
  0x00007f03f91a766a:   mov    %r11d,0x24(%rsp)
 ;; B239: #	out( B432 B240 ) <- in( B368 B238 )  Freq: 0.00024465
  0x00007f03f91a766f:   push   %r10
  0x00007f03f91a7671:   cmp    0xce3d1f8(%rip),%r12        # 0x00007f0405fe4870
                                                            ;   {external_word}
  0x00007f03f91a7678:   je     0x00007f03f91a7692
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007f03f91a767e:   movabs $0x7f04055920d0,%rdi         ;   {external_word}
  0x00007f03f91a7688:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a768c:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7691:   hlt    
  0x00007f03f91a7692:   pop    %r10
  0x00007f03f91a7694:   test   %r8,%r8
  0x00007f03f91a7697:   jne    0x00007f03f91a76b1
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007f03f91a769d:   movabs $0x7f0405592110,%rdi         ;   {external_word}
  0x00007f03f91a76a7:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a76ab:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a76b0:   hlt    
  0x00007f03f91a76b1:   mov    %r8,%r11
  0x00007f03f91a76b4:   shr    $0x3,%r11                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a76b8:   mov    %r11d,0xc(%rax)
  0x00007f03f91a76bc:   mov    %rax,%rsi                    ;*synchronization entry
                                                            ; - jdk.incubator.vector.Int256Vector::length@-1 (line 103)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@2 (line 2960)
                                                            ; - App::micro_vector_masked@107 (line 46)
  0x00007f03f91a76bf:   mov    0x40(%rsp),%rdx              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a76c4:   nop
  0x00007f03f91a76c5:   nop
  0x00007f03f91a76c6:   vzeroupper 
  0x00007f03f91a76c9:   movabs $0xffffffffffffffff,%rax
  0x00007f03f91a76d3:   callq  0x00007f03f91125c0           ; ImmutableOopMap {[40]=Oop [56]=Oop [80]=Oop }
                                                            ;*invokevirtual and {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {virtual_call}
 ;; B240: #	out( B431 B241 ) <- in( B239 )  Freq: 0.000244646
  0x00007f03f91a76d8:   mov    %rax,0x18(%rsp)
  0x00007f03f91a76dd:   mov    %rax,%rsi                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a76e0:   nop
  0x00007f03f91a76e1:   nop
  0x00007f03f91a76e2:   vzeroupper 
  0x00007f03f91a76e5:   movabs $0xffffffffffffffff,%rax
  0x00007f03f91a76ef:   callq  0x00007f03f9112600           ; ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [80]=Oop }
                                                            ;*invokevirtual anyTrue {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@147 (line 240)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {virtual_call}
 ;; B241: #	out( B253 B242 ) <- in( B240 )  Freq: 0.000244641
  0x00007f03f91a76f4:   test   %eax,%eax                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a76f6:   je     0x00007f03f91a78b4
 ;; B242: #	out( B430 B243 ) <- in( B241 )  Freq: 0.000220177
  0x00007f03f91a76fc:   mov    0x18(%rsp),%rsi
  0x00007f03f91a7701:   mov    0x28(%rsp),%rbp
  0x00007f03f91a7706:   vzeroupper 
  0x00007f03f91a7709:   movabs $0xffffffffffffffff,%rax
  0x00007f03f91a7713:   callq  0x00007f03f9115f20           ; ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [80]=Oop }
                                                            ;*invokevirtual firstTrue {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@155 (line 241)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {virtual_call}
 ;; B243: #	out( B387 B244 ) <- in( B242 )  Freq: 0.000220172
  0x00007f03f91a7718:   mov    0x18(%rsp),%r9
  0x00007f03f91a771d:   mov    0x8(%r9),%r8d
  0x00007f03f91a7721:   movabs $0x800000000,%r10
  0x00007f03f91a772b:   add    %r8,%r10
  0x00007f03f91a772e:   mov    0x58(%r10),%r10
  0x00007f03f91a7732:   movabs $0x8000968f8,%r8             ;   {metadata('jdk/incubator/vector/AbstractMask')}
  0x00007f03f91a773c:   nop
  0x00007f03f91a773d:   nop
  0x00007f03f91a773e:   nop
  0x00007f03f91a773f:   nop
  0x00007f03f91a7740:   cmp    %r8,%r10                     ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7743:   jne    0x00007f03f91a898c
 ;; B244: #	out( B429 B245 ) <- in( B243 )  Freq: 0.000220172
  0x00007f03f91a7749:   mov    %r9,%rsi                     ;*invokestatic opKind {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@15 (line 603)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a774c:   mov    0x24(%rsp),%edx
  0x00007f03f91a7750:   mov    %eax,%ecx
  0x00007f03f91a7752:   mov    0xa8(%rsp),%r8d
  0x00007f03f91a775a:   mov    0xb0(%rsp),%r9d              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7762:   nop
  0x00007f03f91a7763:   nop
  0x00007f03f91a7764:   vzeroupper 
  0x00007f03f91a7767:   callq  0x00007f03f9115c20           ; ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop [80]=Oop }
                                                            ;*invokevirtual checkIndexFailed {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@171 (line 243)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {optimized virtual_call}
 ;; B245: #	out( B386 B246 ) <- in( B244 )  Freq: 0.000220168
  0x00007f03f91a776c:   test   %rax,%rax
  0x00007f03f91a776f:   je     0x00007f03f91a8968           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B246: #	out( N5788 ) <- in( B245 )  Freq: 0.000220167
  0x00007f03f91a7775:   mov    $0xffffffec,%esi             ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a777a:   mov    0x24(%rsp),%r8d
  0x00007f03f91a777f:   mov    %r8d,0x18(%rsp)
  0x00007f03f91a7784:   mov    0x28(%rsp),%r11
  0x00007f03f91a7789:   mov    %r11,0x20(%rsp)
  0x00007f03f91a778e:   mov    %rax,0x30(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7793:   nop
  0x00007f03f91a7794:   vzeroupper 
  0x00007f03f91a7797:   callq  0x00007f03f9116540           ; ImmutableOopMap {[32]=Oop [48]=Oop [56]=Oop [80]=Oop }
                                                            ;*athrow {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a779c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a77a6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a77aa:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a77af:   hlt    
 ;; B247: #	out( B383 B248 ) <- in( B223 )  Freq: 0.000489312
  0x00007f03f91a77b0:   cmp    $0x1ff,%r11d
  0x00007f03f91a77b7:   jle    0x00007f03f91a88e4           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B248: #	out( N5788 ) <- in( B247 )  Freq: 0.000489312
  0x00007f03f91a77bd:   mov    $0xffffffad,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a77c2:   mov    0x38(%rsp),%rbp
  0x00007f03f91a77c7:   mov    0x28(%rsp),%r11
  0x00007f03f91a77cc:   mov    %r11,0x20(%rsp)
  0x00007f03f91a77d1:   mov    %r10,0x30(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a77d6:   nop
  0x00007f03f91a77d7:   nop
  0x00007f03f91a77d8:   vzeroupper 
  0x00007f03f91a77db:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [48]=Oop [64]=Oop }
                                                            ;*getstatic IOTA {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::iota@72 (line 3668)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a77e0:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a77ea:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a77ee:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a77f3:   hlt    
 ;; B249: #	out( B428 B250 ) <- in( B5 B6 )  Freq: 0.00010103
  0x00007f03f91a77f4:   mov    %r10d,0x44(%rsp)
  0x00007f03f91a77f9:   mov    %edx,0x40(%rsp)
  0x00007f03f91a77fd:   mov    %rsi,0x20(%rsp)
  0x00007f03f91a7802:   mov    %rbx,0x18(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7807:   movabs $0x800040000,%rsi            ;*invokevirtual invokeBasic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
                                                            ; - jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {metadata({type array bool})}
  0x00007f03f91a7811:   nop
  0x00007f03f91a7812:   nop
  0x00007f03f91a7813:   nop
  0x00007f03f91a7814:   vzeroupper 
  0x00007f03f91a7817:   callq  0x00007f03f9058620           ; ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [56]=Oop [68]=NarrowOop }
                                                            ;*newarray {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - App::micro_vector_masked@18 (line 36)
                                                            ;   {runtime_call _new_array_Java}
 ;; B250: #	out( B8 ) <- in( B249 )  Freq: 0.000101028
  0x00007f03f91a781c:   mov    0x18(%rsp),%rbx
  0x00007f03f91a7821:   mov    0x20(%rsp),%rsi
  0x00007f03f91a7826:   mov    0x40(%rsp),%edx
  0x00007f03f91a782a:   mov    %rax,%r8
  0x00007f03f91a782d:   mov    0x44(%rsp),%r10d
  0x00007f03f91a7832:   jmpq   0x00007f03f91a5c56
 ;; B251: #	out( B427 B252 ) <- in( B51 B52 )  Freq: 0.000101023
  0x00007f03f91a7837:   mov    %r10,0x58(%rsp)
  0x00007f03f91a783c:   mov    %r8d,0x54(%rsp)
  0x00007f03f91a7841:   mov    %esi,0x50(%rsp)
  0x00007f03f91a7845:   mov    %r11d,0x44(%rsp)
  0x00007f03f91a784a:   mov    %r9,0x48(%rsp)
  0x00007f03f91a784f:   mov    %ebx,0x40(%rsp)
  0x00007f03f91a7853:   mov    %r13,0x30(%rsp)
  0x00007f03f91a7858:   mov    %r14,0x28(%rsp)
  0x00007f03f91a785d:   rex.W pushq 0x38(%rsp)
  0x00007f03f91a7862:   rex.W popq 0x20(%rsp)               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7867:   movabs $0x800040000,%rsi            ;*return {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.Object::<init>@0 (line 44)
                                                            ; - jdk.incubator.vector.IntVector$$Lambda$63/0x00000008000acb58::<init>@1
                                                            ; - java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@19
                                                            ; - java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
                                                            ; - jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {metadata({type array bool})}
  0x00007f03f91a7871:   mov    %r11d,%edx
  0x00007f03f91a7874:   vzeroupper 
  0x00007f03f91a7877:   callq  0x00007f03f9058620           ; ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [72]=Oop }
                                                            ;*newarray {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
                                                            ; - App::micro_vector_masked@149 (line 51)
                                                            ;   {runtime_call _new_array_Java}
 ;; B252: #	out( B54 ) <- in( B251 )  Freq: 0.000101021
  0x00007f03f91a787c:   rex.W pushq 0x20(%rsp)
  0x00007f03f91a7881:   rex.W popq 0x38(%rsp)
  0x00007f03f91a7886:   mov    0x28(%rsp),%r14
  0x00007f03f91a788b:   mov    0x30(%rsp),%r13
  0x00007f03f91a7890:   mov    0x40(%rsp),%ebx
  0x00007f03f91a7894:   mov    0x48(%rsp),%r9
  0x00007f03f91a7899:   mov    0x44(%rsp),%r11d
  0x00007f03f91a789e:   mov    0x50(%rsp),%esi
  0x00007f03f91a78a2:   mov    0x54(%rsp),%r8d
  0x00007f03f91a78a7:   mov    0x58(%rsp),%r10
  0x00007f03f91a78ac:   mov    %rax,%rdx
  0x00007f03f91a78af:   jmpq   0x00007f03f91a6016
 ;; B253: #	out( B390 B254 ) <- in( B241 )  Freq: 2.44641e-05
  0x00007f03f91a78b4:   nop
  0x00007f03f91a78b5:   nop
  0x00007f03f91a78b6:   nop
  0x00007f03f91a78b7:   nop
  0x00007f03f91a78b8:   nop
  0x00007f03f91a78b9:   nop
  0x00007f03f91a78ba:   nop
  0x00007f03f91a78bb:   nop
  0x00007f03f91a78bc:   nop
  0x00007f03f91a78bd:   nop
  0x00007f03f91a78be:   nop
  0x00007f03f91a78bf:   nop
  0x00007f03f91a78c0:   cmp    $0x98110,%ebp                ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {metadata('jdk/incubator/vector/Int256Vector')}
  0x00007f03f91a78c6:   jne    0x00007f03f91a8a50
 ;; B254: #	out( B419 B255 ) <- in( B253 )  Freq: 2.4464e-05
  0x00007f03f91a78cc:   mov    0x28(%rsp),%r10              ;*invokestatic roundDown {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a78d1:   mov    0xc(%r10),%ebp               ;*invokestatic opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
  0x00007f03f91a78d5:   mov    0x8(%r12,%rbp,8),%r11d       ; implicit exception: dispatches to 0x00007f03f91a8f1c
 ;; B255: #	out( B400 B256 ) <- in( B254 )  Freq: 2.4464e-05
  0x00007f03f91a78da:   nop
  0x00007f03f91a78db:   nop
  0x00007f03f91a78dc:   nop
  0x00007f03f91a78dd:   nop
  0x00007f03f91a78de:   nop
  0x00007f03f91a78df:   nop
  0x00007f03f91a78e0:   cmp    $0x40c30,%r11d               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {metadata({type array int})}
  0x00007f03f91a78e7:   jne    0x00007f03f91a8b5c
 ;; B256: #	out( B401 B257 ) <- in( B255 )  Freq: 2.4464e-05
  0x00007f03f91a78ed:   lea    (%r12,%rbp,8),%r9            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91a78f1:   mov    0x20(%rsp),%r10d
  0x00007f03f91a78f6:   nop
  0x00007f03f91a78f7:   nop
  0x00007f03f91a78f8:   nop
  0x00007f03f91a78f9:   nop
  0x00007f03f91a78fa:   nop
  0x00007f03f91a78fb:   nop
  0x00007f03f91a78fc:   nop
  0x00007f03f91a78fd:   nop
  0x00007f03f91a78fe:   nop
  0x00007f03f91a78ff:   nop
  0x00007f03f91a7900:   cmp    $0x98750,%r10d               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {metadata('jdk/incubator/vector/Int256Vector$Int256Mask')}
  0x00007f03f91a7907:   jne    0x00007f03f91a8b80
 ;; B257: #	out( B420 B258 ) <- in( B256 )  Freq: 2.4464e-05
  0x00007f03f91a790d:   mov    0x50(%rsp),%r10              ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@116 (line 43)
  0x00007f03f91a7912:   mov    0xc(%r10),%r8d               ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91a7916:   nop
  0x00007f03f91a7917:   nop
  0x00007f03f91a7918:   nop
  0x00007f03f91a7919:   nop
  0x00007f03f91a791a:   nop
  0x00007f03f91a791b:   nop
  0x00007f03f91a791c:   nop
  0x00007f03f91a791d:   nop
  0x00007f03f91a791e:   nop
  0x00007f03f91a791f:   nop
  0x00007f03f91a7920:   mov    0x8(%r12,%r8,8),%r11d        ; implicit exception: dispatches to 0x00007f03f91a8f48
 ;; B258: #	out( B402 B259 ) <- in( B257 )  Freq: 2.4464e-05
  0x00007f03f91a7925:   cmp    $0x40000,%r11d               ;   {metadata({type array bool})}
  0x00007f03f91a792c:   jne    0x00007f03f91a8bb0           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B259: #	out( B149 B260 ) <- in( B258 )  Freq: 2.4464e-05
  0x00007f03f91a7932:   mov    0xc(%r9),%eax                ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a7936:   test   %eax,%eax                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7938:   jbe    0x00007f03f91a6af3
 ;; B260: #	out( B391 B261 ) <- in( B259 )  Freq: 2.17448e-05
  0x00007f03f91a793e:   lea    (%r12,%r8,8),%rbp            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91a7942:   mov    0xc(%rbp),%ecx               ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@42 (line 2962)
                                                            ; - App::micro_vector_masked@107 (line 46)
  0x00007f03f91a7945:   test   %ecx,%ecx
  0x00007f03f91a7947:   jbe    0x00007f03f91a8a7c
 ;; B261: #	out( B391 B262 ) <- in( B260 )  Freq: 2.17447e-05
  0x00007f03f91a794d:   mov    %eax,%r10d
  0x00007f03f91a7950:   dec    %r10d
  0x00007f03f91a7953:   cmp    %ecx,%r10d
  0x00007f03f91a7956:   jae    0x00007f03f91a8a7c
 ;; B262: #	out( B392 B263 ) <- in( B261 )  Freq: 2.17447e-05
  0x00007f03f91a795c:   nop
  0x00007f03f91a795d:   nop
  0x00007f03f91a795e:   nop
  0x00007f03f91a795f:   nop
  0x00007f03f91a7960:   cmp    %eax,%r10d
  0x00007f03f91a7963:   jae    0x00007f03f91a8ab0
 ;; B263: #	out( B393 B264 ) <- in( B262 )  Freq: 2.17447e-05
  0x00007f03f91a7969:   mov    0x24(%rsp),%ebx
  0x00007f03f91a796d:   cmp    0xa8(%rsp),%ebx
  0x00007f03f91a7974:   jae    0x00007f03f91a8ab4
 ;; B264: #	out( B393 B265 ) <- in( B263 )  Freq: 2.17447e-05
  0x00007f03f91a797a:   movslq %eax,%r10
  0x00007f03f91a797d:   add    0x30(%rsp),%r10
  0x00007f03f91a7982:   movslq 0xa8(%rsp),%r11
  0x00007f03f91a798a:   dec    %r10
  0x00007f03f91a798d:   cmp    %r11,%r10
  0x00007f03f91a7990:   jae    0x00007f03f91a8ab4
 ;; B265: #	out( B308 B266 ) <- in( B264 )  Freq: 2.17446e-05
  0x00007f03f91a7996:   movzbl 0x10(%rbp),%r8d
  0x00007f03f91a799b:   nop
  0x00007f03f91a799c:   nop
  0x00007f03f91a799d:   nop
  0x00007f03f91a799e:   nop
  0x00007f03f91a799f:   nop
  0x00007f03f91a79a0:   test   %r8d,%r8d
  0x00007f03f91a79a3:   je     0x00007f03f91a7cd4
 ;; B266: #	out( B267 ) <- in( B265 )  Freq: 1.90254e-05
  0x00007f03f91a79a9:   mov    0x10(%r9),%r8d
  0x00007f03f91a79ad:   mov    0x38(%rsp),%rdx
  0x00007f03f91a79b2:   mov    %r8d,0x10(%rdx,%rbx,4)
 ;; B267: #	out( B290 B268 ) <- in( B266 B308 )  Freq: 2.17446e-05
  0x00007f03f91a79b7:   mov    %eax,%r10d
  0x00007f03f91a79ba:   add    $0xfffffffd,%r10d
  0x00007f03f91a79be:   nop
  0x00007f03f91a79bf:   nop
  0x00007f03f91a79c0:   cmp    $0x1,%r10d
  0x00007f03f91a79c4:   jle    0x00007f03f91a7b1a
 ;; B268: #	out( B396 B269 ) <- in( B267 )  Freq: 2.17446e-05
  0x00007f03f91a79ca:   cmp    $0x1,%ecx
  0x00007f03f91a79cd:   jbe    0x00007f03f91a8b0c
 ;; B269: #	out( B394 B270 ) <- in( B268 )  Freq: 2.17446e-05
  0x00007f03f91a79d3:   mov    0x30(%rsp),%r8
  0x00007f03f91a79d8:   add    $0x1,%r8
  0x00007f03f91a79dc:   nop
  0x00007f03f91a79dd:   nop
  0x00007f03f91a79de:   nop
  0x00007f03f91a79df:   nop
  0x00007f03f91a79e0:   cmp    %r11,%r8
  0x00007f03f91a79e3:   jae    0x00007f03f91a8ae4
 ;; B270: #	out( B397 B271 ) <- in( B269 )  Freq: 2.17446e-05
  0x00007f03f91a79e9:   cmp    $0x1,%eax
  0x00007f03f91a79ec:   jbe    0x00007f03f91a8b20
 ;; B271: #	out( B398 B272 ) <- in( B270 )  Freq: 2.17446e-05
  0x00007f03f91a79f2:   cmp    $0x4,%eax
  0x00007f03f91a79f5:   jbe    0x00007f03f91a8b34
 ;; B272: #	out( B395 B273 ) <- in( B271 )  Freq: 2.17445e-05
  0x00007f03f91a79fb:   mov    0x30(%rsp),%r8
  0x00007f03f91a7a00:   add    $0x4,%r8
  0x00007f03f91a7a04:   cmp    %r11,%r8
  0x00007f03f91a7a07:   jae    0x00007f03f91a8af8
 ;; B273: #	out( B399 B274 ) <- in( B272 )  Freq: 2.17445e-05
  0x00007f03f91a7a0d:   cmp    $0x1,%ecx
  0x00007f03f91a7a10:   jbe    0x00007f03f91a8b48
 ;; B274: #	out( B289 B275 ) <- in( B273 )  Freq: 2.17445e-05
  0x00007f03f91a7a16:   cmp    $0x4,%ecx
  0x00007f03f91a7a19:   ja     0x00007f03f91a7ae0
 ;; B275: #	out( N5788 ) <- in( B274 )  Freq: 2.17445e-11
  0x00007f03f91a7a1f:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91a7a29:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7a2d:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7a32:   hlt    
 ;; B276: #	out( B277 ) <- in( B285 ) top-of-loop Freq: 0.00153989
  0x00007f03f91a7a33:   mov    0x1c(%r9,%rdi,4),%edi        ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7a38:   mov    %edi,0x1c(%rdx,%rcx,4)       ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@8 (line 2689)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B277: #	out( B287 B278 ) <- in( B276 B286 ) top-of-loop Freq: 0.00175998
  0x00007f03f91a7a3c:   mov    0xb0(%rsp),%edi              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7a43:   add    $0x4,%edi
  0x00007f03f91a7a46:   cmp    %r8d,%edi
  0x00007f03f91a7a49:   jge    0x00007f03f91a7acb
 ;; B278: #	out( B279 ) <- in( B277 )  Freq: 0.00156436
  0x00007f03f91a7a4f:   mov    %edi,0xb0(%rsp)              ;*lookupswitch {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::iota@17 (line 3664)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B279: #	out( B281 B280 ) <- in( B289 B278 ) Loop( B279-B278 inner main of N2350 strip mined) Freq: 0.00175998
  0x00007f03f91a7a56:   mov    %ebx,%r11d
  0x00007f03f91a7a59:   add    0xb0(%rsp),%r11d             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7a61:   movslq 0xb0(%rsp),%rcx              ;*getstatic IOTA {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::iota@64 (line 3666)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a7a69:   movzbl 0x10(%rbp,%rcx,1),%edi       ;*lookupswitch {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::iota@17 (line 3664)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a7a6e:   test   %edi,%edi
  0x00007f03f91a7a70:   je     0x00007f03f91a7a7c
 ;; B280: #	out( B281 ) <- in( B279 )  Freq: 0.00153989
  0x00007f03f91a7a72:   mov    0x10(%r9,%rcx,4),%edi        ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7a77:   mov    %edi,0x10(%rdx,%r11,4)       ;*invokevirtual iota {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B281: #	out( B283 B282 ) <- in( B280 B279 )  Freq: 0.00175998
  0x00007f03f91a7a7c:   movslq %r11d,%rcx
  0x00007f03f91a7a7f:   movslq 0xb0(%rsp),%rdi              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7a87:   movzbl 0x11(%rbp,%rdi,1),%r11d      ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::iota@76 (line 3670)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a7a8d:   test   %r11d,%r11d
  0x00007f03f91a7a90:   je     0x00007f03f91a7a9c
 ;; B282: #	out( B283 ) <- in( B281 )  Freq: 0.00153989
  0x00007f03f91a7a92:   mov    0x14(%r9,%rdi,4),%r11d       ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7a97:   mov    %r11d,0x14(%rdx,%rcx,4)      ;*getstatic IOTA {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::iota@68 (line 3667)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B283: #	out( B285 B284 ) <- in( B282 B281 )  Freq: 0.00175998
  0x00007f03f91a7a9c:   movzbl 0x12(%rbp,%rdi,1),%r11d      ;*invokevirtual sameSpecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractVector::check@2 (line 124)
                                                            ; - jdk.incubator.vector.IntVector::blendTemplate@2 (line 1894)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@11 (line 376)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a7aa2:   test   %r11d,%r11d
  0x00007f03f91a7aa5:   je     0x00007f03f91a7ab1
 ;; B284: #	out( B285 ) <- in( B283 )  Freq: 0.00153989
  0x00007f03f91a7aa7:   mov    0x18(%r9,%rdi,4),%r11d       ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7aac:   mov    %r11d,0x18(%rdx,%rcx,4)      ;*invokevirtual getClass {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractVector::sameSpecies@5 (line 133)
                                                            ; - jdk.incubator.vector.AbstractVector::check@2 (line 124)
                                                            ; - jdk.incubator.vector.IntVector::blendTemplate@2 (line 1894)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@11 (line 376)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B285: #	out( B276 B286 ) <- in( B284 B283 )  Freq: 0.00175998
  0x00007f03f91a7ab1:   movzbl 0x13(%rbp,%rdi,1),%r11d      ;*newarray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91a7ab7:   test   %r11d,%r11d                  ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7aba:   nop
  0x00007f03f91a7abb:   nop
  0x00007f03f91a7abc:   nop
  0x00007f03f91a7abd:   nop
  0x00007f03f91a7abe:   nop
  0x00007f03f91a7abf:   nop
  0x00007f03f91a7ac0:   jne    0x00007f03f91a7a33
 ;; B286: #	out( B277 ) <- in( B285 )  Freq: 0.000220091
  0x00007f03f91a7ac6:   jmpq   0x00007f03f91a7a3c           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@138 (line 51)
 ;; B287: #	out( B291 B288 ) <- in( B277 )  Freq: 0.000195627
  0x00007f03f91a7acb:   mov    0x130(%r15),%rcx             ; ImmutableOopMap {r9=Oop rdx=Oop rbp=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::stOp@53 (line 353)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7ad2:   test   %eax,(%rcx)                  ;   {poll}
  0x00007f03f91a7ad4:   cmp    %r10d,%edi
  0x00007f03f91a7ad7:   jge    0x00007f03f91a7b21
 ;; B288: #	out( B289 ) <- in( B287 )  Freq: 0.000173883
  0x00007f03f91a7ad9:   mov    %edi,0xb0(%rsp)              ;*lookupswitch {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::iota@17 (line 3664)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B289: #	out( B279 ) <- in( B274 B288 ) Loop( B289-B288 ) Freq: 0.000195627
  0x00007f03f91a7ae0:   mov    %eax,%r8d
  0x00007f03f91a7ae3:   sub    0xb0(%rsp),%r8d
  0x00007f03f91a7aeb:   add    $0xfffffffd,%r8d
  0x00007f03f91a7aef:   xor    %edi,%edi
  0x00007f03f91a7af1:   cmp    0xb0(%rsp),%r10d
  0x00007f03f91a7af9:   cmovl  %edi,%r8d
  0x00007f03f91a7afd:   cmp    $0xfa0,%r8d
  0x00007f03f91a7b04:   mov    $0xfa0,%ecx
  0x00007f03f91a7b09:   cmova  %ecx,%r8d
  0x00007f03f91a7b0d:   add    0xb0(%rsp),%r8d
  0x00007f03f91a7b15:   jmpq   0x00007f03f91a7a56
 ;; B290: #	out( B291 ) <- in( B267 )  Freq: 2.20334e-11
  0x00007f03f91a7b1a:   mov    0xb0(%rsp),%edi
 ;; B291: #	out( B149 B292 ) <- in( B290 B287 )  Freq: 2.17445e-05
  0x00007f03f91a7b21:   cmp    %eax,%edi
  0x00007f03f91a7b23:   jge    0x00007f03f91a6af3           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B292: #	out( B293 ) <- in( B291 )  Freq: 1.08722e-05
  0x00007f03f91a7b29:   nop
  0x00007f03f91a7b2a:   nop
  0x00007f03f91a7b2b:   nop
 ;; B293: #	out( B295 B294 ) <- in( B292 B295 ) Loop( B293-B295 inner post of N2251) Freq: 2.17445e-05
  0x00007f03f91a7b2c:   movslq %edi,%r10
  0x00007f03f91a7b2f:   movzbl 0x10(%rbp,%r10,1),%r8d       ;*lookupswitch {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::zero@17 (line 3650)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a7b35:   test   %r8d,%r8d
  0x00007f03f91a7b38:   je     0x00007f03f91a7b4a
 ;; B294: #	out( B295 ) <- in( B293 )  Freq: 1.90253e-05
  0x00007f03f91a7b3a:   mov    0x10(%r9,%r10,4),%r8d
  0x00007f03f91a7b3f:   mov    %edi,%r11d
  0x00007f03f91a7b42:   add    %ebx,%r11d                   ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7b45:   mov    %r8d,0x10(%rdx,%r11,4)       ;*lookupswitch {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::zero@17 (line 3650)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B295: #	out( B293 B296 ) <- in( B294 B293 )  Freq: 2.17445e-05
  0x00007f03f91a7b4a:   inc    %edi
  0x00007f03f91a7b4c:   cmp    %eax,%edi
  0x00007f03f91a7b4e:   jl     0x00007f03f91a7b2c
 ;; B296: #	out( B149 ) <- in( B295 )  Freq: 1.08722e-05
  0x00007f03f91a7b50:   jmpq   0x00007f03f91a6af3
 ;; B297: #	out( B416 B298 ) <- in( B201 )  Freq: 2.13818e-05
  0x00007f03f91a7b55:   vmovdqu %ymm2,0x80(%rsp)            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7b5e:   movabs $0x800040000,%rsi            ;*ifne {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractVector::check@5 (line 124)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {metadata({type array bool})}
  0x00007f03f91a7b68:   mov    $0x8,%edx
  0x00007f03f91a7b6d:   nop
  0x00007f03f91a7b6e:   nop
  0x00007f03f91a7b6f:   nop
  0x00007f03f91a7b70:   vzeroupper 
  0x00007f03f91a7b73:   callq  0x00007f03f9058620           ; ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [104]=Oop }
                                                            ;*invokevirtual and {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call _new_array_Java}
 ;; B298: #	out( B203 ) <- in( B297 )  Freq: 2.13813e-05
  0x00007f03f91a7b78:   vmovdqu 0x80(%rsp),%ymm2
  0x00007f03f91a7b81:   mov    %rax,%rbp
  0x00007f03f91a7b84:   jmpq   0x00007f03f91a71ce
 ;; B299: #	out( B416 B300 ) <- in( B203 )  Freq: 2.13818e-05
  0x00007f03f91a7b89:   vmovdqu %ymm2,0x80(%rsp)            ;*synchronization entry
                                                            ; - jdk.incubator.vector.AbstractVector::check@-1 (line 124)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a7b92:   movabs $0x800098750,%rsi            ;   {metadata('jdk/incubator/vector/Int256Vector$Int256Mask')}
  0x00007f03f91a7b9c:   vzeroupper 
  0x00007f03f91a7b9f:   callq  0x00007f03f9058920           ; ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [104]=Oop }
                                                            ;*invokevirtual and {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call _new_instance_Java}
 ;; B300: #	out( B205 ) <- in( B299 )  Freq: 2.13813e-05
  0x00007f03f91a7ba4:   mov    %rax,%rsi
  0x00007f03f91a7ba7:   jmpq   0x00007f03f91a722a
 ;; B301: #	out( B425 B302 ) <- in( B106 )  Freq: 7.12741e-06
  0x00007f03f91a7bac:   vmovdqu %ymm3,0x80(%rsp)            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7bb5:   movabs $0x800040c30,%rsi            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::broadcastBits@21 (line 3504)
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::broadcast@6 (line 3519)
                                                            ; - jdk.incubator.vector.IntVector::broadcastTemplate@5 (line 534)
                                                            ; - jdk.incubator.vector.Int256Vector::broadcast@2 (line 131)
                                                            ; - jdk.incubator.vector.Int256Vector::broadcast@2 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@52 (line 268)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {metadata({type array int})}
  0x00007f03f91a7bbf:   mov    $0x8,%edx
  0x00007f03f91a7bc4:   vzeroupper 
  0x00007f03f91a7bc7:   callq  0x00007f03f9058620           ; ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [80]=Oop }
                                                            ;*invokestatic blend {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::blendTemplate@26 (line 1895)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@11 (line 376)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call _new_array_Java}
 ;; B302: #	out( B108 ) <- in( B301 )  Freq: 7.12727e-06
  0x00007f03f91a7bcc:   mov    %rax,%r10
  0x00007f03f91a7bcf:   vmovdqu 0x80(%rsp),%ymm3
  0x00007f03f91a7bd8:   jmpq   0x00007f03f91a650c           ;*invokevirtual broadcastBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::broadcast@6 (line 3519)
                                                            ; - jdk.incubator.vector.IntVector::broadcastTemplate@5 (line 534)
                                                            ; - jdk.incubator.vector.Int256Vector::broadcast@2 (line 131)
                                                            ; - jdk.incubator.vector.Int256Vector::broadcast@2 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@52 (line 268)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B303: #	out( B426 B304 ) <- in( B108 )  Freq: 7.12741e-06
  0x00007f03f91a7bdd:   movabs $0x800098110,%rsi            ;*invokespecial <init> {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$$Lambda$63/0x00000008000acb58::<init>@1
                                                            ; - java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@19
                                                            ; - java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
                                                            ; - jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {metadata('jdk/incubator/vector/Int256Vector')}
  0x00007f03f91a7be7:   vmovdqu %ymm3,0x80(%rsp)
  0x00007f03f91a7bf0:   vzeroupper 
  0x00007f03f91a7bf3:   callq  0x00007f03f9058920           ; ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop }
                                                            ;*invokestatic blend {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::blendTemplate@26 (line 1895)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@11 (line 376)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call _new_instance_Java}
 ;; B304: #	out( B110 ) <- in( B303 )  Freq: 7.12727e-06
  0x00007f03f91a7bf8:   jmpq   0x00007f03f91a658a           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B305: #	out( N5788 ) <- in( B42 )  Freq: 3.03721e-06
  0x00007f03f91a7bfd:   mov    $0xffffffe4,%esi             ;*invokestatic fromArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a7c02:   mov    0x18(%rsp),%rbp
  0x00007f03f91a7c07:   rex.W pushq 0x38(%rsp)
  0x00007f03f91a7c0c:   rex.W popq 0x18(%rsp)
  0x00007f03f91a7c11:   mov    %r13,0x28(%rsp)
  0x00007f03f91a7c16:   mov    %r9,0x38(%rsp)
  0x00007f03f91a7c1b:   mov    %r14,0x40(%rsp)
  0x00007f03f91a7c20:   mov    %edi,0x34(%rsp)
  0x00007f03f91a7c24:   mov    %ecx,0x48(%rsp)
  0x00007f03f91a7c28:   vzeroupper 
  0x00007f03f91a7c2b:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [64]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a7c30:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a7c3a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7c3e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7c43:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B306: #	out( N5788 ) <- in( B43 )  Freq: 3.0372e-06
  0x00007f03f91a7c44:   mov    $0xffffffe4,%esi             ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@64 (line 43)
  0x00007f03f91a7c49:   mov    0x18(%rsp),%rbp
  0x00007f03f91a7c4e:   rex.W pushq 0x38(%rsp)
  0x00007f03f91a7c53:   rex.W popq 0x18(%rsp)
  0x00007f03f91a7c58:   mov    %r14,0x20(%rsp)
  0x00007f03f91a7c5d:   mov    %r9,0x38(%rsp)
  0x00007f03f91a7c62:   mov    %r13,0x40(%rsp)
  0x00007f03f91a7c67:   mov    %edi,0x34(%rsp)
  0x00007f03f91a7c6b:   mov    %r8d,0x48(%rsp)
  0x00007f03f91a7c70:   vmovdqu %ymm0,0x60(%rsp)            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7c76:   nop
  0x00007f03f91a7c77:   nop
  0x00007f03f91a7c78:   vzeroupper 
  0x00007f03f91a7c7b:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [56]=Oop [64]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@92 (line 45)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a7c80:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a7c8a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7c8e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7c93:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B307: #	out( N5788 ) <- in( B44 )  Freq: 3.0372e-06
  0x00007f03f91a7c94:   mov    $0xffffffe4,%esi             ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91a7c99:   mov    0x18(%rsp),%rbp
  0x00007f03f91a7c9e:   mov    %r14,0x20(%rsp)
  0x00007f03f91a7ca3:   mov    %r13,0x28(%rsp)
  0x00007f03f91a7ca8:   mov    %edi,0x34(%rsp)
  0x00007f03f91a7cac:   mov    %eax,0x40(%rsp)
  0x00007f03f91a7cb0:   vmovdqu %ymm0,0x60(%rsp)            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7cb6:   nop
  0x00007f03f91a7cb7:   nop
  0x00007f03f91a7cb8:   vzeroupper 
  0x00007f03f91a7cbb:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
                                                            ; - App::micro_vector_masked@107 (line 46)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a7cc0:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a7cca:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7cce:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7cd3:   hlt    
 ;; B308: #	out( B267 ) <- in( B265 )  Freq: 2.71923e-06
  0x00007f03f91a7cd4:   mov    0x38(%rsp),%rdx
  0x00007f03f91a7cd9:   jmpq   0x00007f03f91a79b7           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B309: #	out( B424 B310 ) <- in( B111 )  Freq: 2.13809e-06
  0x00007f03f91a7cde:   movabs $0x8000acb58,%rsi            ;   {metadata('jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58')}
  0x00007f03f91a7ce8:   vzeroupper 
  0x00007f03f91a7ceb:   callq  0x00007f03f9058920           ; ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop }
                                                            ;*invokevirtual allocateInstance {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - java.lang.invoke.DirectMethodHandle::allocateInstance@12 (line 522)
                                                            ; - java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@1
                                                            ; - java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
                                                            ; - jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call _new_instance_Java}
 ;; B310: #	out( B113 ) <- in( B309 )  Freq: 2.13805e-06
  0x00007f03f91a7cf0:   mov    %rax,%rcx
  0x00007f03f91a7cf3:   jmpq   0x00007f03f91a6632
 ;; B311: #	out( B418 B312 ) <- in( B169 )  Freq: 1.98097e-06
  0x00007f03f91a7cf8:   vmovdqu %ymm2,0x80(%rsp)            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7d01:   movabs $0x800040000,%rsi            ;*invokevirtual length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@41 (line 1756)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {metadata({type array bool})}
  0x00007f03f91a7d0b:   mov    $0x8,%edx
  0x00007f03f91a7d10:   vzeroupper 
  0x00007f03f91a7d13:   callq  0x00007f03f9058620           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop }
                                                            ;*invokevirtual and {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call _new_array_Java}
 ;; B312: #	out( B171 ) <- in( B311 )  Freq: 1.98093e-06
  0x00007f03f91a7d18:   mov    0x48(%rsp),%ecx
  0x00007f03f91a7d1c:   vmovdqu 0x80(%rsp),%ymm2
  0x00007f03f91a7d25:   mov    %rax,%r11
  0x00007f03f91a7d28:   jmpq   0x00007f03f91a6d6f
 ;; B313: #	out( B418 B314 ) <- in( B171 )  Freq: 1.98097e-06
  0x00007f03f91a7d2d:   mov    %r11,%rbp
  0x00007f03f91a7d30:   vmovdqu %ymm2,0x80(%rsp)
  0x00007f03f91a7d39:   mov    %ecx,0x48(%rsp)              ;*invokevirtual opCodeRaw {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$OperatorImpl::opCode@1 (line 774)
                                                            ; - jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
                                                            ; - jdk.incubator.vector.IntVector::opCode@7 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a7d3d:   movabs $0x800098750,%rsi            ;*synchronization entry
                                                            ; - java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@-1
                                                            ; - java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
                                                            ; - jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {metadata('jdk/incubator/vector/Int256Vector$Int256Mask')}
  0x00007f03f91a7d47:   nop
  0x00007f03f91a7d48:   vzeroupper 
  0x00007f03f91a7d4b:   callq  0x00007f03f9058920           ; ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop }
                                                            ;*invokevirtual and {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call _new_instance_Java}
 ;; B314: #	out( B173 ) <- in( B313 )  Freq: 1.98093e-06
  0x00007f03f91a7d50:   mov    %rax,%rsi
  0x00007f03f91a7d53:   mov    %rbp,%r11
  0x00007f03f91a7d56:   jmpq   0x00007f03f91a6dce           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B315: #	out( B5 ) <- in( B3 )  Freq: 1.01328e-06
  0x00007f03f91a7d5b:   movslq %edx,%rcx                    ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@116 (line 43)
  0x00007f03f91a7d5e:   nop
  0x00007f03f91a7d5f:   nop
  0x00007f03f91a7d60:   jmpq   0x00007f03f91a5baf           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B316: #	out( B51 ) <- in( B49 )  Freq: 1.01321e-06
  0x00007f03f91a7d65:   movslq %r11d,%rcx                   ;*getfield laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::length@1 (line 116)
                                                            ; - App::micro_vector_masked@116 (line 43)
  0x00007f03f91a7d68:   jmpq   0x00007f03f91a5f79           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B317: #	out( N5788 ) <- in( B2 )  Freq: 9.99999e-07
  0x00007f03f91a7d6d:   mov    $0xffffffde,%esi             ;*invokestatic linkToSpecial {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@19
                                                            ; - java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
                                                            ; - jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a7d72:   mov    %rbx,%rbp
  0x00007f03f91a7d75:   mov    %rcx,0x20(%rsp)
  0x00007f03f91a7d7a:   mov    %r8,0x28(%rsp)
  0x00007f03f91a7d7f:   mov    %r10d,0x30(%rsp)
  0x00007f03f91a7d84:   vzeroupper 
  0x00007f03f91a7d87:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [40]=Oop [48]=NarrowOop [56]=Oop }
                                                            ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@13 (line 36)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a7d8c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a7d96:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7d9a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7d9f:   hlt                                 ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B318: #	out( N5788 ) <- in( B23 )  Freq: 9.99994e-07
  0x00007f03f91a7da0:   mov    $0xffffffde,%esi             ;*synchronization entry
                                                            ; - App::micro_vector_masked@-1 (line 32)
  0x00007f03f91a7da5:   mov    %r10d,%ebp
  0x00007f03f91a7da8:   vzeroupper 
  0x00007f03f91a7dab:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=NarrowOop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
                                                            ; - App::micro_vector_masked@52 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a7db0:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a7dba:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7dbe:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7dc3:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B319: #	out( N5788 ) <- in( B27 )  Freq: 9.99952e-07
  0x00007f03f91a7dc4:   mov    $0xffffffde,%esi             ;*synchronization entry
                                                            ; - App::micro_vector_masked@-1 (line 32)
  0x00007f03f91a7dc9:   mov    %rax,%rbp
  0x00007f03f91a7dcc:   vzeroupper 
  0x00007f03f91a7dcf:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a7dd4:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a7dde:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7de2:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7de7:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B320: #	out( N5788 ) <- in( B30 )  Freq: 9.99949e-07
  0x00007f03f91a7de8:   mov    $0xffffffde,%esi             ;*getfield SPECIES {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@169 (line 53)
  0x00007f03f91a7ded:   rex.W pushq 0x38(%rsp)
  0x00007f03f91a7df2:   rex.W popq 0x20(%rsp)
  0x00007f03f91a7df7:   mov    %ebx,0x38(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7dfb:   nop
  0x00007f03f91a7dfc:   vzeroupper 
  0x00007f03f91a7dff:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [48]=Oop }
                                                            ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a7e04:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a7e0e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7e12:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7e17:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B321: #	out( N5788 ) <- in( B90 )  Freq: 9.99908e-07
  0x00007f03f91a7e18:   mov    $0xffffffde,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a7e1d:   mov    %rax,%rbp
  0x00007f03f91a7e20:   vzeroupper 
  0x00007f03f91a7e23:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a7e28:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a7e32:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7e36:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7e3b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B322: #	out( N5788 ) <- in( B92 )  Freq: 9.99906e-07
  0x00007f03f91a7e3c:   mov    $0xffffffde,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a7e41:   mov    %edi,%ebp                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7e43:   nop
  0x00007f03f91a7e44:   vzeroupper 
  0x00007f03f91a7e47:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=NarrowOop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a7e4c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a7e56:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7e5a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7e5f:   hlt                                 ;*invokevirtual invokeBasic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@4
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B323: #	out( N5788 ) <- in( B10 B9 )  Freq: 1.80138e-06
  0x00007f03f91a7e60:   mov    $0xffffff76,%esi             ;*invokestatic linkToSpecial {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@19
                                                            ; - java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
                                                            ; - jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a7e65:   mov    %rbx,%rbp
  0x00007f03f91a7e68:   rex.W pushq 0x38(%rsp)
  0x00007f03f91a7e6d:   rex.W popq 0x18(%rsp)
  0x00007f03f91a7e72:   mov    0x28(%rsp),%r10
  0x00007f03f91a7e77:   mov    %r10,0x20(%rsp)
  0x00007f03f91a7e7c:   mov    0x30(%rsp),%r10
  0x00007f03f91a7e81:   mov    %r10,0x28(%rsp)
  0x00007f03f91a7e86:   mov    %r11,0x30(%rsp)
  0x00007f03f91a7e8b:   mov    %edi,0x38(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7e8f:   nop
  0x00007f03f91a7e90:   vzeroupper 
  0x00007f03f91a7e93:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) App::micro_vector_masked@30 (line 37)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a7e98:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a7ea2:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7ea6:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7eab:   hlt    
 ;; B324: #	out( N5788 ) <- in( B14 )  Freq: 9.00688e-07
  0x00007f03f91a7eac:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91a7eb6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7eba:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7ebf:   hlt    
 ;; B325: #	out( N5788 ) <- in( B15 )  Freq: 9.00687e-07
  0x00007f03f91a7ec0:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91a7eca:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7ece:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7ed3:   hlt    
 ;; B326: #	out( B327 ) <- in( B56 )  Freq: 9.00582e-07
  0x00007f03f91a7ed4:   mov    0x20(%rsp),%edx              ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@73 (line 44)
 ;; B327: #	out( N5788 ) <- in( B326 B55 )  Freq: 1.80116e-06
  0x00007f03f91a7ed8:   mov    $0xffffff76,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a7edd:   mov    0x18(%rsp),%rbp
  0x00007f03f91a7ee2:   rex.W pushq 0x38(%rsp)
  0x00007f03f91a7ee7:   rex.W popq 0x18(%rsp)
  0x00007f03f91a7eec:   mov    %r14,0x20(%rsp)
  0x00007f03f91a7ef1:   mov    %r13,0x28(%rsp)
  0x00007f03f91a7ef6:   mov    %r8d,0x30(%rsp)
  0x00007f03f91a7efb:   mov    %r9,0x38(%rsp)
  0x00007f03f91a7f00:   mov    %rcx,0x40(%rsp)
  0x00007f03f91a7f05:   mov    %edx,0x34(%rsp)
  0x00007f03f91a7f09:   mov    %r10,0x48(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a7f0e:   nop
  0x00007f03f91a7f0f:   nop
  0x00007f03f91a7f10:   vzeroupper 
  0x00007f03f91a7f13:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop [64]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorMask::fromLong@104 (line 255)
                                                            ; - App::micro_vector_masked@149 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a7f18:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a7f22:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7f26:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7f2b:   hlt    
 ;; B328: #	out( B81 ) <- in( B59 )  Freq: 9.00581e-07
  0x00007f03f91a7f2c:   mov    $0x1,%r10d
  0x00007f03f91a7f32:   mov    $0x1,%edx
  0x00007f03f91a7f37:   jmpq   0x00007f03f91a6209
 ;; B329: #	out( N5788 ) <- in( B60 )  Freq: 8.88778e-07
  0x00007f03f91a7f3c:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91a7f46:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7f4a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7f4f:   hlt    
 ;; B330: #	out( N5788 ) <- in( B61 )  Freq: 8.88777e-07
  0x00007f03f91a7f50:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91a7f5a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7f5e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7f63:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B331: #	out( N5788 ) <- in( B187 )  Freq: 7.59885e-07
  0x00007f03f91a7f64:   mov    $0xffffffad,%esi             ;*iflt {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a7f69:   mov    0x18(%rsp),%rbp
  0x00007f03f91a7f6e:   mov    0x38(%rsp),%r10
  0x00007f03f91a7f73:   mov    %r10,0x18(%rsp)
  0x00007f03f91a7f78:   mov    0x28(%rsp),%r10
  0x00007f03f91a7f7d:   mov    %r10,0x20(%rsp)
  0x00007f03f91a7f82:   mov    0x40(%rsp),%r10
  0x00007f03f91a7f87:   mov    %r10,0x30(%rsp)
  0x00007f03f91a7f8c:   vzeroupper 
  0x00007f03f91a7f8f:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop }
                                                            ;*getstatic IOTA {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::iota@9 (line 3663)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a7f94:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a7f9e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7fa2:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7fa7:   hlt                                 ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
 ;; B332: #	out( N5788 ) <- in( B192 B188 B213 B194 )  Freq: 1.50981e-06
  0x00007f03f91a7fa8:   mov    $0x1d,%esi                   ;*iflt {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a7fad:   mov    0x18(%rsp),%rbp
  0x00007f03f91a7fb2:   mov    0x38(%rsp),%r10
  0x00007f03f91a7fb7:   mov    %r10,0x18(%rsp)
  0x00007f03f91a7fbc:   mov    0x28(%rsp),%r10
  0x00007f03f91a7fc1:   mov    %r10,0x20(%rsp)
  0x00007f03f91a7fc6:   mov    0x40(%rsp),%r10
  0x00007f03f91a7fcb:   mov    %r10,0x30(%rsp)
  0x00007f03f91a7fd0:   vzeroupper 
  0x00007f03f91a7fd3:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop }
                                                            ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::iota@76 (line 3670)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a7fd8:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a7fe2:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a7fe6:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a7feb:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B333: #	out( N5788 ) <- in( B186 )  Freq: 7.49927e-07
  0x00007f03f91a7fec:   mov    $0xffffffde,%esi             ;*iflt {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a7ff1:   mov    %rax,%rbp
  0x00007f03f91a7ff4:   vzeroupper 
  0x00007f03f91a7ff7:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a7ffc:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8006:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a800a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a800f:   hlt    
 ;; B334: #	out( B337 ) <- in( B35 )  Freq: 7.49811e-07
  0x00007f03f91a8010:   mov    0x30(%rsp),%r13
  0x00007f03f91a8015:   jmp    0x00007f03f91a8023
 ;; B335: #	out( B337 ) <- in( B36 )  Freq: 7.59767e-07
  0x00007f03f91a8017:   mov    0x30(%rsp),%r13
  0x00007f03f91a801c:   jmp    0x00007f03f91a8023
 ;; B336: #	out( B337 ) <- in( B34 )  Freq: 7.59768e-07
  0x00007f03f91a801e:   mov    0x30(%rsp),%r13              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B337: #	out( N5788 ) <- in( B40 B336 B334 B335 B338 B38 B39 )  Freq: 5.27853e-06
  0x00007f03f91a8023:   mov    $0xffffff76,%esi             ;*invokestatic fromArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8028:   mov    0x18(%rsp),%rbp
  0x00007f03f91a802d:   mov    %r14,0x20(%rsp)
  0x00007f03f91a8032:   mov    %r13,0x28(%rsp)
  0x00007f03f91a8037:   mov    %r10d,0x30(%rsp)
  0x00007f03f91a803c:   vzeroupper 
  0x00007f03f91a803f:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) App::micro_vector_masked@70 (line 43)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8044:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a804e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8052:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8057:   hlt    
 ;; B338: #	out( B337 ) <- in( B37 )  Freq: 7.49809e-07
  0x00007f03f91a8058:   mov    0x30(%rsp),%r13
  0x00007f03f91a805d:   jmp    0x00007f03f91a8023
 ;; B339: #	out( B422 B340 ) <- in( B130 )  Freq: 6.60339e-07
  0x00007f03f91a805f:   vmovdqu %ymm3,0x80(%rsp)            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8068:   movabs $0x800040c30,%rsi            ;*invokespecial compareTemplate {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {metadata({type array int})}
  0x00007f03f91a8072:   mov    $0x8,%edx
  0x00007f03f91a8077:   nop
  0x00007f03f91a8078:   vzeroupper 
  0x00007f03f91a807b:   callq  0x00007f03f9058620           ; ImmutableOopMap {rbp=Oop [56]=Oop [80]=Oop [160]=Oop }
                                                            ;*invokestatic blend {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::blendTemplate@26 (line 1895)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@11 (line 376)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call _new_array_Java}
 ;; B340: #	out( B132 ) <- in( B339 )  Freq: 6.60326e-07
  0x00007f03f91a8080:   mov    %rax,%r10
  0x00007f03f91a8083:   vmovdqu 0x80(%rsp),%ymm3
  0x00007f03f91a808c:   jmpq   0x00007f03f91a687d           ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::broadcast@5 (line 131)
                                                            ; - jdk.incubator.vector.Int256Vector::broadcast@2 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@52 (line 268)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B341: #	out( B423 B342 ) <- in( B132 )  Freq: 6.60339e-07
  0x00007f03f91a8091:   movabs $0x800098110,%rsi            ;*invokestatic linkToSpecial {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@19
                                                            ; - java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
                                                            ; - jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {metadata('jdk/incubator/vector/Int256Vector')}
  0x00007f03f91a809b:   vmovdqu %ymm3,0x80(%rsp)
  0x00007f03f91a80a4:   vzeroupper 
  0x00007f03f91a80a7:   callq  0x00007f03f9058920           ; ImmutableOopMap {rbp=Oop [24]=Oop [56]=Oop [80]=Oop [160]=Oop }
                                                            ;*invokestatic blend {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::blendTemplate@26 (line 1895)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@11 (line 376)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call _new_instance_Java}
 ;; B342: #	out( B134 ) <- in( B341 )  Freq: 6.60326e-07
  0x00007f03f91a80ac:   mov    %rax,%r11
  0x00007f03f91a80af:   jmpq   0x00007f03f91a68f7           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B343: #	out( N5788 ) <- in( B185 )  Freq: 5.06591e-07
  0x00007f03f91a80b4:   mov    $0xfffffff6,%esi             ;*iflt {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a80b9:   nop
  0x00007f03f91a80ba:   nop
  0x00007f03f91a80bb:   nop
  0x00007f03f91a80bc:   vzeroupper 
  0x00007f03f91a80bf:   callq  0x00007f03f9116540           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@50 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a80c4:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a80ce:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a80d2:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a80d7:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B344: #	out( N5788 ) <- in( B31 )  Freq: 4.99974e-07
  0x00007f03f91a80d8:   mov    $0xffffff45,%esi             ;*getfield SPECIES {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@169 (line 53)
  0x00007f03f91a80dd:   rex.W pushq 0x38(%rsp)
  0x00007f03f91a80e2:   rex.W popq 0x20(%rsp)
  0x00007f03f91a80e7:   mov    %r11d,0x38(%rsp)
  0x00007f03f91a80ec:   mov    %ebx,0x3c(%rsp)
  0x00007f03f91a80f0:   vzeroupper 
  0x00007f03f91a80f3:   callq  0x00007f03f9116540           ; ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop }
                                                            ;*ifne {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorIntrinsics::roundDown@5 (line 106)
                                                            ; - jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
                                                            ; - App::micro_vector_masked@65 (line 43)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a80f8:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8102:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8106:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a810b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B345: #	out( N5788 ) <- in( B95 )  Freq: 4.99952e-07
  0x00007f03f91a810c:   mov    $0xffffffdf,%esi             ;*invokestatic fromArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8111:   rex.W pushq 0x38(%rsp)
  0x00007f03f91a8116:   rex.W popq 0x20(%rsp)
  0x00007f03f91a811b:   rex.W pushq 0x40(%rsp)
  0x00007f03f91a8120:   rex.W popq 0x38(%rsp)
  0x00007f03f91a8125:   mov    %ebx,0x34(%rsp)
  0x00007f03f91a8129:   mov    %rax,-0x8(%rsp)
  0x00007f03f91a812e:   mov    0x48(%rsp),%eax
  0x00007f03f91a8132:   mov    %eax,0x40(%rsp)
  0x00007f03f91a8136:   mov    -0x8(%rsp),%rax
  0x00007f03f91a813b:   mov    %edi,0x44(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a813f:   nop
  0x00007f03f91a8140:   vzeroupper 
  0x00007f03f91a8143:   callq  0x00007f03f9116540           ; ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [56]=Oop [68]=NarrowOop [80]=Oop [88]=Oop }
                                                            ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8148:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8152:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8156:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a815b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B346: #	out( N5788 ) <- in( B47 )  Freq: 4.76805e-07
  0x00007f03f91a815c:   mov    $0xffffff45,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8161:   mov    0x18(%rsp),%rbp
  0x00007f03f91a8166:   rex.W pushq 0x38(%rsp)
  0x00007f03f91a816b:   rex.W popq 0x18(%rsp)
  0x00007f03f91a8170:   mov    %r14,0x20(%rsp)
  0x00007f03f91a8175:   mov    %r13,0x28(%rsp)
  0x00007f03f91a817a:   mov    %r8d,0x30(%rsp)
  0x00007f03f91a817f:   mov    %r9,0x38(%rsp)
  0x00007f03f91a8184:   mov    %r11d,0x40(%rsp)
  0x00007f03f91a8189:   mov    %r10,0x48(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a818e:   nop
  0x00007f03f91a818f:   nop
  0x00007f03f91a8190:   vzeroupper 
  0x00007f03f91a8193:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorMask::fromLong@15 (line 242)
                                                            ; - App::micro_vector_masked@149 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8198:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a81a2:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a81a6:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a81ab:   hlt    
 ;; B347: #	out( N5788 ) <- in( B48 )  Freq: 4.76805e-07
  0x00007f03f91a81ac:   cmp    %rbp,%r10
  0x00007f03f91a81af:   mov    $0xffffffff,%ebp
  0x00007f03f91a81b4:   jl     0x00007f03f91a81be
  0x00007f03f91a81b6:   setne  %bpl
  0x00007f03f91a81ba:   movzbl %bpl,%ebp                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a81be:   mov    $0xffffff45,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91a81c3:   rex.W pushq 0x38(%rsp)
  0x00007f03f91a81c8:   rex.W popq 0x20(%rsp)
  0x00007f03f91a81cd:   mov    %r14,0x28(%rsp)
  0x00007f03f91a81d2:   mov    %r13,0x30(%rsp)
  0x00007f03f91a81d7:   mov    %r8d,0x38(%rsp)
  0x00007f03f91a81dc:   mov    %r9,0x40(%rsp)
  0x00007f03f91a81e1:   mov    %r11d,0x3c(%rsp)
  0x00007f03f91a81e6:   mov    %r10,0x48(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a81eb:   nop
  0x00007f03f91a81ec:   vzeroupper 
  0x00007f03f91a81ef:   callq  0x00007f03f9116540           ; ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [64]=Oop }
                                                            ;*ifne {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorMask::fromLong@40 (line 247)
                                                            ; - App::micro_vector_masked@149 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a81f4:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a81fe:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8202:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8207:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B348: #	out( N5788 ) <- in( B97 )  Freq: 2.53295e-07
  0x00007f03f91a8208:   mov    $0xffffffad,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a820d:   mov    0x18(%rsp),%rbp
  0x00007f03f91a8212:   mov    0x38(%rsp),%r10
  0x00007f03f91a8217:   mov    %r10,0x18(%rsp)
  0x00007f03f91a821c:   mov    0x28(%rsp),%r10
  0x00007f03f91a8221:   mov    %r10,0x20(%rsp)
  0x00007f03f91a8226:   mov    0x40(%rsp),%r10
  0x00007f03f91a822b:   mov    %r10,0x30(%rsp)
  0x00007f03f91a8230:   mov    %rax,0x40(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8235:   nop
  0x00007f03f91a8236:   nop
  0x00007f03f91a8237:   nop
  0x00007f03f91a8238:   vzeroupper 
  0x00007f03f91a823b:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop [80]=Oop }
                                                            ;*getstatic ZERO {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::zero@9 (line 3649)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8240:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a824a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a824e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8253:   hlt                                 ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
 ;; B349: #	out( N5788 ) <- in( B102 B98 B183 B104 )  Freq: 5.0327e-07
  0x00007f03f91a8254:   mov    $0x1d,%esi                   ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8259:   mov    0x18(%rsp),%rbp
  0x00007f03f91a825e:   mov    0x38(%rsp),%r10
  0x00007f03f91a8263:   mov    %r10,0x18(%rsp)
  0x00007f03f91a8268:   mov    0x28(%rsp),%r10
  0x00007f03f91a826d:   mov    %r10,0x20(%rsp)
  0x00007f03f91a8272:   mov    0x40(%rsp),%r10
  0x00007f03f91a8277:   mov    %r10,0x30(%rsp)
  0x00007f03f91a827c:   mov    %rax,0x40(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8281:   nop
  0x00007f03f91a8282:   nop
  0x00007f03f91a8283:   nop
  0x00007f03f91a8284:   vzeroupper 
  0x00007f03f91a8287:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop [80]=Oop }
                                                            ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::zero@76 (line 3656)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a828c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8296:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a829a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a829f:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B350: #	out( N5788 ) <- in( B197 )  Freq: 2.13782e-07
  0x00007f03f91a82a0:   mov    $0xffffffde,%esi             ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a82a5:   mov    %rax,%rbp
  0x00007f03f91a82a8:   vzeroupper 
  0x00007f03f91a82ab:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::length@4 (line 154)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a82b0:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a82ba:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a82be:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a82c3:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B351: #	out( B421 B352 ) <- in( B135 )  Freq: 1.98089e-07
  0x00007f03f91a82c4:   movabs $0x8000acb58,%rsi            ;*invokevirtual lanewise {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
                                                            ;   {metadata('jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58')}
  0x00007f03f91a82ce:   nop
  0x00007f03f91a82cf:   nop
  0x00007f03f91a82d0:   vzeroupper 
  0x00007f03f91a82d3:   callq  0x00007f03f9058920           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop [160]=Oop }
                                                            ;*invokevirtual allocateInstance {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - java.lang.invoke.DirectMethodHandle::allocateInstance@12 (line 522)
                                                            ; - java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@1
                                                            ; - java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
                                                            ; - jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call _new_instance_Java}
 ;; B352: #	out( B137 ) <- in( B351 )  Freq: 1.98085e-07
  0x00007f03f91a82d8:   mov    %rax,%rcx
  0x00007f03f91a82db:   nop
  0x00007f03f91a82dc:   nop
  0x00007f03f91a82dd:   nop
  0x00007f03f91a82de:   nop
  0x00007f03f91a82df:   nop
  0x00007f03f91a82e0:   jmpq   0x00007f03f91a6992           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B353: #	out( N5788 ) <- in( B209 )  Freq: 1.92392e-07
  0x00007f03f91a82e5:   mov    $0xffffffde,%esi             ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a82ea:   mov    %r8,%rbp                     ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a82ed:   nop
  0x00007f03f91a82ee:   nop
  0x00007f03f91a82ef:   nop
  0x00007f03f91a82f0:   vzeroupper 
  0x00007f03f91a82f3:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@162 (line 242)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a82f8:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8302:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8306:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a830b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B354: #	out( N5788 ) <- in( B211 )  Freq: 1.92388e-07
  0x00007f03f91a830c:   mov    $0xffffffec,%esi             ;*invokestatic fromArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91a8311:   mov    0x18(%rsp),%rbp
  0x00007f03f91a8316:   mov    0x38(%rsp),%r10
  0x00007f03f91a831b:   mov    %r10,0x18(%rsp)
  0x00007f03f91a8320:   mov    0x28(%rsp),%r10
  0x00007f03f91a8325:   mov    %r10,0x20(%rsp)
  0x00007f03f91a832a:   mov    0x48(%rsp),%r11d
  0x00007f03f91a832f:   mov    0x40(%rsp),%r10
  0x00007f03f91a8334:   mov    %r10,0x30(%rsp)
  0x00007f03f91a8339:   mov    %r11d,0x2c(%rsp)
  0x00007f03f91a833e:   mov    0x50(%rsp),%r10
  0x00007f03f91a8343:   mov    %r10,0x40(%rsp)
  0x00007f03f91a8348:   mov    %rax,0x50(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a834d:   nop
  0x00007f03f91a834e:   nop
  0x00007f03f91a834f:   nop
  0x00007f03f91a8350:   vzeroupper 
  0x00007f03f91a8353:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop [80]=Oop [88]=Oop }
                                                            ;*athrow {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8358:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8362:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8366:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a836b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B355: #	out( N5788 ) <- in( B191 )  Freq: 1.08564e-07
  0x00007f03f91a836c:   mov    $0xffffffad,%esi             ;*iload_2 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@44 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8371:   mov    0x18(%rsp),%rbp
  0x00007f03f91a8376:   mov    0x38(%rsp),%r10
  0x00007f03f91a837b:   mov    %r10,0x18(%rsp)
  0x00007f03f91a8380:   mov    0x28(%rsp),%r10
  0x00007f03f91a8385:   mov    %r10,0x20(%rsp)
  0x00007f03f91a838a:   mov    0x40(%rsp),%r10
  0x00007f03f91a838f:   mov    %r10,0x30(%rsp)
  0x00007f03f91a8394:   vzeroupper 
  0x00007f03f91a8397:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop }
                                                            ;*getstatic IOTA {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::iota@60 (line 3665)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a839c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a83a6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a83aa:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a83af:   hlt    
 ;; B356: #	out( N5788 ) <- in( B199 )  Freq: 1.06891e-07
  0x00007f03f91a83b0:   vmovdqu %ymm0,%ymm1                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a83b4:   mov    $0xffffffad,%esi             ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91a83b9:   mov    0x18(%rsp),%rbp
  0x00007f03f91a83be:   mov    0x38(%rsp),%r10
  0x00007f03f91a83c3:   mov    %r10,0x18(%rsp)
  0x00007f03f91a83c8:   mov    0x28(%rsp),%r10
  0x00007f03f91a83cd:   mov    %r10,0x20(%rsp)
  0x00007f03f91a83d2:   mov    0x40(%rsp),%r10
  0x00007f03f91a83d7:   mov    %r10,0x30(%rsp)
  0x00007f03f91a83dc:   vmovdqu %ymm1,0x80(%rsp)
  0x00007f03f91a83e5:   vmovdqu %ymm2,0xa0(%rsp)            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a83ee:   nop
  0x00007f03f91a83ef:   nop
  0x00007f03f91a83f0:   vzeroupper 
  0x00007f03f91a83f3:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop }
                                                            ;*invokedynamic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::or@22 (line 652)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::or@2 (line 528)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@78 (line 272)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a83f8:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8402:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8406:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a840b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B357: #	out( N5788 ) <- in( B116 )  Freq: 9.26391e-08
  0x00007f03f91a840c:   mov    $0xffffffde,%esi             ;*invokedynamic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91a8411:   mov    %r10d,%ebp
  0x00007f03f91a8414:   vzeroupper 
  0x00007f03f91a8417:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=NarrowOop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a841c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8426:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a842a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a842f:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B358: #	out( N5788 ) <- in( B105 )  Freq: 7.12623e-08
  0x00007f03f91a8430:   mov    $0xffffffde,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8435:   mov    %rax,%rbp
  0x00007f03f91a8438:   vzeroupper 
  0x00007f03f91a843b:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::blend@8 (line 375)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8440:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a844a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a844e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8453:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B359: #	out( N5788 ) <- in( B155 )  Freq: 7.04017e-08
  0x00007f03f91a8454:   mov    $0xffffffad,%esi             ;*invokestatic fromArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8459:   mov    0x38(%rsp),%rbp
  0x00007f03f91a845e:   mov    0x48(%rsp),%r9d
  0x00007f03f91a8463:   mov    %r8,0x20(%rsp)
  0x00007f03f91a8468:   mov    %r9d,0x1c(%rsp)
  0x00007f03f91a846d:   mov    %r9d,0x28(%rsp)
  0x00007f03f91a8472:   mov    0x50(%rsp),%r8
  0x00007f03f91a8477:   mov    %r8,0x48(%rsp)
  0x00007f03f91a847c:   mov    %r10,0x50(%rsp)
  0x00007f03f91a8481:   mov    %r11d,0x2c(%rsp)             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8486:   nop
  0x00007f03f91a8487:   nop
  0x00007f03f91a8488:   vzeroupper 
  0x00007f03f91a848b:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [64]=Oop [72]=Oop [80]=Oop [160]=Oop }
                                                            ;*getstatic IOTA {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::iota@9 (line 3663)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8490:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a849a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a849e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a84a3:   hlt                                 ;*invokevirtual dummyVector {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
 ;; B360: #	out( N5788 ) <- in( B160 B156 B181 B162 )  Freq: 1.39881e-07
  0x00007f03f91a84a4:   mov    $0x1d,%esi                   ;*invokevirtual vOp {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@64 (line 2728)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a84a9:   mov    0x38(%rsp),%rbp
  0x00007f03f91a84ae:   mov    0x48(%rsp),%ecx
  0x00007f03f91a84b2:   mov    %r8,0x20(%rsp)
  0x00007f03f91a84b7:   mov    %ecx,0x1c(%rsp)
  0x00007f03f91a84bb:   mov    %ecx,0x28(%rsp)
  0x00007f03f91a84bf:   mov    0x50(%rsp),%r8
  0x00007f03f91a84c4:   mov    %r8,0x48(%rsp)
  0x00007f03f91a84c9:   mov    %r10,0x50(%rsp)
  0x00007f03f91a84ce:   mov    %r11d,0x2c(%rsp)             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a84d3:   nop
  0x00007f03f91a84d4:   vzeroupper 
  0x00007f03f91a84d7:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [64]=Oop [72]=Oop [80]=Oop [160]=Oop }
                                                            ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::iota@76 (line 3670)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a84dc:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a84e6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a84ea:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a84ef:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B361: #	out( N5788 ) <- in( B154 )  Freq: 6.94792e-08
  0x00007f03f91a84f0:   mov    $0xffffffde,%esi             ;*invokestatic fromArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a84f5:   mov    0x50(%rsp),%rbp              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a84fa:   nop
  0x00007f03f91a84fb:   nop
  0x00007f03f91a84fc:   vzeroupper 
  0x00007f03f91a84ff:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8504:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a850e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8512:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8517:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B362: #	out( N5788 ) <- in( B153 )  Freq: 4.69346e-08
  0x00007f03f91a8518:   mov    $0xfffffff6,%esi             ;*synchronization entry
                                                            ; - jdk.incubator.vector.IntVector::fromArray@-1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a851d:   nop
  0x00007f03f91a851e:   nop
  0x00007f03f91a851f:   nop
  0x00007f03f91a8520:   vzeroupper 
  0x00007f03f91a8523:   callq  0x00007f03f9116540           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@50 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8528:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8532:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8536:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a853b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B363: #	out( N5788 ) <- in( B119 )  Freq: 4.63195e-08
  0x00007f03f91a853c:   mov    $0xffffffdf,%esi             ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91a8541:   mov    0x38(%rsp),%r10
  0x00007f03f91a8546:   mov    %r10,0x18(%rsp)
  0x00007f03f91a854b:   mov    0x48(%rsp),%r10d
  0x00007f03f91a8550:   mov    %r10d,0x24(%rsp)
  0x00007f03f91a8555:   mov    %r10d,0x30(%rsp)
  0x00007f03f91a855a:   mov    %r8d,0x34(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a855f:   nop
  0x00007f03f91a8560:   vzeroupper 
  0x00007f03f91a8563:   callq  0x00007f03f9116540           ; ImmutableOopMap {[24]=Oop [40]=Oop [52]=NarrowOop [64]=Oop [80]=Oop [160]=Oop }
                                                            ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8568:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8572:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8576:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a857b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B364: #	out( N5788 ) <- in( B101 )  Freq: 3.61879e-08
  0x00007f03f91a857c:   mov    $0xffffffad,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8581:   mov    0x18(%rsp),%rbp
  0x00007f03f91a8586:   mov    0x38(%rsp),%r10
  0x00007f03f91a858b:   mov    %r10,0x18(%rsp)
  0x00007f03f91a8590:   mov    0x28(%rsp),%r10
  0x00007f03f91a8595:   mov    %r10,0x20(%rsp)
  0x00007f03f91a859a:   mov    0x40(%rsp),%r10
  0x00007f03f91a859f:   mov    %r10,0x30(%rsp)
  0x00007f03f91a85a4:   mov    %rax,0x40(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a85a9:   nop
  0x00007f03f91a85aa:   nop
  0x00007f03f91a85ab:   nop
  0x00007f03f91a85ac:   vzeroupper 
  0x00007f03f91a85af:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop [80]=Oop }
                                                            ;*getstatic ZERO {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::zero@60 (line 3651)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a85b4:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a85be:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a85c2:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a85c7:   hlt    
 ;; B365: #	out( B458 B366 ) <- in( B235 )  Freq: 2.44691e-08
  0x00007f03f91a85c8:   vmovdqu %ymm2,0x60(%rsp)
  0x00007f03f91a85ce:   mov    %rax,-0x8(%rsp)
  0x00007f03f91a85d3:   mov    0x48(%rsp),%eax
  0x00007f03f91a85d7:   mov    %eax,0x24(%rsp)
  0x00007f03f91a85db:   mov    -0x8(%rsp),%rax              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a85e0:   movabs $0x800040000,%rsi            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@55 (line 1755)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {metadata({type array bool})}
  0x00007f03f91a85ea:   mov    $0x8,%edx
  0x00007f03f91a85ef:   nop
  0x00007f03f91a85f0:   vzeroupper 
  0x00007f03f91a85f3:   callq  0x00007f03f9058620           ; ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop }
                                                            ;*invokevirtual and {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call _new_array_Java}
 ;; B366: #	out( B237 ) <- in( B365 )  Freq: 2.44686e-08
  0x00007f03f91a85f8:   mov    0x24(%rsp),%r11d
  0x00007f03f91a85fd:   vmovdqu 0x60(%rsp),%ymm2
  0x00007f03f91a8603:   mov    %rax,%r8
  0x00007f03f91a8606:   jmpq   0x00007f03f91a7613
 ;; B367: #	out( B458 B368 ) <- in( B237 )  Freq: 2.44691e-08
  0x00007f03f91a860b:   mov    %r8,0x18(%rsp)
  0x00007f03f91a8610:   vmovdqu %ymm2,0x60(%rsp)
  0x00007f03f91a8616:   mov    %r11d,0x24(%rsp)             ;*invokestatic compare {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@52 (line 1755)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a861b:   movabs $0x800098750,%rsi            ;*invokevirtual invokeBasic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@4
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@233 (line 634)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
                                                            ;   {metadata('jdk/incubator/vector/Int256Vector$Int256Mask')}
  0x00007f03f91a8625:   nop
  0x00007f03f91a8626:   nop
  0x00007f03f91a8627:   nop
  0x00007f03f91a8628:   vzeroupper 
  0x00007f03f91a862b:   callq  0x00007f03f9058920           ; ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop }
                                                            ;*invokevirtual and {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call _new_instance_Java}
 ;; B368: #	out( B239 ) <- in( B367 )  Freq: 2.44686e-08
  0x00007f03f91a8630:   mov    0x18(%rsp),%r8
  0x00007f03f91a8635:   jmpq   0x00007f03f91a766f           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B369: #	out( N5788 ) <- in( B121 )  Freq: 2.34672e-08
  0x00007f03f91a863a:   mov    $0xffffffad,%esi             ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a863f:   mov    0x38(%rsp),%rbp
  0x00007f03f91a8644:   mov    0x28(%rsp),%r10
  0x00007f03f91a8649:   mov    %r10,0x20(%rsp)
  0x00007f03f91a864e:   mov    0x50(%rsp),%r10
  0x00007f03f91a8653:   mov    %r10,0x38(%rsp)
  0x00007f03f91a8658:   vzeroupper 
  0x00007f03f91a865b:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [56]=Oop [80]=Oop [160]=Oop }
                                                            ;*getstatic ZERO {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::zero@9 (line 3649)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8660:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a866a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a866e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8673:   hlt                                 ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
 ;; B370: #	out( N5788 ) <- in( B126 B122 B150 B128 )  Freq: 4.66269e-08
  0x00007f03f91a8674:   mov    $0x1d,%esi                   ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91a8679:   mov    0x38(%rsp),%rbp
  0x00007f03f91a867e:   mov    0x28(%rsp),%r10
  0x00007f03f91a8683:   mov    %r10,0x20(%rsp)
  0x00007f03f91a8688:   mov    0x50(%rsp),%r10
  0x00007f03f91a868d:   mov    %r10,0x38(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8692:   nop
  0x00007f03f91a8693:   nop
  0x00007f03f91a8694:   vzeroupper 
  0x00007f03f91a8697:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [56]=Oop [80]=Oop [160]=Oop }
                                                            ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::zero@76 (line 3656)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a869c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a86a6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a86aa:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a86af:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B371: #	out( N5788 ) <- in( B165 )  Freq: 1.98065e-08
  0x00007f03f91a86b0:   mov    $0xffffffde,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a86b5:   mov    %r8,%rbp
  0x00007f03f91a86b8:   vzeroupper 
  0x00007f03f91a86bb:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::length@4 (line 154)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a86c0:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a86ca:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a86ce:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a86d3:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B372: #	out( N5788 ) <- in( B179 )  Freq: 1.8061e-08
  0x00007f03f91a86d4:   mov    $0xfffffff6,%esi             ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@0 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a86d9:   nop
  0x00007f03f91a86da:   nop
  0x00007f03f91a86db:   nop
  0x00007f03f91a86dc:   vzeroupper 
  0x00007f03f91a86df:   callq  0x00007f03f9116540           ; ImmutableOopMap {}
                                                            ;*athrow {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a86e4:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a86ee:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a86f2:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a86f7:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B373: #	out( N5788 ) <- in( B177 )  Freq: 1.78247e-08
  0x00007f03f91a86f8:   mov    $0xffffffde,%esi             ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a86fd:   nop
  0x00007f03f91a86fe:   nop
  0x00007f03f91a86ff:   nop
  0x00007f03f91a8700:   vzeroupper 
  0x00007f03f91a8703:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@162 (line 242)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8708:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8712:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8716:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a871b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B374: #	out( N5788 ) <- in( B159 )  Freq: 1.00582e-08
  0x00007f03f91a871c:   mov    $0xffffffad,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8721:   mov    0x38(%rsp),%rbp
  0x00007f03f91a8726:   mov    0x48(%rsp),%ecx
  0x00007f03f91a872a:   mov    %r8,0x20(%rsp)
  0x00007f03f91a872f:   mov    %ecx,0x1c(%rsp)
  0x00007f03f91a8733:   mov    %ecx,0x28(%rsp)
  0x00007f03f91a8737:   mov    0x50(%rsp),%r8
  0x00007f03f91a873c:   mov    %r8,0x48(%rsp)
  0x00007f03f91a8741:   mov    %r10,0x50(%rsp)
  0x00007f03f91a8746:   mov    %r11d,0x2c(%rsp)             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a874b:   nop
  0x00007f03f91a874c:   vzeroupper 
  0x00007f03f91a874f:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [64]=Oop [72]=Oop [80]=Oop [160]=Oop }
                                                            ;*getstatic IOTA {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::iota@60 (line 3665)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8754:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a875e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8762:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8767:   hlt    
 ;; B375: #	out( N5788 ) <- in( B167 )  Freq: 9.90323e-09
  0x00007f03f91a8768:   vmovdqu %ymm0,%ymm1                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a876c:   mov    $0xffffffad,%esi             ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a8771:   mov    0x38(%rsp),%rbp
  0x00007f03f91a8776:   mov    0x28(%rsp),%r11
  0x00007f03f91a877b:   mov    %r11,0x20(%rsp)
  0x00007f03f91a8780:   vmovdqu %ymm1,0x60(%rsp)
  0x00007f03f91a8786:   vmovdqu %ymm2,0x80(%rsp)            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a878f:   nop
  0x00007f03f91a8790:   vzeroupper 
  0x00007f03f91a8793:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop }
                                                            ;*invokedynamic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::or@22 (line 652)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::or@2 (line 528)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@78 (line 272)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8798:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a87a2:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a87a6:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a87ab:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B376: #	out( N5788 ) <- in( B139 )  Freq: 8.69679e-09
  0x00007f03f91a87ac:   mov    $0xfffffff6,%esi             ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a87b1:   mov    %r11,%rbp
  0x00007f03f91a87b4:   vzeroupper 
  0x00007f03f91a87b7:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [80]=Oop }
                                                            ;*invokevirtual add {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@188 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a87bc:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a87c6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a87ca:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a87cf:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B377: #	out( N5788 ) <- in( B147 )  Freq: 7.82661e-09
  0x00007f03f91a87d0:   mov    $0xffffffe4,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a87d5:   mov    %r8,0x20(%rsp)
  0x00007f03f91a87da:   mov    %r11d,0x1c(%rsp)             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a87df:   nop
  0x00007f03f91a87e0:   vzeroupper 
  0x00007f03f91a87e3:   callq  0x00007f03f9116540           ; ImmutableOopMap {[32]=Oop [56]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@10 (line 3001)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a87e8:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a87f2:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a87f6:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a87fb:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B378: #	out( N5788 ) <- in( B145 )  Freq: 7.72406e-09
  0x00007f03f91a87fc:   mov    $0xffffffde,%esi             ;*invokestatic fromArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8801:   nop
  0x00007f03f91a8802:   nop
  0x00007f03f91a8803:   nop
  0x00007f03f91a8804:   vzeroupper 
  0x00007f03f91a8807:   callq  0x00007f03f9116540           ; ImmutableOopMap {[40]=Oop [56]=Oop }
                                                            ;*invokevirtual length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@2 (line 2960)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@10 (line 3001)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a880c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8816:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a881a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a881f:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B379: #	out( N5788 ) <- in( B146 )  Freq: 7.72405e-09
  0x00007f03f91a8820:   mov    $0xffffffcc,%esi             ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91a8825:   mov    %r8,0x20(%rsp)               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a882a:   nop
  0x00007f03f91a882b:   nop
  0x00007f03f91a882c:   vzeroupper 
  0x00007f03f91a882f:   callq  0x00007f03f9116540           ; ImmutableOopMap {[32]=Oop [56]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@10 (line 3001)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8834:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a883e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8842:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8847:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B380: #	out( N5788 ) <- in( B129 )  Freq: 6.6023e-09
  0x00007f03f91a8848:   mov    $0xffffffde,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a884d:   mov    0x50(%rsp),%rbp              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8852:   nop
  0x00007f03f91a8853:   nop
  0x00007f03f91a8854:   vzeroupper 
  0x00007f03f91a8857:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::blend@8 (line 375)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a885c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8866:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a886a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a886f:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B381: #	out( N5788 ) <- in( B125 )  Freq: 3.35273e-09
  0x00007f03f91a8870:   mov    $0xffffffad,%esi             ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a8875:   mov    0x38(%rsp),%rbp
  0x00007f03f91a887a:   mov    0x28(%rsp),%r10
  0x00007f03f91a887f:   mov    %r10,0x20(%rsp)
  0x00007f03f91a8884:   mov    0x50(%rsp),%r10
  0x00007f03f91a8889:   mov    %r10,0x38(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a888e:   nop
  0x00007f03f91a888f:   nop
  0x00007f03f91a8890:   vzeroupper 
  0x00007f03f91a8893:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [56]=Oop [80]=Oop [160]=Oop }
                                                            ;*getstatic ZERO {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::zero@60 (line 3651)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8898:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a88a2:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a88a6:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a88ab:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B382: #	out( N5788 ) <- in( B221 )  Freq: 8.69606e-10
  0x00007f03f91a88ac:   mov    $0xffffffad,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a88b1:   mov    0x38(%rsp),%rbp
  0x00007f03f91a88b6:   mov    0x28(%rsp),%r11
  0x00007f03f91a88bb:   mov    %r11,0x20(%rsp)
  0x00007f03f91a88c0:   mov    %r10,0x30(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a88c5:   nop
  0x00007f03f91a88c6:   nop
  0x00007f03f91a88c7:   nop
  0x00007f03f91a88c8:   vzeroupper 
  0x00007f03f91a88cb:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [48]=Oop [64]=Oop }
                                                            ;*getstatic IOTA {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::iota@9 (line 3663)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a88d0:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a88da:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a88de:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a88e3:   hlt                                 ;*invokestatic fromArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@80 (line 44)
 ;; B383: #	out( N5788 ) <- in( B226 B222 B247 B228 )  Freq: 1.72781e-09
  0x00007f03f91a88e4:   mov    $0x1d,%esi                   ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a88e9:   mov    0x38(%rsp),%rbp
  0x00007f03f91a88ee:   mov    0x28(%rsp),%r11
  0x00007f03f91a88f3:   mov    %r11,0x20(%rsp)
  0x00007f03f91a88f8:   mov    %r10,0x30(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a88fd:   nop
  0x00007f03f91a88fe:   nop
  0x00007f03f91a88ff:   nop
  0x00007f03f91a8900:   vzeroupper 
  0x00007f03f91a8903:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [48]=Oop [64]=Oop }
                                                            ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::iota@76 (line 3670)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8908:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8912:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8916:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a891b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B384: #	out( N5788 ) <- in( B219 )  Freq: 8.58212e-10
  0x00007f03f91a891c:   mov    $0xffffffde,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8921:   mov    0x40(%rsp),%rbp              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8926:   nop
  0x00007f03f91a8927:   nop
  0x00007f03f91a8928:   vzeroupper 
  0x00007f03f91a892b:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8930:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a893a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a893e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8943:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B385: #	out( N5788 ) <- in( B231 )  Freq: 2.44651e-10
  0x00007f03f91a8944:   mov    $0xffffffde,%esi             ;*invokestatic fromArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8949:   mov    %r8,%rbp
  0x00007f03f91a894c:   vzeroupper 
  0x00007f03f91a894f:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::length@4 (line 154)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8954:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a895e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8962:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8967:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B386: #	out( N5788 ) <- in( B245 )  Freq: 2.23091e-10
  0x00007f03f91a8968:   mov    $0xfffffff6,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a896d:   nop
  0x00007f03f91a896e:   nop
  0x00007f03f91a896f:   nop
  0x00007f03f91a8970:   vzeroupper 
  0x00007f03f91a8973:   callq  0x00007f03f9116540           ; ImmutableOopMap {}
                                                            ;*athrow {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8978:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8982:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8986:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a898b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B387: #	out( N5788 ) <- in( B243 )  Freq: 2.20172e-10
  0x00007f03f91a898c:   mov    $0xffffffde,%esi             ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8991:   mov    %r9,%rbp
  0x00007f03f91a8994:   vzeroupper 
  0x00007f03f91a8997:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@162 (line 242)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a899c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a89a6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a89aa:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a89af:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B388: #	out( N5788 ) <- in( B225 )  Freq: 1.24239e-10
  0x00007f03f91a89b0:   mov    $0xffffffad,%esi             ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a89b5:   mov    0x38(%rsp),%rbp
  0x00007f03f91a89ba:   mov    0x28(%rsp),%r11
  0x00007f03f91a89bf:   mov    %r11,0x20(%rsp)
  0x00007f03f91a89c4:   mov    %r10,0x30(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a89c9:   nop
  0x00007f03f91a89ca:   nop
  0x00007f03f91a89cb:   nop
  0x00007f03f91a89cc:   vzeroupper 
  0x00007f03f91a89cf:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [48]=Oop [64]=Oop }
                                                            ;*getstatic IOTA {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::iota@60 (line 3665)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a89d4:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a89de:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a89e2:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a89e7:   hlt    
 ;; B389: #	out( N5788 ) <- in( B233 )  Freq: 1.22325e-10
  0x00007f03f91a89e8:   vmovdqu %ymm0,%ymm1                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a89ec:   mov    $0xffffffad,%esi             ;*invokestatic checkFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91a89f1:   mov    0x38(%rsp),%rbp
  0x00007f03f91a89f6:   mov    %rax,-0x8(%rsp)
  0x00007f03f91a89fb:   mov    0x48(%rsp),%eax
  0x00007f03f91a89ff:   mov    %eax,0x1c(%rsp)
  0x00007f03f91a8a03:   mov    -0x8(%rsp),%rax
  0x00007f03f91a8a08:   mov    0x28(%rsp),%r10
  0x00007f03f91a8a0d:   mov    %r10,0x20(%rsp)
  0x00007f03f91a8a12:   mov    0x50(%rsp),%r10
  0x00007f03f91a8a17:   mov    %r10,0x28(%rsp)
  0x00007f03f91a8a1c:   mov    0x40(%rsp),%r10
  0x00007f03f91a8a21:   mov    %r10,0x30(%rsp)
  0x00007f03f91a8a26:   vmovdqu %ymm1,0x40(%rsp)
  0x00007f03f91a8a2c:   vmovdqu %ymm2,0x60(%rsp)            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8a32:   nop
  0x00007f03f91a8a33:   nop
  0x00007f03f91a8a34:   vzeroupper 
  0x00007f03f91a8a37:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [40]=Oop [48]=Oop }
                                                            ;*invokedynamic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::or@22 (line 652)
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::or@2 (line 528)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@78 (line 272)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8a3c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8a46:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8a4a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8a4f:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B390: #	out( N5788 ) <- in( B253 )  Freq: 2.44641e-11
  0x00007f03f91a8a50:   mov    $0xffffffde,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8a55:   mov    0x24(%rsp),%r11d
  0x00007f03f91a8a5a:   mov    %r11d,0x18(%rsp)             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8a5f:   nop
  0x00007f03f91a8a60:   vzeroupper 
  0x00007f03f91a8a63:   callq  0x00007f03f9116540           ; ImmutableOopMap {[40]=Oop [56]=Oop [80]=Oop }
                                                            ;*invokevirtual vec {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8a68:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8a72:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8a76:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8a7b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B391: #	out( N5788 ) <- in( B261 B260 )  Freq: 4.37782e-11
  0x00007f03f91a8a7c:   mov    $0xffffff76,%esi             ;*invokevirtual invokeBasic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@4
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91a8a81:   mov    0x24(%rsp),%r10d
  0x00007f03f91a8a86:   mov    %r10d,0x20(%rsp)
  0x00007f03f91a8a8b:   mov    %r9,0x28(%rsp)
  0x00007f03f91a8a90:   mov    %eax,0x24(%rsp)
  0x00007f03f91a8a94:   vzeroupper 
  0x00007f03f91a8a97:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::stOp@23 (line 353)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8a9c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8aa6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8aaa:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8aaf:   hlt    
 ;; B392: #	out( B393 ) <- in( B262 )  Freq: 2.20335e-11
  0x00007f03f91a8ab0:   mov    0x24(%rsp),%ebx
 ;; B393: #	out( N5788 ) <- in( B264 B263 B392 )  Freq: 6.61003e-11
  0x00007f03f91a8ab4:   mov    $0xffffffbe,%esi
  0x00007f03f91a8ab9:   mov    %ebx,0x20(%rsp)
  0x00007f03f91a8abd:   mov    %r9,0x28(%rsp)
  0x00007f03f91a8ac2:   mov    %eax,0x24(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8ac6:   nop
  0x00007f03f91a8ac7:   nop
  0x00007f03f91a8ac8:   vzeroupper 
  0x00007f03f91a8acb:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::stOp@23 (line 353)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8ad0:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8ada:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8ade:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8ae3:   hlt    
 ;; B394: #	out( N5788 ) <- in( B269 )  Freq: 2.20333e-11
  0x00007f03f91a8ae4:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91a8aee:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8af2:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8af7:   hlt    
 ;; B395: #	out( N5788 ) <- in( B272 )  Freq: 2.20333e-11
  0x00007f03f91a8af8:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91a8b02:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8b06:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8b0b:   hlt    
 ;; B396: #	out( N5788 ) <- in( B268 )  Freq: 2.17446e-11
  0x00007f03f91a8b0c:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91a8b16:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8b1a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8b1f:   hlt    
 ;; B397: #	out( N5788 ) <- in( B270 )  Freq: 2.17446e-11
  0x00007f03f91a8b20:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91a8b2a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8b2e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8b33:   hlt    
 ;; B398: #	out( N5788 ) <- in( B271 )  Freq: 2.17446e-11
  0x00007f03f91a8b34:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91a8b3e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8b42:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8b47:   hlt    
 ;; B399: #	out( N5788 ) <- in( B273 )  Freq: 2.17445e-11
  0x00007f03f91a8b48:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91a8b52:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8b56:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8b5b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B400: #	out( N5788 ) <- in( B255 )  Freq: 1e-35
  0x00007f03f91a8b5c:   mov    $0xffffffde,%esi             ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8b61:   nop
  0x00007f03f91a8b62:   nop
  0x00007f03f91a8b63:   nop
  0x00007f03f91a8b64:   vzeroupper 
  0x00007f03f91a8b67:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=NarrowOop [56]=Oop [80]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::vec@4 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8b6c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8b76:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8b7a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8b7f:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B401: #	out( N5788 ) <- in( B256 )  Freq: 1e-35
  0x00007f03f91a8b80:   mov    $0xffffffde,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8b85:   mov    0x24(%rsp),%r11d
  0x00007f03f91a8b8a:   mov    %r11d,0x18(%rsp)
  0x00007f03f91a8b8f:   mov    %r9,0x20(%rsp)
  0x00007f03f91a8b94:   vzeroupper 
  0x00007f03f91a8b97:   callq  0x00007f03f9116540           ; ImmutableOopMap {[32]=Oop [56]=Oop [80]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::stOp@7 (line 352)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8b9c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8ba6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8baa:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8baf:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B402: #	out( N5788 ) <- in( B258 )  Freq: 1e-35
  0x00007f03f91a8bb0:   mov    $0xffffffde,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8bb5:   mov    0x24(%rsp),%r11d
  0x00007f03f91a8bba:   mov    %r11d,0x18(%rsp)
  0x00007f03f91a8bbf:   mov    %r9,0x20(%rsp)
  0x00007f03f91a8bc4:   mov    %r8d,0x1c(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8bc9:   nop
  0x00007f03f91a8bca:   nop
  0x00007f03f91a8bcb:   nop
  0x00007f03f91a8bcc:   vzeroupper 
  0x00007f03f91a8bcf:   callq  0x00007f03f9116540           ; ImmutableOopMap {[28]=NarrowOop [32]=Oop [56]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@4 (line 569)
                                                            ; - jdk.incubator.vector.IntVector::stOp@10 (line 352)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8bd4:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8bde:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8be2:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8be7:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B403: #	out( N5788 ) <- in( B1 )  Freq: 1.01328e-06
  0x00007f03f91a8be8:   mov    $0xfffffff6,%esi             ;*invokestatic constructorMethod {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@6
                                                            ; - java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
                                                            ; - jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91a8bed:   nop
  0x00007f03f91a8bee:   nop
  0x00007f03f91a8bef:   nop
  0x00007f03f91a8bf0:   vzeroupper 
  0x00007f03f91a8bf3:   callq  0x00007f03f9116540           ; ImmutableOopMap {}
                                                            ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@13 (line 36)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8bf8:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8c02:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8c06:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8c0b:   hlt    
 ;; B404: #	out( N5788 ) <- in( B26 )  Freq: 1.01323e-06
  0x00007f03f91a8c0c:   mov    $0xfffffff4,%esi
  0x00007f03f91a8c11:   mov    0x18(%rsp),%rbp
  0x00007f03f91a8c16:   mov    0x28(%rsp),%r10
  0x00007f03f91a8c1b:   mov    %r10,0x20(%rsp)
  0x00007f03f91a8c20:   vzeroupper 
  0x00007f03f91a8c23:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [48]=Oop [56]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8c28:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8c32:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8c36:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8c3b:   hlt    
 ;; B405: #	out( N5788 ) <- in( B28 )  Freq: 1.01323e-06
  0x00007f03f91a8c3c:   mov    $0xfffffff6,%esi             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8c41:   nop
  0x00007f03f91a8c42:   nop
  0x00007f03f91a8c43:   nop
  0x00007f03f91a8c44:   vzeroupper 
  0x00007f03f91a8c47:   callq  0x00007f03f9116540           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@64 (line 43)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8c4c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8c56:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8c5a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8c5f:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B406: #	out( N5788 ) <- in( B29 )  Freq: 1.01323e-06
  0x00007f03f91a8c60:   mov    $0xfffffff6,%esi             ;*getfield SPECIES {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@169 (line 53)
  0x00007f03f91a8c65:   mov    %ebx,%ebp                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8c67:   nop
  0x00007f03f91a8c68:   vzeroupper 
  0x00007f03f91a8c6b:   callq  0x00007f03f9116540           ; ImmutableOopMap {}
                                                            ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8c70:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8c7a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8c7e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8c83:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B407: #	out( N5788 ) <- in( B89 )  Freq: 1.01319e-06
  0x00007f03f91a8c84:   mov    $0xfffffff4,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8c89:   mov    0x18(%rsp),%rbp              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8c8e:   nop
  0x00007f03f91a8c8f:   nop
  0x00007f03f91a8c90:   vzeroupper 
  0x00007f03f91a8c93:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8c98:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8ca2:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8ca6:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8cab:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B408: #	out( N5788 ) <- in( B91 )  Freq: 1.01318e-06
  0x00007f03f91a8cac:   mov    $0xfffffff4,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8cb1:   mov    0x18(%rsp),%rbp
  0x00007f03f91a8cb6:   mov    0x38(%rsp),%r10
  0x00007f03f91a8cbb:   mov    %r10,0x18(%rsp)
  0x00007f03f91a8cc0:   mov    0x28(%rsp),%r10
  0x00007f03f91a8cc5:   mov    %r10,0x20(%rsp)
  0x00007f03f91a8cca:   mov    0x40(%rsp),%r10
  0x00007f03f91a8ccf:   mov    %r10,0x30(%rsp)
  0x00007f03f91a8cd4:   mov    %rax,0x40(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8cd9:   nop
  0x00007f03f91a8cda:   nop
  0x00007f03f91a8cdb:   nop
  0x00007f03f91a8cdc:   vzeroupper 
  0x00007f03f91a8cdf:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8ce4:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8cee:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8cf2:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8cf7:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B409: #	out( N5788 ) <- in( B94 )  Freq: 5.06591e-07
  0x00007f03f91a8cf8:   mov    $0xfffffff6,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8cfd:   nop
  0x00007f03f91a8cfe:   nop
  0x00007f03f91a8cff:   nop
  0x00007f03f91a8d00:   vzeroupper 
  0x00007f03f91a8d03:   callq  0x00007f03f9116540           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8d08:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8d12:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8d16:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8d1b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B410: #	out( N5788 ) <- in( B196 )  Freq: 2.16621e-07
  0x00007f03f91a8d1c:   mov    $0xfffffff4,%esi             ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8d21:   mov    0x18(%rsp),%rbp
  0x00007f03f91a8d26:   mov    0x38(%rsp),%r10
  0x00007f03f91a8d2b:   mov    %r10,0x18(%rsp)
  0x00007f03f91a8d30:   mov    0x28(%rsp),%r10
  0x00007f03f91a8d35:   mov    %r10,0x20(%rsp)
  0x00007f03f91a8d3a:   mov    0x40(%rsp),%r10
  0x00007f03f91a8d3f:   mov    %r10,0x30(%rsp)
  0x00007f03f91a8d44:   vzeroupper 
  0x00007f03f91a8d47:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::length@4 (line 154)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8d4c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8d56:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8d5a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8d5f:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B411: #	out( N5788 ) <- in( B115 )  Freq: 9.38693e-08
  0x00007f03f91a8d60:   mov    $0xfffffff4,%esi             ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91a8d65:   mov    0x38(%rsp),%rbp
  0x00007f03f91a8d6a:   mov    0x28(%rsp),%r10
  0x00007f03f91a8d6f:   mov    %r10,0x20(%rsp)
  0x00007f03f91a8d74:   mov    0x50(%rsp),%r10
  0x00007f03f91a8d79:   mov    %r10,0x38(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8d7e:   nop
  0x00007f03f91a8d7f:   nop
  0x00007f03f91a8d80:   vzeroupper 
  0x00007f03f91a8d83:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [56]=Oop [80]=Oop [160]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8d88:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8d92:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8d96:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8d9b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B412: #	out( N5788 ) <- in( B118 )  Freq: 4.69346e-08
  0x00007f03f91a8d9c:   mov    $0xfffffff6,%esi             ;*invokedynamic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91a8da1:   nop
  0x00007f03f91a8da2:   nop
  0x00007f03f91a8da3:   nop
  0x00007f03f91a8da4:   vzeroupper 
  0x00007f03f91a8da7:   callq  0x00007f03f9116540           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8dac:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8db6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8dba:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8dbf:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B413: #	out( N5788 ) <- in( B164 )  Freq: 2.00695e-08
  0x00007f03f91a8dc0:   mov    $0xfffffff4,%esi             ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8dc5:   mov    0x38(%rsp),%rbp
  0x00007f03f91a8dca:   mov    0x28(%rsp),%r10
  0x00007f03f91a8dcf:   mov    %r10,0x20(%rsp)
  0x00007f03f91a8dd4:   vzeroupper 
  0x00007f03f91a8dd7:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::length@4 (line 154)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8ddc:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8de6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8dea:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8def:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B414: #	out( N5788 ) <- in( B142 )  Freq: 8.69643e-09
  0x00007f03f91a8df0:   mov    $0xfffffff6,%esi             ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8df5:   nop
  0x00007f03f91a8df6:   nop
  0x00007f03f91a8df7:   nop
  0x00007f03f91a8df8:   vzeroupper 
  0x00007f03f91a8dfb:   callq  0x00007f03f9116540           ; ImmutableOopMap {[56]=Oop [64]=Oop }
                                                            ;*invokevirtual intoArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8e00:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8e0a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8e0e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8e13:   hlt    
 ;; B415: #	out( N5788 ) <- in( B220 )  Freq: 8.69607e-10
  0x00007f03f91a8e14:   mov    $0xfffffff6,%esi             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8e19:   nop
  0x00007f03f91a8e1a:   nop
  0x00007f03f91a8e1b:   nop
  0x00007f03f91a8e1c:   vzeroupper 
  0x00007f03f91a8e1f:   callq  0x00007f03f9116540           ; ImmutableOopMap {}
                                                            ;*invokevirtual iota {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8e24:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8e2e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8e32:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8e37:   hlt                                 ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
 ;; B416: #	out( N5788 ) <- in( B297 B299 )  Freq: 4.27635e-10
  0x00007f03f91a8e38:   mov    $0xffffff97,%esi             ;*getfield laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::loopBound@2 (line 203)
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a8e3d:   mov    0x18(%rsp),%rbp
  0x00007f03f91a8e42:   mov    0x38(%rsp),%r10
  0x00007f03f91a8e47:   mov    %r10,0x18(%rsp)
  0x00007f03f91a8e4c:   mov    0x28(%rsp),%r10
  0x00007f03f91a8e51:   mov    %r10,0x20(%rsp)
  0x00007f03f91a8e56:   mov    0x40(%rsp),%r10
  0x00007f03f91a8e5b:   mov    %r10,0x30(%rsp)
  0x00007f03f91a8e60:   mov    0x48(%rsp),%r11d
  0x00007f03f91a8e65:   mov    %r11d,0x2c(%rsp)
  0x00007f03f91a8e6a:   mov    %r11d,0x38(%rsp)
  0x00007f03f91a8e6f:   mov    0x4c(%rsp),%r10d
  0x00007f03f91a8e74:   mov    %r10d,0x3c(%rsp)
  0x00007f03f91a8e79:   mov    0x68(%rsp),%r10
  0x00007f03f91a8e7e:   mov    %r10,0x48(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8e83:   nop
  0x00007f03f91a8e84:   vzeroupper 
  0x00007f03f91a8e87:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [72]=Oop [80]=Oop [88]=Oop }
                                                            ;*invokevirtual and {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8e8c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8e96:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8e9a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8e9f:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B417: #	out( N5788 ) <- in( B230 )  Freq: 2.479e-10
  0x00007f03f91a8ea0:   mov    $0xfffffff4,%esi             ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8ea5:   mov    0x38(%rsp),%rbp
  0x00007f03f91a8eaa:   mov    0x28(%rsp),%r10
  0x00007f03f91a8eaf:   mov    %r10,0x20(%rsp)
  0x00007f03f91a8eb4:   vzeroupper 
  0x00007f03f91a8eb7:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [64]=Oop [80]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::length@4 (line 154)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8ebc:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8ec6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8eca:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8ecf:   hlt                                 ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@64 (line 43)
 ;; B418: #	out( N5788 ) <- in( B311 B313 )  Freq: 3.96195e-11
  0x00007f03f91a8ed0:   mov    $0xffffff97,%esi             ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91a8ed5:   mov    0x38(%rsp),%rbp
  0x00007f03f91a8eda:   mov    0x48(%rsp),%r11d
  0x00007f03f91a8edf:   mov    0x28(%rsp),%r10
  0x00007f03f91a8ee4:   mov    %r10,0x20(%rsp)
  0x00007f03f91a8ee9:   mov    %r11d,0x1c(%rsp)
  0x00007f03f91a8eee:   mov    %r11d,0x28(%rsp)
  0x00007f03f91a8ef3:   mov    0x4c(%rsp),%r11d
  0x00007f03f91a8ef8:   mov    %r11d,0x2c(%rsp)             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8efd:   nop
  0x00007f03f91a8efe:   nop
  0x00007f03f91a8eff:   nop
  0x00007f03f91a8f00:   vzeroupper 
  0x00007f03f91a8f03:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop }
                                                            ;*invokevirtual and {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8f08:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8f12:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8f16:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8f1b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B419: #	out( N5788 ) <- in( B254 )  Freq: 2.47889e-11
  0x00007f03f91a8f1c:   mov    $0xfffffff4,%esi             ;*invokestatic fromArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8f21:   mov    0x24(%rsp),%r11d
  0x00007f03f91a8f26:   mov    %r11d,0x18(%rsp)             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a8f2b:   nop
  0x00007f03f91a8f2c:   vzeroupper 
  0x00007f03f91a8f2f:   callq  0x00007f03f9116540           ; ImmutableOopMap {[56]=Oop [80]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::vec@4 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8f34:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8f3e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8f42:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8f47:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B420: #	out( N5788 ) <- in( B257 )  Freq: 2.47889e-11
  0x00007f03f91a8f48:   mov    $0xfffffff4,%esi             ;*iflt {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
  0x00007f03f91a8f4d:   mov    0x24(%rsp),%r10d
  0x00007f03f91a8f52:   mov    %r10d,0x18(%rsp)
  0x00007f03f91a8f57:   mov    %r9,0x20(%rsp)
  0x00007f03f91a8f5c:   vzeroupper 
  0x00007f03f91a8f5f:   callq  0x00007f03f9116540           ; ImmutableOopMap {[32]=Oop [56]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@4 (line 569)
                                                            ; - jdk.incubator.vector.IntVector::stOp@10 (line 352)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a8f64:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a8f6e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a8f72:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a8f77:   hlt                                 ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@70 (line 43)
 ;; B421: #	out( B446 ) <- in( B351 )  Freq: 1.98089e-12
  0x00007f03f91a8f78:   jmpq   0x00007f03f91a8ff2           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B422: #	out( B446 ) <- in( B339 )  Freq: 6.60339e-12
  0x00007f03f91a8f7d:   nop
  0x00007f03f91a8f7e:   nop
  0x00007f03f91a8f7f:   nop
  0x00007f03f91a8f80:   jmpq   0x00007f03f91a8ff2           ;*invokestatic fromArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B423: #	out( B446 ) <- in( B341 )  Freq: 6.60339e-12
  0x00007f03f91a8f85:   jmpq   0x00007f03f91a8ff2           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@70 (line 43)
 ;; B424: #	out( B455 ) <- in( B309 )  Freq: 2.13809e-11
  0x00007f03f91a8f8a:   jmpq   0x00007f03f91a900b
 ;; B425: #	out( B455 ) <- in( B301 )  Freq: 7.12741e-11
  0x00007f03f91a8f8f:   jmpq   0x00007f03f91a900b           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B426: #	out( B455 ) <- in( B303 )  Freq: 7.12741e-11
  0x00007f03f91a8f94:   jmpq   0x00007f03f91a900b           ;*isub {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@42 (line 74)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B427: #	out( B457 ) <- in( B251 )  Freq: 1.01023e-09
  0x00007f03f91a8f99:   mov    %rax,%rsi
  0x00007f03f91a8f9c:   nop
  0x00007f03f91a8f9d:   nop
  0x00007f03f91a8f9e:   nop
  0x00007f03f91a8f9f:   nop
  0x00007f03f91a8fa0:   jmpq   0x00007f03f91a9013           ;*iload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@37 (line 74)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B428: #	out( B457 ) <- in( B249 )  Freq: 1.0103e-09
  0x00007f03f91a8fa5:   mov    %rax,%rsi
  0x00007f03f91a8fa8:   jmpq   0x00007f03f91a9013
 ;; B429: #	out( B439 ) <- in( B244 )  Freq: 2.20172e-09
  0x00007f03f91a8fad:   jmpq   0x00007f03f91a8fd9
 ;; B430: #	out( B439 ) <- in( B242 )  Freq: 2.20177e-09
  0x00007f03f91a8fb2:   jmpq   0x00007f03f91a8fd9
 ;; B431: #	out( B439 ) <- in( B240 )  Freq: 2.44646e-09
  0x00007f03f91a8fb7:   jmpq   0x00007f03f91a8fd9
 ;; B432: #	out( B439 ) <- in( B239 )  Freq: 2.4465e-09
  0x00007f03f91a8fbc:   jmp    0x00007f03f91a8fd9           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B433: #	out( B439 ) <- in( B229 )  Freq: 2.44656e-09
  0x00007f03f91a8fbe:   nop
  0x00007f03f91a8fbf:   nop
  0x00007f03f91a8fc0:   jmp    0x00007f03f91a8fd9
 ;; B434: #	out( B439 ) <- in( B218 )  Freq: 8.58229e-09
  0x00007f03f91a8fc2:   jmp    0x00007f03f91a8fd9           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@70 (line 43)
 ;; B435: #	out( B446 ) <- in( B137 )  Freq: 1.98057e-08
  0x00007f03f91a8fc4:   jmpq   0x00007f03f91a8ff2           ;*isub {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@42 (line 74)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B436: #	out( B457 ) <- in( B141 )  Freq: 8.58264e-08
  0x00007f03f91a8fc9:   mov    %rax,%rsi
  0x00007f03f91a8fcc:   jmpq   0x00007f03f91a9013
 ;; B437: #	out( B457 ) <- in( B140 )  Freq: 8.58281e-08
  0x00007f03f91a8fd1:   mov    %rax,%rsi
  0x00007f03f91a8fd4:   jmpq   0x00007f03f91a9013           ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B438: #	out( B439 ) <- in( B143 )  Freq: 8.58246e-08
 ;; B439: #	out( B457 ) <- in( B438 B433 B429 B430 B431 B432 B434 )  Freq: 1.0615e-07
  0x00007f03f91a8fd9:   mov    %rax,%rsi
  0x00007f03f91a8fdc:   nop
  0x00007f03f91a8fdd:   nop
  0x00007f03f91a8fde:   nop
  0x00007f03f91a8fdf:   nop
  0x00007f03f91a8fe0:   jmpq   0x00007f03f91a9013
 ;; B440: #	out( B446 ) <- in( B178 )  Freq: 1.78247e-07
  0x00007f03f91a8fe5:   jmp    0x00007f03f91a8ff2           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B441: #	out( B446 ) <- in( B176 )  Freq: 1.78251e-07
  0x00007f03f91a8fe7:   jmp    0x00007f03f91a8ff2           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@70 (line 43)
 ;; B442: #	out( B455 ) <- in( B113 )  Freq: 2.13774e-07
  0x00007f03f91a8fe9:   jmpq   0x00007f03f91a900b
 ;; B443: #	out( B446 ) <- in( B163 )  Freq: 1.98069e-07
  0x00007f03f91a8fee:   jmp    0x00007f03f91a8ff2           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B444: #	out( B446 ) <- in( B173 )  Freq: 1.98064e-07
  0x00007f03f91a8ff0:   jmp    0x00007f03f91a8ff2           ;*isub {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@41 (line 74)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B445: #	out( B446 ) <- in( B174 )  Freq: 1.9806e-07
 ;; B446: #	out( B457 ) <- in( B435 B422 B423 B443 B440 B441 B445 B444 B421 )  Freq: 9.70513e-07
  0x00007f03f91a8ff2:   mov    %rax,%rsi
  0x00007f03f91a8ff5:   jmpq   0x00007f03f91a9013
 ;; B447: #	out( B455 ) <- in( B210 )  Freq: 1.92392e-06
  0x00007f03f91a8ffa:   jmp    0x00007f03f91a900b           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B448: #	out( B455 ) <- in( B208 )  Freq: 1.92396e-06
  0x00007f03f91a8ffc:   jmp    0x00007f03f91a900b           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@70 (line 43)
 ;; B449: #	out( B451 ) <- in( B24 )  Freq: 9.99993e-06
  0x00007f03f91a8ffe:   nop
  0x00007f03f91a8fff:   nop
  0x00007f03f91a9000:   jmp    0x00007f03f91a9002           ;*isub {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@41 (line 74)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B450: #	out( B451 ) <- in( B25 )  Freq: 9.99973e-06
 ;; B451: #	out( B457 ) <- in( B449 B450 )  Freq: 1.99997e-05
  0x00007f03f91a9002:   mov    %rax,%rsi
  0x00007f03f91a9005:   jmp    0x00007f03f91a9013
 ;; B452: #	out( B455 ) <- in( B195 )  Freq: 2.13787e-06
  0x00007f03f91a9007:   jmp    0x00007f03f91a900b           ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B453: #	out( B455 ) <- in( B205 )  Freq: 2.13782e-06
  0x00007f03f91a9009:   jmp    0x00007f03f91a900b           ;*isub {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@42 (line 74)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B454: #	out( B455 ) <- in( B206 )  Freq: 2.13778e-06
 ;; B455: #	out( B457 ) <- in( B442 B425 B426 B452 B447 B448 B454 B453 B424 )  Freq: 1.04753e-05
  0x00007f03f91a900b:   mov    %rax,%rsi
  0x00007f03f91a900e:   jmp    0x00007f03f91a9013           ;*invokestatic checkFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B456: #	out( B457 ) <- in( B88 )  Freq: 9.99929e-06
  0x00007f03f91a9010:   mov    %rax,%rsi                    ;*aload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@33 (line 38)
 ;; B457: #	out( N5788 ) <- in( B428 B451 B437 B446 B455 B436 B427 B439 B456 )  Freq: 4.17246e-05
  0x00007f03f91a9013:   vzeroupper 
  0x00007f03f91a9016:   add    $0xd0,%rsp
  0x00007f03f91a901d:   pop    %rbp                         ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a901e:   jmpq   0x00007f03f90549a0           ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call _rethrow_Java}
 ;; B458: #	out( N5788 ) <- in( B365 B367 )  Freq: 4.89382e-13
  0x00007f03f91a9023:   mov    $0xffffff97,%esi             ;*synchronization entry
                                                            ; - App::micro_vector_masked@-1 (line 32)
  0x00007f03f91a9028:   mov    0x38(%rsp),%rbp
  0x00007f03f91a902d:   mov    0x24(%rsp),%r11d
  0x00007f03f91a9032:   mov    %r11d,0x1c(%rsp)
  0x00007f03f91a9037:   mov    0x28(%rsp),%r10
  0x00007f03f91a903c:   mov    %r10,0x20(%rsp)
  0x00007f03f91a9041:   mov    0x50(%rsp),%r10
  0x00007f03f91a9046:   mov    %r10,0x28(%rsp)
  0x00007f03f91a904b:   rex.W pushq 0x40(%rsp)
  0x00007f03f91a9050:   rex.W popq 0x38(%rsp)               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a9055:   nop
  0x00007f03f91a9056:   nop
  0x00007f03f91a9057:   nop
  0x00007f03f91a9058:   vzeroupper 
  0x00007f03f91a905b:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop }
                                                            ;*invokevirtual and {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91a9060:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91a906a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91a906e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91a9073:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91a9074:   movabs $0x7f03f91a6afe,%r10         ;   {internal_word}
  0x00007f03f91a907e:   mov    %r10,0x3e8(%r15)
  0x00007f03f91a9085:   jmpq   0x00007f03f9117220           ;   {runtime_call SafepointBlob}
  0x00007f03f91a908a:   hlt    
  0x00007f03f91a908b:   hlt    
  0x00007f03f91a908c:   hlt    
  0x00007f03f91a908d:   hlt    
  0x00007f03f91a908e:   hlt    
  0x00007f03f91a908f:   hlt    
  0x00007f03f91a9090:   hlt    
  0x00007f03f91a9091:   hlt    
  0x00007f03f91a9092:   hlt    
  0x00007f03f91a9093:   hlt    
  0x00007f03f91a9094:   hlt    
  0x00007f03f91a9095:   hlt    
  0x00007f03f91a9096:   hlt    
  0x00007f03f91a9097:   hlt    
  0x00007f03f91a9098:   hlt    
  0x00007f03f91a9099:   hlt    
  0x00007f03f91a909a:   hlt    
  0x00007f03f91a909b:   hlt    
  0x00007f03f91a909c:   hlt    
  0x00007f03f91a909d:   hlt    
  0x00007f03f91a909e:   hlt    
  0x00007f03f91a909f:   hlt    
[Stub Code]
  0x00007f03f91a90a0:   movabs $0x0,%rbx                    ;   {no_reloc}
  0x00007f03f91a90aa:   jmpq   0x00007f03f91a90aa           ;   {runtime_call}
  0x00007f03f91a90af:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00007f03f91a90b9:   jmpq   0x00007f03f91a90b9           ;   {runtime_call}
  0x00007f03f91a90be:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00007f03f91a90c8:   jmpq   0x00007f03f91a90c8           ;   {runtime_call}
  0x00007f03f91a90cd:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00007f03f91a90d7:   jmpq   0x00007f03f91a90d7           ;   {runtime_call}
  0x00007f03f91a90dc:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00007f03f91a90e6:   jmpq   0x00007f03f91a90e6           ;   {runtime_call}
  0x00007f03f91a90eb:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00007f03f91a90f5:   jmpq   0x00007f03f91a90f5           ;   {runtime_call}
  0x00007f03f91a90fa:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00007f03f91a9104:   jmpq   0x00007f03f91a9104           ;   {runtime_call}
[Exception Handler]
  0x00007f03f91a9109:   jmpq   0x00007f03f905c6a0           ;   {runtime_call ExceptionBlob}
[Deopt Handler Code]
  0x00007f03f91a910e:   callq  0x00007f03f91a9113
  0x00007f03f91a9113:   subq   $0x5,(%rsp)
  0x00007f03f91a9118:   jmpq   0x00007f03f9116860           ;   {runtime_call DeoptimizationBlob}
  0x00007f03f91a911d:   hlt    
  0x00007f03f91a911e:   hlt    
  0x00007f03f91a911f:   hlt    
--------------------------------------------------------------------------------
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007f03f91a9120:   0x000000010188fcd0 a 'java/lang/Class'{0x000000010188fcd0} = 'jdk/incubator/vector/IntMaxVector'
  0x00007f03f91a9128:   0x0000000101964e98 a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e98}
  0x00007f03f91a9130:   0x0000000101c2c488 a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
  0x00007f03f91a9138:   0x000000010188b5c0 a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
  0x00007f03f91a9140:   0x000000010188b520 a 'java/lang/Class'{0x000000010188b520} = 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91a9148:   0x00000001010002b0 a 'java/lang/Class'{0x00000001010002b0} = int
  0x00007f03f91a9150:   0x0000000101964e58 a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e58}
  0x00007f03f91a9158:   0x0000000101c25820 a 'jdk/incubator/vector/IntVector$$Lambda$64+0x00000008000acfa0'{0x0000000101c25820}
  0x00007f03f91a9160:   0x0000000101c20690 a 'java/lang/invoke/DirectMethodHandle$Constructor'{0x0000000101c20690}
  0x00007f03f91a9168:   0x000000010110df10 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000010110df10}
  0x00007f03f91a9170:   0x0000000101127628 a 'java/lang/Class'{0x0000000101127628} = 'java/lang/invoke/LambdaForm$MH+0x0000000800005800'
  0x00007f03f91a9178:   0x0000000101be9bd0 a 'java/lang/Class'{0x0000000101be9bd0} = 'java/lang/invoke/LambdaForm$MH+0x00000008000d5000'
  0x00007f03f91a9180:   0x0000000101be2d48 a 'java/lang/Class'{0x0000000101be2d48} = 'java/lang/invoke/LambdaForm$DMH+0x00000008000d4800'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007f03f91a9188:   0x00007f03b08119b8 {method} {0x00007f03b08119b8} 'micro_vector_masked' '([I[I[I)V' in 'App'
  0x00007f03f91a9190:   0x00007f03b0812e38 {method} {0x00007f03b0812e38} 'intoArray' '([IILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91a9198:   0x00007f03b081d998 {method} {0x00007f03b081d998} 'stOp' '(Ljava/lang/Object;ILjdk/incubator/vector/VectorMask;Ljdk/incubator/vector/IntVector$FStOp;)V' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91a91a0:   0x00007f03b0a4a240 {method} {0x00007f03b0a4a240} 'vec' '()[I' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91a91a8:   0x00007f03b053f890 {method} {0x00007f03b053f890} 'getPayload' '()Ljava/lang/Object;' in 'jdk/internal/vm/vector/VectorSupport$VectorPayload'
  0x00007f03f91a91b0:   0x00007f03b0812728 {method} {0x00007f03b0812728} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91a91b8:   0x00007f03b0a4d300 {method} {0x00007f03b0a4d300} 'fromArray0' '([II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91a91c0:   0x00007f03b0813798 {method} {0x00007f03b0813798} 'fromArray0Template' '([II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91a91c8:   0x0000000800094b80 'jdk/incubator/vector/IntVector$IntSpecies'
  0x00007f03f91a91d0:   0x00007f03b081f8d8 {method} {0x00007f03b081f8d8} 'add' '(Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91a91d8:   0x00007f03b0a4e770 {method} {0x00007f03b0a4e770} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91a91e0:   0x00007f03b0a4b6d0 {method} {0x00007f03b0a4b6d0} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/Int256Vector;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91a91e8:   0x00007f03b081e8d8 {method} {0x00007f03b081e8d8} 'lanewiseTemplate' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91a91f0:   0x00007f03b081c2c8 {method} {0x00007f03b081c2c8} 'opCode' '(Ljdk/incubator/vector/VectorOperators$Operator;)I' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91a91f8:   0x00007f03b0a146b8 {method} {0x00007f03b0a146b8} 'opCode' '(Ljdk/incubator/vector/VectorOperators$Operator;II)I' in 'jdk/incubator/vector/VectorOperators'
  0x00007f03f91a9200:   0x00007f03b0aeee40 {method} {0x00007f03b0aeee40} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007f03f91a9208:   0x00007f03b0a184c0 {method} {0x00007f03b0a184c0} 'dummyVector' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
  0x00007f03f91a9210:   0x00007f03b0a1eb98 {method} {0x00007f03b0a1eb98} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007f03f91a9218:   0x0000000800040000 {type array bool}
  0x00007f03f91a9220:   0x00007f03b0a34658 {method} {0x00007f03b0a34658} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[ZI)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
  0x00007f03f91a9228:   0x00007f03b080aa78 {method} {0x00007f03b080aa78} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800005800'
  0x00007f03f91a9230:   0x00007f03b0a34820 {method} {0x00007f03b0a34820} 'fromLong' '(Ljdk/incubator/vector/VectorSpecies;J)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
  0x00007f03f91a9238:   0x00007f03b0a34518 {method} {0x00007f03b0a34518} 'fromValues' '(Ljdk/incubator/vector/VectorSpecies;[Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
  0x00007f03f91a9240:   0x00007f03b0812880 {method} {0x00007f03b0812880} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[IILjdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91a9248:   0x00007f03b0a4e190 {method} {0x00007f03b0a4e190} 'blend' '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91a9250:   0x00007f03b0a4c320 {method} {0x00007f03b0a4c320} 'blend' '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/Int256Vector;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91a9258:   0x00007f03b0a17a40 {method} {0x00007f03b0a17a40} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/IntVector$IntSpecies'
  0x00007f03f91a9260:   0x0000000800098110 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91a9268:   0x00007f03b0812d08 {method} {0x00007f03b0812d08} 'intoArray' '([II)V' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91a9270:   0x00007f03b0a000f8 {method} {0x00007f03b0a000f8} 'checkMaskFromIndexSize' '(ILjdk/incubator/vector/IntVector$IntSpecies;Ljdk/incubator/vector/VectorMask;II)V' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91a9278:   0x00007f03b0a0a230 {method} {0x00007f03b0a0a230} 'check' '(Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractVector'
  0x00007f03f91a9280:   0x00007f03b0a0a350 {method} {0x00007f03b0a0a350} 'sameSpecies' '(Ljdk/incubator/vector/Vector;)Z' in 'jdk/incubator/vector/AbstractVector'
  0x00007f03f91a9288:   0x00007f03b0a18d80 {method} {0x00007f03b0a18d80} 'zero' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
  0x00007f03f91a9290:   0x00007f03b0a1e098 {method} {0x00007f03b0a1e098} 'loopBound' '(I)I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007f03f91a9298:   0x0000000800098750 'jdk/incubator/vector/Int256Vector$Int256Mask'
  0x00007f03f91a92a0:   0x0000000800040c30 {type array int}
  0x00007f03f91a92a8:   0x00007f03b0a84398 {method} {0x00007f03b0a84398} 'roundDown' '(II)I' in 'jdk/incubator/vector/VectorIntrinsics'
  0x00007f03f91a92b0:   0x00007f03b0a1d690 {method} {0x00007f03b0a1d690} 'laneCount' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007f03f91a92b8:   0x00000008000acb58 'jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58'
  0x00007f03f91a92c0:   0x00007f03b0a84090 {method} {0x00007f03b0a84090} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
  0x00007f03f91a92c8:   0x00007f03b0560ca0 {method} {0x00007f03b0560ca0} 'checkIndex' '(II)I' in 'java/util/Objects'
  0x00007f03f91a92d0:   0x00007f03b081faa8 {method} {0x00007f03b081faa8} 'add' '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91a92d8:   0x00007f03b081ea38 {method} {0x00007f03b081ea38} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91a92e0:   0x00007f03b0a18ea8 {method} {0x00007f03b0a18ea8} 'iota' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
  0x00007f03f91a92e8:   0x00007f03b0a33148 {method} {0x00007f03b0a33148} 'checkIndexByLane' '(IILjdk/incubator/vector/Vector;I)V' in 'jdk/incubator/vector/AbstractMask'
  0x00007f03f91a92f0:   0x00007f03b0a34418 {method} {0x00007f03b0a34418} 'length' '()I' in 'jdk/incubator/vector/VectorMask'
  0x00007f03f91a92f8:   0x00007f03b0a320f8 {method} {0x00007f03b0a320f8} 'vectorSpecies' '()Ljdk/incubator/vector/VectorSpecies;' in 'jdk/incubator/vector/AbstractMask'
  0x00007f03f91a9300:   0x00007f03b0a118b0 {method} {0x00007f03b0a118b0} 'find' '(Ljdk/incubator/vector/VectorOperators$Operator;ILjava/util/function/IntFunction;)Ljava/lang/Object;' in 'jdk/incubator/vector/VectorOperators$ImplCache'
  0x00007f03f91a9308:   0x00007f03b081c490 {method} {0x00007f03b081c490} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91a9310:   0x00007f03b0a14798 {method} {0x00007f03b0a14798} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/VectorOperators'
  0x00007f03f91a9318:   0x00007f03b0a49fc0 {method} {0x00007f03b0a49fc0} 'length' '()I' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91a9320:   0x00007f03b0b25e80 {method} {0x00007f03b0b25e80} 'linkToTargetMethod' '(Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x00000008000d5000'
  0x00007f03f91a9328:   0x00007f03b0b24f00 {method} {0x00007f03b0b24f00} 'newInvokeSpecial' '(Ljava/lang/Object;Ljava/lang/Object;I)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$DMH+0x00000008000d4800'
  0x00007f03f91a9330:   0x00007f03b0ba90d0 {method} {0x00007f03b0ba90d0} '<init>' '([II)V' in 'jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58'
  0x00007f03f91a9338:   0x00007f03b0400520 {method} {0x00007f03b0400520} '<init>' '()V' in 'java/lang/Object'
  0x00007f03f91a9340:   0x00007f03b0816170 {method} {0x00007f03b0816170} 'blendTemplate' '(Ljava/lang/Class;Ljdk/incubator/vector/IntVector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91a9348:   0x00007f03b0a332d8 {method} {0x00007f03b0a332d8} 'checkIndex0' '(IILjdk/incubator/vector/Vector;I)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
  0x00007f03f91a9350:   0x00007f03b0a4e418 {method} {0x00007f03b0a4e418} 'compare' '(Ljdk/incubator/vector/VectorOperators$Comparison;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91a9358:   0x00007f03b0a4c040 {method} {0x00007f03b0a4c040} 'compare' '(Ljdk/incubator/vector/VectorOperators$Comparison;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/Int256Vector$Int256Mask;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91a9360:   0x00007f03b08157f8 {method} {0x00007f03b08157f8} 'compareTemplate' '(Ljava/lang/Class;Ljdk/incubator/vector/VectorOperators$Comparison;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91a9368:   0x00007f03b0a4f8c8 {method} {0x00007f03b0a4f8c8} 'broadcast' '(J)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91a9370:   0x00007f03b0a4a400 {method} {0x00007f03b0a4a400} 'broadcast' '(J)Ljdk/incubator/vector/Int256Vector;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91a9378:   0x00007f03b081e4c0 {method} {0x00007f03b081e4c0} 'broadcastTemplate' '(J)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91a9380:   0x00007f03b0a17f88 {method} {0x00007f03b0a17f88} 'broadcast' '(J)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
  0x00007f03f91a9388:   0x00007f03b0a17dc0 {method} {0x00007f03b0a17dc0} 'broadcastBits' '(J)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
  0x00007f03f91a9390:   0x00007f03b04820b0 {method} {0x00007f03b04820b0} 'allocateInstance' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/DirectMethodHandle'
  0x00007f03f91a9398:   0x00007f03b0a1d5c0 {method} {0x00007f03b0a1d5c0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007f03f91a93a0:   0x00007f03b0a53388 {method} {0x00007f03b0a53388} 'or' '(Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/Int256Vector$Int256Mask'
  0x00007f03f91a93a8:   0x00007f03b0a52ae0 {method} {0x00007f03b0a52ae0} 'or' '(Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/Int256Vector$Int256Mask;' in 'jdk/incubator/vector/Int256Vector$Int256Mask'
  0x00007f03f91a93b0:   0x00007f03b0a522f0 {method} {0x00007f03b0a522f0} 'getBits' '()[Z' in 'jdk/incubator/vector/Int256Vector$Int256Mask'
  0x00007f03f91a93b8:   0x0000000800094370 'jdk/incubator/vector/VectorSpecies'
  0x00007f03f91a93c0:   0x00000008000a2b78 'jdk/incubator/vector/VectorOperators$AssociativeImpl'
  0x00007f03f91a93c8:   0x00007f03b0aef2a8 {method} {0x00007f03b0aef2a8} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007f03f91a93d0:   0x00007f03b0aeef18 {method} {0x00007f03b0aeef18} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007f03f91a93d8:   0x00000008000a37e8 'jdk/incubator/vector/VectorOperators$ComparisonImpl'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007f03f91a5b3f offset=ffffffff bits=0):
PcDesc(pc=0x00007f03f91a5b81 offset=41 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5b85 offset=45 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@1 (line 3208)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a5b90 offset=50 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5b9a offset=5a bits=0):   jdk.incubator.vector.VectorOperators$OperatorImpl::opCode@26 (line 775)
   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
   jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a5b9d offset=5d bits=0):   jdk.incubator.vector.AbstractSpecies::dummyVector@1 (line 295)
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a5bac offset=6c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5baf offset=6f bits=0):   jdk.incubator.vector.IntVector::lanewiseTemplate@247 (line 633)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a5bbb offset=7b bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a5bc2 offset=82 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5bd3 offset=93 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a5be7 offset=a7 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5bed offset=ad bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a5c5b offset=11b bits=0):   java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@4
   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a5c5d offset=11d bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5c8f offset=14f bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91a5cf6 offset=1b6 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5d00 offset=1c0 bits=0):   jdk.incubator.vector.Int256Vector::blend@14 (line 376)
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a5d07 offset=1c7 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5d10 offset=1d0 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a5d17 offset=1d7 bits=1):   App::micro_vector_masked@42 (line 37)  reexecute=true
   Locals
    - l0: reg rbx [6],oop
    - l1: stack[56],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: reg r11 [22],oop
    - l8: reg r9 [18],int
    - l9: empty
PcDesc(pc=0x00007f03f91a5d2a offset=1ea bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5d32 offset=1f2 bits=0):   java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@4
   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91a5d58 offset=218 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5d6c offset=22c bits=0):   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a5d6f offset=22f bits=0):   jdk.incubator.vector.IntVector::lanewiseTemplate@222 (line 634)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a5d74 offset=234 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5d88 offset=248 bits=4):   jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
   Locals
    - l0: empty
    - l1: stack[72],oop
    - l2: 0
    - l3: stack[32],oop
    - l4: stack[64]
   Expression stack
    - @0: reg rbp [10],narrowoop
   App::micro_vector_masked@52 (line 40)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a5de9 offset=2a9 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5df4 offset=2b4 bits=4):   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@52 (line 40)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a5e2a offset=2ea bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5e2e offset=2ee bits=0):   jdk.incubator.vector.IntVector$IntSpecies::elementType@-1 (line 3476)
   jdk.incubator.vector.IntVector::fromArray0Template@10 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a5e47 offset=307 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5e51 offset=311 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@14 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a5e55 offset=315 bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a5e9f offset=35f bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5ea3 offset=363 bits=0):   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a5ecd offset=38d bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5edb offset=39b bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a5edd offset=39d bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a5ee8 offset=3a8 bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a5eef offset=3af bits=0):   App::micro_vector_masked@64 (line 43)
PcDesc(pc=0x00007f03f91a5ef8 offset=3b8 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5eff offset=3bf bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a5f0d offset=3cd bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5f13 offset=3d3 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a5f1a offset=3da bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5f1d offset=3dd bits=1):   App::micro_vector_masked@124 (line 43)  reexecute=true
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: reg r14 [28],oop
    - l3: reg r13 [26],oop
    - l4: reg rdi [14],int
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a5f76 offset=436 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5f79 offset=439 bits=0):   jdk.incubator.vector.IntVector::intoArray@2 (line 2960)
   App::micro_vector_masked@107 (line 46)
PcDesc(pc=0x00007f03f91a5f8d offset=44d bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a5f94 offset=454 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5fa5 offset=465 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a5fac offset=46c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a5fb2 offset=472 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a601c offset=4dc bits=0):   App::micro_vector_masked@73 (line 44)
PcDesc(pc=0x00007f03f91a6053 offset=513 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a605b offset=51b bits=0):   jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a60b9 offset=579 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a60be offset=57e bits=0):   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a60c3 offset=583 bits=0):   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a60c8 offset=588 bits=0):   jdk.incubator.vector.IntVector::fromArray@50 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a60cd offset=58d bits=0):   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a60d2 offset=592 bits=0):   jdk.incubator.vector.AbstractVector::sameSpecies@5 (line 133)
   jdk.incubator.vector.AbstractVector::check@2 (line 124)
   jdk.incubator.vector.IntVector::lanewiseTemplate@7 (line 602)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a610d offset=5cd bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6112 offset=5d2 bits=0):   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a612d offset=5ed bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6132 offset=5f2 bits=0):   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a6158 offset=618 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a615e offset=61e bits=0):   jdk.incubator.vector.IntVector$IntSpecies::zero@17 (line 3650)
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a616e offset=62e bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a618b offset=64b bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a6192 offset=652 bits=1):   jdk.incubator.vector.VectorMask::fromLong@135 (line 255)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: reg r9 [18],oop
    - l4: empty
    - l5: 0
    - l6: reg rbp [10],long
    - l7: reg rax [0],oop
    - l8: reg r10 [20],int
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: reg r14 [28],oop
    - l3: reg r13 [26],oop
    - l4: reg xmm0 [48],int
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a6211 offset=6d1 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6214 offset=6d4 bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a622d offset=6ed bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6232 offset=6f2 bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a6236 offset=6f6 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a62a9 offset=769 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a62b3 offset=773 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a62d9 offset=799 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a62e4 offset=7a4 bits=4):   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: stack[64],oop
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a6306 offset=7c6 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a630c offset=7cc bits=0):   App::micro_vector_masked@-1 (line 32)
PcDesc(pc=0x00007f03f91a6311 offset=7d1 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6315 offset=7d5 bits=0):   jdk.incubator.vector.AbstractVector::sameSpecies@52 (line 136)
   jdk.incubator.vector.AbstractVector::check@2 (line 124)
   jdk.incubator.vector.IntVector::lanewiseTemplate@7 (line 602)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a632d offset=7ed bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6331 offset=7f1 bits=0):   jdk.incubator.vector.VectorMask::fromLong@15 (line 242)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91a633f offset=7ff bits=0):   jdk.incubator.vector.AbstractSpecies::loopBound@-1 (line 203)
   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a6343 offset=803 bits=0):   App::micro_vector_masked@148 (line 51)
PcDesc(pc=0x00007f03f91a6347 offset=807 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a634c offset=80c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6351 offset=811 bits=0):   jdk.incubator.vector.VectorMask::fromLong@104 (line 255)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91a63b8 offset=878 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a63bc offset=87c bits=0):   jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91a6426 offset=8e6 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a642b offset=8eb bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a6453 offset=913 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a645c offset=91c bits=1):   jdk.incubator.vector.IntVector$IntSpecies::zero@64 (line 3652)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
PcDesc(pc=0x00007f03f91a6477 offset=937 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6492 offset=952 bits=0):   App::micro_vector_masked@107 (line 46)
PcDesc(pc=0x00007f03f91a649c offset=95c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a64b1 offset=971 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a64b8 offset=978 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a64be offset=97e bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a650c offset=9cc bits=0):   jdk.incubator.vector.VectorIntrinsics::roundDown@3 (line 106)
   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a6511 offset=9d1 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6515 offset=9d5 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a651c offset=9dc bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6523 offset=9e3 bits=0):   jdk.incubator.vector.AbstractSpecies::laneCount@0 (line 125)
   jdk.incubator.vector.VectorMask::fromLong@6 (line 241)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91a6552 offset=a12 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6558 offset=a18 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a6567 offset=a27 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a656d offset=a2d bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a658a offset=a4a bits=0):   App::micro_vector_masked@-1 (line 32)
PcDesc(pc=0x00007f03f91a65dc offset=a9c bits=0):   jdk.incubator.vector.AbstractSpecies::dummyVector@6 (line 296)
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a65f7 offset=ab7 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a6607 offset=ac7 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a660d offset=acd bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a6632 offset=af2 bits=0):   jdk.incubator.vector.VectorMask::fromLong@40 (line 247)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91a6689 offset=b49 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a668d offset=b4d bits=0):   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a6697 offset=b57 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a66a0 offset=b60 bits=4):   jdk.incubator.vector.IntVector::fromArray@64 (line 2728)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a66a8 offset=b68 bits=0):   java.util.Objects::checkIndex@3 (line 359)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a66ad offset=b6d bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a66b1 offset=b71 bits=0):   jdk.incubator.vector.IntVector::opCode@7 (line 62)
   jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a66c7 offset=b87 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a66d4 offset=b94 bits=0):   App::micro_vector_masked@64 (line 43)
PcDesc(pc=0x00007f03f91a66d9 offset=b99 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a66dd offset=b9d bits=0):   jdk.incubator.vector.AbstractSpecies::laneCount@1 (line 125)
   jdk.incubator.vector.VectorMask::fromLong@6 (line 241)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91a66e1 offset=ba1 bits=0):   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a672e offset=bee bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6732 offset=bf2 bits=0):   jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91a679a offset=c5a bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a679f offset=c5f bits=0):   jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a67c0 offset=c80 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::zero@64 (line 3652)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
PcDesc(pc=0x00007f03f91a67e6 offset=ca6 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6803 offset=cc3 bits=0):   jdk.incubator.vector.IntVector::lanewiseTemplate@247 (line 633)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a680d offset=ccd bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6822 offset=ce2 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a6829 offset=ce9 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a682f offset=cef bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a687d offset=d3d bits=0):   jdk.incubator.vector.AbstractSpecies::loopBound@2 (line 203)
   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a6882 offset=d42 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6886 offset=d46 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a688d offset=d4d bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6894 offset=d54 bits=0):   jdk.incubator.vector.VectorMask::fromLong@6 (line 241)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91a68c3 offset=d83 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a68c9 offset=d89 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a68d0 offset=d90 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a68d6 offset=d96 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a68f7 offset=db7 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a6942 offset=e02 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6946 offset=e06 bits=0):   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@0 (line 3574)
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a6959 offset=e19 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a6967 offset=e27 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a696d offset=e2d bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a6992 offset=e52 bits=0):   jdk.incubator.vector.VectorMask::fromLong@40 (line 247)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91a69e0 offset=ea0 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a69e4 offset=ea4 bits=0):   jdk.incubator.vector.IntVector::lanewiseTemplate@247 (line 633)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a69e9 offset=ea9 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a69ed offset=ead bits=0):   jdk.incubator.vector.Int256Vector::lanewise@-1 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a69f7 offset=eb7 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6a00 offset=ec0 bits=4):   jdk.incubator.vector.IntVector::fromArray@64 (line 2728)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a6a14 offset=ed4 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6a1e offset=ede bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a6a33 offset=ef3 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6a48 offset=f08 bits=4):   jdk.incubator.vector.IntVector::lanewise@70 (line 688)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: stack[160],oop
   jdk.incubator.vector.IntVector::add@6 (line 1133)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   App::micro_vector_masked@188 (line 54)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
PcDesc(pc=0x00007f03f91a6a58 offset=f18 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6a6c offset=f2c bits=4):   jdk.incubator.vector.IntVector::lanewise@74 (line 688)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   jdk.incubator.vector.IntVector::add@6 (line 1133)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   App::micro_vector_masked@188 (line 54)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
PcDesc(pc=0x00007f03f91a6a79 offset=f39 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6a8c offset=f4c bits=0):   jdk.incubator.vector.IntVector::intoArray@1 (line 3000)
   Locals
    - l0: stack[40],oop
    - l1: stack[56],oop
    - l2: stack[72]
    - l3: stack[64],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a6aa6 offset=f66 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6ab4 offset=f74 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a6ac3 offset=f83 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6ac9 offset=f89 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a6ad7 offset=f97 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6adb offset=f9b bits=0):   App::micro_vector_masked@144 (line 51)
PcDesc(pc=0x00007f03f91a6aec offset=fac bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6af3 offset=fb3 bits=0):   App::micro_vector_masked@33 (line 38)
PcDesc(pc=0x00007f03f91a6b18 offset=fd8 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6b1d offset=fdd bits=0):   jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a6b36 offset=ff6 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6b40 offset=1000 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::zero@72 (line 3654)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
PcDesc(pc=0x00007f03f91a6b63 offset=1023 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6b8f offset=104f bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a6bde offset=109e bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6be3 offset=10a3 bits=0):   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a6c18 offset=10d8 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::iota@64 (line 3666)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[80],oop
    - @1: stack[28]
    - @2: stack[44]
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[40]
    - l3: stack[72],oop
    - l4: stack[64],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[72],oop
PcDesc(pc=0x00007f03f91a6c32 offset=10f2 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6c5c offset=111c bits=4):   jdk.incubator.vector.AbstractMask::vectorSpecies@1 (line 61)
   Locals
    - l0: empty
   jdk.incubator.vector.VectorMask::length@1 (line 154)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: stack[88],oop
    - l1: stack[72]
    - l2: stack[76]
    - l3: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e98}
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a6c5f offset=111f bits=0):   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a6c83 offset=1143 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6c89 offset=1149 bits=0):   jdk.incubator.vector.VectorMask::fromLong@35 (line 247)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91a6c99 offset=1159 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@20 (line 3211)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a6cad offset=116d bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6cb1 offset=1171 bits=0):   jdk.incubator.vector.VectorOperators$ImplCache::find@10 (line 1265)
   jdk.incubator.vector.IntVector::lanewiseTemplate@238 (line 636)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a6cb7 offset=1177 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6cbb offset=117b bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a6cc5 offset=1185 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6cd1 offset=1191 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a6cfa offset=11ba bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6cfe offset=11be bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a6d03 offset=11c3 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6d1b offset=11db bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a6d27 offset=11e7 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6d6f offset=122f bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a6d90 offset=1250 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6d96 offset=1256 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a6da7 offset=1267 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6dce offset=128e bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a6e17 offset=12d7 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6e1b offset=12db bits=0):   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a6e20 offset=12e0 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6e34 offset=12f4 bits=4):   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a6e4c offset=130c bits=0):   jdk.incubator.vector.AbstractMask::checkIndexByLane@147 (line 240)
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: reg rbp [10],oop
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a6e57 offset=1317 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6e6c offset=132c bits=0):   jdk.incubator.vector.AbstractMask::checkIndexByLane@155 (line 241)
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: reg rbp [10],oop
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a6e91 offset=1351 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6e9a offset=135a bits=0):   jdk.incubator.vector.VectorOperators$OperatorImpl::opCode@1 (line 774)
   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
   jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a6eb7 offset=1377 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6ec0 offset=1380 bits=4):   jdk.incubator.vector.AbstractMask::checkIndexByLane@171 (line 243)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[72]
    - l3: stack[48],oop
    - l4: stack[64],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[48],oop
PcDesc(pc=0x00007f03f91a6ec9 offset=1389 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6ece offset=138e bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a6ef4 offset=13b4 bits=1):   jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[72],oop
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[28]
    - l3: stack[48],oop
    - l4: stack[64],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[48],oop
PcDesc(pc=0x00007f03f91a6f14 offset=13d4 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6f19 offset=13d9 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a6f43 offset=1403 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6f4c offset=140c bits=1):   jdk.incubator.vector.IntVector$IntSpecies::iota@72 (line 3668)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[80],oop
    - @1: stack[28]
    - @2: stack[44]
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[40]
    - l3: stack[72],oop
    - l4: stack[64],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[72],oop
PcDesc(pc=0x00007f03f91a6f6d offset=142d bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6f72 offset=1432 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a6f9a offset=145a bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6fa4 offset=1464 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::zero@72 (line 3654)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
PcDesc(pc=0x00007f03f91a6fc3 offset=1483 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6fc9 offset=1489 bits=0):   java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@-1
   jdk.incubator.vector.IntVector::fromArray0Template@26 (line 3211)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a6fdb offset=149b bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6fe9 offset=14a9 bits=0):   jdk.incubator.vector.AbstractSpecies::loopBound@2 (line 203)
   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a6ff3 offset=14b3 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a6ff7 offset=14b7 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a7054 offset=1514 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7059 offset=1519 bits=0):   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a7084 offset=1544 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::iota@64 (line 3666)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[104],oop
    - @1: stack[72]
    - @2: stack[76]
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a70a7 offset=1567 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a70c4 offset=1584 bits=4):   jdk.incubator.vector.AbstractMask::vectorSpecies@1 (line 61)
   Locals
    - l0: empty
   jdk.incubator.vector.VectorMask::length@1 (line 154)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: stack[104],oop
    - l1: stack[72]
    - l2: stack[76]
    - l3: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e98}
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a70e6 offset=15a6 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a70ec offset=15ac bits=0):   jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91a70fc offset=15bc bits=0):   jdk.incubator.vector.AbstractSpecies::dummyVector@1 (line 295)
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a70ff offset=15bf bits=0):   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a710f offset=15cf bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7113 offset=15d3 bits=0):   jdk.incubator.vector.IntVector::intoArray@21 (line 2963)
   App::micro_vector_masked@107 (line 46)
PcDesc(pc=0x00007f03f91a7119 offset=15d9 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a711d offset=15dd bits=0):   jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a7127 offset=15e7 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7133 offset=15f3 bits=0):   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a715c offset=161c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7160 offset=1620 bits=0):   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a7163 offset=1623 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a717b offset=163b bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a7187 offset=1647 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a71ce offset=168e bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a71ef offset=16af bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a71f4 offset=16b4 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a7207 offset=16c7 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a722a offset=16ea bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a7273 offset=1733 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7277 offset=1737 bits=0):   jdk.incubator.vector.IntVector::intoArray@2 (line 2960)
   App::micro_vector_masked@107 (line 46)
PcDesc(pc=0x00007f03f91a727c offset=173c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7290 offset=1750 bits=4):   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a7298 offset=1758 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a72ac offset=176c bits=0):   jdk.incubator.vector.AbstractMask::checkIndexByLane@147 (line 240)
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: stack[104],oop
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a72c3 offset=1783 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a72d8 offset=1798 bits=0):   jdk.incubator.vector.AbstractMask::checkIndexByLane@155 (line 241)
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: stack[104],oop
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[48],oop
PcDesc(pc=0x00007f03f91a7303 offset=17c3 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a730c offset=17cc bits=0):   jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a732c offset=17ec bits=4):   jdk.incubator.vector.AbstractMask::checkIndexByLane@171 (line 243)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: stack[72]
    - l3: reg rbp [10],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: reg rbp [10],oop
PcDesc(pc=0x00007f03f91a7335 offset=17f5 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a733a offset=17fa bits=0):   jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a7344 offset=1804 bits=1):   jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a736d offset=182d bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7372 offset=1832 bits=0):   jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a7395 offset=1855 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a73a0 offset=1860 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::iota@72 (line 3668)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[104],oop
    - @1: stack[72]
    - @2: stack[76]
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a73fb offset=18bb bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7410 offset=18d0 bits=4):   jdk.incubator.vector.IntVector::intoArray@17 (line 3004)
   Locals
    - l0: stack[40],oop
    - l1: stack[56],oop
    - l2: stack[72]
    - l3: stack[64],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a7432 offset=18f2 bits=0):   App::micro_vector_masked@-1 (line 32)
PcDesc(pc=0x00007f03f91a744d offset=190d bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7451 offset=1911 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a749d offset=195d bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a74a2 offset=1962 bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a74b6 offset=1976 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a74c0 offset=1980 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::iota@64 (line 3666)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[48],oop
    - @1: stack[72]
    - @2: stack[168]
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[72]
    - l3: stack[64],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a74f5 offset=19b5 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7508 offset=19c8 bits=4):   jdk.incubator.vector.AbstractMask::vectorSpecies@1 (line 61)
   Locals
    - l0: empty
   jdk.incubator.vector.VectorMask::length@1 (line 154)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: stack[64],oop
    - l1: stack[72]
    - l2: stack[168]
    - l3: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e98}
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[40],oop
    - l1: stack[56],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a750b offset=19cb bits=0):   java.util.Objects::checkIndex@3 (line 359)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a752d offset=19ed bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7533 offset=19f3 bits=0):   jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91a7543 offset=1a03 bits=0):   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a7547 offset=1a07 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a755a offset=1a1a bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a755e offset=1a1e bits=0):   jdk.incubator.vector.IntVector::intoArray@17 (line 2963)
   App::micro_vector_masked@107 (line 46)
PcDesc(pc=0x00007f03f91a7563 offset=1a23 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7567 offset=1a27 bits=0):   jdk.incubator.vector.VectorOperators::opKind@5 (line 409)
   jdk.incubator.vector.IntVector::opKind@2 (line 71)
   jdk.incubator.vector.IntVector::lanewiseTemplate@15 (line 603)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a7570 offset=1a30 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a757c offset=1a3c bits=0):   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a75a5 offset=1a65 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a75a9 offset=1a69 bits=0):   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a75ac offset=1a6c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a75c4 offset=1a84 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a75cb offset=1a8b bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7613 offset=1ad3 bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a7634 offset=1af4 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a763a offset=1afa bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a7647 offset=1b07 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a764d offset=1b0d bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a76b8 offset=1b78 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a76bf offset=1b7f bits=0):   jdk.incubator.vector.Int256Vector::length@-1 (line 103)
   jdk.incubator.vector.IntVector::intoArray@2 (line 2960)
   App::micro_vector_masked@107 (line 46)
PcDesc(pc=0x00007f03f91a76c4 offset=1b84 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a76d8 offset=1b98 bits=4):   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
   Locals
    - l0: empty
    - l1: stack[36]
    - l2: stack[168]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[40],oop
    - l1: stack[56],oop
    - l2: stack[36]
    - l3: stack[80],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a76e0 offset=1ba0 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a76f4 offset=1bb4 bits=0):   jdk.incubator.vector.AbstractMask::checkIndexByLane@147 (line 240)
   Locals
    - l0: empty
    - l1: stack[36]
    - l2: stack[168]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: stack[24],oop
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[40],oop
    - l1: stack[56],oop
    - l2: stack[36]
    - l3: stack[80],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a76f6 offset=1bb6 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7718 offset=1bd8 bits=0):   jdk.incubator.vector.AbstractMask::checkIndexByLane@155 (line 241)
   Locals
    - l0: empty
    - l1: stack[36]
    - l2: stack[168]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: stack[24],oop
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: stack[36]
    - l3: stack[80],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a7743 offset=1c03 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a774c offset=1c0c bits=0):   jdk.incubator.vector.IntVector::lanewiseTemplate@15 (line 603)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a7762 offset=1c22 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a776c offset=1c2c bits=4):   jdk.incubator.vector.AbstractMask::checkIndexByLane@171 (line 243)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: stack[36]
    - l3: stack[80],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a7775 offset=1c35 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a777a offset=1c3a bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a7793 offset=1c53 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a779c offset=1c5c bits=1):   jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[48],oop
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: stack[56],oop
    - l2: stack[24]
    - l3: stack[80],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a77bd offset=1c7d bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a77c2 offset=1c82 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a77d6 offset=1c96 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a77e0 offset=1ca0 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::iota@72 (line 3668)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[48],oop
    - @1: stack[72]
    - @2: stack[168]
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[72]
    - l3: stack[64],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a7807 offset=1cc7 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7811 offset=1cd1 bits=0):   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a781c offset=1cdc bits=4):   App::micro_vector_masked@18 (line 36)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a7867 offset=1d27 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7871 offset=1d31 bits=0):   java.lang.Object::<init>@0 (line 44)
   jdk.incubator.vector.IntVector$$Lambda$63/0x00000008000acb58::<init>@1
   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@19
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a787c offset=1d3c bits=4):   jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: stack[72],oop
    - l4: empty
    - l5: 0
    - l6: stack[88],long
    - l7: empty
    - l8: empty
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: stack[84]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a78c6 offset=1d86 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a78d1 offset=1d91 bits=0):   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a78d5 offset=1d95 bits=0):   jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a78e7 offset=1da7 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a78f1 offset=1db1 bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a7907 offset=1dc7 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7912 offset=1dd2 bits=0):   App::micro_vector_masked@116 (line 43)
PcDesc(pc=0x00007f03f91a7916 offset=1dd6 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a7932 offset=1df2 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7936 offset=1df6 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a7938 offset=1df8 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7942 offset=1e02 bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a7945 offset=1e05 bits=0):   jdk.incubator.vector.IntVector::intoArray@42 (line 2962)
   App::micro_vector_masked@107 (line 46)
PcDesc(pc=0x00007f03f91a7a38 offset=1ef8 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7a3c offset=1efc bits=0):   jdk.incubator.vector.IntVector::fromArray@8 (line 2689)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a7a43 offset=1f03 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7a56 offset=1f16 bits=0):   jdk.incubator.vector.IntVector$IntSpecies::iota@17 (line 3664)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7a61 offset=1f21 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7a69 offset=1f29 bits=0):   jdk.incubator.vector.IntVector$IntSpecies::iota@64 (line 3666)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7a6e offset=1f2e bits=0):   jdk.incubator.vector.IntVector$IntSpecies::iota@17 (line 3664)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7a77 offset=1f37 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7a7c offset=1f3c bits=0):   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7a87 offset=1f47 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7a8d offset=1f4d bits=0):   jdk.incubator.vector.IntVector$IntSpecies::iota@76 (line 3670)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7a97 offset=1f57 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7a9c offset=1f5c bits=0):   jdk.incubator.vector.IntVector$IntSpecies::iota@68 (line 3667)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7aa2 offset=1f62 bits=0):   jdk.incubator.vector.AbstractVector::check@2 (line 124)
   jdk.incubator.vector.IntVector::blendTemplate@2 (line 1894)
   jdk.incubator.vector.Int256Vector::blend@11 (line 376)
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7aac offset=1f6c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7ab1 offset=1f71 bits=0):   jdk.incubator.vector.AbstractVector::sameSpecies@5 (line 133)
   jdk.incubator.vector.AbstractVector::check@2 (line 124)
   jdk.incubator.vector.IntVector::blendTemplate@2 (line 1894)
   jdk.incubator.vector.Int256Vector::blend@11 (line 376)
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7ab7 offset=1f77 bits=0):   jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91a7aba offset=1f7a bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7acb offset=1f8b bits=0):   App::micro_vector_masked@138 (line 51)
PcDesc(pc=0x00007f03f91a7ad2 offset=1f92 bits=1):   jdk.incubator.vector.IntVector::stOp@53 (line 353)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rdx [4],oop
    - l2: reg rbx [6],int
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: reg r9 [18],oop
    - l6: reg rbp [10],oop
    - l7: reg rdi [14],int
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a7ae0 offset=1fa0 bits=0):   jdk.incubator.vector.IntVector$IntSpecies::iota@17 (line 3664)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7b29 offset=1fe9 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7b35 offset=1ff5 bits=0):   jdk.incubator.vector.IntVector$IntSpecies::zero@17 (line 3650)
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7b45 offset=2005 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7b4a offset=200a bits=0):   jdk.incubator.vector.IntVector$IntSpecies::zero@17 (line 3650)
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7b5e offset=201e bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7b68 offset=2028 bits=0):   jdk.incubator.vector.AbstractVector::check@5 (line 124)
   jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7b78 offset=2038 bits=5):   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[1173]
    - @1: stack[104],oop
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 1173: jdk.incubator.vector.Int256Vector$Int256Mask stack[128]Wrong location type 7
PcDesc(pc=0x00007f03f91a7b92 offset=2052 bits=0):   jdk.incubator.vector.AbstractVector::check@-1 (line 124)
   jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7ba4 offset=2064 bits=5):   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[1214]
    - @1: stack[104],oop
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 1214: jdk.incubator.vector.Int256Vector$Int256Mask stack[128]Wrong location type 7
PcDesc(pc=0x00007f03f91a7bb5 offset=2075 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7bbf offset=207f bits=0):   jdk.incubator.vector.IntVector$IntSpecies::broadcastBits@21 (line 3504)
   jdk.incubator.vector.IntVector$IntSpecies::broadcast@6 (line 3519)
   jdk.incubator.vector.IntVector::broadcastTemplate@5 (line 534)
   jdk.incubator.vector.Int256Vector::broadcast@2 (line 131)
   jdk.incubator.vector.Int256Vector::broadcast@2 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@52 (line 268)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7bcc offset=208c bits=5):   jdk.incubator.vector.IntVector::blendTemplate@26 (line 1895)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000010188b520} = 'jdk/incubator/vector/Int256Vector'
    - @1: a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @2: a 'java/lang/Class'{0x00000001010002b0} = int
    - @3: 8
    - @4: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e58}
    - @5: obj[987]
    - @6: reg rbp [10],oop
    - @7: a 'jdk/incubator/vector/IntVector$$Lambda$64+0x00000008000acfa0'{0x0000000101c25820}
   jdk.incubator.vector.Int256Vector::blend@11 (line 376)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 987: jdk.incubator.vector.Int256Vector stack[128]Wrong location type 7
PcDesc(pc=0x00007f03f91a7bdd offset=209d bits=0):   jdk.incubator.vector.IntVector$IntSpecies::broadcast@6 (line 3519)
   jdk.incubator.vector.IntVector::broadcastTemplate@5 (line 534)
   jdk.incubator.vector.Int256Vector::broadcast@2 (line 131)
   jdk.incubator.vector.Int256Vector::broadcast@2 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@52 (line 268)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7be7 offset=20a7 bits=0):   jdk.incubator.vector.IntVector$$Lambda$63/0x00000008000acb58::<init>@1
   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@19
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7bf8 offset=20b8 bits=5):   jdk.incubator.vector.IntVector::blendTemplate@26 (line 1895)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000010188b520} = 'jdk/incubator/vector/Int256Vector'
    - @1: a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @2: a 'java/lang/Class'{0x00000001010002b0} = int
    - @3: 8
    - @4: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e58}
    - @5: obj[1024]
    - @6: reg rbp [10],oop
    - @7: a 'jdk/incubator/vector/IntVector$$Lambda$64+0x00000008000acfa0'{0x0000000101c25820}
   jdk.incubator.vector.Int256Vector::blend@11 (line 376)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 1024: jdk.incubator.vector.Int256Vector stack[128]Wrong location type 7
PcDesc(pc=0x00007f03f91a7bfd offset=20bd bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7c02 offset=20c2 bits=0):   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a7c30 offset=20f0 bits=0):   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[52]
    - @1: stack[72]
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   Locals
    - l0: stack[56],oop
    - l1: stack[64],oop
    - l2: empty
    - l3: empty
   App::micro_vector_masked@80 (line 44)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[64],oop
    - l3: stack[40],oop
    - l4: stack[52]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a7c44 offset=2104 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7c49 offset=2109 bits=0):   App::micro_vector_masked@64 (line 43)
PcDesc(pc=0x00007f03f91a7c76 offset=2136 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7c80 offset=2140 bits=0):   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[52]
    - @1: stack[72]
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   Locals
    - l0: stack[56],oop
    - l1: stack[64],oop
    - l2: empty
    - l3: empty
   App::micro_vector_masked@92 (line 45)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[64],oop
    - l4: stack[52]
    - l5: obj[1989]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 1989: jdk.incubator.vector.Int256Vector stack[96]Wrong location type 7
PcDesc(pc=0x00007f03f91a7c94 offset=2154 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7c99 offset=2159 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a7cb6 offset=2176 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7cc0 offset=2180 bits=0):   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[52]
    - @1: stack[64]
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
   Locals
    - l0: obj[2063]
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
   App::micro_vector_masked@107 (line 46)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: stack[52]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 2063: jdk.incubator.vector.Int256Vector stack[96]Wrong location type 7
PcDesc(pc=0x00007f03f91a7cde offset=219e bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7cf0 offset=21b0 bits=4):   java.lang.invoke.DirectMethodHandle::allocateInstance@12 (line 522)
   Locals
    - l0: empty
    - l1: empty
   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@1
   Locals
    - l0: a 'java/lang/invoke/DirectMethodHandle$Constructor'{0x0000000101c20690}
    - l1: stack[64],oop
    - l2: stack[72]
    - l3: empty
    - l4: empty
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: stack[88],oop
    - @1: stack[80],oop
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a7d01 offset=21c1 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7d0b offset=21cb bits=0):   jdk.incubator.vector.IntVector::compareTemplate@41 (line 1756)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7d18 offset=21d8 bits=5):   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[1483]
    - @1: stack[88],oop
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 1483: jdk.incubator.vector.Int256Vector$Int256Mask stack[128]Wrong location type 7
PcDesc(pc=0x00007f03f91a7d3d offset=21fd bits=0):   jdk.incubator.vector.VectorOperators$OperatorImpl::opCode@1 (line 774)
   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7d47 offset=2207 bits=0):   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@-1
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7d50 offset=2210 bits=5):   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[1523]
    - @1: stack[88],oop
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 1523: jdk.incubator.vector.Int256Vector$Int256Mask stack[128]Wrong location type 7
PcDesc(pc=0x00007f03f91a7d5b offset=221b bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7d5e offset=221e bits=0):   App::micro_vector_masked@116 (line 43)
PcDesc(pc=0x00007f03f91a7d65 offset=2225 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7d68 offset=2228 bits=0):   jdk.incubator.vector.AbstractSpecies::length@1 (line 116)
   App::micro_vector_masked@116 (line 43)
PcDesc(pc=0x00007f03f91a7d6d offset=222d bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7d72 offset=2232 bits=0):   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@19
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7d8c offset=224c bits=0):   App::micro_vector_masked@13 (line 36)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[48],narrowoop
PcDesc(pc=0x00007f03f91a7da0 offset=2260 bits=0):   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a7da5 offset=2265 bits=0):   App::micro_vector_masked@-1 (line 32)
PcDesc(pc=0x00007f03f91a7db0 offset=2270 bits=0):   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
   App::micro_vector_masked@52 (line 40)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a7dc4 offset=2284 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7dc9 offset=2289 bits=0):   App::micro_vector_masked@-1 (line 32)
PcDesc(pc=0x00007f03f91a7dd4 offset=2294 bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],oop
   App::micro_vector_masked@52 (line 40)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a7de8 offset=22a8 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7ded offset=22ad bits=0):   App::micro_vector_masked@169 (line 53)
PcDesc(pc=0x00007f03f91a7dfb offset=22bb bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7e04 offset=22c4 bits=0):   App::micro_vector_masked@65 (line 43)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],narrowoop
    - @2: stack[56]
PcDesc(pc=0x00007f03f91a7e18 offset=22d8 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7e1d offset=22dd bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a7e28 offset=22e8 bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],oop
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a7e3c offset=22fc bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7e41 offset=2301 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a7e43 offset=2303 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7e4c offset=230c bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a7e60 offset=2320 bits=0):   java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@4
   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a7e65 offset=2325 bits=0):   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@19
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a7e8f offset=234f bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7e98 offset=2358 bits=1):   App::micro_vector_masked@30 (line 37)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: stack[48],oop
    - l8: 0
    - l9: empty
   Expression stack
    - @0: 0
    - @1: stack[56]
PcDesc(pc=0x00007f03f91a7ed8 offset=2398 bits=0):   App::micro_vector_masked@73 (line 44)
PcDesc(pc=0x00007f03f91a7edd offset=239d bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a7f0e offset=23ce bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7f18 offset=23d8 bits=1):   jdk.incubator.vector.VectorMask::fromLong@104 (line 255)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: stack[56],oop
    - l4: empty
    - l5: 0
    - l6: stack[72],long
    - l7: stack[64],oop
    - l8: 0
   Expression stack
    - @0: 0
    - @1: stack[52]
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: stack[48]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a7f64 offset=2424 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7f69 offset=2429 bits=0):   jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a7f94 offset=2454 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::iota@9 (line 3663)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[104],oop
    - @1: stack[72]
    - @2: stack[76]
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a7fa8 offset=2468 bits=0):   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a7fad offset=246d bits=0):   jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a7fd8 offset=2498 bits=0):   jdk.incubator.vector.IntVector$IntSpecies::iota@76 (line 3670)
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[104],oop
    - @1: stack[72]
    - @2: stack[76]
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a7fec offset=24ac bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a7ff1 offset=24b1 bits=0):   jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a7ffc offset=24bc bits=0):   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],oop
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8023 offset=24e3 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8028 offset=24e8 bits=0):   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8044 offset=2504 bits=1):   App::micro_vector_masked@70 (line 43)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: 0
    - @1: stack[48]
PcDesc(pc=0x00007f03f91a8068 offset=2528 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8072 offset=2532 bits=0):   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a8080 offset=2540 bits=5):   jdk.incubator.vector.IntVector::blendTemplate@26 (line 1895)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000010188b520} = 'jdk/incubator/vector/Int256Vector'
    - @1: a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @2: a 'java/lang/Class'{0x00000001010002b0} = int
    - @3: 8
    - @4: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e58}
    - @5: obj[1295]
    - @6: reg rbp [10],oop
    - @7: a 'jdk/incubator/vector/IntVector$$Lambda$64+0x00000008000acfa0'{0x0000000101c25820}
   jdk.incubator.vector.Int256Vector::blend@11 (line 376)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 1295: jdk.incubator.vector.Int256Vector stack[128]Wrong location type 7
PcDesc(pc=0x00007f03f91a8091 offset=2551 bits=0):   jdk.incubator.vector.Int256Vector::broadcast@5 (line 131)
   jdk.incubator.vector.Int256Vector::broadcast@2 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@52 (line 268)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a809b offset=255b bits=0):   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@19
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a80ac offset=256c bits=5):   jdk.incubator.vector.IntVector::blendTemplate@26 (line 1895)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000010188b520} = 'jdk/incubator/vector/Int256Vector'
    - @1: a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @2: a 'java/lang/Class'{0x00000001010002b0} = int
    - @3: 8
    - @4: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e58}
    - @5: obj[1330]
    - @6: reg rbp [10],oop
    - @7: a 'jdk/incubator/vector/IntVector$$Lambda$64+0x00000008000acfa0'{0x0000000101c25820}
   jdk.incubator.vector.Int256Vector::blend@11 (line 376)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 1330: jdk.incubator.vector.Int256Vector stack[128]Wrong location type 7
PcDesc(pc=0x00007f03f91a80b4 offset=2574 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a80b9 offset=2579 bits=0):   jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a80c4 offset=2584 bits=0):   jdk.incubator.vector.IntVector::fromArray@50 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: empty
    - @3: empty
    - @4: NULL
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a80d8 offset=2598 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a80dd offset=259d bits=0):   App::micro_vector_masked@169 (line 53)
PcDesc(pc=0x00007f03f91a80f8 offset=25b8 bits=1):   jdk.incubator.vector.VectorIntrinsics::roundDown@5 (line 106)  reexecute=true
   Locals
    - l0: stack[60]
    - l1: stack[56]
   Expression stack
    - @0: reg rbp [10],int
   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
   Locals
    - l0: empty
    - l1: empty
   App::micro_vector_masked@65 (line 43)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: 0
PcDesc(pc=0x00007f03f91a810c offset=25cc bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8111 offset=25d1 bits=0):   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a813f offset=25ff bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8148 offset=2608 bits=0):   jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[64]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   Expression stack
    - @0: stack[52]
    - @1: reg rbp [10],int
    - @2: stack[68],narrowoop
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[52]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a815c offset=261c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8161 offset=2621 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a818e offset=264e bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8198 offset=2658 bits=1):   jdk.incubator.vector.VectorMask::fromLong@15 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: 0
    - l2: stack[72],long
    - l3: stack[56],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   Expression stack
    - @0: stack[64]
    - @1: 64
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: stack[48]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a81be offset=267e bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a81c3 offset=2683 bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a81eb offset=26ab bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a81f4 offset=26b4 bits=1):   jdk.incubator.vector.VectorMask::fromLong@40 (line 247)  reexecute=true
   Locals
    - l0: empty
    - l1: 0
    - l2: stack[72],long
    - l3: stack[64],oop
    - l4: stack[60]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   Expression stack
    - @0: reg rbp [10],int
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: stack[56]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8208 offset=26c8 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a820d offset=26cd bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8235 offset=26f5 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8240 offset=2700 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::zero@9 (line 3649)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
PcDesc(pc=0x00007f03f91a8254 offset=2714 bits=0):   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a8259 offset=2719 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8281 offset=2741 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a828c offset=274c bits=0):   jdk.incubator.vector.IntVector$IntSpecies::zero@76 (line 3656)
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
PcDesc(pc=0x00007f03f91a82a0 offset=2760 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a82a5 offset=2765 bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a82b0 offset=2770 bits=0):   jdk.incubator.vector.VectorMask::length@4 (line 154)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: reg rbp [10],oop
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a82c4 offset=2784 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a82ce offset=278e bits=0):   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a82d8 offset=2798 bits=4):   java.lang.invoke.DirectMethodHandle::allocateInstance@12 (line 522)
   Locals
    - l0: empty
    - l1: empty
   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@1
   Locals
    - l0: a 'java/lang/invoke/DirectMethodHandle$Constructor'{0x0000000101c20690}
    - l1: stack[40],oop
    - l2: stack[72]
    - l3: empty
    - l4: empty
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: stack[64],oop
    - @1: stack[80],oop
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a82e5 offset=27a5 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a82ea offset=27aa bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a82ed offset=27ad bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a82f8 offset=27b8 bits=0):   jdk.incubator.vector.AbstractMask::checkIndexByLane@162 (line 242)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: reg rbp [10],oop
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a830c offset=27cc bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8311 offset=27d1 bits=0):   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a834d offset=280d bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8358 offset=2818 bits=1):   jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[80],oop
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[44]
    - l3: stack[64],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[44]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
PcDesc(pc=0x00007f03f91a836c offset=282c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8371 offset=2831 bits=0):   jdk.incubator.vector.IntVector::fromArray@44 (line 2727)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a839c offset=285c bits=1):   jdk.incubator.vector.IntVector$IntSpecies::iota@60 (line 3665)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[104],oop
    - @1: stack[72]
    - @2: stack[76]
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a83b4 offset=2874 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a83b9 offset=2879 bits=0):   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a83ee offset=28ae bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a83f8 offset=28b8 bits=0):   jdk.incubator.vector.Int256Vector$Int256Mask::or@22 (line 652)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: 11
    - @1: a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @2: a 'java/lang/Class'{0x00000001010002b0} = int
    - @3: 8
    - @4: obj[2756]
    - @5: obj[2757]
   jdk.incubator.vector.Int256Vector$Int256Mask::or@2 (line 528)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.AbstractMask::checkIndex0@78 (line 272)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   Locals
    - l0: stack[104],oop
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 2756: jdk.incubator.vector.Int256Vector$Int256Mask stack[160]Wrong location type 7
    - 2757: jdk.incubator.vector.Int256Vector$Int256Mask stack[128]Wrong location type 7
PcDesc(pc=0x00007f03f91a840c offset=28cc bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8411 offset=28d1 bits=0):   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a841c offset=28dc bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8430 offset=28f0 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8435 offset=28f5 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8440 offset=2900 bits=0):   jdk.incubator.vector.Int256Vector::blend@8 (line 375)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: empty
    - @3: reg rbp [10],oop
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8454 offset=2914 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8459 offset=2919 bits=0):   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8486 offset=2946 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8490 offset=2950 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::iota@9 (line 3663)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[80],oop
    - @1: stack[28]
    - @2: stack[44]
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[40]
    - l3: stack[72],oop
    - l4: stack[64],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[72],oop
PcDesc(pc=0x00007f03f91a84a4 offset=2964 bits=0):   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a84a9 offset=2969 bits=0):   jdk.incubator.vector.IntVector::fromArray@64 (line 2728)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a84d3 offset=2993 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a84dc offset=299c bits=0):   jdk.incubator.vector.IntVector$IntSpecies::iota@76 (line 3670)
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[80],oop
    - @1: stack[28]
    - @2: stack[44]
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[40]
    - l3: stack[72],oop
    - l4: stack[64],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[72],oop
PcDesc(pc=0x00007f03f91a84f0 offset=29b0 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a84f5 offset=29b5 bits=0):   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a84fa offset=29ba bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8504 offset=29c4 bits=0):   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],oop
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8518 offset=29d8 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a851d offset=29dd bits=0):   jdk.incubator.vector.IntVector::fromArray@-1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8528 offset=29e8 bits=0):   jdk.incubator.vector.IntVector::fromArray@50 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: empty
    - @3: empty
    - @4: NULL
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a853c offset=29fc bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8541 offset=2a01 bits=0):   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a855f offset=2a1f bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8568 offset=2a28 bits=0):   jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[48]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
   Expression stack
    - @0: stack[36]
    - @1: reg rbp [10],int
    - @2: stack[52],narrowoop
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: stack[36]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a857c offset=2a3c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8581 offset=2a41 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a85a9 offset=2a69 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a85b4 offset=2a74 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::zero@60 (line 3651)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
PcDesc(pc=0x00007f03f91a85e0 offset=2aa0 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a85ea offset=2aaa bits=0):   jdk.incubator.vector.IntVector::compareTemplate@55 (line 1755)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a85f8 offset=2ab8 bits=5):   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[36]
    - l2: stack[168]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[1633]
    - @1: stack[64],oop
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[40],oop
    - l1: stack[56],oop
    - l2: stack[36]
    - l3: stack[80],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 1633: jdk.incubator.vector.Int256Vector$Int256Mask stack[96]Wrong location type 7
PcDesc(pc=0x00007f03f91a861b offset=2adb bits=0):   jdk.incubator.vector.IntVector::compareTemplate@52 (line 1755)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a8625 offset=2ae5 bits=0):   java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@4
   jdk.incubator.vector.IntVector::lanewiseTemplate@233 (line 634)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91a8630 offset=2af0 bits=5):   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[36]
    - l2: stack[168]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[1673]
    - @1: stack[64],oop
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[40],oop
    - l1: stack[56],oop
    - l2: stack[36]
    - l3: stack[80],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 1673: jdk.incubator.vector.Int256Vector$Int256Mask stack[96]Wrong location type 7
PcDesc(pc=0x00007f03f91a863a offset=2afa bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a863f offset=2aff bits=0):   jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8660 offset=2b20 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::zero@9 (line 3649)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
PcDesc(pc=0x00007f03f91a8674 offset=2b34 bits=0):   java.util.Objects::checkIndex@3 (line 359)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a8679 offset=2b39 bits=0):   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a8692 offset=2b52 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a869c offset=2b5c bits=0):   jdk.incubator.vector.IntVector$IntSpecies::zero@76 (line 3656)
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
PcDesc(pc=0x00007f03f91a86b0 offset=2b70 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a86b5 offset=2b75 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a86c0 offset=2b80 bits=0):   jdk.incubator.vector.VectorMask::length@4 (line 154)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: reg rbp [10],oop
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a86d4 offset=2b94 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a86d9 offset=2b99 bits=0):   jdk.incubator.vector.IntVector::fromArray@0 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a86e4 offset=2ba4 bits=1):   jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a86f8 offset=2bb8 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a86fd offset=2bbd bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8708 offset=2bc8 bits=0):   jdk.incubator.vector.AbstractMask::checkIndexByLane@162 (line 242)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: reg rbp [10],oop
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a871c offset=2bdc bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8721 offset=2be1 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a874b offset=2c0b bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8754 offset=2c14 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::iota@60 (line 3665)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[80],oop
    - @1: stack[28]
    - @2: stack[44]
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[40]
    - l3: stack[72],oop
    - l4: stack[64],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[72],oop
PcDesc(pc=0x00007f03f91a876c offset=2c2c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8771 offset=2c31 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a878f offset=2c4f bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8798 offset=2c58 bits=0):   jdk.incubator.vector.Int256Vector$Int256Mask::or@22 (line 652)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: 11
    - @1: a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @2: a 'java/lang/Class'{0x00000001010002b0} = int
    - @3: 8
    - @4: obj[2048]
    - @5: obj[2049]
   jdk.incubator.vector.Int256Vector$Int256Mask::or@2 (line 528)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.AbstractMask::checkIndex0@78 (line 272)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   Locals
    - l0: stack[88],oop
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 2048: jdk.incubator.vector.Int256Vector$Int256Mask stack[128]Wrong location type 7
    - 2049: jdk.incubator.vector.Int256Vector$Int256Mask stack[96]Wrong location type 7
PcDesc(pc=0x00007f03f91a87ac offset=2c6c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a87b1 offset=2c71 bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a87bc offset=2c7c bits=0):   App::micro_vector_masked@188 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
    - @1: reg rbp [10],oop
    - @2: stack[80],oop
PcDesc(pc=0x00007f03f91a87d0 offset=2c90 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a87d5 offset=2c95 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a87df offset=2c9f bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a87e8 offset=2ca8 bits=0):   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[72]
    - @1: stack[28]
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
   Locals
    - l0: stack[32],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
   jdk.incubator.vector.IntVector::intoArray@10 (line 3001)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a87fc offset=2cbc bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8801 offset=2cc1 bits=0):   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a880c offset=2ccc bits=0):   jdk.incubator.vector.IntVector::intoArray@2 (line 2960)
   Locals
    - l0: stack[40],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
   Expression stack
    - @0: stack[72]
    - @1: stack[40],oop
   jdk.incubator.vector.IntVector::intoArray@10 (line 3001)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8820 offset=2ce0 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8825 offset=2ce5 bits=0):   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a882a offset=2cea bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8834 offset=2cf4 bits=0):   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[72]
    - @1: stack[172]
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
   Locals
    - l0: stack[32],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
   jdk.incubator.vector.IntVector::intoArray@10 (line 3001)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8848 offset=2d08 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a884d offset=2d0d bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8852 offset=2d12 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a885c offset=2d1c bits=0):   jdk.incubator.vector.Int256Vector::blend@8 (line 375)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: empty
    - @3: reg rbp [10],oop
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8870 offset=2d30 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8875 offset=2d35 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a888e offset=2d4e bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8898 offset=2d58 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::zero@60 (line 3651)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
PcDesc(pc=0x00007f03f91a88ac offset=2d6c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a88b1 offset=2d71 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a88c5 offset=2d85 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a88d0 offset=2d90 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::iota@9 (line 3663)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[48],oop
    - @1: stack[72]
    - @2: stack[168]
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[72]
    - l3: stack[64],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a88e4 offset=2da4 bits=0):   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a88e9 offset=2da9 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a88fd offset=2dbd bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8908 offset=2dc8 bits=0):   jdk.incubator.vector.IntVector$IntSpecies::iota@76 (line 3670)
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[48],oop
    - @1: stack[72]
    - @2: stack[168]
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[72]
    - l3: stack[64],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a891c offset=2ddc bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8921 offset=2de1 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8926 offset=2de6 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8930 offset=2df0 bits=0):   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],oop
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8944 offset=2e04 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8949 offset=2e09 bits=0):   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8954 offset=2e14 bits=0):   jdk.incubator.vector.VectorMask::length@4 (line 154)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: reg rbp [10],oop
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8968 offset=2e28 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a896d offset=2e2d bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8978 offset=2e38 bits=1):   jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a898c offset=2e4c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8991 offset=2e51 bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a899c offset=2e5c bits=0):   jdk.incubator.vector.AbstractMask::checkIndexByLane@162 (line 242)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: reg rbp [10],oop
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a89b0 offset=2e70 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a89b5 offset=2e75 bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a89c9 offset=2e89 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a89d4 offset=2e94 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::iota@60 (line 3665)  reexecute=true
   Locals
    - l0: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[48],oop
    - @1: stack[72]
    - @2: stack[168]
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[72]
    - l3: stack[64],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a89ec offset=2eac bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a89f1 offset=2eb1 bits=0):   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91a8a32 offset=2ef2 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8a3c offset=2efc bits=0):   jdk.incubator.vector.Int256Vector$Int256Mask::or@22 (line 652)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: 11
    - @1: a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @2: a 'java/lang/Class'{0x00000001010002b0} = int
    - @3: 8
    - @4: obj[2709]
    - @5: obj[2710]
   jdk.incubator.vector.Int256Vector$Int256Mask::or@2 (line 528)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.AbstractMask::checkIndex0@78 (line 272)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   Locals
    - l0: stack[48],oop
    - l1: stack[28]
    - l2: stack[168]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[28]
    - l3: stack[40],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 2709: jdk.incubator.vector.Int256Vector$Int256Mask stack[96]Wrong location type 7
    - 2710: jdk.incubator.vector.Int256Vector$Int256Mask stack[64]Wrong location type 7
PcDesc(pc=0x00007f03f91a8a50 offset=2f10 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8a55 offset=2f15 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8a5f offset=2f1f bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8a68 offset=2f28 bits=0):   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[24]
    - l3: stack[80],oop
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: empty
    - l6: empty
    - l7: empty
   Expression stack
    - @0: stack[40],oop
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8a7c offset=2f3c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8a81 offset=2f41 bits=0):   java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@4
   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a8a9c offset=2f5c bits=1):   jdk.incubator.vector.IntVector::stOp@23 (line 353)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[32]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[40],oop
    - l6: reg rbp [10],oop
    - l7: 0
   Expression stack
    - @0: 0
    - @1: stack[36]
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8ac6 offset=2f86 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8ad0 offset=2f90 bits=1):   jdk.incubator.vector.IntVector::stOp@23 (line 353)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[32]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[40],oop
    - l6: reg rbp [10],oop
    - l7: 0
   Expression stack
    - @0: 0
    - @1: stack[36]
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8b5c offset=301c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8b61 offset=3021 bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8b6c offset=302c bits=0):   jdk.incubator.vector.Int256Vector::vec@4 (line 117)
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[36]
    - l3: stack[80],oop
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: empty
    - l6: empty
    - l7: empty
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8b80 offset=3040 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8b85 offset=3045 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8b9c offset=305c bits=0):   jdk.incubator.vector.IntVector::stOp@7 (line 352)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[24]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[32],oop
    - l6: empty
    - l7: empty
   Expression stack
    - @0: stack[80],oop
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8bb0 offset=3070 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8bb5 offset=3075 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8bc9 offset=3089 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8bd4 offset=3094 bits=0):   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@4 (line 569)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[28],narrowoop
   jdk.incubator.vector.IntVector::stOp@10 (line 352)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[24]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[32],oop
    - l6: empty
    - l7: empty
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8be8 offset=30a8 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8bed offset=30ad bits=0):   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@6
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a8bf8 offset=30b8 bits=0):   App::micro_vector_masked@13 (line 36)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
PcDesc(pc=0x00007f03f91a8c28 offset=30e8 bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
   App::micro_vector_masked@52 (line 40)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: stack[32],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8c41 offset=3101 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8c4c offset=310c bits=0):   App::micro_vector_masked@64 (line 43)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: NULL
PcDesc(pc=0x00007f03f91a8c60 offset=3120 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8c65 offset=3125 bits=0):   App::micro_vector_masked@169 (line 53)
PcDesc(pc=0x00007f03f91a8c67 offset=3127 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8c70 offset=3130 bits=0):   App::micro_vector_masked@65 (line 43)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: empty
    - @1: NULL
    - @2: reg rbp [10],int
PcDesc(pc=0x00007f03f91a8c84 offset=3144 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8c89 offset=3149 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8c8e offset=314e bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8c98 offset=3158 bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: stack[64],oop
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8cac offset=316c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8cb1 offset=3171 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8cd9 offset=3199 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8ce4 offset=31a4 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   Locals
    - l0: NULL
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[64],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: NULL
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
PcDesc(pc=0x00007f03f91a8cf8 offset=31b8 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8cfd offset=31bd bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8d08 offset=31c8 bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: empty
    - @1: NULL
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8d1c offset=31dc bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8d21 offset=31e1 bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8d4c offset=320c bits=0):   jdk.incubator.vector.VectorMask::length@4 (line 154)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: NULL
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: stack[104],oop
    - l1: stack[72]
    - l2: stack[76]
    - l3: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e98}
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a8d60 offset=3220 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8d65 offset=3225 bits=0):   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a8d7e offset=323e bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8d88 offset=3248 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   Locals
    - l0: NULL
    - l1: stack[32],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: NULL
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
PcDesc(pc=0x00007f03f91a8d9c offset=325c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8da1 offset=3261 bits=0):   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a8dac offset=326c bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: empty
    - @1: NULL
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8dc0 offset=3280 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8dc5 offset=3285 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8ddc offset=329c bits=0):   jdk.incubator.vector.VectorMask::length@4 (line 154)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: NULL
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: stack[88],oop
    - l1: stack[72]
    - l2: stack[76]
    - l3: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e98}
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91a8df0 offset=32b0 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8df5 offset=32b5 bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8e00 offset=32c0 bits=0):   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
    - @1: stack[56],oop
    - @2: stack[72]
    - @3: stack[64],oop
PcDesc(pc=0x00007f03f91a8e19 offset=32d9 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8e24 offset=32e4 bits=0):   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: empty
    - @3: NULL
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8e38 offset=32f8 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a8e3d offset=32fd bits=0):   jdk.incubator.vector.AbstractSpecies::loopBound@2 (line 203)
   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a8e83 offset=3343 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8e8c offset=334c bits=1):   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[44]
    - l2: stack[60]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[2079]
    - @1: stack[72],oop
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[56]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[44]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 2079: jdk.incubator.vector.Int256Vector$Int256Mask stack[128]Wrong location type 7
PcDesc(pc=0x00007f03f91a8ea0 offset=3360 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8ea5 offset=3365 bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8ebc offset=337c bits=0):   jdk.incubator.vector.VectorMask::length@4 (line 154)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: NULL
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: stack[64],oop
    - l1: stack[72]
    - l2: stack[168]
    - l3: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e98}
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8ed0 offset=3390 bits=0):   App::micro_vector_masked@64 (line 43)
PcDesc(pc=0x00007f03f91a8ed5 offset=3395 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91a8efd offset=33bd bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8f08 offset=33c8 bits=1):   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[28]
    - l2: stack[44]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[2005]
    - @1: stack[88],oop
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[40]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 2005: jdk.incubator.vector.Int256Vector$Int256Mask stack[128]Wrong location type 7
PcDesc(pc=0x00007f03f91a8f1c offset=33dc bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8f21 offset=33e1 bits=0):   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8f2b offset=33eb bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8f34 offset=33f4 bits=0):   jdk.incubator.vector.Int256Vector::vec@4 (line 117)
   Locals
    - l0: empty
   Expression stack
    - @0: NULL
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[24]
    - l3: stack[80],oop
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: empty
    - l6: empty
    - l7: empty
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8f48 offset=3408 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a8f4d offset=340d bits=0):   jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
   App::micro_vector_masked@177 (line 53)
PcDesc(pc=0x00007f03f91a8f64 offset=3424 bits=0):   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@4 (line 569)
   Locals
    - l0: empty
   Expression stack
    - @0: NULL
   jdk.incubator.vector.IntVector::stOp@10 (line 352)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[24]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[32],oop
    - l6: empty
    - l7: empty
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91a8f78 offset=3438 bits=0):   App::micro_vector_masked@70 (line 43)
PcDesc(pc=0x00007f03f91a8f7d offset=343d bits=0):   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a8f85 offset=3445 bits=0):   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a8f8a offset=344a bits=0):   App::micro_vector_masked@70 (line 43)
PcDesc(pc=0x00007f03f91a8f94 offset=3454 bits=0):   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a8f99 offset=3459 bits=0):   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@42 (line 74)
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a8fa5 offset=3465 bits=0):   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@37 (line 74)
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a8fbe offset=347e bits=0):   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a8fc4 offset=3484 bits=0):   App::micro_vector_masked@70 (line 43)
PcDesc(pc=0x00007f03f91a8fc9 offset=3489 bits=0):   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@42 (line 74)
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a8fd9 offset=3499 bits=0):   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a8fe7 offset=34a7 bits=0):   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a8fe9 offset=34a9 bits=0):   App::micro_vector_masked@70 (line 43)
PcDesc(pc=0x00007f03f91a8ff0 offset=34b0 bits=0):   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a8ff2 offset=34b2 bits=0):   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@41 (line 74)
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a8ffc offset=34bc bits=0):   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a8ffe offset=34be bits=0):   App::micro_vector_masked@70 (line 43)
PcDesc(pc=0x00007f03f91a9002 offset=34c2 bits=0):   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@41 (line 74)
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a9009 offset=34c9 bits=0):   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91a900b offset=34cb bits=0):   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@42 (line 74)
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a9010 offset=34d0 bits=0):   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91a9013 offset=34d3 bits=0):   App::micro_vector_masked@33 (line 38)
PcDesc(pc=0x00007f03f91a901e offset=34de bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a9023 offset=34e3 bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91a9028 offset=34e8 bits=0):   App::micro_vector_masked@-1 (line 32)
PcDesc(pc=0x00007f03f91a9055 offset=3515 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a9060 offset=3520 bits=1):   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[28]
    - l2: stack[168]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[1941]
    - @1: stack[56],oop
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[28]
    - l3: stack[40],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 1941: jdk.incubator.vector.Int256Vector$Int256Mask stack[96]Wrong location type 7
PcDesc(pc=0x00007f03f91a9074 offset=3534 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91a9141 offset=3601 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 136 OopMaps

ImmutableOopMap {r10=NarrowOop r11=Oop rbx=Oop rsi=Oop [40]=Oop [48]=Oop [56]=Oop } pc offsets: 471 
ImmutableOopMap {rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [48]=Oop [56]=Oop [72]=Oop } pc offsets: 584 
ImmutableOopMap {[24]=Oop [40]=Oop [48]=Oop [56]=Oop } pc offsets: 692 
ImmutableOopMap {r9=Oop r13=Oop r14=Oop [24]=Oop [56]=Oop } pc offsets: 989 
ImmutableOopMap {r9=Oop rax=Oop r13=Oop r14=Oop [24]=Oop [56]=Oop } pc offsets: 1618 
ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop } pc offsets: 1956 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop [80]=Oop } pc offsets: 2332 
ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [80]=Oop } pc offsets: 2912 
ImmutableOopMap {rbp=Oop [32]=Oop [56]=Oop [80]=Oop [160]=Oop } pc offsets: 3200 
ImmutableOopMap {[56]=Oop [80]=Oop [160]=Oop } pc offsets: 3776 
ImmutableOopMap {[56]=Oop [64]=Oop [80]=Oop [160]=Oop } pc offsets: 3848 
ImmutableOopMap {[56]=Oop [64]=Oop [80]=Oop } pc offsets: 3884 
ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop } pc offsets: 3916 
ImmutableOopMap {rbp=Oop [32]=Oop [56]=Oop [80]=Oop [160]=Oop } pc offsets: 4096 
ImmutableOopMap {rbp=Oop [32]=Oop [64]=Oop [72]=Oop [80]=Oop [160]=Oop } pc offsets: 4312 
ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop } pc offsets: 4380 
ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop [160]=Oop } pc offsets: 4852 
ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [160]=Oop } pc offsets: 4876 4908 
ImmutableOopMap {[40]=Oop [48]=Oop [56]=Oop [64]=Oop [160]=Oop } pc offsets: 4992 
ImmutableOopMap {rbp=Oop [32]=Oop [48]=Oop [64]=Oop [72]=Oop [160]=Oop } pc offsets: 5044 
ImmutableOopMap {rbp=Oop [32]=Oop [64]=Oop [72]=Oop [80]=Oop [160]=Oop } pc offsets: 5132 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop [80]=Oop } pc offsets: 5220 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop } pc offsets: 5444 
ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [104]=Oop } pc offsets: 5508 
ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop } pc offsets: 5968 
ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [104]=Oop } pc offsets: 5996 
ImmutableOopMap {[24]=Oop [40]=Oop [48]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [104]=Oop } pc offsets: 6040 
ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop } pc offsets: 6124 
ImmutableOopMap {} pc offsets: 6148 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop } pc offsets: 6240 
ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop } pc offsets: 6352 
ImmutableOopMap {rbp=Oop [32]=Oop [48]=Oop [64]=Oop } pc offsets: 6528 
ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop } pc offsets: 6600 
ImmutableOopMap {[40]=Oop [56]=Oop [80]=Oop } pc offsets: 7064 
ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [80]=Oop } pc offsets: 7092 
ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [80]=Oop } pc offsets: 7128 
ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop [80]=Oop } pc offsets: 7212 
ImmutableOopMap {[32]=Oop [48]=Oop [56]=Oop [80]=Oop } pc offsets: 7260 
ImmutableOopMap {rbp=Oop [32]=Oop [48]=Oop [64]=Oop } pc offsets: 7328 
ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [56]=Oop [68]=NarrowOop } pc offsets: 7388 
ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [72]=Oop } pc offsets: 7484 
ImmutableOopMap {r9=Oop rdx=Oop rbp=Oop } pc offsets: 8082 
ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [104]=Oop } pc offsets: 8248 
ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [104]=Oop } pc offsets: 8292 
ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [80]=Oop } pc offsets: 8332 
ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop } pc offsets: 8376 
ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [64]=Oop } pc offsets: 8432 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [56]=Oop [64]=Oop } pc offsets: 8512 
ImmutableOopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop } pc offsets: 8576 
ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop } pc offsets: 8624 
ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop } pc offsets: 8664 
ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop } pc offsets: 8720 
ImmutableOopMap {rbp=Oop [32]=Oop [40]=Oop [48]=NarrowOop [56]=Oop } pc offsets: 8780 
ImmutableOopMap {rbp=NarrowOop } pc offsets: 8816 
ImmutableOopMap {rbp=Oop } pc offsets: 8852 
ImmutableOopMap {rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [48]=Oop } pc offsets: 8900 
ImmutableOopMap {rbp=Oop } pc offsets: 8936 
ImmutableOopMap {rbp=NarrowOop } pc offsets: 8972 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop } pc offsets: 9048 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop [64]=Oop } pc offsets: 9176 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop } pc offsets: 9300 9368 
ImmutableOopMap {rbp=Oop } pc offsets: 9404 
ImmutableOopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop } pc offsets: 9476 
ImmutableOopMap {rbp=Oop [56]=Oop [80]=Oop [160]=Oop } pc offsets: 9536 
ImmutableOopMap {rbp=Oop [24]=Oop [56]=Oop [80]=Oop [160]=Oop } pc offsets: 9580 
ImmutableOopMap {} pc offsets: 9604 
ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop } pc offsets: 9656 
ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [56]=Oop [68]=NarrowOop [80]=Oop [88]=Oop } pc offsets: 9736 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop } pc offsets: 9816 
ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [64]=Oop } pc offsets: 9908 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop [80]=Oop } pc offsets: 9984 10060 
ImmutableOopMap {rbp=Oop } pc offsets: 10096 
ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop [160]=Oop } pc offsets: 10136 
ImmutableOopMap {rbp=Oop } pc offsets: 10168 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop [80]=Oop [88]=Oop } pc offsets: 10264 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop } pc offsets: 10332 10424 
ImmutableOopMap {rbp=NarrowOop } pc offsets: 10460 
ImmutableOopMap {rbp=Oop } pc offsets: 10496 
ImmutableOopMap {rbp=Oop [32]=Oop [64]=Oop [72]=Oop [80]=Oop [160]=Oop } pc offsets: 10576 10652 
ImmutableOopMap {rbp=Oop } pc offsets: 10692 
ImmutableOopMap {} pc offsets: 10728 
ImmutableOopMap {[24]=Oop [40]=Oop [52]=NarrowOop [64]=Oop [80]=Oop [160]=Oop } pc offsets: 10792 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop [80]=Oop } pc offsets: 10868 
ImmutableOopMap {[40]=Oop [56]=Oop [64]=Oop [80]=Oop } pc offsets: 10936 
ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop } pc offsets: 10992 
ImmutableOopMap {rbp=Oop [32]=Oop [56]=Oop [80]=Oop [160]=Oop } pc offsets: 11040 11100 
ImmutableOopMap {rbp=Oop } pc offsets: 11136 
ImmutableOopMap {} pc offsets: 11172 
ImmutableOopMap {rbp=Oop } pc offsets: 11208 
ImmutableOopMap {rbp=Oop [32]=Oop [64]=Oop [72]=Oop [80]=Oop [160]=Oop } pc offsets: 11284 
ImmutableOopMap {rbp=Oop [32]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop } pc offsets: 11352 
ImmutableOopMap {rbp=Oop [80]=Oop } pc offsets: 11388 
ImmutableOopMap {[32]=Oop [56]=Oop } pc offsets: 11432 
ImmutableOopMap {[40]=Oop [56]=Oop } pc offsets: 11468 
ImmutableOopMap {[32]=Oop [56]=Oop } pc offsets: 11508 
ImmutableOopMap {rbp=Oop } pc offsets: 11548 
ImmutableOopMap {rbp=Oop [32]=Oop [56]=Oop [80]=Oop [160]=Oop } pc offsets: 11608 
ImmutableOopMap {rbp=Oop [32]=Oop [48]=Oop [64]=Oop } pc offsets: 11664 11720 
ImmutableOopMap {rbp=Oop } pc offsets: 11760 11796 
ImmutableOopMap {} pc offsets: 11832 
ImmutableOopMap {rbp=Oop } pc offsets: 11868 
ImmutableOopMap {rbp=Oop [32]=Oop [48]=Oop [64]=Oop } pc offsets: 11924 
ImmutableOopMap {rbp=Oop [32]=Oop [40]=Oop [48]=Oop } pc offsets: 12028 
ImmutableOopMap {[40]=Oop [56]=Oop [80]=Oop } pc offsets: 12072 
ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop } pc offsets: 12124 12176 
ImmutableOopMap {rbp=NarrowOop [56]=Oop [80]=Oop } pc offsets: 12332 
ImmutableOopMap {[32]=Oop [56]=Oop [80]=Oop } pc offsets: 12380 
ImmutableOopMap {[28]=NarrowOop [32]=Oop [56]=Oop } pc offsets: 12436 
ImmutableOopMap {} pc offsets: 12472 
ImmutableOopMap {rbp=Oop [32]=Oop [48]=Oop [56]=Oop } pc offsets: 12520 
ImmutableOopMap {} pc offsets: 12556 12592 
ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop } pc offsets: 12632 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop } pc offsets: 12708 
ImmutableOopMap {} pc offsets: 12744 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop [104]=Oop } pc offsets: 12812 
ImmutableOopMap {rbp=Oop [32]=Oop [56]=Oop [80]=Oop [160]=Oop } pc offsets: 12872 
ImmutableOopMap {} pc offsets: 12908 
ImmutableOopMap {rbp=Oop [32]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop } pc offsets: 12956 
ImmutableOopMap {[56]=Oop [64]=Oop } pc offsets: 12992 
ImmutableOopMap {} pc offsets: 13028 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [72]=Oop [80]=Oop [88]=Oop } pc offsets: 13132 
ImmutableOopMap {rbp=Oop [32]=Oop [64]=Oop [80]=Oop } pc offsets: 13180 
ImmutableOopMap {rbp=Oop [32]=Oop [64]=Oop [80]=Oop [88]=Oop [160]=Oop } pc offsets: 13256 
ImmutableOopMap {[56]=Oop [80]=Oop } pc offsets: 13300 
ImmutableOopMap {[32]=Oop [56]=Oop } pc offsets: 13348 
ImmutableOopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop } pc offsets: 13600 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007f03f91a5b81 offset=41):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5b81 offset=41):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5b81 offset=41):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5b81 offset=41):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5b81 offset=41):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5b85 offset=45):
   jdk.incubator.vector.IntVector::fromArray0Template@1 (line 3208)
ScopeDesc(pc=0x00007f03f91a5b85 offset=45):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91a5b85 offset=45):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91a5b85 offset=45):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a5b90 offset=50):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5b90 offset=50):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5b90 offset=50):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5b90 offset=50):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5b90 offset=50):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5b9a offset=5a):
   jdk.incubator.vector.VectorOperators$OperatorImpl::opCode@26 (line 775)
ScopeDesc(pc=0x00007f03f91a5b9a offset=5a):
   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
ScopeDesc(pc=0x00007f03f91a5b9a offset=5a):
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
ScopeDesc(pc=0x00007f03f91a5b9a offset=5a):
   jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
ScopeDesc(pc=0x00007f03f91a5b9a offset=5a):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
ScopeDesc(pc=0x00007f03f91a5b9a offset=5a):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a5b9a offset=5a):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a5b9a offset=5a):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a5b9d offset=5d):
   jdk.incubator.vector.AbstractSpecies::dummyVector@1 (line 295)
ScopeDesc(pc=0x00007f03f91a5b9d offset=5d):
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
ScopeDesc(pc=0x00007f03f91a5b9d offset=5d):
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
ScopeDesc(pc=0x00007f03f91a5b9d offset=5d):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a5bac offset=6c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5bac offset=6c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5bac offset=6c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5bac offset=6c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5bac offset=6c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5baf offset=6f):
   jdk.incubator.vector.IntVector::lanewiseTemplate@247 (line 633)
ScopeDesc(pc=0x00007f03f91a5baf offset=6f):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
ScopeDesc(pc=0x00007f03f91a5baf offset=6f):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a5baf offset=6f):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a5baf offset=6f):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a5bbb offset=7b):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a5bc2 offset=82):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5bc2 offset=82):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5bc2 offset=82):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5bc2 offset=82):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5bc2 offset=82):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5bd3 offset=93):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a5be7 offset=a7):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5be7 offset=a7):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5be7 offset=a7):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5be7 offset=a7):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5be7 offset=a7):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5bed offset=ad):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a5c5b offset=11b):
   java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@4
ScopeDesc(pc=0x00007f03f91a5c5b offset=11b):
   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
ScopeDesc(pc=0x00007f03f91a5c5b offset=11b):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a5c5d offset=11d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5c5d offset=11d):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5c5d offset=11d):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5c5d offset=11d):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5c5d offset=11d):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5c8f offset=14f):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
ScopeDesc(pc=0x00007f03f91a5c8f offset=14f):
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
ScopeDesc(pc=0x00007f03f91a5c8f offset=14f):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
ScopeDesc(pc=0x00007f03f91a5c8f offset=14f):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91a5cf6 offset=1b6):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5cf6 offset=1b6):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5cf6 offset=1b6):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5cf6 offset=1b6):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5cf6 offset=1b6):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5d00 offset=1c0):
   jdk.incubator.vector.Int256Vector::blend@14 (line 376)
ScopeDesc(pc=0x00007f03f91a5d00 offset=1c0):
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
ScopeDesc(pc=0x00007f03f91a5d00 offset=1c0):
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
ScopeDesc(pc=0x00007f03f91a5d00 offset=1c0):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a5d07 offset=1c7):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5d07 offset=1c7):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5d07 offset=1c7):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5d07 offset=1c7):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5d07 offset=1c7):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5d10 offset=1d0):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a5d17 offset=1d7):
   App::micro_vector_masked@42 (line 37)  reexecute=true
   Locals
    - l0: reg rbx [6],oop
    - l1: stack[56],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: reg r11 [22],oop
    - l8: reg r9 [18],int
    - l9: empty
ScopeDesc(pc=0x00007f03f91a5d2a offset=1ea):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5d2a offset=1ea):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5d2a offset=1ea):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5d2a offset=1ea):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5d2a offset=1ea):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5d32 offset=1f2):
   java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@4
ScopeDesc(pc=0x00007f03f91a5d32 offset=1f2):
   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
ScopeDesc(pc=0x00007f03f91a5d32 offset=1f2):
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
ScopeDesc(pc=0x00007f03f91a5d32 offset=1f2):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
ScopeDesc(pc=0x00007f03f91a5d32 offset=1f2):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91a5d58 offset=218):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5d58 offset=218):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5d58 offset=218):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5d58 offset=218):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5d58 offset=218):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5d6c offset=22c):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a5d6c offset=22c):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a5d6f offset=22f):
   jdk.incubator.vector.IntVector::lanewiseTemplate@222 (line 634)
ScopeDesc(pc=0x00007f03f91a5d6f offset=22f):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
ScopeDesc(pc=0x00007f03f91a5d6f offset=22f):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a5d6f offset=22f):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a5d6f offset=22f):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a5d74 offset=234):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5d74 offset=234):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5d74 offset=234):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5d74 offset=234):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5d74 offset=234):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5d88 offset=248):
   jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
   Locals
    - l0: empty
    - l1: stack[72],oop
    - l2: 0
    - l3: stack[32],oop
    - l4: stack[64]
   Expression stack
    - @0: reg rbp [10],narrowoop
ScopeDesc(pc=0x00007f03f91a5d88 offset=248):
   App::micro_vector_masked@52 (line 40)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a5de9 offset=2a9):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5de9 offset=2a9):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5de9 offset=2a9):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5de9 offset=2a9):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5de9 offset=2a9):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5df4 offset=2b4):
   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a5df4 offset=2b4):
   App::micro_vector_masked@52 (line 40)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a5e2a offset=2ea):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5e2a offset=2ea):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5e2a offset=2ea):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5e2a offset=2ea):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5e2a offset=2ea):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5e2e offset=2ee):
   jdk.incubator.vector.IntVector$IntSpecies::elementType@-1 (line 3476)
ScopeDesc(pc=0x00007f03f91a5e2e offset=2ee):
   jdk.incubator.vector.IntVector::fromArray0Template@10 (line 3210)
ScopeDesc(pc=0x00007f03f91a5e2e offset=2ee):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91a5e2e offset=2ee):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91a5e2e offset=2ee):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a5e47 offset=307):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5e47 offset=307):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5e47 offset=307):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5e47 offset=307):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5e47 offset=307):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5e51 offset=311):
   jdk.incubator.vector.IntVector::fromArray0Template@14 (line 3210)
ScopeDesc(pc=0x00007f03f91a5e51 offset=311):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91a5e51 offset=311):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91a5e51 offset=311):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a5e55 offset=315):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
ScopeDesc(pc=0x00007f03f91a5e55 offset=315):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a5e9f offset=35f):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5e9f offset=35f):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5e9f offset=35f):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5e9f offset=35f):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5e9f offset=35f):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5ea3 offset=363):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91a5ea3 offset=363):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91a5ea3 offset=363):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a5ecd offset=38d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5ecd offset=38d):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5ecd offset=38d):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5ecd offset=38d):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5ecd offset=38d):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5edb offset=39b):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
ScopeDesc(pc=0x00007f03f91a5edb offset=39b):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a5edd offset=39d):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a5ee8 offset=3a8):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
ScopeDesc(pc=0x00007f03f91a5ee8 offset=3a8):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a5eef offset=3af):
   App::micro_vector_masked@64 (line 43)
ScopeDesc(pc=0x00007f03f91a5ef8 offset=3b8):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5ef8 offset=3b8):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5ef8 offset=3b8):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5ef8 offset=3b8):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5ef8 offset=3b8):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5eff offset=3bf):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a5f0d offset=3cd):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5f0d offset=3cd):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5f0d offset=3cd):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5f0d offset=3cd):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5f0d offset=3cd):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5f13 offset=3d3):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a5f1a offset=3da):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5f1a offset=3da):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5f1a offset=3da):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5f1a offset=3da):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5f1a offset=3da):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5f1d offset=3dd):
   App::micro_vector_masked@124 (line 43)  reexecute=true
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: reg r14 [28],oop
    - l3: reg r13 [26],oop
    - l4: reg rdi [14],int
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a5f76 offset=436):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5f76 offset=436):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5f76 offset=436):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5f76 offset=436):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5f76 offset=436):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5f79 offset=439):
   jdk.incubator.vector.IntVector::intoArray@2 (line 2960)
ScopeDesc(pc=0x00007f03f91a5f79 offset=439):
   App::micro_vector_masked@107 (line 46)
ScopeDesc(pc=0x00007f03f91a5f8d offset=44d):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a5f94 offset=454):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5f94 offset=454):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5f94 offset=454):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5f94 offset=454):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5f94 offset=454):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5fa5 offset=465):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a5fac offset=46c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a5fac offset=46c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a5fac offset=46c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a5fac offset=46c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a5fac offset=46c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a5fb2 offset=472):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a601c offset=4dc):
   App::micro_vector_masked@73 (line 44)
ScopeDesc(pc=0x00007f03f91a6053 offset=513):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6053 offset=513):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6053 offset=513):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6053 offset=513):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6053 offset=513):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a605b offset=51b):
   jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
ScopeDesc(pc=0x00007f03f91a605b offset=51b):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a60b9 offset=579):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a60b9 offset=579):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a60b9 offset=579):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a60b9 offset=579):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a60b9 offset=579):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a60be offset=57e):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
ScopeDesc(pc=0x00007f03f91a60be offset=57e):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a60be offset=57e):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a60c3 offset=583):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a60c3 offset=583):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a60c8 offset=588):
   jdk.incubator.vector.IntVector::fromArray@50 (line 2727)
ScopeDesc(pc=0x00007f03f91a60c8 offset=588):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a60cd offset=58d):
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
ScopeDesc(pc=0x00007f03f91a60cd offset=58d):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a60d2 offset=592):
   jdk.incubator.vector.AbstractVector::sameSpecies@5 (line 133)
ScopeDesc(pc=0x00007f03f91a60d2 offset=592):
   jdk.incubator.vector.AbstractVector::check@2 (line 124)
ScopeDesc(pc=0x00007f03f91a60d2 offset=592):
   jdk.incubator.vector.IntVector::lanewiseTemplate@7 (line 602)
ScopeDesc(pc=0x00007f03f91a60d2 offset=592):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
ScopeDesc(pc=0x00007f03f91a60d2 offset=592):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a60d2 offset=592):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a60d2 offset=592):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a610d offset=5cd):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a610d offset=5cd):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a610d offset=5cd):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a610d offset=5cd):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a610d offset=5cd):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6112 offset=5d2):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
ScopeDesc(pc=0x00007f03f91a6112 offset=5d2):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a6112 offset=5d2):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a612d offset=5ed):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a612d offset=5ed):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a612d offset=5ed):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a612d offset=5ed):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a612d offset=5ed):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6132 offset=5f2):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
ScopeDesc(pc=0x00007f03f91a6132 offset=5f2):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a6132 offset=5f2):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a6158 offset=618):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6158 offset=618):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6158 offset=618):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6158 offset=618):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6158 offset=618):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a615e offset=61e):
   jdk.incubator.vector.IntVector$IntSpecies::zero@17 (line 3650)
ScopeDesc(pc=0x00007f03f91a615e offset=61e):
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
ScopeDesc(pc=0x00007f03f91a615e offset=61e):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a616e offset=62e):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a616e offset=62e):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a616e offset=62e):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a616e offset=62e):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a616e offset=62e):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a618b offset=64b):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a6192 offset=652):
   jdk.incubator.vector.VectorMask::fromLong@135 (line 255)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: reg r9 [18],oop
    - l4: empty
    - l5: 0
    - l6: reg rbp [10],long
    - l7: reg rax [0],oop
    - l8: reg r10 [20],int
ScopeDesc(pc=0x00007f03f91a6192 offset=652):
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: reg r14 [28],oop
    - l3: reg r13 [26],oop
    - l4: reg xmm0 [48],int
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a6211 offset=6d1):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6211 offset=6d1):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6211 offset=6d1):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6211 offset=6d1):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6211 offset=6d1):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6214 offset=6d4):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
ScopeDesc(pc=0x00007f03f91a6214 offset=6d4):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a622d offset=6ed):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a622d offset=6ed):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a622d offset=6ed):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a622d offset=6ed):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a622d offset=6ed):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6232 offset=6f2):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
ScopeDesc(pc=0x00007f03f91a6232 offset=6f2):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a6236 offset=6f6):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a6236 offset=6f6):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a62a9 offset=769):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a62a9 offset=769):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a62a9 offset=769):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a62a9 offset=769):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a62a9 offset=769):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a62b3 offset=773):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a62d9 offset=799):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a62d9 offset=799):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a62d9 offset=799):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a62d9 offset=799):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a62d9 offset=799):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a62e4 offset=7a4):
   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a62e4 offset=7a4):
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a62e4 offset=7a4):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x00007f03f91a62e4 offset=7a4):
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: stack[64],oop
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a6306 offset=7c6):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6306 offset=7c6):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6306 offset=7c6):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6306 offset=7c6):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6306 offset=7c6):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a630c offset=7cc):
   App::micro_vector_masked@-1 (line 32)
ScopeDesc(pc=0x00007f03f91a6311 offset=7d1):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6311 offset=7d1):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6311 offset=7d1):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6311 offset=7d1):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6311 offset=7d1):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6315 offset=7d5):
   jdk.incubator.vector.AbstractVector::sameSpecies@52 (line 136)
ScopeDesc(pc=0x00007f03f91a6315 offset=7d5):
   jdk.incubator.vector.AbstractVector::check@2 (line 124)
ScopeDesc(pc=0x00007f03f91a6315 offset=7d5):
   jdk.incubator.vector.IntVector::lanewiseTemplate@7 (line 602)
ScopeDesc(pc=0x00007f03f91a6315 offset=7d5):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
ScopeDesc(pc=0x00007f03f91a6315 offset=7d5):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a6315 offset=7d5):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a6315 offset=7d5):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a632d offset=7ed):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a632d offset=7ed):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a632d offset=7ed):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a632d offset=7ed):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a632d offset=7ed):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6331 offset=7f1):
   jdk.incubator.vector.VectorMask::fromLong@15 (line 242)
ScopeDesc(pc=0x00007f03f91a6331 offset=7f1):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91a633f offset=7ff):
   jdk.incubator.vector.AbstractSpecies::loopBound@-1 (line 203)
ScopeDesc(pc=0x00007f03f91a633f offset=7ff):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a6343 offset=803):
   App::micro_vector_masked@148 (line 51)
ScopeDesc(pc=0x00007f03f91a6347 offset=807):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a634c offset=80c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a634c offset=80c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a634c offset=80c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a634c offset=80c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a634c offset=80c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6351 offset=811):
   jdk.incubator.vector.VectorMask::fromLong@104 (line 255)
ScopeDesc(pc=0x00007f03f91a6351 offset=811):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91a63b8 offset=878):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a63b8 offset=878):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a63b8 offset=878):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a63b8 offset=878):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a63b8 offset=878):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a63bc offset=87c):
   jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
ScopeDesc(pc=0x00007f03f91a63bc offset=87c):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91a6426 offset=8e6):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6426 offset=8e6):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6426 offset=8e6):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6426 offset=8e6):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6426 offset=8e6):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a642b offset=8eb):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a642b offset=8eb):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a6453 offset=913):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6453 offset=913):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6453 offset=913):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6453 offset=913):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6453 offset=913):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a645c offset=91c):
   jdk.incubator.vector.IntVector$IntSpecies::zero@64 (line 3652)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a645c offset=91c):
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a645c offset=91c):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
ScopeDesc(pc=0x00007f03f91a6477 offset=937):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6477 offset=937):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6477 offset=937):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6477 offset=937):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6477 offset=937):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6492 offset=952):
   App::micro_vector_masked@107 (line 46)
ScopeDesc(pc=0x00007f03f91a649c offset=95c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a649c offset=95c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a649c offset=95c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a649c offset=95c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a649c offset=95c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a64b1 offset=971):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a64b8 offset=978):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a64b8 offset=978):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a64b8 offset=978):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a64b8 offset=978):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a64b8 offset=978):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a64be offset=97e):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a650c offset=9cc):
   jdk.incubator.vector.VectorIntrinsics::roundDown@3 (line 106)
ScopeDesc(pc=0x00007f03f91a650c offset=9cc):
   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
ScopeDesc(pc=0x00007f03f91a650c offset=9cc):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a6511 offset=9d1):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6511 offset=9d1):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6511 offset=9d1):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6511 offset=9d1):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6511 offset=9d1):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6515 offset=9d5):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a651c offset=9dc):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a651c offset=9dc):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a651c offset=9dc):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a651c offset=9dc):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a651c offset=9dc):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6523 offset=9e3):
   jdk.incubator.vector.AbstractSpecies::laneCount@0 (line 125)
ScopeDesc(pc=0x00007f03f91a6523 offset=9e3):
   jdk.incubator.vector.VectorMask::fromLong@6 (line 241)
ScopeDesc(pc=0x00007f03f91a6523 offset=9e3):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91a6552 offset=a12):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6552 offset=a12):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6552 offset=a12):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6552 offset=a12):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6552 offset=a12):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6558 offset=a18):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a6567 offset=a27):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6567 offset=a27):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6567 offset=a27):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6567 offset=a27):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6567 offset=a27):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a656d offset=a2d):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a658a offset=a4a):
   App::micro_vector_masked@-1 (line 32)
ScopeDesc(pc=0x00007f03f91a65dc offset=a9c):
   jdk.incubator.vector.AbstractSpecies::dummyVector@6 (line 296)
ScopeDesc(pc=0x00007f03f91a65dc offset=a9c):
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
ScopeDesc(pc=0x00007f03f91a65dc offset=a9c):
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
ScopeDesc(pc=0x00007f03f91a65dc offset=a9c):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a65f7 offset=ab7):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a6607 offset=ac7):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6607 offset=ac7):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6607 offset=ac7):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6607 offset=ac7):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6607 offset=ac7):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a660d offset=acd):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a6632 offset=af2):
   jdk.incubator.vector.VectorMask::fromLong@40 (line 247)
ScopeDesc(pc=0x00007f03f91a6632 offset=af2):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91a6689 offset=b49):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6689 offset=b49):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6689 offset=b49):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6689 offset=b49):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6689 offset=b49):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a668d offset=b4d):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a668d offset=b4d):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a668d offset=b4d):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a6697 offset=b57):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6697 offset=b57):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6697 offset=b57):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6697 offset=b57):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6697 offset=b57):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a66a0 offset=b60):
   jdk.incubator.vector.IntVector::fromArray@64 (line 2728)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a66a0 offset=b60):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a66a8 offset=b68):
   java.util.Objects::checkIndex@3 (line 359)
ScopeDesc(pc=0x00007f03f91a66a8 offset=b68):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91a66a8 offset=b68):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
ScopeDesc(pc=0x00007f03f91a66a8 offset=b68):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a66ad offset=b6d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a66ad offset=b6d):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a66ad offset=b6d):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a66ad offset=b6d):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a66ad offset=b6d):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a66b1 offset=b71):
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
ScopeDesc(pc=0x00007f03f91a66b1 offset=b71):
   jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
ScopeDesc(pc=0x00007f03f91a66b1 offset=b71):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
ScopeDesc(pc=0x00007f03f91a66b1 offset=b71):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a66b1 offset=b71):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a66b1 offset=b71):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a66c7 offset=b87):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a66c7 offset=b87):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a66c7 offset=b87):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a66c7 offset=b87):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a66c7 offset=b87):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a66d4 offset=b94):
   App::micro_vector_masked@64 (line 43)
ScopeDesc(pc=0x00007f03f91a66d9 offset=b99):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a66d9 offset=b99):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a66d9 offset=b99):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a66d9 offset=b99):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a66d9 offset=b99):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a66dd offset=b9d):
   jdk.incubator.vector.AbstractSpecies::laneCount@1 (line 125)
ScopeDesc(pc=0x00007f03f91a66dd offset=b9d):
   jdk.incubator.vector.VectorMask::fromLong@6 (line 241)
ScopeDesc(pc=0x00007f03f91a66dd offset=b9d):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91a66e1 offset=ba1):
   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
ScopeDesc(pc=0x00007f03f91a66e1 offset=ba1):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a672e offset=bee):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a672e offset=bee):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a672e offset=bee):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a672e offset=bee):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a672e offset=bee):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6732 offset=bf2):
   jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
ScopeDesc(pc=0x00007f03f91a6732 offset=bf2):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91a679a offset=c5a):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a679a offset=c5a):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a679a offset=c5a):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a679a offset=c5a):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a679a offset=c5a):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a679f offset=c5f):
   jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
ScopeDesc(pc=0x00007f03f91a679f offset=c5f):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a67c0 offset=c80):
   jdk.incubator.vector.IntVector$IntSpecies::zero@64 (line 3652)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a67c0 offset=c80):
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a67c0 offset=c80):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
ScopeDesc(pc=0x00007f03f91a67e6 offset=ca6):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a67e6 offset=ca6):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a67e6 offset=ca6):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a67e6 offset=ca6):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a67e6 offset=ca6):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6803 offset=cc3):
   jdk.incubator.vector.IntVector::lanewiseTemplate@247 (line 633)
ScopeDesc(pc=0x00007f03f91a6803 offset=cc3):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
ScopeDesc(pc=0x00007f03f91a6803 offset=cc3):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a6803 offset=cc3):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a6803 offset=cc3):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a680d offset=ccd):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a680d offset=ccd):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a680d offset=ccd):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a680d offset=ccd):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a680d offset=ccd):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6822 offset=ce2):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a6829 offset=ce9):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6829 offset=ce9):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6829 offset=ce9):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6829 offset=ce9):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6829 offset=ce9):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a682f offset=cef):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a687d offset=d3d):
   jdk.incubator.vector.AbstractSpecies::loopBound@2 (line 203)
ScopeDesc(pc=0x00007f03f91a687d offset=d3d):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a6882 offset=d42):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6882 offset=d42):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6882 offset=d42):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6882 offset=d42):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6882 offset=d42):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6886 offset=d46):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a688d offset=d4d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a688d offset=d4d):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a688d offset=d4d):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a688d offset=d4d):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a688d offset=d4d):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6894 offset=d54):
   jdk.incubator.vector.VectorMask::fromLong@6 (line 241)
ScopeDesc(pc=0x00007f03f91a6894 offset=d54):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91a68c3 offset=d83):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a68c3 offset=d83):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a68c3 offset=d83):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a68c3 offset=d83):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a68c3 offset=d83):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a68c9 offset=d89):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a68d0 offset=d90):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a68d0 offset=d90):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a68d0 offset=d90):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a68d0 offset=d90):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a68d0 offset=d90):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a68d6 offset=d96):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a68f7 offset=db7):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a6942 offset=e02):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6942 offset=e02):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6942 offset=e02):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6942 offset=e02):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6942 offset=e02):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6946 offset=e06):
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@0 (line 3574)
ScopeDesc(pc=0x00007f03f91a6946 offset=e06):
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
ScopeDesc(pc=0x00007f03f91a6946 offset=e06):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a6959 offset=e19):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a6967 offset=e27):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6967 offset=e27):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6967 offset=e27):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6967 offset=e27):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6967 offset=e27):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a696d offset=e2d):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a6992 offset=e52):
   jdk.incubator.vector.VectorMask::fromLong@40 (line 247)
ScopeDesc(pc=0x00007f03f91a6992 offset=e52):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91a69e0 offset=ea0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a69e0 offset=ea0):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a69e0 offset=ea0):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a69e0 offset=ea0):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a69e0 offset=ea0):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a69e4 offset=ea4):
   jdk.incubator.vector.IntVector::lanewiseTemplate@247 (line 633)
ScopeDesc(pc=0x00007f03f91a69e4 offset=ea4):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
ScopeDesc(pc=0x00007f03f91a69e4 offset=ea4):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a69e4 offset=ea4):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a69e4 offset=ea4):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a69e9 offset=ea9):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a69e9 offset=ea9):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a69e9 offset=ea9):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a69e9 offset=ea9):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a69e9 offset=ea9):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a69ed offset=ead):
   jdk.incubator.vector.Int256Vector::lanewise@-1 (line 41)
ScopeDesc(pc=0x00007f03f91a69ed offset=ead):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a69ed offset=ead):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a69f7 offset=eb7):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a69f7 offset=eb7):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a69f7 offset=eb7):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a69f7 offset=eb7):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a69f7 offset=eb7):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6a00 offset=ec0):
   jdk.incubator.vector.IntVector::fromArray@64 (line 2728)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a6a00 offset=ec0):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a6a14 offset=ed4):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6a14 offset=ed4):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6a14 offset=ed4):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6a14 offset=ed4):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6a14 offset=ed4):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6a1e offset=ede):
   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
ScopeDesc(pc=0x00007f03f91a6a1e offset=ede):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91a6a1e offset=ede):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91a6a1e offset=ede):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a6a33 offset=ef3):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6a33 offset=ef3):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6a33 offset=ef3):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6a33 offset=ef3):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6a33 offset=ef3):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6a48 offset=f08):
   jdk.incubator.vector.IntVector::lanewise@70 (line 688)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: stack[160],oop
ScopeDesc(pc=0x00007f03f91a6a48 offset=f08):
   jdk.incubator.vector.IntVector::add@6 (line 1133)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a6a48 offset=f08):
   App::micro_vector_masked@188 (line 54)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
ScopeDesc(pc=0x00007f03f91a6a58 offset=f18):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6a58 offset=f18):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6a58 offset=f18):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6a58 offset=f18):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6a58 offset=f18):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6a6c offset=f2c):
   jdk.incubator.vector.IntVector::lanewise@74 (line 688)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a6a6c offset=f2c):
   jdk.incubator.vector.IntVector::add@6 (line 1133)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a6a6c offset=f2c):
   App::micro_vector_masked@188 (line 54)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
ScopeDesc(pc=0x00007f03f91a6a79 offset=f39):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6a79 offset=f39):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6a79 offset=f39):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6a79 offset=f39):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6a79 offset=f39):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6a8c offset=f4c):
   jdk.incubator.vector.IntVector::intoArray@1 (line 3000)
   Locals
    - l0: stack[40],oop
    - l1: stack[56],oop
    - l2: stack[72]
    - l3: stack[64],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a6a8c offset=f4c):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a6aa6 offset=f66):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6aa6 offset=f66):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6aa6 offset=f66):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6aa6 offset=f66):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6aa6 offset=f66):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6ab4 offset=f74):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a6ac3 offset=f83):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6ac3 offset=f83):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6ac3 offset=f83):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6ac3 offset=f83):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6ac3 offset=f83):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6ac9 offset=f89):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a6ad7 offset=f97):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6ad7 offset=f97):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6ad7 offset=f97):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6ad7 offset=f97):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6ad7 offset=f97):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6adb offset=f9b):
   App::micro_vector_masked@144 (line 51)
ScopeDesc(pc=0x00007f03f91a6aec offset=fac):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6aec offset=fac):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6aec offset=fac):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6aec offset=fac):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6aec offset=fac):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6af3 offset=fb3):
   App::micro_vector_masked@33 (line 38)
ScopeDesc(pc=0x00007f03f91a6b18 offset=fd8):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6b18 offset=fd8):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6b18 offset=fd8):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6b18 offset=fd8):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6b18 offset=fd8):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6b1d offset=fdd):
   jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
ScopeDesc(pc=0x00007f03f91a6b1d offset=fdd):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a6b36 offset=ff6):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6b36 offset=ff6):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6b36 offset=ff6):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6b36 offset=ff6):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6b36 offset=ff6):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6b40 offset=1000):
   jdk.incubator.vector.IntVector$IntSpecies::zero@72 (line 3654)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a6b40 offset=1000):
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a6b40 offset=1000):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
ScopeDesc(pc=0x00007f03f91a6b63 offset=1023):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6b63 offset=1023):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6b63 offset=1023):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6b63 offset=1023):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6b63 offset=1023):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6b8f offset=104f):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a6bde offset=109e):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6bde offset=109e):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6bde offset=109e):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6bde offset=109e):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6bde offset=109e):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6be3 offset=10a3):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a6c18 offset=10d8):
   jdk.incubator.vector.IntVector$IntSpecies::iota@64 (line 3666)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a6c18 offset=10d8):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[80],oop
    - @1: stack[28]
    - @2: stack[44]
ScopeDesc(pc=0x00007f03f91a6c18 offset=10d8):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[40]
    - l3: stack[72],oop
    - l4: stack[64],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a6c18 offset=10d8):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[72],oop
ScopeDesc(pc=0x00007f03f91a6c32 offset=10f2):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6c32 offset=10f2):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6c32 offset=10f2):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6c32 offset=10f2):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6c32 offset=10f2):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6c5c offset=111c):
   jdk.incubator.vector.AbstractMask::vectorSpecies@1 (line 61)
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a6c5c offset=111c):
   jdk.incubator.vector.VectorMask::length@1 (line 154)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x00007f03f91a6c5c offset=111c):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: stack[88],oop
    - l1: stack[72]
    - l2: stack[76]
    - l3: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e98}
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a6c5c offset=111c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a6c5c offset=111c):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a6c5c offset=111c):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a6c5f offset=111f):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91a6c5f offset=111f):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91a6c5f offset=111f):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a6c83 offset=1143):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6c83 offset=1143):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6c83 offset=1143):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6c83 offset=1143):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6c83 offset=1143):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6c89 offset=1149):
   jdk.incubator.vector.VectorMask::fromLong@35 (line 247)
ScopeDesc(pc=0x00007f03f91a6c89 offset=1149):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91a6c99 offset=1159):
   jdk.incubator.vector.IntVector::fromArray0Template@20 (line 3211)
ScopeDesc(pc=0x00007f03f91a6c99 offset=1159):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91a6c99 offset=1159):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91a6c99 offset=1159):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a6cad offset=116d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6cad offset=116d):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6cad offset=116d):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6cad offset=116d):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6cad offset=116d):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6cb1 offset=1171):
   jdk.incubator.vector.VectorOperators$ImplCache::find@10 (line 1265)
ScopeDesc(pc=0x00007f03f91a6cb1 offset=1171):
   jdk.incubator.vector.IntVector::lanewiseTemplate@238 (line 636)
ScopeDesc(pc=0x00007f03f91a6cb1 offset=1171):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
ScopeDesc(pc=0x00007f03f91a6cb1 offset=1171):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a6cb1 offset=1171):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a6cb1 offset=1171):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a6cb7 offset=1177):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6cb7 offset=1177):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6cb7 offset=1177):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6cb7 offset=1177):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6cb7 offset=1177):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6cbb offset=117b):
   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
ScopeDesc(pc=0x00007f03f91a6cbb offset=117b):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91a6cbb offset=117b):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91a6cbb offset=117b):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a6cc5 offset=1185):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6cc5 offset=1185):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6cc5 offset=1185):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6cc5 offset=1185):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6cc5 offset=1185):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6cd1 offset=1191):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a6cfa offset=11ba):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6cfa offset=11ba):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6cfa offset=11ba):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6cfa offset=11ba):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6cfa offset=11ba):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6cfe offset=11be):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a6d03 offset=11c3):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6d03 offset=11c3):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6d03 offset=11c3):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6d03 offset=11c3):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6d03 offset=11c3):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6d1b offset=11db):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a6d27 offset=11e7):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6d27 offset=11e7):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6d27 offset=11e7):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6d27 offset=11e7):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6d27 offset=11e7):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6d6f offset=122f):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a6d90 offset=1250):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6d90 offset=1250):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6d90 offset=1250):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6d90 offset=1250):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6d90 offset=1250):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6d96 offset=1256):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a6da7 offset=1267):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6da7 offset=1267):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6da7 offset=1267):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6da7 offset=1267):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6da7 offset=1267):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6dce offset=128e):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a6e17 offset=12d7):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6e17 offset=12d7):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6e17 offset=12d7):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6e17 offset=12d7):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6e17 offset=12d7):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6e1b offset=12db):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a6e20 offset=12e0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6e20 offset=12e0):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6e20 offset=12e0):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6e20 offset=12e0):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6e20 offset=12e0):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6e34 offset=12f4):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a6e34 offset=12f4):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a6e34 offset=12f4):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a6e34 offset=12f4):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a6e4c offset=130c):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@147 (line 240)
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: reg rbp [10],oop
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a6e4c offset=130c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a6e4c offset=130c):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a6e4c offset=130c):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a6e57 offset=1317):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6e57 offset=1317):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6e57 offset=1317):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6e57 offset=1317):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6e57 offset=1317):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6e6c offset=132c):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@155 (line 241)
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: reg rbp [10],oop
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a6e6c offset=132c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a6e6c offset=132c):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a6e6c offset=132c):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a6e91 offset=1351):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6e91 offset=1351):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6e91 offset=1351):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6e91 offset=1351):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6e91 offset=1351):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6e9a offset=135a):
   jdk.incubator.vector.VectorOperators$OperatorImpl::opCode@1 (line 774)
ScopeDesc(pc=0x00007f03f91a6e9a offset=135a):
   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
ScopeDesc(pc=0x00007f03f91a6e9a offset=135a):
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
ScopeDesc(pc=0x00007f03f91a6e9a offset=135a):
   jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
ScopeDesc(pc=0x00007f03f91a6e9a offset=135a):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
ScopeDesc(pc=0x00007f03f91a6e9a offset=135a):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a6e9a offset=135a):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a6e9a offset=135a):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a6eb7 offset=1377):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6eb7 offset=1377):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6eb7 offset=1377):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6eb7 offset=1377):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6eb7 offset=1377):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6ec0 offset=1380):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@171 (line 243)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a6ec0 offset=1380):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a6ec0 offset=1380):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[72]
    - l3: stack[48],oop
    - l4: stack[64],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a6ec0 offset=1380):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[48],oop
ScopeDesc(pc=0x00007f03f91a6ec9 offset=1389):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6ec9 offset=1389):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6ec9 offset=1389):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6ec9 offset=1389):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6ec9 offset=1389):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6ece offset=138e):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a6ece offset=138e):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a6ef4 offset=13b4):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[72],oop
ScopeDesc(pc=0x00007f03f91a6ef4 offset=13b4):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a6ef4 offset=13b4):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[28]
    - l3: stack[48],oop
    - l4: stack[64],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a6ef4 offset=13b4):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[48],oop
ScopeDesc(pc=0x00007f03f91a6f14 offset=13d4):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6f14 offset=13d4):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6f14 offset=13d4):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6f14 offset=13d4):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6f14 offset=13d4):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6f19 offset=13d9):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a6f19 offset=13d9):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a6f43 offset=1403):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6f43 offset=1403):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6f43 offset=1403):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6f43 offset=1403):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6f43 offset=1403):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6f4c offset=140c):
   jdk.incubator.vector.IntVector$IntSpecies::iota@72 (line 3668)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a6f4c offset=140c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[80],oop
    - @1: stack[28]
    - @2: stack[44]
ScopeDesc(pc=0x00007f03f91a6f4c offset=140c):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[40]
    - l3: stack[72],oop
    - l4: stack[64],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a6f4c offset=140c):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[72],oop
ScopeDesc(pc=0x00007f03f91a6f6d offset=142d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6f6d offset=142d):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6f6d offset=142d):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6f6d offset=142d):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6f6d offset=142d):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6f72 offset=1432):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a6f72 offset=1432):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a6f9a offset=145a):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6f9a offset=145a):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6f9a offset=145a):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6f9a offset=145a):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6f9a offset=145a):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6fa4 offset=1464):
   jdk.incubator.vector.IntVector$IntSpecies::zero@72 (line 3654)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a6fa4 offset=1464):
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a6fa4 offset=1464):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
ScopeDesc(pc=0x00007f03f91a6fc3 offset=1483):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6fc3 offset=1483):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6fc3 offset=1483):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6fc3 offset=1483):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6fc3 offset=1483):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6fc9 offset=1489):
   java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@-1
ScopeDesc(pc=0x00007f03f91a6fc9 offset=1489):
   jdk.incubator.vector.IntVector::fromArray0Template@26 (line 3211)
ScopeDesc(pc=0x00007f03f91a6fc9 offset=1489):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91a6fc9 offset=1489):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91a6fc9 offset=1489):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a6fdb offset=149b):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6fdb offset=149b):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6fdb offset=149b):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6fdb offset=149b):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6fdb offset=149b):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6fe9 offset=14a9):
   jdk.incubator.vector.AbstractSpecies::loopBound@2 (line 203)
ScopeDesc(pc=0x00007f03f91a6fe9 offset=14a9):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a6ff3 offset=14b3):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a6ff3 offset=14b3):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a6ff3 offset=14b3):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a6ff3 offset=14b3):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a6ff3 offset=14b3):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a6ff7 offset=14b7):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a7054 offset=1514):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7054 offset=1514):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7054 offset=1514):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7054 offset=1514):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7054 offset=1514):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7059 offset=1519):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a7084 offset=1544):
   jdk.incubator.vector.IntVector$IntSpecies::iota@64 (line 3666)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a7084 offset=1544):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[104],oop
    - @1: stack[72]
    - @2: stack[76]
ScopeDesc(pc=0x00007f03f91a7084 offset=1544):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a7084 offset=1544):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a70a7 offset=1567):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a70a7 offset=1567):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a70a7 offset=1567):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a70a7 offset=1567):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a70a7 offset=1567):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a70c4 offset=1584):
   jdk.incubator.vector.AbstractMask::vectorSpecies@1 (line 61)
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a70c4 offset=1584):
   jdk.incubator.vector.VectorMask::length@1 (line 154)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x00007f03f91a70c4 offset=1584):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: stack[104],oop
    - l1: stack[72]
    - l2: stack[76]
    - l3: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e98}
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a70c4 offset=1584):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a70c4 offset=1584):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a70c4 offset=1584):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a70e6 offset=15a6):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a70e6 offset=15a6):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a70e6 offset=15a6):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a70e6 offset=15a6):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a70e6 offset=15a6):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a70ec offset=15ac):
   jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
ScopeDesc(pc=0x00007f03f91a70ec offset=15ac):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91a70fc offset=15bc):
   jdk.incubator.vector.AbstractSpecies::dummyVector@1 (line 295)
ScopeDesc(pc=0x00007f03f91a70fc offset=15bc):
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
ScopeDesc(pc=0x00007f03f91a70fc offset=15bc):
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
ScopeDesc(pc=0x00007f03f91a70fc offset=15bc):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a70ff offset=15bf):
   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
ScopeDesc(pc=0x00007f03f91a70ff offset=15bf):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a710f offset=15cf):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a710f offset=15cf):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a710f offset=15cf):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a710f offset=15cf):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a710f offset=15cf):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7113 offset=15d3):
   jdk.incubator.vector.IntVector::intoArray@21 (line 2963)
ScopeDesc(pc=0x00007f03f91a7113 offset=15d3):
   App::micro_vector_masked@107 (line 46)
ScopeDesc(pc=0x00007f03f91a7119 offset=15d9):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7119 offset=15d9):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7119 offset=15d9):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7119 offset=15d9):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7119 offset=15d9):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a711d offset=15dd):
   jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
ScopeDesc(pc=0x00007f03f91a711d offset=15dd):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
ScopeDesc(pc=0x00007f03f91a711d offset=15dd):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a711d offset=15dd):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a711d offset=15dd):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a7127 offset=15e7):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7127 offset=15e7):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7127 offset=15e7):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7127 offset=15e7):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7127 offset=15e7):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7133 offset=15f3):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91a7133 offset=15f3):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
ScopeDesc(pc=0x00007f03f91a7133 offset=15f3):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a715c offset=161c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a715c offset=161c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a715c offset=161c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a715c offset=161c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a715c offset=161c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7160 offset=1620):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91a7160 offset=1620):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
ScopeDesc(pc=0x00007f03f91a7160 offset=1620):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a7163 offset=1623):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7163 offset=1623):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7163 offset=1623):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7163 offset=1623):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7163 offset=1623):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a717b offset=163b):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a7187 offset=1647):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7187 offset=1647):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7187 offset=1647):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7187 offset=1647):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7187 offset=1647):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a71ce offset=168e):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a71ef offset=16af):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a71ef offset=16af):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a71ef offset=16af):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a71ef offset=16af):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a71ef offset=16af):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a71f4 offset=16b4):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a7207 offset=16c7):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7207 offset=16c7):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7207 offset=16c7):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7207 offset=16c7):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7207 offset=16c7):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a722a offset=16ea):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a7273 offset=1733):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7273 offset=1733):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7273 offset=1733):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7273 offset=1733):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7273 offset=1733):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7277 offset=1737):
   jdk.incubator.vector.IntVector::intoArray@2 (line 2960)
ScopeDesc(pc=0x00007f03f91a7277 offset=1737):
   App::micro_vector_masked@107 (line 46)
ScopeDesc(pc=0x00007f03f91a727c offset=173c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a727c offset=173c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a727c offset=173c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a727c offset=173c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a727c offset=173c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7290 offset=1750):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a7290 offset=1750):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a7290 offset=1750):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a7290 offset=1750):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a7298 offset=1758):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7298 offset=1758):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7298 offset=1758):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7298 offset=1758):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7298 offset=1758):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a72ac offset=176c):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@147 (line 240)
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: stack[104],oop
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a72ac offset=176c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a72ac offset=176c):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a72ac offset=176c):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a72c3 offset=1783):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a72c3 offset=1783):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a72c3 offset=1783):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a72c3 offset=1783):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a72c3 offset=1783):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a72d8 offset=1798):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@155 (line 241)
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: stack[104],oop
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a72d8 offset=1798):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a72d8 offset=1798):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a72d8 offset=1798):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[48],oop
ScopeDesc(pc=0x00007f03f91a7303 offset=17c3):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7303 offset=17c3):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7303 offset=17c3):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7303 offset=17c3):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7303 offset=17c3):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a730c offset=17cc):
   jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
ScopeDesc(pc=0x00007f03f91a730c offset=17cc):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
ScopeDesc(pc=0x00007f03f91a730c offset=17cc):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a730c offset=17cc):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a730c offset=17cc):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a732c offset=17ec):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@171 (line 243)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a732c offset=17ec):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a732c offset=17ec):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: stack[72]
    - l3: reg rbp [10],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a732c offset=17ec):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: reg rbp [10],oop
ScopeDesc(pc=0x00007f03f91a7335 offset=17f5):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7335 offset=17f5):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7335 offset=17f5):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7335 offset=17f5):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7335 offset=17f5):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a733a offset=17fa):
   jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
ScopeDesc(pc=0x00007f03f91a733a offset=17fa):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a7344 offset=1804):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91a7344 offset=1804):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a7344 offset=1804):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a7344 offset=1804):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a736d offset=182d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a736d offset=182d):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a736d offset=182d):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a736d offset=182d):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a736d offset=182d):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7372 offset=1832):
   jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
ScopeDesc(pc=0x00007f03f91a7372 offset=1832):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a7395 offset=1855):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7395 offset=1855):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7395 offset=1855):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7395 offset=1855):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7395 offset=1855):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a73a0 offset=1860):
   jdk.incubator.vector.IntVector$IntSpecies::iota@72 (line 3668)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a73a0 offset=1860):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[104],oop
    - @1: stack[72]
    - @2: stack[76]
ScopeDesc(pc=0x00007f03f91a73a0 offset=1860):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a73a0 offset=1860):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a73fb offset=18bb):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a73fb offset=18bb):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a73fb offset=18bb):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a73fb offset=18bb):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a73fb offset=18bb):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7410 offset=18d0):
   jdk.incubator.vector.IntVector::intoArray@17 (line 3004)
   Locals
    - l0: stack[40],oop
    - l1: stack[56],oop
    - l2: stack[72]
    - l3: stack[64],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a7410 offset=18d0):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a7432 offset=18f2):
   App::micro_vector_masked@-1 (line 32)
ScopeDesc(pc=0x00007f03f91a744d offset=190d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a744d offset=190d):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a744d offset=190d):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a744d offset=190d):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a744d offset=190d):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7451 offset=1911):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a749d offset=195d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a749d offset=195d):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a749d offset=195d):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a749d offset=195d):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a749d offset=195d):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a74a2 offset=1962):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
ScopeDesc(pc=0x00007f03f91a74a2 offset=1962):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a74b6 offset=1976):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a74b6 offset=1976):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a74b6 offset=1976):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a74b6 offset=1976):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a74b6 offset=1976):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a74c0 offset=1980):
   jdk.incubator.vector.IntVector$IntSpecies::iota@64 (line 3666)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a74c0 offset=1980):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[48],oop
    - @1: stack[72]
    - @2: stack[168]
ScopeDesc(pc=0x00007f03f91a74c0 offset=1980):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[72]
    - l3: stack[64],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a74c0 offset=1980):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a74f5 offset=19b5):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a74f5 offset=19b5):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a74f5 offset=19b5):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a74f5 offset=19b5):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a74f5 offset=19b5):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7508 offset=19c8):
   jdk.incubator.vector.AbstractMask::vectorSpecies@1 (line 61)
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a7508 offset=19c8):
   jdk.incubator.vector.VectorMask::length@1 (line 154)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x00007f03f91a7508 offset=19c8):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: stack[64],oop
    - l1: stack[72]
    - l2: stack[168]
    - l3: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e98}
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a7508 offset=19c8):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a7508 offset=19c8):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[40],oop
    - l1: stack[56],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a7508 offset=19c8):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a750b offset=19cb):
   java.util.Objects::checkIndex@3 (line 359)
ScopeDesc(pc=0x00007f03f91a750b offset=19cb):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91a750b offset=19cb):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
ScopeDesc(pc=0x00007f03f91a750b offset=19cb):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a752d offset=19ed):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a752d offset=19ed):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a752d offset=19ed):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a752d offset=19ed):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a752d offset=19ed):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7533 offset=19f3):
   jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
ScopeDesc(pc=0x00007f03f91a7533 offset=19f3):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91a7543 offset=1a03):
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
ScopeDesc(pc=0x00007f03f91a7543 offset=1a03):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a7547 offset=1a07):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a755a offset=1a1a):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a755a offset=1a1a):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a755a offset=1a1a):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a755a offset=1a1a):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a755a offset=1a1a):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a755e offset=1a1e):
   jdk.incubator.vector.IntVector::intoArray@17 (line 2963)
ScopeDesc(pc=0x00007f03f91a755e offset=1a1e):
   App::micro_vector_masked@107 (line 46)
ScopeDesc(pc=0x00007f03f91a7563 offset=1a23):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7563 offset=1a23):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7563 offset=1a23):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7563 offset=1a23):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7563 offset=1a23):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7567 offset=1a27):
   jdk.incubator.vector.VectorOperators::opKind@5 (line 409)
ScopeDesc(pc=0x00007f03f91a7567 offset=1a27):
   jdk.incubator.vector.IntVector::opKind@2 (line 71)
ScopeDesc(pc=0x00007f03f91a7567 offset=1a27):
   jdk.incubator.vector.IntVector::lanewiseTemplate@15 (line 603)
ScopeDesc(pc=0x00007f03f91a7567 offset=1a27):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
ScopeDesc(pc=0x00007f03f91a7567 offset=1a27):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a7567 offset=1a27):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a7567 offset=1a27):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a7570 offset=1a30):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7570 offset=1a30):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7570 offset=1a30):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7570 offset=1a30):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7570 offset=1a30):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a757c offset=1a3c):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
ScopeDesc(pc=0x00007f03f91a757c offset=1a3c):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a75a5 offset=1a65):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a75a5 offset=1a65):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a75a5 offset=1a65):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a75a5 offset=1a65):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a75a5 offset=1a65):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a75a9 offset=1a69):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
ScopeDesc(pc=0x00007f03f91a75a9 offset=1a69):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a75ac offset=1a6c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a75ac offset=1a6c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a75ac offset=1a6c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a75ac offset=1a6c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a75ac offset=1a6c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a75c4 offset=1a84):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a75cb offset=1a8b):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a75cb offset=1a8b):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a75cb offset=1a8b):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a75cb offset=1a8b):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a75cb offset=1a8b):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7613 offset=1ad3):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a7634 offset=1af4):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7634 offset=1af4):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7634 offset=1af4):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7634 offset=1af4):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7634 offset=1af4):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a763a offset=1afa):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a7647 offset=1b07):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7647 offset=1b07):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7647 offset=1b07):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7647 offset=1b07):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7647 offset=1b07):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a764d offset=1b0d):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a76b8 offset=1b78):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a76b8 offset=1b78):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a76b8 offset=1b78):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a76b8 offset=1b78):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a76b8 offset=1b78):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a76bf offset=1b7f):
   jdk.incubator.vector.Int256Vector::length@-1 (line 103)
ScopeDesc(pc=0x00007f03f91a76bf offset=1b7f):
   jdk.incubator.vector.IntVector::intoArray@2 (line 2960)
ScopeDesc(pc=0x00007f03f91a76bf offset=1b7f):
   App::micro_vector_masked@107 (line 46)
ScopeDesc(pc=0x00007f03f91a76c4 offset=1b84):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a76c4 offset=1b84):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a76c4 offset=1b84):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a76c4 offset=1b84):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a76c4 offset=1b84):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a76d8 offset=1b98):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)
   Locals
    - l0: empty
    - l1: stack[36]
    - l2: stack[168]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a76d8 offset=1b98):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a76d8 offset=1b98):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[40],oop
    - l1: stack[56],oop
    - l2: stack[36]
    - l3: stack[80],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a76d8 offset=1b98):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a76e0 offset=1ba0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a76e0 offset=1ba0):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a76e0 offset=1ba0):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a76e0 offset=1ba0):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a76e0 offset=1ba0):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a76f4 offset=1bb4):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@147 (line 240)
   Locals
    - l0: empty
    - l1: stack[36]
    - l2: stack[168]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: stack[24],oop
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a76f4 offset=1bb4):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a76f4 offset=1bb4):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[40],oop
    - l1: stack[56],oop
    - l2: stack[36]
    - l3: stack[80],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a76f4 offset=1bb4):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a76f6 offset=1bb6):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a76f6 offset=1bb6):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a76f6 offset=1bb6):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a76f6 offset=1bb6):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a76f6 offset=1bb6):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7718 offset=1bd8):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@155 (line 241)
   Locals
    - l0: empty
    - l1: stack[36]
    - l2: stack[168]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: stack[24],oop
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a7718 offset=1bd8):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a7718 offset=1bd8):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: stack[36]
    - l3: stack[80],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a7718 offset=1bd8):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a7743 offset=1c03):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7743 offset=1c03):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7743 offset=1c03):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7743 offset=1c03):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7743 offset=1c03):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a774c offset=1c0c):
   jdk.incubator.vector.IntVector::lanewiseTemplate@15 (line 603)
ScopeDesc(pc=0x00007f03f91a774c offset=1c0c):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
ScopeDesc(pc=0x00007f03f91a774c offset=1c0c):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a774c offset=1c0c):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a774c offset=1c0c):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a7762 offset=1c22):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7762 offset=1c22):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7762 offset=1c22):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7762 offset=1c22):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7762 offset=1c22):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a776c offset=1c2c):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@171 (line 243)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a776c offset=1c2c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a776c offset=1c2c):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: stack[36]
    - l3: stack[80],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a776c offset=1c2c):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a7775 offset=1c35):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7775 offset=1c35):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7775 offset=1c35):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7775 offset=1c35):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7775 offset=1c35):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a777a offset=1c3a):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
ScopeDesc(pc=0x00007f03f91a777a offset=1c3a):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a7793 offset=1c53):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7793 offset=1c53):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7793 offset=1c53):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7793 offset=1c53):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7793 offset=1c53):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a779c offset=1c5c):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[48],oop
ScopeDesc(pc=0x00007f03f91a779c offset=1c5c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a779c offset=1c5c):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: stack[56],oop
    - l2: stack[24]
    - l3: stack[80],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a779c offset=1c5c):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a77bd offset=1c7d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a77bd offset=1c7d):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a77bd offset=1c7d):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a77bd offset=1c7d):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a77bd offset=1c7d):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a77c2 offset=1c82):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a77c2 offset=1c82):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a77d6 offset=1c96):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a77d6 offset=1c96):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a77d6 offset=1c96):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a77d6 offset=1c96):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a77d6 offset=1c96):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a77e0 offset=1ca0):
   jdk.incubator.vector.IntVector$IntSpecies::iota@72 (line 3668)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a77e0 offset=1ca0):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[48],oop
    - @1: stack[72]
    - @2: stack[168]
ScopeDesc(pc=0x00007f03f91a77e0 offset=1ca0):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[72]
    - l3: stack[64],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a77e0 offset=1ca0):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a7807 offset=1cc7):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7807 offset=1cc7):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7807 offset=1cc7):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7807 offset=1cc7):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7807 offset=1cc7):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7811 offset=1cd1):
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
ScopeDesc(pc=0x00007f03f91a7811 offset=1cd1):
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
ScopeDesc(pc=0x00007f03f91a7811 offset=1cd1):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a781c offset=1cdc):
   App::micro_vector_masked@18 (line 36)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a7867 offset=1d27):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7867 offset=1d27):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7867 offset=1d27):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7867 offset=1d27):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7867 offset=1d27):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7871 offset=1d31):
   java.lang.Object::<init>@0 (line 44)
ScopeDesc(pc=0x00007f03f91a7871 offset=1d31):
   jdk.incubator.vector.IntVector$$Lambda$63/0x00000008000acb58::<init>@1
ScopeDesc(pc=0x00007f03f91a7871 offset=1d31):
   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@19
ScopeDesc(pc=0x00007f03f91a7871 offset=1d31):
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
ScopeDesc(pc=0x00007f03f91a7871 offset=1d31):
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
ScopeDesc(pc=0x00007f03f91a7871 offset=1d31):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a787c offset=1d3c):
   jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: stack[72],oop
    - l4: empty
    - l5: 0
    - l6: stack[88],long
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x00007f03f91a787c offset=1d3c):
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: stack[84]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a78c6 offset=1d86):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a78c6 offset=1d86):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a78c6 offset=1d86):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a78c6 offset=1d86):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a78c6 offset=1d86):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a78d1 offset=1d91):
   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
ScopeDesc(pc=0x00007f03f91a78d1 offset=1d91):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a78d5 offset=1d95):
   jdk.incubator.vector.IntVector::lanewiseTemplate@207 (line 632)
ScopeDesc(pc=0x00007f03f91a78d5 offset=1d95):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
ScopeDesc(pc=0x00007f03f91a78d5 offset=1d95):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a78d5 offset=1d95):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a78d5 offset=1d95):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a78e7 offset=1da7):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a78e7 offset=1da7):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a78e7 offset=1da7):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a78e7 offset=1da7):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a78e7 offset=1da7):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a78f1 offset=1db1):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
ScopeDesc(pc=0x00007f03f91a78f1 offset=1db1):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a7907 offset=1dc7):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7907 offset=1dc7):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7907 offset=1dc7):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7907 offset=1dc7):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7907 offset=1dc7):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7912 offset=1dd2):
   App::micro_vector_masked@116 (line 43)
ScopeDesc(pc=0x00007f03f91a7916 offset=1dd6):
   jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
ScopeDesc(pc=0x00007f03f91a7916 offset=1dd6):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91a7916 offset=1dd6):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91a7916 offset=1dd6):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a7932 offset=1df2):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7932 offset=1df2):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7932 offset=1df2):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7932 offset=1df2):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7932 offset=1df2):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7936 offset=1df6):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a7938 offset=1df8):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7938 offset=1df8):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7938 offset=1df8):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7938 offset=1df8):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7938 offset=1df8):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7942 offset=1e02):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
ScopeDesc(pc=0x00007f03f91a7942 offset=1e02):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a7945 offset=1e05):
   jdk.incubator.vector.IntVector::intoArray@42 (line 2962)
ScopeDesc(pc=0x00007f03f91a7945 offset=1e05):
   App::micro_vector_masked@107 (line 46)
ScopeDesc(pc=0x00007f03f91a7a38 offset=1ef8):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7a38 offset=1ef8):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7a38 offset=1ef8):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7a38 offset=1ef8):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7a38 offset=1ef8):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7a3c offset=1efc):
   jdk.incubator.vector.IntVector::fromArray@8 (line 2689)
ScopeDesc(pc=0x00007f03f91a7a3c offset=1efc):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a7a43 offset=1f03):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7a43 offset=1f03):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7a43 offset=1f03):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7a43 offset=1f03):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7a43 offset=1f03):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7a56 offset=1f16):
   jdk.incubator.vector.IntVector$IntSpecies::iota@17 (line 3664)
ScopeDesc(pc=0x00007f03f91a7a56 offset=1f16):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
ScopeDesc(pc=0x00007f03f91a7a56 offset=1f16):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a7a56 offset=1f16):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7a61 offset=1f21):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7a61 offset=1f21):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7a61 offset=1f21):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7a61 offset=1f21):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7a61 offset=1f21):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7a69 offset=1f29):
   jdk.incubator.vector.IntVector$IntSpecies::iota@64 (line 3666)
ScopeDesc(pc=0x00007f03f91a7a69 offset=1f29):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
ScopeDesc(pc=0x00007f03f91a7a69 offset=1f29):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a7a69 offset=1f29):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7a6e offset=1f2e):
   jdk.incubator.vector.IntVector$IntSpecies::iota@17 (line 3664)
ScopeDesc(pc=0x00007f03f91a7a6e offset=1f2e):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
ScopeDesc(pc=0x00007f03f91a7a6e offset=1f2e):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a7a6e offset=1f2e):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7a77 offset=1f37):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7a77 offset=1f37):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7a77 offset=1f37):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7a77 offset=1f37):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7a77 offset=1f37):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7a7c offset=1f3c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
ScopeDesc(pc=0x00007f03f91a7a7c offset=1f3c):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a7a7c offset=1f3c):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7a87 offset=1f47):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7a87 offset=1f47):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7a87 offset=1f47):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7a87 offset=1f47):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7a87 offset=1f47):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7a8d offset=1f4d):
   jdk.incubator.vector.IntVector$IntSpecies::iota@76 (line 3670)
ScopeDesc(pc=0x00007f03f91a7a8d offset=1f4d):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
ScopeDesc(pc=0x00007f03f91a7a8d offset=1f4d):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a7a8d offset=1f4d):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7a97 offset=1f57):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7a97 offset=1f57):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7a97 offset=1f57):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7a97 offset=1f57):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7a97 offset=1f57):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7a9c offset=1f5c):
   jdk.incubator.vector.IntVector$IntSpecies::iota@68 (line 3667)
ScopeDesc(pc=0x00007f03f91a7a9c offset=1f5c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
ScopeDesc(pc=0x00007f03f91a7a9c offset=1f5c):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a7a9c offset=1f5c):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7aa2 offset=1f62):
   jdk.incubator.vector.AbstractVector::check@2 (line 124)
ScopeDesc(pc=0x00007f03f91a7aa2 offset=1f62):
   jdk.incubator.vector.IntVector::blendTemplate@2 (line 1894)
ScopeDesc(pc=0x00007f03f91a7aa2 offset=1f62):
   jdk.incubator.vector.Int256Vector::blend@11 (line 376)
ScopeDesc(pc=0x00007f03f91a7aa2 offset=1f62):
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
ScopeDesc(pc=0x00007f03f91a7aa2 offset=1f62):
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
ScopeDesc(pc=0x00007f03f91a7aa2 offset=1f62):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7aac offset=1f6c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7aac offset=1f6c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7aac offset=1f6c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7aac offset=1f6c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7aac offset=1f6c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7ab1 offset=1f71):
   jdk.incubator.vector.AbstractVector::sameSpecies@5 (line 133)
ScopeDesc(pc=0x00007f03f91a7ab1 offset=1f71):
   jdk.incubator.vector.AbstractVector::check@2 (line 124)
ScopeDesc(pc=0x00007f03f91a7ab1 offset=1f71):
   jdk.incubator.vector.IntVector::blendTemplate@2 (line 1894)
ScopeDesc(pc=0x00007f03f91a7ab1 offset=1f71):
   jdk.incubator.vector.Int256Vector::blend@11 (line 376)
ScopeDesc(pc=0x00007f03f91a7ab1 offset=1f71):
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
ScopeDesc(pc=0x00007f03f91a7ab1 offset=1f71):
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
ScopeDesc(pc=0x00007f03f91a7ab1 offset=1f71):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7ab7 offset=1f77):
   jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
ScopeDesc(pc=0x00007f03f91a7ab7 offset=1f77):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91a7aba offset=1f7a):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7aba offset=1f7a):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7aba offset=1f7a):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7aba offset=1f7a):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7aba offset=1f7a):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7acb offset=1f8b):
   App::micro_vector_masked@138 (line 51)
ScopeDesc(pc=0x00007f03f91a7ad2 offset=1f92):
   jdk.incubator.vector.IntVector::stOp@53 (line 353)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rdx [4],oop
    - l2: reg rbx [6],int
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: reg r9 [18],oop
    - l6: reg rbp [10],oop
    - l7: reg rdi [14],int
ScopeDesc(pc=0x00007f03f91a7ad2 offset=1f92):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a7ad2 offset=1f92):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a7ae0 offset=1fa0):
   jdk.incubator.vector.IntVector$IntSpecies::iota@17 (line 3664)
ScopeDesc(pc=0x00007f03f91a7ae0 offset=1fa0):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
ScopeDesc(pc=0x00007f03f91a7ae0 offset=1fa0):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a7ae0 offset=1fa0):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7b29 offset=1fe9):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7b29 offset=1fe9):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7b29 offset=1fe9):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7b29 offset=1fe9):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7b29 offset=1fe9):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7b35 offset=1ff5):
   jdk.incubator.vector.IntVector$IntSpecies::zero@17 (line 3650)
ScopeDesc(pc=0x00007f03f91a7b35 offset=1ff5):
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
ScopeDesc(pc=0x00007f03f91a7b35 offset=1ff5):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7b45 offset=2005):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7b45 offset=2005):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7b45 offset=2005):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7b45 offset=2005):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7b45 offset=2005):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7b4a offset=200a):
   jdk.incubator.vector.IntVector$IntSpecies::zero@17 (line 3650)
ScopeDesc(pc=0x00007f03f91a7b4a offset=200a):
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
ScopeDesc(pc=0x00007f03f91a7b4a offset=200a):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7b5e offset=201e):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7b5e offset=201e):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7b5e offset=201e):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7b5e offset=201e):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7b5e offset=201e):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7b68 offset=2028):
   jdk.incubator.vector.AbstractVector::check@5 (line 124)
ScopeDesc(pc=0x00007f03f91a7b68 offset=2028):
   jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
ScopeDesc(pc=0x00007f03f91a7b68 offset=2028):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91a7b68 offset=2028):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91a7b68 offset=2028):
   jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
ScopeDesc(pc=0x00007f03f91a7b68 offset=2028):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91a7b68 offset=2028):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91a7b68 offset=2028):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a7b68 offset=2028):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7b78 offset=2038):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[1173]
    - @1: stack[104],oop
ScopeDesc(pc=0x00007f03f91a7b78 offset=2038):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a7b78 offset=2038):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a7b78 offset=2038):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 1173: jdk.incubator.vector.Int256Vector$Int256Mask stack[128]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a7b92 offset=2052):
   jdk.incubator.vector.AbstractVector::check@-1 (line 124)
ScopeDesc(pc=0x00007f03f91a7b92 offset=2052):
   jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
ScopeDesc(pc=0x00007f03f91a7b92 offset=2052):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91a7b92 offset=2052):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91a7b92 offset=2052):
   jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
ScopeDesc(pc=0x00007f03f91a7b92 offset=2052):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91a7b92 offset=2052):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91a7b92 offset=2052):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a7b92 offset=2052):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7ba4 offset=2064):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[1214]
    - @1: stack[104],oop
ScopeDesc(pc=0x00007f03f91a7ba4 offset=2064):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a7ba4 offset=2064):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a7ba4 offset=2064):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 1214: jdk.incubator.vector.Int256Vector$Int256Mask stack[128]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a7bb5 offset=2075):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7bb5 offset=2075):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7bb5 offset=2075):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7bb5 offset=2075):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7bb5 offset=2075):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7bbf offset=207f):
   jdk.incubator.vector.IntVector$IntSpecies::broadcastBits@21 (line 3504)
ScopeDesc(pc=0x00007f03f91a7bbf offset=207f):
   jdk.incubator.vector.IntVector$IntSpecies::broadcast@6 (line 3519)
ScopeDesc(pc=0x00007f03f91a7bbf offset=207f):
   jdk.incubator.vector.IntVector::broadcastTemplate@5 (line 534)
ScopeDesc(pc=0x00007f03f91a7bbf offset=207f):
   jdk.incubator.vector.Int256Vector::broadcast@2 (line 131)
ScopeDesc(pc=0x00007f03f91a7bbf offset=207f):
   jdk.incubator.vector.Int256Vector::broadcast@2 (line 41)
ScopeDesc(pc=0x00007f03f91a7bbf offset=207f):
   jdk.incubator.vector.AbstractMask::checkIndex0@52 (line 268)
ScopeDesc(pc=0x00007f03f91a7bbf offset=207f):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91a7bbf offset=207f):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91a7bbf offset=207f):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a7bbf offset=207f):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7bcc offset=208c):
   jdk.incubator.vector.IntVector::blendTemplate@26 (line 1895)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000010188b520} = 'jdk/incubator/vector/Int256Vector'
    - @1: a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @2: a 'java/lang/Class'{0x00000001010002b0} = int
    - @3: 8
    - @4: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e58}
    - @5: obj[987]
    - @6: reg rbp [10],oop
    - @7: a 'jdk/incubator/vector/IntVector$$Lambda$64+0x00000008000acfa0'{0x0000000101c25820}
ScopeDesc(pc=0x00007f03f91a7bcc offset=208c):
   jdk.incubator.vector.Int256Vector::blend@11 (line 376)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a7bcc offset=208c):
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a7bcc offset=208c):
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a7bcc offset=208c):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 987: jdk.incubator.vector.Int256Vector stack[128]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a7bdd offset=209d):
   jdk.incubator.vector.IntVector$IntSpecies::broadcast@6 (line 3519)
ScopeDesc(pc=0x00007f03f91a7bdd offset=209d):
   jdk.incubator.vector.IntVector::broadcastTemplate@5 (line 534)
ScopeDesc(pc=0x00007f03f91a7bdd offset=209d):
   jdk.incubator.vector.Int256Vector::broadcast@2 (line 131)
ScopeDesc(pc=0x00007f03f91a7bdd offset=209d):
   jdk.incubator.vector.Int256Vector::broadcast@2 (line 41)
ScopeDesc(pc=0x00007f03f91a7bdd offset=209d):
   jdk.incubator.vector.AbstractMask::checkIndex0@52 (line 268)
ScopeDesc(pc=0x00007f03f91a7bdd offset=209d):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91a7bdd offset=209d):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91a7bdd offset=209d):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a7bdd offset=209d):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7be7 offset=20a7):
   jdk.incubator.vector.IntVector$$Lambda$63/0x00000008000acb58::<init>@1
ScopeDesc(pc=0x00007f03f91a7be7 offset=20a7):
   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@19
ScopeDesc(pc=0x00007f03f91a7be7 offset=20a7):
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
ScopeDesc(pc=0x00007f03f91a7be7 offset=20a7):
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
ScopeDesc(pc=0x00007f03f91a7be7 offset=20a7):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7bf8 offset=20b8):
   jdk.incubator.vector.IntVector::blendTemplate@26 (line 1895)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000010188b520} = 'jdk/incubator/vector/Int256Vector'
    - @1: a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @2: a 'java/lang/Class'{0x00000001010002b0} = int
    - @3: 8
    - @4: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e58}
    - @5: obj[1024]
    - @6: reg rbp [10],oop
    - @7: a 'jdk/incubator/vector/IntVector$$Lambda$64+0x00000008000acfa0'{0x0000000101c25820}
ScopeDesc(pc=0x00007f03f91a7bf8 offset=20b8):
   jdk.incubator.vector.Int256Vector::blend@11 (line 376)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a7bf8 offset=20b8):
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a7bf8 offset=20b8):
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a7bf8 offset=20b8):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 1024: jdk.incubator.vector.Int256Vector stack[128]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a7bfd offset=20bd):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7bfd offset=20bd):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7bfd offset=20bd):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7bfd offset=20bd):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7bfd offset=20bd):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7c02 offset=20c2):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a7c30 offset=20f0):
   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[52]
    - @1: stack[72]
    - @2: NULL
ScopeDesc(pc=0x00007f03f91a7c30 offset=20f0):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a7c30 offset=20f0):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   Locals
    - l0: stack[56],oop
    - l1: stack[64],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007f03f91a7c30 offset=20f0):
   App::micro_vector_masked@80 (line 44)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[64],oop
    - l3: stack[40],oop
    - l4: stack[52]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a7c44 offset=2104):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7c44 offset=2104):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7c44 offset=2104):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7c44 offset=2104):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7c44 offset=2104):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7c49 offset=2109):
   App::micro_vector_masked@64 (line 43)
ScopeDesc(pc=0x00007f03f91a7c76 offset=2136):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7c76 offset=2136):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7c76 offset=2136):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7c76 offset=2136):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7c76 offset=2136):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7c80 offset=2140):
   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[52]
    - @1: stack[72]
    - @2: NULL
ScopeDesc(pc=0x00007f03f91a7c80 offset=2140):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a7c80 offset=2140):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   Locals
    - l0: stack[56],oop
    - l1: stack[64],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007f03f91a7c80 offset=2140):
   App::micro_vector_masked@92 (line 45)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[64],oop
    - l4: stack[52]
    - l5: obj[1989]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 1989: jdk.incubator.vector.Int256Vector stack[96]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a7c94 offset=2154):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7c94 offset=2154):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7c94 offset=2154):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7c94 offset=2154):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7c94 offset=2154):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7c99 offset=2159):
   jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
ScopeDesc(pc=0x00007f03f91a7c99 offset=2159):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91a7c99 offset=2159):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91a7c99 offset=2159):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a7cb6 offset=2176):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7cb6 offset=2176):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7cb6 offset=2176):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7cb6 offset=2176):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7cb6 offset=2176):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7cc0 offset=2180):
   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[52]
    - @1: stack[64]
    - @2: NULL
ScopeDesc(pc=0x00007f03f91a7cc0 offset=2180):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a7cc0 offset=2180):
   jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
   Locals
    - l0: obj[2063]
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007f03f91a7cc0 offset=2180):
   App::micro_vector_masked@107 (line 46)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: stack[52]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 2063: jdk.incubator.vector.Int256Vector stack[96]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a7cde offset=219e):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7cde offset=219e):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7cde offset=219e):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7cde offset=219e):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7cde offset=219e):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7cf0 offset=21b0):
   java.lang.invoke.DirectMethodHandle::allocateInstance@12 (line 522)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x00007f03f91a7cf0 offset=21b0):
   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@1
   Locals
    - l0: a 'java/lang/invoke/DirectMethodHandle$Constructor'{0x0000000101c20690}
    - l1: stack[64],oop
    - l2: stack[72]
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a7cf0 offset=21b0):
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a7cf0 offset=21b0):
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: stack[88],oop
    - @1: stack[80],oop
ScopeDesc(pc=0x00007f03f91a7cf0 offset=21b0):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a7d01 offset=21c1):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7d01 offset=21c1):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7d01 offset=21c1):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7d01 offset=21c1):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7d01 offset=21c1):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7d0b offset=21cb):
   jdk.incubator.vector.IntVector::compareTemplate@41 (line 1756)
ScopeDesc(pc=0x00007f03f91a7d0b offset=21cb):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91a7d0b offset=21cb):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91a7d0b offset=21cb):
   jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
ScopeDesc(pc=0x00007f03f91a7d0b offset=21cb):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91a7d0b offset=21cb):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91a7d0b offset=21cb):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a7d0b offset=21cb):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7d18 offset=21d8):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[1483]
    - @1: stack[88],oop
ScopeDesc(pc=0x00007f03f91a7d18 offset=21d8):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a7d18 offset=21d8):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a7d18 offset=21d8):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 1483: jdk.incubator.vector.Int256Vector$Int256Mask stack[128]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a7d3d offset=21fd):
   jdk.incubator.vector.VectorOperators$OperatorImpl::opCode@1 (line 774)
ScopeDesc(pc=0x00007f03f91a7d3d offset=21fd):
   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
ScopeDesc(pc=0x00007f03f91a7d3d offset=21fd):
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
ScopeDesc(pc=0x00007f03f91a7d3d offset=21fd):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91a7d3d offset=21fd):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91a7d3d offset=21fd):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91a7d3d offset=21fd):
   jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
ScopeDesc(pc=0x00007f03f91a7d3d offset=21fd):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91a7d3d offset=21fd):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91a7d3d offset=21fd):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a7d3d offset=21fd):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7d47 offset=2207):
   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@-1
ScopeDesc(pc=0x00007f03f91a7d47 offset=2207):
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
ScopeDesc(pc=0x00007f03f91a7d47 offset=2207):
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
ScopeDesc(pc=0x00007f03f91a7d47 offset=2207):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7d50 offset=2210):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[1523]
    - @1: stack[88],oop
ScopeDesc(pc=0x00007f03f91a7d50 offset=2210):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a7d50 offset=2210):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a7d50 offset=2210):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 1523: jdk.incubator.vector.Int256Vector$Int256Mask stack[128]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a7d5b offset=221b):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7d5b offset=221b):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7d5b offset=221b):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7d5b offset=221b):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7d5b offset=221b):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7d5e offset=221e):
   App::micro_vector_masked@116 (line 43)
ScopeDesc(pc=0x00007f03f91a7d65 offset=2225):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7d65 offset=2225):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7d65 offset=2225):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7d65 offset=2225):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7d65 offset=2225):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7d68 offset=2228):
   jdk.incubator.vector.AbstractSpecies::length@1 (line 116)
ScopeDesc(pc=0x00007f03f91a7d68 offset=2228):
   App::micro_vector_masked@116 (line 43)
ScopeDesc(pc=0x00007f03f91a7d6d offset=222d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7d6d offset=222d):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7d6d offset=222d):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7d6d offset=222d):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7d6d offset=222d):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7d72 offset=2232):
   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@19
ScopeDesc(pc=0x00007f03f91a7d72 offset=2232):
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
ScopeDesc(pc=0x00007f03f91a7d72 offset=2232):
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
ScopeDesc(pc=0x00007f03f91a7d72 offset=2232):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7d8c offset=224c):
   App::micro_vector_masked@13 (line 36)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[48],narrowoop
ScopeDesc(pc=0x00007f03f91a7da0 offset=2260):
   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
ScopeDesc(pc=0x00007f03f91a7da0 offset=2260):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a7da5 offset=2265):
   App::micro_vector_masked@-1 (line 32)
ScopeDesc(pc=0x00007f03f91a7db0 offset=2270):
   jdk.incubator.vector.VectorMask::fromArray@1 (line 205)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
ScopeDesc(pc=0x00007f03f91a7db0 offset=2270):
   App::micro_vector_masked@52 (line 40)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a7dc4 offset=2284):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7dc4 offset=2284):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7dc4 offset=2284):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7dc4 offset=2284):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7dc4 offset=2284):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7dc9 offset=2289):
   App::micro_vector_masked@-1 (line 32)
ScopeDesc(pc=0x00007f03f91a7dd4 offset=2294):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],oop
ScopeDesc(pc=0x00007f03f91a7dd4 offset=2294):
   App::micro_vector_masked@52 (line 40)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a7de8 offset=22a8):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7de8 offset=22a8):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7de8 offset=22a8):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7de8 offset=22a8):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7de8 offset=22a8):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7ded offset=22ad):
   App::micro_vector_masked@169 (line 53)
ScopeDesc(pc=0x00007f03f91a7dfb offset=22bb):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7dfb offset=22bb):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7dfb offset=22bb):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7dfb offset=22bb):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7dfb offset=22bb):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7e04 offset=22c4):
   App::micro_vector_masked@65 (line 43)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],narrowoop
    - @2: stack[56]
ScopeDesc(pc=0x00007f03f91a7e18 offset=22d8):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7e18 offset=22d8):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7e18 offset=22d8):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7e18 offset=22d8):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7e18 offset=22d8):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7e1d offset=22dd):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a7e1d offset=22dd):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a7e28 offset=22e8):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],oop
ScopeDesc(pc=0x00007f03f91a7e28 offset=22e8):
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a7e28 offset=22e8):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x00007f03f91a7e28 offset=22e8):
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a7e3c offset=22fc):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7e3c offset=22fc):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7e3c offset=22fc):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7e3c offset=22fc):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7e3c offset=22fc):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7e41 offset=2301):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a7e41 offset=2301):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a7e43 offset=2303):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7e43 offset=2303):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7e43 offset=2303):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7e43 offset=2303):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7e43 offset=2303):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7e4c offset=230c):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
ScopeDesc(pc=0x00007f03f91a7e4c offset=230c):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a7e60 offset=2320):
   java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@4
ScopeDesc(pc=0x00007f03f91a7e60 offset=2320):
   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
ScopeDesc(pc=0x00007f03f91a7e60 offset=2320):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a7e65 offset=2325):
   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@19
ScopeDesc(pc=0x00007f03f91a7e65 offset=2325):
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
ScopeDesc(pc=0x00007f03f91a7e65 offset=2325):
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
ScopeDesc(pc=0x00007f03f91a7e65 offset=2325):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a7e8f offset=234f):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7e8f offset=234f):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7e8f offset=234f):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7e8f offset=234f):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7e8f offset=234f):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7e98 offset=2358):
   App::micro_vector_masked@30 (line 37)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: stack[48],oop
    - l8: 0
    - l9: empty
   Expression stack
    - @0: 0
    - @1: stack[56]
ScopeDesc(pc=0x00007f03f91a7ed8 offset=2398):
   App::micro_vector_masked@73 (line 44)
ScopeDesc(pc=0x00007f03f91a7edd offset=239d):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a7edd offset=239d):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a7f0e offset=23ce):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7f0e offset=23ce):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7f0e offset=23ce):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7f0e offset=23ce):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7f0e offset=23ce):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7f18 offset=23d8):
   jdk.incubator.vector.VectorMask::fromLong@104 (line 255)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: stack[56],oop
    - l4: empty
    - l5: 0
    - l6: stack[72],long
    - l7: stack[64],oop
    - l8: 0
   Expression stack
    - @0: 0
    - @1: stack[52]
ScopeDesc(pc=0x00007f03f91a7f18 offset=23d8):
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: stack[48]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a7f64 offset=2424):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7f64 offset=2424):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7f64 offset=2424):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7f64 offset=2424):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7f64 offset=2424):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7f69 offset=2429):
   jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
ScopeDesc(pc=0x00007f03f91a7f69 offset=2429):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a7f94 offset=2454):
   jdk.incubator.vector.IntVector$IntSpecies::iota@9 (line 3663)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a7f94 offset=2454):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[104],oop
    - @1: stack[72]
    - @2: stack[76]
ScopeDesc(pc=0x00007f03f91a7f94 offset=2454):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a7f94 offset=2454):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a7fa8 offset=2468):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
ScopeDesc(pc=0x00007f03f91a7fa8 offset=2468):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a7fad offset=246d):
   jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
ScopeDesc(pc=0x00007f03f91a7fad offset=246d):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a7fd8 offset=2498):
   jdk.incubator.vector.IntVector$IntSpecies::iota@76 (line 3670)
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a7fd8 offset=2498):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[104],oop
    - @1: stack[72]
    - @2: stack[76]
ScopeDesc(pc=0x00007f03f91a7fd8 offset=2498):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a7fd8 offset=2498):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a7fec offset=24ac):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a7fec offset=24ac):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a7fec offset=24ac):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a7fec offset=24ac):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a7fec offset=24ac):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a7ff1 offset=24b1):
   jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
ScopeDesc(pc=0x00007f03f91a7ff1 offset=24b1):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a7ffc offset=24bc):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],oop
ScopeDesc(pc=0x00007f03f91a7ffc offset=24bc):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a7ffc offset=24bc):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8023 offset=24e3):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8023 offset=24e3):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8023 offset=24e3):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8023 offset=24e3):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8023 offset=24e3):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8028 offset=24e8):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8044 offset=2504):
   App::micro_vector_masked@70 (line 43)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: 0
    - @1: stack[48]
ScopeDesc(pc=0x00007f03f91a8068 offset=2528):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8068 offset=2528):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8068 offset=2528):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8068 offset=2528):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8068 offset=2528):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8072 offset=2532):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91a8072 offset=2532):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91a8072 offset=2532):
   jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
ScopeDesc(pc=0x00007f03f91a8072 offset=2532):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91a8072 offset=2532):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91a8072 offset=2532):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a8072 offset=2532):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a8080 offset=2540):
   jdk.incubator.vector.IntVector::blendTemplate@26 (line 1895)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000010188b520} = 'jdk/incubator/vector/Int256Vector'
    - @1: a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @2: a 'java/lang/Class'{0x00000001010002b0} = int
    - @3: 8
    - @4: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e58}
    - @5: obj[1295]
    - @6: reg rbp [10],oop
    - @7: a 'jdk/incubator/vector/IntVector$$Lambda$64+0x00000008000acfa0'{0x0000000101c25820}
ScopeDesc(pc=0x00007f03f91a8080 offset=2540):
   jdk.incubator.vector.Int256Vector::blend@11 (line 376)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a8080 offset=2540):
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a8080 offset=2540):
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a8080 offset=2540):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 1295: jdk.incubator.vector.Int256Vector stack[128]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a8091 offset=2551):
   jdk.incubator.vector.Int256Vector::broadcast@5 (line 131)
ScopeDesc(pc=0x00007f03f91a8091 offset=2551):
   jdk.incubator.vector.Int256Vector::broadcast@2 (line 41)
ScopeDesc(pc=0x00007f03f91a8091 offset=2551):
   jdk.incubator.vector.AbstractMask::checkIndex0@52 (line 268)
ScopeDesc(pc=0x00007f03f91a8091 offset=2551):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91a8091 offset=2551):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91a8091 offset=2551):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a8091 offset=2551):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a809b offset=255b):
   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@19
ScopeDesc(pc=0x00007f03f91a809b offset=255b):
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
ScopeDesc(pc=0x00007f03f91a809b offset=255b):
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
ScopeDesc(pc=0x00007f03f91a809b offset=255b):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a80ac offset=256c):
   jdk.incubator.vector.IntVector::blendTemplate@26 (line 1895)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000010188b520} = 'jdk/incubator/vector/Int256Vector'
    - @1: a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @2: a 'java/lang/Class'{0x00000001010002b0} = int
    - @3: 8
    - @4: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e58}
    - @5: obj[1330]
    - @6: reg rbp [10],oop
    - @7: a 'jdk/incubator/vector/IntVector$$Lambda$64+0x00000008000acfa0'{0x0000000101c25820}
ScopeDesc(pc=0x00007f03f91a80ac offset=256c):
   jdk.incubator.vector.Int256Vector::blend@11 (line 376)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a80ac offset=256c):
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a80ac offset=256c):
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a80ac offset=256c):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 1330: jdk.incubator.vector.Int256Vector stack[128]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a80b4 offset=2574):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a80b4 offset=2574):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a80b4 offset=2574):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a80b4 offset=2574):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a80b4 offset=2574):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a80b9 offset=2579):
   jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
ScopeDesc(pc=0x00007f03f91a80b9 offset=2579):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a80c4 offset=2584):
   jdk.incubator.vector.IntVector::fromArray@50 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: empty
    - @3: empty
    - @4: NULL
ScopeDesc(pc=0x00007f03f91a80c4 offset=2584):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a80d8 offset=2598):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a80d8 offset=2598):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a80d8 offset=2598):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a80d8 offset=2598):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a80d8 offset=2598):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a80dd offset=259d):
   App::micro_vector_masked@169 (line 53)
ScopeDesc(pc=0x00007f03f91a80f8 offset=25b8):
   jdk.incubator.vector.VectorIntrinsics::roundDown@5 (line 106)  reexecute=true
   Locals
    - l0: stack[60]
    - l1: stack[56]
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x00007f03f91a80f8 offset=25b8):
   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x00007f03f91a80f8 offset=25b8):
   App::micro_vector_masked@65 (line 43)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: 0
ScopeDesc(pc=0x00007f03f91a810c offset=25cc):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a810c offset=25cc):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a810c offset=25cc):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a810c offset=25cc):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a810c offset=25cc):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8111 offset=25d1):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a813f offset=25ff):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a813f offset=25ff):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a813f offset=25ff):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a813f offset=25ff):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a813f offset=25ff):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8148 offset=2608):
   jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[64]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   Expression stack
    - @0: stack[52]
    - @1: reg rbp [10],int
    - @2: stack[68],narrowoop
ScopeDesc(pc=0x00007f03f91a8148 offset=2608):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[52]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a815c offset=261c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a815c offset=261c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a815c offset=261c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a815c offset=261c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a815c offset=261c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8161 offset=2621):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a8161 offset=2621):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a818e offset=264e):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a818e offset=264e):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a818e offset=264e):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a818e offset=264e):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a818e offset=264e):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8198 offset=2658):
   jdk.incubator.vector.VectorMask::fromLong@15 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: 0
    - l2: stack[72],long
    - l3: stack[56],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   Expression stack
    - @0: stack[64]
    - @1: 64
ScopeDesc(pc=0x00007f03f91a8198 offset=2658):
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: stack[48]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a81be offset=267e):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a81be offset=267e):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a81be offset=267e):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a81be offset=267e):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a81be offset=267e):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a81c3 offset=2683):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
ScopeDesc(pc=0x00007f03f91a81c3 offset=2683):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a81eb offset=26ab):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a81eb offset=26ab):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a81eb offset=26ab):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a81eb offset=26ab):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a81eb offset=26ab):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a81f4 offset=26b4):
   jdk.incubator.vector.VectorMask::fromLong@40 (line 247)  reexecute=true
   Locals
    - l0: empty
    - l1: 0
    - l2: stack[72],long
    - l3: stack[64],oop
    - l4: stack[60]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x00007f03f91a81f4 offset=26b4):
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: stack[56]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8208 offset=26c8):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8208 offset=26c8):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8208 offset=26c8):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8208 offset=26c8):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8208 offset=26c8):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a820d offset=26cd):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a820d offset=26cd):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8235 offset=26f5):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8235 offset=26f5):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8235 offset=26f5):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8235 offset=26f5):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8235 offset=26f5):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8240 offset=2700):
   jdk.incubator.vector.IntVector$IntSpecies::zero@9 (line 3649)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a8240 offset=2700):
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a8240 offset=2700):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
ScopeDesc(pc=0x00007f03f91a8254 offset=2714):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
ScopeDesc(pc=0x00007f03f91a8254 offset=2714):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a8259 offset=2719):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a8259 offset=2719):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8281 offset=2741):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8281 offset=2741):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8281 offset=2741):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8281 offset=2741):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8281 offset=2741):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a828c offset=274c):
   jdk.incubator.vector.IntVector$IntSpecies::zero@76 (line 3656)
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a828c offset=274c):
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a828c offset=274c):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
ScopeDesc(pc=0x00007f03f91a82a0 offset=2760):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a82a0 offset=2760):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a82a0 offset=2760):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a82a0 offset=2760):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a82a0 offset=2760):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a82a5 offset=2765):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
ScopeDesc(pc=0x00007f03f91a82a5 offset=2765):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a82b0 offset=2770):
   jdk.incubator.vector.VectorMask::length@4 (line 154)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: reg rbp [10],oop
ScopeDesc(pc=0x00007f03f91a82b0 offset=2770):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a82b0 offset=2770):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a82b0 offset=2770):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a82b0 offset=2770):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a82c4 offset=2784):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a82c4 offset=2784):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a82c4 offset=2784):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a82c4 offset=2784):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a82c4 offset=2784):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a82ce offset=278e):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a82ce offset=278e):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a82ce offset=278e):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a82d8 offset=2798):
   java.lang.invoke.DirectMethodHandle::allocateInstance@12 (line 522)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x00007f03f91a82d8 offset=2798):
   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@1
   Locals
    - l0: a 'java/lang/invoke/DirectMethodHandle$Constructor'{0x0000000101c20690}
    - l1: stack[40],oop
    - l2: stack[72]
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a82d8 offset=2798):
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a82d8 offset=2798):
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: stack[64],oop
    - @1: stack[80],oop
ScopeDesc(pc=0x00007f03f91a82d8 offset=2798):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a82e5 offset=27a5):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a82e5 offset=27a5):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a82e5 offset=27a5):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a82e5 offset=27a5):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a82e5 offset=27a5):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a82ea offset=27aa):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
ScopeDesc(pc=0x00007f03f91a82ea offset=27aa):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a82ed offset=27ad):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a82ed offset=27ad):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a82ed offset=27ad):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a82ed offset=27ad):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a82ed offset=27ad):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a82f8 offset=27b8):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@162 (line 242)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: reg rbp [10],oop
ScopeDesc(pc=0x00007f03f91a82f8 offset=27b8):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a82f8 offset=27b8):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a82f8 offset=27b8):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a830c offset=27cc):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a830c offset=27cc):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a830c offset=27cc):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a830c offset=27cc):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a830c offset=27cc):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8311 offset=27d1):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a834d offset=280d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a834d offset=280d):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a834d offset=280d):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a834d offset=280d):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a834d offset=280d):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8358 offset=2818):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: stack[80],oop
ScopeDesc(pc=0x00007f03f91a8358 offset=2818):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8358 offset=2818):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[44]
    - l3: stack[64],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a8358 offset=2818):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[44]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
ScopeDesc(pc=0x00007f03f91a836c offset=282c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a836c offset=282c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a836c offset=282c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a836c offset=282c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a836c offset=282c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8371 offset=2831):
   jdk.incubator.vector.IntVector::fromArray@44 (line 2727)
ScopeDesc(pc=0x00007f03f91a8371 offset=2831):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a839c offset=285c):
   jdk.incubator.vector.IntVector$IntSpecies::iota@60 (line 3665)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a839c offset=285c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[104],oop
    - @1: stack[72]
    - @2: stack[76]
ScopeDesc(pc=0x00007f03f91a839c offset=285c):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a839c offset=285c):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a83b4 offset=2874):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a83b4 offset=2874):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a83b4 offset=2874):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a83b4 offset=2874):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a83b4 offset=2874):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a83b9 offset=2879):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91a83b9 offset=2879):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
ScopeDesc(pc=0x00007f03f91a83b9 offset=2879):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a83ee offset=28ae):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a83ee offset=28ae):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a83ee offset=28ae):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a83ee offset=28ae):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a83ee offset=28ae):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a83f8 offset=28b8):
   jdk.incubator.vector.Int256Vector$Int256Mask::or@22 (line 652)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: 11
    - @1: a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @2: a 'java/lang/Class'{0x00000001010002b0} = int
    - @3: 8
    - @4: obj[2756]
    - @5: obj[2757]
ScopeDesc(pc=0x00007f03f91a83f8 offset=28b8):
   jdk.incubator.vector.Int256Vector$Int256Mask::or@2 (line 528)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x00007f03f91a83f8 offset=28b8):
   jdk.incubator.vector.AbstractMask::checkIndex0@78 (line 272)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x00007f03f91a83f8 offset=28b8):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   Locals
    - l0: stack[104],oop
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a83f8 offset=28b8):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a83f8 offset=28b8):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a83f8 offset=28b8):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 2756: jdk.incubator.vector.Int256Vector$Int256Mask stack[160]Wrong location type 7
    - 2757: jdk.incubator.vector.Int256Vector$Int256Mask stack[128]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a840c offset=28cc):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a840c offset=28cc):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a840c offset=28cc):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a840c offset=28cc):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a840c offset=28cc):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8411 offset=28d1):
   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
ScopeDesc(pc=0x00007f03f91a8411 offset=28d1):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a841c offset=28dc):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
ScopeDesc(pc=0x00007f03f91a841c offset=28dc):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8430 offset=28f0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8430 offset=28f0):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8430 offset=28f0):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8430 offset=28f0):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8430 offset=28f0):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8435 offset=28f5):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a8435 offset=28f5):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8440 offset=2900):
   jdk.incubator.vector.Int256Vector::blend@8 (line 375)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: empty
    - @3: reg rbp [10],oop
ScopeDesc(pc=0x00007f03f91a8440 offset=2900):
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a8440 offset=2900):
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a8440 offset=2900):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8454 offset=2914):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8454 offset=2914):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8454 offset=2914):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8454 offset=2914):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8454 offset=2914):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8459 offset=2919):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8486 offset=2946):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8486 offset=2946):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8486 offset=2946):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8486 offset=2946):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8486 offset=2946):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8490 offset=2950):
   jdk.incubator.vector.IntVector$IntSpecies::iota@9 (line 3663)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a8490 offset=2950):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[80],oop
    - @1: stack[28]
    - @2: stack[44]
ScopeDesc(pc=0x00007f03f91a8490 offset=2950):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[40]
    - l3: stack[72],oop
    - l4: stack[64],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a8490 offset=2950):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[72],oop
ScopeDesc(pc=0x00007f03f91a84a4 offset=2964):
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
ScopeDesc(pc=0x00007f03f91a84a4 offset=2964):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a84a9 offset=2969):
   jdk.incubator.vector.IntVector::fromArray@64 (line 2728)
ScopeDesc(pc=0x00007f03f91a84a9 offset=2969):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a84d3 offset=2993):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a84d3 offset=2993):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a84d3 offset=2993):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a84d3 offset=2993):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a84d3 offset=2993):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a84dc offset=299c):
   jdk.incubator.vector.IntVector$IntSpecies::iota@76 (line 3670)
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a84dc offset=299c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[80],oop
    - @1: stack[28]
    - @2: stack[44]
ScopeDesc(pc=0x00007f03f91a84dc offset=299c):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[40]
    - l3: stack[72],oop
    - l4: stack[64],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a84dc offset=299c):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[72],oop
ScopeDesc(pc=0x00007f03f91a84f0 offset=29b0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a84f0 offset=29b0):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a84f0 offset=29b0):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a84f0 offset=29b0):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a84f0 offset=29b0):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a84f5 offset=29b5):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a84fa offset=29ba):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a84fa offset=29ba):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a84fa offset=29ba):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a84fa offset=29ba):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a84fa offset=29ba):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8504 offset=29c4):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],oop
ScopeDesc(pc=0x00007f03f91a8504 offset=29c4):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a8504 offset=29c4):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8518 offset=29d8):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8518 offset=29d8):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8518 offset=29d8):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8518 offset=29d8):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8518 offset=29d8):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a851d offset=29dd):
   jdk.incubator.vector.IntVector::fromArray@-1 (line 2720)
ScopeDesc(pc=0x00007f03f91a851d offset=29dd):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8528 offset=29e8):
   jdk.incubator.vector.IntVector::fromArray@50 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: empty
    - @3: empty
    - @4: NULL
ScopeDesc(pc=0x00007f03f91a8528 offset=29e8):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a853c offset=29fc):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a853c offset=29fc):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a853c offset=29fc):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a853c offset=29fc):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a853c offset=29fc):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8541 offset=2a01):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
ScopeDesc(pc=0x00007f03f91a8541 offset=2a01):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a855f offset=2a1f):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a855f offset=2a1f):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a855f offset=2a1f):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a855f offset=2a1f):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a855f offset=2a1f):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8568 offset=2a28):
   jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[48]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
   Expression stack
    - @0: stack[36]
    - @1: reg rbp [10],int
    - @2: stack[52],narrowoop
ScopeDesc(pc=0x00007f03f91a8568 offset=2a28):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: stack[36]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a857c offset=2a3c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a857c offset=2a3c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a857c offset=2a3c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a857c offset=2a3c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a857c offset=2a3c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8581 offset=2a41):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a8581 offset=2a41):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a85a9 offset=2a69):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a85a9 offset=2a69):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a85a9 offset=2a69):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a85a9 offset=2a69):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a85a9 offset=2a69):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a85b4 offset=2a74):
   jdk.incubator.vector.IntVector$IntSpecies::zero@60 (line 3651)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a85b4 offset=2a74):
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a85b4 offset=2a74):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
ScopeDesc(pc=0x00007f03f91a85e0 offset=2aa0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a85e0 offset=2aa0):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a85e0 offset=2aa0):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a85e0 offset=2aa0):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a85e0 offset=2aa0):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a85ea offset=2aaa):
   jdk.incubator.vector.IntVector::compareTemplate@55 (line 1755)
ScopeDesc(pc=0x00007f03f91a85ea offset=2aaa):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91a85ea offset=2aaa):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91a85ea offset=2aaa):
   jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
ScopeDesc(pc=0x00007f03f91a85ea offset=2aaa):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91a85ea offset=2aaa):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91a85ea offset=2aaa):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a85ea offset=2aaa):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a85f8 offset=2ab8):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[36]
    - l2: stack[168]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[1633]
    - @1: stack[64],oop
ScopeDesc(pc=0x00007f03f91a85f8 offset=2ab8):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a85f8 offset=2ab8):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[40],oop
    - l1: stack[56],oop
    - l2: stack[36]
    - l3: stack[80],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a85f8 offset=2ab8):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 1633: jdk.incubator.vector.Int256Vector$Int256Mask stack[96]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a861b offset=2adb):
   jdk.incubator.vector.IntVector::compareTemplate@52 (line 1755)
ScopeDesc(pc=0x00007f03f91a861b offset=2adb):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91a861b offset=2adb):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91a861b offset=2adb):
   jdk.incubator.vector.AbstractMask::checkIndex0@55 (line 268)
ScopeDesc(pc=0x00007f03f91a861b offset=2adb):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91a861b offset=2adb):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91a861b offset=2adb):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91a861b offset=2adb):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a8625 offset=2ae5):
   java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@4
ScopeDesc(pc=0x00007f03f91a8625 offset=2ae5):
   jdk.incubator.vector.IntVector::lanewiseTemplate@233 (line 634)
ScopeDesc(pc=0x00007f03f91a8625 offset=2ae5):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
ScopeDesc(pc=0x00007f03f91a8625 offset=2ae5):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91a8625 offset=2ae5):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91a8625 offset=2ae5):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91a8630 offset=2af0):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[36]
    - l2: stack[168]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[1673]
    - @1: stack[64],oop
ScopeDesc(pc=0x00007f03f91a8630 offset=2af0):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8630 offset=2af0):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[40],oop
    - l1: stack[56],oop
    - l2: stack[36]
    - l3: stack[80],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8630 offset=2af0):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 1673: jdk.incubator.vector.Int256Vector$Int256Mask stack[96]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a863a offset=2afa):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a863a offset=2afa):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a863a offset=2afa):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a863a offset=2afa):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a863a offset=2afa):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a863f offset=2aff):
   jdk.incubator.vector.IntVector::fromArray@14 (line 2721)
ScopeDesc(pc=0x00007f03f91a863f offset=2aff):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8660 offset=2b20):
   jdk.incubator.vector.IntVector$IntSpecies::zero@9 (line 3649)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a8660 offset=2b20):
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a8660 offset=2b20):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
ScopeDesc(pc=0x00007f03f91a8674 offset=2b34):
   java.util.Objects::checkIndex@3 (line 359)
ScopeDesc(pc=0x00007f03f91a8674 offset=2b34):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91a8674 offset=2b34):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
ScopeDesc(pc=0x00007f03f91a8674 offset=2b34):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a8679 offset=2b39):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
ScopeDesc(pc=0x00007f03f91a8679 offset=2b39):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a8692 offset=2b52):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8692 offset=2b52):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8692 offset=2b52):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8692 offset=2b52):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8692 offset=2b52):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a869c offset=2b5c):
   jdk.incubator.vector.IntVector$IntSpecies::zero@76 (line 3656)
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a869c offset=2b5c):
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a869c offset=2b5c):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
ScopeDesc(pc=0x00007f03f91a86b0 offset=2b70):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a86b0 offset=2b70):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a86b0 offset=2b70):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a86b0 offset=2b70):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a86b0 offset=2b70):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a86b5 offset=2b75):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a86b5 offset=2b75):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a86c0 offset=2b80):
   jdk.incubator.vector.VectorMask::length@4 (line 154)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: reg rbp [10],oop
ScopeDesc(pc=0x00007f03f91a86c0 offset=2b80):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a86c0 offset=2b80):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a86c0 offset=2b80):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a86c0 offset=2b80):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a86d4 offset=2b94):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a86d4 offset=2b94):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a86d4 offset=2b94):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a86d4 offset=2b94):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a86d4 offset=2b94):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a86d9 offset=2b99):
   jdk.incubator.vector.IntVector::fromArray@0 (line 2720)
ScopeDesc(pc=0x00007f03f91a86d9 offset=2b99):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a86e4 offset=2ba4):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91a86e4 offset=2ba4):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a86e4 offset=2ba4):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a86e4 offset=2ba4):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a86f8 offset=2bb8):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a86f8 offset=2bb8):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a86f8 offset=2bb8):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a86f8 offset=2bb8):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a86f8 offset=2bb8):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a86fd offset=2bbd):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
ScopeDesc(pc=0x00007f03f91a86fd offset=2bbd):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8708 offset=2bc8):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@162 (line 242)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: reg rbp [10],oop
ScopeDesc(pc=0x00007f03f91a8708 offset=2bc8):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8708 offset=2bc8):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a8708 offset=2bc8):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a871c offset=2bdc):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a871c offset=2bdc):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a871c offset=2bdc):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a871c offset=2bdc):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a871c offset=2bdc):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8721 offset=2be1):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a8721 offset=2be1):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a874b offset=2c0b):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a874b offset=2c0b):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a874b offset=2c0b):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a874b offset=2c0b):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a874b offset=2c0b):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8754 offset=2c14):
   jdk.incubator.vector.IntVector$IntSpecies::iota@60 (line 3665)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a8754 offset=2c14):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[80],oop
    - @1: stack[28]
    - @2: stack[44]
ScopeDesc(pc=0x00007f03f91a8754 offset=2c14):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[40]
    - l3: stack[72],oop
    - l4: stack[64],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a8754 offset=2c14):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[72],oop
ScopeDesc(pc=0x00007f03f91a876c offset=2c2c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a876c offset=2c2c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a876c offset=2c2c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a876c offset=2c2c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a876c offset=2c2c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8771 offset=2c31):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a878f offset=2c4f):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a878f offset=2c4f):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a878f offset=2c4f):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a878f offset=2c4f):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a878f offset=2c4f):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8798 offset=2c58):
   jdk.incubator.vector.Int256Vector$Int256Mask::or@22 (line 652)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: 11
    - @1: a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @2: a 'java/lang/Class'{0x00000001010002b0} = int
    - @3: 8
    - @4: obj[2048]
    - @5: obj[2049]
ScopeDesc(pc=0x00007f03f91a8798 offset=2c58):
   jdk.incubator.vector.Int256Vector$Int256Mask::or@2 (line 528)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x00007f03f91a8798 offset=2c58):
   jdk.incubator.vector.AbstractMask::checkIndex0@78 (line 272)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x00007f03f91a8798 offset=2c58):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   Locals
    - l0: stack[88],oop
    - l1: stack[72]
    - l2: stack[76]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8798 offset=2c58):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8798 offset=2c58):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a8798 offset=2c58):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 2048: jdk.incubator.vector.Int256Vector$Int256Mask stack[128]Wrong location type 7
    - 2049: jdk.incubator.vector.Int256Vector$Int256Mask stack[96]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a87ac offset=2c6c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a87ac offset=2c6c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a87ac offset=2c6c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a87ac offset=2c6c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a87ac offset=2c6c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a87b1 offset=2c71):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
ScopeDesc(pc=0x00007f03f91a87b1 offset=2c71):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a87bc offset=2c7c):
   App::micro_vector_masked@188 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
    - @1: reg rbp [10],oop
    - @2: stack[80],oop
ScopeDesc(pc=0x00007f03f91a87d0 offset=2c90):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a87d0 offset=2c90):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a87d0 offset=2c90):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a87d0 offset=2c90):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a87d0 offset=2c90):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a87d5 offset=2c95):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a87d5 offset=2c95):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a87df offset=2c9f):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a87df offset=2c9f):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a87df offset=2c9f):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a87df offset=2c9f):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a87df offset=2c9f):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a87e8 offset=2ca8):
   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[72]
    - @1: stack[28]
    - @2: NULL
ScopeDesc(pc=0x00007f03f91a87e8 offset=2ca8):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a87e8 offset=2ca8):
   jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
   Locals
    - l0: stack[32],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007f03f91a87e8 offset=2ca8):
   jdk.incubator.vector.IntVector::intoArray@10 (line 3001)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a87e8 offset=2ca8):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a87fc offset=2cbc):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a87fc offset=2cbc):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a87fc offset=2cbc):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a87fc offset=2cbc):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a87fc offset=2cbc):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8801 offset=2cc1):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a880c offset=2ccc):
   jdk.incubator.vector.IntVector::intoArray@2 (line 2960)
   Locals
    - l0: stack[40],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
   Expression stack
    - @0: stack[72]
    - @1: stack[40],oop
ScopeDesc(pc=0x00007f03f91a880c offset=2ccc):
   jdk.incubator.vector.IntVector::intoArray@10 (line 3001)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a880c offset=2ccc):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8820 offset=2ce0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8820 offset=2ce0):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8820 offset=2ce0):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8820 offset=2ce0):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8820 offset=2ce0):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8825 offset=2ce5):
   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
ScopeDesc(pc=0x00007f03f91a8825 offset=2ce5):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a882a offset=2cea):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a882a offset=2cea):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a882a offset=2cea):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a882a offset=2cea):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a882a offset=2cea):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8834 offset=2cf4):
   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[72]
    - @1: stack[172]
    - @2: NULL
ScopeDesc(pc=0x00007f03f91a8834 offset=2cf4):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a8834 offset=2cf4):
   jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
   Locals
    - l0: stack[32],oop
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007f03f91a8834 offset=2cf4):
   jdk.incubator.vector.IntVector::intoArray@10 (line 3001)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8834 offset=2cf4):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8848 offset=2d08):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8848 offset=2d08):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8848 offset=2d08):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8848 offset=2d08):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8848 offset=2d08):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a884d offset=2d0d):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a884d offset=2d0d):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8852 offset=2d12):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8852 offset=2d12):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8852 offset=2d12):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8852 offset=2d12):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8852 offset=2d12):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a885c offset=2d1c):
   jdk.incubator.vector.Int256Vector::blend@8 (line 375)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: empty
    - @3: reg rbp [10],oop
ScopeDesc(pc=0x00007f03f91a885c offset=2d1c):
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a885c offset=2d1c):
   jdk.incubator.vector.IntVector::fromArray@40 (line 2723)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a885c offset=2d1c):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8870 offset=2d30):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8870 offset=2d30):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8870 offset=2d30):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8870 offset=2d30):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8870 offset=2d30):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8875 offset=2d35):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a888e offset=2d4e):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a888e offset=2d4e):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a888e offset=2d4e):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a888e offset=2d4e):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a888e offset=2d4e):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8898 offset=2d58):
   jdk.incubator.vector.IntVector$IntSpecies::zero@60 (line 3651)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a8898 offset=2d58):
   jdk.incubator.vector.IntVector::fromArray@25 (line 2722)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91a8898 offset=2d58):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
ScopeDesc(pc=0x00007f03f91a88ac offset=2d6c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a88ac offset=2d6c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a88ac offset=2d6c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a88ac offset=2d6c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a88ac offset=2d6c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a88b1 offset=2d71):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a88b1 offset=2d71):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a88c5 offset=2d85):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a88c5 offset=2d85):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a88c5 offset=2d85):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a88c5 offset=2d85):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a88c5 offset=2d85):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a88d0 offset=2d90):
   jdk.incubator.vector.IntVector$IntSpecies::iota@9 (line 3663)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a88d0 offset=2d90):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[48],oop
    - @1: stack[72]
    - @2: stack[168]
ScopeDesc(pc=0x00007f03f91a88d0 offset=2d90):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[72]
    - l3: stack[64],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a88d0 offset=2d90):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a88e4 offset=2da4):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a88e9 offset=2da9):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a88e9 offset=2da9):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a88fd offset=2dbd):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a88fd offset=2dbd):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a88fd offset=2dbd):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a88fd offset=2dbd):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a88fd offset=2dbd):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8908 offset=2dc8):
   jdk.incubator.vector.IntVector$IntSpecies::iota@76 (line 3670)
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a8908 offset=2dc8):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[48],oop
    - @1: stack[72]
    - @2: stack[168]
ScopeDesc(pc=0x00007f03f91a8908 offset=2dc8):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[72]
    - l3: stack[64],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8908 offset=2dc8):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a891c offset=2ddc):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a891c offset=2ddc):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a891c offset=2ddc):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a891c offset=2ddc):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a891c offset=2ddc):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8921 offset=2de1):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a8921 offset=2de1):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8926 offset=2de6):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8926 offset=2de6):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8926 offset=2de6):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8926 offset=2de6):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8926 offset=2de6):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8930 offset=2df0):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@1 (line 3311)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],oop
ScopeDesc(pc=0x00007f03f91a8930 offset=2df0):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8930 offset=2df0):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8944 offset=2e04):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8944 offset=2e04):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8944 offset=2e04):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8944 offset=2e04):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8944 offset=2e04):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8949 offset=2e09):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8954 offset=2e14):
   jdk.incubator.vector.VectorMask::length@4 (line 154)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: reg rbp [10],oop
ScopeDesc(pc=0x00007f03f91a8954 offset=2e14):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8954 offset=2e14):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8954 offset=2e14):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8954 offset=2e14):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8968 offset=2e28):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8968 offset=2e28):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8968 offset=2e28):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8968 offset=2e28):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8968 offset=2e28):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a896d offset=2e2d):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a896d offset=2e2d):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8978 offset=2e38):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@174 (line 243)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91a8978 offset=2e38):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8978 offset=2e38):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8978 offset=2e38):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a898c offset=2e4c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a898c offset=2e4c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a898c offset=2e4c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a898c offset=2e4c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a898c offset=2e4c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8991 offset=2e51):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
ScopeDesc(pc=0x00007f03f91a8991 offset=2e51):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a899c offset=2e5c):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@162 (line 242)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: reg rbp [10],oop
ScopeDesc(pc=0x00007f03f91a899c offset=2e5c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a899c offset=2e5c):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a899c offset=2e5c):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a89b0 offset=2e70):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a89b0 offset=2e70):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a89b0 offset=2e70):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a89b0 offset=2e70):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a89b0 offset=2e70):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a89b5 offset=2e75):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
ScopeDesc(pc=0x00007f03f91a89b5 offset=2e75):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a89c9 offset=2e89):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a89c9 offset=2e89):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a89c9 offset=2e89):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a89c9 offset=2e89):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a89c9 offset=2e89):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a89d4 offset=2e94):
   jdk.incubator.vector.IntVector$IntSpecies::iota@60 (line 3665)  reexecute=true
   Locals
    - l0: empty
ScopeDesc(pc=0x00007f03f91a89d4 offset=2e94):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[48],oop
    - @1: stack[72]
    - @2: stack[168]
ScopeDesc(pc=0x00007f03f91a89d4 offset=2e94):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[72]
    - l3: stack[64],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a89d4 offset=2e94):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a89ec offset=2eac):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a89ec offset=2eac):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a89ec offset=2eac):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a89ec offset=2eac):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a89ec offset=2eac):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a89f1 offset=2eb1):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
ScopeDesc(pc=0x00007f03f91a89f1 offset=2eb1):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91a8a32 offset=2ef2):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8a32 offset=2ef2):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8a32 offset=2ef2):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8a32 offset=2ef2):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8a32 offset=2ef2):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8a3c offset=2efc):
   jdk.incubator.vector.Int256Vector$Int256Mask::or@22 (line 652)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: 11
    - @1: a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @2: a 'java/lang/Class'{0x00000001010002b0} = int
    - @3: 8
    - @4: obj[2709]
    - @5: obj[2710]
ScopeDesc(pc=0x00007f03f91a8a3c offset=2efc):
   jdk.incubator.vector.Int256Vector$Int256Mask::or@2 (line 528)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x00007f03f91a8a3c offset=2efc):
   jdk.incubator.vector.AbstractMask::checkIndex0@78 (line 272)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x00007f03f91a8a3c offset=2efc):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   Locals
    - l0: stack[48],oop
    - l1: stack[28]
    - l2: stack[168]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8a3c offset=2efc):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8a3c offset=2efc):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[28]
    - l3: stack[40],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8a3c offset=2efc):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 2709: jdk.incubator.vector.Int256Vector$Int256Mask stack[96]Wrong location type 7
    - 2710: jdk.incubator.vector.Int256Vector$Int256Mask stack[64]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a8a50 offset=2f10):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8a50 offset=2f10):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8a50 offset=2f10):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8a50 offset=2f10):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8a50 offset=2f10):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8a55 offset=2f15):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a8a55 offset=2f15):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8a5f offset=2f1f):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8a5f offset=2f1f):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8a5f offset=2f1f):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8a5f offset=2f1f):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8a5f offset=2f1f):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8a68 offset=2f28):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[24]
    - l3: stack[80],oop
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: empty
    - l6: empty
    - l7: empty
   Expression stack
    - @0: stack[40],oop
ScopeDesc(pc=0x00007f03f91a8a68 offset=2f28):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8a68 offset=2f28):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8a7c offset=2f3c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8a7c offset=2f3c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8a7c offset=2f3c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8a7c offset=2f3c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8a7c offset=2f3c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8a81 offset=2f41):
   java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@4
ScopeDesc(pc=0x00007f03f91a8a81 offset=2f41):
   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
ScopeDesc(pc=0x00007f03f91a8a81 offset=2f41):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a8a9c offset=2f5c):
   jdk.incubator.vector.IntVector::stOp@23 (line 353)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[32]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[40],oop
    - l6: reg rbp [10],oop
    - l7: 0
   Expression stack
    - @0: 0
    - @1: stack[36]
ScopeDesc(pc=0x00007f03f91a8a9c offset=2f5c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8a9c offset=2f5c):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8ac6 offset=2f86):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8ac6 offset=2f86):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8ac6 offset=2f86):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8ac6 offset=2f86):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8ac6 offset=2f86):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8ad0 offset=2f90):
   jdk.incubator.vector.IntVector::stOp@23 (line 353)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[32]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[40],oop
    - l6: reg rbp [10],oop
    - l7: 0
   Expression stack
    - @0: 0
    - @1: stack[36]
ScopeDesc(pc=0x00007f03f91a8ad0 offset=2f90):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8ad0 offset=2f90):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8b5c offset=301c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8b5c offset=301c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8b5c offset=301c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8b5c offset=301c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8b5c offset=301c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8b61 offset=3021):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
ScopeDesc(pc=0x00007f03f91a8b61 offset=3021):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8b6c offset=302c):
   jdk.incubator.vector.Int256Vector::vec@4 (line 117)
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
ScopeDesc(pc=0x00007f03f91a8b6c offset=302c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[36]
    - l3: stack[80],oop
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: empty
    - l6: empty
    - l7: empty
ScopeDesc(pc=0x00007f03f91a8b6c offset=302c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8b6c offset=302c):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8b80 offset=3040):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8b80 offset=3040):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8b80 offset=3040):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8b80 offset=3040):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8b80 offset=3040):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8b85 offset=3045):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a8b85 offset=3045):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8b9c offset=305c):
   jdk.incubator.vector.IntVector::stOp@7 (line 352)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[24]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[32],oop
    - l6: empty
    - l7: empty
   Expression stack
    - @0: stack[80],oop
ScopeDesc(pc=0x00007f03f91a8b9c offset=305c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8b9c offset=305c):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8bb0 offset=3070):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8bb0 offset=3070):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8bb0 offset=3070):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8bb0 offset=3070):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8bb0 offset=3070):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8bb5 offset=3075):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a8bb5 offset=3075):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8bc9 offset=3089):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8bc9 offset=3089):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8bc9 offset=3089):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8bc9 offset=3089):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8bc9 offset=3089):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8bd4 offset=3094):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@4 (line 569)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[28],narrowoop
ScopeDesc(pc=0x00007f03f91a8bd4 offset=3094):
   jdk.incubator.vector.IntVector::stOp@10 (line 352)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[24]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[32],oop
    - l6: empty
    - l7: empty
ScopeDesc(pc=0x00007f03f91a8bd4 offset=3094):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8bd4 offset=3094):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8be8 offset=30a8):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8be8 offset=30a8):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8be8 offset=30a8):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8be8 offset=30a8):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8be8 offset=30a8):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8bed offset=30ad):
   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@6
ScopeDesc(pc=0x00007f03f91a8bed offset=30ad):
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
ScopeDesc(pc=0x00007f03f91a8bed offset=30ad):
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
ScopeDesc(pc=0x00007f03f91a8bed offset=30ad):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a8bf8 offset=30b8):
   App::micro_vector_masked@13 (line 36)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91a8c28 offset=30e8):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91a8c28 offset=30e8):
   App::micro_vector_masked@52 (line 40)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: stack[32],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8c41 offset=3101):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8c41 offset=3101):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8c41 offset=3101):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8c41 offset=3101):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8c41 offset=3101):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8c4c offset=310c):
   App::micro_vector_masked@64 (line 43)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: NULL
ScopeDesc(pc=0x00007f03f91a8c60 offset=3120):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8c60 offset=3120):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8c60 offset=3120):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8c60 offset=3120):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8c60 offset=3120):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8c65 offset=3125):
   App::micro_vector_masked@169 (line 53)
ScopeDesc(pc=0x00007f03f91a8c67 offset=3127):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8c67 offset=3127):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8c67 offset=3127):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8c67 offset=3127):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8c67 offset=3127):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8c70 offset=3130):
   App::micro_vector_masked@65 (line 43)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: empty
    - @1: NULL
    - @2: reg rbp [10],int
ScopeDesc(pc=0x00007f03f91a8c84 offset=3144):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8c84 offset=3144):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8c84 offset=3144):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8c84 offset=3144):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8c84 offset=3144):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8c89 offset=3149):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a8c89 offset=3149):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8c8e offset=314e):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8c8e offset=314e):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8c8e offset=314e):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8c8e offset=314e):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8c8e offset=314e):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8c98 offset=3158):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91a8c98 offset=3158):
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91a8c98 offset=3158):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x00007f03f91a8c98 offset=3158):
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: stack[64],oop
    - l3: stack[40],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8cac offset=316c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8cac offset=316c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8cac offset=316c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8cac offset=316c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8cac offset=316c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8cb1 offset=3171):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a8cb1 offset=3171):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8cd9 offset=3199):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8cd9 offset=3199):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8cd9 offset=3199):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8cd9 offset=3199):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8cd9 offset=3199):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8ce4 offset=31a4):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   Locals
    - l0: NULL
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[64],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91a8ce4 offset=31a4):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
ScopeDesc(pc=0x00007f03f91a8cf8 offset=31b8):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8cf8 offset=31b8):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8cf8 offset=31b8):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8cf8 offset=31b8):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8cf8 offset=31b8):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8cfd offset=31bd):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a8cfd offset=31bd):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8d08 offset=31c8):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: empty
    - @1: NULL
ScopeDesc(pc=0x00007f03f91a8d08 offset=31c8):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8d1c offset=31dc):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8d1c offset=31dc):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8d1c offset=31dc):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8d1c offset=31dc):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8d1c offset=31dc):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8d21 offset=31e1):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
ScopeDesc(pc=0x00007f03f91a8d21 offset=31e1):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8d4c offset=320c):
   jdk.incubator.vector.VectorMask::length@4 (line 154)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91a8d4c offset=320c):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: stack[104],oop
    - l1: stack[72]
    - l2: stack[76]
    - l3: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e98}
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8d4c offset=320c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8d4c offset=320c):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a8d4c offset=320c):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a8d60 offset=3220):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8d60 offset=3220):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8d60 offset=3220):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8d60 offset=3220):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8d60 offset=3220):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8d65 offset=3225):
   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
ScopeDesc(pc=0x00007f03f91a8d65 offset=3225):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a8d7e offset=323e):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8d7e offset=323e):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8d7e offset=323e):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8d7e offset=323e):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8d7e offset=323e):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8d88 offset=3248):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   Locals
    - l0: NULL
    - l1: stack[32],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91a8d88 offset=3248):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
ScopeDesc(pc=0x00007f03f91a8d9c offset=325c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8d9c offset=325c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8d9c offset=325c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8d9c offset=325c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8d9c offset=325c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8da1 offset=3261):
   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
ScopeDesc(pc=0x00007f03f91a8da1 offset=3261):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a8dac offset=326c):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: empty
    - @1: NULL
ScopeDesc(pc=0x00007f03f91a8dac offset=326c):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8dc0 offset=3280):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8dc0 offset=3280):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8dc0 offset=3280):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8dc0 offset=3280):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8dc0 offset=3280):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8dc5 offset=3285):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91a8dc5 offset=3285):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8ddc offset=329c):
   jdk.incubator.vector.VectorMask::length@4 (line 154)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91a8ddc offset=329c):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: stack[88],oop
    - l1: stack[72]
    - l2: stack[76]
    - l3: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e98}
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8ddc offset=329c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8ddc offset=329c):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a8ddc offset=329c):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[72]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91a8df0 offset=32b0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8df0 offset=32b0):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8df0 offset=32b0):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8df0 offset=32b0):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8df0 offset=32b0):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8df5 offset=32b5):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
ScopeDesc(pc=0x00007f03f91a8df5 offset=32b5):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8e00 offset=32c0):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
    - @1: stack[56],oop
    - @2: stack[72]
    - @3: stack[64],oop
ScopeDesc(pc=0x00007f03f91a8e19 offset=32d9):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8e19 offset=32d9):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8e19 offset=32d9):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8e19 offset=32d9):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8e19 offset=32d9):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8e24 offset=32e4):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: empty
    - @3: NULL
ScopeDesc(pc=0x00007f03f91a8e24 offset=32e4):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8e24 offset=32e4):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8e38 offset=32f8):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a8e3d offset=32fd):
   jdk.incubator.vector.AbstractSpecies::loopBound@2 (line 203)
ScopeDesc(pc=0x00007f03f91a8e3d offset=32fd):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a8e83 offset=3343):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8e83 offset=3343):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8e83 offset=3343):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8e83 offset=3343):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8e83 offset=3343):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8e8c offset=334c):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[44]
    - l2: stack[60]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[2079]
    - @1: stack[72],oop
ScopeDesc(pc=0x00007f03f91a8e8c offset=334c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8e8c offset=334c):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[56]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a8e8c offset=334c):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[44]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 2079: jdk.incubator.vector.Int256Vector$Int256Mask stack[128]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a8ea0 offset=3360):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8ea0 offset=3360):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8ea0 offset=3360):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8ea0 offset=3360):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8ea0 offset=3360):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8ea5 offset=3365):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
ScopeDesc(pc=0x00007f03f91a8ea5 offset=3365):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8ebc offset=337c):
   jdk.incubator.vector.VectorMask::length@4 (line 154)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91a8ebc offset=337c):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   Locals
    - l0: stack[64],oop
    - l1: stack[72]
    - l2: stack[168]
    - l3: a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e98}
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8ebc offset=337c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8ebc offset=337c):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[72]
    - l3: stack[80],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8ebc offset=337c):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8ed0 offset=3390):
   App::micro_vector_masked@64 (line 43)
ScopeDesc(pc=0x00007f03f91a8ed5 offset=3395):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91a8efd offset=33bd):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8efd offset=33bd):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8efd offset=33bd):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8efd offset=33bd):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8efd offset=33bd):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8f08 offset=33c8):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[28]
    - l2: stack[44]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[2005]
    - @1: stack[88],oop
ScopeDesc(pc=0x00007f03f91a8f08 offset=33c8):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8f08 offset=33c8):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: stack[40]
    - l3: stack[80],oop
    - l4: stack[64],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91a8f08 offset=33c8):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[160],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 2005: jdk.incubator.vector.Int256Vector$Int256Mask stack[128]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a8f1c offset=33dc):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8f1c offset=33dc):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8f1c offset=33dc):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8f1c offset=33dc):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8f1c offset=33dc):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8f21 offset=33e1):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8f2b offset=33eb):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8f2b offset=33eb):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8f2b offset=33eb):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8f2b offset=33eb):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8f2b offset=33eb):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8f34 offset=33f4):
   jdk.incubator.vector.Int256Vector::vec@4 (line 117)
   Locals
    - l0: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91a8f34 offset=33f4):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[24]
    - l3: stack[80],oop
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: empty
    - l6: empty
    - l7: empty
ScopeDesc(pc=0x00007f03f91a8f34 offset=33f4):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8f34 offset=33f4):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8f48 offset=3408):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a8f48 offset=3408):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a8f48 offset=3408):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a8f48 offset=3408):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a8f48 offset=3408):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a8f4d offset=340d):
   jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
ScopeDesc(pc=0x00007f03f91a8f4d offset=340d):
   App::micro_vector_masked@177 (line 53)
ScopeDesc(pc=0x00007f03f91a8f64 offset=3424):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@4 (line 569)
   Locals
    - l0: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91a8f64 offset=3424):
   jdk.incubator.vector.IntVector::stOp@10 (line 352)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[24]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[32],oop
    - l6: empty
    - l7: empty
ScopeDesc(pc=0x00007f03f91a8f64 offset=3424):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a8f64 offset=3424):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91a8f78 offset=3438):
   App::micro_vector_masked@70 (line 43)
ScopeDesc(pc=0x00007f03f91a8f7d offset=343d):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
ScopeDesc(pc=0x00007f03f91a8f7d offset=343d):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a8f85 offset=3445):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a8f8a offset=344a):
   App::micro_vector_masked@70 (line 43)
ScopeDesc(pc=0x00007f03f91a8f94 offset=3454):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
ScopeDesc(pc=0x00007f03f91a8f94 offset=3454):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a8f99 offset=3459):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@42 (line 74)
ScopeDesc(pc=0x00007f03f91a8f99 offset=3459):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007f03f91a8f99 offset=3459):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a8fa5 offset=3465):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@37 (line 74)
ScopeDesc(pc=0x00007f03f91a8fa5 offset=3465):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007f03f91a8fa5 offset=3465):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a8fbe offset=347e):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
ScopeDesc(pc=0x00007f03f91a8fbe offset=347e):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a8fc4 offset=3484):
   App::micro_vector_masked@70 (line 43)
ScopeDesc(pc=0x00007f03f91a8fc9 offset=3489):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@42 (line 74)
ScopeDesc(pc=0x00007f03f91a8fc9 offset=3489):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007f03f91a8fc9 offset=3489):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a8fd9 offset=3499):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91a8fd9 offset=3499):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007f03f91a8fd9 offset=3499):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a8fe7 offset=34a7):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
ScopeDesc(pc=0x00007f03f91a8fe7 offset=34a7):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a8fe9 offset=34a9):
   App::micro_vector_masked@70 (line 43)
ScopeDesc(pc=0x00007f03f91a8ff0 offset=34b0):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
ScopeDesc(pc=0x00007f03f91a8ff0 offset=34b0):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a8ff2 offset=34b2):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@41 (line 74)
ScopeDesc(pc=0x00007f03f91a8ff2 offset=34b2):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007f03f91a8ff2 offset=34b2):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a8ffc offset=34bc):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
ScopeDesc(pc=0x00007f03f91a8ffc offset=34bc):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a8ffe offset=34be):
   App::micro_vector_masked@70 (line 43)
ScopeDesc(pc=0x00007f03f91a9002 offset=34c2):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@41 (line 74)
ScopeDesc(pc=0x00007f03f91a9002 offset=34c2):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007f03f91a9002 offset=34c2):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a9009 offset=34c9):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
ScopeDesc(pc=0x00007f03f91a9009 offset=34c9):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91a900b offset=34cb):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@42 (line 74)
ScopeDesc(pc=0x00007f03f91a900b offset=34cb):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007f03f91a900b offset=34cb):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a9010 offset=34d0):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007f03f91a9010 offset=34d0):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91a9013 offset=34d3):
   App::micro_vector_masked@33 (line 38)
ScopeDesc(pc=0x00007f03f91a901e offset=34de):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a901e offset=34de):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a901e offset=34de):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a901e offset=34de):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a901e offset=34de):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a9023 offset=34e3):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
ScopeDesc(pc=0x00007f03f91a9023 offset=34e3):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91a9028 offset=34e8):
   App::micro_vector_masked@-1 (line 32)
ScopeDesc(pc=0x00007f03f91a9055 offset=3515):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a9055 offset=3515):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a9055 offset=3515):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a9055 offset=3515):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a9055 offset=3515):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91a9060 offset=3520):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@140 (line 239)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[28]
    - l2: stack[168]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: obj[1941]
    - @1: stack[56],oop
ScopeDesc(pc=0x00007f03f91a9060 offset=3520):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91a9060 offset=3520):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: stack[32],oop
    - l1: reg rbp [10],oop
    - l2: stack[28]
    - l3: stack[40],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91a9060 offset=3520):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 1941: jdk.incubator.vector.Int256Vector$Int256Mask stack[96]Wrong location type 7
ScopeDesc(pc=0x00007f03f91a9074 offset=3534):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91a9074 offset=3534):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91a9074 offset=3534):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91a9074 offset=3534):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91a9074 offset=3534):
   App::micro_vector_masked@196 (line 54)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007f03f91a5288: 0020
relocInfo@0x00007f03f91a5288 [type=0(none) addr=0x00007f03f91a5b40 offset=32]
         @0x00007f03f91a528a: 6014
relocInfo@0x00007f03f91a528a [type=6(runtime_call) addr=0x00007f03f91a5b54 offset=20] | [destination=0x00007f03f9115920]
         @0x00007f03f91a528c: f009cc36
relocInfo@0x00007f03f91a528e [type=12(metadata) addr=0x00007f03f91a5b8a offset=54 format=3 data=9] | [metadata_addr=0x00007f03f91a91c8 *=0x0000000800094b80 offset=0]metadata_value=0x0000000800094b80: 'jdk/incubator/vector/IntVector$IntSpecies'
         @0x00007f03f91a5290: f013cc80
relocInfo@0x00007f03f91a5292 [type=12(metadata) addr=0x00007f03f91a5c0a offset=128 format=3 data=19] | [metadata_addr=0x00007f03f91a9218 *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007f03f91a5294: 94bf
relocInfo@0x00007f03f91a5294 [type=9(section_word) addr=0x00007f03f91a5cc9 offset=191 format=1] | [target=0x00007f03f91a5b20]
         @0x00007f03f91a5296: a04e
relocInfo@0x00007f03f91a5296 [type=10(poll) addr=0x00007f03f91a5d17 offset=78]
         @0x00007f03f91a5298: c034
relocInfo@0x00007f03f91a5298 [type=12(metadata) addr=0x00007f03f91a5d4b offset=52] | [metadata_addr=0x00007f03f91a5d4d *=0x0000000800094798 offset=0]metadata_value=0x0000000800094798: 'jdk/incubator/vector/AbstractSpecies'
         @0x00007f03f91a529a: f00a2438
relocInfo@0x00007f03f91a529c [type=2(virtual_call) addr=0x00007f03f91a5d83 offset=56 format=1 data=10] | [destination=0x00007f03f9165f20 cached_value=0x00007f03f91a5d79 metadata=0x0000000000000000]
         @0x00007f03f91a529e: f80305fe48707f04740a
relocInfo@0x00007f03f91a52a6 [type=7(external_word) addr=0x00007f03f91a5d8d offset=10 format=1 data={05fe48707f04}] | [target=0x00007f0405fe4870]
         @0x00007f03f91a52a8: f803055921807f04700d
relocInfo@0x00007f03f91a52b0 [type=7(external_word) addr=0x00007f03f91a5d9a offset=13 data={055921807f04}] | [target=0x00007f0405592180]
         @0x00007f03f91a52b2: 640e
relocInfo@0x00007f03f91a52b2 [type=6(runtime_call) addr=0x00007f03f91a5da8 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a52b4: 1032
relocInfo@0x00007f03f91a52b4 [type=1(oop) addr=0x00007f03f91a5dda offset=50] | [oop_addr=0x00007f03f91a5ddc *=0x0000000101bdc6a0 offset=0]
         @0x00007f03f91a52b6: 4415
relocInfo@0x00007f03f91a52b6 [type=4(static_call) addr=0x00007f03f91a5def offset=21 format=1] | [destination=0x00007f03f918f760 metadata=0x0000000000000000]
         @0x00007f03f91a52b8: c01a
relocInfo@0x00007f03f91a52b8 [type=12(metadata) addr=0x00007f03f91a5e09 offset=26] | [metadata_addr=0x00007f03f91a5e0b *=0x0000000800096638 offset=0]metadata_value=0x0000000800096638: 'jdk/incubator/vector/VectorMask'
         @0x00007f03f91a52ba: f009cc37
relocInfo@0x00007f03f91a52bc [type=12(metadata) addr=0x00007f03f91a5e40 offset=55 format=3 data=9] | [metadata_addr=0x00007f03f91a91c8 *=0x0000000800094b80 offset=0]metadata_value=0x0000000800094b80: 'jdk/incubator/vector/IntVector$IntSpecies'
         @0x00007f03f91a52be: f01ccc68
relocInfo@0x00007f03f91a52c0 [type=12(metadata) addr=0x00007f03f91a5ea8 offset=104 format=3 data=28] | [metadata_addr=0x00007f03f91a9260 *=0x0000000800098110 offset=0]metadata_value=0x0000000800098110: 'jdk/incubator/vector/Int256Vector'
         @0x00007f03f91a52c2: a075
relocInfo@0x00007f03f91a52c2 [type=10(poll) addr=0x00007f03f91a5f1d offset=117]
         @0x00007f03f91a52c4: f013ccb1
relocInfo@0x00007f03f91a52c6 [type=12(metadata) addr=0x00007f03f91a5fce offset=177 format=3 data=19] | [metadata_addr=0x00007f03f91a9218 *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007f03f91a52c8: a1c4
relocInfo@0x00007f03f91a52c8 [type=10(poll) addr=0x00007f03f91a6192 offset=452]
         @0x00007f03f91a52ca: f80305fe48707f0474f0
relocInfo@0x00007f03f91a52d2 [type=7(external_word) addr=0x00007f03f91a6282 offset=240 format=1 data={05fe48707f04}] | [target=0x00007f0405fe4870]
         @0x00007f03f91a52d4: f803055921807f04700d
relocInfo@0x00007f03f91a52dc [type=7(external_word) addr=0x00007f03f91a628f offset=13 data={055921807f04}] | [target=0x00007f0405592180]
         @0x00007f03f91a52de: 640e
relocInfo@0x00007f03f91a52de [type=6(runtime_call) addr=0x00007f03f91a629d offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a52e0: 100c
relocInfo@0x00007f03f91a52e0 [type=1(oop) addr=0x00007f03f91a62a9 offset=12] | [oop_addr=0x00007f03f91a62ab *=0x00000001010002b0 offset=0]
         @0x00007f03f91a52e2: 1021
relocInfo@0x00007f03f91a52e2 [type=1(oop) addr=0x00007f03f91a62ca offset=33] | [oop_addr=0x00007f03f91a62cc *=0x0000000101bdc6a0 offset=0]
         @0x00007f03f91a52e4: 4415
relocInfo@0x00007f03f91a52e4 [type=4(static_call) addr=0x00007f03f91a62df offset=21 format=1] | [destination=0x00007f03f918f760 metadata=0x0000000000000000]
         @0x00007f03f91a52e6: c01a
relocInfo@0x00007f03f91a52e6 [type=12(metadata) addr=0x00007f03f91a62f9 offset=26] | [metadata_addr=0x00007f03f91a62fb *=0x0000000800096638 offset=0]metadata_value=0x0000000800096638: 'jdk/incubator/vector/VectorMask'
         @0x00007f03f91a52e8: f009cc27
relocInfo@0x00007f03f91a52ea [type=12(metadata) addr=0x00007f03f91a6320 offset=39 format=3 data=9] | [metadata_addr=0x00007f03f91a91c8 *=0x0000000800094b80 offset=0]metadata_value=0x0000000800094b80: 'jdk/incubator/vector/IntVector$IntSpecies'
         @0x00007f03f91a52ec: c080
relocInfo@0x00007f03f91a52ec [type=12(metadata) addr=0x00007f03f91a63a0 offset=128] | [metadata_addr=0x00007f03f91a63a2 *=0x0000000800094798 offset=0]metadata_value=0x0000000800094798: 'jdk/incubator/vector/AbstractSpecies'
         @0x00007f03f91a52ee: f0011c28
relocInfo@0x00007f03f91a52f0 [type=1(oop) addr=0x00007f03f91a63c8 offset=40 format=3 data=1] | [oop_addr=0x00007f03f91a9120 *=0x000000010188fcd0 offset=0]
         @0x00007f03f91a52f2: 648f
relocInfo@0x00007f03f91a52f2 [type=6(runtime_call) addr=0x00007f03f91a6457 offset=143 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a52f4: f803053e27b87f047005
relocInfo@0x00007f03f91a52fc [type=7(external_word) addr=0x00007f03f91a645c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a52fe: 640e
relocInfo@0x00007f03f91a52fe [type=6(runtime_call) addr=0x00007f03f91a646a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5300: f023cc18
relocInfo@0x00007f03f91a5302 [type=12(metadata) addr=0x00007f03f91a6482 offset=24 format=3 data=35] | [metadata_addr=0x00007f03f91a9298 *=0x0000000800098750 offset=0]metadata_value=0x0000000800098750: 'jdk/incubator/vector/Int256Vector$Int256Mask'
         @0x00007f03f91a5304: f024cc5a
relocInfo@0x00007f03f91a5306 [type=12(metadata) addr=0x00007f03f91a64dc offset=90 format=3 data=36] | [metadata_addr=0x00007f03f91a92a0 *=0x0000000800040c30 offset=0]metadata_value=0x0000000800040c30: {type array int}
         @0x00007f03f91a5308: 104e
relocInfo@0x00007f03f91a5308 [type=1(oop) addr=0x00007f03f91a652a offset=78] | [oop_addr=0x00007f03f91a652c *=0x0000000101964e68 offset=0]
         @0x00007f03f91a530a: f01ccc59
relocInfo@0x00007f03f91a530c [type=12(metadata) addr=0x00007f03f91a6583 offset=89 format=3 data=28] | [metadata_addr=0x00007f03f91a9260 *=0x0000000800098110 offset=0]metadata_value=0x0000000800098110: 'jdk/incubator/vector/Int256Vector'
         @0x00007f03f91a530e: f80305fe48707f04740e
relocInfo@0x00007f03f91a5316 [type=7(external_word) addr=0x00007f03f91a6591 offset=14 format=1 data={05fe48707f04}] | [target=0x00007f0405fe4870]
         @0x00007f03f91a5318: f803055920d07f04700d
relocInfo@0x00007f03f91a5320 [type=7(external_word) addr=0x00007f03f91a659e offset=13 data={055920d07f04}] | [target=0x00007f04055920d0]
         @0x00007f03f91a5322: 640e
relocInfo@0x00007f03f91a5322 [type=6(runtime_call) addr=0x00007f03f91a65ac offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5324: f803055921107f047011
relocInfo@0x00007f03f91a532c [type=7(external_word) addr=0x00007f03f91a65bd offset=17 data={055921107f04}] | [target=0x00007f0405592110]
         @0x00007f03f91a532e: 640e
relocInfo@0x00007f03f91a532e [type=6(runtime_call) addr=0x00007f03f91a65cb offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5330: f027cc58
relocInfo@0x00007f03f91a5332 [type=12(metadata) addr=0x00007f03f91a6623 offset=88 format=3 data=39] | [metadata_addr=0x00007f03f91a92b8 *=0x00000008000acb58 offset=0]metadata_value=0x00000008000acb58: 'jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58'
         @0x00007f03f91a5334: f80305fe48707f047416
relocInfo@0x00007f03f91a533c [type=7(external_word) addr=0x00007f03f91a6639 offset=22 format=1 data={05fe48707f04}] | [target=0x00007f0405fe4870]
         @0x00007f03f91a533e: f803055920d07f04700d
relocInfo@0x00007f03f91a5346 [type=7(external_word) addr=0x00007f03f91a6646 offset=13 data={055920d07f04}] | [target=0x00007f04055920d0]
         @0x00007f03f91a5348: 640e
relocInfo@0x00007f03f91a5348 [type=6(runtime_call) addr=0x00007f03f91a6654 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a534a: f803055921107f047011
relocInfo@0x00007f03f91a5352 [type=7(external_word) addr=0x00007f03f91a6665 offset=17 data={055921107f04}] | [target=0x00007f0405592110]
         @0x00007f03f91a5354: 640e
relocInfo@0x00007f03f91a5354 [type=6(runtime_call) addr=0x00007f03f91a6673 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5356: 3428
relocInfo@0x00007f03f91a5356 [type=3(opt_virtual_call) addr=0x00007f03f91a669b offset=40 format=1] | [destination=0x00007f03f918e380 metadata=0x0000000000000000]
         @0x00007f03f91a5358: f009cc25
relocInfo@0x00007f03f91a535a [type=12(metadata) addr=0x00007f03f91a66c0 offset=37 format=3 data=9] | [metadata_addr=0x00007f03f91a91c8 *=0x0000000800094b80 offset=0]metadata_value=0x0000000800094b80: 'jdk/incubator/vector/IntVector$IntSpecies'
         @0x00007f03f91a535c: c055
relocInfo@0x00007f03f91a535c [type=12(metadata) addr=0x00007f03f91a6715 offset=85] | [metadata_addr=0x00007f03f91a6717 *=0x0000000800094798 offset=0]metadata_value=0x0000000800094798: 'jdk/incubator/vector/AbstractSpecies'
         @0x00007f03f91a535e: f0011c34
relocInfo@0x00007f03f91a5360 [type=1(oop) addr=0x00007f03f91a6749 offset=52 format=3 data=1] | [oop_addr=0x00007f03f91a9120 *=0x000000010188fcd0 offset=0]
         @0x00007f03f91a5362: 6472
relocInfo@0x00007f03f91a5362 [type=6(runtime_call) addr=0x00007f03f91a67bb offset=114 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5364: f803053e27b87f047005
relocInfo@0x00007f03f91a536c [type=7(external_word) addr=0x00007f03f91a67c0 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a536e: 640e
relocInfo@0x00007f03f91a536e [type=6(runtime_call) addr=0x00007f03f91a67ce offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5370: f023cc23
relocInfo@0x00007f03f91a5372 [type=12(metadata) addr=0x00007f03f91a67f1 offset=35 format=3 data=35] | [metadata_addr=0x00007f03f91a9298 *=0x0000000800098750 offset=0]metadata_value=0x0000000800098750: 'jdk/incubator/vector/Int256Vector$Int256Mask'
         @0x00007f03f91a5374: f024cc5c
relocInfo@0x00007f03f91a5376 [type=12(metadata) addr=0x00007f03f91a684d offset=92 format=3 data=36] | [metadata_addr=0x00007f03f91a92a0 *=0x0000000800040c30 offset=0]metadata_value=0x0000000800040c30: {type array int}
         @0x00007f03f91a5378: 104e
relocInfo@0x00007f03f91a5378 [type=1(oop) addr=0x00007f03f91a689b offset=78] | [oop_addr=0x00007f03f91a689d *=0x0000000101964e68 offset=0]
         @0x00007f03f91a537a: f01ccc54
relocInfo@0x00007f03f91a537c [type=12(metadata) addr=0x00007f03f91a68ef offset=84 format=3 data=28] | [metadata_addr=0x00007f03f91a9260 *=0x0000000800098110 offset=0]metadata_value=0x0000000800098110: 'jdk/incubator/vector/Int256Vector'
         @0x00007f03f91a537e: f80305fe48707f04740f
relocInfo@0x00007f03f91a5386 [type=7(external_word) addr=0x00007f03f91a68fe offset=15 format=1 data={05fe48707f04}] | [target=0x00007f0405fe4870]
         @0x00007f03f91a5388: f803055920d07f04700d
relocInfo@0x00007f03f91a5390 [type=7(external_word) addr=0x00007f03f91a690b offset=13 data={055920d07f04}] | [target=0x00007f04055920d0]
         @0x00007f03f91a5392: 640e
relocInfo@0x00007f03f91a5392 [type=6(runtime_call) addr=0x00007f03f91a6919 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5394: f803055921107f047011
relocInfo@0x00007f03f91a539c [type=7(external_word) addr=0x00007f03f91a692a offset=17 data={055921107f04}] | [target=0x00007f0405592110]
         @0x00007f03f91a539e: 640e
relocInfo@0x00007f03f91a539e [type=6(runtime_call) addr=0x00007f03f91a6938 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a53a0: f027cc4b
relocInfo@0x00007f03f91a53a2 [type=12(metadata) addr=0x00007f03f91a6983 offset=75 format=3 data=39] | [metadata_addr=0x00007f03f91a92b8 *=0x00000008000acb58 offset=0]metadata_value=0x00000008000acb58: 'jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58'
         @0x00007f03f91a53a4: f80305fe48707f047416
relocInfo@0x00007f03f91a53ac [type=7(external_word) addr=0x00007f03f91a6999 offset=22 format=1 data={05fe48707f04}] | [target=0x00007f0405fe4870]
         @0x00007f03f91a53ae: f803055920d07f04700d
relocInfo@0x00007f03f91a53b6 [type=7(external_word) addr=0x00007f03f91a69a6 offset=13 data={055920d07f04}] | [target=0x00007f04055920d0]
         @0x00007f03f91a53b8: 640e
relocInfo@0x00007f03f91a53b8 [type=6(runtime_call) addr=0x00007f03f91a69b4 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a53ba: f803055921107f047011
relocInfo@0x00007f03f91a53c2 [type=7(external_word) addr=0x00007f03f91a69c5 offset=17 data={055921107f04}] | [target=0x00007f0405592110]
         @0x00007f03f91a53c4: 640e
relocInfo@0x00007f03f91a53c4 [type=6(runtime_call) addr=0x00007f03f91a69d3 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a53c6: 3428
relocInfo@0x00007f03f91a53c6 [type=3(opt_virtual_call) addr=0x00007f03f91a69fb offset=40 format=1] | [destination=0x00007f03f918e380 metadata=0x0000000000000000]
         @0x00007f03f91a53c8: 1019
relocInfo@0x00007f03f91a53c8 [type=1(oop) addr=0x00007f03f91a6a14 offset=25] | [oop_addr=0x00007f03f91a6a16 *=0x0000000101985d48 offset=0]
         @0x00007f03f91a53ca: f00a242f
relocInfo@0x00007f03f91a53cc [type=2(virtual_call) addr=0x00007f03f91a6a43 offset=47 format=1 data=10] | [destination=0x00007f03f9179880 cached_value=0x00007f03f91a6a39 metadata=0x0000000000000000]
         @0x00007f03f91a53ce: f00a2424
relocInfo@0x00007f03f91a53d0 [type=2(virtual_call) addr=0x00007f03f91a6a67 offset=36 format=1 data=10] | [destination=0x00007f03f9112540 cached_value=0x00007f03f91a6a5d metadata=0x0000000000000000]
         @0x00007f03f91a53d2: f00a2420
relocInfo@0x00007f03f91a53d4 [type=2(virtual_call) addr=0x00007f03f91a6a87 offset=32 format=1 data=10] | [destination=0x00007f03f9112580 cached_value=0x00007f03f91a6a7d metadata=0x0000000000000000]
         @0x00007f03f91a53d6: f01ccc19
relocInfo@0x00007f03f91a53d8 [type=12(metadata) addr=0x00007f03f91a6aa0 offset=25 format=3 data=28] | [metadata_addr=0x00007f03f91a9260 *=0x0000000800098110 offset=0]metadata_value=0x0000000800098110: 'jdk/incubator/vector/Int256Vector'
         @0x00007f03f91a53da: b05e
relocInfo@0x00007f03f91a53da [type=11(poll_return) addr=0x00007f03f91a6afe offset=94]
         @0x00007f03f91a53dc: 643d
relocInfo@0x00007f03f91a53dc [type=6(runtime_call) addr=0x00007f03f91a6b3b offset=61 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a53de: f803053e27b87f047005
relocInfo@0x00007f03f91a53e6 [type=7(external_word) addr=0x00007f03f91a6b40 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a53e8: 640e
relocInfo@0x00007f03f91a53e8 [type=6(runtime_call) addr=0x00007f03f91a6b4e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a53ea: c020
relocInfo@0x00007f03f91a53ea [type=12(metadata) addr=0x00007f03f91a6b6e offset=32] | [metadata_addr=0x00007f03f91a6b70 *=0x00000008000968f8 offset=0]metadata_value=0x00000008000968f8: 'jdk/incubator/vector/AbstractMask'
         @0x00007f03f91a53ec: f0011c21
relocInfo@0x00007f03f91a53ee [type=1(oop) addr=0x00007f03f91a6b8f offset=33 format=3 data=1] | [oop_addr=0x00007f03f91a9120 *=0x000000010188fcd0 offset=0]
         @0x00007f03f91a53f0: 6484
relocInfo@0x00007f03f91a53f0 [type=6(runtime_call) addr=0x00007f03f91a6c13 offset=132 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a53f2: f803053e27b87f047005
relocInfo@0x00007f03f91a53fa [type=7(external_word) addr=0x00007f03f91a6c18 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a53fc: 640e
relocInfo@0x00007f03f91a53fc [type=6(runtime_call) addr=0x00007f03f91a6c26 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a53fe: f00a2431
relocInfo@0x00007f03f91a5400 [type=2(virtual_call) addr=0x00007f03f91a6c57 offset=49 format=1 data=10] | [destination=0x00007f03f9199820 cached_value=0x00007f03f91a6c4d metadata=0x0000000000000000]
         @0x00007f03f91a5402: c01e
relocInfo@0x00007f03f91a5402 [type=12(metadata) addr=0x00007f03f91a6c75 offset=30] | [metadata_addr=0x00007f03f91a6c77 *=0x0000000800094798 offset=0]metadata_value=0x0000000800094798: 'jdk/incubator/vector/AbstractSpecies'
         @0x00007f03f91a5404: 1014
relocInfo@0x00007f03f91a5404 [type=1(oop) addr=0x00007f03f91a6c89 offset=20] | [oop_addr=0x00007f03f91a6c8b *=0x0000000101964ea8 offset=0]
         @0x00007f03f91a5406: f803f90875a07f037440
relocInfo@0x00007f03f91a540e [type=7(external_word) addr=0x00007f03f91a6cc9 offset=64 format=1 data={f90875a07f03}] | [target=0x00007f03f90875a0]
         @0x00007f03f91a5410: f013cc82
relocInfo@0x00007f03f91a5412 [type=12(metadata) addr=0x00007f03f91a6d4b offset=130 format=3 data=19] | [metadata_addr=0x00007f03f91a9218 *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007f03f91a5414: f023cc78
relocInfo@0x00007f03f91a5416 [type=12(metadata) addr=0x00007f03f91a6dc3 offset=120 format=3 data=35] | [metadata_addr=0x00007f03f91a9298 *=0x0000000800098750 offset=0]metadata_value=0x0000000800098750: 'jdk/incubator/vector/Int256Vector$Int256Mask'
         @0x00007f03f91a5418: f80305fe48707f04740d
relocInfo@0x00007f03f91a5420 [type=7(external_word) addr=0x00007f03f91a6dd0 offset=13 format=1 data={05fe48707f04}] | [target=0x00007f0405fe4870]
         @0x00007f03f91a5422: f803055920d07f04700d
relocInfo@0x00007f03f91a542a [type=7(external_word) addr=0x00007f03f91a6ddd offset=13 data={055920d07f04}] | [target=0x00007f04055920d0]
         @0x00007f03f91a542c: 640e
relocInfo@0x00007f03f91a542c [type=6(runtime_call) addr=0x00007f03f91a6deb offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a542e: f803055921107f047011
relocInfo@0x00007f03f91a5436 [type=7(external_word) addr=0x00007f03f91a6dfc offset=17 data={055921107f04}] | [target=0x00007f0405592110]
         @0x00007f03f91a5438: 640e
relocInfo@0x00007f03f91a5438 [type=6(runtime_call) addr=0x00007f03f91a6e0a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a543a: f00a2425
relocInfo@0x00007f03f91a543c [type=2(virtual_call) addr=0x00007f03f91a6e2f offset=37 format=1 data=10] | [destination=0x00007f03f91124c0 cached_value=0x00007f03f91a6e25 metadata=0x0000000000000000]
         @0x00007f03f91a543e: f00a2418
relocInfo@0x00007f03f91a5440 [type=2(virtual_call) addr=0x00007f03f91a6e47 offset=24 format=1 data=10] | [destination=0x00007f03f9112500 cached_value=0x00007f03f91a6e3d metadata=0x0000000000000000]
         @0x00007f03f91a5442: f00a2420
relocInfo@0x00007f03f91a5444 [type=2(virtual_call) addr=0x00007f03f91a6e67 offset=32 format=1 data=10] | [destination=0x00007f03f9115f20 cached_value=0x00007f03f91a6e5d metadata=0x0000000000000000]
         @0x00007f03f91a5446: c01d
relocInfo@0x00007f03f91a5446 [type=12(metadata) addr=0x00007f03f91a6e84 offset=29] | [metadata_addr=0x00007f03f91a6e86 *=0x00000008000968f8 offset=0]metadata_value=0x00000008000968f8: 'jdk/incubator/vector/AbstractMask'
         @0x00007f03f91a5448: 3437
relocInfo@0x00007f03f91a5448 [type=3(opt_virtual_call) addr=0x00007f03f91a6ebb offset=55 format=1] | [destination=0x00007f03f9115c20 metadata=0x0000000000000000]
         @0x00007f03f91a544a: 6434
relocInfo@0x00007f03f91a544a [type=6(runtime_call) addr=0x00007f03f91a6eef offset=52 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a544c: f803053e27b87f047005
relocInfo@0x00007f03f91a5454 [type=7(external_word) addr=0x00007f03f91a6ef4 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5456: 640e
relocInfo@0x00007f03f91a5456 [type=6(runtime_call) addr=0x00007f03f91a6f02 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5458: 6445
relocInfo@0x00007f03f91a5458 [type=6(runtime_call) addr=0x00007f03f91a6f47 offset=69 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a545a: f803053e27b87f047005
relocInfo@0x00007f03f91a5462 [type=7(external_word) addr=0x00007f03f91a6f4c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5464: 640e
relocInfo@0x00007f03f91a5464 [type=6(runtime_call) addr=0x00007f03f91a6f5a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5466: 6445
relocInfo@0x00007f03f91a5466 [type=6(runtime_call) addr=0x00007f03f91a6f9f offset=69 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5468: f803053e27b87f047005
relocInfo@0x00007f03f91a5470 [type=7(external_word) addr=0x00007f03f91a6fa4 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5472: 640e
relocInfo@0x00007f03f91a5472 [type=6(runtime_call) addr=0x00007f03f91a6fb2 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5474: c01c
relocInfo@0x00007f03f91a5474 [type=12(metadata) addr=0x00007f03f91a6fce offset=28] | [metadata_addr=0x00007f03f91a6fd0 *=0x00000008000968f8 offset=0]metadata_value=0x00000008000968f8: 'jdk/incubator/vector/AbstractMask'
         @0x00007f03f91a5476: f0011c32
relocInfo@0x00007f03f91a5478 [type=1(oop) addr=0x00007f03f91a7000 offset=50 format=3 data=1] | [oop_addr=0x00007f03f91a9120 *=0x000000010188fcd0 offset=0]
         @0x00007f03f91a547a: 647f
relocInfo@0x00007f03f91a547a [type=6(runtime_call) addr=0x00007f03f91a707f offset=127 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a547c: f803053e27b87f047005
relocInfo@0x00007f03f91a5484 [type=7(external_word) addr=0x00007f03f91a7084 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5486: 640e
relocInfo@0x00007f03f91a5486 [type=6(runtime_call) addr=0x00007f03f91a7092 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5488: f00a242d
relocInfo@0x00007f03f91a548a [type=2(virtual_call) addr=0x00007f03f91a70bf offset=45 format=1 data=10] | [destination=0x00007f03f9199820 cached_value=0x00007f03f91a70b5 metadata=0x0000000000000000]
         @0x00007f03f91a548c: c01a
relocInfo@0x00007f03f91a548c [type=12(metadata) addr=0x00007f03f91a70d9 offset=26] | [metadata_addr=0x00007f03f91a70db *=0x0000000800094798 offset=0]metadata_value=0x0000000800094798: 'jdk/incubator/vector/AbstractSpecies'
         @0x00007f03f91a548e: 1013
relocInfo@0x00007f03f91a548e [type=1(oop) addr=0x00007f03f91a70ec offset=19] | [oop_addr=0x00007f03f91a70ee *=0x0000000101964ea8 offset=0]
         @0x00007f03f91a5490: f803f90875a07f03743f
relocInfo@0x00007f03f91a5498 [type=7(external_word) addr=0x00007f03f91a712b offset=63 format=1 data={f90875a07f03}] | [target=0x00007f03f90875a0]
         @0x00007f03f91a549a: f013cc81
relocInfo@0x00007f03f91a549c [type=12(metadata) addr=0x00007f03f91a71ac offset=129 format=3 data=19] | [metadata_addr=0x00007f03f91a9218 *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007f03f91a549e: f023cc77
relocInfo@0x00007f03f91a54a0 [type=12(metadata) addr=0x00007f03f91a7223 offset=119 format=3 data=35] | [metadata_addr=0x00007f03f91a9298 *=0x0000000800098750 offset=0]metadata_value=0x0000000800098750: 'jdk/incubator/vector/Int256Vector$Int256Mask'
         @0x00007f03f91a54a2: f80305fe48707f047409
relocInfo@0x00007f03f91a54aa [type=7(external_word) addr=0x00007f03f91a722c offset=9 format=1 data={05fe48707f04}] | [target=0x00007f0405fe4870]
         @0x00007f03f91a54ac: f803055920d07f04700d
relocInfo@0x00007f03f91a54b4 [type=7(external_word) addr=0x00007f03f91a7239 offset=13 data={055920d07f04}] | [target=0x00007f04055920d0]
         @0x00007f03f91a54b6: 640e
relocInfo@0x00007f03f91a54b6 [type=6(runtime_call) addr=0x00007f03f91a7247 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a54b8: f803055921107f047011
relocInfo@0x00007f03f91a54c0 [type=7(external_word) addr=0x00007f03f91a7258 offset=17 data={055921107f04}] | [target=0x00007f0405592110]
         @0x00007f03f91a54c2: 640e
relocInfo@0x00007f03f91a54c2 [type=6(runtime_call) addr=0x00007f03f91a7266 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a54c4: f00a2425
relocInfo@0x00007f03f91a54c6 [type=2(virtual_call) addr=0x00007f03f91a728b offset=37 format=1 data=10] | [destination=0x00007f03f9112440 cached_value=0x00007f03f91a7281 metadata=0x0000000000000000]
         @0x00007f03f91a54c8: f00a241c
relocInfo@0x00007f03f91a54ca [type=2(virtual_call) addr=0x00007f03f91a72a7 offset=28 format=1 data=10] | [destination=0x00007f03f9112480 cached_value=0x00007f03f91a729d metadata=0x0000000000000000]
         @0x00007f03f91a54cc: f00a242c
relocInfo@0x00007f03f91a54ce [type=2(virtual_call) addr=0x00007f03f91a72d3 offset=44 format=1 data=10] | [destination=0x00007f03f9115f20 cached_value=0x00007f03f91a72c9 metadata=0x0000000000000000]
         @0x00007f03f91a54d0: c01f
relocInfo@0x00007f03f91a54d0 [type=12(metadata) addr=0x00007f03f91a72f2 offset=31] | [metadata_addr=0x00007f03f91a72f4 *=0x00000008000968f8 offset=0]metadata_value=0x00000008000968f8: 'jdk/incubator/vector/AbstractMask'
         @0x00007f03f91a54d2: 3435
relocInfo@0x00007f03f91a54d2 [type=3(opt_virtual_call) addr=0x00007f03f91a7327 offset=53 format=1] | [destination=0x00007f03f9115c20 metadata=0x0000000000000000]
         @0x00007f03f91a54d4: 6418
relocInfo@0x00007f03f91a54d4 [type=6(runtime_call) addr=0x00007f03f91a733f offset=24 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a54d6: f803053e27b87f047005
relocInfo@0x00007f03f91a54de [type=7(external_word) addr=0x00007f03f91a7344 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a54e0: 640e
relocInfo@0x00007f03f91a54e0 [type=6(runtime_call) addr=0x00007f03f91a7352 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a54e2: 6449
relocInfo@0x00007f03f91a54e2 [type=6(runtime_call) addr=0x00007f03f91a739b offset=73 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a54e4: f803053e27b87f047005
relocInfo@0x00007f03f91a54ec [type=7(external_word) addr=0x00007f03f91a73a0 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a54ee: 640e
relocInfo@0x00007f03f91a54ee [type=6(runtime_call) addr=0x00007f03f91a73ae offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a54f0: f00a245d
relocInfo@0x00007f03f91a54f2 [type=2(virtual_call) addr=0x00007f03f91a740b offset=93 format=1 data=10] | [destination=0x00007f03f91652a0 cached_value=0x00007f03f91a7401 metadata=0x0000000000000000]
         @0x00007f03f91a54f4: c00a
relocInfo@0x00007f03f91a54f4 [type=12(metadata) addr=0x00007f03f91a7415 offset=10] | [metadata_addr=0x00007f03f91a7417 *=0x00000008000968f8 offset=0]metadata_value=0x00000008000968f8: 'jdk/incubator/vector/AbstractMask'
         @0x00007f03f91a54f6: f0011c2b
relocInfo@0x00007f03f91a54f8 [type=1(oop) addr=0x00007f03f91a7440 offset=43 format=3 data=1] | [oop_addr=0x00007f03f91a9120 *=0x000000010188fcd0 offset=0]
         @0x00007f03f91a54fa: 647b
relocInfo@0x00007f03f91a54fa [type=6(runtime_call) addr=0x00007f03f91a74bb offset=123 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a54fc: f803053e27b87f047005
relocInfo@0x00007f03f91a5504 [type=7(external_word) addr=0x00007f03f91a74c0 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5506: 640e
relocInfo@0x00007f03f91a5506 [type=6(runtime_call) addr=0x00007f03f91a74ce offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5508: f00a2435
relocInfo@0x00007f03f91a550a [type=2(virtual_call) addr=0x00007f03f91a7503 offset=53 format=1 data=10] | [destination=0x00007f03f9199820 cached_value=0x00007f03f91a74f9 metadata=0x0000000000000000]
         @0x00007f03f91a550c: c01d
relocInfo@0x00007f03f91a550c [type=12(metadata) addr=0x00007f03f91a7520 offset=29] | [metadata_addr=0x00007f03f91a7522 *=0x0000000800094798 offset=0]metadata_value=0x0000000800094798: 'jdk/incubator/vector/AbstractSpecies'
         @0x00007f03f91a550e: 1013
relocInfo@0x00007f03f91a550e [type=1(oop) addr=0x00007f03f91a7533 offset=19] | [oop_addr=0x00007f03f91a7535 *=0x0000000101964ea8 offset=0]
         @0x00007f03f91a5510: f803f90875a07f037441
relocInfo@0x00007f03f91a5518 [type=7(external_word) addr=0x00007f03f91a7574 offset=65 format=1 data={f90875a07f03}] | [target=0x00007f03f90875a0]
         @0x00007f03f91a551a: f013cc7b
relocInfo@0x00007f03f91a551c [type=12(metadata) addr=0x00007f03f91a75ef offset=123 format=3 data=19] | [metadata_addr=0x00007f03f91a9218 *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007f03f91a551e: f023cc74
relocInfo@0x00007f03f91a5520 [type=12(metadata) addr=0x00007f03f91a7663 offset=116 format=3 data=35] | [metadata_addr=0x00007f03f91a9298 *=0x0000000800098750 offset=0]metadata_value=0x0000000800098750: 'jdk/incubator/vector/Int256Vector$Int256Mask'
         @0x00007f03f91a5522: f80305fe48707f04740e
relocInfo@0x00007f03f91a552a [type=7(external_word) addr=0x00007f03f91a7671 offset=14 format=1 data={05fe48707f04}] | [target=0x00007f0405fe4870]
         @0x00007f03f91a552c: f803055920d07f04700d
relocInfo@0x00007f03f91a5534 [type=7(external_word) addr=0x00007f03f91a767e offset=13 data={055920d07f04}] | [target=0x00007f04055920d0]
         @0x00007f03f91a5536: 640e
relocInfo@0x00007f03f91a5536 [type=6(runtime_call) addr=0x00007f03f91a768c offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5538: f803055921107f047011
relocInfo@0x00007f03f91a5540 [type=7(external_word) addr=0x00007f03f91a769d offset=17 data={055921107f04}] | [target=0x00007f0405592110]
         @0x00007f03f91a5542: 640e
relocInfo@0x00007f03f91a5542 [type=6(runtime_call) addr=0x00007f03f91a76ab offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5544: f00a2428
relocInfo@0x00007f03f91a5546 [type=2(virtual_call) addr=0x00007f03f91a76d3 offset=40 format=1 data=10] | [destination=0x00007f03f91125c0 cached_value=0x00007f03f91a76c9 metadata=0x0000000000000000]
         @0x00007f03f91a5548: f00a241c
relocInfo@0x00007f03f91a554a [type=2(virtual_call) addr=0x00007f03f91a76ef offset=28 format=1 data=10] | [destination=0x00007f03f9112600 cached_value=0x00007f03f91a76e5 metadata=0x0000000000000000]
         @0x00007f03f91a554c: f00a2424
relocInfo@0x00007f03f91a554e [type=2(virtual_call) addr=0x00007f03f91a7713 offset=36 format=1 data=10] | [destination=0x00007f03f9115f20 cached_value=0x00007f03f91a7709 metadata=0x0000000000000000]
         @0x00007f03f91a5550: c01f
relocInfo@0x00007f03f91a5550 [type=12(metadata) addr=0x00007f03f91a7732 offset=31] | [metadata_addr=0x00007f03f91a7734 *=0x00000008000968f8 offset=0]metadata_value=0x00000008000968f8: 'jdk/incubator/vector/AbstractMask'
         @0x00007f03f91a5552: 3435
relocInfo@0x00007f03f91a5552 [type=3(opt_virtual_call) addr=0x00007f03f91a7767 offset=53 format=1] | [destination=0x00007f03f9115c20 metadata=0x0000000000000000]
         @0x00007f03f91a5554: 6430
relocInfo@0x00007f03f91a5554 [type=6(runtime_call) addr=0x00007f03f91a7797 offset=48 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5556: f803053e27b87f047005
relocInfo@0x00007f03f91a555e [type=7(external_word) addr=0x00007f03f91a779c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5560: 640e
relocInfo@0x00007f03f91a5560 [type=6(runtime_call) addr=0x00007f03f91a77aa offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5562: 6431
relocInfo@0x00007f03f91a5562 [type=6(runtime_call) addr=0x00007f03f91a77db offset=49 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5564: f803053e27b87f047005
relocInfo@0x00007f03f91a556c [type=7(external_word) addr=0x00007f03f91a77e0 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a556e: 640e
relocInfo@0x00007f03f91a556e [type=6(runtime_call) addr=0x00007f03f91a77ee offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5570: c019
relocInfo@0x00007f03f91a5570 [type=12(metadata) addr=0x00007f03f91a7807 offset=25] | [metadata_addr=0x00007f03f91a7809 *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007f03f91a5572: 6410
relocInfo@0x00007f03f91a5572 [type=6(runtime_call) addr=0x00007f03f91a7817 offset=16 format=1] | [destination=0x00007f03f9058620]
         @0x00007f03f91a5574: c050
relocInfo@0x00007f03f91a5574 [type=12(metadata) addr=0x00007f03f91a7867 offset=80] | [metadata_addr=0x00007f03f91a7869 *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007f03f91a5576: 6410
relocInfo@0x00007f03f91a5576 [type=6(runtime_call) addr=0x00007f03f91a7877 offset=16 format=1] | [destination=0x00007f03f9058620]
         @0x00007f03f91a5578: f01ccc49
relocInfo@0x00007f03f91a557a [type=12(metadata) addr=0x00007f03f91a78c0 offset=73 format=3 data=28] | [metadata_addr=0x00007f03f91a9260 *=0x0000000800098110 offset=0]metadata_value=0x0000000800098110: 'jdk/incubator/vector/Int256Vector'
         @0x00007f03f91a557c: f024cc20
relocInfo@0x00007f03f91a557e [type=12(metadata) addr=0x00007f03f91a78e0 offset=32 format=3 data=36] | [metadata_addr=0x00007f03f91a92a0 *=0x0000000800040c30 offset=0]metadata_value=0x0000000800040c30: {type array int}
         @0x00007f03f91a5580: f023cc20
relocInfo@0x00007f03f91a5582 [type=12(metadata) addr=0x00007f03f91a7900 offset=32 format=3 data=35] | [metadata_addr=0x00007f03f91a9298 *=0x0000000800098750 offset=0]metadata_value=0x0000000800098750: 'jdk/incubator/vector/Int256Vector$Int256Mask'
         @0x00007f03f91a5584: f013cc25
relocInfo@0x00007f03f91a5586 [type=12(metadata) addr=0x00007f03f91a7925 offset=37 format=3 data=19] | [metadata_addr=0x00007f03f91a9218 *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007f03f91a5588: f8030557a0787f0470fa
relocInfo@0x00007f03f91a5590 [type=7(external_word) addr=0x00007f03f91a7a1f offset=250 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91a5592: 640e
relocInfo@0x00007f03f91a5592 [type=6(runtime_call) addr=0x00007f03f91a7a2d offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5594: a0a5
relocInfo@0x00007f03f91a5594 [type=10(poll) addr=0x00007f03f91a7ad2 offset=165]
         @0x00007f03f91a5596: c08c
relocInfo@0x00007f03f91a5596 [type=12(metadata) addr=0x00007f03f91a7b5e offset=140] | [metadata_addr=0x00007f03f91a7b60 *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007f03f91a5598: 6415
relocInfo@0x00007f03f91a5598 [type=6(runtime_call) addr=0x00007f03f91a7b73 offset=21 format=1] | [destination=0x00007f03f9058620]
         @0x00007f03f91a559a: c01f
relocInfo@0x00007f03f91a559a [type=12(metadata) addr=0x00007f03f91a7b92 offset=31] | [metadata_addr=0x00007f03f91a7b94 *=0x0000000800098750 offset=0]metadata_value=0x0000000800098750: 'jdk/incubator/vector/Int256Vector$Int256Mask'
         @0x00007f03f91a559c: 640d
relocInfo@0x00007f03f91a559c [type=6(runtime_call) addr=0x00007f03f91a7b9f offset=13 format=1] | [destination=0x00007f03f9058920]
         @0x00007f03f91a559e: c016
relocInfo@0x00007f03f91a559e [type=12(metadata) addr=0x00007f03f91a7bb5 offset=22] | [metadata_addr=0x00007f03f91a7bb7 *=0x0000000800040c30 offset=0]metadata_value=0x0000000800040c30: {type array int}
         @0x00007f03f91a55a0: 6412
relocInfo@0x00007f03f91a55a0 [type=6(runtime_call) addr=0x00007f03f91a7bc7 offset=18 format=1] | [destination=0x00007f03f9058620]
         @0x00007f03f91a55a2: c016
relocInfo@0x00007f03f91a55a2 [type=12(metadata) addr=0x00007f03f91a7bdd offset=22] | [metadata_addr=0x00007f03f91a7bdf *=0x0000000800098110 offset=0]metadata_value=0x0000000800098110: 'jdk/incubator/vector/Int256Vector'
         @0x00007f03f91a55a4: 6416
relocInfo@0x00007f03f91a55a4 [type=6(runtime_call) addr=0x00007f03f91a7bf3 offset=22 format=1] | [destination=0x00007f03f9058920]
         @0x00007f03f91a55a6: 6438
relocInfo@0x00007f03f91a55a6 [type=6(runtime_call) addr=0x00007f03f91a7c2b offset=56 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a55a8: f803053e27b87f047005
relocInfo@0x00007f03f91a55b0 [type=7(external_word) addr=0x00007f03f91a7c30 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a55b2: 640e
relocInfo@0x00007f03f91a55b2 [type=6(runtime_call) addr=0x00007f03f91a7c3e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a55b4: 643d
relocInfo@0x00007f03f91a55b4 [type=6(runtime_call) addr=0x00007f03f91a7c7b offset=61 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a55b6: f803053e27b87f047005
relocInfo@0x00007f03f91a55be [type=7(external_word) addr=0x00007f03f91a7c80 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a55c0: 640e
relocInfo@0x00007f03f91a55c0 [type=6(runtime_call) addr=0x00007f03f91a7c8e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a55c2: 642d
relocInfo@0x00007f03f91a55c2 [type=6(runtime_call) addr=0x00007f03f91a7cbb offset=45 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a55c4: f803053e27b87f047005
relocInfo@0x00007f03f91a55cc [type=7(external_word) addr=0x00007f03f91a7cc0 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a55ce: 640e
relocInfo@0x00007f03f91a55ce [type=6(runtime_call) addr=0x00007f03f91a7cce offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a55d0: c010
relocInfo@0x00007f03f91a55d0 [type=12(metadata) addr=0x00007f03f91a7cde offset=16] | [metadata_addr=0x00007f03f91a7ce0 *=0x00000008000acb58 offset=0]metadata_value=0x00000008000acb58: 'jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58'
         @0x00007f03f91a55d2: 640d
relocInfo@0x00007f03f91a55d2 [type=6(runtime_call) addr=0x00007f03f91a7ceb offset=13 format=1] | [destination=0x00007f03f9058920]
         @0x00007f03f91a55d4: c016
relocInfo@0x00007f03f91a55d4 [type=12(metadata) addr=0x00007f03f91a7d01 offset=22] | [metadata_addr=0x00007f03f91a7d03 *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007f03f91a55d6: 6412
relocInfo@0x00007f03f91a55d6 [type=6(runtime_call) addr=0x00007f03f91a7d13 offset=18 format=1] | [destination=0x00007f03f9058620]
         @0x00007f03f91a55d8: c02a
relocInfo@0x00007f03f91a55d8 [type=12(metadata) addr=0x00007f03f91a7d3d offset=42] | [metadata_addr=0x00007f03f91a7d3f *=0x0000000800098750 offset=0]metadata_value=0x0000000800098750: 'jdk/incubator/vector/Int256Vector$Int256Mask'
         @0x00007f03f91a55da: 640e
relocInfo@0x00007f03f91a55da [type=6(runtime_call) addr=0x00007f03f91a7d4b offset=14 format=1] | [destination=0x00007f03f9058920]
         @0x00007f03f91a55dc: 643c
relocInfo@0x00007f03f91a55dc [type=6(runtime_call) addr=0x00007f03f91a7d87 offset=60 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a55de: f803053e27b87f047005
relocInfo@0x00007f03f91a55e6 [type=7(external_word) addr=0x00007f03f91a7d8c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a55e8: 640e
relocInfo@0x00007f03f91a55e8 [type=6(runtime_call) addr=0x00007f03f91a7d9a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a55ea: 6411
relocInfo@0x00007f03f91a55ea [type=6(runtime_call) addr=0x00007f03f91a7dab offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a55ec: f803053e27b87f047005
relocInfo@0x00007f03f91a55f4 [type=7(external_word) addr=0x00007f03f91a7db0 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a55f6: 640e
relocInfo@0x00007f03f91a55f6 [type=6(runtime_call) addr=0x00007f03f91a7dbe offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a55f8: 6411
relocInfo@0x00007f03f91a55f8 [type=6(runtime_call) addr=0x00007f03f91a7dcf offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a55fa: f803053e27b87f047005
relocInfo@0x00007f03f91a5602 [type=7(external_word) addr=0x00007f03f91a7dd4 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5604: 640e
relocInfo@0x00007f03f91a5604 [type=6(runtime_call) addr=0x00007f03f91a7de2 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5606: 641d
relocInfo@0x00007f03f91a5606 [type=6(runtime_call) addr=0x00007f03f91a7dff offset=29 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5608: f803053e27b87f047005
relocInfo@0x00007f03f91a5610 [type=7(external_word) addr=0x00007f03f91a7e04 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5612: 640e
relocInfo@0x00007f03f91a5612 [type=6(runtime_call) addr=0x00007f03f91a7e12 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5614: 6411
relocInfo@0x00007f03f91a5614 [type=6(runtime_call) addr=0x00007f03f91a7e23 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5616: f803053e27b87f047005
relocInfo@0x00007f03f91a561e [type=7(external_word) addr=0x00007f03f91a7e28 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5620: 640e
relocInfo@0x00007f03f91a5620 [type=6(runtime_call) addr=0x00007f03f91a7e36 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5622: 6411
relocInfo@0x00007f03f91a5622 [type=6(runtime_call) addr=0x00007f03f91a7e47 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5624: f803053e27b87f047005
relocInfo@0x00007f03f91a562c [type=7(external_word) addr=0x00007f03f91a7e4c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a562e: 640e
relocInfo@0x00007f03f91a562e [type=6(runtime_call) addr=0x00007f03f91a7e5a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5630: 6439
relocInfo@0x00007f03f91a5630 [type=6(runtime_call) addr=0x00007f03f91a7e93 offset=57 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5632: f803053e27b87f047005
relocInfo@0x00007f03f91a563a [type=7(external_word) addr=0x00007f03f91a7e98 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a563c: 640e
relocInfo@0x00007f03f91a563c [type=6(runtime_call) addr=0x00007f03f91a7ea6 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a563e: f8030557a0787f047006
relocInfo@0x00007f03f91a5646 [type=7(external_word) addr=0x00007f03f91a7eac offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91a5648: 640e
relocInfo@0x00007f03f91a5648 [type=6(runtime_call) addr=0x00007f03f91a7eba offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a564a: f8030557a0787f047006
relocInfo@0x00007f03f91a5652 [type=7(external_word) addr=0x00007f03f91a7ec0 offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91a5654: 640e
relocInfo@0x00007f03f91a5654 [type=6(runtime_call) addr=0x00007f03f91a7ece offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5656: 6445
relocInfo@0x00007f03f91a5656 [type=6(runtime_call) addr=0x00007f03f91a7f13 offset=69 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5658: f803053e27b87f047005
relocInfo@0x00007f03f91a5660 [type=7(external_word) addr=0x00007f03f91a7f18 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5662: 640e
relocInfo@0x00007f03f91a5662 [type=6(runtime_call) addr=0x00007f03f91a7f26 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5664: f8030557a0787f047016
relocInfo@0x00007f03f91a566c [type=7(external_word) addr=0x00007f03f91a7f3c offset=22 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91a566e: 640e
relocInfo@0x00007f03f91a566e [type=6(runtime_call) addr=0x00007f03f91a7f4a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5670: f8030557a0787f047006
relocInfo@0x00007f03f91a5678 [type=7(external_word) addr=0x00007f03f91a7f50 offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91a567a: 640e
relocInfo@0x00007f03f91a567a [type=6(runtime_call) addr=0x00007f03f91a7f5e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a567c: 6431
relocInfo@0x00007f03f91a567c [type=6(runtime_call) addr=0x00007f03f91a7f8f offset=49 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a567e: f803053e27b87f047005
relocInfo@0x00007f03f91a5686 [type=7(external_word) addr=0x00007f03f91a7f94 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5688: 640e
relocInfo@0x00007f03f91a5688 [type=6(runtime_call) addr=0x00007f03f91a7fa2 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a568a: 6431
relocInfo@0x00007f03f91a568a [type=6(runtime_call) addr=0x00007f03f91a7fd3 offset=49 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a568c: f803053e27b87f047005
relocInfo@0x00007f03f91a5694 [type=7(external_word) addr=0x00007f03f91a7fd8 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5696: 640e
relocInfo@0x00007f03f91a5696 [type=6(runtime_call) addr=0x00007f03f91a7fe6 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5698: 6411
relocInfo@0x00007f03f91a5698 [type=6(runtime_call) addr=0x00007f03f91a7ff7 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a569a: f803053e27b87f047005
relocInfo@0x00007f03f91a56a2 [type=7(external_word) addr=0x00007f03f91a7ffc offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a56a4: 640e
relocInfo@0x00007f03f91a56a4 [type=6(runtime_call) addr=0x00007f03f91a800a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a56a6: 6435
relocInfo@0x00007f03f91a56a6 [type=6(runtime_call) addr=0x00007f03f91a803f offset=53 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a56a8: f803053e27b87f047005
relocInfo@0x00007f03f91a56b0 [type=7(external_word) addr=0x00007f03f91a8044 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a56b2: 640e
relocInfo@0x00007f03f91a56b2 [type=6(runtime_call) addr=0x00007f03f91a8052 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a56b4: c016
relocInfo@0x00007f03f91a56b4 [type=12(metadata) addr=0x00007f03f91a8068 offset=22] | [metadata_addr=0x00007f03f91a806a *=0x0000000800040c30 offset=0]metadata_value=0x0000000800040c30: {type array int}
         @0x00007f03f91a56b6: 6413
relocInfo@0x00007f03f91a56b6 [type=6(runtime_call) addr=0x00007f03f91a807b offset=19 format=1] | [destination=0x00007f03f9058620]
         @0x00007f03f91a56b8: c016
relocInfo@0x00007f03f91a56b8 [type=12(metadata) addr=0x00007f03f91a8091 offset=22] | [metadata_addr=0x00007f03f91a8093 *=0x0000000800098110 offset=0]metadata_value=0x0000000800098110: 'jdk/incubator/vector/Int256Vector'
         @0x00007f03f91a56ba: 6416
relocInfo@0x00007f03f91a56ba [type=6(runtime_call) addr=0x00007f03f91a80a7 offset=22 format=1] | [destination=0x00007f03f9058920]
         @0x00007f03f91a56bc: 6418
relocInfo@0x00007f03f91a56bc [type=6(runtime_call) addr=0x00007f03f91a80bf offset=24 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a56be: f803053e27b87f047005
relocInfo@0x00007f03f91a56c6 [type=7(external_word) addr=0x00007f03f91a80c4 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a56c8: 640e
relocInfo@0x00007f03f91a56c8 [type=6(runtime_call) addr=0x00007f03f91a80d2 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a56ca: 6421
relocInfo@0x00007f03f91a56ca [type=6(runtime_call) addr=0x00007f03f91a80f3 offset=33 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a56cc: f803053e27b87f047005
relocInfo@0x00007f03f91a56d4 [type=7(external_word) addr=0x00007f03f91a80f8 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a56d6: 640e
relocInfo@0x00007f03f91a56d6 [type=6(runtime_call) addr=0x00007f03f91a8106 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a56d8: 643d
relocInfo@0x00007f03f91a56d8 [type=6(runtime_call) addr=0x00007f03f91a8143 offset=61 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a56da: f803053e27b87f047005
relocInfo@0x00007f03f91a56e2 [type=7(external_word) addr=0x00007f03f91a8148 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a56e4: 640e
relocInfo@0x00007f03f91a56e4 [type=6(runtime_call) addr=0x00007f03f91a8156 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a56e6: 643d
relocInfo@0x00007f03f91a56e6 [type=6(runtime_call) addr=0x00007f03f91a8193 offset=61 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a56e8: f803053e27b87f047005
relocInfo@0x00007f03f91a56f0 [type=7(external_word) addr=0x00007f03f91a8198 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a56f2: 640e
relocInfo@0x00007f03f91a56f2 [type=6(runtime_call) addr=0x00007f03f91a81a6 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a56f4: 6449
relocInfo@0x00007f03f91a56f4 [type=6(runtime_call) addr=0x00007f03f91a81ef offset=73 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a56f6: f803053e27b87f047005
relocInfo@0x00007f03f91a56fe [type=7(external_word) addr=0x00007f03f91a81f4 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5700: 640e
relocInfo@0x00007f03f91a5700 [type=6(runtime_call) addr=0x00007f03f91a8202 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5702: 6439
relocInfo@0x00007f03f91a5702 [type=6(runtime_call) addr=0x00007f03f91a823b offset=57 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5704: f803053e27b87f047005
relocInfo@0x00007f03f91a570c [type=7(external_word) addr=0x00007f03f91a8240 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a570e: 640e
relocInfo@0x00007f03f91a570e [type=6(runtime_call) addr=0x00007f03f91a824e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5710: 6439
relocInfo@0x00007f03f91a5710 [type=6(runtime_call) addr=0x00007f03f91a8287 offset=57 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5712: f803053e27b87f047005
relocInfo@0x00007f03f91a571a [type=7(external_word) addr=0x00007f03f91a828c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a571c: 640e
relocInfo@0x00007f03f91a571c [type=6(runtime_call) addr=0x00007f03f91a829a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a571e: 6411
relocInfo@0x00007f03f91a571e [type=6(runtime_call) addr=0x00007f03f91a82ab offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5720: f803053e27b87f047005
relocInfo@0x00007f03f91a5728 [type=7(external_word) addr=0x00007f03f91a82b0 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a572a: 640e
relocInfo@0x00007f03f91a572a [type=6(runtime_call) addr=0x00007f03f91a82be offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a572c: c006
relocInfo@0x00007f03f91a572c [type=12(metadata) addr=0x00007f03f91a82c4 offset=6] | [metadata_addr=0x00007f03f91a82c6 *=0x00000008000acb58 offset=0]metadata_value=0x00000008000acb58: 'jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58'
         @0x00007f03f91a572e: 640f
relocInfo@0x00007f03f91a572e [type=6(runtime_call) addr=0x00007f03f91a82d3 offset=15 format=1] | [destination=0x00007f03f9058920]
         @0x00007f03f91a5730: 6420
relocInfo@0x00007f03f91a5730 [type=6(runtime_call) addr=0x00007f03f91a82f3 offset=32 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5732: f803053e27b87f047005
relocInfo@0x00007f03f91a573a [type=7(external_word) addr=0x00007f03f91a82f8 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a573c: 640e
relocInfo@0x00007f03f91a573c [type=6(runtime_call) addr=0x00007f03f91a8306 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a573e: 644d
relocInfo@0x00007f03f91a573e [type=6(runtime_call) addr=0x00007f03f91a8353 offset=77 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5740: f803053e27b87f047005
relocInfo@0x00007f03f91a5748 [type=7(external_word) addr=0x00007f03f91a8358 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a574a: 640e
relocInfo@0x00007f03f91a574a [type=6(runtime_call) addr=0x00007f03f91a8366 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a574c: 6431
relocInfo@0x00007f03f91a574c [type=6(runtime_call) addr=0x00007f03f91a8397 offset=49 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a574e: f803053e27b87f047005
relocInfo@0x00007f03f91a5756 [type=7(external_word) addr=0x00007f03f91a839c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5758: 640e
relocInfo@0x00007f03f91a5758 [type=6(runtime_call) addr=0x00007f03f91a83aa offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a575a: 6449
relocInfo@0x00007f03f91a575a [type=6(runtime_call) addr=0x00007f03f91a83f3 offset=73 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a575c: f803053e27b87f047005
relocInfo@0x00007f03f91a5764 [type=7(external_word) addr=0x00007f03f91a83f8 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5766: 640e
relocInfo@0x00007f03f91a5766 [type=6(runtime_call) addr=0x00007f03f91a8406 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5768: 6411
relocInfo@0x00007f03f91a5768 [type=6(runtime_call) addr=0x00007f03f91a8417 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a576a: f803053e27b87f047005
relocInfo@0x00007f03f91a5772 [type=7(external_word) addr=0x00007f03f91a841c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5774: 640e
relocInfo@0x00007f03f91a5774 [type=6(runtime_call) addr=0x00007f03f91a842a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5776: 6411
relocInfo@0x00007f03f91a5776 [type=6(runtime_call) addr=0x00007f03f91a843b offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5778: f803053e27b87f047005
relocInfo@0x00007f03f91a5780 [type=7(external_word) addr=0x00007f03f91a8440 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5782: 640e
relocInfo@0x00007f03f91a5782 [type=6(runtime_call) addr=0x00007f03f91a844e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5784: 643d
relocInfo@0x00007f03f91a5784 [type=6(runtime_call) addr=0x00007f03f91a848b offset=61 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5786: f803053e27b87f047005
relocInfo@0x00007f03f91a578e [type=7(external_word) addr=0x00007f03f91a8490 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5790: 640e
relocInfo@0x00007f03f91a5790 [type=6(runtime_call) addr=0x00007f03f91a849e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5792: 6439
relocInfo@0x00007f03f91a5792 [type=6(runtime_call) addr=0x00007f03f91a84d7 offset=57 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5794: f803053e27b87f047005
relocInfo@0x00007f03f91a579c [type=7(external_word) addr=0x00007f03f91a84dc offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a579e: 640e
relocInfo@0x00007f03f91a579e [type=6(runtime_call) addr=0x00007f03f91a84ea offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a57a0: 6415
relocInfo@0x00007f03f91a57a0 [type=6(runtime_call) addr=0x00007f03f91a84ff offset=21 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a57a2: f803053e27b87f047005
relocInfo@0x00007f03f91a57aa [type=7(external_word) addr=0x00007f03f91a8504 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a57ac: 640e
relocInfo@0x00007f03f91a57ac [type=6(runtime_call) addr=0x00007f03f91a8512 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a57ae: 6411
relocInfo@0x00007f03f91a57ae [type=6(runtime_call) addr=0x00007f03f91a8523 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a57b0: f803053e27b87f047005
relocInfo@0x00007f03f91a57b8 [type=7(external_word) addr=0x00007f03f91a8528 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a57ba: 640e
relocInfo@0x00007f03f91a57ba [type=6(runtime_call) addr=0x00007f03f91a8536 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a57bc: 642d
relocInfo@0x00007f03f91a57bc [type=6(runtime_call) addr=0x00007f03f91a8563 offset=45 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a57be: f803053e27b87f047005
relocInfo@0x00007f03f91a57c6 [type=7(external_word) addr=0x00007f03f91a8568 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a57c8: 640e
relocInfo@0x00007f03f91a57c8 [type=6(runtime_call) addr=0x00007f03f91a8576 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a57ca: 6439
relocInfo@0x00007f03f91a57ca [type=6(runtime_call) addr=0x00007f03f91a85af offset=57 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a57cc: f803053e27b87f047005
relocInfo@0x00007f03f91a57d4 [type=7(external_word) addr=0x00007f03f91a85b4 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a57d6: 640e
relocInfo@0x00007f03f91a57d6 [type=6(runtime_call) addr=0x00007f03f91a85c2 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a57d8: c01e
relocInfo@0x00007f03f91a57d8 [type=12(metadata) addr=0x00007f03f91a85e0 offset=30] | [metadata_addr=0x00007f03f91a85e2 *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007f03f91a57da: 6413
relocInfo@0x00007f03f91a57da [type=6(runtime_call) addr=0x00007f03f91a85f3 offset=19 format=1] | [destination=0x00007f03f9058620]
         @0x00007f03f91a57dc: c028
relocInfo@0x00007f03f91a57dc [type=12(metadata) addr=0x00007f03f91a861b offset=40] | [metadata_addr=0x00007f03f91a861d *=0x0000000800098750 offset=0]metadata_value=0x0000000800098750: 'jdk/incubator/vector/Int256Vector$Int256Mask'
         @0x00007f03f91a57de: 6410
relocInfo@0x00007f03f91a57de [type=6(runtime_call) addr=0x00007f03f91a862b offset=16 format=1] | [destination=0x00007f03f9058920]
         @0x00007f03f91a57e0: 6430
relocInfo@0x00007f03f91a57e0 [type=6(runtime_call) addr=0x00007f03f91a865b offset=48 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a57e2: f803053e27b87f047005
relocInfo@0x00007f03f91a57ea [type=7(external_word) addr=0x00007f03f91a8660 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a57ec: 640e
relocInfo@0x00007f03f91a57ec [type=6(runtime_call) addr=0x00007f03f91a866e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a57ee: 6429
relocInfo@0x00007f03f91a57ee [type=6(runtime_call) addr=0x00007f03f91a8697 offset=41 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a57f0: f803053e27b87f047005
relocInfo@0x00007f03f91a57f8 [type=7(external_word) addr=0x00007f03f91a869c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a57fa: 640e
relocInfo@0x00007f03f91a57fa [type=6(runtime_call) addr=0x00007f03f91a86aa offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a57fc: 6411
relocInfo@0x00007f03f91a57fc [type=6(runtime_call) addr=0x00007f03f91a86bb offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a57fe: f803053e27b87f047005
relocInfo@0x00007f03f91a5806 [type=7(external_word) addr=0x00007f03f91a86c0 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5808: 640e
relocInfo@0x00007f03f91a5808 [type=6(runtime_call) addr=0x00007f03f91a86ce offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a580a: 6411
relocInfo@0x00007f03f91a580a [type=6(runtime_call) addr=0x00007f03f91a86df offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a580c: f803053e27b87f047005
relocInfo@0x00007f03f91a5814 [type=7(external_word) addr=0x00007f03f91a86e4 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5816: 640e
relocInfo@0x00007f03f91a5816 [type=6(runtime_call) addr=0x00007f03f91a86f2 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5818: 6411
relocInfo@0x00007f03f91a5818 [type=6(runtime_call) addr=0x00007f03f91a8703 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a581a: f803053e27b87f047005
relocInfo@0x00007f03f91a5822 [type=7(external_word) addr=0x00007f03f91a8708 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5824: 640e
relocInfo@0x00007f03f91a5824 [type=6(runtime_call) addr=0x00007f03f91a8716 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5826: 6439
relocInfo@0x00007f03f91a5826 [type=6(runtime_call) addr=0x00007f03f91a874f offset=57 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5828: f803053e27b87f047005
relocInfo@0x00007f03f91a5830 [type=7(external_word) addr=0x00007f03f91a8754 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5832: 640e
relocInfo@0x00007f03f91a5832 [type=6(runtime_call) addr=0x00007f03f91a8762 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5834: 6431
relocInfo@0x00007f03f91a5834 [type=6(runtime_call) addr=0x00007f03f91a8793 offset=49 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5836: f803053e27b87f047005
relocInfo@0x00007f03f91a583e [type=7(external_word) addr=0x00007f03f91a8798 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5840: 640e
relocInfo@0x00007f03f91a5840 [type=6(runtime_call) addr=0x00007f03f91a87a6 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5842: 6411
relocInfo@0x00007f03f91a5842 [type=6(runtime_call) addr=0x00007f03f91a87b7 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5844: f803053e27b87f047005
relocInfo@0x00007f03f91a584c [type=7(external_word) addr=0x00007f03f91a87bc offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a584e: 640e
relocInfo@0x00007f03f91a584e [type=6(runtime_call) addr=0x00007f03f91a87ca offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5850: 6419
relocInfo@0x00007f03f91a5850 [type=6(runtime_call) addr=0x00007f03f91a87e3 offset=25 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5852: f803053e27b87f047005
relocInfo@0x00007f03f91a585a [type=7(external_word) addr=0x00007f03f91a87e8 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a585c: 640e
relocInfo@0x00007f03f91a585c [type=6(runtime_call) addr=0x00007f03f91a87f6 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a585e: 6411
relocInfo@0x00007f03f91a585e [type=6(runtime_call) addr=0x00007f03f91a8807 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5860: f803053e27b87f047005
relocInfo@0x00007f03f91a5868 [type=7(external_word) addr=0x00007f03f91a880c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a586a: 640e
relocInfo@0x00007f03f91a586a [type=6(runtime_call) addr=0x00007f03f91a881a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a586c: 6415
relocInfo@0x00007f03f91a586c [type=6(runtime_call) addr=0x00007f03f91a882f offset=21 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a586e: f803053e27b87f047005
relocInfo@0x00007f03f91a5876 [type=7(external_word) addr=0x00007f03f91a8834 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5878: 640e
relocInfo@0x00007f03f91a5878 [type=6(runtime_call) addr=0x00007f03f91a8842 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a587a: 6415
relocInfo@0x00007f03f91a587a [type=6(runtime_call) addr=0x00007f03f91a8857 offset=21 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a587c: f803053e27b87f047005
relocInfo@0x00007f03f91a5884 [type=7(external_word) addr=0x00007f03f91a885c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5886: 640e
relocInfo@0x00007f03f91a5886 [type=6(runtime_call) addr=0x00007f03f91a886a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5888: 6429
relocInfo@0x00007f03f91a5888 [type=6(runtime_call) addr=0x00007f03f91a8893 offset=41 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a588a: f803053e27b87f047005
relocInfo@0x00007f03f91a5892 [type=7(external_word) addr=0x00007f03f91a8898 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5894: 640e
relocInfo@0x00007f03f91a5894 [type=6(runtime_call) addr=0x00007f03f91a88a6 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5896: 6425
relocInfo@0x00007f03f91a5896 [type=6(runtime_call) addr=0x00007f03f91a88cb offset=37 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5898: f803053e27b87f047005
relocInfo@0x00007f03f91a58a0 [type=7(external_word) addr=0x00007f03f91a88d0 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a58a2: 640e
relocInfo@0x00007f03f91a58a2 [type=6(runtime_call) addr=0x00007f03f91a88de offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a58a4: 6425
relocInfo@0x00007f03f91a58a4 [type=6(runtime_call) addr=0x00007f03f91a8903 offset=37 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a58a6: f803053e27b87f047005
relocInfo@0x00007f03f91a58ae [type=7(external_word) addr=0x00007f03f91a8908 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a58b0: 640e
relocInfo@0x00007f03f91a58b0 [type=6(runtime_call) addr=0x00007f03f91a8916 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a58b2: 6415
relocInfo@0x00007f03f91a58b2 [type=6(runtime_call) addr=0x00007f03f91a892b offset=21 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a58b4: f803053e27b87f047005
relocInfo@0x00007f03f91a58bc [type=7(external_word) addr=0x00007f03f91a8930 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a58be: 640e
relocInfo@0x00007f03f91a58be [type=6(runtime_call) addr=0x00007f03f91a893e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a58c0: 6411
relocInfo@0x00007f03f91a58c0 [type=6(runtime_call) addr=0x00007f03f91a894f offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a58c2: f803053e27b87f047005
relocInfo@0x00007f03f91a58ca [type=7(external_word) addr=0x00007f03f91a8954 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a58cc: 640e
relocInfo@0x00007f03f91a58cc [type=6(runtime_call) addr=0x00007f03f91a8962 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a58ce: 6411
relocInfo@0x00007f03f91a58ce [type=6(runtime_call) addr=0x00007f03f91a8973 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a58d0: f803053e27b87f047005
relocInfo@0x00007f03f91a58d8 [type=7(external_word) addr=0x00007f03f91a8978 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a58da: 640e
relocInfo@0x00007f03f91a58da [type=6(runtime_call) addr=0x00007f03f91a8986 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a58dc: 6411
relocInfo@0x00007f03f91a58dc [type=6(runtime_call) addr=0x00007f03f91a8997 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a58de: f803053e27b87f047005
relocInfo@0x00007f03f91a58e6 [type=7(external_word) addr=0x00007f03f91a899c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a58e8: 640e
relocInfo@0x00007f03f91a58e8 [type=6(runtime_call) addr=0x00007f03f91a89aa offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a58ea: 6425
relocInfo@0x00007f03f91a58ea [type=6(runtime_call) addr=0x00007f03f91a89cf offset=37 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a58ec: f803053e27b87f047005
relocInfo@0x00007f03f91a58f4 [type=7(external_word) addr=0x00007f03f91a89d4 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a58f6: 640e
relocInfo@0x00007f03f91a58f6 [type=6(runtime_call) addr=0x00007f03f91a89e2 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a58f8: 6455
relocInfo@0x00007f03f91a58f8 [type=6(runtime_call) addr=0x00007f03f91a8a37 offset=85 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a58fa: f803053e27b87f047005
relocInfo@0x00007f03f91a5902 [type=7(external_word) addr=0x00007f03f91a8a3c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5904: 640e
relocInfo@0x00007f03f91a5904 [type=6(runtime_call) addr=0x00007f03f91a8a4a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5906: 6419
relocInfo@0x00007f03f91a5906 [type=6(runtime_call) addr=0x00007f03f91a8a63 offset=25 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5908: f803053e27b87f047005
relocInfo@0x00007f03f91a5910 [type=7(external_word) addr=0x00007f03f91a8a68 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5912: 640e
relocInfo@0x00007f03f91a5912 [type=6(runtime_call) addr=0x00007f03f91a8a76 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5914: 6421
relocInfo@0x00007f03f91a5914 [type=6(runtime_call) addr=0x00007f03f91a8a97 offset=33 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5916: f803053e27b87f047005
relocInfo@0x00007f03f91a591e [type=7(external_word) addr=0x00007f03f91a8a9c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5920: 640e
relocInfo@0x00007f03f91a5920 [type=6(runtime_call) addr=0x00007f03f91a8aaa offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5922: 6421
relocInfo@0x00007f03f91a5922 [type=6(runtime_call) addr=0x00007f03f91a8acb offset=33 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5924: f803053e27b87f047005
relocInfo@0x00007f03f91a592c [type=7(external_word) addr=0x00007f03f91a8ad0 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a592e: 640e
relocInfo@0x00007f03f91a592e [type=6(runtime_call) addr=0x00007f03f91a8ade offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5930: f8030557a0787f047006
relocInfo@0x00007f03f91a5938 [type=7(external_word) addr=0x00007f03f91a8ae4 offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91a593a: 640e
relocInfo@0x00007f03f91a593a [type=6(runtime_call) addr=0x00007f03f91a8af2 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a593c: f8030557a0787f047006
relocInfo@0x00007f03f91a5944 [type=7(external_word) addr=0x00007f03f91a8af8 offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91a5946: 640e
relocInfo@0x00007f03f91a5946 [type=6(runtime_call) addr=0x00007f03f91a8b06 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5948: f8030557a0787f047006
relocInfo@0x00007f03f91a5950 [type=7(external_word) addr=0x00007f03f91a8b0c offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91a5952: 640e
relocInfo@0x00007f03f91a5952 [type=6(runtime_call) addr=0x00007f03f91a8b1a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5954: f8030557a0787f047006
relocInfo@0x00007f03f91a595c [type=7(external_word) addr=0x00007f03f91a8b20 offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91a595e: 640e
relocInfo@0x00007f03f91a595e [type=6(runtime_call) addr=0x00007f03f91a8b2e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5960: f8030557a0787f047006
relocInfo@0x00007f03f91a5968 [type=7(external_word) addr=0x00007f03f91a8b34 offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91a596a: 640e
relocInfo@0x00007f03f91a596a [type=6(runtime_call) addr=0x00007f03f91a8b42 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a596c: f8030557a0787f047006
relocInfo@0x00007f03f91a5974 [type=7(external_word) addr=0x00007f03f91a8b48 offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91a5976: 640e
relocInfo@0x00007f03f91a5976 [type=6(runtime_call) addr=0x00007f03f91a8b56 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5978: 6411
relocInfo@0x00007f03f91a5978 [type=6(runtime_call) addr=0x00007f03f91a8b67 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a597a: f803053e27b87f047005
relocInfo@0x00007f03f91a5982 [type=7(external_word) addr=0x00007f03f91a8b6c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5984: 640e
relocInfo@0x00007f03f91a5984 [type=6(runtime_call) addr=0x00007f03f91a8b7a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5986: 641d
relocInfo@0x00007f03f91a5986 [type=6(runtime_call) addr=0x00007f03f91a8b97 offset=29 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5988: f803053e27b87f047005
relocInfo@0x00007f03f91a5990 [type=7(external_word) addr=0x00007f03f91a8b9c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5992: 640e
relocInfo@0x00007f03f91a5992 [type=6(runtime_call) addr=0x00007f03f91a8baa offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5994: 6425
relocInfo@0x00007f03f91a5994 [type=6(runtime_call) addr=0x00007f03f91a8bcf offset=37 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5996: f803053e27b87f047005
relocInfo@0x00007f03f91a599e [type=7(external_word) addr=0x00007f03f91a8bd4 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a59a0: 640e
relocInfo@0x00007f03f91a59a0 [type=6(runtime_call) addr=0x00007f03f91a8be2 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a59a2: 6411
relocInfo@0x00007f03f91a59a2 [type=6(runtime_call) addr=0x00007f03f91a8bf3 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a59a4: f803053e27b87f047005
relocInfo@0x00007f03f91a59ac [type=7(external_word) addr=0x00007f03f91a8bf8 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a59ae: 640e
relocInfo@0x00007f03f91a59ae [type=6(runtime_call) addr=0x00007f03f91a8c06 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a59b0: 641d
relocInfo@0x00007f03f91a59b0 [type=6(runtime_call) addr=0x00007f03f91a8c23 offset=29 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a59b2: f803053e27b87f047005
relocInfo@0x00007f03f91a59ba [type=7(external_word) addr=0x00007f03f91a8c28 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a59bc: 640e
relocInfo@0x00007f03f91a59bc [type=6(runtime_call) addr=0x00007f03f91a8c36 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a59be: 6411
relocInfo@0x00007f03f91a59be [type=6(runtime_call) addr=0x00007f03f91a8c47 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a59c0: f803053e27b87f047005
relocInfo@0x00007f03f91a59c8 [type=7(external_word) addr=0x00007f03f91a8c4c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a59ca: 640e
relocInfo@0x00007f03f91a59ca [type=6(runtime_call) addr=0x00007f03f91a8c5a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a59cc: 6411
relocInfo@0x00007f03f91a59cc [type=6(runtime_call) addr=0x00007f03f91a8c6b offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a59ce: f803053e27b87f047005
relocInfo@0x00007f03f91a59d6 [type=7(external_word) addr=0x00007f03f91a8c70 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a59d8: 640e
relocInfo@0x00007f03f91a59d8 [type=6(runtime_call) addr=0x00007f03f91a8c7e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a59da: 6415
relocInfo@0x00007f03f91a59da [type=6(runtime_call) addr=0x00007f03f91a8c93 offset=21 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a59dc: f803053e27b87f047005
relocInfo@0x00007f03f91a59e4 [type=7(external_word) addr=0x00007f03f91a8c98 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a59e6: 640e
relocInfo@0x00007f03f91a59e6 [type=6(runtime_call) addr=0x00007f03f91a8ca6 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a59e8: 6439
relocInfo@0x00007f03f91a59e8 [type=6(runtime_call) addr=0x00007f03f91a8cdf offset=57 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a59ea: f803053e27b87f047005
relocInfo@0x00007f03f91a59f2 [type=7(external_word) addr=0x00007f03f91a8ce4 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a59f4: 640e
relocInfo@0x00007f03f91a59f4 [type=6(runtime_call) addr=0x00007f03f91a8cf2 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a59f6: 6411
relocInfo@0x00007f03f91a59f6 [type=6(runtime_call) addr=0x00007f03f91a8d03 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a59f8: f803053e27b87f047005
relocInfo@0x00007f03f91a5a00 [type=7(external_word) addr=0x00007f03f91a8d08 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5a02: 640e
relocInfo@0x00007f03f91a5a02 [type=6(runtime_call) addr=0x00007f03f91a8d16 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5a04: 6431
relocInfo@0x00007f03f91a5a04 [type=6(runtime_call) addr=0x00007f03f91a8d47 offset=49 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5a06: f803053e27b87f047005
relocInfo@0x00007f03f91a5a0e [type=7(external_word) addr=0x00007f03f91a8d4c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5a10: 640e
relocInfo@0x00007f03f91a5a10 [type=6(runtime_call) addr=0x00007f03f91a8d5a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5a12: 6429
relocInfo@0x00007f03f91a5a12 [type=6(runtime_call) addr=0x00007f03f91a8d83 offset=41 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5a14: f803053e27b87f047005
relocInfo@0x00007f03f91a5a1c [type=7(external_word) addr=0x00007f03f91a8d88 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5a1e: 640e
relocInfo@0x00007f03f91a5a1e [type=6(runtime_call) addr=0x00007f03f91a8d96 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5a20: 6411
relocInfo@0x00007f03f91a5a20 [type=6(runtime_call) addr=0x00007f03f91a8da7 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5a22: f803053e27b87f047005
relocInfo@0x00007f03f91a5a2a [type=7(external_word) addr=0x00007f03f91a8dac offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5a2c: 640e
relocInfo@0x00007f03f91a5a2c [type=6(runtime_call) addr=0x00007f03f91a8dba offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5a2e: 641d
relocInfo@0x00007f03f91a5a2e [type=6(runtime_call) addr=0x00007f03f91a8dd7 offset=29 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5a30: f803053e27b87f047005
relocInfo@0x00007f03f91a5a38 [type=7(external_word) addr=0x00007f03f91a8ddc offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5a3a: 640e
relocInfo@0x00007f03f91a5a3a [type=6(runtime_call) addr=0x00007f03f91a8dea offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5a3c: 6411
relocInfo@0x00007f03f91a5a3c [type=6(runtime_call) addr=0x00007f03f91a8dfb offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5a3e: f803053e27b87f047005
relocInfo@0x00007f03f91a5a46 [type=7(external_word) addr=0x00007f03f91a8e00 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5a48: 640e
relocInfo@0x00007f03f91a5a48 [type=6(runtime_call) addr=0x00007f03f91a8e0e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5a4a: 6411
relocInfo@0x00007f03f91a5a4a [type=6(runtime_call) addr=0x00007f03f91a8e1f offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5a4c: f803053e27b87f047005
relocInfo@0x00007f03f91a5a54 [type=7(external_word) addr=0x00007f03f91a8e24 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5a56: 640e
relocInfo@0x00007f03f91a5a56 [type=6(runtime_call) addr=0x00007f03f91a8e32 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5a58: 6455
relocInfo@0x00007f03f91a5a58 [type=6(runtime_call) addr=0x00007f03f91a8e87 offset=85 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5a5a: f803053e27b87f047005
relocInfo@0x00007f03f91a5a62 [type=7(external_word) addr=0x00007f03f91a8e8c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5a64: 640e
relocInfo@0x00007f03f91a5a64 [type=6(runtime_call) addr=0x00007f03f91a8e9a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5a66: 641d
relocInfo@0x00007f03f91a5a66 [type=6(runtime_call) addr=0x00007f03f91a8eb7 offset=29 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5a68: f803053e27b87f047005
relocInfo@0x00007f03f91a5a70 [type=7(external_word) addr=0x00007f03f91a8ebc offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5a72: 640e
relocInfo@0x00007f03f91a5a72 [type=6(runtime_call) addr=0x00007f03f91a8eca offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5a74: 6439
relocInfo@0x00007f03f91a5a74 [type=6(runtime_call) addr=0x00007f03f91a8f03 offset=57 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5a76: f803053e27b87f047005
relocInfo@0x00007f03f91a5a7e [type=7(external_word) addr=0x00007f03f91a8f08 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5a80: 640e
relocInfo@0x00007f03f91a5a80 [type=6(runtime_call) addr=0x00007f03f91a8f16 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5a82: 6419
relocInfo@0x00007f03f91a5a82 [type=6(runtime_call) addr=0x00007f03f91a8f2f offset=25 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5a84: f803053e27b87f047005
relocInfo@0x00007f03f91a5a8c [type=7(external_word) addr=0x00007f03f91a8f34 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5a8e: 640e
relocInfo@0x00007f03f91a5a8e [type=6(runtime_call) addr=0x00007f03f91a8f42 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5a90: 641d
relocInfo@0x00007f03f91a5a90 [type=6(runtime_call) addr=0x00007f03f91a8f5f offset=29 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5a92: f803053e27b87f047005
relocInfo@0x00007f03f91a5a9a [type=7(external_word) addr=0x00007f03f91a8f64 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5a9c: 640e
relocInfo@0x00007f03f91a5a9c [type=6(runtime_call) addr=0x00007f03f91a8f72 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5a9e: 64ac
relocInfo@0x00007f03f91a5a9e [type=6(runtime_call) addr=0x00007f03f91a901e offset=172 format=1] | [destination=0x00007f03f90549a0]
         @0x00007f03f91a5aa0: 643d
relocInfo@0x00007f03f91a5aa0 [type=6(runtime_call) addr=0x00007f03f91a905b offset=61 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91a5aa2: f803053e27b87f047005
relocInfo@0x00007f03f91a5aaa [type=7(external_word) addr=0x00007f03f91a9060 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91a5aac: 640e
relocInfo@0x00007f03f91a5aac [type=6(runtime_call) addr=0x00007f03f91a906e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91a5aae: f80125768006
relocInfo@0x00007f03f91a5ab2 [type=8(internal_word) addr=0x00007f03f91a9074 offset=6 data=9590] | [target=0x00007f03f91a6afe]
         @0x00007f03f91a5ab4: 6411
relocInfo@0x00007f03f91a5ab4 [type=6(runtime_call) addr=0x00007f03f91a9085 offset=17 format=1] | [destination=0x00007f03f9117220]
         @0x00007f03f91a5ab6: 001b
relocInfo@0x00007f03f91a5ab6 [type=0(none) addr=0x00007f03f91a90a0 offset=27]
         @0x00007f03f91a5ab8: f801fd515000
relocInfo@0x00007f03f91a5abc [type=5(static_stub) addr=0x00007f03f91a90a0 offset=0 data=-687] | [static_call=0x00007f03f91a5def]
         @0x00007f03f91a5abe: c000
relocInfo@0x00007f03f91a5abe [type=12(metadata) addr=0x00007f03f91a90a0 offset=0] | [metadata_addr=0x00007f03f91a90a2 *=0x0000000000000000 offset=0]
         @0x00007f03f91a5ac0: 640a
relocInfo@0x00007f03f91a5ac0 [type=6(runtime_call) addr=0x00007f03f91a90aa offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007f03f91a5ac2: f801f8615005
relocInfo@0x00007f03f91a5ac6 [type=5(static_stub) addr=0x00007f03f91a90af offset=5 data=-1951] | [static_call=0x00007f03f91a62df]
         @0x00007f03f91a5ac8: c000
relocInfo@0x00007f03f91a5ac8 [type=12(metadata) addr=0x00007f03f91a90af offset=0] | [metadata_addr=0x00007f03f91a90b1 *=0x0000000000000000 offset=0]
         @0x00007f03f91a5aca: 640a
relocInfo@0x00007f03f91a5aca [type=6(runtime_call) addr=0x00007f03f91a90b9 offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007f03f91a5acc: f801f4a55005
relocInfo@0x00007f03f91a5ad0 [type=5(static_stub) addr=0x00007f03f91a90be offset=5 data=-2907] | [static_call=0x00007f03f91a669b]
         @0x00007f03f91a5ad2: c000
relocInfo@0x00007f03f91a5ad2 [type=12(metadata) addr=0x00007f03f91a90be offset=0] | [metadata_addr=0x00007f03f91a90c0 *=0x0000000000000000 offset=0]
         @0x00007f03f91a5ad4: 640a
relocInfo@0x00007f03f91a5ad4 [type=6(runtime_call) addr=0x00007f03f91a90c8 offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007f03f91a5ad6: f801f1455005
relocInfo@0x00007f03f91a5ada [type=5(static_stub) addr=0x00007f03f91a90cd offset=5 data=-3771] | [static_call=0x00007f03f91a69fb]
         @0x00007f03f91a5adc: c000
relocInfo@0x00007f03f91a5adc [type=12(metadata) addr=0x00007f03f91a90cd offset=0] | [metadata_addr=0x00007f03f91a90cf *=0x0000000000000000 offset=0]
         @0x00007f03f91a5ade: 640a
relocInfo@0x00007f03f91a5ade [type=6(runtime_call) addr=0x00007f03f91a90d7 offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007f03f91a5ae0: f801ec855005
relocInfo@0x00007f03f91a5ae4 [type=5(static_stub) addr=0x00007f03f91a90dc offset=5 data=-4987] | [static_call=0x00007f03f91a6ebb]
         @0x00007f03f91a5ae6: c000
relocInfo@0x00007f03f91a5ae6 [type=12(metadata) addr=0x00007f03f91a90dc offset=0] | [metadata_addr=0x00007f03f91a90de *=0x0000000000000000 offset=0]
         @0x00007f03f91a5ae8: 640a
relocInfo@0x00007f03f91a5ae8 [type=6(runtime_call) addr=0x00007f03f91a90e6 offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007f03f91a5aea: f801e8195005
relocInfo@0x00007f03f91a5aee [type=5(static_stub) addr=0x00007f03f91a90eb offset=5 data=-6119] | [static_call=0x00007f03f91a7327]
         @0x00007f03f91a5af0: c000
relocInfo@0x00007f03f91a5af0 [type=12(metadata) addr=0x00007f03f91a90eb offset=0] | [metadata_addr=0x00007f03f91a90ed *=0x0000000000000000 offset=0]
         @0x00007f03f91a5af2: 640a
relocInfo@0x00007f03f91a5af2 [type=6(runtime_call) addr=0x00007f03f91a90f5 offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007f03f91a5af4: f801e3d95005
relocInfo@0x00007f03f91a5af8 [type=5(static_stub) addr=0x00007f03f91a90fa offset=5 data=-7207] | [static_call=0x00007f03f91a7767]
         @0x00007f03f91a5afa: c000
relocInfo@0x00007f03f91a5afa [type=12(metadata) addr=0x00007f03f91a90fa offset=0] | [metadata_addr=0x00007f03f91a90fc *=0x0000000000000000 offset=0]
         @0x00007f03f91a5afc: 640a
relocInfo@0x00007f03f91a5afc [type=6(runtime_call) addr=0x00007f03f91a9104 offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007f03f91a5afe: 6405
relocInfo@0x00007f03f91a5afe [type=6(runtime_call) addr=0x00007f03f91a9109 offset=5 format=1] | [destination=0x00007f03f905c6a0]
         @0x00007f03f91a5b00: 640f
relocInfo@0x00007f03f91a5b00 [type=6(runtime_call) addr=0x00007f03f91a9118 offset=15 format=1] | [destination=0x00007f03f9116860]
         @0x00007f03f91a5b02: 0000
relocInfo@0x00007f03f91a5b02 [type=0(none) addr=0x00007f03f91a9118 offset=0]
         @0x00007f03f91a5b04: 0000
relocInfo@0x00007f03f91a5b04 [type=0(none) addr=0x00007f03f91a9118 offset=0]
         @0x00007f03f91a5b06: 0000
relocInfo@0x00007f03f91a5b06 [type=0(none) addr=0x00007f03f91a9118 offset=0]
         @0x00007f03f91a5b08: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type unique_concrete_method
  context = *jdk.incubator.vector.VectorSpecies
  method  = {method} {0x00007f03b0a1d5c0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
   [nmethod<=klass]jdk.incubator.vector.VectorSpecies
Dependency of type unique_concrete_method
  context = jdk.incubator.vector.VectorOperators$AssociativeImpl
  method  = {method} {0x00007f03b0aef2a8} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$AssociativeImpl
Dependency of type unique_concrete_method
  context = jdk.incubator.vector.VectorOperators$AssociativeImpl
  method  = {method} {0x00007f03b0aeee40} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$AssociativeImpl
Dependency of type unique_concrete_method
  context = jdk.incubator.vector.VectorOperators$AssociativeImpl
  method  = {method} {0x00007f03b0aeef18} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$AssociativeImpl
Dependency of type unique_concrete_method
  context = jdk.incubator.vector.VectorOperators$ImplCache
  method  = {method} {0x00007f03b0a118b0} 'find' '(Ljdk/incubator/vector/VectorOperators$Operator;ILjava/util/function/IntFunction;)Ljava/lang/Object;' in 'jdk/incubator/vector/VectorOperators$ImplCache'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$ImplCache
Dependency of type unique_concrete_method
  context = jdk.incubator.vector.VectorOperators$ComparisonImpl
  method  = {method} {0x00007f03b0aeee40} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$ComparisonImpl
Dependency of type unique_concrete_method
  context = jdk.incubator.vector.VectorOperators$ComparisonImpl
  method  = {method} {0x00007f03b0aeef18} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$ComparisonImpl
Dependency of type unique_concrete_method
  context = *jdk.incubator.vector.AbstractMask
  method  = {method} {0x00007f03b0a33148} 'checkIndexByLane' '(IILjdk/incubator/vector/Vector;I)V' in 'jdk/incubator/vector/AbstractMask'
   [nmethod<=klass]jdk.incubator.vector.AbstractMask
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 912 bytes)
catch_pco = 584 (1 entries)
  bci -1 at scope depth 0 -> pco 13502
catch_pco = 692 (1 entries)
  bci -1 at scope depth 0 -> pco 13506
catch_pco = 1956 (1 entries)
  bci -1 at scope depth 0 -> pco 13520
catch_pco = 2912 (1 entries)
  bci -1 at scope depth 0 -> pco 13481
catch_pco = 3776 (1 entries)
  bci -1 at scope depth 0 -> pco 13444
catch_pco = 3848 (1 entries)
  bci -1 at scope depth 0 -> pco 13457
catch_pco = 3884 (1 entries)
  bci -1 at scope depth 0 -> pco 13449
catch_pco = 3916 (1 entries)
  bci -1 at scope depth 0 -> pco 13465
catch_pco = 4380 (1 entries)
  bci -1 at scope depth 0 -> pco 13486
catch_pco = 4852 (1 entries)
  bci -1 at scope depth 0 -> pco 13488
catch_pco = 4876 (1 entries)
  bci -1 at scope depth 0 -> pco 13490
catch_pco = 4908 (1 entries)
  bci -1 at scope depth 0 -> pco 13479
catch_pco = 4992 (1 entries)
  bci -1 at scope depth 0 -> pco 13477
catch_pco = 5508 (1 entries)
  bci -1 at scope depth 0 -> pco 13511
catch_pco = 5968 (1 entries)
  bci -1 at scope depth 0 -> pco 13513
catch_pco = 5996 (1 entries)
  bci -1 at scope depth 0 -> pco 13515
catch_pco = 6040 (1 entries)
  bci -1 at scope depth 0 -> pco 13500
catch_pco = 6124 (1 entries)
  bci -1 at scope depth 0 -> pco 13498
catch_pco = 6352 (1 entries)
  bci -1 at scope depth 0 -> pco 13442
catch_pco = 6600 (1 entries)
  bci -1 at scope depth 0 -> pco 13438
catch_pco = 7064 (1 entries)
  bci -1 at scope depth 0 -> pco 13436
catch_pco = 7092 (1 entries)
  bci -1 at scope depth 0 -> pco 13431
catch_pco = 7128 (1 entries)
  bci -1 at scope depth 0 -> pco 13426
catch_pco = 7212 (1 entries)
  bci -1 at scope depth 0 -> pco 13421
catch_pco = 7388 (1 entries)
  bci -1 at scope depth 0 -> pco 13413
catch_pco = 7484 (1 entries)
  bci -1 at scope depth 0 -> pco 13401
catch_pco = 8248 (1 entries)
  bci -1 at scope depth 0 -> pco 13048
catch_pco = 8292 (1 entries)
  bci -1 at scope depth 0 -> pco 13048
catch_pco = 8332 (1 entries)
  bci -1 at scope depth 0 -> pco 13391
catch_pco = 8376 (1 entries)
  bci -1 at scope depth 0 -> pco 13396
catch_pco = 8624 (1 entries)
  bci -1 at scope depth 0 -> pco 13386
catch_pco = 8664 (1 entries)
  bci -1 at scope depth 0 -> pco 13200
catch_pco = 8720 (1 entries)
  bci -1 at scope depth 0 -> pco 13200
catch_pco = 9536 (1 entries)
  bci -1 at scope depth 0 -> pco 13373
catch_pco = 9580 (1 entries)
  bci -1 at scope depth 0 -> pco 13381
catch_pco = 10136 (1 entries)
  bci -1 at scope depth 0 -> pco 13368
catch_pco = 10936 (1 entries)
  bci -1 at scope depth 0 -> pco 13539
catch_pco = 10992 (1 entries)
  bci -1 at scope depth 0 -> pco 13539
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 19 entries, 156 bytes):
{
   < 0x00007f03f91a5b85, 0x00007f03f91a8be8 > < 0x00007f03f91a5df4, 0x00007f03f91a8c0c > < 0x00007f03f91a5e21, 0x00007f03f91a8c3c > 
   < 0x00007f03f91a5e2e, 0x00007f03f91a8c60 > < 0x00007f03f91a5e8e, 0x00007f03f91a801e > < 0x00007f03f91a5ea3, 0x00007f03f91a8017 > 
   < 0x00007f03f91a5ec0, 0x00007f03f91a8023 > < 0x00007f03f91a62e4, 0x00007f03f91a8c84 > < 0x00007f03f91a6315, 0x00007f03f91a8cac > 
   < 0x00007f03f91a638b, 0x00007f03f91a8cf8 > < 0x00007f03f91a66b1, 0x00007f03f91a8d60 > < 0x00007f03f91a6700, 0x00007f03f91a8d9c > 
   < 0x00007f03f91a6a6c, 0x00007f03f91a8df0 > < 0x00007f03f91a6c60, 0x00007f03f91a8dc0 > < 0x00007f03f91a70c4, 0x00007f03f91a8d1c > 
   < 0x00007f03f91a7429, 0x00007f03f91a8e14 > < 0x00007f03f91a750b, 0x00007f03f91a8ea0 > < 0x00007f03f91a78d5, 0x00007f03f91a8f1c > 
   < 0x00007f03f91a7920, 0x00007f03f91a8f48 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
# 0: 0x0000000000000000 NULL-oop
# 1: 0x000000010188fcd0 a 'java/lang/Class'{0x000000010188fcd0} = 'jdk/incubator/vector/IntMaxVector'
# 2: 0x0000000101964e98 a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e98}
# 3: 0x0000000101c2c488 a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
# 4: 0x000000010188b5c0 a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
# 5: 0x000000010188b520 a 'java/lang/Class'{0x000000010188b520} = 'jdk/incubator/vector/Int256Vector'
# 6: 0x00000001010002b0 a 'java/lang/Class'{0x00000001010002b0} = int
# 7: 0x0000000101964e58 a 'jdk/incubator/vector/Int256Vector'{0x0000000101964e58}
# 8: 0x0000000101c25820 a 'jdk/incubator/vector/IntVector$$Lambda$64+0x00000008000acfa0'{0x0000000101c25820}
# 9: 0x0000000101c20690 a 'java/lang/invoke/DirectMethodHandle$Constructor'{0x0000000101c20690}
#10: 0x000000010110df10 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000010110df10}
#11: 0x0000000101127628 a 'java/lang/Class'{0x0000000101127628} = 'java/lang/invoke/LambdaForm$MH+0x0000000800005800'
#12: 0x0000000101be9bd0 a 'java/lang/Class'{0x0000000101be9bd0} = 'java/lang/invoke/LambdaForm$MH+0x00000008000d5000'
#13: 0x0000000101be2d48 a 'java/lang/Class'{0x0000000101be2d48} = 'java/lang/invoke/LambdaForm$DMH+0x00000008000d4800'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
# 0: 0x0000000000000000 NULL-oop
# 1: 0x00007f03b08119b8 {method} {0x00007f03b08119b8} 'micro_vector_masked' '([I[I[I)V' in 'App'
# 2: 0x00007f03b0812e38 {method} {0x00007f03b0812e38} 'intoArray' '([IILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/IntVector'
# 3: 0x00007f03b081d998 {method} {0x00007f03b081d998} 'stOp' '(Ljava/lang/Object;ILjdk/incubator/vector/VectorMask;Ljdk/incubator/vector/IntVector$FStOp;)V' in 'jdk/incubator/vector/IntVector'
# 4: 0x00007f03b0a4a240 {method} {0x00007f03b0a4a240} 'vec' '()[I' in 'jdk/incubator/vector/Int256Vector'
# 5: 0x00007f03b053f890 {method} {0x00007f03b053f890} 'getPayload' '()Ljava/lang/Object;' in 'jdk/internal/vm/vector/VectorSupport$VectorPayload'
# 6: 0x00007f03b0812728 {method} {0x00007f03b0812728} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
# 7: 0x00007f03b0a4d300 {method} {0x00007f03b0a4d300} 'fromArray0' '([II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int256Vector'
# 8: 0x00007f03b0813798 {method} {0x00007f03b0813798} 'fromArray0Template' '([II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
# 9: 0x0000000800094b80 'jdk/incubator/vector/IntVector$IntSpecies'
#10: 0x00007f03b081f8d8 {method} {0x00007f03b081f8d8} 'add' '(Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#11: 0x00007f03b0a4e770 {method} {0x00007f03b0a4e770} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int256Vector'
#12: 0x00007f03b0a4b6d0 {method} {0x00007f03b0a4b6d0} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/Int256Vector;' in 'jdk/incubator/vector/Int256Vector'
#13: 0x00007f03b081e8d8 {method} {0x00007f03b081e8d8} 'lanewiseTemplate' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#14: 0x00007f03b081c2c8 {method} {0x00007f03b081c2c8} 'opCode' '(Ljdk/incubator/vector/VectorOperators$Operator;)I' in 'jdk/incubator/vector/IntVector'
#15: 0x00007f03b0a146b8 {method} {0x00007f03b0a146b8} 'opCode' '(Ljdk/incubator/vector/VectorOperators$Operator;II)I' in 'jdk/incubator/vector/VectorOperators'
#16: 0x00007f03b0aeee40 {method} {0x00007f03b0aeee40} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#17: 0x00007f03b0a184c0 {method} {0x00007f03b0a184c0} 'dummyVector' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
#18: 0x00007f03b0a1eb98 {method} {0x00007f03b0a1eb98} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies'
#19: 0x0000000800040000 {type array bool}
#20: 0x00007f03b0a34658 {method} {0x00007f03b0a34658} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[ZI)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
#21: 0x00007f03b080aa78 {method} {0x00007f03b080aa78} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800005800'
#22: 0x00007f03b0a34820 {method} {0x00007f03b0a34820} 'fromLong' '(Ljdk/incubator/vector/VectorSpecies;J)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
#23: 0x00007f03b0a34518 {method} {0x00007f03b0a34518} 'fromValues' '(Ljdk/incubator/vector/VectorSpecies;[Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
#24: 0x00007f03b0812880 {method} {0x00007f03b0812880} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[IILjdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#25: 0x00007f03b0a4e190 {method} {0x00007f03b0a4e190} 'blend' '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int256Vector'
#26: 0x00007f03b0a4c320 {method} {0x00007f03b0a4c320} 'blend' '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/Int256Vector;' in 'jdk/incubator/vector/Int256Vector'
#27: 0x00007f03b0a17a40 {method} {0x00007f03b0a17a40} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/IntVector$IntSpecies'
#28: 0x0000000800098110 'jdk/incubator/vector/Int256Vector'
#29: 0x00007f03b0812d08 {method} {0x00007f03b0812d08} 'intoArray' '([II)V' in 'jdk/incubator/vector/IntVector'
#30: 0x00007f03b0a000f8 {method} {0x00007f03b0a000f8} 'checkMaskFromIndexSize' '(ILjdk/incubator/vector/IntVector$IntSpecies;Ljdk/incubator/vector/VectorMask;II)V' in 'jdk/incubator/vector/IntVector'
#31: 0x00007f03b0a0a230 {method} {0x00007f03b0a0a230} 'check' '(Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractVector'
#32: 0x00007f03b0a0a350 {method} {0x00007f03b0a0a350} 'sameSpecies' '(Ljdk/incubator/vector/Vector;)Z' in 'jdk/incubator/vector/AbstractVector'
#33: 0x00007f03b0a18d80 {method} {0x00007f03b0a18d80} 'zero' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
#34: 0x00007f03b0a1e098 {method} {0x00007f03b0a1e098} 'loopBound' '(I)I' in 'jdk/incubator/vector/AbstractSpecies'
#35: 0x0000000800098750 'jdk/incubator/vector/Int256Vector$Int256Mask'
#36: 0x0000000800040c30 {type array int}
#37: 0x00007f03b0a84398 {method} {0x00007f03b0a84398} 'roundDown' '(II)I' in 'jdk/incubator/vector/VectorIntrinsics'
#38: 0x00007f03b0a1d690 {method} {0x00007f03b0a1d690} 'laneCount' '()I' in 'jdk/incubator/vector/AbstractSpecies'
#39: 0x00000008000acb58 'jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58'
#40: 0x00007f03b0a84090 {method} {0x00007f03b0a84090} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
#41: 0x00007f03b0560ca0 {method} {0x00007f03b0560ca0} 'checkIndex' '(II)I' in 'java/util/Objects'
#42: 0x00007f03b081faa8 {method} {0x00007f03b081faa8} 'add' '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#43: 0x00007f03b081ea38 {method} {0x00007f03b081ea38} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#44: 0x00007f03b0a18ea8 {method} {0x00007f03b0a18ea8} 'iota' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
#45: 0x00007f03b0a33148 {method} {0x00007f03b0a33148} 'checkIndexByLane' '(IILjdk/incubator/vector/Vector;I)V' in 'jdk/incubator/vector/AbstractMask'
#46: 0x00007f03b0a34418 {method} {0x00007f03b0a34418} 'length' '()I' in 'jdk/incubator/vector/VectorMask'
#47: 0x00007f03b0a320f8 {method} {0x00007f03b0a320f8} 'vectorSpecies' '()Ljdk/incubator/vector/VectorSpecies;' in 'jdk/incubator/vector/AbstractMask'
#48: 0x00007f03b0a118b0 {method} {0x00007f03b0a118b0} 'find' '(Ljdk/incubator/vector/VectorOperators$Operator;ILjava/util/function/IntFunction;)Ljava/lang/Object;' in 'jdk/incubator/vector/VectorOperators$ImplCache'
#49: 0x00007f03b081c490 {method} {0x00007f03b081c490} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/IntVector'
#50: 0x00007f03b0a14798 {method} {0x00007f03b0a14798} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/VectorOperators'
#51: 0x00007f03b0a49fc0 {method} {0x00007f03b0a49fc0} 'length' '()I' in 'jdk/incubator/vector/Int256Vector'
#52: 0x00007f03b0b25e80 {method} {0x00007f03b0b25e80} 'linkToTargetMethod' '(Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x00000008000d5000'
#53: 0x00007f03b0b24f00 {method} {0x00007f03b0b24f00} 'newInvokeSpecial' '(Ljava/lang/Object;Ljava/lang/Object;I)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$DMH+0x00000008000d4800'
#54: 0x00007f03b0ba90d0 {method} {0x00007f03b0ba90d0} '<init>' '([II)V' in 'jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58'
#55: 0x00007f03b0400520 {method} {0x00007f03b0400520} '<init>' '()V' in 'java/lang/Object'
#56: 0x00007f03b0816170 {method} {0x00007f03b0816170} 'blendTemplate' '(Ljava/lang/Class;Ljdk/incubator/vector/IntVector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#57: 0x00007f03b0a332d8 {method} {0x00007f03b0a332d8} 'checkIndex0' '(IILjdk/incubator/vector/Vector;I)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
#58: 0x00007f03b0a4e418 {method} {0x00007f03b0a4e418} 'compare' '(Ljdk/incubator/vector/VectorOperators$Comparison;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/Int256Vector'
#59: 0x00007f03b0a4c040 {method} {0x00007f03b0a4c040} 'compare' '(Ljdk/incubator/vector/VectorOperators$Comparison;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/Int256Vector$Int256Mask;' in 'jdk/incubator/vector/Int256Vector'
#60: 0x00007f03b08157f8 {method} {0x00007f03b08157f8} 'compareTemplate' '(Ljava/lang/Class;Ljdk/incubator/vector/VectorOperators$Comparison;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/IntVector'
#61: 0x00007f03b0a4f8c8 {method} {0x00007f03b0a4f8c8} 'broadcast' '(J)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/Int256Vector'
#62: 0x00007f03b0a4a400 {method} {0x00007f03b0a4a400} 'broadcast' '(J)Ljdk/incubator/vector/Int256Vector;' in 'jdk/incubator/vector/Int256Vector'
#63: 0x00007f03b081e4c0 {method} {0x00007f03b081e4c0} 'broadcastTemplate' '(J)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#64: 0x00007f03b0a17f88 {method} {0x00007f03b0a17f88} 'broadcast' '(J)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
#65: 0x00007f03b0a17dc0 {method} {0x00007f03b0a17dc0} 'broadcastBits' '(J)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
#66: 0x00007f03b04820b0 {method} {0x00007f03b04820b0} 'allocateInstance' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/DirectMethodHandle'
#67: 0x00007f03b0a1d5c0 {method} {0x00007f03b0a1d5c0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
#68: 0x00007f03b0a53388 {method} {0x00007f03b0a53388} 'or' '(Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/Int256Vector$Int256Mask'
#69: 0x00007f03b0a52ae0 {method} {0x00007f03b0a52ae0} 'or' '(Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/Int256Vector$Int256Mask;' in 'jdk/incubator/vector/Int256Vector$Int256Mask'
#70: 0x00007f03b0a522f0 {method} {0x00007f03b0a522f0} 'getBits' '()[Z' in 'jdk/incubator/vector/Int256Vector$Int256Mask'
#71: 0x0000000800094370 'jdk/incubator/vector/VectorSpecies'
#72: 0x00000008000a2b78 'jdk/incubator/vector/VectorOperators$AssociativeImpl'
#73: 0x00007f03b0aef2a8 {method} {0x00007f03b0aef2a8} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#74: 0x00007f03b0aeef18 {method} {0x00007f03b0aeef18} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#75: 0x00000008000a37e8 'jdk/incubator/vector/VectorOperators$ComparisonImpl'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 338 ------------------------
{method}
 - this oop:          0x00007f03b08119b8
 - method holder:     'App'
 - constants:         0x00007f03b0811090 constant pool [134]/operands[15] {0x00007f03b0811090} for 'App' cache=0x00007f03b0b00000
 - access:            0xc1000001  public 
 - name:              'micro_vector_masked'
 - signature:         '([I[I[I)V'
 - max stack:         7
 - max locals:        10
 - size of params:    4
 - method size:       13
 - highest level:     4
 - vtable index:      5
 - i2i entry:         0x00007f03f900e220
 - adapters:          AHE@0x00007f03fc3a44a0: 0xbbbb0000 i2c: 0x00007f03f907f6e0 c2i: 0x00007f03f907f7cc c2iUV: 0x00007f03f907f796 c2iNCI: 0x00007f03f907f809
 - compiled entry     0x00007f03f907f7cc
 - code size:         200
 - code start:        0x00007f03b08118d0
 - code end (excl):   0x00007f03b0811998
 - method data:       0x00007f03b0b2b000
 - checked ex length: 0
 - linenumber start:  0x00007f03b0811998
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 338 -----------------------
#
#  void ( App:NotNull *, int[int:>=0]:exact *, int[int:>=0]:exact *, int[int:>=0]:exact * )
#
#r018 rsi:rsi   : parm 0: App:NotNull *
#r016 rdx:rdx   : parm 1: int[int:>=0]:exact *
#r010 rcx:rcx   : parm 2: int[int:>=0]:exact *
#r004 r8:r8   : parm 3: int[int:>=0]:exact *
# -- Old rsp -- Framesize: 208 --
#r583 rsp+204: in_preserve
#r582 rsp+200: return address
#r581 rsp+196: in_preserve
#r580 rsp+192: saved fp register
#r579 rsp+188: pad2, stack alignment
#r578 rsp+184: pad2, stack alignment
#r577 rsp+180: Fixed slot 1
#r576 rsp+176: Fixed slot 0
#r627 rsp+172: spill
#r626 rsp+168: spill
#r625 rsp+164: spill
#r624 rsp+160: spill
#r623 rsp+156: spill
#r622 rsp+152: spill
#r621 rsp+148: spill
#r620 rsp+144: spill
#r619 rsp+140: spill
#r618 rsp+136: spill
#r617 rsp+132: spill
#r616 rsp+128: spill
#r615 rsp+124: spill
#r614 rsp+120: spill
#r613 rsp+116: spill
#r612 rsp+112: spill
#r611 rsp+108: spill
#r610 rsp+104: spill
#r609 rsp+100: spill
#r608 rsp+96: spill
#r607 rsp+92: spill
#r606 rsp+88: spill
#r605 rsp+84: spill
#r604 rsp+80: spill
#r603 rsp+76: spill
#r602 rsp+72: spill
#r601 rsp+68: spill
#r600 rsp+64: spill
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: outgoing argument
#r588 rsp+16: outgoing argument
#r587 rsp+12: outgoing argument
#r586 rsp+ 8: outgoing argument
#r585 rsp+ 4: outgoing argument
#r584 rsp+ 0: outgoing argument
#
0000    N2963: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
0000    movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

        nop 	# 4 bytes pad for loops and calls

0020    B1: #	out( B227 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
0020    # stack bang (1040 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #192	# Create frame

002f    movq    [rsp + #48], R8	# spill
0034    movq    [rsp + #40], RCX	# spill
0039    movq    [rsp + #32], RDX	# spill
003e    movq    [rsp + #24], RSI	# spill
0043    movl    RBP, [RSI + #12 (8-bit)]	# compressed ptr ! Field: App.SPECIES
0046    movl    R11, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
004b    NullCheck RBP

004b    B2: #	out( B184 B3 ) <- in( B1 )  Freq: 0.999999
004b    cmpl    R11, narrowklass: precise klass jdk/incubator/vector/IntVector$IntSpecies: 0x00007f036c19b230:Constant:exact *	# compressed klass ptr
0052    jne,u   B184  P=0.000001 C=-1.000000

0058    B3: #	out( B182 B4 ) <- in( B2 )  Freq: 0.999998
0058    decode_heap_oop_not_null R10,RBP
005c    # checkcastPP of R10
005c    movq    [rsp + #56], R10	# spill
0061    movl    RBP, [R10 + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
0065    cmpl    RBP, #1048576	# unsigned
006b    jnbe,u   B182  P=0.000001 C=-1.000000

0071    B4: #	out( B5 ) <- in( B3 )  Freq: 0.999997
0071    movslq  RCX, RBP	# i2l

0074    B5: #	out( B165 B6 ) <- in( B4 B182 )  Freq: 0.999998
        nop 	# 12 bytes pad for loops and calls
0080    cmpl    RBP, #1048576	# unsigned
0086    jnbe,u   B165  P=0.000001 C=-1.000000

008c    B6: #	out( B165 B7 ) <- in( B5 )  Freq: 0.999997
008c    # TLS is in R15
008c    movq    R9, [R15 + #328 (32-bit)]	# ptr
0093    addq    RCX, #23	# long
0097    movq    R10, RCX	# spill
009a    andq    R10, #-8	# long
009e    movq    R11, R9	# spill
00a1    addq    R11, R10	# ptr
00a4    # TLS is in R15
00a4    cmpq    R11, [R15 + #344 (32-bit)]	# raw ptr
00ab    jnb,u   B165  P=0.000100 C=-1.000000

00b1    B7: #	out( B8 ) <- in( B6 )  Freq: 0.999897
00b1    # TLS is in R15
00b1    movq    [R15 + #328 (32-bit)], R11	# ptr
00b8    movq    RDI, R9	# spill
00bb    addq    RDI, #16	# ptr
00bf    movq    [R9], #1	# long
00c6    PREFETCHW [R11 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
00ce    movl    [R9 + #8 (8-bit)], narrowklass: precise klass [Z: 0x00007f03fc45a840:Constant:exact *	# compressed klass ptr
00d6    movl    [R9 + #12 (8-bit)], RBP	# int
00da    PREFETCHW [R11 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
00e2    PREFETCHW [R11 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
00ea    PREFETCHW [R11 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
00f2    shrq    RCX, #3
00f6    addq    RCX, #-2	# long
00fa    xorq    rax, rax	# ClearArray:
	cmp     InitArrayShortSize,rcx
	jg      LARGE
	dec     rcx
	js      DONE	# Zero length
	mov     rax,(rdi,rcx,8)	# LOOP
	dec     rcx
	jge     LOOP
	jmp     DONE
	# LARGE:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
	# DONE

011a    B8: #	out( B164 B9 ) <- in( B166 B7 )  Freq: 0.999998
011a    
011a    MEMBAR-storestore (empty encoding)
011a    # checkcastPP of R9
011a    movl    R10, RBP	# spill
011d    # castII of R10
        nop 	# 3 bytes pad for loops and calls
0120    testl   R10, R10
0123    jle     B164  P=0.111112 C=206603.000000

0129    B9: #	out( B189 B10 ) <- in( B8 )  Freq: 0.888887
0129    testl   R10, R10
012c    je     B189  P=0.000001 C=-1.000000

0132    B10: #	out( B189 B11 ) <- in( B9 )  Freq: 0.888886
0132    movl    R8, R10	# spill
0135    decl    R8	# int
0138    cmpl    R8, R10	# unsigned
        nop 	# 5 bytes pad for loops and calls
0140    jnb,u   B189  P=0.000001 C=-1.000000

0146    B11: #	out( B12 ) <- in( B10 )  Freq: 0.888885
0146    movl    R11, #4	# int
014c    cmpl    R10, R11
014f    movl    R8, R10	# spill
0152    cmovlgt R8, R11	# min
0156    xorl    RBX, RBX	# int

0158    B12: #	out( B12 B13 ) <- in( B11 B12 ) Loop( B12-B12 inner pre of N1348) Freq: 1.77777
0158    movb    [R9 + #16 + RBX], #1	# byte
015e    incl    RBX	# int
0160    cmpl    RBX, R8
0163    jl,s   B12	# loop end  P=0.500000 C=183647.000000

0165    B13: #	out( B20 B14 ) <- in( B12 )  Freq: 0.888885
0165    movl    R8, R10	# spill
0168    addl    R8, #-3	# int
016c    cmpl    RBX, R8
016f    jge     B20  P=0.000001 C=-1.000000

0175    B14: #	out( B190 B15 ) <- in( B13 )  Freq: 0.888884
0175    # castII of RBX
0175    cmpl    RBX, R10	# unsigned
0178    jnb,u   B190  P=0.000001 C=-1.000000

017e    B15: #	out( B191 B16 ) <- in( B14 )  Freq: 0.888883
017e    movl    R11, RBX	# spill
0181    addl    R11, #3	# int
0185    cmpl    R11, R10	# unsigned
0188    jnb,u   B191  P=0.000001 C=-1.000000

018e    B16: #	out( B17 ) <- in( B15 )  Freq: 0.888882
018e    # MachConstantBaseNode (empty encoding)
018e    replicateB XMM0,#1

0196    B17: #	out( B18 ) <- in( B16 B19 ) Loop( B17-B19 ) Freq: 7.9999
0196    movl    RCX, R10	# spill
0199    subl    RCX, RBX	# int
019b    addl    RCX, #-3	# int
019e    xorl    RDI, RDI	# int
01a0    cmpl    R8, RBX
01a3    cmovll RCX, RDI	# signed, int
01a6    cmpl    RCX, #4000	# unsigned
01ac    movl    RDI, #4000	# int
01b1    cmovlnbe RCX, RDI	# unsigned, int
01b4    addl    RCX, RBX	# int
        nop 	# 10 bytes pad for loops and calls

01c0    B18: #	out( B18 B19 ) <- in( B17 B18 ) Loop( B18-B18 inner main of N508 strip mined) Freq: 71.9988
01c0    store_vector [R9 + #16 + RBX],XMM0
	
01c7    addl    RBX, #4	# int
01ca    cmpl    RBX, RCX
01cc    jl,s   B18	# loop end  P=0.888888 C=183647.000000

01ce    B19: #	out( B17 B20 ) <- in( B18 )  Freq: 7.9999
01ce    # TLS is in R15
01ce    movq    RCX, [R15 + #304 (32-bit)]	# ptr
01d5    testl   rax, [RCX]	# Safepoint: poll for GC        # App::micro_vector_masked @ bci:42 (line 37) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=#0 L[5]=_ L[6]=_ L[7]=R9 L[8]=RBX L[9]=_
        # OopMap {r9=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop [56]=Oop off=469/0x1d5}
01d7    cmpl    RBX, R8
01da    jl,s   B17  P=0.888888 C=183647.000000

01dc    B20: #	out( B23 B21 ) <- in( B13 B19 )  Freq: 0.888883
        nop 	# 4 bytes pad for loops and calls
01e0    cmpl    RBX, R10
01e3    jge,s   B23  P=0.500000 C=-1.000000

01e5    B21: #	out( B22 ) <- in( B20 )  Freq: 0.444441
01e5    # castII of RBX
        nop 	# 3 bytes pad for loops and calls

01e8    B22: #	out( B22 B23 ) <- in( B21 B22 ) Loop( B22-B22 inner post of N1348) Freq: 0.888883
01e8    movb    [R9 + #16 + RBX], #1	# byte
01ee    incl    RBX	# int
01f0    cmpl    RBX, R10
01f3    jl,s   B22	# loop end  P=0.500000 C=183647.000000

01f5    B23: #	out( B24 ) <- in( B22 B20 )  Freq: 0.888883
01f5    movq    R10, R9	# spill

01f8    B24: #	out( B248 B25 ) <- in( B23 B164 )  Freq: 0.999994
01f8    movq    R11, [rsp + #56]	# spill
01fd    movl    R11, [R11 + #48 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.maskType (constant)
0201    decode_heap_oop RSI,R11
022d    movq    RDX, java/lang/Class:exact *	# ptr
0237    movl    RCX, RBP	# spill
0239    movq    R8, R10	# spill
023c    movl    R9, #16	# long (unsigned 32-bit)
0242    movq    RDI, R10	# spill
0245    xorl    R10, R10	# int
0248    movl    [rsp + #0], R10	# spill
024c    pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #8]
0256    movq    R10, jdk/incubator/vector/VectorMask$$Lambda$53+0x00000008000aa6e0:exact *	# ptr
0260    movq    [rsp + #16], R10	# spill
        nop 	# 3 bytes pad for loops and calls
0268    call,static  jdk.internal.vm.vector.VectorSupport::load
        # jdk.incubator.vector.VectorMask::fromArray @ bci:46 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:52 (line 40) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=#0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop off=624/0x270}

0270    B25: #	out( B228 B26 ) <- in( B24 )  Freq: 0.999974
        # Block is sole successor of call
0270    movl    R10, [RAX + #8 (8-bit)]	# compressed klass ptr
0274    NullCheck RAX

0274    B26: #	out( B221 B27 ) <- in( B25 )  Freq: 0.999973
        nop 	# 12 bytes pad for loops and calls
0280    cmpl    R10, narrowklass: precise klass jdk/incubator/vector/Int256Vector$Int256Mask: 0x00007f036c63e740:Constant:exact *	# compressed klass ptr
0287    jne,u   B221  P=0.000000 C=-1.000000

028d    B27: #	out( B229 B28 ) <- in( B26 )  Freq: 0.999973
028d    movq    R14, [rsp + #32]	# spill
0292    movl    RBX, [R14 + #12 (8-bit)]	# range
0296    NullCheck R14

0296    B28: #	out( B230 B29 ) <- in( B27 )  Freq: 0.999972
0296    movq    R10, [rsp + #24]	# spill
029b    movl    RBP, [R10 + #12 (8-bit)]	# compressed ptr ! Field: App.SPECIES
        nop 	# 1 bytes pad for loops and calls
02a0    movl    R10, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
02a5    NullCheck RBP

02a5    B29: #	out( B185 B30 ) <- in( B28 )  Freq: 0.999971
02a5    cmpl    R10, narrowklass: precise klass jdk/incubator/vector/IntVector$IntSpecies: 0x00007f036c19b230:Constant:exact *	# compressed klass ptr
02ac    jne,u   B185  P=0.000001 C=-1.000000

02b2    B30: #	out( B209 B31 ) <- in( B29 )  Freq: 0.99997
02b2    decode_heap_oop_not_null R9,RBP
02b6    # checkcastPP of R9
02b6    movl    R8, [R9 + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
02ba    movl    RSI, R8	# spill
02bd    decl    RSI	# int
02bf    movl    RBP, R8	# spill
02c2    andl    RBP, RSI	# int
02c4    testl   RBP, RBP
02c6    jne     B209  P=0.000000 C=7249.000000

02cc    B31: #	out( B33 B32 ) <- in( B30 )  Freq: 0.99997
02cc    andnl  RCX, RSI, RBX
02d1    testl   RCX, RCX
02d3    jg,s   B33  P=0.749989 C=91824.000000

02d5    B32: #	out( B45 ) <- in( B31 )  Freq: 0.250003
02d5    xorl    R10, R10	# int
02d8    movq    R13, [rsp + #40]	# spill
02dd    movq    RDX, [rsp + #48]	# spill
02e2    jmp     B45

02e7    B33: #	out( B206 B34 ) <- in( B31 )  Freq: 0.749967
02e7    movq    R13, [rsp + #40]	# spill
02ec    movl    R11, [R13 + #12 (8-bit)]	# range
02f0    NullCheck R13

02f0    B34: #	out( B204 B35 ) <- in( B33 )  Freq: 0.749966
02f0    subl    R11, R8	# int
02f3    incl    R11	# int
02f6    testl   R11, R11
02f9    jl     B204  P=0.000001 C=-1.000000

02ff    B35: #	out( B205 B36 ) <- in( B34 )  Freq: 0.749965
02ff    movl    RDI, [R9 + #68 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.dummyVector (constant)
0303    movl    R10, [R12 + RDI << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0308    NullCheck RDI

0308    B36: #	out( B208 B37 ) <- in( B35 )  Freq: 0.749964
0308    cmpl    R10, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007f0380618b40:Constant:exact *	# compressed klass ptr
030f    jne,u   B208  P=0.000001 C=-1.000000

0315    B37: #	out( B207 B38 ) <- in( B36 )  Freq: 0.749963
0315    movq    RDX, [rsp + #48]	# spill
        nop 	# 6 bytes pad for loops and calls
0320    movl    RAX, [RDX + #12 (8-bit)]	# range
0323    NullCheck RDX

0323    B38: #	out( B207 B39 ) <- in( B37 )  Freq: 0.749963
0323    subl    RAX, R8	# int
0326    incl    RAX	# int
0328    testl   RAX, RAX
032a    jl     B207  P=0.000001 C=-1.000000

0330    B39: #	out( B207 B40 ) <- in( B38 )  Freq: 0.749962
0330    movl    RDI, RBX	# spill
0332    addl    RDI, #-7	# int
0335    testl   RDI, RDI
0337    jl     B207  P=0.000001 C=-1.000000

033d    B40: #	out( B41 ) <- in( B39 )  Freq: 0.749961
033d    # castII of RAX
033d    # castII of R11
033d    # castII of RDI
033d    xorl    R10, R10	# int

0340    B41: #	out( B175 B42 ) <- in( B40 B44 ) Loop( B41-B44 inner ) Freq: 2.99969
0340    cmpl    R10, R11	# unsigned
0343    jnb,u   B175  P=0.000001 C=-1.000000

0349    B42: #	out( B176 B43 ) <- in( B41 )  Freq: 2.99968
0349    # castII of R10
0349    load_vector XMM0,[R13 + #16 + R10 << #2]
0350    cmpl    R10, RAX	# unsigned
0353    jnb,u   B176  P=0.000001 C=-1.000000

0359    B43: #	out( B177 B44 ) <- in( B42 )  Freq: 2.99968
0359    vpaddd  XMM0,XMM0,[RDX + #16 + R10 << #2]	! add packedI
0360    cmpl    R10, RDI	# unsigned
0363    jnb,u   B177  P=0.000001 C=-1.000000

0369    B44: #	out( B41 B45 ) <- in( B43 )  Freq: 2.99968
0369    store_vector [R14 + #16 + R10 << #2],XMM0
	
0370    # TLS is in R15
0370    movq    RBP, [R15 + #304 (32-bit)]	# ptr
0377    addl    R10, R8	# int
037a    testl   rax, [RBP]	# Safepoint: poll for GC        # App::micro_vector_masked @ bci:124 (line 43) L[0]=rsp + #24 L[1]=R14 L[2]=R13 L[3]=RDX L[4]=R10 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {r9=Oop rdx=Oop r13=Oop r14=Oop [24]=Oop off=890/0x37a}
        nop 	# 3 bytes pad for loops and calls
0380    cmpl    R10, RCX
0383    jl,s   B41  P=0.749989 C=68867.000000

0385    B45: #	out( B211 B46 ) <- in( B44 B32 )  Freq: 0.999955
0385    movl    RCX, RBX	# spill
0387    andl    RCX, RSI	# int
0389    movl    R11, #1	# long (unsigned 32-bit)
038f    salq    R11, RCX
0392    decq    R11	# long
0395    cmpl    R8, #64
0399    jge     B211  P=0.000000 C=1375.000000

039f    B46: #	out( B212 B47 ) <- in( B45 )  Freq: 0.999955
039f    movl    RCX, #64	# int
03a4    subl    RCX, R8	# int
03a7    salq    R11, RCX
03aa    sarq    R11, RCX
03ad    movq    RBP, R11	# spill
03b0    sarq    RBP, #1
03b3    cmpq    R11, RBP
03b6    je     B212  P=0.000000 C=1375.000000

03bc    B47: #	out( B183 B48 ) <- in( B46 )  Freq: 0.999954
        nop 	# 4 bytes pad for loops and calls
03c0    cmpl    R8, #1048576	# unsigned
03c7    jnbe,u   B183  P=0.000001 C=-1.000000

03cd    B48: #	out( B49 ) <- in( B47 )  Freq: 0.999953
03cd    movslq  RCX, R8	# i2l

03d0    B49: #	out( B167 B50 ) <- in( B48 B183 )  Freq: 0.999954
03d0    cmpl    R8, #1048576	# unsigned
03d7    jnbe,u   B167  P=0.000001 C=-1.000000

03dd    B50: #	out( B167 B51 ) <- in( B49 )  Freq: 0.999953
03dd    # TLS is in R15
03dd    movq    RSI, [R15 + #328 (32-bit)]	# ptr
03e4    addq    RCX, #23	# long
03e8    movq    RDI, RCX	# spill
03eb    andq    RDI, #-8	# long
03ef    movq    RAX, RSI	# spill
03f2    addq    RAX, RDI	# ptr
03f5    # TLS is in R15
        nop 	# 11 bytes pad for loops and calls
0400    cmpq    RAX, [R15 + #344 (32-bit)]	# raw ptr
0407    jnb,u   B167  P=0.000100 C=-1.000000

040d    B51: #	out( B52 ) <- in( B50 )  Freq: 0.999853
040d    # TLS is in R15
040d    movq    [R15 + #328 (32-bit)], RAX	# ptr
0414    PREFETCHW [RAX + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
041b    movq    [RSI], #1	# long
0422    PREFETCHW [RAX + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0429    movl    [RSI + #8 (8-bit)], narrowklass: precise klass [Z: 0x00007f03fc45a840:Constant:exact *	# compressed klass ptr
0430    movl    [RSI + #12 (8-bit)], R8	# int
0434    PREFETCHW [RAX + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
043b    movq    RDI, RSI	# spill
043e    addq    RDI, #16	# ptr
0442    PREFETCHW [RAX + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0449    shrq    RCX, #3
044d    addq    RCX, #-2	# long
0451    xorq    rax, rax	# ClearArray:
	cmp     InitArrayShortSize,rcx
	jg      LARGE
	dec     rcx
	js      DONE	# Zero length
	mov     rax,(rdi,rcx,8)	# LOOP
	dec     rcx
	jge     LOOP
	jmp     DONE
	# LARGE:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
	# DONE

0471    B52: #	out( B161 B53 ) <- in( B168 B51 )  Freq: 0.999954
0471    
0471    MEMBAR-storestore (empty encoding)
0471    movq    RDI, RSI	# spill
0474    # checkcastPP of RDI
0474    movl    RCX, R8	# spill
0477    # castII of RCX
0477    testl   RCX, RCX
0479    jle     B161  P=0.111156 C=12379.000000

047f    B53: #	out( B192 B54 ) <- in( B52 )  Freq: 0.888804
        nop 	# 1 bytes pad for loops and calls
0480    testl   RCX, RCX
0482    je     B192  P=0.000001 C=-1.000000

0488    B54: #	out( B192 B55 ) <- in( B53 )  Freq: 0.888803
0488    movl    RSI, RCX	# spill
048a    decl    RSI	# int
048c    cmpl    RSI, RCX	# unsigned
048e    jnb,u   B192  P=0.000001 C=-1.000000

0494    B55: #	out( B162 B56 ) <- in( B54 )  Freq: 0.888802
        nop 	# 12 bytes pad for loops and calls
04a0    testq   R11, #1	# long
04a7    je     B162  P=0.125057 C=11003.000000

04ad    B56: #	out( B57 ) <- in( B55 )  Freq: 0.777651
04ad    movl    RSI, #1	# int

04b2    B57: #	out( B193 B58 ) <- in( B162 B56 )  Freq: 0.888802
04b2    movb    [RDI + #16 (8-bit)], RSI	# byte
04b6    movl    RSI, RCX	# spill
04b8    addl    RSI, #-3	# int
        nop 	# 5 bytes pad for loops and calls
04c0    cmpl    RSI, #1
04c3    jle     B193  P=0.000001 C=-1.000000

04c9    B58: #	out( B202 B59 ) <- in( B57 )  Freq: 0.888801
04c9    cmpl    RCX, #1	# unsigned
04cc    jbe,u   B202  P=0.000001 C=-1.000000

04d2    B59: #	out( B203 B60 ) <- in( B58 )  Freq: 0.8888
04d2    cmpl    RCX, #4	# unsigned
04d5    jbe,u   B203  P=0.000001 C=-1.000000

04db    B60: #	out( B77 ) <- in( B59 )  Freq: 0.888799
04db    movl    R11, #1	# int
04e1    movl    [rsp + #32], RSI	# spill
04e5    jmp     B77
        nop 	# 6 bytes pad for loops and calls

04f0    B61: #	out( B62 ) <- in( B70 ) top-of-loop Freq: 62.9387
04f0    movl    R8, #1	# int

04f6    B62: #	out( B75 B63 ) <- in( B71 B61 ) top-of-loop Freq: 71.9346
04f6    sarq    RBP, #1
04f9    movslq  R9, R11	# i2l
04fc    movb    [RDI + #16 + R9], RCX	# byte
0501    movb    [RDI + #17 + R9], RSI	# byte
0506    movb    [RDI + #18 + R9], R10	# byte
050b    movb    [RDI + #19 + R9], R8	# byte
0510    sarq    RBP, #1
0513    addl    R11, #4	# int
0517    cmpl    R11, RAX
        nop 	# 6 bytes pad for loops and calls
0520    jge     B75	# loop end  P=0.111156 C=11003.000000

0526    B63: #	out( B64 ) <- in( B62 )  Freq: 63.9386
0526    movdq   R9, XMM0	# spill
052b    movdl   R8, XMM1	# spill
0530    movdl   R10, XMM3	# spill

0535    B64: #	out( B72 B65 ) <- in( B77 B63 ) Loop( B64-B63 inner main of N697 strip mined) Freq: 71.9346
        nop 	# 11 bytes pad for loops and calls
0540    testq   RBP, #1	# long
0547    je     B72  P=0.125057 C=11003.000000

054d    B65: #	out( B66 ) <- in( B64 )  Freq: 62.9387
054d    movl    RCX, #1	# int

0552    B66: #	out( B73 B67 ) <- in( B72 B65 )  Freq: 71.9346
0552    movq    RSI, RBP	# spill
0555    shrq    RSI, #1
        nop 	# 8 bytes pad for loops and calls
0560    testq   RSI, #1	# long
0567    je     B73  P=0.125057 C=11003.000000

056d    B67: #	out( B68 ) <- in( B66 )  Freq: 62.9387
056d    movl    RSI, #1	# int

0572    B68: #	out( B74 B69 ) <- in( B73 B67 )  Freq: 71.9346
0572    movdl   XMM3, R10	# spill
0577    movdl   XMM1, R8	# spill
057c    movdq   XMM0, R9	# spill
0581    sarq    RBP, #1
0584    movq    R10, RBP	# spill
0587    shrq    R10, #1
058a    testq   R10, #1	# long
0591    je     B74  P=0.125057 C=11003.000000

0597    B69: #	out( B70 ) <- in( B68 )  Freq: 62.9387
0597    movl    R10, #1	# int

059d    B70: #	out( B61 B71 ) <- in( B74 B69 )  Freq: 71.9346
059d    sarq    RBP, #1
05a0    movq    R8, RBP	# spill
05a3    shrq    R8, #1
05a6    testq   R8, #1	# long
05ad    jne     B61  P=0.874943 C=11003.000000

05b3    B71: #	out( B62 ) <- in( B70 )  Freq: 8.99591
05b3    xorl    R8, R8	# int
05b6    jmp     B62

05bb    B72: #	out( B66 ) <- in( B64 )  Freq: 8.99591
05bb    xorl    RCX, RCX	# int
        nop 	# 3 bytes pad for loops and calls
05c0    jmp,s   B66

05c2    B73: #	out( B68 ) <- in( B66 )  Freq: 8.99591
05c2    xorl    RSI, RSI	# int
05c4    jmp,s   B68

05c6    B74: #	out( B70 ) <- in( B68 )  Freq: 8.99591
05c6    xorl    R10, R10	# int
05c9    jmp,s   B70

05cb    B75: #	out( B78 B76 ) <- in( B62 )  Freq: 7.99596
05cb    # TLS is in R15
05cb    movq    R10, [R15 + #304 (32-bit)]	# ptr
05d2    testl   rax, [R10]	# Safepoint: poll for GC        # jdk.incubator.vector.VectorMask::fromLong @ bci:135 (line 255) L[0]=_ L[1]=_ L[2]=_ L[3]=XMM0 L[4]=_ L[5]=RBP L[6]=_ L[7]=RDI L[8]=R11
        # App::micro_vector_masked @ bci:149 (line 51) L[0]=rsp + #24 L[1]=R14 L[2]=R13 L[3]=RDX L[4]=XMM3 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rdi=Oop rdx=Oop r13=Oop r14=Oop xmm0=Oop [24]=Oop off=1490/0x5d2}
05d5    cmpl    R11, [RSP + #32 (32-bit)]
05da    jge,s   B78  P=0.111156 C=11003.000000

05dc    B76: #	out( B77 ) <- in( B75 )  Freq: 7.10716
05dc    movdq   R9, XMM0	# spill
05e1    movdl   R8, XMM1	# spill
05e6    movdl   R10, XMM3	# spill
05eb    movdl   RCX, XMM4	# spill

05ef    B77: #	out( B64 ) <- in( B60 B76 ) Loop( B77-B76 ) Freq: 7.99596
05ef    movdl   XMM4, RCX	# spill
05f3    movl    RAX, RCX	# spill
05f5    subl    RAX, R11	# int
05f8    addl    RAX, #-3	# int
05fb    movl    RCX, [rsp + #32]	# spill
05ff    xorl    RSI, RSI	# int
0601    cmpl    RCX, R11
0604    cmovll RAX, RSI	# signed, int
0607    cmpl    RAX, #4000	# unsigned
060d    movl    RSI, #4000	# int
0612    cmovlnbe RAX, RSI	# unsigned, int
0615    addl    RAX, R11	# int
0618    jmp     B64

061d    B78: #	out( B79 ) <- in( B75 )  Freq: 0.888799
061d    movdq   R9, XMM0	# spill
0622    movdl   R8, XMM1	# spill
0627    movdl   R10, XMM3	# spill
062c    movdl   RCX, XMM4	# spill

0630    B79: #	out( B85 B80 ) <- in( B193 B78 )  Freq: 0.8888
0630    cmpl    R11, RCX
0633    jge,s   B85  P=0.500000 C=-1.000000

0635    B80: #	out( B81 ) <- in( B79 )  Freq: 0.4444
0635    # castII of R11
        nop 	# 3 bytes pad for loops and calls

0638    B81: #	out( B163 B82 ) <- in( B80 B84 ) Loop( B81-B84 inner post of N1358) Freq: 0.8888
        nop 	# 8 bytes pad for loops and calls
0640    testq   RBP, #1	# long
0647    je     B163  P=0.125057 C=11003.000000

064d    B82: #	out( B83 ) <- in( B81 )  Freq: 0.777649
064d    movl    RSI, #1	# int

0652    B83: #	out( B85 B84 ) <- in( B163 B82 )  Freq: 0.8888
0652    movb    [RDI + #16 + R11], RSI	# byte
0657    incl    R11	# int
        nop 	# 6 bytes pad for loops and calls
0660    cmpl    R11, RCX
0663    jge,s   B85	# loop end  P=0.500000 C=11003.000000

0665    B84: #	out( B81 ) <- in( B83 )  Freq: 0.4444
0665    sarq    RBP, #1
0668    jmp,s   B81

066a    B85: #	out( B86 ) <- in( B83 B79 )  Freq: 0.8888
066a    movq    [rsp + #32], R14	# spill
066f    movq    [rsp + #56], R13	# spill
0674    movq    [rsp + #40], RDX	# spill
0679    movl    [rsp + #168], RBX	# spill
0680    movl    R11, R8	# spill
0683    movl    [rsp + #64], R10	# spill

0688    B86: #	out( B249 B87 ) <- in( B85 B161 )  Freq: 0.999951
0688    movl    R8, [R9 + #48 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.maskType (constant)
068c    movq    R10, R9	# spill
068f    decode_heap_oop RSI,R8
06bb    movq    RDX, java/lang/Class:exact *	# ptr
06c5    movl    RCX, R11	# spill
06c8    movq    R8, RDI	# spill
06cb    movl    R9, #16	# long (unsigned 32-bit)
06d1    xorl    R11, R11	# int
06d4    movl    [rsp + #0], R11	# spill
06d8    movq    [rsp + #8], R10	# spill
06dd    movq    R10, jdk/incubator/vector/VectorMask$$Lambda$53+0x00000008000aa6e0:exact *	# ptr
06e7    movq    [rsp + #16], R10	# spill
06ec    call,static  jdk.internal.vm.vector.VectorSupport::load
        # jdk.incubator.vector.VectorMask::fromArray @ bci:46 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.VectorMask::fromValues @ bci:17 (line 183) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.VectorMask::fromLong @ bci:141 (line 259) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # App::micro_vector_masked @ bci:149 (line 51) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #56 L[3]=rsp + #40 L[4]=rsp + #64 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[24]=Oop [32]=Oop [40]=Oop [56]=Oop off=1780/0x6f4}

06f4    B87: #	out( B231 B88 ) <- in( B86 )  Freq: 0.999931
        # Block is sole successor of call
06f4    movl    R11, [RAX + #8 (8-bit)]	# compressed klass ptr
06f8    NullCheck RAX

06f8    B88: #	out( B222 B89 ) <- in( B87 )  Freq: 0.99993
        nop 	# 8 bytes pad for loops and calls
0700    cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector$Int256Mask: 0x00007f036c63e740:Constant:exact *	# compressed klass ptr
0707    jne,u   B222  P=0.000000 C=-1.000000

070d    B89: #	out( B232 B90 ) <- in( B88 )  Freq: 0.99993
070d    movq    R8, RAX	# spill
0710    # checkcastPP of R8
0710    movq    R11, [rsp + #24]	# spill
0715    movl    RBP, [R11 + #12 (8-bit)]	# compressed ptr ! Field: App.SPECIES
        nop 	# 7 bytes pad for loops and calls
0720    movl    R9, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0725    NullCheck RBP

0725    B90: #	out( B223 B91 ) <- in( B89 )  Freq: 0.999929
0725    cmpl    R9, narrowklass: precise klass jdk/incubator/vector/IntVector$IntSpecies: 0x00007f036c19b230:Constant:exact *	# compressed klass ptr
072c    jne,u   B223  P=0.000000 C=-1.000000

0732    B91: #	out( B210 B92 ) <- in( B90 )  Freq: 0.999929
0732    decode_heap_oop_not_null R9,RBP
0736    # checkcastPP of R9
0736    movl    R10, [rsp + #64]	# spill
        nop 	# 5 bytes pad for loops and calls
0740    testl   R10, R10
0743    jl     B210  P=0.000000 C=27555.000000

0749    B92: #	out( B233 B93 ) <- in( B91 )  Freq: 0.999928
0749    movq    RBX, [rsp + #56]	# spill
074e    movl    RCX, [RBX + #12 (8-bit)]	# range
0751    NullCheck RBX

0751    B93: #	out( B213 B94 ) <- in( B92 )  Freq: 0.999927
0751    movl    RDI, [R9 + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
0755    movl    RBP, RCX	# spill
0757    subl    RBP, RDI	# int
0759    cmpl    R10, RBP
        nop 	# 4 bytes pad for loops and calls
0760    jle     B213  P=0.000000 C=27555.000000

0766    B94: #	out( B214 B95 ) <- in( B93 )  Freq: 0.999927
0766    movl    RBP, [R9 + #44 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.vectorType (constant)
076a    cmpl    RBP, narrowoop: java/lang/Class:exact *	# compressed ptr
0770    je,u   B214  P=0.000000 C=8101.000000

0776    B95: #	out( B186 B96 ) <- in( B94 )  Freq: 0.999926
0776    movl    RBP, [R9 + #28 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.vectorBitSize (constant)
        nop 	# 6 bytes pad for loops and calls
0780    cmpl    RBP, #256
0786    jne     B186  P=0.000001 C=8101.000000

078c    B96: #	out( B215 B97 ) <- in( B95 )  Freq: 0.999925
078c    movl    RDX, RCX	# spill
078e    subl    RDX, [RSP + #64 (32-bit)]	# int
0792    movl    RDI, [R8 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0796    load_vector XMM0,[R12 + RDI << 3 + #16] (compressed oop addressing)
079d    cmpl    RDX, #8
07a0    movl    RSI, #8	# int
07a5    cmovlge RDX, RSI	# signed, int
07a8    xorl    RDI, RDI	# int
07aa    testl   RDX, RDX
07ac    cmovlle RDX, RDI	# signed, int
07af    replicateI XMM1,RDX
07b8    movq    RDI, int[int:8]<ciTypeArray length=8 type=<ciTypeArrayKlass name=[I ident=1229 address=0x00007f03fc45aa50> ident=1595 address=0x00007f036c44d7c0> *	# ptr
07c2    load_vector XMM2,[RDI + #16 (8-bit)]
07c7    vallones XMM3
07cb    vector_compare XMM1,XMM2,XMM1,#7	! using RDI as TEMP
07d7    vector_loadmask_byte XMM2,XMM0
	
07e4    vpand   XMM0,XMM1,XMM2	! and vectors
07e8    vector_test_any_true RBP,XMM0,XMM3	! using RFLAGS as TEMP
07f5    testl   RBP, RBP
07f7    jne     B215  P=0.000000 C=8101.000000

07fd    B97: #	out( B169 B98 ) <- in( B96 )  Freq: 0.999925
07fd    # TLS is in R15
07fd    movq    RCX, [R15 + #328 (32-bit)]	# ptr
0804    movq    RDI, RCX	# spill
0807    addq    RDI, #24	# ptr
080b    # TLS is in R15
080b    cmpq    RDI, [R15 + #344 (32-bit)]	# raw ptr
0812    jnb,u   B169  P=0.000100 C=-1.000000

0818    B98: #	out( B99 ) <- in( B97 )  Freq: 0.999825
0818    # TLS is in R15
0818    movq    [R15 + #328 (32-bit)], RDI	# ptr
081f    PREFETCHW [RDI + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0826    movq    [RCX], #1	# long
082d    movl    [RCX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58: 0x00007f03803781c0:Constant:exact *	# compressed klass ptr
0834    movl    [RCX + #12 (8-bit)], R12	# int (R12_heapbase==0)
0838    movl    [RCX + #20 (8-bit)], R12	# int (R12_heapbase==0)
083c    movq    RBP, [rsp + #24]	# spill
0841    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #64]
	movl    [rsp + #48], rax
	movq    rax, [rsp - #8]
0853    movq    [rsp + #56], R8	# spill
0858    movq    [rsp + #64], R9	# spill
085d    vmovdqu [rsp + 96],XMM3	# spill

0863    B99: #	out( B244 B100 ) <- in( B170 B98 )  Freq: 0.999925
0863    encode_heap_oop_not_null R10,RBX
08ac    movl    [RCX + #16 (8-bit)], R10	# compressed ptr
08b0    
08b0    # checkcastPP of RCX
08b0    movl    R10, [rsp + #48]	# spill
08b5    movl    [RCX + #12 (8-bit)], R10	# int ! Field: jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58.arg$2 (constant)
08b9    MEMBAR-release ! (empty encoding)
08b9    # checkcastPP of RCX
08b9    movq    RSI, [rsp + #64]	# spill
08be    movq    RDX, [rsp + #56]	# spill
        nop 	# 1 bytes pad for loops and calls
08c4    call,static  jdk.incubator.vector.IntVector$IntSpecies::vOp
        # jdk.incubator.vector.IntVector::fromArray @ bci:64 (line 2728) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #32 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #48 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #56
        # OopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop off=2252/0x8cc}

08cc    B100: #	out( B234 B101 ) <- in( B99 )  Freq: 0.999905
        # Block is sole successor of call
08cc    movq    [rsp + #64], RAX	# spill
08d1    movl    R10, [RBP + #12 (8-bit)]	# compressed ptr ! Field: App.SPECIES
08d5    movl    R11, [R12 + R10 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
08da    NullCheck R10

08da    B101: #	out( B224 B102 ) <- in( B100 )  Freq: 0.999904
        nop 	# 6 bytes pad for loops and calls
08e0    cmpl    R11, narrowklass: precise klass jdk/incubator/vector/IntVector$IntSpecies: 0x00007f036c19b230:Constant:exact *	# compressed klass ptr
08e7    jne,u   B224  P=0.000000 C=-1.000000

08ed    B102: #	out( B235 B103 ) <- in( B101 )  Freq: 0.999904
08ed    movq    R11, [rsp + #40]	# spill
08f2    movl    R8, [R11 + #12 (8-bit)]	# range
08f6    NullCheck R11

08f6    B103: #	out( B216 B104 ) <- in( B102 )  Freq: 0.999903
08f6    decode_heap_oop_not_null RBX,R10
08fa    # checkcastPP of RBX
08fa    movl    R9, [RBX + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
08fe    movl    RBP, R8	# spill
0901    subl    RBP, R9	# int
0904    movl    R10, [rsp + #48]	# spill
0909    cmpl    R10, RBP
090c    jle     B216  P=0.000000 C=27555.000000

0912    B104: #	out( B217 B105 ) <- in( B103 )  Freq: 0.999902
0912    movl    RBP, [RBX + #44 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.vectorType (constant)
        nop 	# 11 bytes pad for loops and calls
0920    cmpl    RBP, narrowoop: java/lang/Class:exact *	# compressed ptr
0926    je,u   B217  P=0.000000 C=8101.000000

092c    B105: #	out( B187 B106 ) <- in( B104 )  Freq: 0.999902
092c    movl    RBP, [RBX + #28 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.vectorBitSize (constant)
092f    cmpl    RBP, #256
0935    jne     B187  P=0.000001 C=8101.000000

093b    B106: #	out( B218 B107 ) <- in( B105 )  Freq: 0.999901
093b    movl    RDI, R8	# spill
093e    subl    RDI, [RSP + #48 (32-bit)]	# int
0942    movq    RDX, [rsp + #56]	# spill
0947    movl    RCX, [RDX + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
094a    movq    R9, int[int:8]<ciTypeArray length=8 type=<ciTypeArrayKlass name=[I ident=1229 address=0x00007f03fc45aa50> ident=1595 address=0x00007f036c44d7c0> *	# ptr
0954    load_vector XMM1,[R9 + #16 (8-bit)]
095a    load_vector XMM0,[R12 + RCX << 3 + #16] (compressed oop addressing)
0961    cmpl    RDI, #8
0964    movl    RCX, #8	# int
0969    cmovlge RDI, RCX	# signed, int
096c    xorl    R9, R9	# int
096f    testl   RDI, RDI
0971    cmovlle RDI, R9	# signed, int
0975    replicateI XMM2,RDI
097e    vector_compare XMM1,XMM1,XMM2,#7	! using R9 as TEMP
098a    vector_loadmask_byte XMM2,XMM0
	
0997    vpand   XMM1,XMM1,XMM2	! and vectors
099b    vmovdqu XMM0,[rsp + 96]	# spill
09a1    vector_test_any_true RBP,XMM1,XMM0	! using RFLAGS as TEMP
09ae    testl   RBP, RBP
09b0    jne     B218  P=0.000000 C=8101.000000

09b6    B107: #	out( B171 B108 ) <- in( B106 )  Freq: 0.9999
09b6    # TLS is in R15
09b6    movq    RCX, [R15 + #328 (32-bit)]	# ptr
09bd    movq    R8, RCX	# spill
09c0    addq    R8, #24	# ptr
09c4    # TLS is in R15
09c4    cmpq    R8, [R15 + #344 (32-bit)]	# raw ptr
09cb    jnb,u   B171  P=0.000100 C=-1.000000

09d1    B108: #	out( B109 ) <- in( B107 )  Freq: 0.9998
09d1    # TLS is in R15
09d1    movq    [R15 + #328 (32-bit)], R8	# ptr
09d8    PREFETCHW [R8 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
09e0    movq    [RCX], #1	# long
09e7    movl    [RCX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58: 0x00007f03803781c0:Constant:exact *	# compressed klass ptr
09ee    movl    [RCX + #12 (8-bit)], R12	# int (R12_heapbase==0)
09f2    movl    [RCX + #20 (8-bit)], R12	# int (R12_heapbase==0)
09f6    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #48]
	movl    [rsp + #56], rax
	movq    rax, [rsp - #8]
0a08    movq    [rsp + #40], RDX	# spill
0a0d    movq    [rsp + #24], RBX	# spill

0a12    B109: #	out( B246 B110 ) <- in( B172 B108 )  Freq: 0.9999
0a12    encode_heap_oop_not_null R11,R11
0a58    movl    [RCX + #16 (8-bit)], R11	# compressed ptr
0a5c    
0a5c    # checkcastPP of RCX
0a5c    movl    R10, [rsp + #56]	# spill
0a61    movl    [RCX + #12 (8-bit)], R10	# int ! Field: jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58.arg$2 (constant)
0a65    MEMBAR-release ! (empty encoding)
0a65    # checkcastPP of RCX
0a65    movq    RSI, [rsp + #24]	# spill
0a6a    movq    RDX, [rsp + #40]	# spill
        nop 	# 1 bytes pad for loops and calls
0a70    call,static  jdk.incubator.vector.IntVector$IntSpecies::vOp
        # jdk.incubator.vector.IntVector::fromArray @ bci:64 (line 2728) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #32 L[2]=_ L[3]=_ L[4]=rsp + #56 L[5]=rsp + #64 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #40
        # OopMap {[32]=Oop [40]=Oop [64]=Oop off=2680/0xa78}

0a78    B110: #	out( B236 B111 ) <- in( B109 )  Freq: 0.99988
        # Block is sole successor of call
0a78    movq    R10, [rsp + #64]	# spill
        nop 	# 3 bytes pad for loops and calls
0a80    movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
0a84    NullCheck R10

0a84    B111: #	out( B188 B112 ) <- in( B110 )  Freq: 0.999879
0a84    cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007f0380618b40:Constant:exact *	# compressed klass ptr
0a8b    jne,u   B188  P=0.000001 C=-1.000000

0a91    B112: #	out( B237 B113 ) <- in( B111 )  Freq: 0.999878
0a91    # checkcastPP of R10
0a91    movl    R8, [RAX + #8 (8-bit)]	# compressed klass ptr
0a95    NullCheck RAX

0a95    B113: #	out( B225 B114 ) <- in( B112 )  Freq: 0.999877
        nop 	# 11 bytes pad for loops and calls
0aa0    cmpl    R8, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007f0380618b40:Constant:exact *	# compressed klass ptr
0aa7    jne,u   B225  P=0.000000 C=-1.000000

0aad    B114: #	out( B173 B115 ) <- in( B113 )  Freq: 0.999877
0aad    # checkcastPP of RAX
0aad    movl    R8, [R10 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0ab1    movl    R11, [RAX + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0ab5    load_vector XMM2,[R12 + R8 << 3 + #16] (compressed oop addressing)
0abc    vpaddd  XMM3,XMM2,[R12 + R11 << 3 + #16] (compressed oop addressing)	! add packedI
0ac3    # TLS is in R15
0ac3    movq    RAX, [R15 + #328 (32-bit)]	# ptr
0aca    movq    R11, RAX	# spill
0acd    addq    R11, #48	# ptr
0ad1    # TLS is in R15
0ad1    cmpq    R11, [R15 + #344 (32-bit)]	# raw ptr
0ad8    jnb,u   B173  P=0.000100 C=-1.000000

0ade    B115: #	out( B116 ) <- in( B114 )  Freq: 0.999777
0ade    # TLS is in R15
0ade    movq    [R15 + #328 (32-bit)], R11	# ptr
0ae5    PREFETCHW [R11 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0aed    movq    [RAX], #1	# long
0af4    PREFETCHW [R11 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0afc    movl    [RAX + #8 (8-bit)], narrowklass: precise klass [I: 0x00007f03fc45aa50:Constant:exact *	# compressed klass ptr
0b03    PREFETCHW [R11 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0b0b    movl    [RAX + #12 (8-bit)], #8	# int
0b12    PREFETCHW [R11 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0b1a    movq    [RAX + #16 (8-bit)], R12	# long (R12_heapbase==0)
0b1e    movq    [RAX + #24 (8-bit)], R12	# long (R12_heapbase==0)
0b22    movq    [RAX + #32 (8-bit)], R12	# long (R12_heapbase==0)
0b26    movq    [RAX + #40 (8-bit)], R12	# long (R12_heapbase==0)

0b2a    B116: #	out( B219 B117 ) <- in( B174 B115 )  Freq: 0.999877
0b2a    
0b2a    # checkcastPP of RAX
0b2a    movq    R9, [rsp + #40]	# spill
0b2f    movl    R11, [R9 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0b33    load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
0b3a    vector_loadmask_byte XMM1,XMM0
	
0b47    vector_blend  XMM4,XMM2,XMM3,XMM1	!
0b4d    store_vector [RAX + #16 (8-bit)],XMM4
	
0b52    vmovdqu XMM3,[rsp + 96]	# spill
0b58    vector_test RBP,XMM1, XMM3	! using RFLAGS as TEMP
0b65    testl   RBP, RBP
0b67    jne     B219  P=0.000000 C=19724.000000

0b6d    B117: #	out( B220 B118 ) <- in( B116 )  Freq: 0.999877
0b6d    movq    R10, int[int:8]<ciTypeArray length=8 type=<ciTypeArrayKlass name=[I ident=1229 address=0x00007f03fc45aa50> ident=1595 address=0x00007f036c44d7c0> *	# ptr
0b77    load_vector XMM0,[R10 + #16 (8-bit)]
0b7d    movl    R10, [rsp + #168]	# spill
0b85    subl    R10, [RSP + #56 (32-bit)]	# int
0b8a    cmpl    R10, #8
0b8e    movl    R8, #8	# int
0b94    cmovlge R10, R8	# signed, int
0b98    xorl    R11, R11	# int
0b9b    testl   R10, R10
0b9e    cmovlle R10, R11	# signed, int
0ba2    replicateI XMM2,R10
0bac    vector_compare XMM0,XMM0,XMM2,#7	! using R10 as TEMP
0bb8    vpand   XMM0,XMM0,XMM1	! and vectors
0bbc    vector_test_any_true RBP,XMM0,XMM3	! using RFLAGS as TEMP
0bc9    testl   RBP, RBP
0bcb    jne     B220  P=0.000000 C=8101.000000

0bd1    B118: #	out( B238 B119 ) <- in( B117 )  Freq: 0.999876
0bd1    
0bd1    MEMBAR-acquire ! (empty encoding)
0bd1    # checkcastPP of RAX
0bd1    
0bd1    MEMBAR-acquire ! (empty encoding)
0bd1    # checkcastPP of R9
0bd1    movl    R10, [R9 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0bd5    movl    R11, [R12 + R10 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0bda    NullCheck R10

0bda    B119: #	out( B226 B120 ) <- in( B118 )  Freq: 0.999875
        nop 	# 6 bytes pad for loops and calls
0be0    cmpl    R11, narrowklass: precise klass [Z: 0x00007f03fc45a840:Constant:exact *	# compressed klass ptr
0be7    jne,u   B226  P=0.000000 C=-1.000000

0bed    B120: #	out( B159 B121 ) <- in( B119 )  Freq: 0.999875
0bed    movl    RBP, [RAX + #12 (8-bit)]	# range
0bf0    testl   RBP, RBP	# unsigned
0bf2    jbe,u   B159  P=0.111137 C=21307.000000

0bf8    B121: #	out( B194 B122 ) <- in( B120 )  Freq: 0.888752
0bf8    decode_heap_oop_not_null R9,R10
0bfc    # checkcastPP of R9
0bfc    movl    RDX, [R9 + #12 (8-bit)]	# range
0c00    testl   RDX, RDX	# unsigned
0c02    jbe,u   B194  P=0.000001 C=-1.000000

0c08    B122: #	out( B194 B123 ) <- in( B121 )  Freq: 0.888751
0c08    movl    R10, RBP	# spill
0c0b    decl    R10	# int
0c0e    cmpl    R10, RDX	# unsigned
0c11    jnb,u   B194  P=0.000001 C=-1.000000

0c17    B123: #	out( B124 ) <- in( B122 )  Freq: 0.88875
0c17    movslq  RSI, [RSP + #56 (32-bit)]	# int -> long
0c1c    movq    R10, RSI	# spill
0c1f    negq    R10	# long
0c22    movl    R8, R10	# l2i
0c25    movl    R11, #2147483647	# int
0c2b    cmpq    R10, #2147483647
0c32    cmovlg R8, R11	# signed, int
0c36    movl    R10, #1	# int
0c3c    cmpl    R8, R10
0c3f    movl    R11, #1	# int
0c45    cmovllt R8, R11	# max
0c49    cmpl    R8, RBP
0c4c    cmovlgt R8, RBP	# min
0c50    xorl    R10, R10	# int

0c53    B124: #	out( B160 B125 ) <- in( B123 B129 ) Loop( B124-B129 inner pre of N1368) Freq: 1.7775
0c53    movslq  RDI, R10	# i2l
0c56    movzbl  R11, [R9 + #16 + RDI]	# ubyte
        nop 	# 4 bytes pad for loops and calls
0c60    testl   R11, R11
0c63    je     B160  P=0.125033 C=18939.000000

0c69    B125: #	out( B178 B126 ) <- in( B124 )  Freq: 1.55525
0c69    cmpl    R10, RBP	# unsigned
0c6c    jnb,u   B178  P=0.000001 C=-1.000000

0c72    B126: #	out( B180 B127 ) <- in( B125 )  Freq: 1.55525
0c72    movl    RCX, [RAX + #16 + RDI << #2]	# int
0c76    movl    R11, R10	# spill
0c79    addl    R11, [RSP + #56 (32-bit)]	# int
        nop 	# 2 bytes pad for loops and calls
0c80    cmpl    R11, [RSP + #168 (32-bit)]	# unsigned
0c88    jnb,u   B180  P=0.000001 C=-1.000000

0c8e    B127: #	out( B128 ) <- in( B126 )  Freq: 1.55525
0c8e    addq    RDI, RSI	# long
0c91    movq    RBX, [rsp + #32]	# spill
0c96    movl    [RBX + #16 + RDI << #2], RCX	# int

0c9a    B128: #	out( B130 B129 ) <- in( B127 B160 )  Freq: 1.77749
0c9a    incl    R10	# int
        nop 	# 3 bytes pad for loops and calls
0ca0    cmpl    R10, R8
0ca3    jge,s   B130	# loop end  P=0.500000 C=18939.000000

0ca5    B129: #	out( B124 ) <- in( B128 )  Freq: 0.888747
0ca5    movq    [rsp + #32], RBX	# spill
0caa    jmp,s   B124

0cac    B130: #	out( B152 B131 ) <- in( B128 )  Freq: 0.888747
0cac    movslq  RCX, [RSP + #168 (32-bit)]	# int -> long
0cb4    movq    R11, RCX	# spill
0cb7    subq    R11, RSI	# long
0cba    movl    R8, R11	# l2i
0cbd    cmpl    R8, RBP
0cc0    cmovlgt R8, RBP	# min
0cc4    cmpl    R8, RBP
0cc7    cmovlgt R8, RBP	# min
0ccb    movl    R11, R8	# spill
0cce    addl    R11, #-3	# int
0cd2    movl    RDI, #-2147483648	# int
0cd7    cmpl    R8, R11
0cda    cmovll R11, RDI	# signed, int
        nop 	# 2 bytes pad for loops and calls
0ce0    cmpl    R10, R11
0ce3    jge     B152  P=0.000001 C=-1.000000

0ce9    B131: #	out( B195 B132 ) <- in( B130 )  Freq: 0.888746
0ce9    # castII of R10
0ce9    cmpl    R10, RDX	# unsigned
0cec    jnb,u   B195  P=0.000001 C=-1.000000

0cf2    B132: #	out( B196 B133 ) <- in( B131 )  Freq: 0.888745
0cf2    cmpl    R10, RBP	# unsigned
0cf5    jnb,u   B196  P=0.000001 C=-1.000000

0cfb    B133: #	out( B197 B134 ) <- in( B132 )  Freq: 0.888744
0cfb    movslq  R8, R10	# i2l
0cfe    addq    R8, RSI	# long
0d01    cmpq    R8, RCX	# unsigned
0d04    jnb,u   B197  P=0.000001 C=-1.000000

0d0a    B134: #	out( B198 B135 ) <- in( B133 )  Freq: 0.888744
0d0a    movl    R8, R10	# spill
0d0d    addl    R8, #3	# int
0d11    movslq  RDI, R8	# i2l
0d14    addq    RDI, RSI	# long
0d17    cmpq    RDI, RCX	# unsigned
        nop 	# 6 bytes pad for loops and calls
0d20    jnb,u   B198  P=0.000001 C=-1.000000

0d26    B135: #	out( B199 B136 ) <- in( B134 )  Freq: 0.888743
0d26    cmpl    R8, RBP	# unsigned
0d29    jnb,u   B199  P=0.000001 C=-1.000000

0d2f    B136: #	out( B200 B137 ) <- in( B135 )  Freq: 0.888742
0d2f    cmpl    R10, RBP	# unsigned
0d32    jnb,u   B200  P=0.000001 C=-1.000000

0d38    B137: #	out( B201 B138 ) <- in( B136 )  Freq: 0.888741
0d38    cmpl    R10, RDX	# unsigned
        nop 	# 5 bytes pad for loops and calls
0d40    jnb,u   B201  P=0.000001 C=-1.000000

0d46    B138: #	out( B151 B139 ) <- in( B137 )  Freq: 0.88874
0d46    cmpl    R8, RDX	# unsigned
0d49    jb,u   B151  P=0.999999 C=-1.000000

0d4f    B139: #	out( N2963 ) <- in( B138 )  Freq: 9.00541e-07
0d4f    stop	# ShouldNotReachHere

0d63    B140: #	out( B141 ) <- in( B148 ) top-of-loop Freq: 62.9575
0d63    movl    RCX, [RAX + #28 + RDX << #2]	# int
0d67    movl    [RBX + #28 + RDI << #2], RCX	# int

0d6b    B141: #	out( B150 B142 ) <- in( B140 B149 ) top-of-loop Freq: 71.9541
0d6b    addl    R10, #4	# int
0d6f    cmpl    R10, R8
0d72    jge     B150	# loop end  P=0.111137 C=18939.000000

0d78    B142: #	out( B144 B143 ) <- in( B151 B141 ) Loop( B142-B141 inner main of N1419 strip mined) Freq: 71.9541
0d78    movl    RCX, R10	# spill
0d7b    addl    RCX, [RSP + #56 (32-bit)]	# int
0d7f    movslq  RDI, R10	# i2l
0d82    movzbl  RDX, [R9 + #16 + RDI]	# ubyte
0d88    testl   RDX, RDX
0d8a    je,s   B144  P=0.125033 C=18939.000000

0d8c    B143: #	out( B144 ) <- in( B142 )  Freq: 62.9575
0d8c    movl    RDI, [RAX + #16 + RDI << #2]	# int
0d90    movl    [RBX + #16 + RCX << #2], RDI	# int

0d94    B144: #	out( B146 B145 ) <- in( B143 B142 )  Freq: 71.9541
0d94    movslq  RDI, RCX	# i2l
0d97    movslq  RDX, R10	# i2l
0d9a    movzbl  RCX, [R9 + #17 + RDX]	# ubyte
0da0    testl   RCX, RCX
0da2    je,s   B146  P=0.125033 C=18939.000000

0da4    B145: #	out( B146 ) <- in( B144 )  Freq: 62.9575
0da4    movl    RCX, [RAX + #20 + RDX << #2]	# int
0da8    movl    [RBX + #20 + RDI << #2], RCX	# int

0dac    B146: #	out( B148 B147 ) <- in( B145 B144 )  Freq: 71.9541
0dac    movzbl  RCX, [R9 + #18 + RDX]	# ubyte
0db2    testl   RCX, RCX
0db4    je,s   B148  P=0.125033 C=18939.000000

0db6    B147: #	out( B148 ) <- in( B146 )  Freq: 62.9575
0db6    movl    RCX, [RAX + #24 + RDX << #2]	# int
0dba    movl    [RBX + #24 + RDI << #2], RCX	# int

0dbe    B148: #	out( B140 B149 ) <- in( B147 B146 )  Freq: 71.9541
0dbe    movzbl  RCX, [R9 + #19 + RDX]	# ubyte
0dc4    testl   RCX, RCX
0dc6    jne,s   B140  P=0.874967 C=18939.000000

0dc8    B149: #	out( B141 ) <- in( B148 )  Freq: 8.99664
0dc8    jmp,s   B141

0dca    B150: #	out( B152 B151 ) <- in( B141 )  Freq: 7.99678
0dca    # TLS is in R15
0dca    movq    R8, [R15 + #304 (32-bit)]	# ptr
0dd1    testl   rax, [R8]	# Safepoint: poll for GC        # jdk.incubator.vector.IntVector::stOp @ bci:53 (line 353) L[0]=_ L[1]=RBX L[2]=rsp + #56 L[3]=_ L[4]=#Ptr0x00007f036c5744f0 L[5]=RAX L[6]=R9 L[7]=R10
        # jdk.incubator.vector.IntVector::intoArray @ bci:41 (line 3006) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {r9=Oop rbx=Oop rax=Oop off=3537/0xdd1}
0dd4    cmpl    R10, R11
0dd7    jge,s   B152  P=0.111137 C=18939.000000

0dd9    B151: #	out( B142 ) <- in( B138 B150 ) Loop( B151-B150 ) Freq: 7.99678
0dd9    movl    R8, R11	# spill
0ddc    subl    R8, R10	# int
0ddf    xorl    RCX, RCX	# int
0de1    cmpl    R11, R10
0de4    cmovll R8, RCX	# signed, int
0de8    cmpl    R8, #4000	# unsigned
0def    movl    RCX, #4000	# int
0df4    cmovlnbe R8, RCX	# unsigned, int
0df8    addl    R8, R10	# int
        nop 	# 5 bytes pad for loops and calls
0e00    jmp     B142

0e05    B152: #	out( B159 B153 ) <- in( B130 B150 )  Freq: 0.88874
0e05    cmpl    R10, RBP
0e08    jge     B159  P=0.500000 C=-1.000000

0e0e    B153: #	out( B154 ) <- in( B152 )  Freq: 0.44437
0e0e    # castII of R10
        nop 	# 2 bytes pad for loops and calls

0e10    B154: #	out( B158 B155 ) <- in( B153 B158 ) Loop( B154-B158 inner post of N1368) Freq: 0.888738
0e10    movslq  R11, R10	# i2l
0e13    movzbl  R8, [R9 + #16 + R11]	# ubyte
0e19    testl   R8, R8
0e1c    je,s   B158  P=0.125033 C=18939.000000

0e1e    B155: #	out( B179 B156 ) <- in( B154 )  Freq: 0.777617
        nop 	# 2 bytes pad for loops and calls
0e20    cmpl    R10, RBP	# unsigned
0e23    jnb,u   B179  P=0.000001 C=-1.000000

0e29    B156: #	out( B181 B157 ) <- in( B155 )  Freq: 0.777616
0e29    movl    RCX, [RAX + #16 + R11 << #2]	# int
0e2e    movl    R11, R10	# spill
0e31    addl    R11, [RSP + #56 (32-bit)]	# int
        nop 	# 10 bytes pad for loops and calls
0e40    cmpl    R11, [RSP + #168 (32-bit)]	# unsigned
0e48    jnb,u   B181  P=0.000001 C=-1.000000

0e4e    B157: #	out( B158 ) <- in( B156 )  Freq: 0.777615
0e4e    movl    [RBX + #16 + R11 << #2], RCX	# int

0e53    B158: #	out( B154 B159 ) <- in( B157 B154 )  Freq: 0.888737
0e53    incl    R10	# int
0e56    cmpl    R10, RBP
0e59    jl,s   B154	# loop end  P=0.500000 C=18939.000000

0e5b    B159: #	out( N2963 ) <- in( B158 B152 B120 )  Freq: 0.999862
0e5b    vzeroupper
	addq    rsp, 192	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

0e73    ret

0e74    B160: #	out( B128 ) <- in( B124 )  Freq: 0.222246
0e74    movq    RBX, [rsp + #32]	# spill
0e79    jmp     B128

0e7e    B161: #	out( B86 ) <- in( B52 )  Freq: 0.111151
0e7e    movq    [rsp + #32], R14	# spill
0e83    movq    [rsp + #56], R13	# spill
0e88    movq    [rsp + #40], RDX	# spill
0e8d    movl    [rsp + #168], RBX	# spill
0e94    movl    R11, R8	# spill
0e97    movl    [rsp + #64], R10	# spill
        nop 	# 4 bytes pad for loops and calls
0ea0    jmp     B86

0ea5    B162: #	out( B57 ) <- in( B55 )  Freq: 0.111151
0ea5    xorl    RSI, RSI	# int
0ea7    jmp     B57

0eac    B163: #	out( B83 ) <- in( B81 )  Freq: 0.11115
0eac    xorl    RSI, RSI	# int
0eae    jmp     B83

0eb3    B164: #	out( B24 ) <- in( B8 )  Freq: 0.111111
0eb3    movq    R10, R9	# spill
0eb6    jmp     B24

0ebb    B165: #	out( B243 B166 ) <- in( B5 B6 )  Freq: 0.00010103
0ebb    movq    RSI, precise klass [Z: 0x00007f03fc45a840:Constant:exact *	# ptr
0ec5    movl    RDX, RBP	# spill
        nop 	# 1 bytes pad for loops and calls
0ec8    call,static  wrapper for: _new_array_Java
        # App::micro_vector_masked @ bci:18 (line 36) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=#0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [56]=Oop off=3792/0xed0}

0ed0    B166: #	out( B8 ) <- in( B165 )  Freq: 0.000101028
        # Block is sole successor of call
0ed0    movq    R9, RAX	# spill
0ed3    jmp     B8

0ed8    B167: #	out( B242 B168 ) <- in( B49 B50 )  Freq: 0.000101025
0ed8    movq    [rsp + #80], R11	# spill
0edd    movl    [rsp + #72], R10	# spill
0ee2    movl    [rsp + #60], R8	# spill
0ee7    movq    [rsp + #64], R9	# spill
0eec    movl    [rsp + #56], RBX	# spill
0ef0    movq    [rsp + #48], RDX	# spill
0ef5    movq    [rsp + #40], R13	# spill
0efa    movq    [rsp + #32], R14	# spill
0eff    movq    RSI, precise klass [Z: 0x00007f03fc45a840:Constant:exact *	# ptr
0f09    movl    RDX, R8	# spill
0f0c    call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.VectorMask::fromLong @ bci:92 (line 254) L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #64 L[4]=_ L[5]=rsp + #80 L[6]=_ L[7]=_ L[8]=_
        # App::micro_vector_masked @ bci:149 (line 51) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=rsp + #72 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [64]=Oop off=3860/0xf14}

0f14    B168: #	out( B52 ) <- in( B167 )  Freq: 0.000101023
        # Block is sole successor of call
0f14    movq    R14, [rsp + #32]	# spill
0f19    movq    R13, [rsp + #40]	# spill
0f1e    movq    RDX, [rsp + #48]	# spill
0f23    movl    RBX, [rsp + #56]	# spill
0f27    movq    R9, [rsp + #64]	# spill
0f2c    movl    R8, [rsp + #60]	# spill
0f31    movl    R10, [rsp + #72]	# spill
0f36    movq    R11, [rsp + #80]	# spill
0f3b    movq    RSI, RAX	# spill
        nop 	# 2 bytes pad for loops and calls
0f40    jmp     B52

0f45    B169: #	out( B241 B170 ) <- in( B97 )  Freq: 0.000100009
0f45    vmovdqu [rsp + 96],XMM3	# spill
0f4b    movq    [rsp + #64], R9	# spill
0f50    movq    [rsp + #56], R8	# spill
0f55    movl    [rsp + #48], R10	# spill
0f5a    movq    [rsp + #24], RBX	# spill
0f5f    movq    RBP, R11	# spill
0f62    movq    RSI, precise klass jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58: 0x00007f03803781c0:Constant:exact *	# ptr
0f6c    call,static  wrapper for: _new_instance_Java
        # java.lang.invoke.DirectMethodHandle::allocateInstance @ bci:12 (line 522) L[0]=_ L[1]=_
        # java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial @ bci:1 L[0]=#Ptr0x00007f03801b6d80 L[1]=rsp + #24 L[2]=rsp + #48 L[3]=_ L[4]=_
        # java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod @ bci:6 L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:59 (line 2728) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=rsp + #64 STK[1]=rsp + #56
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #32 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #48 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #56
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop [64]=Oop off=3956/0xf74}

0f74    B170: #	out( B99 ) <- in( B169 )  Freq: 0.000100007
        # Block is sole successor of call
0f74    movq    RCX, RAX	# spill
0f77    movq    RBX, [rsp + #24]	# spill
        nop 	# 4 bytes pad for loops and calls
0f80    jmp     B99

0f85    B171: #	out( B240 B172 ) <- in( B107 )  Freq: 0.000100007
0f85    movq    [rsp + #24], RBX	# spill
0f8a    pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #40]
0f94    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #48]
	movl    [rsp + #56], rax
	movq    rax, [rsp - #8]
0fa6    movq    RBP, R11	# spill
0fa9    movq    RSI, precise klass jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58: 0x00007f03803781c0:Constant:exact *	# ptr
        nop 	# 1 bytes pad for loops and calls
0fb4    call,static  wrapper for: _new_instance_Java
        # java.lang.invoke.DirectMethodHandle::allocateInstance @ bci:12 (line 522) L[0]=_ L[1]=_
        # java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial @ bci:1 L[0]=#Ptr0x00007f03801b6d80 L[1]=RBP L[2]=rsp + #48 L[3]=_ L[4]=_
        # java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod @ bci:6 L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:59 (line 2728) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=rsp + #24 STK[1]=rsp + #40
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #32 L[2]=_ L[3]=_ L[4]=rsp + #48 L[5]=rsp + #64 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #40
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [64]=Oop off=4028/0xfbc}

0fbc    B172: #	out( B109 ) <- in( B171 )  Freq: 0.000100005
        # Block is sole successor of call
0fbc    movq    RCX, RAX	# spill
0fbf    movq    R11, RBP	# spill
0fc2    jmp     B109

0fc7    B173: #	out( B239 B174 ) <- in( B114 )  Freq: 0.000100004
0fc7    vmovdqu [rsp + 128],XMM3	# spill
0fd0    vmovdqu [rsp + 64],XMM2	# spill
0fd6    movq    RSI, precise klass [I: 0x00007f03fc45aa50:Constant:exact *	# ptr
0fe0    movl    RDX, #8	# int
0fe5    movq    [rsp + #48], R10	# spill
        nop 	# 2 bytes pad for loops and calls
0fec    call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::blendTemplate @ bci:26 (line 1895) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007f036c87a480 STK[1]=#Ptr0x00007f03801d8c20 STK[2]=#Ptr0x00007f03806e4240 STK[3]=#8 STK[4]=rsp + #48 STK[5]=#ScObj0 STK[6]=rsp + #40 STK[7]=#Ptr0x00007f036c5e1aa0
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #128 }
        # jdk.incubator.vector.Int256Vector::blend @ bci:11 (line 376) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::blend @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lanewise @ bci:74 (line 688) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector::add @ bci:6 (line 1133) L[0]=_ L[1]=_ L[2]=_
        # App::micro_vector_masked @ bci:188 (line 54) L[0]=_ L[1]=rsp + #32 L[2]=_ L[3]=_ L[4]=rsp + #56 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #40
        # OopMap {[32]=Oop [40]=Oop [48]=Oop off=4084/0xff4}

0ff4    B174: #	out( B116 ) <- in( B173 )  Freq: 0.000100002
        # Block is sole successor of call
0ff4    vmovdqu XMM2,[rsp + 64]	# spill
0ffa    vmovdqu XMM3,[rsp + 128]	# spill
1003    jmp     B116

1008    B175: #	out( N2963 ) <- in( B41 )  Freq: 3.03952e-06
1008    movl    RSI, #-28	# int
100d    movq    RBP, [rsp + #24]	# spill
1012    movq    [rsp + #24], R14	# spill
1017    movq    [rsp + #40], RDX	# spill
101c    movq    [rsp + #56], R9	# spill
1021    movq    [rsp + #64], R13	# spill
1026    movl    [rsp + #52], R10	# spill
102b    movl    [rsp + #72], R11	# spill
1030    call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 359) L[0]=_ L[1]=_ STK[0]=rsp + #52 STK[1]=rsp + #72 STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 74) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 2689) L[0]=rsp + #56 L[1]=rsp + #64 L[2]=_ L[3]=_
        # App::micro_vector_masked @ bci:80 (line 44) L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #64 L[3]=rsp + #40 L[4]=rsp + #52 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [64]=Oop off=4152/0x1038}
1038    stop	# ShouldNotReachHere

104c    B176: #	out( N2963 ) <- in( B42 )  Freq: 3.03952e-06
104c    movl    RSI, #-28	# int
1051    movq    RBP, [rsp + #24]	# spill
1056    movq    [rsp + #24], R14	# spill
105b    movq    [rsp + #32], R13	# spill
1060    movq    [rsp + #56], R9	# spill
1065    movq    [rsp + #64], RDX	# spill
106a    movl    [rsp + #52], R10	# spill
106f    movl    [rsp + #72], RAX	# spill
1073    vmovdqu [rsp + 96],XMM0	# spill
        nop 	# 3 bytes pad for loops and calls
107c    call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 359) L[0]=_ L[1]=_ STK[0]=rsp + #52 STK[1]=rsp + #72 STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 74) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 2689) L[0]=rsp + #56 L[1]=rsp + #64 L[2]=_ L[3]=_
        # App::micro_vector_masked @ bci:92 (line 45) L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #64 L[4]=rsp + #52 L[5]=#ScObj0 L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #96 }
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [56]=Oop [64]=Oop off=4228/0x1084}
1084    stop	# ShouldNotReachHere

1098    B177: #	out( N2963 ) <- in( B43 )  Freq: 3.03951e-06
1098    movl    RSI, #-28	# int
109d    movq    RBP, [rsp + #24]	# spill
10a2    movq    [rsp + #32], R13	# spill
10a7    movq    [rsp + #40], RDX	# spill
10ac    movq    [rsp + #56], R14	# spill
10b1    movl    [rsp + #52], R10	# spill
10b6    movl    [rsp + #64], RDI	# spill
10ba    vmovdqu [rsp + 96],XMM0	# spill
10c0    call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 359) L[0]=_ L[1]=_ STK[0]=rsp + #52 STK[1]=rsp + #64 STK[2]=#NULL
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:43 (line 74) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:7 (line 2960) L[0]=#ScObj0 L[1]=rsp + #56 L[2]=_ L[3]=_
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #96 }
        # App::micro_vector_masked @ bci:107 (line 46) L[0]=RBP L[1]=rsp + #56 L[2]=rsp + #32 L[3]=rsp + #40 L[4]=rsp + #52 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop off=4296/0x10c8}
10c8    stop	# ShouldNotReachHere

10dc    B178: #	out( B179 ) <- in( B125 )  Freq: 1.5759e-06
10dc    movq    RBX, [rsp + #32]	# spill

10e1    B179: #	out( N2963 ) <- in( B155 B178 )  Freq: 2.36385e-06
10e1    movl    RSI, #-28	# int
10e6    movq    [rsp + #40], R9	# spill
10eb    movq    [rsp + #48], RBX	# spill
10f0    movl    [rsp + #60], R10	# spill
10f5    movq    [rsp + #64], RAX	# spill
10fa    movl    [rsp + #72], R10	# spill
        nop 	# 1 bytes pad for loops and calls
1100    call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector::stOp @ bci:44 (line 355) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #56 L[3]=_ L[4]=#Ptr0x00007f036c5744f0 L[5]=rsp + #64 L[6]=rsp + #40 L[7]=rsp + #60 STK[0]=#Ptr0x00007f036c5744f0 STK[1]=rsp + #48 STK[2]=rsp + #56 STK[3]=rsp + #72 STK[4]=rsp + #64 STK[5]=rsp + #60
        # jdk.incubator.vector.IntVector::intoArray @ bci:41 (line 3006) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[40]=Oop [48]=Oop [64]=Oop off=4360/0x1108}
1108    stop	# ShouldNotReachHere

111c    B180: #	out( B181 ) <- in( B126 )  Freq: 1.5759e-06
111c    movq    RBX, [rsp + #32]	# spill

1121    B181: #	out( N2963 ) <- in( B156 B180 )  Freq: 2.36384e-06
1121    movl    RSI, #-28	# int
1126    movl    RDI, [rsp + #56]	# spill
112a    movl    [rsp + #24], RDI	# spill
112e    movq    [rsp + #32], RAX	# spill
1133    movq    [rsp + #40], R9	# spill
1138    movl    [rsp + #28], R10	# spill
113d    movq    [rsp + #48], RBX	# spill
1142    movl    [rsp + #56], R11	# spill
1147    movl    [rsp + #60], RCX	# spill
        nop 	# 1 bytes pad for loops and calls
114c    call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector::lambda$intoArray$82 @ bci:5 (line 3006) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #48 STK[1]=rsp + #56 STK[2]=rsp + #60
        # jdk.incubator.vector.IntVector$$Lambda$67/0x00000008000ad640::apply @ bci:8 L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::stOp @ bci:45 (line 355) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #24 L[3]=_ L[4]=#Ptr0x00007f036c5744f0 L[5]=rsp + #32 L[6]=rsp + #40 L[7]=rsp + #28
        # jdk.incubator.vector.IntVector::intoArray @ bci:41 (line 3006) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[32]=Oop [40]=Oop [48]=Oop off=4436/0x1154}
1154    stop	# ShouldNotReachHere

1168    B182: #	out( B5 ) <- in( B3 )  Freq: 1.01328e-06
1168    movslq  RCX, RBP	# i2l
116b    jmp     B5

1170    B183: #	out( B49 ) <- in( B47 )  Freq: 1.01323e-06
1170    movslq  RCX, R8	# i2l
1173    jmp     B49

1178    B184: #	out( N2963 ) <- in( B2 )  Freq: 9.99999e-07
1178    movl    RSI, #-34	# int
        nop 	# 3 bytes pad for loops and calls
1180    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # App::micro_vector_masked @ bci:13 (line 36) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=#0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP
        # OopMap {rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [48]=Oop off=4488/0x1188}
1188    stop	# ShouldNotReachHere

119c    B185: #	out( N2963 ) <- in( B29 )  Freq: 9.99971e-07
119c    movl    RSI, #-34	# int
11a1    movl    [rsp + #56], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
11a8    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # App::micro_vector_masked @ bci:65 (line 43) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=#0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#0 STK[1]=RBP STK[2]=rsp + #56
        # OopMap {rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [48]=Oop off=4528/0x11b0}
11b0    stop	# ShouldNotReachHere

11c4    B186: #	out( N2963 ) <- in( B95 )  Freq: 9.99926e-07
11c4    movl    RSI, #-187	# int
11c9    movq    [rsp + #80], R8	# spill
11ce    movq    [rsp + #88], R9	# spill
11d3    movq    [rsp + #96], R8	# spill
11d8    movl    [rsp + #68], RCX	# spill
11dc    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:17 (line 3664) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #80 STK[1]=rsp + #64 STK[2]=rsp + #68
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #56 L[2]=rsp + #64 L[3]=rsp + #96 L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #64 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {[24]=Oop [32]=Oop [40]=Oop [56]=Oop [80]=Oop [88]=Oop [96]=Oop off=4580/0x11e4}
11e4    stop	# ShouldNotReachHere

11f8    B187: #	out( N2963 ) <- in( B105 )  Freq: 9.99902e-07
11f8    movl    RSI, #-187	# int
11fd    movq    R9, [rsp + #32]	# spill
1202    movq    [rsp + #24], R9	# spill
1207    movq    [rsp + #80], RBX	# spill
120c    movl    [rsp + #52], R8	# spill
        nop 	# 3 bytes pad for loops and calls
1214    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:17 (line 3664) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #56 STK[1]=rsp + #48 STK[2]=rsp + #52
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=rsp + #80 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_ L[4]=rsp + #48 L[5]=rsp + #64 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #56
        # OopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop off=4636/0x121c}
121c    stop	# ShouldNotReachHere

1230    B188: #	out( N2963 ) <- in( B111 )  Freq: 9.99879e-07
1230    movl    RSI, #-34	# int
1235    movq    RBP, [rsp + #32]	# spill
123a    movl    R11, [rsp + #56]	# spill
123f    movl    [rsp + #24], R11	# spill
1244    movq    [rsp + #56], R10	# spill
1249    movq    [rsp + #64], RAX	# spill
        nop 	# 2 bytes pad for loops and calls
1250    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewise @ bci:70 (line 688) L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #40 L[4]=_ L[5]=_ STK[0]=rsp + #56 STK[1]=rsp + #56 STK[2]=#Ptr0x00007f036c83f5d0 STK[3]=rsp + #64
        # jdk.incubator.vector.IntVector::add @ bci:6 (line 1133) L[0]=_ L[1]=_ L[2]=_
        # App::micro_vector_masked @ bci:188 (line 54) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #24 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #40
        # OopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop off=4696/0x1258}
1258    stop	# ShouldNotReachHere

126c    B189: #	out( N2963 ) <- in( B10 B9 )  Freq: 1.80138e-06
126c    movl    RSI, #-138	# int
1271    movq    RBP, [rsp + #24]	# spill
1276    movq    R11, [rsp + #32]	# spill
127b    movq    [rsp + #24], R11	# spill
1280    movq    R11, [rsp + #40]	# spill
1285    movq    [rsp + #32], R11	# spill
128a    movq    R11, [rsp + #48]	# spill
128f    movq    [rsp + #40], R11	# spill
1294    movq    [rsp + #48], R9	# spill
1299    movl    [rsp + #56], R10	# spill
        nop 	# 2 bytes pad for loops and calls
12a0    call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # App::micro_vector_masked @ bci:30 (line 37) L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #40 L[4]=#0 L[5]=_ L[6]=_ L[7]=rsp + #48 L[8]=#0 L[9]=_ STK[0]=#0 STK[1]=rsp + #56
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop off=4776/0x12a8}
12a8    stop	# ShouldNotReachHere

12bc    B190: #	out( N2963 ) <- in( B14 )  Freq: 9.00687e-07
12bc    stop	# ShouldNotReachHere

12d0    B191: #	out( N2963 ) <- in( B15 )  Freq: 9.00686e-07
12d0    stop	# ShouldNotReachHere

12e4    B192: #	out( N2963 ) <- in( B54 B53 )  Freq: 1.80121e-06
12e4    movl    RSI, #-138	# int
12e9    movq    RBP, [rsp + #24]	# spill
12ee    movq    [rsp + #24], R14	# spill
12f3    movq    [rsp + #32], R13	# spill
12f8    movq    [rsp + #40], RDX	# spill
12fd    movl    [rsp + #48], R10	# spill
1302    movq    [rsp + #56], R9	# spill
1307    movq    [rsp + #64], RDI	# spill
130c    movl    [rsp + #52], RCX	# spill
1310    movq    [rsp + #72], R11	# spill
        nop 	# 3 bytes pad for loops and calls
1318    call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromLong @ bci:104 (line 255) L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #56 L[4]=_ L[5]=rsp + #72 L[6]=_ L[7]=rsp + #64 L[8]=#0 STK[0]=#0 STK[1]=rsp + #52
        # App::micro_vector_masked @ bci:149 (line 51) L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #40 L[4]=rsp + #48 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop [64]=Oop off=4896/0x1320}
1320    stop	# ShouldNotReachHere

1334    B193: #	out( B79 ) <- in( B57 )  Freq: 9.00604e-07
1334    movl    R11, #1	# int
133a    jmp     B79

133f    B194: #	out( N2963 ) <- in( B122 B121 )  Freq: 1.7893e-06
133f    movl    RSI, #-138	# int
1344    pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #24]
134e    movq    [rsp + #40], RAX	# spill
1353    movq    [rsp + #48], R9	# spill
1358    call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::stOp @ bci:23 (line 353) L[0]=_ L[1]=rsp + #24 L[2]=rsp + #56 L[3]=_ L[4]=#Ptr0x00007f036c5744f0 L[5]=rsp + #40 L[6]=rsp + #48 L[7]=#0 STK[0]=#0 STK[1]=RBP
        # jdk.incubator.vector.IntVector::intoArray @ bci:41 (line 3006) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[24]=Oop [40]=Oop [48]=Oop off=4960/0x1360}
1360    stop	# ShouldNotReachHere

1374    B195: #	out( N2963 ) <- in( B131 )  Freq: 9.00548e-07
1374    stop	# ShouldNotReachHere

1388    B196: #	out( N2963 ) <- in( B132 )  Freq: 9.00547e-07
1388    stop	# ShouldNotReachHere

139c    B197: #	out( N2963 ) <- in( B133 )  Freq: 9.00546e-07
139c    stop	# ShouldNotReachHere

13b0    B198: #	out( N2963 ) <- in( B134 )  Freq: 9.00545e-07
13b0    stop	# ShouldNotReachHere

13c4    B199: #	out( N2963 ) <- in( B135 )  Freq: 9.00544e-07
13c4    stop	# ShouldNotReachHere

13d8    B200: #	out( N2963 ) <- in( B136 )  Freq: 9.00543e-07
13d8    stop	# ShouldNotReachHere

13ec    B201: #	out( N2963 ) <- in( B137 )  Freq: 9.00542e-07
13ec    stop	# ShouldNotReachHere

1400    B202: #	out( N2963 ) <- in( B58 )  Freq: 8.88801e-07
1400    stop	# ShouldNotReachHere

1414    B203: #	out( N2963 ) <- in( B59 )  Freq: 8.888e-07
1414    stop	# ShouldNotReachHere

1428    B204: #	out( B207 ) <- in( B34 )  Freq: 7.49966e-07
1428    movq    RDX, [rsp + #48]	# spill
142d    jmp,s   B207

142f    B205: #	out( B207 ) <- in( B35 )  Freq: 7.59924e-07
142f    movq    RDX, [rsp + #48]	# spill
1434    jmp,s   B207

1436    B206: #	out( B207 ) <- in( B33 )  Freq: 7.59925e-07
1436    movq    RDX, [rsp + #48]	# spill

143b    B207: #	out( N2963 ) <- in( B39 B206 B204 B205 B208 B37 B38 )  Freq: 5.27963e-06
143b    movl    RSI, #-138	# int
1440    movq    RBP, [rsp + #24]	# spill
1445    movq    [rsp + #24], R14	# spill
144a    movq    [rsp + #32], R13	# spill
144f    movq    [rsp + #40], RDX	# spill
1454    movl    [rsp + #48], RCX	# spill
1458    call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # App::micro_vector_masked @ bci:70 (line 43) L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #40 L[4]=#0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#0 STK[1]=rsp + #48
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop off=5216/0x1460}
1460    stop	# ShouldNotReachHere

1474    B208: #	out( B207 ) <- in( B36 )  Freq: 7.49964e-07
1474    movq    RDX, [rsp + #48]	# spill
1479    jmp,s   B207

147b    B209: #	out( N2963 ) <- in( B30 )  Freq: 4.99985e-07
147b    movl    RSI, #-187	# int
1480    movl    [rsp + #56], R8	# spill
1485    movl    [rsp + #60], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
148c    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::roundDown @ bci:5 (line 106) L[0]=rsp + #60 L[1]=rsp + #56 STK[0]=RBP
        # jdk.incubator.vector.AbstractSpecies::loopBound @ bci:5 (line 203) L[0]=_ L[1]=_
        # App::micro_vector_masked @ bci:65 (line 43) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=#0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#0
        # OopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop off=5268/0x1494}
1494    stop	# ShouldNotReachHere

14a8    B210: #	out( N2963 ) <- in( B91 )  Freq: 4.99964e-07
14a8    movl    RSI, #-187	# int
14ad    movq    RBP, [rsp + #24]	# spill
14b2    movq    R11, [rsp + #32]	# spill
14b7    movq    [rsp + #24], R11	# spill
14bc    movq    R11, [rsp + #40]	# spill
14c1    movq    [rsp + #32], R11	# spill
14c6    movq    R11, [rsp + #56]	# spill
14cb    movq    [rsp + #48], R11	# spill
14d0    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #64]
	movl    [rsp + #44], rax
	movq    rax, [rsp - #8]
14e2    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #64]
	movl    [rsp + #56], rax
	movq    rax, [rsp - #8]
14f4    movq    [rsp + #80], R8	# spill
14f9    movq    [rsp + #88], R9	# spill
        nop 	# 2 bytes pad for loops and calls
1500    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:7 (line 2721) L[0]=rsp + #88 L[1]=rsp + #48 L[2]=rsp + #56 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_ STK[0]=rsp + #44
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #44 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop off=5384/0x1508}
1508    stop	# ShouldNotReachHere

151c    B211: #	out( N2963 ) <- in( B45 )  Freq: 4.76816e-07
151c    movl    RSI, #-187	# int
1521    movq    RBP, [rsp + #24]	# spill
1526    movq    [rsp + #24], R14	# spill
152b    movq    [rsp + #32], R13	# spill
1530    movq    [rsp + #40], RDX	# spill
1535    movl    [rsp + #48], R10	# spill
153a    movq    [rsp + #56], R9	# spill
153f    movl    [rsp + #64], R8	# spill
1544    movq    [rsp + #72], R11	# spill
        nop 	# 3 bytes pad for loops and calls
154c    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromLong @ bci:15 (line 242) L[0]=_ L[1]=rsp + #72 L[2]=_ L[3]=rsp + #56 L[4]=rsp + #64 L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=rsp + #64 STK[1]=#64
        # App::micro_vector_masked @ bci:149 (line 51) L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #40 L[4]=rsp + #48 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop off=5460/0x1554}
1554    stop	# ShouldNotReachHere

1568    B212: #	out( N2963 ) <- in( B46 )  Freq: 4.76816e-07
1568    cmpq    R11, RBP	# CmpL3
	movl    RBP, -1
	jl,s    done
	setne   RBP
	movzbl  RBP, RBP
	done:
157a    movl    RSI, #-187	# int
157f    movq    [rsp + #32], R14	# spill
1584    movq    [rsp + #40], R13	# spill
1589    movq    [rsp + #48], RDX	# spill
158e    movl    [rsp + #56], R10	# spill
1593    movq    [rsp + #64], R9	# spill
1598    movl    [rsp + #60], R8	# spill
159d    movq    [rsp + #72], R11	# spill
        nop 	# 2 bytes pad for loops and calls
15a4    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromLong @ bci:40 (line 247) L[0]=_ L[1]=rsp + #72 L[2]=_ L[3]=rsp + #64 L[4]=rsp + #60 L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=RBP
        # App::micro_vector_masked @ bci:149 (line 51) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=rsp + #40 L[3]=rsp + #48 L[4]=rsp + #56 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [64]=Oop off=5548/0x15ac}
15ac    stop	# ShouldNotReachHere

15c0    B213: #	out( N2963 ) <- in( B93 )  Freq: 4.76802e-07
15c0    movl    RSI, #-187	# int
15c5    movq    [rsp + #80], R8	# spill
15ca    movq    [rsp + #88], R9	# spill
        nop 	# 1 bytes pad for loops and calls
15d0    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:20 (line 2721) L[0]=_ L[1]=rsp + #56 L[2]=rsp + #64 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_ STK[0]=rsp + #64 STK[1]=RBP
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #64 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {[24]=Oop [32]=Oop [40]=Oop [56]=Oop [80]=Oop [88]=Oop off=5592/0x15d8}
15d8    stop	# ShouldNotReachHere

15ec    B214: #	out( N2963 ) <- in( B94 )  Freq: 4.76802e-07
15ec    movl    RSI, #-187	# int
15f1    movq    [rsp + #80], R8	# spill
15f6    movq    [rsp + #96], R8	# spill
15fb    movl    [rsp + #68], RCX	# spill
15ff    movq    [rsp + #104], R9	# spill
1604    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:6 (line 3662) L[0]=rsp + #104 STK[0]=RBP STK[1]=#Ptr0x00007f036c4e2a30
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #80 STK[1]=rsp + #64 STK[2]=rsp + #68
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #56 L[2]=rsp + #64 L[3]=rsp + #96 L[4]=rsp + #104 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #64 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [56]=Oop [80]=Oop [96]=Oop [104]=Oop off=5644/0x160c}
160c    stop	# ShouldNotReachHere

1620    B215: #	out( N2963 ) <- in( B96 )  Freq: 4.76802e-07
1620    movl    RSI, #-187	# int
1625    movq    [rsp + #80], R8	# spill
162a    movq    [rsp + #88], R9	# spill
162f    movl    [rsp + #68], RCX	# spill
1633    vmovdqu [rsp + 96],XMM0	# spill
        nop 	# 3 bytes pad for loops and calls
163c    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:150 (line 240) L[0]=_ L[1]=rsp + #64 L[2]=rsp + #68 L[3]=_ L[4]=#1 L[5]=_ L[6]=#ScObj0 L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #96 }
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #56 L[2]=rsp + #64 L[3]=rsp + #80 L[4]=rsp + #88 L[5]=_
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #64 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap {[24]=Oop [32]=Oop [40]=Oop [56]=Oop [80]=Oop [88]=Oop off=5700/0x1644}
1644    stop	# ShouldNotReachHere

1658    B216: #	out( N2963 ) <- in( B103 )  Freq: 4.76791e-07
1658    movl    RSI, #-187	# int
165d    movq    R8, [rsp + #32]	# spill
1662    movq    [rsp + #24], R8	# spill
1667    movq    [rsp + #80], RBX	# spill
166c    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:20 (line 2721) L[0]=_ L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=rsp + #80 L[5]=_ STK[0]=rsp + #48 STK[1]=RBP
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_ L[4]=rsp + #48 L[5]=rsp + #64 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #56
        # OopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop off=5748/0x1674}
1674    stop	# ShouldNotReachHere

1688    B217: #	out( N2963 ) <- in( B104 )  Freq: 4.76791e-07
1688    movl    RSI, #-187	# int
168d    movq    R9, [rsp + #32]	# spill
1692    movq    [rsp + #24], R9	# spill
1697    movl    [rsp + #52], R8	# spill
169c    movq    [rsp + #96], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
16a4    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::iota @ bci:6 (line 3662) L[0]=rsp + #96 STK[0]=RBP STK[1]=#Ptr0x00007f036c4e2a30
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:8 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=#1 L[4]=_ STK[0]=rsp + #56 STK[1]=rsp + #48 STK[2]=rsp + #52
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=rsp + #96 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_ L[4]=rsp + #48 L[5]=rsp + #64 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #56
        # OopMap {rbp=NarrowOop [24]=Oop [40]=Oop [56]=Oop [64]=Oop [96]=Oop off=5804/0x16ac}
16ac    stop	# ShouldNotReachHere

16c0    B218: #	out( N2963 ) <- in( B106 )  Freq: 4.7679e-07
16c0    movl    RSI, #-187	# int
16c5    movq    R9, [rsp + #32]	# spill
16ca    movq    [rsp + #24], R9	# spill
16cf    movq    [rsp + #56], RAX	# spill
16d4    movq    [rsp + #72], RDX	# spill
16d9    movq    [rsp + #80], RBX	# spill
16de    movl    [rsp + #52], R8	# spill
16e3    vmovdqu [rsp + 96],XMM1	# spill
        nop 	# 3 bytes pad for loops and calls
16ec    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:150 (line 240) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #52 L[3]=_ L[4]=#1 L[5]=_ L[6]=#ScObj0 L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #96 }
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:51 (line 2727) L[0]=_ L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #72 L[4]=rsp + #80 L[5]=_
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_ L[4]=rsp + #48 L[5]=rsp + #56 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #72
        # OopMap {[24]=Oop [40]=Oop [56]=Oop [72]=Oop [80]=Oop off=5876/0x16f4}
16f4    stop	# ShouldNotReachHere

1708    B219: #	out( N2963 ) <- in( B116 )  Freq: 4.76779e-07
1708    movl    RSI, #-187	# int
170d    movq    R10, [rsp + #32]	# spill
1712    movq    [rsp + #24], R10	# spill
1717    vmovdqu [rsp + 64],XMM4	# spill
        nop 	# 3 bytes pad for loops and calls
1720    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.IntVector::intoArray @ bci:4 (line 3000) L[0]=#ScObj0 L[1]=rsp + #24 L[2]=rsp + #56 L[3]=rsp + #40 L[4]=_ STK[0]=RBP
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #64 }
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[24]=Oop [40]=Oop off=5928/0x1728}
1728    stop	# ShouldNotReachHere

173c    B220: #	out( N2963 ) <- in( B117 )  Freq: 4.76778e-07
173c    vmovdqu XMM1,XMM0	# spill
1740    movl    RSI, #-187	# int
1745    movq    R10, [rsp + #32]	# spill
174a    movq    [rsp + #24], R10	# spill
174f    vmovdqu [rsp + 64],XMM1	# spill
1755    vmovdqu [rsp + 96],XMM4	# spill
        nop 	# 1 bytes pad for loops and calls
175c    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.AbstractMask::checkIndexByLane @ bci:150 (line 240) L[0]=_ L[1]=rsp + #56 L[2]=rsp + #168 L[3]=_ L[4]=#1 L[5]=_ L[6]=#ScObj0 L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP
        # ScObj0 jdk/incubator/vector/Int256Vector$Int256Mask={ [payload :0]=rsp + #64 }
        # jdk.incubator.vector.IntVector::checkMaskFromIndexSize @ bci:12 (line 3312) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:29 (line 3005) L[0]=#ScObj0 L[1]=rsp + #24 L[2]=rsp + #56 L[3]=rsp + #40 L[4]=_
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #96 }
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[24]=Oop [40]=Oop off=5988/0x1764}
1764    stop	# ShouldNotReachHere

1778    B221: #	out( N2963 ) <- in( B26 )  Freq: 1e-35
1778    movl    RSI, #-34	# int
177d    movq    RBP, [rsp + #24]	# spill
1782    movq    R10, [rsp + #32]	# spill
1787    movq    [rsp + #24], R10	# spill
178c    movq    R10, [rsp + #40]	# spill
1791    movq    [rsp + #32], R10	# spill
1796    movq    R10, [rsp + #48]	# spill
179b    movq    [rsp + #40], R10	# spill
17a0    movq    [rsp + #48], RAX	# spill
        nop 	# 3 bytes pad for loops and calls
17a8    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:49 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #48
        # App::micro_vector_masked @ bci:52 (line 40) L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #40 L[4]=#0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop off=6064/0x17b0}
17b0    stop	# ShouldNotReachHere

17c4    B222: #	out( N2963 ) <- in( B88 )  Freq: 1e-35
17c4    movl    RSI, #-34	# int
17c9    movq    RBP, [rsp + #24]	# spill
17ce    movq    R10, [rsp + #32]	# spill
17d3    movq    [rsp + #24], R10	# spill
17d8    movq    R10, [rsp + #56]	# spill
17dd    movq    [rsp + #32], R10	# spill
17e2    movq    [rsp + #56], RAX	# spill
        nop 	# 1 bytes pad for loops and calls
17e8    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:49 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #56
        # jdk.incubator.vector.VectorMask::fromValues @ bci:17 (line 183) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.VectorMask::fromLong @ bci:141 (line 259) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # App::micro_vector_masked @ bci:149 (line 51) L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #40 L[4]=rsp + #64 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop off=6128/0x17f0}
17f0    stop	# ShouldNotReachHere

1804    B223: #	out( N2963 ) <- in( B90 )  Freq: 1e-35
1804    movl    RSI, #-34	# int
1809    movl    R10, [rsp + #64]	# spill
180e    movl    [rsp + #52], R10	# spill
1813    movq    [rsp + #72], R8	# spill
1818    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:1 (line 2720) L[0]=RBP L[1]=rsp + #56 L[2]=rsp + #52 L[3]=rsp + #72 L[4]=_ L[5]=_ STK[0]=RBP
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=rsp + #24 L[1]=rsp + #32 L[2]=_ L[3]=rsp + #40 L[4]=rsp + #52 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #72
        # OopMap {rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [56]=Oop [72]=Oop off=6176/0x1820}
1820    stop	# ShouldNotReachHere

1834    B224: #	out( N2963 ) <- in( B101 )  Freq: 1e-35
1834    movl    RSI, #-34	# int
1839    movq    RBP, [rsp + #32]	# spill
183e    movl    R8, [rsp + #48]	# spill
1843    movq    R11, [rsp + #40]	# spill
1848    movq    [rsp + #32], R11	# spill
184d    movl    [rsp + #28], R8	# spill
1852    movq    [rsp + #40], RAX	# spill
1857    movl    [rsp + #68], R10	# spill
185c    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:1 (line 2720) L[0]=rsp + #68 L[1]=rsp + #32 L[2]=rsp + #28 L[3]=rsp + #56 L[4]=_ L[5]=_ STK[0]=rsp + #68
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #28 L[5]=rsp + #40 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #56
        # OopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop [68]=NarrowOop off=6244/0x1864}
1864    stop	# ShouldNotReachHere

1878    B225: #	out( N2963 ) <- in( B113 )  Freq: 1e-35
1878    movl    RSI, #-154	# int
187d    decode_and_move_klass_not_null R11,R8
188a    movq    R11, [R11 + #120 (8-bit)]	# ptr
188e    movq    RBP, [R11]	# ptr
1891    movq    R11, [rsp + #32]	# spill
1896    movq    [rsp + #24], R11	# spill
189b    movl    R8, [rsp + #56]	# spill
18a0    movl    [rsp + #32], R8	# spill
18a5    movq    [rsp + #64], R10	# spill
18aa    movq    [rsp + #80], RAX	# spill
18af    movq    [rsp + #88], R10	# spill
18b4    movq    [rsp + #96], RAX	# spill
        nop 	# 3 bytes pad for loops and calls
18bc    call,static  wrapper for: uncommon_trap(reason='speculate_class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.AbstractVector::sameSpecies @ bci:8 (line 133) L[0]=rsp + #80 L[1]=rsp + #64 L[2]=_ STK[0]=RBP STK[1]=#Ptr0x00007f036c87a480
        # jdk.incubator.vector.AbstractVector::check @ bci:2 (line 124) L[0]=rsp + #96 L[1]=rsp + #64
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:7 (line 602) L[0]=rsp + #88 L[1]=#Ptr0x00007f036c83f5d0 L[2]=_ L[3]=rsp + #80 L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lanewise @ bci:70 (line 688) L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #40 L[4]=_ L[5]=_ STK[0]=rsp + #64
        # jdk.incubator.vector.IntVector::add @ bci:6 (line 1133) L[0]=_ L[1]=_ L[2]=_
        # App::micro_vector_masked @ bci:188 (line 54) L[0]=_ L[1]=rsp + #24 L[2]=_ L[3]=_ L[4]=rsp + #32 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #40
        # OopMap {rbp=Oop [24]=Oop [40]=Oop [64]=Oop [80]=Oop [88]=Oop [96]=Oop off=6340/0x18c4}
18c4    stop	# ShouldNotReachHere

18d8    B226: #	out( N2963 ) <- in( B119 )  Freq: 1e-35
18d8    movl    RSI, #-34	# int
18dd    movq    RBP, [rsp + #32]	# spill
18e2    movq    [rsp + #32], RAX	# spill
18e7    movl    [rsp + #28], R10	# spill
18ec    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector$Int256Mask::getBits @ bci:4 (line 569) L[0]=_ STK[0]=rsp + #28
        # jdk.incubator.vector.IntVector::stOp @ bci:10 (line 352) L[0]=_ L[1]=RBP L[2]=rsp + #56 L[3]=_ L[4]=#Ptr0x00007f036c5744f0 L[5]=rsp + #32 L[6]=_ L[7]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:41 (line 3006) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [28]=NarrowOop [32]=Oop off=6388/0x18f4}
18f4    stop	# ShouldNotReachHere

1908    B227: #	out( N2963 ) <- in( B1 )  Freq: 1.01328e-06
1908    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
1910    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # App::micro_vector_masked @ bci:13 (line 36) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap {off=6424/0x1918}
1918    stop	# ShouldNotReachHere

192c    B228: #	out( N2963 ) <- in( B25 )  Freq: 1.01325e-06
192c    movl    RSI, #-12	# int
1931    movq    RBP, [rsp + #24]	# spill
1936    movq    R10, [rsp + #32]	# spill
193b    movq    [rsp + #24], R10	# spill
1940    movq    R10, [rsp + #40]	# spill
1945    movq    [rsp + #32], R10	# spill
        nop 	# 2 bytes pad for loops and calls
194c    call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:49 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL
        # App::micro_vector_masked @ bci:52 (line 40) L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #48 L[4]=#0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop off=6484/0x1954}
1954    stop	# ShouldNotReachHere

1968    B229: #	out( N2963 ) <- in( B27 )  Freq: 1.01325e-06
1968    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
1970    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # App::micro_vector_masked @ bci:64 (line 43) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL
        # OopMap {off=6520/0x1978}
1978    stop	# ShouldNotReachHere

198c    B230: #	out( N2963 ) <- in( B28 )  Freq: 1.01325e-06
198c    movl    RSI, #-10	# int
1991    movl    RBP, RBX	# spill
        nop 	# 1 bytes pad for loops and calls
1994    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # App::micro_vector_masked @ bci:65 (line 43) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=#NULL STK[2]=RBP
        # OopMap {off=6556/0x199c}
199c    stop	# ShouldNotReachHere

19b0    B231: #	out( N2963 ) <- in( B87 )  Freq: 1.01321e-06
19b0    movl    RSI, #-12	# int
19b5    movq    RBP, [rsp + #24]	# spill
19ba    movq    R10, [rsp + #32]	# spill
19bf    movq    [rsp + #24], R10	# spill
19c4    call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorMask::fromArray @ bci:49 (line 208) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL
        # jdk.incubator.vector.VectorMask::fromValues @ bci:17 (line 183) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.VectorMask::fromLong @ bci:141 (line 259) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # App::micro_vector_masked @ bci:149 (line 51) L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #56 L[3]=rsp + #40 L[4]=rsp + #64 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop off=6604/0x19cc}
19cc    stop	# ShouldNotReachHere

19e0    B232: #	out( N2963 ) <- in( B89 )  Freq: 1.01321e-06
19e0    movl    RSI, #-12	# int
19e5    movq    RBP, [rsp + #24]	# spill
19ea    movq    R10, [rsp + #32]	# spill
19ef    movq    [rsp + #24], R10	# spill
19f4    movq    R10, [rsp + #40]	# spill
19f9    movq    [rsp + #32], R10	# spill
19fe    movl    R11, [rsp + #64]	# spill
1a03    movq    R10, [rsp + #56]	# spill
1a08    movq    [rsp + #48], R10	# spill
1a0d    movl    [rsp + #44], R11	# spill
1a12    movq    [rsp + #64], R8	# spill
        nop 	# 1 bytes pad for loops and calls
1a18    call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:1 (line 2720) L[0]=#NULL L[1]=rsp + #48 L[2]=rsp + #44 L[3]=rsp + #64 L[4]=_ L[5]=_ STK[0]=#NULL
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #32 L[4]=rsp + #44 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #64
        # OopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop off=6688/0x1a20}
1a20    stop	# ShouldNotReachHere

1a34    B233: #	out( N2963 ) <- in( B92 )  Freq: 1.01321e-06
1a34    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
1a3c    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:12 (line 2721) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=_ STK[1]=#NULL
        # App::micro_vector_masked @ bci:163 (line 52) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {off=6724/0x1a44}
1a44    stop	# ShouldNotReachHere

1a58    B234: #	out( N2963 ) <- in( B100 )  Freq: 1.01318e-06
1a58    movl    RSI, #-12	# int
1a5d    movq    RBP, [rsp + #32]	# spill
1a62    movq    R10, [rsp + #40]	# spill
1a67    movq    [rsp + #32], R10	# spill
1a6c    movl    R11, [rsp + #48]	# spill
1a71    movl    [rsp + #28], R11	# spill
        nop 	# 2 bytes pad for loops and calls
1a78    call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:1 (line 2720) L[0]=#NULL L[1]=rsp + #32 L[2]=rsp + #28 L[3]=rsp + #56 L[4]=_ L[5]=_ STK[0]=#NULL
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=rsp + #28 L[5]=rsp + #64 L[6]=_ L[7]=_ L[8]=_ L[9]=rsp + #56
        # OopMap {rbp=Oop [32]=Oop [56]=Oop [64]=Oop off=6784/0x1a80}
1a80    stop	# ShouldNotReachHere

1a94    B235: #	out( N2963 ) <- in( B102 )  Freq: 1.01318e-06
1a94    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
1a9c    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:12 (line 2721) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=_ STK[1]=#NULL
        # App::micro_vector_masked @ bci:177 (line 53) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {off=6820/0x1aa4}
1aa4    stop	# ShouldNotReachHere

1ab8    B236: #	out( N2963 ) <- in( B110 )  Freq: 1.01316e-06
1ab8    movl    RSI, #-10	# int
1abd    movq    RBP, RAX	# spill
1ac0    call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # App::micro_vector_masked @ bci:188 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #40
        # OopMap {rbp=Oop [40]=Oop off=6856/0x1ac8}
1ac8    stop	# ShouldNotReachHere

1adc    B237: #	out( N2963 ) <- in( B112 )  Freq: 1.01316e-06
1adc    movl    RSI, #-162	# int
1ae1    movq    RBP, R10	# spill
1ae4    call,static  wrapper for: uncommon_trap(reason='speculate_null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:7 (line 602) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lanewise @ bci:70 (line 688) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=_
        # jdk.incubator.vector.IntVector::add @ bci:6 (line 1133) L[0]=_ L[1]=_ L[2]=_
        # App::micro_vector_masked @ bci:188 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=6892/0x1aec}
1aec    stop	# ShouldNotReachHere

1b00    B238: #	out( N2963 ) <- in( B118 )  Freq: 1.01315e-06
1b00    movl    RSI, #-12	# int
1b05    movq    RBP, [rsp + #32]	# spill
1b0a    movq    [rsp + #32], RAX	# spill
        nop 	# 1 bytes pad for loops and calls
1b10    call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector$Int256Mask::getBits @ bci:4 (line 569) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::stOp @ bci:10 (line 352) L[0]=_ L[1]=RBP L[2]=rsp + #56 L[3]=_ L[4]=#Ptr0x00007f036c5744f0 L[5]=rsp + #32 L[6]=_ L[7]=_
        # jdk.incubator.vector.IntVector::intoArray @ bci:41 (line 3006) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # App::micro_vector_masked @ bci:196 (line 54) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [32]=Oop off=6936/0x1b18}
1b18    stop	# ShouldNotReachHere

1b2c    B239: #	out( B250 ) <- in( B173 )  Freq: 1.00004e-09
1b2c    # exception oop is in rax; no code emitted
1b2c    movq    RSI, RAX	# spill
1b2f    jmp     B250

1b34    B240: #	out( B247 ) <- in( B171 )  Freq: 1.00007e-09
1b34    # exception oop is in rax; no code emitted
1b34    jmp,s   B247

1b36    B241: #	out( B245 ) <- in( B169 )  Freq: 1.00009e-09
1b36    # exception oop is in rax; no code emitted
1b36    jmp,s   B245

1b38    B242: #	out( B250 ) <- in( B167 )  Freq: 1.01025e-09
1b38    # exception oop is in rax; no code emitted
1b38    movq    RSI, RAX	# spill
1b3b    jmp,s   B250

1b3d    B243: #	out( B250 ) <- in( B165 )  Freq: 1.0103e-09
1b3d    # exception oop is in rax; no code emitted
1b3d    movq    RSI, RAX	# spill
1b40    jmp,s   B250

1b42    B244: #	out( B245 ) <- in( B99 )  Freq: 9.99925e-06
1b42    # exception oop is in rax; no code emitted

1b42    B245: #	out( B250 ) <- in( B241 B244 )  Freq: 1.00002e-05
1b42    movq    RSI, RAX	# spill
1b45    jmp,s   B250

1b47    B246: #	out( B247 ) <- in( B109 )  Freq: 9.999e-06
1b47    # exception oop is in rax; no code emitted

1b47    B247: #	out( B250 ) <- in( B240 B246 )  Freq: 1e-05
1b47    movq    RSI, RAX	# spill
1b4a    jmp,s   B250

1b4c    B248: #	out( B250 ) <- in( B24 )  Freq: 9.99994e-06
1b4c    # exception oop is in rax; no code emitted
1b4c    movq    RSI, RAX	# spill
1b4f    jmp,s   B250

1b51    B249: #	out( B250 ) <- in( B86 )  Freq: 9.99951e-06
1b51    # exception oop is in rax; no code emitted
1b51    movq    RSI, RAX	# spill

1b54    B250: #	out( N2963 ) <- in( B243 B248 B239 B247 B245 B249 B242 )  Freq: 4.00027e-05
1b54    vzeroupper
	addq    rsp, 192	# Destroy frame
	popq    rbp

1b5f    jmp     rethrow_stub

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2)    4158  338             App::micro_vector_masked (200 bytes)
 total in heap  [0x00007f03f91bf710,0x00007f03f91c4310] = 19456
 relocation     [0x00007f03f91bf888,0x00007f03f91bfcc8] = 1088
 constants      [0x00007f03f91bfce0,0x00007f03f91bfd00] = 32
 main code      [0x00007f03f91bfd00,0x00007f03f91c1880] = 7040
 stub code      [0x00007f03f91c1880,0x00007f03f91c18d0] = 80
 oops           [0x00007f03f91c18d0,0x00007f03f91c1930] = 96
 metadata       [0x00007f03f91c1930,0x00007f03f91c1b48] = 536
 scopes data    [0x00007f03f91c1b48,0x00007f03f91c29d8] = 3728
 scopes pcs     [0x00007f03f91c29d8,0x00007f03f91c4198] = 6080
 dependencies   [0x00007f03f91c4198,0x00007f03f91c41b8] = 32
 handler table  [0x00007f03f91c41b8,0x00007f03f91c4290] = 216
 nul chk table  [0x00007f03f91c4290,0x00007f03f91c4310] = 128

--------------------------------------------------------------------------------

[Constant Pool]
             Address          hex4                    hex8      
  0x00007f03f91bfce0:   0x01010101      0x0101010101010101      
  0x00007f03f91bfce4:   0x01010101                              
  0x00007f03f91bfce8:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007f03f91bfcec:   0xf4f4f4f4                              
  0x00007f03f91bfcf0:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007f03f91bfcf4:   0xf4f4f4f4                              
  0x00007f03f91bfcf8:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4      
  0x00007f03f91bfcfc:   0xf4f4f4f4                              

--------------------------------------------------------------------------------

[Entry Point]
  # {method} {0x00007f03b08119b8} 'micro_vector_masked' '([I[I[I)V' in 'App'
  # this:     rsi:rsi   = 'App'
  # parm0:    rdx:rdx   = '[I'
  # parm1:    rcx:rcx   = '[I'
  # parm2:    r8:r8     = '[I'
  #           [sp+0xd0]  (sp of caller)
 ;; N2963: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007f03f91bfd00:   mov    0x8(%rsi),%r10d              ;   {no_reloc}
  0x00007f03f91bfd04:   movabs $0x800000000,%r11
  0x00007f03f91bfd0e:   add    %r11,%r10
  0x00007f03f91bfd11:   cmp    %r10,%rax
  0x00007f03f91bfd14:   jne    0x00007f03f9115920           ;   {runtime_call ic_miss_stub}
  0x00007f03f91bfd1a:   nop
  0x00007f03f91bfd1b:   nop
  0x00007f03f91bfd1c:   nop
  0x00007f03f91bfd1d:   nop
  0x00007f03f91bfd1e:   nop
  0x00007f03f91bfd1f:   nop
[Verified Entry Point]
 ;; B1: #	out( B227 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x00007f03f91bfd20:   mov    %eax,-0x16000(%rsp)
  0x00007f03f91bfd27:   push   %rbp
  0x00007f03f91bfd28:   sub    $0xc0,%rsp                   ;*invokevirtual laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91bfd2f:   mov    %r8,0x30(%rsp)
  0x00007f03f91bfd34:   mov    %rcx,0x28(%rsp)
  0x00007f03f91bfd39:   mov    %rdx,0x20(%rsp)
  0x00007f03f91bfd3e:   mov    %rsi,0x18(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91bfd43:   mov    0xc(%rsi),%ebp               ;*ifnull {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::dummyVector@6 (line 296)
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91bfd46:   mov    0x8(%r12,%rbp,8),%r11d       ; implicit exception: dispatches to 0x00007f03f91c1608
 ;; B2: #	out( B184 B3 ) <- in( B1 )  Freq: 0.999999
  0x00007f03f91bfd4b:   cmp    $0x94b80,%r11d               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {metadata('jdk/incubator/vector/IntVector$IntSpecies')}
  0x00007f03f91bfd52:   jne    0x00007f03f91c0e78
 ;; B3: #	out( B182 B4 ) <- in( B2 )  Freq: 0.999998
  0x00007f03f91bfd58:   lea    (%r12,%rbp,8),%r10           ;*invokestatic fromArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91bfd5c:   mov    %r10,0x38(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91bfd61:   mov    0xc(%r10),%ebp               ;*iand {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::roundDown@4 (line 106)
                                                            ; - jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91bfd65:   cmp    $0x100000,%ebp
  0x00007f03f91bfd6b:   ja     0x00007f03f91c0e68           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B4: #	out( B5 ) <- in( B3 )  Freq: 0.999997
  0x00007f03f91bfd71:   movslq %ebp,%rcx                    ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B5: #	out( B165 B6 ) <- in( B4 B182 )  Freq: 0.999998
  0x00007f03f91bfd74:   nop
  0x00007f03f91bfd75:   nop
  0x00007f03f91bfd76:   nop
  0x00007f03f91bfd77:   nop
  0x00007f03f91bfd78:   nop
  0x00007f03f91bfd79:   nop
  0x00007f03f91bfd7a:   nop
  0x00007f03f91bfd7b:   nop
  0x00007f03f91bfd7c:   nop
  0x00007f03f91bfd7d:   nop
  0x00007f03f91bfd7e:   nop
  0x00007f03f91bfd7f:   nop
  0x00007f03f91bfd80:   cmp    $0x100000,%ebp
  0x00007f03f91bfd86:   ja     0x00007f03f91c0bbb           ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B6: #	out( B165 B7 ) <- in( B5 )  Freq: 0.999997
  0x00007f03f91bfd8c:   mov    0x148(%r15),%r9              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91bfd93:   add    $0x17,%rcx
  0x00007f03f91bfd97:   mov    %rcx,%r10
  0x00007f03f91bfd9a:   and    $0xfffffffffffffff8,%r10
  0x00007f03f91bfd9e:   mov    %r9,%r11
  0x00007f03f91bfda1:   add    %r10,%r11                    ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91bfda4:   cmp    0x158(%r15),%r11             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91bfdab:   jae    0x00007f03f91c0bbb           ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B7: #	out( B8 ) <- in( B6 )  Freq: 0.999897
  0x00007f03f91bfdb1:   mov    %r11,0x148(%r15)
  0x00007f03f91bfdb8:   mov    %r9,%rdi
  0x00007f03f91bfdbb:   add    $0x10,%rdi
  0x00007f03f91bfdbf:   movq   $0x1,(%r9)
  0x00007f03f91bfdc6:   prefetchw 0xc0(%r11)
  0x00007f03f91bfdce:   movl   $0x40000,0x8(%r9)            ;   {metadata({type array bool})}
  0x00007f03f91bfdd6:   mov    %ebp,0xc(%r9)
  0x00007f03f91bfdda:   prefetchw 0x100(%r11)
  0x00007f03f91bfde2:   prefetchw 0x140(%r11)
  0x00007f03f91bfdea:   prefetchw 0x180(%r11)
  0x00007f03f91bfdf2:   shr    $0x3,%rcx
  0x00007f03f91bfdf6:   add    $0xfffffffffffffffe,%rcx
  0x00007f03f91bfdfa:   xor    %rax,%rax
  0x00007f03f91bfdfd:   cmp    $0x8,%rcx
  0x00007f03f91bfe01:   jg     0x00007f03f91bfe13
  0x00007f03f91bfe03:   dec    %rcx
  0x00007f03f91bfe06:   js     0x00007f03f91bfe1a
 ;; LOOP:
  0x00007f03f91bfe08:   mov    %rax,(%rdi,%rcx,8)
  0x00007f03f91bfe0c:   dec    %rcx
  0x00007f03f91bfe0f:   jge    0x00007f03f91bfe08
  0x00007f03f91bfe11:   jmp    0x00007f03f91bfe1a
 ;; LONG:
  0x00007f03f91bfe13:   shl    $0x3,%rcx
  0x00007f03f91bfe17:   rep rex.W stos %al,%es:(%rdi)
 ;; DONE:
 ;; B8: #	out( B164 B9 ) <- in( B166 B7 )  Freq: 0.999998
  0x00007f03f91bfe1a:   mov    %ebp,%r10d                   ;*invokevirtual laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91bfe1d:   nop
  0x00007f03f91bfe1e:   nop
  0x00007f03f91bfe1f:   nop
  0x00007f03f91bfe20:   test   %r10d,%r10d
  0x00007f03f91bfe23:   jle    0x00007f03f91c0bb3
 ;; B9: #	out( B189 B10 ) <- in( B8 )  Freq: 0.888887
  0x00007f03f91bfe29:   test   %r10d,%r10d
  0x00007f03f91bfe2c:   je     0x00007f03f91c0f6c
 ;; B10: #	out( B189 B11 ) <- in( B9 )  Freq: 0.888886
  0x00007f03f91bfe32:   mov    %r10d,%r8d
  0x00007f03f91bfe35:   dec    %r8d
  0x00007f03f91bfe38:   cmp    %r10d,%r8d
  0x00007f03f91bfe3b:   nop
  0x00007f03f91bfe3c:   nop
  0x00007f03f91bfe3d:   nop
  0x00007f03f91bfe3e:   nop
  0x00007f03f91bfe3f:   nop
  0x00007f03f91bfe40:   jae    0x00007f03f91c0f6c
 ;; B11: #	out( B12 ) <- in( B10 )  Freq: 0.888885
  0x00007f03f91bfe46:   mov    $0x4,%r11d
  0x00007f03f91bfe4c:   cmp    %r11d,%r10d
  0x00007f03f91bfe4f:   mov    %r10d,%r8d
  0x00007f03f91bfe52:   cmovg  %r11d,%r8d
  0x00007f03f91bfe56:   xor    %ebx,%ebx
 ;; B12: #	out( B12 B13 ) <- in( B11 B12 ) Loop( B12-B12 inner pre of N1348) Freq: 1.77777
  0x00007f03f91bfe58:   movb   $0x1,0x10(%r9,%rbx,1)
  0x00007f03f91bfe5e:   inc    %ebx
  0x00007f03f91bfe60:   cmp    %r8d,%ebx
  0x00007f03f91bfe63:   jl     0x00007f03f91bfe58
 ;; B13: #	out( B20 B14 ) <- in( B12 )  Freq: 0.888885
  0x00007f03f91bfe65:   mov    %r10d,%r8d
  0x00007f03f91bfe68:   add    $0xfffffffd,%r8d
  0x00007f03f91bfe6c:   cmp    %r8d,%ebx
  0x00007f03f91bfe6f:   jge    0x00007f03f91bfedc
 ;; B14: #	out( B190 B15 ) <- in( B13 )  Freq: 0.888884
  0x00007f03f91bfe75:   cmp    %r10d,%ebx
  0x00007f03f91bfe78:   jae    0x00007f03f91c0fbc
 ;; B15: #	out( B191 B16 ) <- in( B14 )  Freq: 0.888883
  0x00007f03f91bfe7e:   mov    %ebx,%r11d
  0x00007f03f91bfe81:   add    $0x3,%r11d
  0x00007f03f91bfe85:   cmp    %r10d,%r11d
  0x00007f03f91bfe88:   jae    0x00007f03f91c0fd0
 ;; B16: #	out( B17 ) <- in( B15 )  Freq: 0.888882
  0x00007f03f91bfe8e:   vmovd  -0x1b6(%rip),%xmm0        # 0x00007f03f91bfce0
                                                            ;   {section_word}
 ;; B17: #	out( B18 ) <- in( B16 B19 ) Loop( B17-B19 ) Freq: 7.9999
  0x00007f03f91bfe96:   mov    %r10d,%ecx
  0x00007f03f91bfe99:   sub    %ebx,%ecx
  0x00007f03f91bfe9b:   add    $0xfffffffd,%ecx
  0x00007f03f91bfe9e:   xor    %edi,%edi
  0x00007f03f91bfea0:   cmp    %ebx,%r8d
  0x00007f03f91bfea3:   cmovl  %edi,%ecx
  0x00007f03f91bfea6:   cmp    $0xfa0,%ecx
  0x00007f03f91bfeac:   mov    $0xfa0,%edi
  0x00007f03f91bfeb1:   cmova  %edi,%ecx
  0x00007f03f91bfeb4:   add    %ebx,%ecx                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91bfeb6:   nop
  0x00007f03f91bfeb7:   nop
  0x00007f03f91bfeb8:   nop
  0x00007f03f91bfeb9:   nop
  0x00007f03f91bfeba:   nop
  0x00007f03f91bfebb:   nop
  0x00007f03f91bfebc:   nop
  0x00007f03f91bfebd:   nop
  0x00007f03f91bfebe:   nop
  0x00007f03f91bfebf:   nop                                 ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
 ;; B18: #	out( B18 B19 ) <- in( B17 B18 ) Loop( B18-B18 inner main of N508 strip mined) Freq: 71.9988
  0x00007f03f91bfec0:   vmovd  %xmm0,0x10(%r9,%rbx,1)       ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91bfec7:   add    $0x4,%ebx
  0x00007f03f91bfeca:   cmp    %ecx,%ebx
  0x00007f03f91bfecc:   jl     0x00007f03f91bfec0           ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B19: #	out( B17 B20 ) <- in( B18 )  Freq: 7.9999
  0x00007f03f91bfece:   mov    0x130(%r15),%rcx             ; ImmutableOopMap {r9=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop [56]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) App::micro_vector_masked@42 (line 37)
  0x00007f03f91bfed5:   test   %eax,(%rcx)                  ;   {poll}
  0x00007f03f91bfed7:   cmp    %r8d,%ebx
  0x00007f03f91bfeda:   jl     0x00007f03f91bfe96
 ;; B20: #	out( B23 B21 ) <- in( B13 B19 )  Freq: 0.888883
  0x00007f03f91bfedc:   nop
  0x00007f03f91bfedd:   nop
  0x00007f03f91bfede:   nop
  0x00007f03f91bfedf:   nop
  0x00007f03f91bfee0:   cmp    %r10d,%ebx
  0x00007f03f91bfee3:   jge    0x00007f03f91bfef5           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B21: #	out( B22 ) <- in( B20 )  Freq: 0.444441
  0x00007f03f91bfee5:   nop
  0x00007f03f91bfee6:   nop
  0x00007f03f91bfee7:   nop                                 ;*synchronization entry
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@-1 (line 601)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::add@5 (line 1096)
                                                            ; - App::micro_vector_masked@101 (line 46)
 ;; B22: #	out( B22 B23 ) <- in( B21 B22 ) Loop( B22-B22 inner post of N1348) Freq: 0.888883
  0x00007f03f91bfee8:   movb   $0x1,0x10(%r9,%rbx,1)
  0x00007f03f91bfeee:   inc    %ebx
  0x00007f03f91bfef0:   cmp    %r10d,%ebx                   ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91bfef3:   jl     0x00007f03f91bfee8
 ;; B23: #	out( B24 ) <- in( B22 B20 )  Freq: 0.888883
  0x00007f03f91bfef5:   mov    %r9,%r10                     ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
 ;; B24: #	out( B248 B25 ) <- in( B23 B164 )  Freq: 0.999994
  0x00007f03f91bfef8:   mov    0x38(%rsp),%r11
  0x00007f03f91bfefd:   mov    0x30(%r11),%r11d
  0x00007f03f91bff01:   mov    %r11,%rsi
  0x00007f03f91bff04:   push   %r10
  0x00007f03f91bff06:   cmp    0xce24963(%rip),%r12        # 0x00007f0405fe4870
                                                            ;   {external_word}
  0x00007f03f91bff0d:   je     0x00007f03f91bff27
 ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f03f91bff13:   movabs $0x7f0405592180,%rdi         ;   {external_word}
  0x00007f03f91bff1d:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91bff21:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91bff26:   hlt    
  0x00007f03f91bff27:   pop    %r10
  0x00007f03f91bff29:   shl    $0x3,%rsi
  0x00007f03f91bff2d:   movabs $0x1010002b0,%rdx            ;   {oop(a 'java/lang/Class'{0x00000001010002b0} = int)}
  0x00007f03f91bff37:   mov    %ebp,%ecx
  0x00007f03f91bff39:   mov    %r10,%r8
  0x00007f03f91bff3c:   mov    $0x10,%r9d
  0x00007f03f91bff42:   mov    %r10,%rdi
  0x00007f03f91bff45:   xor    %r10d,%r10d
  0x00007f03f91bff48:   mov    %r10d,(%rsp)
  0x00007f03f91bff4c:   rex.W pushq 0x38(%rsp)
  0x00007f03f91bff51:   rex.W popq 0x8(%rsp)
  0x00007f03f91bff56:   movabs $0x101bdc6a0,%r10            ;   {oop(a 'jdk/incubator/vector/VectorMask$$Lambda$53+0x00000008000aa6e0'{0x0000000101bdc6a0})}
  0x00007f03f91bff60:   mov    %r10,0x10(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91bff65:   nop
  0x00007f03f91bff66:   nop
  0x00007f03f91bff67:   nop
  0x00007f03f91bff68:   vzeroupper 
  0x00007f03f91bff6b:   callq  0x00007f03f918f760           ; ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop }
                                                            ;*invokestatic load {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
                                                            ;   {static_call}
 ;; B25: #	out( B228 B26 ) <- in( B24 )  Freq: 0.999974
  0x00007f03f91bff70:   mov    0x8(%rax),%r10d              ; implicit exception: dispatches to 0x00007f03f91c162c
 ;; B26: #	out( B221 B27 ) <- in( B25 )  Freq: 0.999973
  0x00007f03f91bff74:   nop
  0x00007f03f91bff75:   nop
  0x00007f03f91bff76:   nop
  0x00007f03f91bff77:   nop
  0x00007f03f91bff78:   nop
  0x00007f03f91bff79:   nop
  0x00007f03f91bff7a:   nop
  0x00007f03f91bff7b:   nop
  0x00007f03f91bff7c:   nop
  0x00007f03f91bff7d:   nop
  0x00007f03f91bff7e:   nop
  0x00007f03f91bff7f:   nop
  0x00007f03f91bff80:   cmp    $0x98750,%r10d               ;   {metadata('jdk/incubator/vector/Int256Vector$Int256Mask')}
  0x00007f03f91bff87:   jne    0x00007f03f91c1478
 ;; B27: #	out( B229 B28 ) <- in( B26 )  Freq: 0.999973
  0x00007f03f91bff8d:   mov    0x20(%rsp),%r14
  0x00007f03f91bff92:   mov    0xc(%r14),%ebx               ; implicit exception: dispatches to 0x00007f03f91c1668
 ;; B28: #	out( B230 B29 ) <- in( B27 )  Freq: 0.999972
  0x00007f03f91bff96:   mov    0x18(%rsp),%r10              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91bff9b:   mov    0xc(%r10),%ebp               ;*invokevirtual fromArray0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91bff9f:   nop
  0x00007f03f91bffa0:   mov    0x8(%r12,%rbp,8),%r10d       ; implicit exception: dispatches to 0x00007f03f91c168c
 ;; B29: #	out( B185 B30 ) <- in( B28 )  Freq: 0.999971
  0x00007f03f91bffa5:   cmp    $0x94b80,%r10d               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {metadata('jdk/incubator/vector/IntVector$IntSpecies')}
  0x00007f03f91bffac:   jne    0x00007f03f91c0e9c
 ;; B30: #	out( B209 B31 ) <- in( B29 )  Freq: 0.99997
  0x00007f03f91bffb2:   lea    (%r12,%rbp,8),%r9            ;*invokevirtual fromArray0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91bffb6:   mov    0xc(%r9),%r8d                ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91bffba:   mov    %r8d,%esi
  0x00007f03f91bffbd:   dec    %esi
  0x00007f03f91bffbf:   mov    %r8d,%ebp
  0x00007f03f91bffc2:   and    %esi,%ebp
  0x00007f03f91bffc4:   test   %ebp,%ebp
  0x00007f03f91bffc6:   jne    0x00007f03f91c117b
 ;; B31: #	out( B33 B32 ) <- in( B30 )  Freq: 0.99997
  0x00007f03f91bffcc:   andn   %ebx,%esi,%ecx
  0x00007f03f91bffd1:   test   %ecx,%ecx
  0x00007f03f91bffd3:   jg     0x00007f03f91bffe7
 ;; B32: #	out( B45 ) <- in( B31 )  Freq: 0.250003
  0x00007f03f91bffd5:   xor    %r10d,%r10d
  0x00007f03f91bffd8:   mov    0x28(%rsp),%r13
  0x00007f03f91bffdd:   mov    0x30(%rsp),%rdx
  0x00007f03f91bffe2:   jmpq   0x00007f03f91c0085
 ;; B33: #	out( B206 B34 ) <- in( B31 )  Freq: 0.749967
  0x00007f03f91bffe7:   mov    0x28(%rsp),%r13
  0x00007f03f91bffec:   mov    0xc(%r13),%r11d              ; implicit exception: dispatches to 0x00007f03f91c1136
 ;; B34: #	out( B204 B35 ) <- in( B33 )  Freq: 0.749966
  0x00007f03f91bfff0:   sub    %r8d,%r11d
  0x00007f03f91bfff3:   inc    %r11d
  0x00007f03f91bfff6:   test   %r11d,%r11d
  0x00007f03f91bfff9:   jl     0x00007f03f91c1128           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B35: #	out( B205 B36 ) <- in( B34 )  Freq: 0.749965
  0x00007f03f91bffff:   mov    0x44(%r9),%edi               ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@70 (line 43)
  0x00007f03f91c0003:   mov    0x8(%r12,%rdi,8),%r10d       ; implicit exception: dispatches to 0x00007f03f91c112f
 ;; B36: #	out( B208 B37 ) <- in( B35 )  Freq: 0.749964
  0x00007f03f91c0008:   cmp    $0x98110,%r10d               ;   {metadata('jdk/incubator/vector/Int256Vector')}
  0x00007f03f91c000f:   jne    0x00007f03f91c1174
 ;; B37: #	out( B207 B38 ) <- in( B36 )  Freq: 0.749963
  0x00007f03f91c0015:   mov    0x30(%rsp),%rdx
  0x00007f03f91c001a:   nop
  0x00007f03f91c001b:   nop
  0x00007f03f91c001c:   nop
  0x00007f03f91c001d:   nop
  0x00007f03f91c001e:   nop
  0x00007f03f91c001f:   nop
  0x00007f03f91c0020:   mov    0xc(%rdx),%eax               ; implicit exception: dispatches to 0x00007f03f91c113b
 ;; B38: #	out( B207 B39 ) <- in( B37 )  Freq: 0.749963
  0x00007f03f91c0023:   sub    %r8d,%eax
  0x00007f03f91c0026:   inc    %eax
  0x00007f03f91c0028:   test   %eax,%eax
  0x00007f03f91c002a:   jl     0x00007f03f91c113b
 ;; B39: #	out( B207 B40 ) <- in( B38 )  Freq: 0.749962
  0x00007f03f91c0030:   mov    %ebx,%edi                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0032:   add    $0xfffffff9,%edi
  0x00007f03f91c0035:   test   %edi,%edi
  0x00007f03f91c0037:   jl     0x00007f03f91c113b           ;*invokedynamic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B40: #	out( B41 ) <- in( B39 )  Freq: 0.749961
  0x00007f03f91c003d:   xor    %r10d,%r10d
 ;; B41: #	out( B175 B42 ) <- in( B40 B44 ) Loop( B41-B44 inner ) Freq: 2.99969
  0x00007f03f91c0040:   cmp    %r11d,%r10d
  0x00007f03f91c0043:   jae    0x00007f03f91c0d08           ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B42: #	out( B176 B43 ) <- in( B41 )  Freq: 2.99968
  0x00007f03f91c0049:   vmovdqu 0x10(%r13,%r10,4),%ymm0
  0x00007f03f91c0050:   cmp    %eax,%r10d
  0x00007f03f91c0053:   jae    0x00007f03f91c0d4c           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B43: #	out( B177 B44 ) <- in( B42 )  Freq: 2.99968
  0x00007f03f91c0059:   vpaddd 0x10(%rdx,%r10,4),%ymm0,%ymm0;*invokedynamic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91c0060:   cmp    %edi,%r10d
  0x00007f03f91c0063:   jae    0x00007f03f91c0d98           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B44: #	out( B41 B45 ) <- in( B43 )  Freq: 2.99968
  0x00007f03f91c0069:   vmovdqu %ymm0,0x10(%r14,%r10,4)     ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c0070:   mov    0x130(%r15),%rbp             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0077:   add    %r8d,%r10d                   ; ImmutableOopMap {r9=Oop rdx=Oop r13=Oop r14=Oop [24]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) App::micro_vector_masked@124 (line 43)
  0x00007f03f91c007a:   test   %eax,0x0(%rbp)               ;   {poll}
  0x00007f03f91c007d:   nop
  0x00007f03f91c007e:   nop
  0x00007f03f91c007f:   nop
  0x00007f03f91c0080:   cmp    %ecx,%r10d
  0x00007f03f91c0083:   jl     0x00007f03f91c0040
 ;; B45: #	out( B211 B46 ) <- in( B44 B32 )  Freq: 0.999955
  0x00007f03f91c0085:   mov    %ebx,%ecx
  0x00007f03f91c0087:   and    %esi,%ecx
  0x00007f03f91c0089:   mov    $0x1,%r11d
  0x00007f03f91c008f:   shl    %cl,%r11
  0x00007f03f91c0092:   dec    %r11
  0x00007f03f91c0095:   cmp    $0x40,%r8d
  0x00007f03f91c0099:   jge    0x00007f03f91c121c
 ;; B46: #	out( B212 B47 ) <- in( B45 )  Freq: 0.999955
  0x00007f03f91c009f:   mov    $0x40,%ecx
  0x00007f03f91c00a4:   sub    %r8d,%ecx
  0x00007f03f91c00a7:   shl    %cl,%r11
  0x00007f03f91c00aa:   sar    %cl,%r11
  0x00007f03f91c00ad:   mov    %r11,%rbp
  0x00007f03f91c00b0:   sar    %rbp
  0x00007f03f91c00b3:   cmp    %rbp,%r11
  0x00007f03f91c00b6:   je     0x00007f03f91c1268
 ;; B47: #	out( B183 B48 ) <- in( B46 )  Freq: 0.999954
  0x00007f03f91c00bc:   nop
  0x00007f03f91c00bd:   nop
  0x00007f03f91c00be:   nop
  0x00007f03f91c00bf:   nop
  0x00007f03f91c00c0:   cmp    $0x100000,%r8d
  0x00007f03f91c00c7:   ja     0x00007f03f91c0e70           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B48: #	out( B49 ) <- in( B47 )  Freq: 0.999953
  0x00007f03f91c00cd:   movslq %r8d,%rcx                    ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B49: #	out( B167 B50 ) <- in( B48 B183 )  Freq: 0.999954
  0x00007f03f91c00d0:   cmp    $0x100000,%r8d
  0x00007f03f91c00d7:   ja     0x00007f03f91c0bd8           ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B50: #	out( B167 B51 ) <- in( B49 )  Freq: 0.999953
  0x00007f03f91c00dd:   mov    0x148(%r15),%rsi             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c00e4:   add    $0x17,%rcx
  0x00007f03f91c00e8:   mov    %rcx,%rdi
  0x00007f03f91c00eb:   and    $0xfffffffffffffff8,%rdi
  0x00007f03f91c00ef:   mov    %rsi,%rax
  0x00007f03f91c00f2:   add    %rdi,%rax                    ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c00f5:   nop
  0x00007f03f91c00f6:   nop
  0x00007f03f91c00f7:   nop
  0x00007f03f91c00f8:   nop
  0x00007f03f91c00f9:   nop
  0x00007f03f91c00fa:   nop
  0x00007f03f91c00fb:   nop
  0x00007f03f91c00fc:   nop
  0x00007f03f91c00fd:   nop
  0x00007f03f91c00fe:   nop
  0x00007f03f91c00ff:   nop
  0x00007f03f91c0100:   cmp    0x158(%r15),%rax             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0107:   jae    0x00007f03f91c0bd8           ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B51: #	out( B52 ) <- in( B50 )  Freq: 0.999853
  0x00007f03f91c010d:   mov    %rax,0x148(%r15)
  0x00007f03f91c0114:   prefetchw 0xc0(%rax)
  0x00007f03f91c011b:   movq   $0x1,(%rsi)
  0x00007f03f91c0122:   prefetchw 0x100(%rax)
  0x00007f03f91c0129:   movl   $0x40000,0x8(%rsi)           ;   {metadata({type array bool})}
  0x00007f03f91c0130:   mov    %r8d,0xc(%rsi)
  0x00007f03f91c0134:   prefetchw 0x140(%rax)
  0x00007f03f91c013b:   mov    %rsi,%rdi
  0x00007f03f91c013e:   add    $0x10,%rdi
  0x00007f03f91c0142:   prefetchw 0x180(%rax)
  0x00007f03f91c0149:   shr    $0x3,%rcx
  0x00007f03f91c014d:   add    $0xfffffffffffffffe,%rcx
  0x00007f03f91c0151:   xor    %rax,%rax
  0x00007f03f91c0154:   cmp    $0x8,%rcx
  0x00007f03f91c0158:   jg     0x00007f03f91c016a
  0x00007f03f91c015a:   dec    %rcx
  0x00007f03f91c015d:   js     0x00007f03f91c0171
 ;; LOOP:
  0x00007f03f91c015f:   mov    %rax,(%rdi,%rcx,8)
  0x00007f03f91c0163:   dec    %rcx
  0x00007f03f91c0166:   jge    0x00007f03f91c015f
  0x00007f03f91c0168:   jmp    0x00007f03f91c0171
 ;; LONG:
  0x00007f03f91c016a:   shl    $0x3,%rcx
  0x00007f03f91c016e:   rep rex.W stos %al,%es:(%rdi)
 ;; DONE:
 ;; B52: #	out( B161 B53 ) <- in( B168 B51 )  Freq: 0.999954
  0x00007f03f91c0171:   mov    %rsi,%rdi
  0x00007f03f91c0174:   mov    %r8d,%ecx                    ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91c0177:   test   %ecx,%ecx
  0x00007f03f91c0179:   jle    0x00007f03f91c0b7e
 ;; B53: #	out( B192 B54 ) <- in( B52 )  Freq: 0.888804
  0x00007f03f91c017f:   nop
  0x00007f03f91c0180:   test   %ecx,%ecx
  0x00007f03f91c0182:   je     0x00007f03f91c0fe4
 ;; B54: #	out( B192 B55 ) <- in( B53 )  Freq: 0.888803
  0x00007f03f91c0188:   mov    %ecx,%esi
  0x00007f03f91c018a:   dec    %esi
  0x00007f03f91c018c:   cmp    %ecx,%esi
  0x00007f03f91c018e:   jae    0x00007f03f91c0fe4
 ;; B55: #	out( B162 B56 ) <- in( B54 )  Freq: 0.888802
  0x00007f03f91c0194:   nop
  0x00007f03f91c0195:   nop
  0x00007f03f91c0196:   nop
  0x00007f03f91c0197:   nop
  0x00007f03f91c0198:   nop
  0x00007f03f91c0199:   nop
  0x00007f03f91c019a:   nop
  0x00007f03f91c019b:   nop
  0x00007f03f91c019c:   nop
  0x00007f03f91c019d:   nop
  0x00007f03f91c019e:   nop
  0x00007f03f91c019f:   nop
  0x00007f03f91c01a0:   test   $0x1,%r11
  0x00007f03f91c01a7:   je     0x00007f03f91c0ba5           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B56: #	out( B57 ) <- in( B55 )  Freq: 0.777651
  0x00007f03f91c01ad:   mov    $0x1,%esi                    ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@17 (line 2963)
                                                            ; - App::micro_vector_masked@107 (line 46)
 ;; B57: #	out( B193 B58 ) <- in( B162 B56 )  Freq: 0.888802
  0x00007f03f91c01b2:   mov    %sil,0x10(%rdi)              ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::intoArray@12 (line 2961)
                                                            ; - App::micro_vector_masked@107 (line 46)
  0x00007f03f91c01b6:   mov    %ecx,%esi
  0x00007f03f91c01b8:   add    $0xfffffffd,%esi
  0x00007f03f91c01bb:   nop
  0x00007f03f91c01bc:   nop
  0x00007f03f91c01bd:   nop
  0x00007f03f91c01be:   nop
  0x00007f03f91c01bf:   nop
  0x00007f03f91c01c0:   cmp    $0x1,%esi
  0x00007f03f91c01c3:   jle    0x00007f03f91c1034
 ;; B58: #	out( B202 B59 ) <- in( B57 )  Freq: 0.888801
  0x00007f03f91c01c9:   cmp    $0x1,%ecx
  0x00007f03f91c01cc:   jbe    0x00007f03f91c1100
 ;; B59: #	out( B203 B60 ) <- in( B58 )  Freq: 0.8888
  0x00007f03f91c01d2:   cmp    $0x4,%ecx
  0x00007f03f91c01d5:   jbe    0x00007f03f91c1114
 ;; B60: #	out( B77 ) <- in( B59 )  Freq: 0.888799
  0x00007f03f91c01db:   mov    $0x1,%r11d
  0x00007f03f91c01e1:   mov    %esi,0x20(%rsp)
  0x00007f03f91c01e5:   jmpq   0x00007f03f91c02ef
  0x00007f03f91c01ea:   nop
  0x00007f03f91c01eb:   nop
  0x00007f03f91c01ec:   nop
  0x00007f03f91c01ed:   nop
  0x00007f03f91c01ee:   nop
  0x00007f03f91c01ef:   nop                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B61: #	out( B62 ) <- in( B70 ) top-of-loop Freq: 62.9387
  0x00007f03f91c01f0:   mov    $0x1,%r8d                    ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B62: #	out( B75 B63 ) <- in( B71 B61 ) top-of-loop Freq: 71.9346
  0x00007f03f91c01f6:   sar    %rbp                         ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c01f9:   movslq %r11d,%r9                    ;*synchronization entry
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::elementType@-1 (line 3476)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91c01fc:   mov    %cl,0x10(%rdi,%r9,1)         ;*invokevirtual maskType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91c0201:   mov    %sil,0x11(%rdi,%r9,1)        ;*invokestatic checkFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91c0206:   mov    %r10b,0x12(%rdi,%r9,1)       ;*getfield SPECIES {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@113 (line 43)
  0x00007f03f91c020b:   mov    %r8b,0x13(%rdi,%r9,1)        ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91c0210:   sar    %rbp
  0x00007f03f91c0213:   add    $0x4,%r11d
  0x00007f03f91c0217:   cmp    %eax,%r11d
  0x00007f03f91c021a:   nop
  0x00007f03f91c021b:   nop
  0x00007f03f91c021c:   nop
  0x00007f03f91c021d:   nop
  0x00007f03f91c021e:   nop
  0x00007f03f91c021f:   nop
  0x00007f03f91c0220:   jge    0x00007f03f91c02cb
 ;; B63: #	out( B64 ) <- in( B62 )  Freq: 63.9386
  0x00007f03f91c0226:   vmovq  %xmm0,%r9
  0x00007f03f91c022b:   vmovd  %xmm1,%r8d
  0x00007f03f91c0230:   vmovd  %xmm3,%r10d
 ;; B64: #	out( B72 B65 ) <- in( B77 B63 ) Loop( B64-B63 inner main of N697 strip mined) Freq: 71.9346
  0x00007f03f91c0235:   nop
  0x00007f03f91c0236:   nop
  0x00007f03f91c0237:   nop
  0x00007f03f91c0238:   nop
  0x00007f03f91c0239:   nop
  0x00007f03f91c023a:   nop
  0x00007f03f91c023b:   nop
  0x00007f03f91c023c:   nop
  0x00007f03f91c023d:   nop
  0x00007f03f91c023e:   nop
  0x00007f03f91c023f:   nop
  0x00007f03f91c0240:   test   $0x1,%rbp
  0x00007f03f91c0247:   je     0x00007f03f91c02bb           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B65: #	out( B66 ) <- in( B64 )  Freq: 62.9387
  0x00007f03f91c024d:   mov    $0x1,%ecx                    ;*invokevirtual maskType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
 ;; B66: #	out( B73 B67 ) <- in( B72 B65 )  Freq: 71.9346
  0x00007f03f91c0252:   mov    %rbp,%rsi
  0x00007f03f91c0255:   shr    %rsi
  0x00007f03f91c0258:   nop
  0x00007f03f91c0259:   nop
  0x00007f03f91c025a:   nop
  0x00007f03f91c025b:   nop
  0x00007f03f91c025c:   nop
  0x00007f03f91c025d:   nop
  0x00007f03f91c025e:   nop
  0x00007f03f91c025f:   nop
  0x00007f03f91c0260:   test   $0x1,%rsi
  0x00007f03f91c0267:   je     0x00007f03f91c02c2           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B67: #	out( B68 ) <- in( B66 )  Freq: 62.9387
  0x00007f03f91c026d:   mov    $0x1,%esi                    ;*invokevirtual elementType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
 ;; B68: #	out( B74 B69 ) <- in( B73 B67 )  Freq: 71.9346
  0x00007f03f91c0272:   vmovd  %r10d,%xmm3
  0x00007f03f91c0277:   vmovd  %r8d,%xmm1
  0x00007f03f91c027c:   vmovq  %r9,%xmm0
  0x00007f03f91c0281:   sar    %rbp
  0x00007f03f91c0284:   mov    %rbp,%r10
  0x00007f03f91c0287:   shr    %r10
  0x00007f03f91c028a:   test   $0x1,%r10
  0x00007f03f91c0291:   je     0x00007f03f91c02c6           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B69: #	out( B70 ) <- in( B68 )  Freq: 62.9387
  0x00007f03f91c0297:   mov    $0x1,%r10d                   ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@116 (line 43)
 ;; B70: #	out( B61 B71 ) <- in( B74 B69 )  Freq: 71.9346
  0x00007f03f91c029d:   sar    %rbp
  0x00007f03f91c02a0:   mov    %rbp,%r8
  0x00007f03f91c02a3:   shr    %r8
  0x00007f03f91c02a6:   test   $0x1,%r8                     ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c02ad:   jne    0x00007f03f91c01f0
 ;; B71: #	out( B62 ) <- in( B70 )  Freq: 8.99591
  0x00007f03f91c02b3:   xor    %r8d,%r8d
  0x00007f03f91c02b6:   jmpq   0x00007f03f91c01f6
 ;; B72: #	out( B66 ) <- in( B64 )  Freq: 8.99591
  0x00007f03f91c02bb:   xor    %ecx,%ecx
  0x00007f03f91c02bd:   nop
  0x00007f03f91c02be:   nop
  0x00007f03f91c02bf:   nop
  0x00007f03f91c02c0:   jmp    0x00007f03f91c0252
 ;; B73: #	out( B68 ) <- in( B66 )  Freq: 8.99591
  0x00007f03f91c02c2:   xor    %esi,%esi
  0x00007f03f91c02c4:   jmp    0x00007f03f91c0272
 ;; B74: #	out( B70 ) <- in( B68 )  Freq: 8.99591
  0x00007f03f91c02c6:   xor    %r10d,%r10d
  0x00007f03f91c02c9:   jmp    0x00007f03f91c029d           ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B75: #	out( B78 B76 ) <- in( B62 )  Freq: 7.99596
  0x00007f03f91c02cb:   mov    0x130(%r15),%r10             ; ImmutableOopMap {rdi=Oop rdx=Oop r13=Oop r14=Oop xmm0=Oop [24]=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorMask::fromLong@135 (line 255)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91c02d2:   test   %eax,(%r10)                  ;   {poll}
  0x00007f03f91c02d5:   cmp    0x20(%rsp),%r11d
  0x00007f03f91c02da:   jge    0x00007f03f91c031d
 ;; B76: #	out( B77 ) <- in( B75 )  Freq: 7.10716
  0x00007f03f91c02dc:   vmovq  %xmm0,%r9
  0x00007f03f91c02e1:   vmovd  %xmm1,%r8d
  0x00007f03f91c02e6:   vmovd  %xmm3,%r10d
  0x00007f03f91c02eb:   vmovd  %xmm4,%ecx
 ;; B77: #	out( B64 ) <- in( B60 B76 ) Loop( B77-B76 ) Freq: 7.99596
  0x00007f03f91c02ef:   vmovd  %ecx,%xmm4
  0x00007f03f91c02f3:   mov    %ecx,%eax
  0x00007f03f91c02f5:   sub    %r11d,%eax
  0x00007f03f91c02f8:   add    $0xfffffffd,%eax
  0x00007f03f91c02fb:   mov    0x20(%rsp),%ecx
  0x00007f03f91c02ff:   xor    %esi,%esi
  0x00007f03f91c0301:   cmp    %r11d,%ecx
  0x00007f03f91c0304:   cmovl  %esi,%eax
  0x00007f03f91c0307:   cmp    $0xfa0,%eax
  0x00007f03f91c030d:   mov    $0xfa0,%esi
  0x00007f03f91c0312:   cmova  %esi,%eax
  0x00007f03f91c0315:   add    %r11d,%eax
  0x00007f03f91c0318:   jmpq   0x00007f03f91c0235
 ;; B78: #	out( B79 ) <- in( B75 )  Freq: 0.888799
  0x00007f03f91c031d:   vmovq  %xmm0,%r9
  0x00007f03f91c0322:   vmovd  %xmm1,%r8d
  0x00007f03f91c0327:   vmovd  %xmm3,%r10d
  0x00007f03f91c032c:   vmovd  %xmm4,%ecx
 ;; B79: #	out( B85 B80 ) <- in( B193 B78 )  Freq: 0.8888
  0x00007f03f91c0330:   cmp    %ecx,%r11d
  0x00007f03f91c0333:   jge    0x00007f03f91c036a           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B80: #	out( B81 ) <- in( B79 )  Freq: 0.4444
  0x00007f03f91c0335:   nop
  0x00007f03f91c0336:   nop
  0x00007f03f91c0337:   nop                                 ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
                                                            ; - App::micro_vector_masked@107 (line 46)
 ;; B81: #	out( B163 B82 ) <- in( B80 B84 ) Loop( B81-B84 inner post of N1358) Freq: 0.8888
  0x00007f03f91c0338:   nop
  0x00007f03f91c0339:   nop
  0x00007f03f91c033a:   nop
  0x00007f03f91c033b:   nop
  0x00007f03f91c033c:   nop
  0x00007f03f91c033d:   nop
  0x00007f03f91c033e:   nop
  0x00007f03f91c033f:   nop
  0x00007f03f91c0340:   test   $0x1,%rbp
  0x00007f03f91c0347:   je     0x00007f03f91c0bac           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B82: #	out( B83 ) <- in( B81 )  Freq: 0.777649
  0x00007f03f91c034d:   mov    $0x1,%esi                    ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
                                                            ; - App::micro_vector_masked@107 (line 46)
 ;; B83: #	out( B85 B84 ) <- in( B163 B82 )  Freq: 0.8888
  0x00007f03f91c0352:   mov    %sil,0x10(%rdi,%r11,1)
  0x00007f03f91c0357:   inc    %r11d
  0x00007f03f91c035a:   nop
  0x00007f03f91c035b:   nop
  0x00007f03f91c035c:   nop
  0x00007f03f91c035d:   nop
  0x00007f03f91c035e:   nop
  0x00007f03f91c035f:   nop
  0x00007f03f91c0360:   cmp    %ecx,%r11d
  0x00007f03f91c0363:   jge    0x00007f03f91c036a           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B84: #	out( B81 ) <- in( B83 )  Freq: 0.4444
  0x00007f03f91c0365:   sar    %rbp
  0x00007f03f91c0368:   jmp    0x00007f03f91c0338
 ;; B85: #	out( B86 ) <- in( B83 B79 )  Freq: 0.8888
  0x00007f03f91c036a:   mov    %r14,0x20(%rsp)
  0x00007f03f91c036f:   mov    %r13,0x38(%rsp)
  0x00007f03f91c0374:   mov    %rdx,0x28(%rsp)
  0x00007f03f91c0379:   mov    %ebx,0xa8(%rsp)
  0x00007f03f91c0380:   mov    %r8d,%r11d
  0x00007f03f91c0383:   mov    %r10d,0x40(%rsp)             ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
 ;; B86: #	out( B249 B87 ) <- in( B85 B161 )  Freq: 0.999951
  0x00007f03f91c0388:   mov    0x30(%r9),%r8d
  0x00007f03f91c038c:   mov    %r9,%r10                     ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c038f:   mov    %r8,%rsi
  0x00007f03f91c0392:   push   %r10
  0x00007f03f91c0394:   cmp    0xce244d5(%rip),%r12        # 0x00007f0405fe4870
                                                            ;   {external_word}
  0x00007f03f91c039b:   je     0x00007f03f91c03b5
 ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f03f91c03a1:   movabs $0x7f0405592180,%rdi         ;   {external_word}
  0x00007f03f91c03ab:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c03af:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c03b4:   hlt    
  0x00007f03f91c03b5:   pop    %r10
  0x00007f03f91c03b7:   shl    $0x3,%rsi
  0x00007f03f91c03bb:   movabs $0x1010002b0,%rdx            ;   {oop(a 'java/lang/Class'{0x00000001010002b0} = int)}
  0x00007f03f91c03c5:   mov    %r11d,%ecx
  0x00007f03f91c03c8:   mov    %rdi,%r8
  0x00007f03f91c03cb:   mov    $0x10,%r9d
  0x00007f03f91c03d1:   xor    %r11d,%r11d
  0x00007f03f91c03d4:   mov    %r11d,(%rsp)
  0x00007f03f91c03d8:   mov    %r10,0x8(%rsp)
  0x00007f03f91c03dd:   movabs $0x101bdc6a0,%r10            ;   {oop(a 'jdk/incubator/vector/VectorMask$$Lambda$53+0x00000008000aa6e0'{0x0000000101bdc6a0})}
  0x00007f03f91c03e7:   mov    %r10,0x10(%rsp)
  0x00007f03f91c03ec:   vzeroupper 
  0x00007f03f91c03ef:   callq  0x00007f03f918f760           ; ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [56]=Oop }
                                                            ;*invokestatic load {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
                                                            ;   {static_call}
 ;; B87: #	out( B231 B88 ) <- in( B86 )  Freq: 0.999931
  0x00007f03f91c03f4:   mov    0x8(%rax),%r11d              ; implicit exception: dispatches to 0x00007f03f91c16b0
 ;; B88: #	out( B222 B89 ) <- in( B87 )  Freq: 0.99993
  0x00007f03f91c03f8:   nop
  0x00007f03f91c03f9:   nop
  0x00007f03f91c03fa:   nop
  0x00007f03f91c03fb:   nop
  0x00007f03f91c03fc:   nop
  0x00007f03f91c03fd:   nop
  0x00007f03f91c03fe:   nop
  0x00007f03f91c03ff:   nop
  0x00007f03f91c0400:   cmp    $0x98750,%r11d               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {metadata('jdk/incubator/vector/Int256Vector$Int256Mask')}
  0x00007f03f91c0407:   jne    0x00007f03f91c14c4
 ;; B89: #	out( B232 B90 ) <- in( B88 )  Freq: 0.99993
  0x00007f03f91c040d:   mov    %rax,%r8                     ;*invokevirtual maskType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91c0410:   mov    0x18(%rsp),%r11              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0415:   mov    0xc(%r11),%ebp               ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91c0419:   nop
  0x00007f03f91c041a:   nop
  0x00007f03f91c041b:   nop
  0x00007f03f91c041c:   nop
  0x00007f03f91c041d:   nop
  0x00007f03f91c041e:   nop
  0x00007f03f91c041f:   nop
  0x00007f03f91c0420:   mov    0x8(%r12,%rbp,8),%r9d        ; implicit exception: dispatches to 0x00007f03f91c16e0
 ;; B90: #	out( B223 B91 ) <- in( B89 )  Freq: 0.999929
  0x00007f03f91c0425:   cmp    $0x94b80,%r9d                ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {metadata('jdk/incubator/vector/IntVector$IntSpecies')}
  0x00007f03f91c042c:   jne    0x00007f03f91c1504
 ;; B91: #	out( B210 B92 ) <- in( B90 )  Freq: 0.999929
  0x00007f03f91c0432:   lea    (%r12,%rbp,8),%r9            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@64 (line 43)
  0x00007f03f91c0436:   mov    0x40(%rsp),%r10d
  0x00007f03f91c043b:   nop
  0x00007f03f91c043c:   nop
  0x00007f03f91c043d:   nop
  0x00007f03f91c043e:   nop
  0x00007f03f91c043f:   nop
  0x00007f03f91c0440:   test   %r10d,%r10d
  0x00007f03f91c0443:   jl     0x00007f03f91c11a8
 ;; B92: #	out( B233 B93 ) <- in( B91 )  Freq: 0.999928
  0x00007f03f91c0449:   mov    0x38(%rsp),%rbx
  0x00007f03f91c044e:   mov    0xc(%rbx),%ecx               ; implicit exception: dispatches to 0x00007f03f91c1734
                                                            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B93: #	out( B213 B94 ) <- in( B92 )  Freq: 0.999927
  0x00007f03f91c0451:   mov    0xc(%r9),%edi                ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91c0455:   mov    %ecx,%ebp
  0x00007f03f91c0457:   sub    %edi,%ebp
  0x00007f03f91c0459:   cmp    %ebp,%r10d
  0x00007f03f91c045c:   nop
  0x00007f03f91c045d:   nop
  0x00007f03f91c045e:   nop
  0x00007f03f91c045f:   nop
  0x00007f03f91c0460:   jle    0x00007f03f91c12c0           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B94: #	out( B214 B95 ) <- in( B93 )  Freq: 0.999927
  0x00007f03f91c0466:   mov    0x2c(%r9),%ebp               ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91c046a:   cmp    $0x20311f9a,%ebp             ;   {oop(a 'java/lang/Class'{0x000000010188fcd0} = 'jdk/incubator/vector/IntMaxVector')}
  0x00007f03f91c0470:   je     0x00007f03f91c12ec           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B95: #	out( B186 B96 ) <- in( B94 )  Freq: 0.999926
  0x00007f03f91c0476:   mov    0x1c(%r9),%ebp               ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91c047a:   nop
  0x00007f03f91c047b:   nop
  0x00007f03f91c047c:   nop
  0x00007f03f91c047d:   nop
  0x00007f03f91c047e:   nop
  0x00007f03f91c047f:   nop
  0x00007f03f91c0480:   cmp    $0x100,%ebp
  0x00007f03f91c0486:   jne    0x00007f03f91c0ec4
 ;; B96: #	out( B215 B97 ) <- in( B95 )  Freq: 0.999925
  0x00007f03f91c048c:   mov    %ecx,%edx
  0x00007f03f91c048e:   sub    0x40(%rsp),%edx              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0492:   mov    0xc(%r8),%edi                ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c0496:   vmovq  0x10(%r12,%rdi,8),%xmm0
  0x00007f03f91c049d:   cmp    $0x8,%edx                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c04a0:   mov    $0x8,%esi
  0x00007f03f91c04a5:   cmovge %esi,%edx                    ;*invokevirtual dummyVector {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91c04a8:   xor    %edi,%edi
  0x00007f03f91c04aa:   test   %edx,%edx
  0x00007f03f91c04ac:   cmovle %edi,%edx
  0x00007f03f91c04af:   vmovd  %edx,%xmm1
  0x00007f03f91c04b3:   vpbroadcastd %xmm1,%ymm1
  0x00007f03f91c04b8:   movabs $0x101964ea8,%rdi            ;   {oop([I{0x0000000101964ea8})}
  0x00007f03f91c04c2:   vmovdqu 0x10(%rdi),%ymm2
  0x00007f03f91c04c7:   vpcmpeqb %ymm3,%ymm3,%ymm3
  0x00007f03f91c04cb:   vpcmpgtd %ymm2,%ymm1,%ymm1
  0x00007f03f91c04cf:   vpxor  -0x138f37(%rip),%ymm1,%ymm1        # Stub::vector_all_bits_set
                                                            ;   {external_word}
  0x00007f03f91c04d7:   vpxor  %ymm2,%ymm2,%ymm2
  0x00007f03f91c04db:   vpsubb %ymm0,%ymm2,%ymm2
  0x00007f03f91c04df:   vpmovsxbd %xmm2,%ymm2               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c04e4:   vpand  %ymm2,%ymm1,%ymm0
  0x00007f03f91c04e8:   vptest %ymm3,%ymm0
  0x00007f03f91c04ed:   setne  %bpl
  0x00007f03f91c04f1:   movzbl %bpl,%ebp
  0x00007f03f91c04f5:   test   %ebp,%ebp
  0x00007f03f91c04f7:   jne    0x00007f03f91c1320
 ;; B97: #	out( B169 B98 ) <- in( B96 )  Freq: 0.999925
  0x00007f03f91c04fd:   mov    0x148(%r15),%rcx
  0x00007f03f91c0504:   mov    %rcx,%rdi
  0x00007f03f91c0507:   add    $0x18,%rdi                   ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c050b:   cmp    0x158(%r15),%rdi             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0512:   jae    0x00007f03f91c0c45           ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B98: #	out( B99 ) <- in( B97 )  Freq: 0.999825
  0x00007f03f91c0518:   mov    %rdi,0x148(%r15)
  0x00007f03f91c051f:   prefetchw 0xc0(%rdi)
  0x00007f03f91c0526:   movq   $0x1,(%rcx)
  0x00007f03f91c052d:   movl   $0xacb58,0x8(%rcx)           ;   {metadata('jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58')}
  0x00007f03f91c0534:   mov    %r12d,0xc(%rcx)
  0x00007f03f91c0538:   mov    %r12d,0x14(%rcx)
  0x00007f03f91c053c:   mov    0x18(%rsp),%rbp
  0x00007f03f91c0541:   mov    %rax,-0x8(%rsp)
  0x00007f03f91c0546:   mov    0x40(%rsp),%eax
  0x00007f03f91c054a:   mov    %eax,0x30(%rsp)
  0x00007f03f91c054e:   mov    -0x8(%rsp),%rax
  0x00007f03f91c0553:   mov    %r8,0x38(%rsp)
  0x00007f03f91c0558:   mov    %r9,0x40(%rsp)
  0x00007f03f91c055d:   vmovdqu %ymm3,0x60(%rsp)            ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B99: #	out( B244 B100 ) <- in( B170 B98 )  Freq: 0.999925
  0x00007f03f91c0563:   push   %r10
  0x00007f03f91c0565:   cmp    0xce24304(%rip),%r12        # 0x00007f0405fe4870
                                                            ;   {external_word}
  0x00007f03f91c056c:   je     0x00007f03f91c0586
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007f03f91c0572:   movabs $0x7f04055920d0,%rdi         ;   {external_word}
  0x00007f03f91c057c:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c0580:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c0585:   hlt    
  0x00007f03f91c0586:   pop    %r10
  0x00007f03f91c0588:   test   %rbx,%rbx
  0x00007f03f91c058b:   jne    0x00007f03f91c05a5
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007f03f91c0591:   movabs $0x7f0405592110,%rdi         ;   {external_word}
  0x00007f03f91c059b:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c059f:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c05a4:   hlt    
  0x00007f03f91c05a5:   mov    %rbx,%r10
  0x00007f03f91c05a8:   shr    $0x3,%r10                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c05ac:   mov    %r10d,0x10(%rcx)             ;*isub {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@42 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c05b0:   mov    0x30(%rsp),%r10d             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c05b5:   mov    %r10d,0xc(%rcx)              ;*invokevirtual elementType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@10 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91c05b9:   mov    0x40(%rsp),%rsi
  0x00007f03f91c05be:   mov    0x38(%rsp),%rdx              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c05c3:   nop
  0x00007f03f91c05c4:   vzeroupper 
  0x00007f03f91c05c7:   callq  0x00007f03f918e380           ; ImmutableOopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop }
                                                            ;*invokevirtual vOp {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@64 (line 2728)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {optimized virtual_call}
 ;; B100: #	out( B234 B101 ) <- in( B99 )  Freq: 0.999905
  0x00007f03f91c05cc:   mov    %rax,0x40(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c05d1:   mov    0xc(%rbp),%r10d              ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c05d5:   mov    0x8(%r12,%r10,8),%r11d       ; implicit exception: dispatches to 0x00007f03f91c1758
 ;; B101: #	out( B224 B102 ) <- in( B100 )  Freq: 0.999904
  0x00007f03f91c05da:   nop
  0x00007f03f91c05db:   nop
  0x00007f03f91c05dc:   nop
  0x00007f03f91c05dd:   nop
  0x00007f03f91c05de:   nop
  0x00007f03f91c05df:   nop
  0x00007f03f91c05e0:   cmp    $0x94b80,%r11d               ;   {metadata('jdk/incubator/vector/IntVector$IntSpecies')}
  0x00007f03f91c05e7:   jne    0x00007f03f91c1534
 ;; B102: #	out( B235 B103 ) <- in( B101 )  Freq: 0.999904
  0x00007f03f91c05ed:   mov    0x28(%rsp),%r11              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c05f2:   mov    0xc(%r11),%r8d               ; implicit exception: dispatches to 0x00007f03f91c1794
 ;; B103: #	out( B216 B104 ) <- in( B102 )  Freq: 0.999903
  0x00007f03f91c05f6:   lea    (%r12,%r10,8),%rbx           ;*invokevirtual elementType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91c05fa:   mov    0xc(%rbx),%r9d               ;*ifnull {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::dummyVector@6 (line 296)
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91c05fe:   mov    %r8d,%ebp
  0x00007f03f91c0601:   sub    %r9d,%ebp
  0x00007f03f91c0604:   mov    0x30(%rsp),%r10d
  0x00007f03f91c0609:   cmp    %ebp,%r10d
  0x00007f03f91c060c:   jle    0x00007f03f91c1358           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B104: #	out( B217 B105 ) <- in( B103 )  Freq: 0.999902
  0x00007f03f91c0612:   mov    0x2c(%rbx),%ebp              ;*ifnull {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::dummyVector@6 (line 296)
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91c0615:   nop
  0x00007f03f91c0616:   nop
  0x00007f03f91c0617:   nop
  0x00007f03f91c0618:   nop
  0x00007f03f91c0619:   nop
  0x00007f03f91c061a:   nop
  0x00007f03f91c061b:   nop
  0x00007f03f91c061c:   nop
  0x00007f03f91c061d:   nop
  0x00007f03f91c061e:   nop
  0x00007f03f91c061f:   nop
  0x00007f03f91c0620:   cmp    $0x20311f9a,%ebp             ;   {oop(a 'java/lang/Class'{0x000000010188fcd0} = 'jdk/incubator/vector/IntMaxVector')}
  0x00007f03f91c0626:   je     0x00007f03f91c1388           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B105: #	out( B187 B106 ) <- in( B104 )  Freq: 0.999902
  0x00007f03f91c062c:   mov    0x1c(%rbx),%ebp              ;*synchronization entry
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::elementType@-1 (line 3476)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91c062f:   cmp    $0x100,%ebp
  0x00007f03f91c0635:   jne    0x00007f03f91c0ef8
 ;; B106: #	out( B218 B107 ) <- in( B105 )  Freq: 0.999901
  0x00007f03f91c063b:   mov    %r8d,%edi
  0x00007f03f91c063e:   sub    0x30(%rsp),%edi
  0x00007f03f91c0642:   mov    0x38(%rsp),%rdx              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0647:   mov    0xc(%rdx),%ecx               ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c064a:   movabs $0x101964ea8,%r9             ;   {oop([I{0x0000000101964ea8})}
  0x00007f03f91c0654:   vmovdqu 0x10(%r9),%ymm1
  0x00007f03f91c065a:   vmovq  0x10(%r12,%rcx,8),%xmm0
  0x00007f03f91c0661:   cmp    $0x8,%edi                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0664:   mov    $0x8,%ecx
  0x00007f03f91c0669:   cmovge %ecx,%edi                    ;*invokespecial dummyVector {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91c066c:   xor    %r9d,%r9d
  0x00007f03f91c066f:   test   %edi,%edi
  0x00007f03f91c0671:   cmovle %r9d,%edi
  0x00007f03f91c0675:   vmovd  %edi,%xmm2
  0x00007f03f91c0679:   vpbroadcastd %xmm2,%ymm2
  0x00007f03f91c067e:   vpcmpgtd %ymm1,%ymm2,%ymm1
  0x00007f03f91c0682:   vpxor  -0x1390ea(%rip),%ymm1,%ymm1        # Stub::vector_all_bits_set
                                                            ;   {external_word}
  0x00007f03f91c068a:   vpxor  %ymm2,%ymm2,%ymm2
  0x00007f03f91c068e:   vpsubb %ymm0,%ymm2,%ymm2
  0x00007f03f91c0692:   vpmovsxbd %xmm2,%ymm2               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0697:   vpand  %ymm2,%ymm1,%ymm1            ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91c069b:   vmovdqu 0x60(%rsp),%ymm0
  0x00007f03f91c06a1:   vptest %ymm0,%ymm1
  0x00007f03f91c06a6:   setne  %bpl
  0x00007f03f91c06aa:   movzbl %bpl,%ebp
  0x00007f03f91c06ae:   test   %ebp,%ebp                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c06b0:   jne    0x00007f03f91c13c0
 ;; B107: #	out( B171 B108 ) <- in( B106 )  Freq: 0.9999
  0x00007f03f91c06b6:   mov    0x148(%r15),%rcx
  0x00007f03f91c06bd:   mov    %rcx,%r8
  0x00007f03f91c06c0:   add    $0x18,%r8                    ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c06c4:   cmp    0x158(%r15),%r8              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c06cb:   jae    0x00007f03f91c0c85           ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B108: #	out( B109 ) <- in( B107 )  Freq: 0.9998
  0x00007f03f91c06d1:   mov    %r8,0x148(%r15)
  0x00007f03f91c06d8:   prefetchw 0xc0(%r8)
  0x00007f03f91c06e0:   movq   $0x1,(%rcx)
  0x00007f03f91c06e7:   movl   $0xacb58,0x8(%rcx)           ;   {metadata('jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58')}
  0x00007f03f91c06ee:   mov    %r12d,0xc(%rcx)
  0x00007f03f91c06f2:   mov    %r12d,0x14(%rcx)
  0x00007f03f91c06f6:   mov    %rax,-0x8(%rsp)
  0x00007f03f91c06fb:   mov    0x30(%rsp),%eax
  0x00007f03f91c06ff:   mov    %eax,0x38(%rsp)
  0x00007f03f91c0703:   mov    -0x8(%rsp),%rax
  0x00007f03f91c0708:   mov    %rdx,0x28(%rsp)
  0x00007f03f91c070d:   mov    %rbx,0x18(%rsp)              ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B109: #	out( B246 B110 ) <- in( B172 B108 )  Freq: 0.9999
  0x00007f03f91c0712:   push   %r10
  0x00007f03f91c0714:   cmp    0xce24155(%rip),%r12        # 0x00007f0405fe4870
                                                            ;   {external_word}
  0x00007f03f91c071b:   je     0x00007f03f91c0735
 ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007f03f91c0721:   movabs $0x7f04055920d0,%rdi         ;   {external_word}
  0x00007f03f91c072b:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c072f:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c0734:   hlt    
  0x00007f03f91c0735:   pop    %r10
  0x00007f03f91c0737:   test   %r11,%r11
  0x00007f03f91c073a:   jne    0x00007f03f91c0754
 ;; null oop passed to encode_heap_oop_not_null2
  0x00007f03f91c0740:   movabs $0x7f0405592110,%rdi         ;   {external_word}
  0x00007f03f91c074a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c074e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c0753:   hlt    
  0x00007f03f91c0754:   shr    $0x3,%r11                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0758:   mov    %r11d,0x10(%rcx)             ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c075c:   mov    0x38(%rsp),%r10d             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0761:   mov    %r10d,0xc(%rcx)              ;*invokevirtual laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@14 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91c0765:   mov    0x18(%rsp),%rsi
  0x00007f03f91c076a:   mov    0x28(%rsp),%rdx              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c076f:   nop
  0x00007f03f91c0770:   vzeroupper 
  0x00007f03f91c0773:   callq  0x00007f03f918e380           ; ImmutableOopMap {[32]=Oop [40]=Oop [64]=Oop }
                                                            ;*invokevirtual vOp {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@64 (line 2728)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {optimized virtual_call}
 ;; B110: #	out( B236 B111 ) <- in( B109 )  Freq: 0.99988
  0x00007f03f91c0778:   mov    0x40(%rsp),%r10
  0x00007f03f91c077d:   nop
  0x00007f03f91c077e:   nop
  0x00007f03f91c077f:   nop
  0x00007f03f91c0780:   mov    0x8(%r10),%r11d              ; implicit exception: dispatches to 0x00007f03f91c17b8
 ;; B111: #	out( B188 B112 ) <- in( B110 )  Freq: 0.999879
  0x00007f03f91c0784:   cmp    $0x98110,%r11d               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {metadata('jdk/incubator/vector/Int256Vector')}
  0x00007f03f91c078b:   jne    0x00007f03f91c0f30           ;*synchronization entry
                                                            ; - App::micro_vector_masked@-1 (line 32)
 ;; B112: #	out( B237 B113 ) <- in( B111 )  Freq: 0.999878
  0x00007f03f91c0791:   mov    0x8(%rax),%r8d               ; implicit exception: dispatches to 0x00007f03f91c17dc
 ;; B113: #	out( B225 B114 ) <- in( B112 )  Freq: 0.999877
  0x00007f03f91c0795:   nop
  0x00007f03f91c0796:   nop
  0x00007f03f91c0797:   nop
  0x00007f03f91c0798:   nop
  0x00007f03f91c0799:   nop
  0x00007f03f91c079a:   nop
  0x00007f03f91c079b:   nop
  0x00007f03f91c079c:   nop
  0x00007f03f91c079d:   nop
  0x00007f03f91c079e:   nop
  0x00007f03f91c079f:   nop
  0x00007f03f91c07a0:   cmp    $0x98110,%r8d                ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {metadata('jdk/incubator/vector/Int256Vector')}
  0x00007f03f91c07a7:   jne    0x00007f03f91c1578           ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B114: #	out( B173 B115 ) <- in( B113 )  Freq: 0.999877
  0x00007f03f91c07ad:   mov    0xc(%r10),%r8d               ;*invokestatic arrayAddress {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@20 (line 3211)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c07b1:   mov    0xc(%rax),%r11d              ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@0
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@26 (line 3211)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c07b5:   vmovdqu 0x10(%r12,%r8,8),%ymm2      ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@73 (line 44)
  0x00007f03f91c07bc:   vpaddd 0x10(%r12,%r11,8),%ymm2,%ymm3
  0x00007f03f91c07c3:   mov    0x148(%r15),%rax
  0x00007f03f91c07ca:   mov    %rax,%r11
  0x00007f03f91c07cd:   add    $0x30,%r11                   ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c07d1:   cmp    0x158(%r15),%r11             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c07d8:   jae    0x00007f03f91c0cc7           ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B115: #	out( B116 ) <- in( B114 )  Freq: 0.999777
  0x00007f03f91c07de:   mov    %r11,0x148(%r15)
  0x00007f03f91c07e5:   prefetchw 0xc0(%r11)
  0x00007f03f91c07ed:   movq   $0x1,(%rax)
  0x00007f03f91c07f4:   prefetchw 0x100(%r11)
  0x00007f03f91c07fc:   movl   $0x40c30,0x8(%rax)           ;   {metadata({type array int})}
  0x00007f03f91c0803:   prefetchw 0x140(%r11)
  0x00007f03f91c080b:   movl   $0x8,0xc(%rax)
  0x00007f03f91c0812:   prefetchw 0x180(%r11)
  0x00007f03f91c081a:   mov    %r12,0x10(%rax)
  0x00007f03f91c081e:   mov    %r12,0x18(%rax)
  0x00007f03f91c0822:   mov    %r12,0x20(%rax)
  0x00007f03f91c0826:   mov    %r12,0x28(%rax)              ;*invokestatic checkFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B116: #	out( B219 B117 ) <- in( B174 B115 )  Freq: 0.999877
  0x00007f03f91c082a:   mov    0x28(%rsp),%r9               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c082f:   mov    0xc(%r9),%r11d               ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c0833:   vmovq  0x10(%r12,%r11,8),%xmm0      ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c083a:   vpxor  %ymm1,%ymm1,%ymm1
  0x00007f03f91c083e:   vpsubb %ymm0,%ymm1,%ymm1
  0x00007f03f91c0842:   vpmovsxbd %xmm1,%ymm1               ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@73 (line 44)
  0x00007f03f91c0847:   vpblendvb %ymm1,%ymm3,%ymm2,%ymm4   ;*synchronization entry
                                                            ; - jdk.incubator.vector.AbstractSpecies::maskType@-1 (line 161)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91c084d:   vmovdqu %ymm4,0x10(%rax)            ;*invokevirtual maskType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91c0852:   vmovdqu 0x60(%rsp),%ymm3
  0x00007f03f91c0858:   vptest %ymm3,%ymm1
  0x00007f03f91c085d:   setb   %bpl
  0x00007f03f91c0861:   movzbl %bpl,%ebp
  0x00007f03f91c0865:   test   %ebp,%ebp
  0x00007f03f91c0867:   jne    0x00007f03f91c1408
 ;; B117: #	out( B220 B118 ) <- in( B116 )  Freq: 0.999877
  0x00007f03f91c086d:   movabs $0x101964ea8,%r10            ;   {oop([I{0x0000000101964ea8})}
  0x00007f03f91c0877:   vmovdqu 0x10(%r10),%ymm0
  0x00007f03f91c087d:   mov    0xa8(%rsp),%r10d
  0x00007f03f91c0885:   sub    0x38(%rsp),%r10d
  0x00007f03f91c088a:   cmp    $0x8,%r10d                   ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c088e:   mov    $0x8,%r8d
  0x00007f03f91c0894:   cmovge %r8d,%r10d                   ;*invokestatic fromArray {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91c0898:   xor    %r11d,%r11d
  0x00007f03f91c089b:   test   %r10d,%r10d
  0x00007f03f91c089e:   cmovle %r11d,%r10d
  0x00007f03f91c08a2:   vmovd  %r10d,%xmm2
  0x00007f03f91c08a7:   vpbroadcastd %xmm2,%ymm2
  0x00007f03f91c08ac:   vpcmpgtd %ymm0,%ymm2,%ymm0
  0x00007f03f91c08b0:   vpxor  -0x139318(%rip),%ymm0,%ymm0        # Stub::vector_all_bits_set
                                                            ;   {external_word}
  0x00007f03f91c08b8:   vpand  %ymm1,%ymm0,%ymm0
  0x00007f03f91c08bc:   vptest %ymm3,%ymm0
  0x00007f03f91c08c1:   setne  %bpl
  0x00007f03f91c08c5:   movzbl %bpl,%ebp
  0x00007f03f91c08c9:   test   %ebp,%ebp                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c08cb:   jne    0x00007f03f91c143c           ;*invokevirtual elementType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@10 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B118: #	out( B238 B119 ) <- in( B117 )  Freq: 0.999876
  0x00007f03f91c08d1:   mov    0xc(%r9),%r10d               ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
  0x00007f03f91c08d5:   mov    0x8(%r12,%r10,8),%r11d       ; implicit exception: dispatches to 0x00007f03f91c1800
 ;; B119: #	out( B226 B120 ) <- in( B118 )  Freq: 0.999875
  0x00007f03f91c08da:   nop
  0x00007f03f91c08db:   nop
  0x00007f03f91c08dc:   nop
  0x00007f03f91c08dd:   nop
  0x00007f03f91c08de:   nop
  0x00007f03f91c08df:   nop
  0x00007f03f91c08e0:   cmp    $0x40000,%r11d               ;   {metadata({type array bool})}
  0x00007f03f91c08e7:   jne    0x00007f03f91c15d8           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B120: #	out( B159 B121 ) <- in( B119 )  Freq: 0.999875
  0x00007f03f91c08ed:   mov    0xc(%rax),%ebp               ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91c08f0:   test   %ebp,%ebp                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c08f2:   jbe    0x00007f03f91c0b5b
 ;; B121: #	out( B194 B122 ) <- in( B120 )  Freq: 0.888752
  0x00007f03f91c08f8:   lea    (%r12,%r10,8),%r9            ;*invokestatic checkFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91c08fc:   mov    0xc(%r9),%edx                ;*invokevirtual fromArray0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c0900:   test   %edx,%edx
  0x00007f03f91c0902:   jbe    0x00007f03f91c103f
 ;; B122: #	out( B194 B123 ) <- in( B121 )  Freq: 0.888751
  0x00007f03f91c0908:   mov    %ebp,%r10d
  0x00007f03f91c090b:   dec    %r10d
  0x00007f03f91c090e:   cmp    %edx,%r10d
  0x00007f03f91c0911:   jae    0x00007f03f91c103f
 ;; B123: #	out( B124 ) <- in( B122 )  Freq: 0.88875
  0x00007f03f91c0917:   movslq 0x38(%rsp),%rsi
  0x00007f03f91c091c:   mov    %rsi,%r10
  0x00007f03f91c091f:   neg    %r10
  0x00007f03f91c0922:   mov    %r10d,%r8d
  0x00007f03f91c0925:   mov    $0x7fffffff,%r11d
  0x00007f03f91c092b:   cmp    $0x7fffffff,%r10
  0x00007f03f91c0932:   cmovg  %r11d,%r8d
  0x00007f03f91c0936:   mov    $0x1,%r10d
  0x00007f03f91c093c:   cmp    %r10d,%r8d
  0x00007f03f91c093f:   mov    $0x1,%r11d
  0x00007f03f91c0945:   cmovl  %r11d,%r8d
  0x00007f03f91c0949:   cmp    %ebp,%r8d
  0x00007f03f91c094c:   cmovg  %ebp,%r8d
  0x00007f03f91c0950:   xor    %r10d,%r10d                  ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B124: #	out( B160 B125 ) <- in( B123 B129 ) Loop( B124-B129 inner pre of N1368) Freq: 1.7775
  0x00007f03f91c0953:   movslq %r10d,%rdi                   ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@70 (line 43)
  0x00007f03f91c0956:   movzbl 0x10(%r9,%rdi,1),%r11d       ;*isub {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::roundDown@3 (line 106)
                                                            ; - jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91c095c:   nop
  0x00007f03f91c095d:   nop
  0x00007f03f91c095e:   nop
  0x00007f03f91c095f:   nop
  0x00007f03f91c0960:   test   %r11d,%r11d
  0x00007f03f91c0963:   je     0x00007f03f91c0b74
 ;; B125: #	out( B178 B126 ) <- in( B124 )  Freq: 1.55525
  0x00007f03f91c0969:   cmp    %ebp,%r10d
  0x00007f03f91c096c:   jae    0x00007f03f91c0ddc           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B126: #	out( B180 B127 ) <- in( B125 )  Freq: 1.55525
  0x00007f03f91c0972:   mov    0x10(%rax,%rdi,4),%ecx       ;*ifne {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::roundDown@5 (line 106)
                                                            ; - jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91c0976:   mov    %r10d,%r11d
  0x00007f03f91c0979:   add    0x38(%rsp),%r11d
  0x00007f03f91c097e:   nop
  0x00007f03f91c097f:   nop
  0x00007f03f91c0980:   cmp    0xa8(%rsp),%r11d
  0x00007f03f91c0988:   jae    0x00007f03f91c0e1c
 ;; B127: #	out( B128 ) <- in( B126 )  Freq: 1.55525
  0x00007f03f91c098e:   add    %rsi,%rdi
  0x00007f03f91c0991:   mov    0x20(%rsp),%rbx
  0x00007f03f91c0996:   mov    %ecx,0x10(%rbx,%rdi,4)
 ;; B128: #	out( B130 B129 ) <- in( B127 B160 )  Freq: 1.77749
  0x00007f03f91c099a:   inc    %r10d
  0x00007f03f91c099d:   nop
  0x00007f03f91c099e:   nop
  0x00007f03f91c099f:   nop
  0x00007f03f91c09a0:   cmp    %r8d,%r10d
  0x00007f03f91c09a3:   jge    0x00007f03f91c09ac
 ;; B129: #	out( B124 ) <- in( B128 )  Freq: 0.888747
  0x00007f03f91c09a5:   mov    %rbx,0x20(%rsp)
  0x00007f03f91c09aa:   jmp    0x00007f03f91c0953
 ;; B130: #	out( B152 B131 ) <- in( B128 )  Freq: 0.888747
  0x00007f03f91c09ac:   movslq 0xa8(%rsp),%rcx
  0x00007f03f91c09b4:   mov    %rcx,%r11
  0x00007f03f91c09b7:   sub    %rsi,%r11
  0x00007f03f91c09ba:   mov    %r11d,%r8d
  0x00007f03f91c09bd:   cmp    %ebp,%r8d
  0x00007f03f91c09c0:   cmovg  %ebp,%r8d
  0x00007f03f91c09c4:   cmp    %ebp,%r8d
  0x00007f03f91c09c7:   cmovg  %ebp,%r8d
  0x00007f03f91c09cb:   mov    %r8d,%r11d
  0x00007f03f91c09ce:   add    $0xfffffffd,%r11d
  0x00007f03f91c09d2:   mov    $0x80000000,%edi
  0x00007f03f91c09d7:   cmp    %r11d,%r8d
  0x00007f03f91c09da:   cmovl  %edi,%r11d
  0x00007f03f91c09de:   nop
  0x00007f03f91c09df:   nop
  0x00007f03f91c09e0:   cmp    %r11d,%r10d
  0x00007f03f91c09e3:   jge    0x00007f03f91c0b05
 ;; B131: #	out( B195 B132 ) <- in( B130 )  Freq: 0.888746
  0x00007f03f91c09e9:   cmp    %edx,%r10d
  0x00007f03f91c09ec:   jae    0x00007f03f91c1074
 ;; B132: #	out( B196 B133 ) <- in( B131 )  Freq: 0.888745
  0x00007f03f91c09f2:   cmp    %ebp,%r10d
  0x00007f03f91c09f5:   jae    0x00007f03f91c1088
 ;; B133: #	out( B197 B134 ) <- in( B132 )  Freq: 0.888744
  0x00007f03f91c09fb:   movslq %r10d,%r8
  0x00007f03f91c09fe:   add    %rsi,%r8
  0x00007f03f91c0a01:   cmp    %rcx,%r8
  0x00007f03f91c0a04:   jae    0x00007f03f91c109c
 ;; B134: #	out( B198 B135 ) <- in( B133 )  Freq: 0.888744
  0x00007f03f91c0a0a:   mov    %r10d,%r8d
  0x00007f03f91c0a0d:   add    $0x3,%r8d
  0x00007f03f91c0a11:   movslq %r8d,%rdi
  0x00007f03f91c0a14:   add    %rsi,%rdi
  0x00007f03f91c0a17:   cmp    %rcx,%rdi
  0x00007f03f91c0a1a:   nop
  0x00007f03f91c0a1b:   nop
  0x00007f03f91c0a1c:   nop
  0x00007f03f91c0a1d:   nop
  0x00007f03f91c0a1e:   nop
  0x00007f03f91c0a1f:   nop
  0x00007f03f91c0a20:   jae    0x00007f03f91c10b0
 ;; B135: #	out( B199 B136 ) <- in( B134 )  Freq: 0.888743
  0x00007f03f91c0a26:   cmp    %ebp,%r8d
  0x00007f03f91c0a29:   jae    0x00007f03f91c10c4
 ;; B136: #	out( B200 B137 ) <- in( B135 )  Freq: 0.888742
  0x00007f03f91c0a2f:   cmp    %ebp,%r10d
  0x00007f03f91c0a32:   jae    0x00007f03f91c10d8
 ;; B137: #	out( B201 B138 ) <- in( B136 )  Freq: 0.888741
  0x00007f03f91c0a38:   cmp    %edx,%r10d
  0x00007f03f91c0a3b:   nop
  0x00007f03f91c0a3c:   nop
  0x00007f03f91c0a3d:   nop
  0x00007f03f91c0a3e:   nop
  0x00007f03f91c0a3f:   nop
  0x00007f03f91c0a40:   jae    0x00007f03f91c10ec
 ;; B138: #	out( B151 B139 ) <- in( B137 )  Freq: 0.88874
  0x00007f03f91c0a46:   cmp    %edx,%r8d
  0x00007f03f91c0a49:   jb     0x00007f03f91c0ad9
 ;; B139: #	out( N2963 ) <- in( B138 )  Freq: 9.00541e-07
  0x00007f03f91c0a4f:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91c0a59:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c0a5d:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c0a62:   hlt    
 ;; B140: #	out( B141 ) <- in( B148 ) top-of-loop Freq: 62.9575
  0x00007f03f91c0a63:   mov    0x1c(%rax,%rdx,4),%ecx       ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0a67:   mov    %ecx,0x1c(%rbx,%rdi,4)       ;*synchronization entry
                                                            ; - App::micro_vector_masked@-1 (line 32)
 ;; B141: #	out( B150 B142 ) <- in( B140 B149 ) top-of-loop Freq: 71.9541
  0x00007f03f91c0a6b:   add    $0x4,%r10d
  0x00007f03f91c0a6f:   cmp    %r8d,%r10d
  0x00007f03f91c0a72:   jge    0x00007f03f91c0aca           ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B142: #	out( B144 B143 ) <- in( B151 B141 ) Loop( B142-B141 inner main of N1419 strip mined) Freq: 71.9541
  0x00007f03f91c0a78:   mov    %r10d,%ecx
  0x00007f03f91c0a7b:   add    0x38(%rsp),%ecx              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0a7f:   movslq %r10d,%rdi                   ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@104 (line 255)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91c0a82:   movzbl 0x10(%r9,%rdi,1),%edx        ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91c0a88:   test   %edx,%edx
  0x00007f03f91c0a8a:   je     0x00007f03f91c0a94
 ;; B143: #	out( B144 ) <- in( B142 )  Freq: 62.9575
  0x00007f03f91c0a8c:   mov    0x10(%rax,%rdi,4),%edi       ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0a90:   mov    %edi,0x10(%rbx,%rcx,4)       ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B144: #	out( B146 B145 ) <- in( B143 B142 )  Freq: 71.9541
  0x00007f03f91c0a94:   movslq %ecx,%rdi
  0x00007f03f91c0a97:   movslq %r10d,%rdx                   ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0a9a:   movzbl 0x11(%r9,%rdx,1),%ecx        ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91c0aa0:   test   %ecx,%ecx
  0x00007f03f91c0aa2:   je     0x00007f03f91c0aac
 ;; B145: #	out( B146 ) <- in( B144 )  Freq: 62.9575
  0x00007f03f91c0aa4:   mov    0x14(%rax,%rdx,4),%ecx       ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0aa8:   mov    %ecx,0x14(%rbx,%rdi,4)       ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@0 (line 2720)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B146: #	out( B148 B147 ) <- in( B145 B144 )  Freq: 71.9541
  0x00007f03f91c0aac:   movzbl 0x12(%r9,%rdx,1),%ecx        ;*bastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@125 (line 256)
                                                            ; - App::micro_vector_masked@149 (line 51)
  0x00007f03f91c0ab2:   test   %ecx,%ecx
  0x00007f03f91c0ab4:   je     0x00007f03f91c0abe
 ;; B147: #	out( B148 ) <- in( B146 )  Freq: 62.9575
  0x00007f03f91c0ab6:   mov    0x18(%rax,%rdx,4),%ecx       ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0aba:   mov    %ecx,0x18(%rbx,%rdi,4)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@135 (line 255)
                                                            ; - App::micro_vector_masked@149 (line 51)
 ;; B148: #	out( B140 B149 ) <- in( B147 B146 )  Freq: 71.9541
  0x00007f03f91c0abe:   movzbl 0x13(%r9,%rdx,1),%ecx        ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c0ac4:   test   %ecx,%ecx                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0ac6:   jne    0x00007f03f91c0a63
 ;; B149: #	out( B141 ) <- in( B148 )  Freq: 8.99664
  0x00007f03f91c0ac8:   jmp    0x00007f03f91c0a6b           ;*invokevirtual vectorType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
 ;; B150: #	out( B152 B151 ) <- in( B141 )  Freq: 7.99678
  0x00007f03f91c0aca:   mov    0x130(%r15),%r8              ; ImmutableOopMap {r9=Oop rbx=Oop rax=Oop }
                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::stOp@53 (line 353)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0ad1:   test   %eax,(%r8)                   ;   {poll}
  0x00007f03f91c0ad4:   cmp    %r11d,%r10d
  0x00007f03f91c0ad7:   jge    0x00007f03f91c0b05           ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@163 (line 52)
 ;; B151: #	out( B142 ) <- in( B138 B150 ) Loop( B151-B150 ) Freq: 7.99678
  0x00007f03f91c0ad9:   mov    %r11d,%r8d
  0x00007f03f91c0adc:   sub    %r10d,%r8d
  0x00007f03f91c0adf:   xor    %ecx,%ecx
  0x00007f03f91c0ae1:   cmp    %r10d,%r11d
  0x00007f03f91c0ae4:   cmovl  %ecx,%r8d
  0x00007f03f91c0ae8:   cmp    $0xfa0,%r8d
  0x00007f03f91c0aef:   mov    $0xfa0,%ecx
  0x00007f03f91c0af4:   cmova  %ecx,%r8d
  0x00007f03f91c0af8:   add    %r10d,%r8d
  0x00007f03f91c0afb:   nop
  0x00007f03f91c0afc:   nop
  0x00007f03f91c0afd:   nop
  0x00007f03f91c0afe:   nop
  0x00007f03f91c0aff:   nop
  0x00007f03f91c0b00:   jmpq   0x00007f03f91c0a78
 ;; B152: #	out( B159 B153 ) <- in( B130 B150 )  Freq: 0.88874
  0x00007f03f91c0b05:   cmp    %ebp,%r10d
  0x00007f03f91c0b08:   jge    0x00007f03f91c0b5b           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B153: #	out( B154 ) <- in( B152 )  Freq: 0.44437
  0x00007f03f91c0b0e:   nop
  0x00007f03f91c0b0f:   nop                                 ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@124 (line 43)
 ;; B154: #	out( B158 B155 ) <- in( B153 B158 ) Loop( B154-B158 inner post of N1368) Freq: 0.888738
  0x00007f03f91c0b10:   movslq %r10d,%r11                   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@64 (line 43)
  0x00007f03f91c0b13:   movzbl 0x10(%r9,%r11,1),%r8d        ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c0b19:   test   %r8d,%r8d
  0x00007f03f91c0b1c:   je     0x00007f03f91c0b53
 ;; B155: #	out( B179 B156 ) <- in( B154 )  Freq: 0.777617
  0x00007f03f91c0b1e:   nop
  0x00007f03f91c0b1f:   nop
  0x00007f03f91c0b20:   cmp    %ebp,%r10d
  0x00007f03f91c0b23:   jae    0x00007f03f91c0de1           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B156: #	out( B181 B157 ) <- in( B155 )  Freq: 0.777616
  0x00007f03f91c0b29:   mov    0x10(%rax,%r11,4),%ecx       ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@116 (line 43)
  0x00007f03f91c0b2e:   mov    %r10d,%r11d
  0x00007f03f91c0b31:   add    0x38(%rsp),%r11d
  0x00007f03f91c0b36:   nop
  0x00007f03f91c0b37:   nop
  0x00007f03f91c0b38:   nop
  0x00007f03f91c0b39:   nop
  0x00007f03f91c0b3a:   nop
  0x00007f03f91c0b3b:   nop
  0x00007f03f91c0b3c:   nop
  0x00007f03f91c0b3d:   nop
  0x00007f03f91c0b3e:   nop
  0x00007f03f91c0b3f:   nop
  0x00007f03f91c0b40:   cmp    0xa8(%rsp),%r11d
  0x00007f03f91c0b48:   jae    0x00007f03f91c0e21           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B157: #	out( B158 ) <- in( B156 )  Freq: 0.777615
  0x00007f03f91c0b4e:   mov    %ecx,0x10(%rbx,%r11,4)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@124 (line 43)
 ;; B158: #	out( B154 B159 ) <- in( B157 B154 )  Freq: 0.888737
  0x00007f03f91c0b53:   inc    %r10d
  0x00007f03f91c0b56:   cmp    %ebp,%r10d                   ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0b59:   jl     0x00007f03f91c0b10           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@30 (line 37)
 ;; B159: #	out( N2963 ) <- in( B158 B152 B120 )  Freq: 0.999862
  0x00007f03f91c0b5b:   vzeroupper 
  0x00007f03f91c0b5e:   add    $0xc0,%rsp
  0x00007f03f91c0b65:   pop    %rbp
  0x00007f03f91c0b66:   cmp    0x128(%r15),%rsp             ;   {poll_return}
  0x00007f03f91c0b6d:   ja     0x00007f03f91c1864
  0x00007f03f91c0b73:   retq   
 ;; B160: #	out( B128 ) <- in( B124 )  Freq: 0.222246
  0x00007f03f91c0b74:   mov    0x20(%rsp),%rbx
  0x00007f03f91c0b79:   jmpq   0x00007f03f91c099a
 ;; B161: #	out( B86 ) <- in( B52 )  Freq: 0.111151
  0x00007f03f91c0b7e:   mov    %r14,0x20(%rsp)
  0x00007f03f91c0b83:   mov    %r13,0x38(%rsp)
  0x00007f03f91c0b88:   mov    %rdx,0x28(%rsp)
  0x00007f03f91c0b8d:   mov    %ebx,0xa8(%rsp)
  0x00007f03f91c0b94:   mov    %r8d,%r11d
  0x00007f03f91c0b97:   mov    %r10d,0x40(%rsp)
  0x00007f03f91c0b9c:   nop
  0x00007f03f91c0b9d:   nop
  0x00007f03f91c0b9e:   nop
  0x00007f03f91c0b9f:   nop
  0x00007f03f91c0ba0:   jmpq   0x00007f03f91c0388
 ;; B162: #	out( B57 ) <- in( B55 )  Freq: 0.111151
  0x00007f03f91c0ba5:   xor    %esi,%esi
  0x00007f03f91c0ba7:   jmpq   0x00007f03f91c01b2
 ;; B163: #	out( B83 ) <- in( B81 )  Freq: 0.11115
  0x00007f03f91c0bac:   xor    %esi,%esi
  0x00007f03f91c0bae:   jmpq   0x00007f03f91c0352
 ;; B164: #	out( B24 ) <- in( B8 )  Freq: 0.111111
  0x00007f03f91c0bb3:   mov    %r9,%r10
  0x00007f03f91c0bb6:   jmpq   0x00007f03f91bfef8           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B165: #	out( B243 B166 ) <- in( B5 B6 )  Freq: 0.00010103
  0x00007f03f91c0bbb:   movabs $0x800040000,%rsi            ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@6 (line 1751)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {metadata({type array bool})}
  0x00007f03f91c0bc5:   mov    %ebp,%edx                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0bc7:   nop
  0x00007f03f91c0bc8:   vzeroupper 
  0x00007f03f91c0bcb:   callq  0x00007f03f9058620           ; ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [56]=Oop }
                                                            ;*newarray {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - App::micro_vector_masked@18 (line 36)
                                                            ;   {runtime_call _new_array_Java}
 ;; B166: #	out( B8 ) <- in( B165 )  Freq: 0.000101028
  0x00007f03f91c0bd0:   mov    %rax,%r9
  0x00007f03f91c0bd3:   jmpq   0x00007f03f91bfe1a
 ;; B167: #	out( B242 B168 ) <- in( B49 B50 )  Freq: 0.000101025
  0x00007f03f91c0bd8:   mov    %r11,0x50(%rsp)
  0x00007f03f91c0bdd:   mov    %r10d,0x48(%rsp)
  0x00007f03f91c0be2:   mov    %r8d,0x3c(%rsp)
  0x00007f03f91c0be7:   mov    %r9,0x40(%rsp)
  0x00007f03f91c0bec:   mov    %ebx,0x38(%rsp)
  0x00007f03f91c0bf0:   mov    %rdx,0x30(%rsp)
  0x00007f03f91c0bf5:   mov    %r13,0x28(%rsp)
  0x00007f03f91c0bfa:   mov    %r14,0x20(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0bff:   movabs $0x800040000,%rsi            ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractVector::check@0 (line 124)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {metadata({type array bool})}
  0x00007f03f91c0c09:   mov    %r8d,%edx
  0x00007f03f91c0c0c:   vzeroupper 
  0x00007f03f91c0c0f:   callq  0x00007f03f9058620           ; ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [64]=Oop }
                                                            ;*newarray {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
                                                            ; - App::micro_vector_masked@149 (line 51)
                                                            ;   {runtime_call _new_array_Java}
 ;; B168: #	out( B52 ) <- in( B167 )  Freq: 0.000101023
  0x00007f03f91c0c14:   mov    0x20(%rsp),%r14
  0x00007f03f91c0c19:   mov    0x28(%rsp),%r13
  0x00007f03f91c0c1e:   mov    0x30(%rsp),%rdx
  0x00007f03f91c0c23:   mov    0x38(%rsp),%ebx
  0x00007f03f91c0c27:   mov    0x40(%rsp),%r9
  0x00007f03f91c0c2c:   mov    0x3c(%rsp),%r8d
  0x00007f03f91c0c31:   mov    0x48(%rsp),%r10d
  0x00007f03f91c0c36:   mov    0x50(%rsp),%r11
  0x00007f03f91c0c3b:   mov    %rax,%rsi
  0x00007f03f91c0c3e:   nop
  0x00007f03f91c0c3f:   nop
  0x00007f03f91c0c40:   jmpq   0x00007f03f91c0171
 ;; B169: #	out( B241 B170 ) <- in( B97 )  Freq: 0.000100009
  0x00007f03f91c0c45:   vmovdqu %ymm3,0x60(%rsp)
  0x00007f03f91c0c4b:   mov    %r9,0x40(%rsp)
  0x00007f03f91c0c50:   mov    %r8,0x38(%rsp)
  0x00007f03f91c0c55:   mov    %r10d,0x30(%rsp)
  0x00007f03f91c0c5a:   mov    %rbx,0x18(%rsp)
  0x00007f03f91c0c5f:   mov    %r11,%rbp                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0c62:   movabs $0x8000acb58,%rsi            ;   {metadata('jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58')}
  0x00007f03f91c0c6c:   vzeroupper 
  0x00007f03f91c0c6f:   callq  0x00007f03f9058920           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop [64]=Oop }
                                                            ;*invokevirtual allocateInstance {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - java.lang.invoke.DirectMethodHandle::allocateInstance@12 (line 522)
                                                            ; - java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@1
                                                            ; - java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
                                                            ; - jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call _new_instance_Java}
 ;; B170: #	out( B99 ) <- in( B169 )  Freq: 0.000100007
  0x00007f03f91c0c74:   mov    %rax,%rcx
  0x00007f03f91c0c77:   mov    0x18(%rsp),%rbx
  0x00007f03f91c0c7c:   nop
  0x00007f03f91c0c7d:   nop
  0x00007f03f91c0c7e:   nop
  0x00007f03f91c0c7f:   nop
  0x00007f03f91c0c80:   jmpq   0x00007f03f91c0563
 ;; B171: #	out( B240 B172 ) <- in( B107 )  Freq: 0.000100007
  0x00007f03f91c0c85:   mov    %rbx,0x18(%rsp)
  0x00007f03f91c0c8a:   rex.W pushq 0x38(%rsp)
  0x00007f03f91c0c8f:   rex.W popq 0x28(%rsp)
  0x00007f03f91c0c94:   mov    %rax,-0x8(%rsp)
  0x00007f03f91c0c99:   mov    0x30(%rsp),%eax
  0x00007f03f91c0c9d:   mov    %eax,0x38(%rsp)
  0x00007f03f91c0ca1:   mov    -0x8(%rsp),%rax
  0x00007f03f91c0ca6:   mov    %r11,%rbp                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0ca9:   movabs $0x8000acb58,%rsi            ;*invokedynamic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@26 (line 3211)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@80 (line 44)
                                                            ;   {metadata('jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58')}
  0x00007f03f91c0cb3:   nop
  0x00007f03f91c0cb4:   vzeroupper 
  0x00007f03f91c0cb7:   callq  0x00007f03f9058920           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [64]=Oop }
                                                            ;*invokevirtual allocateInstance {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - java.lang.invoke.DirectMethodHandle::allocateInstance@12 (line 522)
                                                            ; - java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@1
                                                            ; - java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
                                                            ; - jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call _new_instance_Java}
 ;; B172: #	out( B109 ) <- in( B171 )  Freq: 0.000100005
  0x00007f03f91c0cbc:   mov    %rax,%rcx
  0x00007f03f91c0cbf:   mov    %rbp,%r11
  0x00007f03f91c0cc2:   jmpq   0x00007f03f91c0712
 ;; B173: #	out( B239 B174 ) <- in( B114 )  Freq: 0.000100004
  0x00007f03f91c0cc7:   vmovdqu %ymm3,0x80(%rsp)
  0x00007f03f91c0cd0:   vmovdqu %ymm2,0x40(%rsp)            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0cd6:   movabs $0x800040c30,%rsi            ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::vspecies@0 (line 528)
                                                            ; - jdk.incubator.vector.AbstractMask::vectorSpecies@1 (line 61)
                                                            ; - jdk.incubator.vector.VectorMask::length@1 (line 154)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {metadata({type array int})}
  0x00007f03f91c0ce0:   mov    $0x8,%edx
  0x00007f03f91c0ce5:   mov    %r10,0x30(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0cea:   nop
  0x00007f03f91c0ceb:   nop
  0x00007f03f91c0cec:   vzeroupper 
  0x00007f03f91c0cef:   callq  0x00007f03f9058620           ; ImmutableOopMap {[32]=Oop [40]=Oop [48]=Oop }
                                                            ;*invokestatic blend {reexecute=1 rethrow=0 return_oop=1}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::blendTemplate@26 (line 1895)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@11 (line 376)
                                                            ; - jdk.incubator.vector.Int256Vector::blend@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::lanewise@74 (line 688)
                                                            ; - jdk.incubator.vector.IntVector::add@6 (line 1133)
                                                            ; - App::micro_vector_masked@188 (line 54)
                                                            ;   {runtime_call _new_array_Java}
 ;; B174: #	out( B116 ) <- in( B173 )  Freq: 0.000100002
  0x00007f03f91c0cf4:   vmovdqu 0x40(%rsp),%ymm2
  0x00007f03f91c0cfa:   vmovdqu 0x80(%rsp),%ymm3
  0x00007f03f91c0d03:   jmpq   0x00007f03f91c082a           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B175: #	out( N2963 ) <- in( B41 )  Freq: 3.03952e-06
  0x00007f03f91c0d08:   mov    $0xffffffe4,%esi             ;*invokestatic opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c0d0d:   mov    0x18(%rsp),%rbp
  0x00007f03f91c0d12:   mov    %r14,0x18(%rsp)
  0x00007f03f91c0d17:   mov    %rdx,0x28(%rsp)
  0x00007f03f91c0d1c:   mov    %r9,0x38(%rsp)
  0x00007f03f91c0d21:   mov    %r13,0x40(%rsp)
  0x00007f03f91c0d26:   mov    %r10d,0x34(%rsp)
  0x00007f03f91c0d2b:   mov    %r11d,0x48(%rsp)
  0x00007f03f91c0d30:   vzeroupper 
  0x00007f03f91c0d33:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [64]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@80 (line 44)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c0d38:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c0d42:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c0d46:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c0d4b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B176: #	out( N2963 ) <- in( B42 )  Freq: 3.03952e-06
  0x00007f03f91c0d4c:   mov    $0xffffffe4,%esi             ;*invokevirtual maskType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91c0d51:   mov    0x18(%rsp),%rbp
  0x00007f03f91c0d56:   mov    %r14,0x18(%rsp)
  0x00007f03f91c0d5b:   mov    %r13,0x20(%rsp)
  0x00007f03f91c0d60:   mov    %r9,0x38(%rsp)
  0x00007f03f91c0d65:   mov    %rdx,0x40(%rsp)
  0x00007f03f91c0d6a:   mov    %r10d,0x34(%rsp)
  0x00007f03f91c0d6f:   mov    %eax,0x48(%rsp)
  0x00007f03f91c0d73:   vmovdqu %ymm0,0x60(%rsp)            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0d79:   nop
  0x00007f03f91c0d7a:   nop
  0x00007f03f91c0d7b:   nop
  0x00007f03f91c0d7c:   vzeroupper 
  0x00007f03f91c0d7f:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [56]=Oop [64]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
                                                            ; - App::micro_vector_masked@92 (line 45)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c0d84:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c0d8e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c0d92:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c0d97:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B177: #	out( N2963 ) <- in( B43 )  Freq: 3.03951e-06
  0x00007f03f91c0d98:   mov    $0xffffffe4,%esi             ;*invokedynamic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91c0d9d:   mov    0x18(%rsp),%rbp
  0x00007f03f91c0da2:   mov    %r13,0x20(%rsp)
  0x00007f03f91c0da7:   mov    %rdx,0x28(%rsp)
  0x00007f03f91c0dac:   mov    %r14,0x38(%rsp)
  0x00007f03f91c0db1:   mov    %r10d,0x34(%rsp)
  0x00007f03f91c0db6:   mov    %edi,0x40(%rsp)
  0x00007f03f91c0dba:   vmovdqu %ymm0,0x60(%rsp)
  0x00007f03f91c0dc0:   vzeroupper 
  0x00007f03f91c0dc3:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
                                                            ; - App::micro_vector_masked@107 (line 46)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c0dc8:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c0dd2:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c0dd6:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c0ddb:   hlt                                 ;*invokestatic requireLengthFailed {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::requireLength@7 (line 59)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@11 (line 182)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
 ;; B178: #	out( B179 ) <- in( B125 )  Freq: 1.5759e-06
  0x00007f03f91c0ddc:   mov    0x20(%rsp),%rbx              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B179: #	out( N2963 ) <- in( B155 B178 )  Freq: 2.36385e-06
  0x00007f03f91c0de1:   mov    $0xffffffe4,%esi             ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$OperatorImpl::opCode@-1 (line 774)
                                                            ; - jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
                                                            ; - jdk.incubator.vector.IntVector::opCode@7 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c0de6:   mov    %r9,0x28(%rsp)
  0x00007f03f91c0deb:   mov    %rbx,0x30(%rsp)
  0x00007f03f91c0df0:   mov    %r10d,0x3c(%rsp)
  0x00007f03f91c0df5:   mov    %rax,0x40(%rsp)
  0x00007f03f91c0dfa:   mov    %r10d,0x48(%rsp)             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0dff:   nop
  0x00007f03f91c0e00:   vzeroupper 
  0x00007f03f91c0e03:   callq  0x00007f03f9116540           ; ImmutableOopMap {[40]=Oop [48]=Oop [64]=Oop }
                                                            ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::stOp@44 (line 355)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c0e08:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c0e12:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c0e16:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c0e1b:   hlt                                 ;*invokestatic requireLengthFailed {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorIntrinsics::requireLength@7 (line 59)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@11 (line 182)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
 ;; B180: #	out( B181 ) <- in( B126 )  Freq: 1.5759e-06
  0x00007f03f91c0e1c:   mov    0x20(%rsp),%rbx              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B181: #	out( N2963 ) <- in( B156 B180 )  Freq: 2.36384e-06
  0x00007f03f91c0e21:   mov    $0xffffffe4,%esi             ;*invokestatic checkFromIndexSize {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91c0e26:   mov    0x38(%rsp),%edi
  0x00007f03f91c0e2a:   mov    %edi,0x18(%rsp)
  0x00007f03f91c0e2e:   mov    %rax,0x20(%rsp)
  0x00007f03f91c0e33:   mov    %r9,0x28(%rsp)
  0x00007f03f91c0e38:   mov    %r10d,0x1c(%rsp)
  0x00007f03f91c0e3d:   mov    %rbx,0x30(%rsp)
  0x00007f03f91c0e42:   mov    %r11d,0x38(%rsp)
  0x00007f03f91c0e47:   mov    %ecx,0x3c(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0e4b:   nop
  0x00007f03f91c0e4c:   vzeroupper 
  0x00007f03f91c0e4f:   callq  0x00007f03f9116540           ; ImmutableOopMap {[32]=Oop [40]=Oop [48]=Oop }
                                                            ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::lambda$intoArray$82@5 (line 3006)
                                                            ; - jdk.incubator.vector.IntVector$$Lambda$67/0x00000008000ad640::apply@8
                                                            ; - jdk.incubator.vector.IntVector::stOp@45 (line 355)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c0e54:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c0e5e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c0e62:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c0e67:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B182: #	out( B5 ) <- in( B3 )  Freq: 1.01328e-06
  0x00007f03f91c0e68:   movslq %ebp,%rcx                    ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@1 (line 3208)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c0e6b:   jmpq   0x00007f03f91bfd74           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B183: #	out( B49 ) <- in( B47 )  Freq: 1.01323e-06
  0x00007f03f91c0e70:   movslq %r8d,%rcx                    ;*invokespecial fromArray0Template {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
                                                            ; - App::micro_vector_masked@92 (line 45)
  0x00007f03f91c0e73:   jmpq   0x00007f03f91c00d0           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B184: #	out( N2963 ) <- in( B2 )  Freq: 9.99999e-07
  0x00007f03f91c0e78:   mov    $0xffffffde,%esi             ;*ifnonnull {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::requireNonNull@1 (line 207)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@1 (line 1750)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c0e7d:   nop
  0x00007f03f91c0e7e:   nop
  0x00007f03f91c0e7f:   nop
  0x00007f03f91c0e80:   vzeroupper 
  0x00007f03f91c0e83:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [48]=Oop }
                                                            ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@13 (line 36)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c0e88:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c0e92:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c0e96:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c0e9b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B185: #	out( N2963 ) <- in( B29 )  Freq: 9.99971e-07
  0x00007f03f91c0e9c:   mov    $0xffffffde,%esi             ;*invokespecial compareTemplate {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c0ea1:   mov    %ebx,0x38(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0ea5:   nop
  0x00007f03f91c0ea6:   nop
  0x00007f03f91c0ea7:   nop
  0x00007f03f91c0ea8:   vzeroupper 
  0x00007f03f91c0eab:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [48]=Oop }
                                                            ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c0eb0:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c0eba:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c0ebe:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c0ec3:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B186: #	out( N2963 ) <- in( B95 )  Freq: 9.99926e-07
  0x00007f03f91c0ec4:   mov    $0xffffff45,%esi             ;*invokestatic opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c0ec9:   mov    %r8,0x50(%rsp)
  0x00007f03f91c0ece:   mov    %r9,0x58(%rsp)
  0x00007f03f91c0ed3:   mov    %r8,0x60(%rsp)
  0x00007f03f91c0ed8:   mov    %ecx,0x44(%rsp)
  0x00007f03f91c0edc:   vzeroupper 
  0x00007f03f91c0edf:   callq  0x00007f03f9116540           ; ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [56]=Oop [80]=Oop [88]=Oop [96]=Oop }
                                                            ;*lookupswitch {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::iota@17 (line 3664)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c0ee4:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c0eee:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c0ef2:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c0ef7:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B187: #	out( N2963 ) <- in( B105 )  Freq: 9.99902e-07
  0x00007f03f91c0ef8:   mov    $0xffffff45,%esi             ;*invokestatic opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::opCode@7 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c0efd:   mov    0x20(%rsp),%r9
  0x00007f03f91c0f02:   mov    %r9,0x18(%rsp)
  0x00007f03f91c0f07:   mov    %rbx,0x50(%rsp)
  0x00007f03f91c0f0c:   mov    %r8d,0x34(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0f11:   nop
  0x00007f03f91c0f12:   nop
  0x00007f03f91c0f13:   nop
  0x00007f03f91c0f14:   vzeroupper 
  0x00007f03f91c0f17:   callq  0x00007f03f9116540           ; ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop }
                                                            ;*lookupswitch {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::iota@17 (line 3664)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c0f1c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c0f26:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c0f2a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c0f2f:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B188: #	out( N2963 ) <- in( B111 )  Freq: 9.99879e-07
  0x00007f03f91c0f30:   mov    $0xffffffde,%esi             ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators::opCode@-1 (line 403)
                                                            ; - jdk.incubator.vector.IntVector::opCode@7 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c0f35:   mov    0x20(%rsp),%rbp
  0x00007f03f91c0f3a:   mov    0x38(%rsp),%r11d
  0x00007f03f91c0f3f:   mov    %r11d,0x18(%rsp)
  0x00007f03f91c0f44:   mov    %r10,0x38(%rsp)
  0x00007f03f91c0f49:   mov    %rax,0x40(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0f4e:   nop
  0x00007f03f91c0f4f:   nop
  0x00007f03f91c0f50:   vzeroupper 
  0x00007f03f91c0f53:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop }
                                                            ;*invokevirtual lanewise {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::lanewise@70 (line 688)
                                                            ; - jdk.incubator.vector.IntVector::add@6 (line 1133)
                                                            ; - App::micro_vector_masked@188 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c0f58:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c0f62:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c0f66:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c0f6b:   hlt                                 ;*getfield laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractSpecies::laneCount@1 (line 125)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B189: #	out( N2963 ) <- in( B10 B9 )  Freq: 1.80138e-06
  0x00007f03f91c0f6c:   mov    $0xffffff76,%esi             ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@6 (line 1751)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c0f71:   mov    0x18(%rsp),%rbp
  0x00007f03f91c0f76:   mov    0x20(%rsp),%r11
  0x00007f03f91c0f7b:   mov    %r11,0x18(%rsp)
  0x00007f03f91c0f80:   mov    0x28(%rsp),%r11
  0x00007f03f91c0f85:   mov    %r11,0x20(%rsp)
  0x00007f03f91c0f8a:   mov    0x30(%rsp),%r11
  0x00007f03f91c0f8f:   mov    %r11,0x28(%rsp)
  0x00007f03f91c0f94:   mov    %r9,0x30(%rsp)
  0x00007f03f91c0f99:   mov    %r10d,0x38(%rsp)             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c0f9e:   nop
  0x00007f03f91c0f9f:   nop
  0x00007f03f91c0fa0:   vzeroupper 
  0x00007f03f91c0fa3:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) App::micro_vector_masked@30 (line 37)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c0fa8:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c0fb2:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c0fb6:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c0fbb:   hlt    
 ;; B190: #	out( N2963 ) <- in( B14 )  Freq: 9.00687e-07
  0x00007f03f91c0fbc:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91c0fc6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c0fca:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c0fcf:   hlt    
 ;; B191: #	out( N2963 ) <- in( B15 )  Freq: 9.00686e-07
  0x00007f03f91c0fd0:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91c0fda:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c0fde:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c0fe3:   hlt                                 ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B192: #	out( N2963 ) <- in( B54 B53 )  Freq: 1.80121e-06
  0x00007f03f91c0fe4:   mov    $0xffffff76,%esi             ;*invokevirtual laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91c0fe9:   mov    0x18(%rsp),%rbp
  0x00007f03f91c0fee:   mov    %r14,0x18(%rsp)
  0x00007f03f91c0ff3:   mov    %r13,0x20(%rsp)
  0x00007f03f91c0ff8:   mov    %rdx,0x28(%rsp)
  0x00007f03f91c0ffd:   mov    %r10d,0x30(%rsp)
  0x00007f03f91c1002:   mov    %r9,0x38(%rsp)
  0x00007f03f91c1007:   mov    %rdi,0x40(%rsp)
  0x00007f03f91c100c:   mov    %ecx,0x34(%rsp)
  0x00007f03f91c1010:   mov    %r11,0x48(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c1015:   nop
  0x00007f03f91c1016:   nop
  0x00007f03f91c1017:   nop
  0x00007f03f91c1018:   vzeroupper 
  0x00007f03f91c101b:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop [64]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorMask::fromLong@104 (line 255)
                                                            ; - App::micro_vector_masked@149 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1020:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c102a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c102e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1033:   hlt    
 ;; B193: #	out( B79 ) <- in( B57 )  Freq: 9.00604e-07
  0x00007f03f91c1034:   mov    $0x1,%r11d
  0x00007f03f91c103a:   jmpq   0x00007f03f91c0330           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B194: #	out( N2963 ) <- in( B122 B121 )  Freq: 1.7893e-06
  0x00007f03f91c103f:   mov    $0xffffff76,%esi             ;*invokevirtual opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
                                                            ; - jdk.incubator.vector.IntVector::opCode@7 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c1044:   rex.W pushq 0x20(%rsp)
  0x00007f03f91c1049:   rex.W popq 0x18(%rsp)
  0x00007f03f91c104e:   mov    %rax,0x28(%rsp)
  0x00007f03f91c1053:   mov    %r9,0x30(%rsp)
  0x00007f03f91c1058:   vzeroupper 
  0x00007f03f91c105b:   callq  0x00007f03f9116540           ; ImmutableOopMap {[24]=Oop [40]=Oop [48]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::stOp@23 (line 353)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1060:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c106a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c106e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1073:   hlt    
 ;; B195: #	out( N2963 ) <- in( B131 )  Freq: 9.00548e-07
  0x00007f03f91c1074:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91c107e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c1082:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1087:   hlt    
 ;; B196: #	out( N2963 ) <- in( B132 )  Freq: 9.00547e-07
  0x00007f03f91c1088:   movabs $0x7f040557a968,%rdi         ;   {external_word}
  0x00007f03f91c1092:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c1096:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c109b:   hlt    
 ;; B197: #	out( N2963 ) <- in( B133 )  Freq: 9.00546e-07
  0x00007f03f91c109c:   movabs $0x7f040557a968,%rdi         ;   {external_word}
  0x00007f03f91c10a6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c10aa:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c10af:   hlt    
 ;; B198: #	out( N2963 ) <- in( B134 )  Freq: 9.00545e-07
  0x00007f03f91c10b0:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91c10ba:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c10be:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c10c3:   hlt    
 ;; B199: #	out( N2963 ) <- in( B135 )  Freq: 9.00544e-07
  0x00007f03f91c10c4:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91c10ce:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c10d2:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c10d7:   hlt    
 ;; B200: #	out( N2963 ) <- in( B136 )  Freq: 9.00543e-07
  0x00007f03f91c10d8:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91c10e2:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c10e6:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c10eb:   hlt    
 ;; B201: #	out( N2963 ) <- in( B137 )  Freq: 9.00542e-07
  0x00007f03f91c10ec:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91c10f6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c10fa:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c10ff:   hlt    
 ;; B202: #	out( N2963 ) <- in( B58 )  Freq: 8.88801e-07
  0x00007f03f91c1100:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91c110a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c110e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1113:   hlt    
 ;; B203: #	out( N2963 ) <- in( B59 )  Freq: 8.888e-07
  0x00007f03f91c1114:   movabs $0x7f040557a078,%rdi         ;   {external_word}
  0x00007f03f91c111e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c1122:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1127:   hlt    
 ;; B204: #	out( B207 ) <- in( B34 )  Freq: 7.49966e-07
  0x00007f03f91c1128:   mov    0x30(%rsp),%rdx
  0x00007f03f91c112d:   jmp    0x00007f03f91c113b
 ;; B205: #	out( B207 ) <- in( B35 )  Freq: 7.59924e-07
  0x00007f03f91c112f:   mov    0x30(%rsp),%rdx
  0x00007f03f91c1134:   jmp    0x00007f03f91c113b
 ;; B206: #	out( B207 ) <- in( B33 )  Freq: 7.59925e-07
  0x00007f03f91c1136:   mov    0x30(%rsp),%rdx              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B207: #	out( N2963 ) <- in( B39 B206 B204 B205 B208 B37 B38 )  Freq: 5.27963e-06
  0x00007f03f91c113b:   mov    $0xffffff76,%esi             ;*invokestatic opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c1140:   mov    0x18(%rsp),%rbp
  0x00007f03f91c1145:   mov    %r14,0x18(%rsp)
  0x00007f03f91c114a:   mov    %r13,0x20(%rsp)
  0x00007f03f91c114f:   mov    %rdx,0x28(%rsp)
  0x00007f03f91c1154:   mov    %ecx,0x30(%rsp)
  0x00007f03f91c1158:   vzeroupper 
  0x00007f03f91c115b:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) App::micro_vector_masked@70 (line 43)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1160:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c116a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c116e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1173:   hlt    
 ;; B208: #	out( B207 ) <- in( B36 )  Freq: 7.49964e-07
  0x00007f03f91c1174:   mov    0x30(%rsp),%rdx
  0x00007f03f91c1179:   jmp    0x00007f03f91c113b           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B209: #	out( N2963 ) <- in( B30 )  Freq: 4.99985e-07
  0x00007f03f91c117b:   mov    $0xffffff45,%esi             ;*invokestatic opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c1180:   mov    %r8d,0x38(%rsp)
  0x00007f03f91c1185:   mov    %ebx,0x3c(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c1189:   nop
  0x00007f03f91c118a:   nop
  0x00007f03f91c118b:   nop
  0x00007f03f91c118c:   vzeroupper 
  0x00007f03f91c118f:   callq  0x00007f03f9116540           ; ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop }
                                                            ;*ifne {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorIntrinsics::roundDown@5 (line 106)
                                                            ; - jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
                                                            ; - App::micro_vector_masked@65 (line 43)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1194:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c119e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c11a2:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c11a7:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B210: #	out( N2963 ) <- in( B91 )  Freq: 4.99964e-07
  0x00007f03f91c11a8:   mov    $0xffffff45,%esi             ;*invokestatic opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c11ad:   mov    0x18(%rsp),%rbp
  0x00007f03f91c11b2:   mov    0x20(%rsp),%r11
  0x00007f03f91c11b7:   mov    %r11,0x18(%rsp)
  0x00007f03f91c11bc:   mov    0x28(%rsp),%r11
  0x00007f03f91c11c1:   mov    %r11,0x20(%rsp)
  0x00007f03f91c11c6:   mov    0x38(%rsp),%r11
  0x00007f03f91c11cb:   mov    %r11,0x30(%rsp)
  0x00007f03f91c11d0:   mov    %rax,-0x8(%rsp)
  0x00007f03f91c11d5:   mov    0x40(%rsp),%eax
  0x00007f03f91c11d9:   mov    %eax,0x2c(%rsp)
  0x00007f03f91c11dd:   mov    -0x8(%rsp),%rax
  0x00007f03f91c11e2:   mov    %rax,-0x8(%rsp)
  0x00007f03f91c11e7:   mov    0x40(%rsp),%eax
  0x00007f03f91c11eb:   mov    %eax,0x38(%rsp)
  0x00007f03f91c11ef:   mov    -0x8(%rsp),%rax
  0x00007f03f91c11f4:   mov    %r8,0x50(%rsp)
  0x00007f03f91c11f9:   mov    %r9,0x58(%rsp)               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c11fe:   nop
  0x00007f03f91c11ff:   nop
  0x00007f03f91c1200:   vzeroupper 
  0x00007f03f91c1203:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop }
                                                            ;*iflt {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::fromArray@7 (line 2721)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1208:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c1212:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c1216:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c121b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B211: #	out( N2963 ) <- in( B45 )  Freq: 4.76816e-07
  0x00007f03f91c121c:   mov    $0xffffff45,%esi             ;*invokevirtual opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
                                                            ; - jdk.incubator.vector.IntVector::opCode@7 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c1221:   mov    0x18(%rsp),%rbp
  0x00007f03f91c1226:   mov    %r14,0x18(%rsp)
  0x00007f03f91c122b:   mov    %r13,0x20(%rsp)
  0x00007f03f91c1230:   mov    %rdx,0x28(%rsp)
  0x00007f03f91c1235:   mov    %r10d,0x30(%rsp)
  0x00007f03f91c123a:   mov    %r9,0x38(%rsp)
  0x00007f03f91c123f:   mov    %r8d,0x40(%rsp)
  0x00007f03f91c1244:   mov    %r11,0x48(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c1249:   nop
  0x00007f03f91c124a:   nop
  0x00007f03f91c124b:   nop
  0x00007f03f91c124c:   vzeroupper 
  0x00007f03f91c124f:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop }
                                                            ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorMask::fromLong@15 (line 242)
                                                            ; - App::micro_vector_masked@149 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1254:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c125e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c1262:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1267:   hlt    
 ;; B212: #	out( N2963 ) <- in( B46 )  Freq: 4.76816e-07
  0x00007f03f91c1268:   cmp    %rbp,%r11
  0x00007f03f91c126b:   mov    $0xffffffff,%ebp
  0x00007f03f91c1270:   jl     0x00007f03f91c127a
  0x00007f03f91c1272:   setne  %bpl
  0x00007f03f91c1276:   movzbl %bpl,%ebp                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c127a:   mov    $0xffffff45,%esi             ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91c127f:   mov    %r14,0x20(%rsp)
  0x00007f03f91c1284:   mov    %r13,0x28(%rsp)
  0x00007f03f91c1289:   mov    %rdx,0x30(%rsp)
  0x00007f03f91c128e:   mov    %r10d,0x38(%rsp)
  0x00007f03f91c1293:   mov    %r9,0x40(%rsp)
  0x00007f03f91c1298:   mov    %r8d,0x3c(%rsp)
  0x00007f03f91c129d:   mov    %r11,0x48(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c12a2:   nop
  0x00007f03f91c12a3:   nop
  0x00007f03f91c12a4:   vzeroupper 
  0x00007f03f91c12a7:   callq  0x00007f03f9116540           ; ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [64]=Oop }
                                                            ;*ifne {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorMask::fromLong@40 (line 247)
                                                            ; - App::micro_vector_masked@149 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c12ac:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c12b6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c12ba:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c12bf:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B213: #	out( N2963 ) <- in( B93 )  Freq: 4.76802e-07
  0x00007f03f91c12c0:   mov    $0xffffff45,%esi             ;*invokestatic opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::opCode@7 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c12c5:   mov    %r8,0x50(%rsp)
  0x00007f03f91c12ca:   mov    %r9,0x58(%rsp)               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c12cf:   nop
  0x00007f03f91c12d0:   vzeroupper 
  0x00007f03f91c12d3:   callq  0x00007f03f9116540           ; ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [56]=Oop [80]=Oop [88]=Oop }
                                                            ;*if_icmpgt {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::fromArray@20 (line 2721)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c12d8:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c12e2:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c12e6:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c12eb:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B214: #	out( N2963 ) <- in( B94 )  Freq: 4.76802e-07
  0x00007f03f91c12ec:   mov    $0xffffff45,%esi             ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::opCode@0 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c12f1:   mov    %r8,0x50(%rsp)
  0x00007f03f91c12f6:   mov    %r8,0x60(%rsp)
  0x00007f03f91c12fb:   mov    %ecx,0x44(%rsp)
  0x00007f03f91c12ff:   mov    %r9,0x68(%rsp)
  0x00007f03f91c1304:   vzeroupper 
  0x00007f03f91c1307:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [56]=Oop [80]=Oop [96]=Oop [104]=Oop }
                                                            ;*if_acmpne {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::iota@6 (line 3662)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c130c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c1316:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c131a:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c131f:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B215: #	out( N2963 ) <- in( B96 )  Freq: 4.76802e-07
  0x00007f03f91c1320:   mov    $0xffffff45,%esi             ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91c1325:   mov    %r8,0x50(%rsp)
  0x00007f03f91c132a:   mov    %r9,0x58(%rsp)
  0x00007f03f91c132f:   mov    %ecx,0x44(%rsp)
  0x00007f03f91c1333:   vmovdqu %ymm0,0x60(%rsp)            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c1339:   nop
  0x00007f03f91c133a:   nop
  0x00007f03f91c133b:   nop
  0x00007f03f91c133c:   vzeroupper 
  0x00007f03f91c133f:   callq  0x00007f03f9116540           ; ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [56]=Oop [80]=Oop [88]=Oop }
                                                            ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@150 (line 240)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1344:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c134e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c1352:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1357:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B216: #	out( N2963 ) <- in( B103 )  Freq: 4.76791e-07
  0x00007f03f91c1358:   mov    $0xffffff45,%esi             ;*invokestatic opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::opCode@7 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c135d:   mov    0x20(%rsp),%r8
  0x00007f03f91c1362:   mov    %r8,0x18(%rsp)
  0x00007f03f91c1367:   mov    %rbx,0x50(%rsp)
  0x00007f03f91c136c:   vzeroupper 
  0x00007f03f91c136f:   callq  0x00007f03f9116540           ; ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop }
                                                            ;*if_icmpgt {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::fromArray@20 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1374:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c137e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c1382:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1387:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B217: #	out( N2963 ) <- in( B104 )  Freq: 4.76791e-07
  0x00007f03f91c1388:   mov    $0xffffff45,%esi             ;*invokestatic opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c138d:   mov    0x20(%rsp),%r9
  0x00007f03f91c1392:   mov    %r9,0x18(%rsp)
  0x00007f03f91c1397:   mov    %r8d,0x34(%rsp)
  0x00007f03f91c139c:   mov    %rbx,0x60(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c13a1:   nop
  0x00007f03f91c13a2:   nop
  0x00007f03f91c13a3:   nop
  0x00007f03f91c13a4:   vzeroupper 
  0x00007f03f91c13a7:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=NarrowOop [24]=Oop [40]=Oop [56]=Oop [64]=Oop [96]=Oop }
                                                            ;*if_acmpne {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector$IntSpecies::iota@6 (line 3662)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c13ac:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c13b6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c13ba:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c13bf:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B218: #	out( N2963 ) <- in( B106 )  Freq: 4.7679e-07
  0x00007f03f91c13c0:   mov    $0xffffff45,%esi             ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91c13c5:   mov    0x20(%rsp),%r9
  0x00007f03f91c13ca:   mov    %r9,0x18(%rsp)
  0x00007f03f91c13cf:   mov    %rax,0x38(%rsp)
  0x00007f03f91c13d4:   mov    %rdx,0x48(%rsp)
  0x00007f03f91c13d9:   mov    %rbx,0x50(%rsp)
  0x00007f03f91c13de:   mov    %r8d,0x34(%rsp)
  0x00007f03f91c13e3:   vmovdqu %ymm1,0x60(%rsp)            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c13e9:   nop
  0x00007f03f91c13ea:   nop
  0x00007f03f91c13eb:   nop
  0x00007f03f91c13ec:   vzeroupper 
  0x00007f03f91c13ef:   callq  0x00007f03f9116540           ; ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [72]=Oop [80]=Oop }
                                                            ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@150 (line 240)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c13f4:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c13fe:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c1402:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1407:   hlt    
 ;; B219: #	out( N2963 ) <- in( B116 )  Freq: 4.76779e-07
  0x00007f03f91c1408:   mov    $0xffffff45,%esi
  0x00007f03f91c140d:   mov    0x20(%rsp),%r10
  0x00007f03f91c1412:   mov    %r10,0x18(%rsp)
  0x00007f03f91c1417:   vmovdqu %ymm4,0x40(%rsp)            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c141d:   nop
  0x00007f03f91c141e:   nop
  0x00007f03f91c141f:   nop
  0x00007f03f91c1420:   vzeroupper 
  0x00007f03f91c1423:   callq  0x00007f03f9116540           ; ImmutableOopMap {[24]=Oop [40]=Oop }
                                                            ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::intoArray@4 (line 3000)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1428:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c1432:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c1436:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c143b:   hlt    
 ;; B220: #	out( N2963 ) <- in( B117 )  Freq: 4.76778e-07
  0x00007f03f91c143c:   vmovdqu %ymm0,%ymm1                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c1440:   mov    $0xffffff45,%esi             ;*invokevirtual maskType {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91c1445:   mov    0x20(%rsp),%r10
  0x00007f03f91c144a:   mov    %r10,0x18(%rsp)
  0x00007f03f91c144f:   vmovdqu %ymm1,0x40(%rsp)
  0x00007f03f91c1455:   vmovdqu %ymm4,0x60(%rsp)            ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c145b:   nop
  0x00007f03f91c145c:   vzeroupper 
  0x00007f03f91c145f:   callq  0x00007f03f9116540           ; ImmutableOopMap {[24]=Oop [40]=Oop }
                                                            ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::checkIndexByLane@150 (line 240)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1464:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c146e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c1472:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1477:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B221: #	out( N2963 ) <- in( B26 )  Freq: 1e-35
  0x00007f03f91c1478:   mov    $0xffffffde,%esi             ;*invokevirtual check {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c147d:   mov    0x18(%rsp),%rbp
  0x00007f03f91c1482:   mov    0x20(%rsp),%r10
  0x00007f03f91c1487:   mov    %r10,0x18(%rsp)
  0x00007f03f91c148c:   mov    0x28(%rsp),%r10
  0x00007f03f91c1491:   mov    %r10,0x20(%rsp)
  0x00007f03f91c1496:   mov    0x30(%rsp),%r10
  0x00007f03f91c149b:   mov    %r10,0x28(%rsp)
  0x00007f03f91c14a0:   mov    %rax,0x30(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c14a5:   nop
  0x00007f03f91c14a6:   nop
  0x00007f03f91c14a7:   nop
  0x00007f03f91c14a8:   vzeroupper 
  0x00007f03f91c14ab:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c14b0:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c14ba:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c14be:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c14c3:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B222: #	out( N2963 ) <- in( B88 )  Freq: 1e-35
  0x00007f03f91c14c4:   mov    $0xffffffde,%esi             ;*invokevirtual opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
                                                            ; - jdk.incubator.vector.IntVector::opCode@7 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c14c9:   mov    0x18(%rsp),%rbp
  0x00007f03f91c14ce:   mov    0x20(%rsp),%r10
  0x00007f03f91c14d3:   mov    %r10,0x18(%rsp)
  0x00007f03f91c14d8:   mov    0x38(%rsp),%r10
  0x00007f03f91c14dd:   mov    %r10,0x20(%rsp)
  0x00007f03f91c14e2:   mov    %rax,0x38(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c14e7:   nop
  0x00007f03f91c14e8:   vzeroupper 
  0x00007f03f91c14eb:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c14f0:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c14fa:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c14fe:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1503:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B223: #	out( N2963 ) <- in( B90 )  Freq: 1e-35
  0x00007f03f91c1504:   mov    $0xffffffde,%esi             ;*invokestatic opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::opCode@7 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c1509:   mov    0x40(%rsp),%r10d
  0x00007f03f91c150e:   mov    %r10d,0x34(%rsp)
  0x00007f03f91c1513:   mov    %r8,0x48(%rsp)
  0x00007f03f91c1518:   vzeroupper 
  0x00007f03f91c151b:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [56]=Oop [72]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1520:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c152a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c152e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1533:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B224: #	out( N2963 ) <- in( B101 )  Freq: 1e-35
  0x00007f03f91c1534:   mov    $0xffffffde,%esi             ;*invokevirtual laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91c1539:   mov    0x20(%rsp),%rbp
  0x00007f03f91c153e:   mov    0x30(%rsp),%r8d
  0x00007f03f91c1543:   mov    0x28(%rsp),%r11
  0x00007f03f91c1548:   mov    %r11,0x20(%rsp)
  0x00007f03f91c154d:   mov    %r8d,0x1c(%rsp)
  0x00007f03f91c1552:   mov    %rax,0x28(%rsp)
  0x00007f03f91c1557:   mov    %r10d,0x44(%rsp)
  0x00007f03f91c155c:   vzeroupper 
  0x00007f03f91c155f:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop [68]=NarrowOop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1564:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c156e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c1572:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1577:   hlt    
 ;; B225: #	out( N2963 ) <- in( B113 )  Freq: 1e-35
  0x00007f03f91c1578:   mov    $0xffffff66,%esi
  0x00007f03f91c157d:   movabs $0x800000000,%r11
  0x00007f03f91c1587:   add    %r8,%r11
  0x00007f03f91c158a:   mov    0x78(%r11),%r11              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c158e:   mov    (%r11),%rbp                  ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91c1591:   mov    0x20(%rsp),%r11
  0x00007f03f91c1596:   mov    %r11,0x18(%rsp)
  0x00007f03f91c159b:   mov    0x38(%rsp),%r8d
  0x00007f03f91c15a0:   mov    %r8d,0x20(%rsp)
  0x00007f03f91c15a5:   mov    %r10,0x40(%rsp)
  0x00007f03f91c15aa:   mov    %rax,0x50(%rsp)
  0x00007f03f91c15af:   mov    %r10,0x58(%rsp)
  0x00007f03f91c15b4:   mov    %rax,0x60(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c15b9:   nop
  0x00007f03f91c15ba:   nop
  0x00007f03f91c15bb:   nop
  0x00007f03f91c15bc:   vzeroupper 
  0x00007f03f91c15bf:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [64]=Oop [80]=Oop [88]=Oop [96]=Oop }
                                                            ;*if_acmpne {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractVector::sameSpecies@8 (line 133)
                                                            ; - jdk.incubator.vector.AbstractVector::check@2 (line 124)
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@7 (line 602)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::lanewise@70 (line 688)
                                                            ; - jdk.incubator.vector.IntVector::add@6 (line 1133)
                                                            ; - App::micro_vector_masked@188 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c15c4:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c15ce:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c15d2:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c15d7:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B226: #	out( N2963 ) <- in( B119 )  Freq: 1e-35
  0x00007f03f91c15d8:   mov    $0xffffffde,%esi             ;*synchronization entry
                                                            ; - jdk.incubator.vector.IntVector::opCode@-1 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c15dd:   mov    0x20(%rsp),%rbp
  0x00007f03f91c15e2:   mov    %rax,0x20(%rsp)
  0x00007f03f91c15e7:   mov    %r10d,0x1c(%rsp)
  0x00007f03f91c15ec:   vzeroupper 
  0x00007f03f91c15ef:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [28]=NarrowOop [32]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@4 (line 569)
                                                            ; - jdk.incubator.vector.IntVector::stOp@10 (line 352)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c15f4:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c15fe:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c1602:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1607:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B227: #	out( N2963 ) <- in( B1 )  Freq: 1.01328e-06
  0x00007f03f91c1608:   mov    $0xfffffff6,%esi             ;*ifnonnull {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::requireNonNull@1 (line 207)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@1 (line 1750)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c160d:   nop
  0x00007f03f91c160e:   nop
  0x00007f03f91c160f:   nop
  0x00007f03f91c1610:   vzeroupper 
  0x00007f03f91c1613:   callq  0x00007f03f9116540           ; ImmutableOopMap {}
                                                            ;*invokeinterface length {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@13 (line 36)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1618:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c1622:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c1626:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c162b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B228: #	out( N2963 ) <- in( B25 )  Freq: 1.01325e-06
  0x00007f03f91c162c:   mov    $0xfffffff4,%esi             ;*ifne {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractVector::check@5 (line 124)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c1631:   mov    0x18(%rsp),%rbp
  0x00007f03f91c1636:   mov    0x20(%rsp),%r10
  0x00007f03f91c163b:   mov    %r10,0x18(%rsp)
  0x00007f03f91c1640:   mov    0x28(%rsp),%r10
  0x00007f03f91c1645:   mov    %r10,0x20(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c164a:   nop
  0x00007f03f91c164b:   nop
  0x00007f03f91c164c:   vzeroupper 
  0x00007f03f91c164f:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1654:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c165e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c1662:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1667:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B229: #	out( N2963 ) <- in( B27 )  Freq: 1.01325e-06
  0x00007f03f91c1668:   mov    $0xfffffff6,%esi             ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractVector::check@14 (line 127)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c166d:   nop
  0x00007f03f91c166e:   nop
  0x00007f03f91c166f:   nop
  0x00007f03f91c1670:   vzeroupper 
  0x00007f03f91c1673:   callq  0x00007f03f9116540           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@64 (line 43)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1678:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c1682:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c1686:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c168b:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B230: #	out( N2963 ) <- in( B28 )  Freq: 1.01325e-06
  0x00007f03f91c168c:   mov    $0xfffffff6,%esi             ;*invokestatic opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c1691:   mov    %ebx,%ebp                    ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c1693:   nop
  0x00007f03f91c1694:   vzeroupper 
  0x00007f03f91c1697:   callq  0x00007f03f9116540           ; ImmutableOopMap {}
                                                            ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c169c:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c16a6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c16aa:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c16af:   hlt    
 ;; B231: #	out( N2963 ) <- in( B87 )  Freq: 1.01321e-06
  0x00007f03f91c16b0:   mov    $0xfffffff4,%esi
  0x00007f03f91c16b5:   mov    0x18(%rsp),%rbp
  0x00007f03f91c16ba:   mov    0x20(%rsp),%r10
  0x00007f03f91c16bf:   mov    %r10,0x18(%rsp)
  0x00007f03f91c16c4:   vzeroupper 
  0x00007f03f91c16c7:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
                                                            ; - jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
                                                            ; - jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
                                                            ; - App::micro_vector_masked@149 (line 51)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c16cc:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c16d6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c16da:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c16df:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B232: #	out( N2963 ) <- in( B89 )  Freq: 1.01321e-06
  0x00007f03f91c16e0:   mov    $0xfffffff4,%esi             ;*invokevirtual opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
                                                            ; - jdk.incubator.vector.IntVector::opCode@7 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c16e5:   mov    0x18(%rsp),%rbp
  0x00007f03f91c16ea:   mov    0x20(%rsp),%r10
  0x00007f03f91c16ef:   mov    %r10,0x18(%rsp)
  0x00007f03f91c16f4:   mov    0x28(%rsp),%r10
  0x00007f03f91c16f9:   mov    %r10,0x20(%rsp)
  0x00007f03f91c16fe:   mov    0x40(%rsp),%r11d
  0x00007f03f91c1703:   mov    0x38(%rsp),%r10
  0x00007f03f91c1708:   mov    %r10,0x30(%rsp)
  0x00007f03f91c170d:   mov    %r11d,0x2c(%rsp)
  0x00007f03f91c1712:   mov    %r8,0x40(%rsp)               ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c1717:   nop
  0x00007f03f91c1718:   vzeroupper 
  0x00007f03f91c171b:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1720:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c172a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c172e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1733:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B233: #	out( N2963 ) <- in( B92 )  Freq: 1.01321e-06
  0x00007f03f91c1734:   mov    $0xfffffff6,%esi             ;*ifne {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractVector::check@5 (line 124)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c1739:   nop
  0x00007f03f91c173a:   nop
  0x00007f03f91c173b:   nop
  0x00007f03f91c173c:   vzeroupper 
  0x00007f03f91c173f:   callq  0x00007f03f9116540           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@163 (line 52)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1744:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c174e:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c1752:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1757:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B234: #	out( N2963 ) <- in( B100 )  Freq: 1.01318e-06
  0x00007f03f91c1758:   mov    $0xfffffff4,%esi             ;*invokevirtual opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
                                                            ; - jdk.incubator.vector.IntVector::opCode@7 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c175d:   mov    0x20(%rsp),%rbp
  0x00007f03f91c1762:   mov    0x28(%rsp),%r10
  0x00007f03f91c1767:   mov    %r10,0x20(%rsp)
  0x00007f03f91c176c:   mov    0x30(%rsp),%r11d
  0x00007f03f91c1771:   mov    %r11d,0x1c(%rsp)             ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c1776:   nop
  0x00007f03f91c1777:   nop
  0x00007f03f91c1778:   vzeroupper 
  0x00007f03f91c177b:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop [56]=Oop [64]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1780:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c178a:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c178e:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c1793:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B235: #	out( N2963 ) <- in( B102 )  Freq: 1.01318e-06
  0x00007f03f91c1794:   mov    $0xfffffff6,%esi             ;*invokevirtual laneCount {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
                                                            ; - App::micro_vector_masked@52 (line 40)
  0x00007f03f91c1799:   nop
  0x00007f03f91c179a:   nop
  0x00007f03f91c179b:   nop
  0x00007f03f91c179c:   vzeroupper 
  0x00007f03f91c179f:   callq  0x00007f03f9116540           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
                                                            ; - App::micro_vector_masked@177 (line 53)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c17a4:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c17ae:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c17b2:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c17b7:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B236: #	out( N2963 ) <- in( B110 )  Freq: 1.01316e-06
  0x00007f03f91c17b8:   mov    $0xfffffff6,%esi             ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators::opCode@0 (line 403)
                                                            ; - jdk.incubator.vector.IntVector::opCode@7 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c17bd:   mov    %rax,%rbp
  0x00007f03f91c17c0:   vzeroupper 
  0x00007f03f91c17c3:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [40]=Oop }
                                                            ;*invokevirtual add {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@188 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c17c8:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c17d2:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c17d6:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c17db:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B237: #	out( N2963 ) <- in( B112 )  Freq: 1.01316e-06
  0x00007f03f91c17dc:   mov    $0xffffff5e,%esi             ;*invokeinterface loopBound {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@65 (line 43)
  0x00007f03f91c17e1:   mov    %r10,%rbp
  0x00007f03f91c17e4:   vzeroupper 
  0x00007f03f91c17e7:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop }
                                                            ;*invokevirtual check {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::lanewiseTemplate@7 (line 602)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
                                                            ; - jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
                                                            ; - jdk.incubator.vector.IntVector::lanewise@70 (line 688)
                                                            ; - jdk.incubator.vector.IntVector::add@6 (line 1133)
                                                            ; - App::micro_vector_masked@188 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c17ec:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c17f6:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c17fa:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c17ff:   hlt                                 ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
 ;; B238: #	out( N2963 ) <- in( B118 )  Freq: 1.01315e-06
  0x00007f03f91c1800:   mov    $0xfffffff4,%esi             ;*invokestatic opCode {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.IntVector::opCode@7 (line 62)
                                                            ; - jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@5 (line 357)
                                                            ; - jdk.incubator.vector.Int256Vector::compare@3 (line 41)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
                                                            ; - jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
                                                            ; - jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
                                                            ; - App::micro_vector_masked@163 (line 52)
  0x00007f03f91c1805:   mov    0x20(%rsp),%rbp
  0x00007f03f91c180a:   mov    %rax,0x20(%rsp)              ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
  0x00007f03f91c180f:   nop
  0x00007f03f91c1810:   vzeroupper 
  0x00007f03f91c1813:   callq  0x00007f03f9116540           ; ImmutableOopMap {rbp=Oop [32]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Int256Vector$Int256Mask::getBits@4 (line 569)
                                                            ; - jdk.incubator.vector.IntVector::stOp@10 (line 352)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00007f03f91c1818:   movabs $0x7f04053e27b8,%rdi         ;   {external_word}
  0x00007f03f91c1822:   and    $0xfffffffffffffff0,%rsp
  0x00007f03f91c1826:   callq  0x00007f0404ba7ff4           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007f03f91c182b:   hlt                                 ;*invokedynamic {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B239: #	out( B250 ) <- in( B173 )  Freq: 1.00004e-09
  0x00007f03f91c182c:   mov    %rax,%rsi
  0x00007f03f91c182f:   jmpq   0x00007f03f91c1854
 ;; B240: #	out( B247 ) <- in( B171 )  Freq: 1.00007e-09
  0x00007f03f91c1834:   jmp    0x00007f03f91c1847           ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
                                                            ; - App::micro_vector_masked@52 (line 40)
 ;; B241: #	out( B245 ) <- in( B169 )  Freq: 1.00009e-09
  0x00007f03f91c1836:   jmp    0x00007f03f91c1842           ;*getfield SPECIES {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@46 (line 40)
 ;; B242: #	out( B250 ) <- in( B167 )  Freq: 1.01025e-09
  0x00007f03f91c1838:   mov    %rax,%rsi
  0x00007f03f91c183b:   jmp    0x00007f03f91c1854           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@30 (line 37)
 ;; B243: #	out( B250 ) <- in( B165 )  Freq: 1.0103e-09
  0x00007f03f91c183d:   mov    %rax,%rsi
  0x00007f03f91c1840:   jmp    0x00007f03f91c1854           ;*getfield SPECIES {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@46 (line 40)
 ;; B244: #	out( B245 ) <- in( B99 )  Freq: 9.99925e-06
 ;; B245: #	out( B250 ) <- in( B241 B244 )  Freq: 1.00002e-05
  0x00007f03f91c1842:   mov    %rax,%rsi
  0x00007f03f91c1845:   jmp    0x00007f03f91c1854
 ;; B246: #	out( B247 ) <- in( B109 )  Freq: 9.999e-06
 ;; B247: #	out( B250 ) <- in( B240 B246 )  Freq: 1e-05
  0x00007f03f91c1847:   mov    %rax,%rsi
  0x00007f03f91c184a:   jmp    0x00007f03f91c1854           ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@30 (line 37)
 ;; B248: #	out( B250 ) <- in( B24 )  Freq: 9.99994e-06
  0x00007f03f91c184c:   mov    %rax,%rsi
  0x00007f03f91c184f:   jmp    0x00007f03f91c1854           ;*getfield SPECIES {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@46 (line 40)
 ;; B249: #	out( B250 ) <- in( B86 )  Freq: 9.99951e-06
  0x00007f03f91c1851:   mov    %rax,%rsi                    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - App::micro_vector_masked@30 (line 37)
 ;; B250: #	out( N2963 ) <- in( B243 B248 B239 B247 B245 B249 B242 )  Freq: 4.00027e-05
  0x00007f03f91c1854:   vzeroupper 
  0x00007f03f91c1857:   add    $0xc0,%rsp
  0x00007f03f91c185e:   pop    %rbp
  0x00007f03f91c185f:   jmpq   0x00007f03f90549a0           ;*synchronization entry
                                                            ; - jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
                                                            ; - jdk.incubator.vector.Int256Vector::vec@1 (line 117)
                                                            ; - jdk.incubator.vector.IntVector::stOp@1 (line 351)
                                                            ; - jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
                                                            ; - App::micro_vector_masked@196 (line 54)
                                                            ;   {runtime_call _rethrow_Java}
  0x00007f03f91c1864:   movabs $0x7f03f91c0b66,%r10         ;   {internal_word}
  0x00007f03f91c186e:   mov    %r10,0x3e8(%r15)
  0x00007f03f91c1875:   jmpq   0x00007f03f9117220           ;   {runtime_call SafepointBlob}
  0x00007f03f91c187a:   hlt    
  0x00007f03f91c187b:   hlt    
  0x00007f03f91c187c:   hlt    
  0x00007f03f91c187d:   hlt    
  0x00007f03f91c187e:   hlt    
  0x00007f03f91c187f:   hlt    
[Stub Code]
  0x00007f03f91c1880:   movabs $0x0,%rbx                    ;   {no_reloc}
  0x00007f03f91c188a:   jmpq   0x00007f03f91c188a           ;   {runtime_call}
  0x00007f03f91c188f:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00007f03f91c1899:   jmpq   0x00007f03f91c1899           ;   {runtime_call}
  0x00007f03f91c189e:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00007f03f91c18a8:   jmpq   0x00007f03f91c18a8           ;   {runtime_call}
  0x00007f03f91c18ad:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00007f03f91c18b7:   jmpq   0x00007f03f91c18b7           ;   {runtime_call}
[Exception Handler]
  0x00007f03f91c18bc:   jmpq   0x00007f03f905c6a0           ;   {runtime_call ExceptionBlob}
[Deopt Handler Code]
  0x00007f03f91c18c1:   callq  0x00007f03f91c18c6
  0x00007f03f91c18c6:   subq   $0x5,(%rsp)
  0x00007f03f91c18cb:   jmpq   0x00007f03f9116860           ;   {runtime_call DeoptimizationBlob}
--------------------------------------------------------------------------------
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007f03f91c18d0:   0x000000010188fcd0 a 'java/lang/Class'{0x000000010188fcd0} = 'jdk/incubator/vector/IntMaxVector'
  0x00007f03f91c18d8:   0x0000000101c2c488 a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
  0x00007f03f91c18e0:   0x0000000101c20690 a 'java/lang/invoke/DirectMethodHandle$Constructor'{0x0000000101c20690}
  0x00007f03f91c18e8:   0x000000010188b520 a 'java/lang/Class'{0x000000010188b520} = 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91c18f0:   0x000000010188b5c0 a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
  0x00007f03f91c18f8:   0x00000001010002b0 a 'java/lang/Class'{0x00000001010002b0} = int
  0x00007f03f91c1900:   0x0000000101c25820 a 'jdk/incubator/vector/IntVector$$Lambda$64+0x00000008000acfa0'{0x0000000101c25820}
  0x00007f03f91c1908:   0x0000000101985d48 a 'jdk/incubator/vector/VectorOperators$AssociativeImpl'{0x0000000101985d48}
  0x00007f03f91c1910:   0x000000010110df10 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000010110df10}
  0x00007f03f91c1918:   0x0000000101127628 a 'java/lang/Class'{0x0000000101127628} = 'java/lang/invoke/LambdaForm$MH+0x0000000800005800'
  0x00007f03f91c1920:   0x0000000101be9bd0 a 'java/lang/Class'{0x0000000101be9bd0} = 'java/lang/invoke/LambdaForm$MH+0x00000008000d5000'
  0x00007f03f91c1928:   0x0000000101be2d48 a 'java/lang/Class'{0x0000000101be2d48} = 'java/lang/invoke/LambdaForm$DMH+0x00000008000d4800'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007f03f91c1930:   0x00007f03b08119b8 {method} {0x00007f03b08119b8} 'micro_vector_masked' '([I[I[I)V' in 'App'
  0x00007f03f91c1938:   0x00007f03b0a34658 {method} {0x00007f03b0a34658} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[ZI)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
  0x00007f03f91c1940:   0x00007f03b0812e38 {method} {0x00007f03b0812e38} 'intoArray' '([IILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91c1948:   0x00007f03b081d998 {method} {0x00007f03b081d998} 'stOp' '(Ljava/lang/Object;ILjdk/incubator/vector/VectorMask;Ljdk/incubator/vector/IntVector$FStOp;)V' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91c1950:   0x00007f03b0a4a240 {method} {0x00007f03b0a4a240} 'vec' '()[I' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91c1958:   0x00007f03b053f890 {method} {0x00007f03b053f890} 'getPayload' '()Ljava/lang/Object;' in 'jdk/internal/vm/vector/VectorSupport$VectorPayload'
  0x00007f03f91c1960:   0x00007f03b0812728 {method} {0x00007f03b0812728} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91c1968:   0x00007f03b0a184c0 {method} {0x00007f03b0a184c0} 'dummyVector' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
  0x00007f03f91c1970:   0x00007f03b0a1eb98 {method} {0x00007f03b0a1eb98} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007f03f91c1978:   0x0000000800094b80 'jdk/incubator/vector/IntVector$IntSpecies'
  0x00007f03f91c1980:   0x00007f03b0a1e098 {method} {0x00007f03b0a1e098} 'loopBound' '(I)I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007f03f91c1988:   0x00007f03b0a84398 {method} {0x00007f03b0a84398} 'roundDown' '(II)I' in 'jdk/incubator/vector/VectorIntrinsics'
  0x00007f03f91c1990:   0x00007f03b0a84090 {method} {0x00007f03b0a84090} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
  0x00007f03f91c1998:   0x00007f03b0560ca0 {method} {0x00007f03b0560ca0} 'checkIndex' '(II)I' in 'java/util/Objects'
  0x00007f03f91c19a0:   0x00007f03b0a4d300 {method} {0x00007f03b0a4d300} 'fromArray0' '([II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91c19a8:   0x00007f03b0813798 {method} {0x00007f03b0813798} 'fromArray0Template' '([II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91c19b0:   0x0000000800040000 {type array bool}
  0x00007f03f91c19b8:   0x00007f03b0a34820 {method} {0x00007f03b0a34820} 'fromLong' '(Ljdk/incubator/vector/VectorSpecies;J)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
  0x00007f03f91c19c0:   0x00007f03b0a34518 {method} {0x00007f03b0a34518} 'fromValues' '(Ljdk/incubator/vector/VectorSpecies;[Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
  0x00007f03f91c19c8:   0x00007f03b081f8d8 {method} {0x00007f03b081f8d8} 'add' '(Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91c19d0:   0x00007f03b0a4e770 {method} {0x00007f03b0a4e770} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91c19d8:   0x00007f03b0a4b6d0 {method} {0x00007f03b0a4b6d0} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/Int256Vector;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91c19e0:   0x00007f03b081e8d8 {method} {0x00007f03b081e8d8} 'lanewiseTemplate' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91c19e8:   0x0000000800098750 'jdk/incubator/vector/Int256Vector$Int256Mask'
  0x00007f03f91c19f0:   0x0000000800098110 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91c19f8:   0x00007f03b0812d08 {method} {0x00007f03b0812d08} 'intoArray' '([II)V' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91c1a00:   0x00007f03b0a17a40 {method} {0x00007f03b0a17a40} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/IntVector$IntSpecies'
  0x00007f03f91c1a08:   0x00000008000acb58 'jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58'
  0x00007f03f91c1a10:   0x00007f03b0812880 {method} {0x00007f03b0812880} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[IILjdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91c1a18:   0x00007f03b080aa78 {method} {0x00007f03b080aa78} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800005800'
  0x00007f03f91c1a20:   0x0000000800040c30 {type array int}
  0x00007f03f91c1a28:   0x00007f03b0a1dac8 {method} {0x00007f03b0a1dac8} 'maskType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007f03f91c1a30:   0x00007f03b0a000f8 {method} {0x00007f03b0a000f8} 'checkMaskFromIndexSize' '(ILjdk/incubator/vector/IntVector$IntSpecies;Ljdk/incubator/vector/VectorMask;II)V' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91c1a38:   0x00007f03b0a33148 {method} {0x00007f03b0a33148} 'checkIndexByLane' '(IILjdk/incubator/vector/Vector;I)V' in 'jdk/incubator/vector/AbstractMask'
  0x00007f03f91c1a40:   0x00007f03b0a332d8 {method} {0x00007f03b0a332d8} 'checkIndex0' '(IILjdk/incubator/vector/Vector;I)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
  0x00007f03f91c1a48:   0x00007f03b0a4e418 {method} {0x00007f03b0a4e418} 'compare' '(Ljdk/incubator/vector/VectorOperators$Comparison;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91c1a50:   0x00007f03b0a4c040 {method} {0x00007f03b0a4c040} 'compare' '(Ljdk/incubator/vector/VectorOperators$Comparison;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/Int256Vector$Int256Mask;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91c1a58:   0x00007f03b08157f8 {method} {0x00007f03b08157f8} 'compareTemplate' '(Ljava/lang/Class;Ljdk/incubator/vector/VectorOperators$Comparison;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91c1a60:   0x00007f03b0a0a230 {method} {0x00007f03b0a0a230} 'check' '(Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractVector'
  0x00007f03f91c1a68:   0x00007f03b0b25e80 {method} {0x00007f03b0b25e80} 'linkToTargetMethod' '(Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x00000008000d5000'
  0x00007f03f91c1a70:   0x00007f03b0b24f00 {method} {0x00007f03b0b24f00} 'newInvokeSpecial' '(Ljava/lang/Object;Ljava/lang/Object;I)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$DMH+0x00000008000d4800'
  0x00007f03f91c1a78:   0x00007f03b04820b0 {method} {0x00007f03b04820b0} 'allocateInstance' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/DirectMethodHandle'
  0x00007f03f91c1a80:   0x00007f03b0a34418 {method} {0x00007f03b0a34418} 'length' '()I' in 'jdk/incubator/vector/VectorMask'
  0x00007f03f91c1a88:   0x00007f03b0a320f8 {method} {0x00007f03b0a320f8} 'vectorSpecies' '()Ljdk/incubator/vector/VectorSpecies;' in 'jdk/incubator/vector/AbstractMask'
  0x00007f03f91c1a90:   0x00007f03b0a52f90 {method} {0x00007f03b0a52f90} 'vspecies' '()Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/Int256Vector$Int256Mask'
  0x00007f03f91c1a98:   0x00007f03b081faa8 {method} {0x00007f03b081faa8} 'add' '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91c1aa0:   0x00007f03b081ea38 {method} {0x00007f03b081ea38} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91c1aa8:   0x00007f03b0a4e190 {method} {0x00007f03b0a4e190} 'blend' '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91c1ab0:   0x00007f03b0a4c320 {method} {0x00007f03b0a4c320} 'blend' '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/Int256Vector;' in 'jdk/incubator/vector/Int256Vector'
  0x00007f03f91c1ab8:   0x00007f03b0816170 {method} {0x00007f03b0816170} 'blendTemplate' '(Ljava/lang/Class;Ljdk/incubator/vector/IntVector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91c1ac0:   0x00007f03b0a83e80 {method} {0x00007f03b0a83e80} 'requireLength' '(II)V' in 'jdk/incubator/vector/VectorIntrinsics'
  0x00007f03f91c1ac8:   0x00007f03b081c2c8 {method} {0x00007f03b081c2c8} 'opCode' '(Ljdk/incubator/vector/VectorOperators$Operator;)I' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91c1ad0:   0x00007f03b0a146b8 {method} {0x00007f03b0a146b8} 'opCode' '(Ljdk/incubator/vector/VectorOperators$Operator;II)I' in 'jdk/incubator/vector/VectorOperators'
  0x00007f03f91c1ad8:   0x00007f03b0aeee40 {method} {0x00007f03b0aeee40} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007f03f91c1ae0:   0x00007f03b0baad20 {method} {0x00007f03b0baad20} 'apply' '(Ljava/lang/Object;III)V' in 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'
  0x00007f03f91c1ae8:   0x00007f03b0a04120 {method} {0x00007f03b0a04120} 'lambda$intoArray$82' '([IIII)V' in 'jdk/incubator/vector/IntVector'
  0x00007f03f91c1af0:   0x00007f03b05606d8 {method} {0x00007f03b05606d8} 'requireNonNull' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/util/Objects'
  0x00007f03f91c1af8:   0x00007f03b0a18ea8 {method} {0x00007f03b0a18ea8} 'iota' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
  0x00007f03f91c1b00:   0x00007f03b0a1d690 {method} {0x00007f03b0a1d690} 'laneCount' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007f03f91c1b08:   0x00007f03b0a0a350 {method} {0x00007f03b0a0a350} 'sameSpecies' '(Ljdk/incubator/vector/Vector;)Z' in 'jdk/incubator/vector/AbstractVector'
  0x00007f03f91c1b10:   0x00007f03b0a522f0 {method} {0x00007f03b0a522f0} 'getBits' '()[Z' in 'jdk/incubator/vector/Int256Vector$Int256Mask'
  0x00007f03f91c1b18:   0x00007f03b0a1d5c0 {method} {0x00007f03b0a1d5c0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  0x00007f03f91c1b20:   0x00000008000a2b78 'jdk/incubator/vector/VectorOperators$AssociativeImpl'
  0x00007f03f91c1b28:   0x00007f03b0aef2a8 {method} {0x00007f03b0aef2a8} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007f03f91c1b30:   0x00007f03b0aeef18 {method} {0x00007f03b0aeef18} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
  0x00007f03f91c1b38:   0x00007f03b0a118b0 {method} {0x00007f03b0a118b0} 'find' '(Ljdk/incubator/vector/VectorOperators$Operator;ILjava/util/function/IntFunction;)Ljava/lang/Object;' in 'jdk/incubator/vector/VectorOperators$ImplCache'
  0x00007f03f91c1b40:   0x00000008000a37e8 'jdk/incubator/vector/VectorOperators$ComparisonImpl'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007f03f91bfcff offset=ffffffff bits=0):
PcDesc(pc=0x00007f03f91bfd2f offset=2f bits=0):   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91bfd43 offset=43 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91bfd46 offset=46 bits=0):   jdk.incubator.vector.AbstractSpecies::dummyVector@6 (line 296)
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91bfd52 offset=52 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91bfd5c offset=5c bits=0):   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91bfd61 offset=61 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91bfd65 offset=65 bits=0):   jdk.incubator.vector.VectorIntrinsics::roundDown@4 (line 106)
   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91bfd71 offset=71 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91bfd74 offset=74 bits=0):   java.util.Objects::checkIndex@3 (line 359)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91bfd8c offset=8c bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91bfd93 offset=93 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91bfda4 offset=a4 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91bfdab offset=ab bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91bfdb1 offset=b1 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91bfe1d offset=11d bits=0):   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91bfeb6 offset=1b6 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91bfec0 offset=1c0 bits=0):   java.util.Objects::checkIndex@3 (line 359)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91bfec7 offset=1c7 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91bfece offset=1ce bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91bfed5 offset=1d5 bits=1):   App::micro_vector_masked@42 (line 37)  reexecute=true
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: reg r9 [18],oop
    - l8: reg rbx [6],int
    - l9: empty
PcDesc(pc=0x00007f03f91bfee5 offset=1e5 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91bfee8 offset=1e8 bits=0):   jdk.incubator.vector.IntVector::lanewiseTemplate@-1 (line 601)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   jdk.incubator.vector.IntVector::add@5 (line 1096)
   App::micro_vector_masked@101 (line 46)
PcDesc(pc=0x00007f03f91bfef3 offset=1f3 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91bfef8 offset=1f8 bits=0):   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91bff65 offset=265 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91bff70 offset=270 bits=4):   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@52 (line 40)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91bff9b offset=29b bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91bff9f offset=29f bits=0):   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91bffac offset=2ac bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91bffb6 offset=2b6 bits=0):   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91bffba offset=2ba bits=0):   java.util.Objects::checkIndex@3 (line 359)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91bffff offset=2ff bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0003 offset=303 bits=0):   App::micro_vector_masked@70 (line 43)
PcDesc(pc=0x00007f03f91c0032 offset=332 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c003d offset=33d bits=0):   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c0049 offset=349 bits=0):   java.util.Objects::checkIndex@3 (line 359)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c0059 offset=359 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0060 offset=360 bits=0):   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c0069 offset=369 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0070 offset=370 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c0077 offset=377 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c007a offset=37a bits=1):   App::micro_vector_masked@124 (line 43)  reexecute=true
   Locals
    - l0: stack[24],oop
    - l1: reg r14 [28],oop
    - l2: reg r13 [26],oop
    - l3: reg rdx [4],oop
    - l4: reg r10 [20],int
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c00cd offset=3cd bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c00d0 offset=3d0 bits=0):   java.util.Objects::checkIndex@3 (line 359)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c00dd offset=3dd bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c00e4 offset=3e4 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c00f5 offset=3f5 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c0107 offset=407 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c010d offset=40d bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c0177 offset=477 bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c01ad offset=4ad bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c01b2 offset=4b2 bits=0):   jdk.incubator.vector.IntVector::intoArray@17 (line 2963)
   App::micro_vector_masked@107 (line 46)
PcDesc(pc=0x00007f03f91c01b6 offset=4b6 bits=0):   jdk.incubator.vector.IntVector::intoArray@12 (line 2961)
   App::micro_vector_masked@107 (line 46)
PcDesc(pc=0x00007f03f91c01f0 offset=4f0 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c01f6 offset=4f6 bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c01f9 offset=4f9 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c01fc offset=4fc bits=0):   jdk.incubator.vector.IntVector$IntSpecies::elementType@-1 (line 3476)
   jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91c0201 offset=501 bits=0):   jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91c0206 offset=506 bits=0):   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91c020b offset=50b bits=0):   App::micro_vector_masked@113 (line 43)
PcDesc(pc=0x00007f03f91c0210 offset=510 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91c024d offset=54d bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0252 offset=552 bits=0):   jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91c026d offset=56d bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0272 offset=572 bits=0):   jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91c0297 offset=597 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c029d offset=59d bits=0):   App::micro_vector_masked@116 (line 43)
PcDesc(pc=0x00007f03f91c02ad offset=5ad bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c02cb offset=5cb bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c02d2 offset=5d2 bits=1):   jdk.incubator.vector.VectorMask::fromLong@135 (line 255)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: reg xmm0 [48],oop
    - l4: empty
    - l5: 0
    - l6: reg rbp [10],long
    - l7: reg rdi [14],oop
    - l8: reg r11 [22],int
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: stack[24],oop
    - l1: reg r14 [28],oop
    - l2: reg r13 [26],oop
    - l3: reg rdx [4],oop
    - l4: reg xmm3 [96],int
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c0335 offset=635 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0338 offset=638 bits=0):   java.util.Objects::checkIndex@3 (line 359)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
   App::micro_vector_masked@107 (line 46)
PcDesc(pc=0x00007f03f91c034d offset=64d bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0352 offset=652 bits=0):   java.util.Objects::checkIndex@3 (line 359)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
   App::micro_vector_masked@107 (line 46)
PcDesc(pc=0x00007f03f91c0365 offset=665 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0388 offset=688 bits=0):   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91c038f offset=68f bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c03f4 offset=6f4 bits=4):   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[56],oop
    - l3: stack[40],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c0407 offset=707 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0410 offset=710 bits=0):   jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c0415 offset=715 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0419 offset=719 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91c042c offset=72c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0436 offset=736 bits=0):   App::micro_vector_masked@64 (line 43)
PcDesc(pc=0x00007f03f91c0451 offset=751 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0455 offset=755 bits=0):   java.util.Objects::checkIndex@3 (line 359)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91c0466 offset=766 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c046a offset=76a bits=0):   java.util.Objects::checkIndex@3 (line 359)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91c0476 offset=776 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c047a offset=77a bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91c0492 offset=792 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0496 offset=796 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c04a0 offset=7a0 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c04a8 offset=7a8 bits=0):   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91c04e4 offset=7e4 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c050b offset=80b bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c0512 offset=812 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0518 offset=818 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c0563 offset=863 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c05ac offset=8ac bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c05b0 offset=8b0 bits=0):   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@42 (line 74)
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c05b5 offset=8b5 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c05b9 offset=8b9 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@10 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91c05c3 offset=8c3 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c05cc offset=8cc bits=4):   jdk.incubator.vector.IntVector::fromArray@64 (line 2728)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[48]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
PcDesc(pc=0x00007f03f91c05d1 offset=8d1 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c05d5 offset=8d5 bits=0):   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c05f2 offset=8f2 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c05fa offset=8fa bits=0):   jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c05fe offset=8fe bits=0):   jdk.incubator.vector.AbstractSpecies::dummyVector@6 (line 296)
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91c0612 offset=912 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0615 offset=915 bits=0):   jdk.incubator.vector.AbstractSpecies::dummyVector@6 (line 296)
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91c062c offset=92c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c062f offset=92f bits=0):   jdk.incubator.vector.IntVector$IntSpecies::elementType@-1 (line 3476)
   jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c0647 offset=947 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c064a offset=94a bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c0664 offset=964 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c066c offset=96c bits=0):   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91c0697 offset=997 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c069b offset=99b bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91c06b0 offset=9b0 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c06c4 offset=9c4 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c06cb offset=9cb bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c06d1 offset=9d1 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c0712 offset=a12 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c0758 offset=a58 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c075c offset=a5c bits=0):   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c0761 offset=a61 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0765 offset=a65 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@14 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91c076f offset=a6f bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0778 offset=a78 bits=4):   jdk.incubator.vector.IntVector::fromArray@64 (line 2728)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
    - l4: stack[56]
    - l5: stack[64],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[40],oop
PcDesc(pc=0x00007f03f91c078b offset=a8b bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0791 offset=a91 bits=0):   App::micro_vector_masked@-1 (line 32)
PcDesc(pc=0x00007f03f91c07a7 offset=aa7 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c07ad offset=aad bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c07b1 offset=ab1 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@20 (line 3211)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c07b5 offset=ab5 bits=0):   java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@0
   jdk.incubator.vector.IntVector::fromArray0Template@26 (line 3211)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c07bc offset=abc bits=0):   App::micro_vector_masked@73 (line 44)
PcDesc(pc=0x00007f03f91c07d1 offset=ad1 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c07d8 offset=ad8 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c07de offset=ade bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c082a offset=b2a bits=0):   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c082f offset=b2f bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0833 offset=b33 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c083a offset=b3a bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0847 offset=b47 bits=0):   App::micro_vector_masked@73 (line 44)
PcDesc(pc=0x00007f03f91c084d offset=b4d bits=0):   jdk.incubator.vector.AbstractSpecies::maskType@-1 (line 161)
   jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c0852 offset=b52 bits=0):   jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c088e offset=b8e bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0898 offset=b98 bits=0):   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91c08cb offset=bcb bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c08d1 offset=bd1 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@10 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c08d5 offset=bd5 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91c08ed offset=bed bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c08f0 offset=bf0 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91c08f2 offset=bf2 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c08fc offset=bfc bits=0):   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c0900 offset=c00 bits=0):   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c0953 offset=c53 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0956 offset=c56 bits=0):   App::micro_vector_masked@70 (line 43)
PcDesc(pc=0x00007f03f91c095c offset=c5c bits=0):   jdk.incubator.vector.VectorIntrinsics::roundDown@3 (line 106)
   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91c0972 offset=c72 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0976 offset=c76 bits=0):   jdk.incubator.vector.VectorIntrinsics::roundDown@5 (line 106)
   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91c0a67 offset=d67 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0a6b offset=d6b bits=0):   App::micro_vector_masked@-1 (line 32)
PcDesc(pc=0x00007f03f91c0a78 offset=d78 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c0a7f offset=d7f bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0a82 offset=d82 bits=0):   jdk.incubator.vector.VectorMask::fromLong@104 (line 255)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91c0a88 offset=d88 bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91c0a90 offset=d90 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0a94 offset=d94 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c0a9a offset=d9a bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0aa0 offset=da0 bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91c0aa8 offset=da8 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0aac offset=dac bits=0):   jdk.incubator.vector.IntVector::fromArray@0 (line 2720)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c0ab2 offset=db2 bits=0):   jdk.incubator.vector.VectorMask::fromLong@125 (line 256)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91c0aba offset=dba bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0abe offset=dbe bits=0):   jdk.incubator.vector.VectorMask::fromLong@135 (line 255)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91c0ac4 offset=dc4 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c0ac6 offset=dc6 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0aca offset=dca bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c0ad1 offset=dd1 bits=1):   jdk.incubator.vector.IntVector::stOp@53 (line 353)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rbx [6],oop
    - l2: stack[56]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: reg rax [0],oop
    - l6: reg r9 [18],oop
    - l7: reg r10 [20],int
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c0ad9 offset=dd9 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c0b0e offset=e0e bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0b10 offset=e10 bits=0):   App::micro_vector_masked@124 (line 43)
PcDesc(pc=0x00007f03f91c0b13 offset=e13 bits=0):   App::micro_vector_masked@64 (line 43)
PcDesc(pc=0x00007f03f91c0b19 offset=e19 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c0b29 offset=e29 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0b2e offset=e2e bits=0):   App::micro_vector_masked@116 (line 43)
PcDesc(pc=0x00007f03f91c0b4e offset=e4e bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0b53 offset=e53 bits=0):   App::micro_vector_masked@124 (line 43)
PcDesc(pc=0x00007f03f91c0b59 offset=e59 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0b5b offset=e5b bits=0):   App::micro_vector_masked@30 (line 37)
PcDesc(pc=0x00007f03f91c0bbb offset=ebb bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0bc5 offset=ec5 bits=0):   jdk.incubator.vector.IntVector::compareTemplate@6 (line 1751)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c0bc7 offset=ec7 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0bd0 offset=ed0 bits=4):   App::micro_vector_masked@18 (line 36)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c0bff offset=eff bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0c09 offset=f09 bits=0):   jdk.incubator.vector.AbstractVector::check@0 (line 124)
   jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c0c14 offset=f14 bits=4):   jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: stack[64],oop
    - l4: empty
    - l5: 0
    - l6: stack[80],long
    - l7: empty
    - l8: empty
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c0c62 offset=f62 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0c74 offset=f74 bits=4):   java.lang.invoke.DirectMethodHandle::allocateInstance@12 (line 522)
   Locals
    - l0: empty
    - l1: empty
   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@1
   Locals
    - l0: a 'java/lang/invoke/DirectMethodHandle$Constructor'{0x0000000101c20690}
    - l1: stack[24],oop
    - l2: stack[48]
    - l3: empty
    - l4: empty
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: stack[64],oop
    - @1: stack[56],oop
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[48]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
PcDesc(pc=0x00007f03f91c0ca9 offset=fa9 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0cb3 offset=fb3 bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@26 (line 3211)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@80 (line 44)
PcDesc(pc=0x00007f03f91c0cbc offset=fbc bits=4):   java.lang.invoke.DirectMethodHandle::allocateInstance@12 (line 522)
   Locals
    - l0: empty
    - l1: empty
   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@1
   Locals
    - l0: a 'java/lang/invoke/DirectMethodHandle$Constructor'{0x0000000101c20690}
    - l1: reg rbp [10],oop
    - l2: stack[48]
    - l3: empty
    - l4: empty
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: stack[24],oop
    - @1: stack[40],oop
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
    - l4: stack[48]
    - l5: stack[64],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[40],oop
PcDesc(pc=0x00007f03f91c0cd6 offset=fd6 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0ce0 offset=fe0 bits=0):   jdk.incubator.vector.Int256Vector$Int256Mask::vspecies@0 (line 528)
   jdk.incubator.vector.AbstractMask::vectorSpecies@1 (line 61)
   jdk.incubator.vector.VectorMask::length@1 (line 154)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c0cea offset=fea bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0cf4 offset=ff4 bits=5):   jdk.incubator.vector.IntVector::blendTemplate@26 (line 1895)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000010188b520} = 'jdk/incubator/vector/Int256Vector'
    - @1: a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @2: a 'java/lang/Class'{0x00000001010002b0} = int
    - @3: 8
    - @4: stack[48],oop
    - @5: obj[912]
    - @6: stack[40],oop
    - @7: a 'jdk/incubator/vector/IntVector$$Lambda$64+0x00000008000acfa0'{0x0000000101c25820}
   jdk.incubator.vector.Int256Vector::blend@11 (line 376)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::lanewise@74 (line 688)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   jdk.incubator.vector.IntVector::add@6 (line 1133)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   App::micro_vector_masked@188 (line 54)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
    - l4: stack[56]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[40],oop
   Objects
    - 912: jdk.incubator.vector.Int256Vector stack[128]Wrong location type 7
PcDesc(pc=0x00007f03f91c0d08 offset=1008 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0d0d offset=100d bits=0):   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c0d38 offset=1038 bits=0):   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[52]
    - @1: stack[72]
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   Locals
    - l0: stack[56],oop
    - l1: stack[64],oop
    - l2: empty
    - l3: empty
   App::micro_vector_masked@80 (line 44)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[64],oop
    - l3: stack[40],oop
    - l4: stack[52]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c0d4c offset=104c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0d51 offset=1051 bits=0):   jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c0d79 offset=1079 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0d84 offset=1084 bits=0):   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[52]
    - @1: stack[72]
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   Locals
    - l0: stack[56],oop
    - l1: stack[64],oop
    - l2: empty
    - l3: empty
   App::micro_vector_masked@92 (line 45)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[64],oop
    - l4: stack[52]
    - l5: obj[1202]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 1202: jdk.incubator.vector.Int256Vector stack[96]Wrong location type 7
PcDesc(pc=0x00007f03f91c0d98 offset=1098 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0d9d offset=109d bits=0):   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c0dc8 offset=10c8 bits=0):   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[52]
    - @1: stack[64]
    - @2: NULL
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
   Locals
    - l0: obj[1258]
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
   App::micro_vector_masked@107 (line 46)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: stack[52]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 1258: jdk.incubator.vector.Int256Vector stack[96]Wrong location type 7
PcDesc(pc=0x00007f03f91c0ddc offset=10dc bits=0):   jdk.incubator.vector.VectorIntrinsics::requireLength@7 (line 59)
   jdk.incubator.vector.VectorMask::fromValues@11 (line 182)
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91c0de1 offset=10e1 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0de6 offset=10e6 bits=0):   jdk.incubator.vector.VectorOperators$OperatorImpl::opCode@-1 (line 774)
   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c0dff offset=10ff bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0e08 offset=1108 bits=0):   jdk.incubator.vector.IntVector::stOp@44 (line 355)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[56]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[64],oop
    - l6: stack[40],oop
    - l7: stack[60]
   Expression stack
    - @0: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - @1: stack[48],oop
    - @2: stack[56]
    - @3: stack[72]
    - @4: stack[64],oop
    - @5: stack[60]
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c0e1c offset=111c bits=0):   jdk.incubator.vector.VectorIntrinsics::requireLength@7 (line 59)
   jdk.incubator.vector.VectorMask::fromValues@11 (line 182)
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   App::micro_vector_masked@149 (line 51)
PcDesc(pc=0x00007f03f91c0e21 offset=1121 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0e26 offset=1126 bits=0):   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c0e4b offset=114b bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0e54 offset=1154 bits=0):   jdk.incubator.vector.IntVector::lambda$intoArray$82@5 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: stack[48],oop
    - @1: stack[56]
    - @2: stack[60]
   jdk.incubator.vector.IntVector$$Lambda$67/0x00000008000ad640::apply@8
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::stOp@45 (line 355)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[24]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[32],oop
    - l6: stack[40],oop
    - l7: stack[28]
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c0e68 offset=1168 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0e6b offset=116b bits=0):   jdk.incubator.vector.IntVector::fromArray0Template@1 (line 3208)
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c0e70 offset=1170 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0e73 offset=1173 bits=0):   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
   App::micro_vector_masked@92 (line 45)
PcDesc(pc=0x00007f03f91c0e78 offset=1178 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0e7d offset=117d bits=0):   java.util.Objects::requireNonNull@1 (line 207)
   jdk.incubator.vector.IntVector::compareTemplate@1 (line 1750)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c0e88 offset=1188 bits=0):   App::micro_vector_masked@13 (line 36)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
PcDesc(pc=0x00007f03f91c0e9c offset=119c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0ea1 offset=11a1 bits=0):   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c0ea5 offset=11a5 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0eb0 offset=11b0 bits=0):   App::micro_vector_masked@65 (line 43)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],narrowoop
    - @2: stack[56]
PcDesc(pc=0x00007f03f91c0ec4 offset=11c4 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0ec9 offset=11c9 bits=0):   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c0ee4 offset=11e4 bits=1):   jdk.incubator.vector.IntVector$IntSpecies::iota@17 (line 3664)  reexecute=true
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],int
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[80],oop
    - @1: stack[64]
    - @2: stack[68]
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[64]
    - l3: stack[96],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91c0ef8 offset=11f8 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0efd offset=11fd bits=0):   jdk.incubator.vector.IntVector::opCode@7 (line 62)
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c0f11 offset=1211 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0f1c offset=121c bits=1):   jdk.incubator.vector.IntVector$IntSpecies::iota@17 (line 3664)  reexecute=true
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],int
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[56],oop
    - @1: stack[48]
    - @2: stack[52]
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[48]
    - l3: stack[56],oop
    - l4: stack[80],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: stack[48]
    - l5: stack[64],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
PcDesc(pc=0x00007f03f91c0f30 offset=1230 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0f35 offset=1235 bits=0):   jdk.incubator.vector.VectorOperators::opCode@-1 (line 403)
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c0f4e offset=124e bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0f58 offset=1258 bits=0):   jdk.incubator.vector.IntVector::lanewise@70 (line 688)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: stack[40],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: stack[56],oop
    - @1: stack[56],oop
    - @2: a 'jdk/incubator/vector/VectorOperators$AssociativeImpl'{0x0000000101985d48}
    - @3: stack[64],oop
   jdk.incubator.vector.IntVector::add@6 (line 1133)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   App::micro_vector_masked@188 (line 54)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[24]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[40],oop
PcDesc(pc=0x00007f03f91c0f6c offset=126c bits=0):   jdk.incubator.vector.AbstractSpecies::laneCount@1 (line 125)
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c0f71 offset=1271 bits=0):   jdk.incubator.vector.IntVector::compareTemplate@6 (line 1751)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c0f9e offset=129e bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c0fa8 offset=12a8 bits=1):   App::micro_vector_masked@30 (line 37)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: stack[48],oop
    - l8: 0
    - l9: empty
   Expression stack
    - @0: 0
    - @1: stack[56]
PcDesc(pc=0x00007f03f91c0fe4 offset=12e4 bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c0fe9 offset=12e9 bits=0):   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c1015 offset=1315 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1020 offset=1320 bits=1):   jdk.incubator.vector.VectorMask::fromLong@104 (line 255)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: stack[56],oop
    - l4: empty
    - l5: 0
    - l6: stack[72],long
    - l7: stack[64],oop
    - l8: 0
   Expression stack
    - @0: 0
    - @1: stack[52]
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: stack[48]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c103f offset=133f bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1044 offset=1344 bits=0):   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c1060 offset=1360 bits=1):   jdk.incubator.vector.IntVector::stOp@23 (line 353)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: stack[56]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[40],oop
    - l6: stack[48],oop
    - l7: 0
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c113b offset=143b bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1140 offset=1440 bits=0):   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c1160 offset=1460 bits=1):   App::micro_vector_masked@70 (line 43)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: 0
    - @1: stack[48]
PcDesc(pc=0x00007f03f91c117b offset=147b bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1180 offset=1480 bits=0):   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c1189 offset=1489 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1194 offset=1494 bits=1):   jdk.incubator.vector.VectorIntrinsics::roundDown@5 (line 106)  reexecute=true
   Locals
    - l0: stack[60]
    - l1: stack[56]
   Expression stack
    - @0: reg rbp [10],int
   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
   Locals
    - l0: empty
    - l1: empty
   App::micro_vector_masked@65 (line 43)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: 0
PcDesc(pc=0x00007f03f91c11a8 offset=14a8 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c11ad offset=14ad bits=0):   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c11fe offset=14fe bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1208 offset=1508 bits=1):   jdk.incubator.vector.IntVector::fromArray@7 (line 2721)  reexecute=true
   Locals
    - l0: stack[88],oop
    - l1: stack[48],oop
    - l2: stack[56]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   Expression stack
    - @0: stack[44]
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[44]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91c121c offset=151c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1221 offset=1521 bits=0):   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c1249 offset=1549 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1254 offset=1554 bits=1):   jdk.incubator.vector.VectorMask::fromLong@15 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: 0
    - l2: stack[72],long
    - l3: stack[56],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   Expression stack
    - @0: stack[64]
    - @1: 64
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: stack[48]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c127a offset=157a bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c127f offset=157f bits=0):   java.util.Objects::checkIndex@3 (line 359)
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c12a2 offset=15a2 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c12ac offset=15ac bits=1):   jdk.incubator.vector.VectorMask::fromLong@40 (line 247)  reexecute=true
   Locals
    - l0: empty
    - l1: 0
    - l2: stack[72],long
    - l3: stack[64],oop
    - l4: stack[60]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   Expression stack
    - @0: reg rbp [10],int
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: stack[56]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c12c0 offset=15c0 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c12c5 offset=15c5 bits=0):   jdk.incubator.vector.IntVector::opCode@7 (line 62)
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c12cf offset=15cf bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c12d8 offset=15d8 bits=1):   jdk.incubator.vector.IntVector::fromArray@20 (line 2721)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[64]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   Expression stack
    - @0: stack[64]
    - @1: reg rbp [10],int
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91c12ec offset=15ec bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c12f1 offset=15f1 bits=0):   jdk.incubator.vector.IntVector::opCode@0 (line 62)
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c130c offset=160c bits=1):   jdk.incubator.vector.IntVector$IntSpecies::iota@6 (line 3662)  reexecute=true
   Locals
    - l0: stack[104],oop
   Expression stack
    - @0: reg rbp [10],narrowoop
    - @1: a 'java/lang/Class'{0x000000010188fcd0} = 'jdk/incubator/vector/IntMaxVector'
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[80],oop
    - @1: stack[64]
    - @2: stack[68]
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[64]
    - l3: stack[96],oop
    - l4: stack[104],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
PcDesc(pc=0x00007f03f91c1320 offset=1620 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1325 offset=1625 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91c1339 offset=1639 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1344 offset=1644 bits=1):   jdk.incubator.vector.AbstractMask::checkIndexByLane@150 (line 240)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[64]
    - l2: stack[68]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: obj[1217]
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: reg rbp [10],int
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[64]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 1217: jdk.incubator.vector.Int256Vector$Int256Mask stack[96]Wrong location type 7
PcDesc(pc=0x00007f03f91c1358 offset=1658 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c135d offset=165d bits=0):   jdk.incubator.vector.IntVector::opCode@7 (line 62)
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c1374 offset=1674 bits=1):   jdk.incubator.vector.IntVector::fromArray@20 (line 2721)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[48]
    - l3: stack[56],oop
    - l4: stack[80],oop
    - l5: empty
   Expression stack
    - @0: stack[48]
    - @1: reg rbp [10],int
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: stack[48]
    - l5: stack[64],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
PcDesc(pc=0x00007f03f91c1388 offset=1688 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c138d offset=168d bits=0):   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c13a1 offset=16a1 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c13ac offset=16ac bits=1):   jdk.incubator.vector.IntVector$IntSpecies::iota@6 (line 3662)  reexecute=true
   Locals
    - l0: stack[96],oop
   Expression stack
    - @0: reg rbp [10],narrowoop
    - @1: a 'java/lang/Class'{0x000000010188fcd0} = 'jdk/incubator/vector/IntMaxVector'
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[56],oop
    - @1: stack[48]
    - @2: stack[52]
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[48]
    - l3: stack[56],oop
    - l4: stack[96],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: stack[48]
    - l5: stack[64],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
PcDesc(pc=0x00007f03f91c13c0 offset=16c0 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c13c5 offset=16c5 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91c13e9 offset=16e9 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c13f4 offset=16f4 bits=1):   jdk.incubator.vector.AbstractMask::checkIndexByLane@150 (line 240)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[48]
    - l2: stack[52]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: obj[1123]
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: reg rbp [10],int
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[48]
    - l3: stack[72],oop
    - l4: stack[80],oop
    - l5: empty
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: stack[48]
    - l5: stack[56],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[72],oop
   Objects
    - 1123: jdk.incubator.vector.Int256Vector$Int256Mask stack[96]Wrong location type 7
PcDesc(pc=0x00007f03f91c141d offset=171d bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1428 offset=1728 bits=1):   jdk.incubator.vector.IntVector::intoArray@4 (line 3000)  reexecute=true
   Locals
    - l0: obj[1237]
    - l1: stack[24],oop
    - l2: stack[56]
    - l3: stack[40],oop
    - l4: empty
   Expression stack
    - @0: reg rbp [10],int
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 1237: jdk.incubator.vector.Int256Vector stack[64]Wrong location type 7
PcDesc(pc=0x00007f03f91c1440 offset=1740 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1445 offset=1745 bits=0):   jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c145b offset=175b bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1464 offset=1764 bits=1):   jdk.incubator.vector.AbstractMask::checkIndexByLane@150 (line 240)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[56]
    - l2: stack[168]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: obj[1175]
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: reg rbp [10],int
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: obj[1174]
    - l1: stack[24],oop
    - l2: stack[56]
    - l3: stack[40],oop
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 1174: jdk.incubator.vector.Int256Vector stack[96]Wrong location type 7
    - 1175: jdk.incubator.vector.Int256Vector$Int256Mask stack[64]Wrong location type 7
PcDesc(pc=0x00007f03f91c1478 offset=1778 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c147d offset=177d bits=0):   jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c14a5 offset=17a5 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c14b0 offset=17b0 bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[48],oop
   App::micro_vector_masked@52 (line 40)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c14c4 offset=17c4 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c14c9 offset=17c9 bits=0):   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c14e7 offset=17e7 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c14f0 offset=17f0 bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[56],oop
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c1504 offset=1804 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1509 offset=1809 bits=0):   jdk.incubator.vector.IntVector::opCode@7 (line 62)
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c1520 offset=1820 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   Locals
    - l0: reg rbp [10],narrowoop
    - l1: stack[56],oop
    - l2: stack[52]
    - l3: stack[72],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[52]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[72],oop
PcDesc(pc=0x00007f03f91c1534 offset=1834 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1539 offset=1839 bits=0):   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c1564 offset=1864 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   Locals
    - l0: stack[68],narrowoop
    - l1: stack[32],oop
    - l2: stack[28]
    - l3: stack[56],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: stack[68],narrowoop
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[40],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
PcDesc(pc=0x00007f03f91c158e offset=188e bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1591 offset=1891 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91c15b9 offset=18b9 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c15c4 offset=18c4 bits=1):   jdk.incubator.vector.AbstractVector::sameSpecies@8 (line 133)  reexecute=true
   Locals
    - l0: stack[80],oop
    - l1: stack[64],oop
    - l2: empty
   Expression stack
    - @0: reg rbp [10],oop
    - @1: a 'java/lang/Class'{0x000000010188b520} = 'jdk/incubator/vector/Int256Vector'
   jdk.incubator.vector.AbstractVector::check@2 (line 124)
   Locals
    - l0: stack[96],oop
    - l1: stack[64],oop
   jdk.incubator.vector.IntVector::lanewiseTemplate@7 (line 602)
   Locals
    - l0: stack[88],oop
    - l1: a 'jdk/incubator/vector/VectorOperators$AssociativeImpl'{0x0000000101985d48}
    - l2: empty
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
    - l6: empty
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::lanewise@70 (line 688)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: stack[40],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: stack[64],oop
   jdk.incubator.vector.IntVector::add@6 (line 1133)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   App::micro_vector_masked@188 (line 54)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: stack[32]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[40],oop
PcDesc(pc=0x00007f03f91c15d8 offset=18d8 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c15dd offset=18dd bits=0):   jdk.incubator.vector.IntVector::opCode@-1 (line 62)
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c15f4 offset=18f4 bits=0):   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@4 (line 569)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[28],narrowoop
   jdk.incubator.vector.IntVector::stOp@10 (line 352)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[56]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[32],oop
    - l6: empty
    - l7: empty
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c1608 offset=1908 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c160d offset=190d bits=0):   java.util.Objects::requireNonNull@1 (line 207)
   jdk.incubator.vector.IntVector::compareTemplate@1 (line 1750)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c1618 offset=1918 bits=0):   App::micro_vector_masked@13 (line 36)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
PcDesc(pc=0x00007f03f91c162c offset=192c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1631 offset=1931 bits=0):   jdk.incubator.vector.AbstractVector::check@5 (line 124)
   jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c164a offset=194a bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1654 offset=1954 bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
   App::micro_vector_masked@52 (line 40)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c1668 offset=1968 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c166d offset=196d bits=0):   jdk.incubator.vector.AbstractVector::check@14 (line 127)
   jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c1678 offset=1978 bits=0):   App::micro_vector_masked@64 (line 43)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: NULL
PcDesc(pc=0x00007f03f91c168c offset=198c bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1691 offset=1991 bits=0):   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c1693 offset=1993 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c169c offset=199c bits=0):   App::micro_vector_masked@65 (line 43)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: empty
    - @1: NULL
    - @2: reg rbp [10],int
PcDesc(pc=0x00007f03f91c16cc offset=19cc bits=0):   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[56],oop
    - l3: stack[40],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c16e0 offset=19e0 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c16e5 offset=19e5 bits=0):   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c1717 offset=1a17 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1720 offset=1a20 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   Locals
    - l0: NULL
    - l1: stack[48],oop
    - l2: stack[44]
    - l3: stack[64],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: NULL
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[44]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
PcDesc(pc=0x00007f03f91c1734 offset=1a34 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1739 offset=1a39 bits=0):   jdk.incubator.vector.AbstractVector::check@5 (line 124)
   jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c1744 offset=1a44 bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: empty
    - @1: NULL
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c1758 offset=1a58 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c175d offset=1a5d bits=0):   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c1776 offset=1a76 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1780 offset=1a80 bits=0):   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   Locals
    - l0: NULL
    - l1: stack[32],oop
    - l2: stack[28]
    - l3: stack[56],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: NULL
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[64],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
PcDesc(pc=0x00007f03f91c1794 offset=1a94 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1799 offset=1a99 bits=0):   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c17a4 offset=1aa4 bits=0):   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: empty
    - @1: NULL
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c17b8 offset=1ab8 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c17bd offset=1abd bits=0):   jdk.incubator.vector.VectorOperators::opCode@0 (line 403)
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c17c8 offset=1ac8 bits=0):   App::micro_vector_masked@188 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
    - @1: reg rbp [10],oop
    - @2: stack[40],oop
PcDesc(pc=0x00007f03f91c17dc offset=1adc bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c17e1 offset=1ae1 bits=0):   App::micro_vector_masked@65 (line 43)
PcDesc(pc=0x00007f03f91c17ec offset=1aec bits=0):   jdk.incubator.vector.IntVector::lanewiseTemplate@7 (line 602)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: NULL
    - @1: reg rbp [10],oop
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.IntVector::lanewise@70 (line 688)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: empty
   jdk.incubator.vector.IntVector::add@6 (line 1133)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   App::micro_vector_masked@188 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c1800 offset=1b00 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1805 offset=1b05 bits=0):   jdk.incubator.vector.IntVector::opCode@7 (line 62)
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   App::micro_vector_masked@163 (line 52)
PcDesc(pc=0x00007f03f91c180f offset=1b0f bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c1818 offset=1b18 bits=0):   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@4 (line 569)
   Locals
    - l0: empty
   Expression stack
    - @0: NULL
   jdk.incubator.vector.IntVector::stOp@10 (line 352)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[56]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[32],oop
    - l6: empty
    - l7: empty
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
PcDesc(pc=0x00007f03f91c182c offset=1b2c bits=0):   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c1836 offset=1b36 bits=0):   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
   App::micro_vector_masked@52 (line 40)
PcDesc(pc=0x00007f03f91c1838 offset=1b38 bits=0):   App::micro_vector_masked@46 (line 40)
PcDesc(pc=0x00007f03f91c183d offset=1b3d bits=0):   App::micro_vector_masked@30 (line 37)
PcDesc(pc=0x00007f03f91c1842 offset=1b42 bits=0):   App::micro_vector_masked@46 (line 40)
PcDesc(pc=0x00007f03f91c184c offset=1b4c bits=0):   App::micro_vector_masked@30 (line 37)
PcDesc(pc=0x00007f03f91c1851 offset=1b51 bits=0):   App::micro_vector_masked@46 (line 40)
PcDesc(pc=0x00007f03f91c1854 offset=1b54 bits=0):   App::micro_vector_masked@30 (line 37)
PcDesc(pc=0x00007f03f91c1864 offset=1b64 bits=0):   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   App::micro_vector_masked@196 (line 54)
PcDesc(pc=0x00007f03f91c18f1 offset=1bf1 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 57 OopMaps

ImmutableOopMap {r9=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop [56]=Oop } pc offsets: 469 
ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop } pc offsets: 624 
ImmutableOopMap {r9=Oop rdx=Oop r13=Oop r14=Oop [24]=Oop } pc offsets: 890 
ImmutableOopMap {rdi=Oop rdx=Oop r13=Oop r14=Oop xmm0=Oop [24]=Oop } pc offsets: 1490 
ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [56]=Oop } pc offsets: 1780 
ImmutableOopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop } pc offsets: 2252 
ImmutableOopMap {[32]=Oop [40]=Oop [64]=Oop } pc offsets: 2680 
ImmutableOopMap {r9=Oop rbx=Oop rax=Oop } pc offsets: 3537 
ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [56]=Oop } pc offsets: 3792 
ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [64]=Oop } pc offsets: 3860 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop [64]=Oop } pc offsets: 3956 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [64]=Oop } pc offsets: 4028 
ImmutableOopMap {[32]=Oop [40]=Oop [48]=Oop } pc offsets: 4084 
ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop [64]=Oop } pc offsets: 4152 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [56]=Oop [64]=Oop } pc offsets: 4228 
ImmutableOopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop } pc offsets: 4296 
ImmutableOopMap {[40]=Oop [48]=Oop [64]=Oop } pc offsets: 4360 
ImmutableOopMap {[32]=Oop [40]=Oop [48]=Oop } pc offsets: 4436 
ImmutableOopMap {rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [48]=Oop } pc offsets: 4488 4528 
ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [56]=Oop [80]=Oop [88]=Oop [96]=Oop } pc offsets: 4580 
ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop } pc offsets: 4636 
ImmutableOopMap {rbp=Oop [40]=Oop [56]=Oop [64]=Oop } pc offsets: 4696 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop } pc offsets: 4776 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop [64]=Oop } pc offsets: 4896 
ImmutableOopMap {[24]=Oop [40]=Oop [48]=Oop } pc offsets: 4960 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop } pc offsets: 5216 
ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop } pc offsets: 5268 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [80]=Oop [88]=Oop } pc offsets: 5384 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop } pc offsets: 5460 
ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [48]=Oop [64]=Oop } pc offsets: 5548 
ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [56]=Oop [80]=Oop [88]=Oop } pc offsets: 5592 
ImmutableOopMap {rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [56]=Oop [80]=Oop [96]=Oop [104]=Oop } pc offsets: 5644 
ImmutableOopMap {[24]=Oop [32]=Oop [40]=Oop [56]=Oop [80]=Oop [88]=Oop } pc offsets: 5700 
ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop } pc offsets: 5748 
ImmutableOopMap {rbp=NarrowOop [24]=Oop [40]=Oop [56]=Oop [64]=Oop [96]=Oop } pc offsets: 5804 
ImmutableOopMap {[24]=Oop [40]=Oop [56]=Oop [72]=Oop [80]=Oop } pc offsets: 5876 
ImmutableOopMap {[24]=Oop [40]=Oop } pc offsets: 5928 5988 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop } pc offsets: 6064 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [40]=Oop [56]=Oop } pc offsets: 6128 
ImmutableOopMap {rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [56]=Oop [72]=Oop } pc offsets: 6176 
ImmutableOopMap {rbp=Oop [32]=Oop [40]=Oop [56]=Oop [68]=NarrowOop } pc offsets: 6244 
ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [64]=Oop [80]=Oop [88]=Oop [96]=Oop } pc offsets: 6340 
ImmutableOopMap {rbp=Oop [28]=NarrowOop [32]=Oop } pc offsets: 6388 
ImmutableOopMap {} pc offsets: 6424 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop } pc offsets: 6484 
ImmutableOopMap {} pc offsets: 6520 6556 
ImmutableOopMap {rbp=Oop [24]=Oop [40]=Oop [56]=Oop } pc offsets: 6604 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop } pc offsets: 6688 
ImmutableOopMap {} pc offsets: 6724 
ImmutableOopMap {rbp=Oop [32]=Oop [56]=Oop [64]=Oop } pc offsets: 6784 
ImmutableOopMap {} pc offsets: 6820 
ImmutableOopMap {rbp=Oop [40]=Oop } pc offsets: 6856 
ImmutableOopMap {rbp=Oop } pc offsets: 6892 
ImmutableOopMap {rbp=Oop [32]=Oop } pc offsets: 6936 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007f03f91bfd2f offset=2f):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
ScopeDesc(pc=0x00007f03f91bfd2f offset=2f):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91bfd43 offset=43):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91bfd43 offset=43):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91bfd43 offset=43):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91bfd43 offset=43):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91bfd43 offset=43):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91bfd46 offset=46):
   jdk.incubator.vector.AbstractSpecies::dummyVector@6 (line 296)
ScopeDesc(pc=0x00007f03f91bfd46 offset=46):
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
ScopeDesc(pc=0x00007f03f91bfd46 offset=46):
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
ScopeDesc(pc=0x00007f03f91bfd46 offset=46):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91bfd52 offset=52):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91bfd52 offset=52):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91bfd52 offset=52):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91bfd52 offset=52):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91bfd52 offset=52):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91bfd5c offset=5c):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91bfd61 offset=61):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91bfd61 offset=61):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91bfd61 offset=61):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91bfd61 offset=61):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91bfd61 offset=61):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91bfd65 offset=65):
   jdk.incubator.vector.VectorIntrinsics::roundDown@4 (line 106)
ScopeDesc(pc=0x00007f03f91bfd65 offset=65):
   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
ScopeDesc(pc=0x00007f03f91bfd65 offset=65):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91bfd71 offset=71):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91bfd71 offset=71):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91bfd71 offset=71):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91bfd71 offset=71):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91bfd71 offset=71):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91bfd74 offset=74):
   java.util.Objects::checkIndex@3 (line 359)
ScopeDesc(pc=0x00007f03f91bfd74 offset=74):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91bfd74 offset=74):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
ScopeDesc(pc=0x00007f03f91bfd74 offset=74):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91bfd8c offset=8c):
   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
ScopeDesc(pc=0x00007f03f91bfd8c offset=8c):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91bfd8c offset=8c):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91bfd8c offset=8c):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91bfd93 offset=93):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91bfd93 offset=93):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91bfd93 offset=93):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91bfd93 offset=93):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91bfd93 offset=93):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91bfda4 offset=a4):
   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
ScopeDesc(pc=0x00007f03f91bfda4 offset=a4):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91bfda4 offset=a4):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91bfda4 offset=a4):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91bfdab offset=ab):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91bfdab offset=ab):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91bfdab offset=ab):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91bfdab offset=ab):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91bfdab offset=ab):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91bfdb1 offset=b1):
   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
ScopeDesc(pc=0x00007f03f91bfdb1 offset=b1):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91bfdb1 offset=b1):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91bfdb1 offset=b1):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91bfe1d offset=11d):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
ScopeDesc(pc=0x00007f03f91bfe1d offset=11d):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91bfeb6 offset=1b6):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91bfeb6 offset=1b6):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91bfeb6 offset=1b6):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91bfeb6 offset=1b6):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91bfeb6 offset=1b6):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91bfec0 offset=1c0):
   java.util.Objects::checkIndex@3 (line 359)
ScopeDesc(pc=0x00007f03f91bfec0 offset=1c0):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91bfec0 offset=1c0):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007f03f91bfec0 offset=1c0):
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
ScopeDesc(pc=0x00007f03f91bfec0 offset=1c0):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
ScopeDesc(pc=0x00007f03f91bfec0 offset=1c0):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91bfec7 offset=1c7):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91bfec7 offset=1c7):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91bfec7 offset=1c7):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91bfec7 offset=1c7):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91bfec7 offset=1c7):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91bfece offset=1ce):
   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
ScopeDesc(pc=0x00007f03f91bfece offset=1ce):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91bfece offset=1ce):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91bfece offset=1ce):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91bfed5 offset=1d5):
   App::micro_vector_masked@42 (line 37)  reexecute=true
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: reg r9 [18],oop
    - l8: reg rbx [6],int
    - l9: empty
ScopeDesc(pc=0x00007f03f91bfee5 offset=1e5):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91bfee5 offset=1e5):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91bfee5 offset=1e5):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91bfee5 offset=1e5):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91bfee5 offset=1e5):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91bfee8 offset=1e8):
   jdk.incubator.vector.IntVector::lanewiseTemplate@-1 (line 601)
ScopeDesc(pc=0x00007f03f91bfee8 offset=1e8):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
ScopeDesc(pc=0x00007f03f91bfee8 offset=1e8):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
ScopeDesc(pc=0x00007f03f91bfee8 offset=1e8):
   jdk.incubator.vector.IntVector::add@5 (line 1096)
ScopeDesc(pc=0x00007f03f91bfee8 offset=1e8):
   App::micro_vector_masked@101 (line 46)
ScopeDesc(pc=0x00007f03f91bfef3 offset=1f3):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91bfef3 offset=1f3):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91bfef3 offset=1f3):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91bfef3 offset=1f3):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91bfef3 offset=1f3):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91bfef8 offset=1f8):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
ScopeDesc(pc=0x00007f03f91bfef8 offset=1f8):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91bff65 offset=265):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91bff65 offset=265):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91bff65 offset=265):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91bff65 offset=265):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91bff65 offset=265):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91bff70 offset=270):
   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91bff70 offset=270):
   App::micro_vector_masked@52 (line 40)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91bff9b offset=29b):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91bff9b offset=29b):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91bff9b offset=29b):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91bff9b offset=29b):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91bff9b offset=29b):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91bff9f offset=29f):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91bff9f offset=29f):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91bffac offset=2ac):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91bffac offset=2ac):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91bffac offset=2ac):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91bffac offset=2ac):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91bffac offset=2ac):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91bffb6 offset=2b6):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91bffb6 offset=2b6):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91bffba offset=2ba):
   java.util.Objects::checkIndex@3 (line 359)
ScopeDesc(pc=0x00007f03f91bffba offset=2ba):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91bffba offset=2ba):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007f03f91bffba offset=2ba):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91bffff offset=2ff):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91bffff offset=2ff):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91bffff offset=2ff):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91bffff offset=2ff):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91bffff offset=2ff):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0003 offset=303):
   App::micro_vector_masked@70 (line 43)
ScopeDesc(pc=0x00007f03f91c0032 offset=332):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0032 offset=332):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0032 offset=332):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0032 offset=332):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0032 offset=332):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c003d offset=33d):
   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
ScopeDesc(pc=0x00007f03f91c003d offset=33d):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c0049 offset=349):
   java.util.Objects::checkIndex@3 (line 359)
ScopeDesc(pc=0x00007f03f91c0049 offset=349):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91c0049 offset=349):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007f03f91c0049 offset=349):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c0059 offset=359):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0059 offset=359):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0059 offset=359):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0059 offset=359):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0059 offset=359):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0060 offset=360):
   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
ScopeDesc(pc=0x00007f03f91c0060 offset=360):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c0069 offset=369):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0069 offset=369):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0069 offset=369):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0069 offset=369):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0069 offset=369):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0070 offset=370):
   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
ScopeDesc(pc=0x00007f03f91c0070 offset=370):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c0070 offset=370):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c0070 offset=370):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c0077 offset=377):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0077 offset=377):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0077 offset=377):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0077 offset=377):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0077 offset=377):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c007a offset=37a):
   App::micro_vector_masked@124 (line 43)  reexecute=true
   Locals
    - l0: stack[24],oop
    - l1: reg r14 [28],oop
    - l2: reg r13 [26],oop
    - l3: reg rdx [4],oop
    - l4: reg r10 [20],int
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c00cd offset=3cd):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c00cd offset=3cd):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c00cd offset=3cd):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c00cd offset=3cd):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c00cd offset=3cd):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c00d0 offset=3d0):
   java.util.Objects::checkIndex@3 (line 359)
ScopeDesc(pc=0x00007f03f91c00d0 offset=3d0):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91c00d0 offset=3d0):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
ScopeDesc(pc=0x00007f03f91c00d0 offset=3d0):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c00dd offset=3dd):
   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
ScopeDesc(pc=0x00007f03f91c00dd offset=3dd):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c00dd offset=3dd):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c00dd offset=3dd):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c00e4 offset=3e4):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c00e4 offset=3e4):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c00e4 offset=3e4):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c00e4 offset=3e4):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c00e4 offset=3e4):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c00f5 offset=3f5):
   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
ScopeDesc(pc=0x00007f03f91c00f5 offset=3f5):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c00f5 offset=3f5):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c00f5 offset=3f5):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c0107 offset=407):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0107 offset=407):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0107 offset=407):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0107 offset=407):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0107 offset=407):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c010d offset=40d):
   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
ScopeDesc(pc=0x00007f03f91c010d offset=40d):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c010d offset=40d):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c010d offset=40d):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c0177 offset=477):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
ScopeDesc(pc=0x00007f03f91c0177 offset=477):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c01ad offset=4ad):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c01ad offset=4ad):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c01ad offset=4ad):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c01ad offset=4ad):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c01ad offset=4ad):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c01b2 offset=4b2):
   jdk.incubator.vector.IntVector::intoArray@17 (line 2963)
ScopeDesc(pc=0x00007f03f91c01b2 offset=4b2):
   App::micro_vector_masked@107 (line 46)
ScopeDesc(pc=0x00007f03f91c01b6 offset=4b6):
   jdk.incubator.vector.IntVector::intoArray@12 (line 2961)
ScopeDesc(pc=0x00007f03f91c01b6 offset=4b6):
   App::micro_vector_masked@107 (line 46)
ScopeDesc(pc=0x00007f03f91c01f0 offset=4f0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c01f0 offset=4f0):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c01f0 offset=4f0):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c01f0 offset=4f0):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c01f0 offset=4f0):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c01f6 offset=4f6):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
ScopeDesc(pc=0x00007f03f91c01f6 offset=4f6):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c01f9 offset=4f9):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c01f9 offset=4f9):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c01f9 offset=4f9):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c01f9 offset=4f9):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c01f9 offset=4f9):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c01fc offset=4fc):
   jdk.incubator.vector.IntVector$IntSpecies::elementType@-1 (line 3476)
ScopeDesc(pc=0x00007f03f91c01fc offset=4fc):
   jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
ScopeDesc(pc=0x00007f03f91c01fc offset=4fc):
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
ScopeDesc(pc=0x00007f03f91c01fc offset=4fc):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
ScopeDesc(pc=0x00007f03f91c01fc offset=4fc):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91c0201 offset=501):
   jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
ScopeDesc(pc=0x00007f03f91c0201 offset=501):
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
ScopeDesc(pc=0x00007f03f91c0201 offset=501):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
ScopeDesc(pc=0x00007f03f91c0201 offset=501):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91c0206 offset=506):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007f03f91c0206 offset=506):
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
ScopeDesc(pc=0x00007f03f91c0206 offset=506):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
ScopeDesc(pc=0x00007f03f91c0206 offset=506):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91c020b offset=50b):
   App::micro_vector_masked@113 (line 43)
ScopeDesc(pc=0x00007f03f91c0210 offset=510):
   jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
ScopeDesc(pc=0x00007f03f91c0210 offset=510):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c0210 offset=510):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c0210 offset=510):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91c024d offset=54d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c024d offset=54d):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c024d offset=54d):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c024d offset=54d):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c024d offset=54d):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0252 offset=552):
   jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
ScopeDesc(pc=0x00007f03f91c0252 offset=552):
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
ScopeDesc(pc=0x00007f03f91c0252 offset=552):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
ScopeDesc(pc=0x00007f03f91c0252 offset=552):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91c026d offset=56d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c026d offset=56d):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c026d offset=56d):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c026d offset=56d):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c026d offset=56d):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0272 offset=572):
   jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
ScopeDesc(pc=0x00007f03f91c0272 offset=572):
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
ScopeDesc(pc=0x00007f03f91c0272 offset=572):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
ScopeDesc(pc=0x00007f03f91c0272 offset=572):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91c0297 offset=597):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0297 offset=597):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0297 offset=597):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0297 offset=597):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0297 offset=597):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c029d offset=59d):
   App::micro_vector_masked@116 (line 43)
ScopeDesc(pc=0x00007f03f91c02ad offset=5ad):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c02ad offset=5ad):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c02ad offset=5ad):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c02ad offset=5ad):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c02ad offset=5ad):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c02cb offset=5cb):
   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
ScopeDesc(pc=0x00007f03f91c02cb offset=5cb):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c02cb offset=5cb):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c02cb offset=5cb):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c02d2 offset=5d2):
   jdk.incubator.vector.VectorMask::fromLong@135 (line 255)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: reg xmm0 [48],oop
    - l4: empty
    - l5: 0
    - l6: reg rbp [10],long
    - l7: reg rdi [14],oop
    - l8: reg r11 [22],int
ScopeDesc(pc=0x00007f03f91c02d2 offset=5d2):
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: stack[24],oop
    - l1: reg r14 [28],oop
    - l2: reg r13 [26],oop
    - l3: reg rdx [4],oop
    - l4: reg xmm3 [96],int
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c0335 offset=635):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0335 offset=635):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0335 offset=635):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0335 offset=635):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0335 offset=635):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0338 offset=638):
   java.util.Objects::checkIndex@3 (line 359)
ScopeDesc(pc=0x00007f03f91c0338 offset=638):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91c0338 offset=638):
   jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
ScopeDesc(pc=0x00007f03f91c0338 offset=638):
   App::micro_vector_masked@107 (line 46)
ScopeDesc(pc=0x00007f03f91c034d offset=64d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c034d offset=64d):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c034d offset=64d):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c034d offset=64d):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c034d offset=64d):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0352 offset=652):
   java.util.Objects::checkIndex@3 (line 359)
ScopeDesc(pc=0x00007f03f91c0352 offset=652):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91c0352 offset=652):
   jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
ScopeDesc(pc=0x00007f03f91c0352 offset=652):
   App::micro_vector_masked@107 (line 46)
ScopeDesc(pc=0x00007f03f91c0365 offset=665):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0365 offset=665):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0365 offset=665):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0365 offset=665):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0365 offset=665):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0388 offset=688):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
ScopeDesc(pc=0x00007f03f91c0388 offset=688):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91c038f offset=68f):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c038f offset=68f):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c038f offset=68f):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c038f offset=68f):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c038f offset=68f):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c03f4 offset=6f4):
   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91c03f4 offset=6f4):
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c03f4 offset=6f4):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x00007f03f91c03f4 offset=6f4):
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[56],oop
    - l3: stack[40],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c0407 offset=707):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0407 offset=707):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0407 offset=707):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0407 offset=707):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0407 offset=707):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0410 offset=710):
   jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
ScopeDesc(pc=0x00007f03f91c0410 offset=710):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c0415 offset=715):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0415 offset=715):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0415 offset=715):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0415 offset=715):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0415 offset=715):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0419 offset=719):
   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
ScopeDesc(pc=0x00007f03f91c0419 offset=719):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c0419 offset=719):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c0419 offset=719):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91c042c offset=72c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c042c offset=72c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c042c offset=72c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c042c offset=72c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c042c offset=72c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0436 offset=736):
   App::micro_vector_masked@64 (line 43)
ScopeDesc(pc=0x00007f03f91c0451 offset=751):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0451 offset=751):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0451 offset=751):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0451 offset=751):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0451 offset=751):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0455 offset=755):
   java.util.Objects::checkIndex@3 (line 359)
ScopeDesc(pc=0x00007f03f91c0455 offset=755):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91c0455 offset=755):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
ScopeDesc(pc=0x00007f03f91c0455 offset=755):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91c0466 offset=766):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0466 offset=766):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0466 offset=766):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0466 offset=766):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0466 offset=766):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c046a offset=76a):
   java.util.Objects::checkIndex@3 (line 359)
ScopeDesc(pc=0x00007f03f91c046a offset=76a):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91c046a offset=76a):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
ScopeDesc(pc=0x00007f03f91c046a offset=76a):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91c0476 offset=776):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0476 offset=776):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0476 offset=776):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0476 offset=776):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0476 offset=776):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c047a offset=77a):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91c0492 offset=792):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0492 offset=792):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0492 offset=792):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0492 offset=792):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0492 offset=792):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0496 offset=796):
   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
ScopeDesc(pc=0x00007f03f91c0496 offset=796):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c0496 offset=796):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c0496 offset=796):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c04a0 offset=7a0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c04a0 offset=7a0):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c04a0 offset=7a0):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c04a0 offset=7a0):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c04a0 offset=7a0):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c04a8 offset=7a8):
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
ScopeDesc(pc=0x00007f03f91c04a8 offset=7a8):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91c04e4 offset=7e4):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c04e4 offset=7e4):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c04e4 offset=7e4):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c04e4 offset=7e4):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c04e4 offset=7e4):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c050b offset=80b):
   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
ScopeDesc(pc=0x00007f03f91c050b offset=80b):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c050b offset=80b):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c050b offset=80b):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c0512 offset=812):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0512 offset=812):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0512 offset=812):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0512 offset=812):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0512 offset=812):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0518 offset=818):
   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
ScopeDesc(pc=0x00007f03f91c0518 offset=818):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c0518 offset=818):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c0518 offset=818):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c0563 offset=863):
   jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
ScopeDesc(pc=0x00007f03f91c0563 offset=863):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c0563 offset=863):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c0563 offset=863):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c05ac offset=8ac):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c05ac offset=8ac):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c05ac offset=8ac):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c05ac offset=8ac):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c05ac offset=8ac):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c05b0 offset=8b0):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@42 (line 74)
ScopeDesc(pc=0x00007f03f91c05b0 offset=8b0):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
ScopeDesc(pc=0x00007f03f91c05b0 offset=8b0):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c05b5 offset=8b5):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c05b5 offset=8b5):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c05b5 offset=8b5):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c05b5 offset=8b5):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c05b5 offset=8b5):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c05b9 offset=8b9):
   jdk.incubator.vector.IntVector::fromArray0Template@10 (line 3210)
ScopeDesc(pc=0x00007f03f91c05b9 offset=8b9):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c05b9 offset=8b9):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c05b9 offset=8b9):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91c05c3 offset=8c3):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c05c3 offset=8c3):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c05c3 offset=8c3):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c05c3 offset=8c3):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c05c3 offset=8c3):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c05cc offset=8cc):
   jdk.incubator.vector.IntVector::fromArray@64 (line 2728)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91c05cc offset=8cc):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[48]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
ScopeDesc(pc=0x00007f03f91c05d1 offset=8d1):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c05d1 offset=8d1):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c05d1 offset=8d1):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c05d1 offset=8d1):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c05d1 offset=8d1):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c05d5 offset=8d5):
   jdk.incubator.vector.IntVector::fromArray@2 (line 2689)
ScopeDesc(pc=0x00007f03f91c05d5 offset=8d5):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c05f2 offset=8f2):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c05f2 offset=8f2):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c05f2 offset=8f2):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c05f2 offset=8f2):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c05f2 offset=8f2):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c05fa offset=8fa):
   jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
ScopeDesc(pc=0x00007f03f91c05fa offset=8fa):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c05fe offset=8fe):
   jdk.incubator.vector.AbstractSpecies::dummyVector@6 (line 296)
ScopeDesc(pc=0x00007f03f91c05fe offset=8fe):
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
ScopeDesc(pc=0x00007f03f91c05fe offset=8fe):
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
ScopeDesc(pc=0x00007f03f91c05fe offset=8fe):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91c0612 offset=912):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0612 offset=912):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0612 offset=912):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0612 offset=912):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0612 offset=912):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0615 offset=915):
   jdk.incubator.vector.AbstractSpecies::dummyVector@6 (line 296)
ScopeDesc(pc=0x00007f03f91c0615 offset=915):
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
ScopeDesc(pc=0x00007f03f91c0615 offset=915):
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
ScopeDesc(pc=0x00007f03f91c0615 offset=915):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91c062c offset=92c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c062c offset=92c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c062c offset=92c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c062c offset=92c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c062c offset=92c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c062f offset=92f):
   jdk.incubator.vector.IntVector$IntSpecies::elementType@-1 (line 3476)
ScopeDesc(pc=0x00007f03f91c062f offset=92f):
   jdk.incubator.vector.VectorMask::fromArray@25 (line 209)
ScopeDesc(pc=0x00007f03f91c062f offset=92f):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c0647 offset=947):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0647 offset=947):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0647 offset=947):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0647 offset=947):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0647 offset=947):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c064a offset=94a):
   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
ScopeDesc(pc=0x00007f03f91c064a offset=94a):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c064a offset=94a):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c064a offset=94a):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c0664 offset=964):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0664 offset=964):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0664 offset=964):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0664 offset=964):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0664 offset=964):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c066c offset=96c):
   jdk.incubator.vector.IntVector$IntSpecies::dummyVector@1 (line 3574)
ScopeDesc(pc=0x00007f03f91c066c offset=96c):
   jdk.incubator.vector.IntVector::fromArray@19 (line 2691)
ScopeDesc(pc=0x00007f03f91c066c offset=96c):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91c0697 offset=997):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0697 offset=997):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0697 offset=997):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0697 offset=997):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0697 offset=997):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c069b offset=99b):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91c06b0 offset=9b0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c06b0 offset=9b0):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c06b0 offset=9b0):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c06b0 offset=9b0):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c06b0 offset=9b0):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c06c4 offset=9c4):
   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
ScopeDesc(pc=0x00007f03f91c06c4 offset=9c4):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c06c4 offset=9c4):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c06c4 offset=9c4):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c06cb offset=9cb):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c06cb offset=9cb):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c06cb offset=9cb):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c06cb offset=9cb):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c06cb offset=9cb):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c06d1 offset=9d1):
   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
ScopeDesc(pc=0x00007f03f91c06d1 offset=9d1):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c06d1 offset=9d1):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c06d1 offset=9d1):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c0712 offset=a12):
   jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
ScopeDesc(pc=0x00007f03f91c0712 offset=a12):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c0712 offset=a12):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c0712 offset=a12):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c0758 offset=a58):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0758 offset=a58):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0758 offset=a58):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0758 offset=a58):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0758 offset=a58):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c075c offset=a5c):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91c075c offset=a5c):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
ScopeDesc(pc=0x00007f03f91c075c offset=a5c):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c0761 offset=a61):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0761 offset=a61):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0761 offset=a61):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0761 offset=a61):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0761 offset=a61):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0765 offset=a65):
   jdk.incubator.vector.IntVector::fromArray0Template@14 (line 3210)
ScopeDesc(pc=0x00007f03f91c0765 offset=a65):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c0765 offset=a65):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c0765 offset=a65):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91c076f offset=a6f):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c076f offset=a6f):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c076f offset=a6f):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c076f offset=a6f):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c076f offset=a6f):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0778 offset=a78):
   jdk.incubator.vector.IntVector::fromArray@64 (line 2728)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91c0778 offset=a78):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
    - l4: stack[56]
    - l5: stack[64],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[40],oop
ScopeDesc(pc=0x00007f03f91c078b offset=a8b):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c078b offset=a8b):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c078b offset=a8b):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c078b offset=a8b):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c078b offset=a8b):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0791 offset=a91):
   App::micro_vector_masked@-1 (line 32)
ScopeDesc(pc=0x00007f03f91c07a7 offset=aa7):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c07a7 offset=aa7):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c07a7 offset=aa7):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c07a7 offset=aa7):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c07a7 offset=aa7):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c07ad offset=aad):
   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
ScopeDesc(pc=0x00007f03f91c07ad offset=aad):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c07ad offset=aad):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c07ad offset=aad):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c07b1 offset=ab1):
   jdk.incubator.vector.IntVector::fromArray0Template@20 (line 3211)
ScopeDesc(pc=0x00007f03f91c07b1 offset=ab1):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c07b1 offset=ab1):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c07b1 offset=ab1):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c07b5 offset=ab5):
   java.lang.invoke.LambdaForm$MH/0x0000000800005800::linkToTargetMethod@0
ScopeDesc(pc=0x00007f03f91c07b5 offset=ab5):
   jdk.incubator.vector.IntVector::fromArray0Template@26 (line 3211)
ScopeDesc(pc=0x00007f03f91c07b5 offset=ab5):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c07b5 offset=ab5):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c07b5 offset=ab5):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c07bc offset=abc):
   App::micro_vector_masked@73 (line 44)
ScopeDesc(pc=0x00007f03f91c07d1 offset=ad1):
   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
ScopeDesc(pc=0x00007f03f91c07d1 offset=ad1):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c07d1 offset=ad1):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c07d1 offset=ad1):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c07d8 offset=ad8):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c07d8 offset=ad8):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c07d8 offset=ad8):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c07d8 offset=ad8):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c07d8 offset=ad8):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c07de offset=ade):
   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
ScopeDesc(pc=0x00007f03f91c07de offset=ade):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c07de offset=ade):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c07de offset=ade):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c082a offset=b2a):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
ScopeDesc(pc=0x00007f03f91c082a offset=b2a):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c082f offset=b2f):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c082f offset=b2f):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c082f offset=b2f):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c082f offset=b2f):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c082f offset=b2f):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0833 offset=b33):
   jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3209)
ScopeDesc(pc=0x00007f03f91c0833 offset=b33):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c0833 offset=b33):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c0833 offset=b33):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c083a offset=b3a):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c083a offset=b3a):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c083a offset=b3a):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c083a offset=b3a):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c083a offset=b3a):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0847 offset=b47):
   App::micro_vector_masked@73 (line 44)
ScopeDesc(pc=0x00007f03f91c084d offset=b4d):
   jdk.incubator.vector.AbstractSpecies::maskType@-1 (line 161)
ScopeDesc(pc=0x00007f03f91c084d offset=b4d):
   jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
ScopeDesc(pc=0x00007f03f91c084d offset=b4d):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c0852 offset=b52):
   jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
ScopeDesc(pc=0x00007f03f91c0852 offset=b52):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c088e offset=b8e):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c088e offset=b8e):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c088e offset=b8e):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c088e offset=b8e):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c088e offset=b8e):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0898 offset=b98):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91c08cb offset=bcb):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c08cb offset=bcb):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c08cb offset=bcb):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c08cb offset=bcb):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c08cb offset=bcb):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c08d1 offset=bd1):
   jdk.incubator.vector.IntVector::fromArray0Template@10 (line 3210)
ScopeDesc(pc=0x00007f03f91c08d1 offset=bd1):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c08d1 offset=bd1):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c08d1 offset=bd1):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c08d5 offset=bd5):
   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
ScopeDesc(pc=0x00007f03f91c08d5 offset=bd5):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c08d5 offset=bd5):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c08d5 offset=bd5):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91c08ed offset=bed):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c08ed offset=bed):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c08ed offset=bed):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c08ed offset=bed):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c08ed offset=bed):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c08f0 offset=bf0):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91c08f2 offset=bf2):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c08f2 offset=bf2):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c08f2 offset=bf2):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c08f2 offset=bf2):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c08f2 offset=bf2):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c08fc offset=bfc):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007f03f91c08fc offset=bfc):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c0900 offset=c00):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c0900 offset=c00):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c0953 offset=c53):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0953 offset=c53):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0953 offset=c53):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0953 offset=c53):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0953 offset=c53):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0956 offset=c56):
   App::micro_vector_masked@70 (line 43)
ScopeDesc(pc=0x00007f03f91c095c offset=c5c):
   jdk.incubator.vector.VectorIntrinsics::roundDown@3 (line 106)
ScopeDesc(pc=0x00007f03f91c095c offset=c5c):
   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
ScopeDesc(pc=0x00007f03f91c095c offset=c5c):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91c0972 offset=c72):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0972 offset=c72):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0972 offset=c72):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0972 offset=c72):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0972 offset=c72):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0976 offset=c76):
   jdk.incubator.vector.VectorIntrinsics::roundDown@5 (line 106)
ScopeDesc(pc=0x00007f03f91c0976 offset=c76):
   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
ScopeDesc(pc=0x00007f03f91c0976 offset=c76):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91c0a67 offset=d67):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0a67 offset=d67):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0a67 offset=d67):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0a67 offset=d67):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0a67 offset=d67):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0a6b offset=d6b):
   App::micro_vector_masked@-1 (line 32)
ScopeDesc(pc=0x00007f03f91c0a78 offset=d78):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91c0a78 offset=d78):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c0a7f offset=d7f):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0a7f offset=d7f):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0a7f offset=d7f):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0a7f offset=d7f):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0a7f offset=d7f):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0a82 offset=d82):
   jdk.incubator.vector.VectorMask::fromLong@104 (line 255)
ScopeDesc(pc=0x00007f03f91c0a82 offset=d82):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91c0a88 offset=d88):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
ScopeDesc(pc=0x00007f03f91c0a88 offset=d88):
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
ScopeDesc(pc=0x00007f03f91c0a88 offset=d88):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
ScopeDesc(pc=0x00007f03f91c0a88 offset=d88):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91c0a90 offset=d90):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0a90 offset=d90):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0a90 offset=d90):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0a90 offset=d90):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0a90 offset=d90):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0a94 offset=d94):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91c0a94 offset=d94):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c0a9a offset=d9a):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0a9a offset=d9a):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0a9a offset=d9a):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0a9a offset=d9a):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0a9a offset=d9a):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0aa0 offset=da0):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
ScopeDesc(pc=0x00007f03f91c0aa0 offset=da0):
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
ScopeDesc(pc=0x00007f03f91c0aa0 offset=da0):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
ScopeDesc(pc=0x00007f03f91c0aa0 offset=da0):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91c0aa8 offset=da8):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0aa8 offset=da8):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0aa8 offset=da8):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0aa8 offset=da8):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0aa8 offset=da8):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0aac offset=dac):
   jdk.incubator.vector.IntVector::fromArray@0 (line 2720)
ScopeDesc(pc=0x00007f03f91c0aac offset=dac):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c0ab2 offset=db2):
   jdk.incubator.vector.VectorMask::fromLong@125 (line 256)
ScopeDesc(pc=0x00007f03f91c0ab2 offset=db2):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91c0aba offset=dba):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0aba offset=dba):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0aba offset=dba):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0aba offset=dba):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0aba offset=dba):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0abe offset=dbe):
   jdk.incubator.vector.VectorMask::fromLong@135 (line 255)
ScopeDesc(pc=0x00007f03f91c0abe offset=dbe):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91c0ac4 offset=dc4):
   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
ScopeDesc(pc=0x00007f03f91c0ac4 offset=dc4):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c0ac4 offset=dc4):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c0ac4 offset=dc4):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c0ac6 offset=dc6):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0ac6 offset=dc6):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0ac6 offset=dc6):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0ac6 offset=dc6):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0ac6 offset=dc6):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0aca offset=dca):
   jdk.incubator.vector.IntVector::fromArray0Template@6 (line 3210)
ScopeDesc(pc=0x00007f03f91c0aca offset=dca):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c0aca offset=dca):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c0aca offset=dca):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c0ad1 offset=dd1):
   jdk.incubator.vector.IntVector::stOp@53 (line 353)  reexecute=true
   Locals
    - l0: empty
    - l1: reg rbx [6],oop
    - l2: stack[56]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: reg rax [0],oop
    - l6: reg r9 [18],oop
    - l7: reg r10 [20],int
ScopeDesc(pc=0x00007f03f91c0ad1 offset=dd1):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91c0ad1 offset=dd1):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c0ad9 offset=dd9):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
ScopeDesc(pc=0x00007f03f91c0ad9 offset=dd9):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c0b0e offset=e0e):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0b0e offset=e0e):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0b0e offset=e0e):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0b0e offset=e0e):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0b0e offset=e0e):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0b10 offset=e10):
   App::micro_vector_masked@124 (line 43)
ScopeDesc(pc=0x00007f03f91c0b13 offset=e13):
   App::micro_vector_masked@64 (line 43)
ScopeDesc(pc=0x00007f03f91c0b19 offset=e19):
   jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3209)
ScopeDesc(pc=0x00007f03f91c0b19 offset=e19):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c0b19 offset=e19):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c0b19 offset=e19):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c0b29 offset=e29):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0b29 offset=e29):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0b29 offset=e29):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0b29 offset=e29):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0b29 offset=e29):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0b2e offset=e2e):
   App::micro_vector_masked@116 (line 43)
ScopeDesc(pc=0x00007f03f91c0b4e offset=e4e):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0b4e offset=e4e):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0b4e offset=e4e):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0b4e offset=e4e):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0b4e offset=e4e):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0b53 offset=e53):
   App::micro_vector_masked@124 (line 43)
ScopeDesc(pc=0x00007f03f91c0b59 offset=e59):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0b59 offset=e59):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0b59 offset=e59):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0b59 offset=e59):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0b59 offset=e59):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0b5b offset=e5b):
   App::micro_vector_masked@30 (line 37)
ScopeDesc(pc=0x00007f03f91c0bbb offset=ebb):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0bbb offset=ebb):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0bbb offset=ebb):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0bbb offset=ebb):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0bbb offset=ebb):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0bc5 offset=ec5):
   jdk.incubator.vector.IntVector::compareTemplate@6 (line 1751)
ScopeDesc(pc=0x00007f03f91c0bc5 offset=ec5):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c0bc5 offset=ec5):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c0bc5 offset=ec5):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c0bc5 offset=ec5):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c0bc5 offset=ec5):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c0bc5 offset=ec5):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c0bc5 offset=ec5):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c0bc7 offset=ec7):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0bc7 offset=ec7):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0bc7 offset=ec7):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0bc7 offset=ec7):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0bc7 offset=ec7):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0bd0 offset=ed0):
   App::micro_vector_masked@18 (line 36)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c0bff offset=eff):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0bff offset=eff):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0bff offset=eff):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0bff offset=eff):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0bff offset=eff):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0c09 offset=f09):
   jdk.incubator.vector.AbstractVector::check@0 (line 124)
ScopeDesc(pc=0x00007f03f91c0c09 offset=f09):
   jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
ScopeDesc(pc=0x00007f03f91c0c09 offset=f09):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c0c09 offset=f09):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c0c09 offset=f09):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c0c09 offset=f09):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c0c09 offset=f09):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c0c09 offset=f09):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c0c09 offset=f09):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c0c14 offset=f14):
   jdk.incubator.vector.VectorMask::fromLong@92 (line 254)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: stack[64],oop
    - l4: empty
    - l5: 0
    - l6: stack[80],long
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x00007f03f91c0c14 offset=f14):
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: stack[72]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c0c62 offset=f62):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0c62 offset=f62):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0c62 offset=f62):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0c62 offset=f62):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0c62 offset=f62):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0c74 offset=f74):
   java.lang.invoke.DirectMethodHandle::allocateInstance@12 (line 522)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x00007f03f91c0c74 offset=f74):
   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@1
   Locals
    - l0: a 'java/lang/invoke/DirectMethodHandle$Constructor'{0x0000000101c20690}
    - l1: stack[24],oop
    - l2: stack[48]
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91c0c74 offset=f74):
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c0c74 offset=f74):
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: stack[64],oop
    - @1: stack[56],oop
ScopeDesc(pc=0x00007f03f91c0c74 offset=f74):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[48]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
ScopeDesc(pc=0x00007f03f91c0ca9 offset=fa9):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0ca9 offset=fa9):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0ca9 offset=fa9):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0ca9 offset=fa9):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0ca9 offset=fa9):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0cb3 offset=fb3):
   jdk.incubator.vector.IntVector::fromArray0Template@26 (line 3211)
ScopeDesc(pc=0x00007f03f91c0cb3 offset=fb3):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c0cb3 offset=fb3):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c0cb3 offset=fb3):
   App::micro_vector_masked@80 (line 44)
ScopeDesc(pc=0x00007f03f91c0cbc offset=fbc):
   java.lang.invoke.DirectMethodHandle::allocateInstance@12 (line 522)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x00007f03f91c0cbc offset=fbc):
   java.lang.invoke.LambdaForm$DMH/0x00000008000d4800::newInvokeSpecial@1
   Locals
    - l0: a 'java/lang/invoke/DirectMethodHandle$Constructor'{0x0000000101c20690}
    - l1: reg rbp [10],oop
    - l2: stack[48]
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91c0cbc offset=fbc):
   java.lang.invoke.LambdaForm$MH/0x00000008000d5000::linkToTargetMethod@6
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c0cbc offset=fbc):
   jdk.incubator.vector.IntVector::fromArray@59 (line 2728)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: stack[24],oop
    - @1: stack[40],oop
ScopeDesc(pc=0x00007f03f91c0cbc offset=fbc):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
    - l4: stack[48]
    - l5: stack[64],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[40],oop
ScopeDesc(pc=0x00007f03f91c0cd6 offset=fd6):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0cd6 offset=fd6):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0cd6 offset=fd6):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0cd6 offset=fd6):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0cd6 offset=fd6):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0ce0 offset=fe0):
   jdk.incubator.vector.Int256Vector$Int256Mask::vspecies@0 (line 528)
ScopeDesc(pc=0x00007f03f91c0ce0 offset=fe0):
   jdk.incubator.vector.AbstractMask::vectorSpecies@1 (line 61)
ScopeDesc(pc=0x00007f03f91c0ce0 offset=fe0):
   jdk.incubator.vector.VectorMask::length@1 (line 154)
ScopeDesc(pc=0x00007f03f91c0ce0 offset=fe0):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@8 (line 220)
ScopeDesc(pc=0x00007f03f91c0ce0 offset=fe0):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c0ce0 offset=fe0):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c0ce0 offset=fe0):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c0cea offset=fea):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0cea offset=fea):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0cea offset=fea):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0cea offset=fea):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0cea offset=fea):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0cf4 offset=ff4):
   jdk.incubator.vector.IntVector::blendTemplate@26 (line 1895)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: a 'java/lang/Class'{0x000000010188b520} = 'jdk/incubator/vector/Int256Vector'
    - @1: a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
    - @2: a 'java/lang/Class'{0x00000001010002b0} = int
    - @3: 8
    - @4: stack[48],oop
    - @5: obj[912]
    - @6: stack[40],oop
    - @7: a 'jdk/incubator/vector/IntVector$$Lambda$64+0x00000008000acfa0'{0x0000000101c25820}
ScopeDesc(pc=0x00007f03f91c0cf4 offset=ff4):
   jdk.incubator.vector.Int256Vector::blend@11 (line 376)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c0cf4 offset=ff4):
   jdk.incubator.vector.Int256Vector::blend@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c0cf4 offset=ff4):
   jdk.incubator.vector.IntVector::lanewise@74 (line 688)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x00007f03f91c0cf4 offset=ff4):
   jdk.incubator.vector.IntVector::add@6 (line 1133)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c0cf4 offset=ff4):
   App::micro_vector_masked@188 (line 54)
   Locals
    - l0: empty
    - l1: stack[32],oop
    - l2: empty
    - l3: empty
    - l4: stack[56]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[40],oop
   Objects
    - 912: jdk.incubator.vector.Int256Vector stack[128]Wrong location type 7
ScopeDesc(pc=0x00007f03f91c0d08 offset=1008):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0d08 offset=1008):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0d08 offset=1008):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0d08 offset=1008):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0d08 offset=1008):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0d0d offset=100d):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c0d0d offset=100d):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c0d0d offset=100d):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c0d0d offset=100d):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c0d0d offset=100d):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c0d0d offset=100d):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c0d0d offset=100d):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c0d0d offset=100d):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c0d38 offset=1038):
   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[52]
    - @1: stack[72]
    - @2: NULL
ScopeDesc(pc=0x00007f03f91c0d38 offset=1038):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c0d38 offset=1038):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   Locals
    - l0: stack[56],oop
    - l1: stack[64],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007f03f91c0d38 offset=1038):
   App::micro_vector_masked@80 (line 44)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[64],oop
    - l3: stack[40],oop
    - l4: stack[52]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c0d4c offset=104c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0d4c offset=104c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0d4c offset=104c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0d4c offset=104c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0d4c offset=104c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0d51 offset=1051):
   jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
ScopeDesc(pc=0x00007f03f91c0d51 offset=1051):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c0d79 offset=1079):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0d79 offset=1079):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0d79 offset=1079):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0d79 offset=1079):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0d79 offset=1079):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0d84 offset=1084):
   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[52]
    - @1: stack[72]
    - @2: NULL
ScopeDesc(pc=0x00007f03f91c0d84 offset=1084):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c0d84 offset=1084):
   jdk.incubator.vector.IntVector::fromArray@9 (line 2689)
   Locals
    - l0: stack[56],oop
    - l1: stack[64],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007f03f91c0d84 offset=1084):
   App::micro_vector_masked@92 (line 45)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[64],oop
    - l4: stack[52]
    - l5: obj[1202]
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 1202: jdk.incubator.vector.Int256Vector stack[96]Wrong location type 7
ScopeDesc(pc=0x00007f03f91c0d98 offset=1098):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0d98 offset=1098):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0d98 offset=1098):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0d98 offset=1098):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0d98 offset=1098):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0d9d offset=109d):
   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
ScopeDesc(pc=0x00007f03f91c0d9d offset=109d):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c0dc8 offset=10c8):
   java.util.Objects::checkIndex@3 (line 359)
   Locals
    - l0: empty
    - l1: empty
   Expression stack
    - @0: stack[52]
    - @1: stack[64]
    - @2: NULL
ScopeDesc(pc=0x00007f03f91c0dc8 offset=10c8):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c0dc8 offset=10c8):
   jdk.incubator.vector.IntVector::intoArray@7 (line 2960)
   Locals
    - l0: obj[1258]
    - l1: stack[56],oop
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x00007f03f91c0dc8 offset=10c8):
   App::micro_vector_masked@107 (line 46)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[56],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: stack[52]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 1258: jdk.incubator.vector.Int256Vector stack[96]Wrong location type 7
ScopeDesc(pc=0x00007f03f91c0ddc offset=10dc):
   jdk.incubator.vector.VectorIntrinsics::requireLength@7 (line 59)
ScopeDesc(pc=0x00007f03f91c0ddc offset=10dc):
   jdk.incubator.vector.VectorMask::fromValues@11 (line 182)
ScopeDesc(pc=0x00007f03f91c0ddc offset=10dc):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
ScopeDesc(pc=0x00007f03f91c0ddc offset=10dc):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91c0de1 offset=10e1):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0de1 offset=10e1):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0de1 offset=10e1):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0de1 offset=10e1):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0de1 offset=10e1):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0de6 offset=10e6):
   jdk.incubator.vector.VectorOperators$OperatorImpl::opCode@-1 (line 774)
ScopeDesc(pc=0x00007f03f91c0de6 offset=10e6):
   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
ScopeDesc(pc=0x00007f03f91c0de6 offset=10e6):
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
ScopeDesc(pc=0x00007f03f91c0de6 offset=10e6):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c0de6 offset=10e6):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c0de6 offset=10e6):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c0de6 offset=10e6):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c0de6 offset=10e6):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c0de6 offset=10e6):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c0de6 offset=10e6):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c0de6 offset=10e6):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c0dff offset=10ff):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0dff offset=10ff):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0dff offset=10ff):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0dff offset=10ff):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0dff offset=10ff):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0e08 offset=1108):
   jdk.incubator.vector.IntVector::stOp@44 (line 355)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[56]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[64],oop
    - l6: stack[40],oop
    - l7: stack[60]
   Expression stack
    - @0: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - @1: stack[48],oop
    - @2: stack[56]
    - @3: stack[72]
    - @4: stack[64],oop
    - @5: stack[60]
ScopeDesc(pc=0x00007f03f91c0e08 offset=1108):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91c0e08 offset=1108):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c0e1c offset=111c):
   jdk.incubator.vector.VectorIntrinsics::requireLength@7 (line 59)
ScopeDesc(pc=0x00007f03f91c0e1c offset=111c):
   jdk.incubator.vector.VectorMask::fromValues@11 (line 182)
ScopeDesc(pc=0x00007f03f91c0e1c offset=111c):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
ScopeDesc(pc=0x00007f03f91c0e1c offset=111c):
   App::micro_vector_masked@149 (line 51)
ScopeDesc(pc=0x00007f03f91c0e21 offset=1121):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0e21 offset=1121):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0e21 offset=1121):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0e21 offset=1121):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0e21 offset=1121):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0e26 offset=1126):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007f03f91c0e26 offset=1126):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c0e4b offset=114b):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0e4b offset=114b):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0e4b offset=114b):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0e4b offset=114b):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0e4b offset=114b):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0e54 offset=1154):
   jdk.incubator.vector.IntVector::lambda$intoArray$82@5 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: stack[48],oop
    - @1: stack[56]
    - @2: stack[60]
ScopeDesc(pc=0x00007f03f91c0e54 offset=1154):
   jdk.incubator.vector.IntVector$$Lambda$67/0x00000008000ad640::apply@8
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91c0e54 offset=1154):
   jdk.incubator.vector.IntVector::stOp@45 (line 355)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: stack[24]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[32],oop
    - l6: stack[40],oop
    - l7: stack[28]
ScopeDesc(pc=0x00007f03f91c0e54 offset=1154):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91c0e54 offset=1154):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c0e68 offset=1168):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0e68 offset=1168):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0e68 offset=1168):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0e68 offset=1168):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0e68 offset=1168):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0e6b offset=116b):
   jdk.incubator.vector.IntVector::fromArray0Template@1 (line 3208)
ScopeDesc(pc=0x00007f03f91c0e6b offset=116b):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c0e6b offset=116b):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c0e6b offset=116b):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c0e70 offset=1170):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0e70 offset=1170):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0e70 offset=1170):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0e70 offset=1170):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0e70 offset=1170):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0e73 offset=1173):
   jdk.incubator.vector.Int256Vector::fromArray0@3 (line 789)
ScopeDesc(pc=0x00007f03f91c0e73 offset=1173):
   jdk.incubator.vector.IntVector::fromArray@24 (line 2691)
ScopeDesc(pc=0x00007f03f91c0e73 offset=1173):
   App::micro_vector_masked@92 (line 45)
ScopeDesc(pc=0x00007f03f91c0e78 offset=1178):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0e78 offset=1178):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0e78 offset=1178):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0e78 offset=1178):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0e78 offset=1178):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0e7d offset=117d):
   java.util.Objects::requireNonNull@1 (line 207)
ScopeDesc(pc=0x00007f03f91c0e7d offset=117d):
   jdk.incubator.vector.IntVector::compareTemplate@1 (line 1750)
ScopeDesc(pc=0x00007f03f91c0e7d offset=117d):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c0e7d offset=117d):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c0e7d offset=117d):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c0e7d offset=117d):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c0e7d offset=117d):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c0e7d offset=117d):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c0e7d offset=117d):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c0e88 offset=1188):
   App::micro_vector_masked@13 (line 36)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
ScopeDesc(pc=0x00007f03f91c0e9c offset=119c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0e9c offset=119c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0e9c offset=119c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0e9c offset=119c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0e9c offset=119c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0ea1 offset=11a1):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c0ea1 offset=11a1):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c0ea1 offset=11a1):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c0ea1 offset=11a1):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c0ea1 offset=11a1):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c0ea1 offset=11a1):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c0ea1 offset=11a1):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c0ea5 offset=11a5):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0ea5 offset=11a5):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0ea5 offset=11a5):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0ea5 offset=11a5):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0ea5 offset=11a5):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0eb0 offset=11b0):
   App::micro_vector_masked@65 (line 43)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: 0
    - @1: reg rbp [10],narrowoop
    - @2: stack[56]
ScopeDesc(pc=0x00007f03f91c0ec4 offset=11c4):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0ec4 offset=11c4):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0ec4 offset=11c4):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0ec4 offset=11c4):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0ec4 offset=11c4):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0ec9 offset=11c9):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c0ec9 offset=11c9):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c0ec9 offset=11c9):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c0ec9 offset=11c9):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c0ec9 offset=11c9):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c0ec9 offset=11c9):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c0ec9 offset=11c9):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c0ec9 offset=11c9):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c0ee4 offset=11e4):
   jdk.incubator.vector.IntVector$IntSpecies::iota@17 (line 3664)  reexecute=true
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x00007f03f91c0ee4 offset=11e4):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[80],oop
    - @1: stack[64]
    - @2: stack[68]
ScopeDesc(pc=0x00007f03f91c0ee4 offset=11e4):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[64]
    - l3: stack[96],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91c0ee4 offset=11e4):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91c0ef8 offset=11f8):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0ef8 offset=11f8):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0ef8 offset=11f8):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0ef8 offset=11f8):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0ef8 offset=11f8):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0efd offset=11fd):
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
ScopeDesc(pc=0x00007f03f91c0efd offset=11fd):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c0efd offset=11fd):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c0efd offset=11fd):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c0efd offset=11fd):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c0efd offset=11fd):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c0efd offset=11fd):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c0efd offset=11fd):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c0efd offset=11fd):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c0f11 offset=1211):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0f11 offset=1211):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0f11 offset=1211):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0f11 offset=1211):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0f11 offset=1211):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0f1c offset=121c):
   jdk.incubator.vector.IntVector$IntSpecies::iota@17 (line 3664)  reexecute=true
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x00007f03f91c0f1c offset=121c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[56],oop
    - @1: stack[48]
    - @2: stack[52]
ScopeDesc(pc=0x00007f03f91c0f1c offset=121c):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[48]
    - l3: stack[56],oop
    - l4: stack[80],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91c0f1c offset=121c):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: stack[48]
    - l5: stack[64],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
ScopeDesc(pc=0x00007f03f91c0f30 offset=1230):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0f30 offset=1230):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0f30 offset=1230):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0f30 offset=1230):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0f30 offset=1230):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0f35 offset=1235):
   jdk.incubator.vector.VectorOperators::opCode@-1 (line 403)
ScopeDesc(pc=0x00007f03f91c0f35 offset=1235):
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
ScopeDesc(pc=0x00007f03f91c0f35 offset=1235):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c0f35 offset=1235):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c0f35 offset=1235):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c0f35 offset=1235):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c0f35 offset=1235):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c0f35 offset=1235):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c0f35 offset=1235):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c0f35 offset=1235):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c0f4e offset=124e):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0f4e offset=124e):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0f4e offset=124e):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0f4e offset=124e):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0f4e offset=124e):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0f58 offset=1258):
   jdk.incubator.vector.IntVector::lanewise@70 (line 688)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: stack[40],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: stack[56],oop
    - @1: stack[56],oop
    - @2: a 'jdk/incubator/vector/VectorOperators$AssociativeImpl'{0x0000000101985d48}
    - @3: stack[64],oop
ScopeDesc(pc=0x00007f03f91c0f58 offset=1258):
   jdk.incubator.vector.IntVector::add@6 (line 1133)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c0f58 offset=1258):
   App::micro_vector_masked@188 (line 54)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[24]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[40],oop
ScopeDesc(pc=0x00007f03f91c0f6c offset=126c):
   jdk.incubator.vector.AbstractSpecies::laneCount@1 (line 125)
ScopeDesc(pc=0x00007f03f91c0f6c offset=126c):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
ScopeDesc(pc=0x00007f03f91c0f6c offset=126c):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c0f71 offset=1271):
   jdk.incubator.vector.IntVector::compareTemplate@6 (line 1751)
ScopeDesc(pc=0x00007f03f91c0f71 offset=1271):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c0f71 offset=1271):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c0f71 offset=1271):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c0f71 offset=1271):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c0f71 offset=1271):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c0f71 offset=1271):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c0f71 offset=1271):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c0f9e offset=129e):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c0f9e offset=129e):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c0f9e offset=129e):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c0f9e offset=129e):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c0f9e offset=129e):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c0fa8 offset=12a8):
   App::micro_vector_masked@30 (line 37)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: stack[48],oop
    - l8: 0
    - l9: empty
   Expression stack
    - @0: 0
    - @1: stack[56]
ScopeDesc(pc=0x00007f03f91c0fe4 offset=12e4):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
ScopeDesc(pc=0x00007f03f91c0fe4 offset=12e4):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c0fe9 offset=12e9):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
ScopeDesc(pc=0x00007f03f91c0fe9 offset=12e9):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c1015 offset=1315):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1015 offset=1315):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1015 offset=1315):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1015 offset=1315):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1015 offset=1315):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1020 offset=1320):
   jdk.incubator.vector.VectorMask::fromLong@104 (line 255)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: stack[56],oop
    - l4: empty
    - l5: 0
    - l6: stack[72],long
    - l7: stack[64],oop
    - l8: 0
   Expression stack
    - @0: 0
    - @1: stack[52]
ScopeDesc(pc=0x00007f03f91c1020 offset=1320):
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: stack[48]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c103f offset=133f):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c103f offset=133f):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c103f offset=133f):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c103f offset=133f):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c103f offset=133f):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1044 offset=1344):
   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
ScopeDesc(pc=0x00007f03f91c1044 offset=1344):
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
ScopeDesc(pc=0x00007f03f91c1044 offset=1344):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c1044 offset=1344):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c1044 offset=1344):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c1044 offset=1344):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c1044 offset=1344):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c1044 offset=1344):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c1044 offset=1344):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c1044 offset=1344):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c1060 offset=1360):
   jdk.incubator.vector.IntVector::stOp@23 (line 353)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: stack[56]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[40],oop
    - l6: stack[48],oop
    - l7: 0
   Expression stack
    - @0: 0
    - @1: reg rbp [10],int
ScopeDesc(pc=0x00007f03f91c1060 offset=1360):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91c1060 offset=1360):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c113b offset=143b):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c113b offset=143b):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c113b offset=143b):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c113b offset=143b):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c113b offset=143b):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1140 offset=1440):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c1140 offset=1440):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c1140 offset=1440):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c1140 offset=1440):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c1140 offset=1440):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c1140 offset=1440):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c1140 offset=1440):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c1140 offset=1440):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c1160 offset=1460):
   App::micro_vector_masked@70 (line 43)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: 0
    - @1: stack[48]
ScopeDesc(pc=0x00007f03f91c117b offset=147b):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c117b offset=147b):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c117b offset=147b):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c117b offset=147b):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c117b offset=147b):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1180 offset=1480):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c1180 offset=1480):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c1180 offset=1480):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c1180 offset=1480):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c1180 offset=1480):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c1180 offset=1480):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c1180 offset=1480):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c1180 offset=1480):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c1189 offset=1489):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1189 offset=1489):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1189 offset=1489):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1189 offset=1489):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1189 offset=1489):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1194 offset=1494):
   jdk.incubator.vector.VectorIntrinsics::roundDown@5 (line 106)  reexecute=true
   Locals
    - l0: stack[60]
    - l1: stack[56]
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x00007f03f91c1194 offset=1494):
   jdk.incubator.vector.AbstractSpecies::loopBound@5 (line 203)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x00007f03f91c1194 offset=1494):
   App::micro_vector_masked@65 (line 43)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: 0
ScopeDesc(pc=0x00007f03f91c11a8 offset=14a8):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c11a8 offset=14a8):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c11a8 offset=14a8):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c11a8 offset=14a8):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c11a8 offset=14a8):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c11ad offset=14ad):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c11ad offset=14ad):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c11ad offset=14ad):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c11ad offset=14ad):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c11ad offset=14ad):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c11ad offset=14ad):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c11ad offset=14ad):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c11ad offset=14ad):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c11fe offset=14fe):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c11fe offset=14fe):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c11fe offset=14fe):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c11fe offset=14fe):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c11fe offset=14fe):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1208 offset=1508):
   jdk.incubator.vector.IntVector::fromArray@7 (line 2721)  reexecute=true
   Locals
    - l0: stack[88],oop
    - l1: stack[48],oop
    - l2: stack[56]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   Expression stack
    - @0: stack[44]
ScopeDesc(pc=0x00007f03f91c1208 offset=1508):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[44]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91c121c offset=151c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c121c offset=151c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c121c offset=151c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c121c offset=151c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c121c offset=151c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1221 offset=1521):
   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
ScopeDesc(pc=0x00007f03f91c1221 offset=1521):
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
ScopeDesc(pc=0x00007f03f91c1221 offset=1521):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c1221 offset=1521):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c1221 offset=1521):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c1221 offset=1521):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c1221 offset=1521):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c1221 offset=1521):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c1221 offset=1521):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c1221 offset=1521):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c1249 offset=1549):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1249 offset=1549):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1249 offset=1549):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1249 offset=1549):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1249 offset=1549):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1254 offset=1554):
   jdk.incubator.vector.VectorMask::fromLong@15 (line 242)  reexecute=true
   Locals
    - l0: empty
    - l1: 0
    - l2: stack[72],long
    - l3: stack[56],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   Expression stack
    - @0: stack[64]
    - @1: 64
ScopeDesc(pc=0x00007f03f91c1254 offset=1554):
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: stack[48]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c127a offset=157a):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c127a offset=157a):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c127a offset=157a):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c127a offset=157a):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c127a offset=157a):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c127f offset=157f):
   java.util.Objects::checkIndex@3 (line 359)
ScopeDesc(pc=0x00007f03f91c127f offset=157f):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 74)
ScopeDesc(pc=0x00007f03f91c127f offset=157f):
   jdk.incubator.vector.VectorMask::fromArray@16 (line 207)
ScopeDesc(pc=0x00007f03f91c127f offset=157f):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c12a2 offset=15a2):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c12a2 offset=15a2):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c12a2 offset=15a2):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c12a2 offset=15a2):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c12a2 offset=15a2):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c12ac offset=15ac):
   jdk.incubator.vector.VectorMask::fromLong@40 (line 247)  reexecute=true
   Locals
    - l0: empty
    - l1: 0
    - l2: stack[72],long
    - l3: stack[64],oop
    - l4: stack[60]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x00007f03f91c12ac offset=15ac):
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: stack[40],oop
    - l3: stack[48],oop
    - l4: stack[56]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c12c0 offset=15c0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c12c0 offset=15c0):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c12c0 offset=15c0):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c12c0 offset=15c0):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c12c0 offset=15c0):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c12c5 offset=15c5):
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
ScopeDesc(pc=0x00007f03f91c12c5 offset=15c5):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c12c5 offset=15c5):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c12c5 offset=15c5):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c12c5 offset=15c5):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c12c5 offset=15c5):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c12c5 offset=15c5):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c12c5 offset=15c5):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c12c5 offset=15c5):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c12cf offset=15cf):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c12cf offset=15cf):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c12cf offset=15cf):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c12cf offset=15cf):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c12cf offset=15cf):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c12d8 offset=15d8):
   jdk.incubator.vector.IntVector::fromArray@20 (line 2721)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[64]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
   Expression stack
    - @0: stack[64]
    - @1: reg rbp [10],int
ScopeDesc(pc=0x00007f03f91c12d8 offset=15d8):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91c12ec offset=15ec):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c12ec offset=15ec):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c12ec offset=15ec):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c12ec offset=15ec):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c12ec offset=15ec):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c12f1 offset=15f1):
   jdk.incubator.vector.IntVector::opCode@0 (line 62)
ScopeDesc(pc=0x00007f03f91c12f1 offset=15f1):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c12f1 offset=15f1):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c12f1 offset=15f1):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c12f1 offset=15f1):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c12f1 offset=15f1):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c12f1 offset=15f1):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c12f1 offset=15f1):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c12f1 offset=15f1):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c130c offset=160c):
   jdk.incubator.vector.IntVector$IntSpecies::iota@6 (line 3662)  reexecute=true
   Locals
    - l0: stack[104],oop
   Expression stack
    - @0: reg rbp [10],narrowoop
    - @1: a 'java/lang/Class'{0x000000010188fcd0} = 'jdk/incubator/vector/IntMaxVector'
ScopeDesc(pc=0x00007f03f91c130c offset=160c):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[80],oop
    - @1: stack[64]
    - @2: stack[68]
ScopeDesc(pc=0x00007f03f91c130c offset=160c):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[64]
    - l3: stack[96],oop
    - l4: stack[104],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91c130c offset=160c):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
ScopeDesc(pc=0x00007f03f91c1320 offset=1620):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1320 offset=1620):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1320 offset=1620):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1320 offset=1620):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1320 offset=1620):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1325 offset=1625):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91c1339 offset=1639):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1339 offset=1639):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1339 offset=1639):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1339 offset=1639):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1339 offset=1639):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1344 offset=1644):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@150 (line 240)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[64]
    - l2: stack[68]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: obj[1217]
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x00007f03f91c1344 offset=1644):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91c1344 offset=1644):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[56],oop
    - l2: stack[64]
    - l3: stack[80],oop
    - l4: stack[88],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91c1344 offset=1644):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[80],oop
   Objects
    - 1217: jdk.incubator.vector.Int256Vector$Int256Mask stack[96]Wrong location type 7
ScopeDesc(pc=0x00007f03f91c1358 offset=1658):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1358 offset=1658):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1358 offset=1658):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1358 offset=1658):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1358 offset=1658):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c135d offset=165d):
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
ScopeDesc(pc=0x00007f03f91c135d offset=165d):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c135d offset=165d):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c135d offset=165d):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c135d offset=165d):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c135d offset=165d):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c135d offset=165d):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c135d offset=165d):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c135d offset=165d):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c1374 offset=1674):
   jdk.incubator.vector.IntVector::fromArray@20 (line 2721)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[48]
    - l3: stack[56],oop
    - l4: stack[80],oop
    - l5: empty
   Expression stack
    - @0: stack[48]
    - @1: reg rbp [10],int
ScopeDesc(pc=0x00007f03f91c1374 offset=1674):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: stack[48]
    - l5: stack[64],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
ScopeDesc(pc=0x00007f03f91c1388 offset=1688):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1388 offset=1688):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1388 offset=1688):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1388 offset=1688):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1388 offset=1688):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c138d offset=168d):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c138d offset=168d):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c138d offset=168d):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c138d offset=168d):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c138d offset=168d):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c138d offset=168d):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c138d offset=168d):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c138d offset=168d):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c13a1 offset=16a1):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c13a1 offset=16a1):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c13a1 offset=16a1):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c13a1 offset=16a1):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c13a1 offset=16a1):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c13ac offset=16ac):
   jdk.incubator.vector.IntVector$IntSpecies::iota@6 (line 3662)  reexecute=true
   Locals
    - l0: stack[96],oop
   Expression stack
    - @0: reg rbp [10],narrowoop
    - @1: a 'java/lang/Class'{0x000000010188fcd0} = 'jdk/incubator/vector/IntMaxVector'
ScopeDesc(pc=0x00007f03f91c13ac offset=16ac):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@8 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: 1
    - l4: empty
   Expression stack
    - @0: stack[56],oop
    - @1: stack[48]
    - @2: stack[52]
ScopeDesc(pc=0x00007f03f91c13ac offset=16ac):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[48]
    - l3: stack[56],oop
    - l4: stack[96],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91c13ac offset=16ac):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: stack[48]
    - l5: stack[64],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
ScopeDesc(pc=0x00007f03f91c13c0 offset=16c0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c13c0 offset=16c0):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c13c0 offset=16c0):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c13c0 offset=16c0):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c13c0 offset=16c0):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c13c5 offset=16c5):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91c13e9 offset=16e9):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c13e9 offset=16e9):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c13e9 offset=16e9):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c13e9 offset=16e9):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c13e9 offset=16e9):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c13f4 offset=16f4):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@150 (line 240)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[48]
    - l2: stack[52]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: obj[1123]
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x00007f03f91c13f4 offset=16f4):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91c13f4 offset=16f4):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
   Locals
    - l0: empty
    - l1: stack[40],oop
    - l2: stack[48]
    - l3: stack[72],oop
    - l4: stack[80],oop
    - l5: empty
ScopeDesc(pc=0x00007f03f91c13f4 offset=16f4):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: stack[48]
    - l5: stack[56],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[72],oop
   Objects
    - 1123: jdk.incubator.vector.Int256Vector$Int256Mask stack[96]Wrong location type 7
ScopeDesc(pc=0x00007f03f91c141d offset=171d):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c141d offset=171d):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c141d offset=171d):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c141d offset=171d):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c141d offset=171d):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1428 offset=1728):
   jdk.incubator.vector.IntVector::intoArray@4 (line 3000)  reexecute=true
   Locals
    - l0: obj[1237]
    - l1: stack[24],oop
    - l2: stack[56]
    - l3: stack[40],oop
    - l4: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x00007f03f91c1428 offset=1728):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 1237: jdk.incubator.vector.Int256Vector stack[64]Wrong location type 7
ScopeDesc(pc=0x00007f03f91c1440 offset=1740):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1440 offset=1740):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1440 offset=1740):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1440 offset=1740):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1440 offset=1740):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1445 offset=1745):
   jdk.incubator.vector.VectorMask::fromArray@21 (line 209)
ScopeDesc(pc=0x00007f03f91c1445 offset=1745):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c145b offset=175b):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c145b offset=175b):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c145b offset=175b):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c145b offset=175b):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c145b offset=175b):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1464 offset=1764):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@150 (line 240)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[56]
    - l2: stack[168]
    - l3: empty
    - l4: 1
    - l5: empty
    - l6: obj[1175]
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x00007f03f91c1464 offset=1764):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91c1464 offset=1764):
   jdk.incubator.vector.IntVector::intoArray@29 (line 3005)
   Locals
    - l0: obj[1174]
    - l1: stack[24],oop
    - l2: stack[56]
    - l3: stack[40],oop
    - l4: empty
ScopeDesc(pc=0x00007f03f91c1464 offset=1764):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Objects
    - 1174: jdk.incubator.vector.Int256Vector stack[96]Wrong location type 7
    - 1175: jdk.incubator.vector.Int256Vector$Int256Mask stack[64]Wrong location type 7
ScopeDesc(pc=0x00007f03f91c1478 offset=1778):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1478 offset=1778):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1478 offset=1778):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1478 offset=1778):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1478 offset=1778):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c147d offset=177d):
   jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
ScopeDesc(pc=0x00007f03f91c147d offset=177d):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c147d offset=177d):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c147d offset=177d):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c147d offset=177d):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c147d offset=177d):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c147d offset=177d):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c147d offset=177d):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c14a5 offset=17a5):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c14a5 offset=17a5):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c14a5 offset=17a5):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c14a5 offset=17a5):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c14a5 offset=17a5):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c14b0 offset=17b0):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[48],oop
ScopeDesc(pc=0x00007f03f91c14b0 offset=17b0):
   App::micro_vector_masked@52 (line 40)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c14c4 offset=17c4):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c14c4 offset=17c4):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c14c4 offset=17c4):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c14c4 offset=17c4):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c14c4 offset=17c4):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c14c9 offset=17c9):
   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
ScopeDesc(pc=0x00007f03f91c14c9 offset=17c9):
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
ScopeDesc(pc=0x00007f03f91c14c9 offset=17c9):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c14c9 offset=17c9):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c14c9 offset=17c9):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c14c9 offset=17c9):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c14c9 offset=17c9):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c14c9 offset=17c9):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c14c9 offset=17c9):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c14c9 offset=17c9):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c14e7 offset=17e7):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c14e7 offset=17e7):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c14e7 offset=17e7):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c14e7 offset=17e7):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c14e7 offset=17e7):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c14f0 offset=17f0):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[56],oop
ScopeDesc(pc=0x00007f03f91c14f0 offset=17f0):
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c14f0 offset=17f0):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x00007f03f91c14f0 offset=17f0):
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[40],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c1504 offset=1804):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1504 offset=1804):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1504 offset=1804):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1504 offset=1804):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1504 offset=1804):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1509 offset=1809):
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
ScopeDesc(pc=0x00007f03f91c1509 offset=1809):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c1509 offset=1809):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c1509 offset=1809):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c1509 offset=1809):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c1509 offset=1809):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c1509 offset=1809):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c1509 offset=1809):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c1509 offset=1809):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c1520 offset=1820):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   Locals
    - l0: reg rbp [10],narrowoop
    - l1: stack[56],oop
    - l2: stack[52]
    - l3: stack[72],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: reg rbp [10],narrowoop
ScopeDesc(pc=0x00007f03f91c1520 offset=1820):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: stack[24],oop
    - l1: stack[32],oop
    - l2: empty
    - l3: stack[40],oop
    - l4: stack[52]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[72],oop
ScopeDesc(pc=0x00007f03f91c1534 offset=1834):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1534 offset=1834):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1534 offset=1834):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1534 offset=1834):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1534 offset=1834):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1539 offset=1839):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
ScopeDesc(pc=0x00007f03f91c1539 offset=1839):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c1564 offset=1864):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   Locals
    - l0: stack[68],narrowoop
    - l1: stack[32],oop
    - l2: stack[28]
    - l3: stack[56],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: stack[68],narrowoop
ScopeDesc(pc=0x00007f03f91c1564 offset=1864):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[40],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
ScopeDesc(pc=0x00007f03f91c158e offset=188e):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c158e offset=188e):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c158e offset=188e):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c158e offset=188e):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c158e offset=188e):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1591 offset=1891):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91c15b9 offset=18b9):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c15b9 offset=18b9):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c15b9 offset=18b9):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c15b9 offset=18b9):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c15b9 offset=18b9):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c15c4 offset=18c4):
   jdk.incubator.vector.AbstractVector::sameSpecies@8 (line 133)  reexecute=true
   Locals
    - l0: stack[80],oop
    - l1: stack[64],oop
    - l2: empty
   Expression stack
    - @0: reg rbp [10],oop
    - @1: a 'java/lang/Class'{0x000000010188b520} = 'jdk/incubator/vector/Int256Vector'
ScopeDesc(pc=0x00007f03f91c15c4 offset=18c4):
   jdk.incubator.vector.AbstractVector::check@2 (line 124)
   Locals
    - l0: stack[96],oop
    - l1: stack[64],oop
ScopeDesc(pc=0x00007f03f91c15c4 offset=18c4):
   jdk.incubator.vector.IntVector::lanewiseTemplate@7 (line 602)
   Locals
    - l0: stack[88],oop
    - l1: a 'jdk/incubator/vector/VectorOperators$AssociativeImpl'{0x0000000101985d48}
    - l2: empty
    - l3: stack[80],oop
    - l4: empty
    - l5: empty
    - l6: empty
ScopeDesc(pc=0x00007f03f91c15c4 offset=18c4):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c15c4 offset=18c4):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c15c4 offset=18c4):
   jdk.incubator.vector.IntVector::lanewise@70 (line 688)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: stack[40],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: stack[64],oop
ScopeDesc(pc=0x00007f03f91c15c4 offset=18c4):
   jdk.incubator.vector.IntVector::add@6 (line 1133)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c15c4 offset=18c4):
   App::micro_vector_masked@188 (line 54)
   Locals
    - l0: empty
    - l1: stack[24],oop
    - l2: empty
    - l3: empty
    - l4: stack[32]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[40],oop
ScopeDesc(pc=0x00007f03f91c15d8 offset=18d8):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c15d8 offset=18d8):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c15d8 offset=18d8):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c15d8 offset=18d8):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c15d8 offset=18d8):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c15dd offset=18dd):
   jdk.incubator.vector.IntVector::opCode@-1 (line 62)
ScopeDesc(pc=0x00007f03f91c15dd offset=18dd):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c15dd offset=18dd):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c15dd offset=18dd):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c15dd offset=18dd):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c15dd offset=18dd):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c15dd offset=18dd):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c15dd offset=18dd):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c15dd offset=18dd):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c15f4 offset=18f4):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@4 (line 569)
   Locals
    - l0: empty
   Expression stack
    - @0: stack[28],narrowoop
ScopeDesc(pc=0x00007f03f91c15f4 offset=18f4):
   jdk.incubator.vector.IntVector::stOp@10 (line 352)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[56]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[32],oop
    - l6: empty
    - l7: empty
ScopeDesc(pc=0x00007f03f91c15f4 offset=18f4):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91c15f4 offset=18f4):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c1608 offset=1908):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1608 offset=1908):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1608 offset=1908):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1608 offset=1908):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1608 offset=1908):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c160d offset=190d):
   java.util.Objects::requireNonNull@1 (line 207)
ScopeDesc(pc=0x00007f03f91c160d offset=190d):
   jdk.incubator.vector.IntVector::compareTemplate@1 (line 1750)
ScopeDesc(pc=0x00007f03f91c160d offset=190d):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c160d offset=190d):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c160d offset=190d):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c160d offset=190d):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c160d offset=190d):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c160d offset=190d):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c160d offset=190d):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c1618 offset=1918):
   App::micro_vector_masked@13 (line 36)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91c162c offset=192c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c162c offset=192c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c162c offset=192c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c162c offset=192c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c162c offset=192c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1631 offset=1931):
   jdk.incubator.vector.AbstractVector::check@5 (line 124)
ScopeDesc(pc=0x00007f03f91c1631 offset=1931):
   jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
ScopeDesc(pc=0x00007f03f91c1631 offset=1931):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c1631 offset=1931):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c1631 offset=1931):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c1631 offset=1931):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c1631 offset=1931):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c1631 offset=1931):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c1631 offset=1931):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c164a offset=194a):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c164a offset=194a):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c164a offset=194a):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c164a offset=194a):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c164a offset=194a):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1654 offset=1954):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91c1654 offset=1954):
   App::micro_vector_masked@52 (line 40)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[32],oop
    - l3: stack[48],oop
    - l4: 0
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c1668 offset=1968):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1668 offset=1968):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1668 offset=1968):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1668 offset=1968):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1668 offset=1968):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c166d offset=196d):
   jdk.incubator.vector.AbstractVector::check@14 (line 127)
ScopeDesc(pc=0x00007f03f91c166d offset=196d):
   jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
ScopeDesc(pc=0x00007f03f91c166d offset=196d):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c166d offset=196d):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c166d offset=196d):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c166d offset=196d):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c166d offset=196d):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c166d offset=196d):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c166d offset=196d):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c1678 offset=1978):
   App::micro_vector_masked@64 (line 43)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: empty
    - @1: empty
    - @2: NULL
ScopeDesc(pc=0x00007f03f91c168c offset=198c):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c168c offset=198c):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c168c offset=198c):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c168c offset=198c):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c168c offset=198c):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1691 offset=1991):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c1691 offset=1991):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c1691 offset=1991):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c1691 offset=1991):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c1691 offset=1991):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c1691 offset=1991):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c1691 offset=1991):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c1691 offset=1991):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c1693 offset=1993):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1693 offset=1993):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1693 offset=1993):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1693 offset=1993):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1693 offset=1993):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c169c offset=199c):
   App::micro_vector_masked@65 (line 43)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: empty
    - @1: NULL
    - @2: reg rbp [10],int
ScopeDesc(pc=0x00007f03f91c16cc offset=19cc):
   jdk.incubator.vector.VectorMask::fromArray@49 (line 208)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91c16cc offset=19cc):
   jdk.incubator.vector.VectorMask::fromValues@17 (line 183)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c16cc offset=19cc):
   jdk.incubator.vector.VectorMask::fromLong@141 (line 259)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x00007f03f91c16cc offset=19cc):
   App::micro_vector_masked@149 (line 51)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: stack[56],oop
    - l3: stack[40],oop
    - l4: stack[64]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c16e0 offset=19e0):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c16e0 offset=19e0):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c16e0 offset=19e0):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c16e0 offset=19e0):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c16e0 offset=19e0):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c16e5 offset=19e5):
   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
ScopeDesc(pc=0x00007f03f91c16e5 offset=19e5):
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
ScopeDesc(pc=0x00007f03f91c16e5 offset=19e5):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c16e5 offset=19e5):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c16e5 offset=19e5):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c16e5 offset=19e5):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c16e5 offset=19e5):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c16e5 offset=19e5):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c16e5 offset=19e5):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c16e5 offset=19e5):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c1717 offset=1a17):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1717 offset=1a17):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1717 offset=1a17):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1717 offset=1a17):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1717 offset=1a17):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1720 offset=1a20):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   Locals
    - l0: NULL
    - l1: stack[48],oop
    - l2: stack[44]
    - l3: stack[64],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91c1720 offset=1a20):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: reg rbp [10],oop
    - l1: stack[24],oop
    - l2: empty
    - l3: stack[32],oop
    - l4: stack[44]
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[64],oop
ScopeDesc(pc=0x00007f03f91c1734 offset=1a34):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1734 offset=1a34):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1734 offset=1a34):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1734 offset=1a34):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1734 offset=1a34):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1739 offset=1a39):
   jdk.incubator.vector.AbstractVector::check@5 (line 124)
ScopeDesc(pc=0x00007f03f91c1739 offset=1a39):
   jdk.incubator.vector.IntVector::compareTemplate@20 (line 1753)
ScopeDesc(pc=0x00007f03f91c1739 offset=1a39):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c1739 offset=1a39):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c1739 offset=1a39):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c1739 offset=1a39):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c1739 offset=1a39):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c1739 offset=1a39):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c1739 offset=1a39):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c1744 offset=1a44):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: empty
    - @1: NULL
ScopeDesc(pc=0x00007f03f91c1744 offset=1a44):
   App::micro_vector_masked@163 (line 52)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c1758 offset=1a58):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1758 offset=1a58):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1758 offset=1a58):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1758 offset=1a58):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1758 offset=1a58):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c175d offset=1a5d):
   jdk.incubator.vector.VectorOperators::opCode@6 (line 403)
ScopeDesc(pc=0x00007f03f91c175d offset=1a5d):
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
ScopeDesc(pc=0x00007f03f91c175d offset=1a5d):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c175d offset=1a5d):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c175d offset=1a5d):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c175d offset=1a5d):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c175d offset=1a5d):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c175d offset=1a5d):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c175d offset=1a5d):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c175d offset=1a5d):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c1776 offset=1a76):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1776 offset=1a76):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1776 offset=1a76):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1776 offset=1a76):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1776 offset=1a76):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1780 offset=1a80):
   jdk.incubator.vector.IntVector::fromArray@1 (line 2720)
   Locals
    - l0: NULL
    - l1: stack[32],oop
    - l2: stack[28]
    - l3: stack[56],oop
    - l4: empty
    - l5: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91c1780 offset=1a80):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: empty
    - l3: empty
    - l4: stack[28]
    - l5: stack[64],oop
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: stack[56],oop
ScopeDesc(pc=0x00007f03f91c1794 offset=1a94):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1794 offset=1a94):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1794 offset=1a94):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1794 offset=1a94):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1794 offset=1a94):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1799 offset=1a99):
   jdk.incubator.vector.VectorMask::fromArray@6 (line 206)
ScopeDesc(pc=0x00007f03f91c1799 offset=1a99):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c17a4 offset=1aa4):
   jdk.incubator.vector.IntVector::fromArray@12 (line 2721)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: empty
    - @1: NULL
ScopeDesc(pc=0x00007f03f91c17a4 offset=1aa4):
   App::micro_vector_masked@177 (line 53)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c17b8 offset=1ab8):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c17b8 offset=1ab8):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c17b8 offset=1ab8):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c17b8 offset=1ab8):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c17b8 offset=1ab8):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c17bd offset=1abd):
   jdk.incubator.vector.VectorOperators::opCode@0 (line 403)
ScopeDesc(pc=0x00007f03f91c17bd offset=1abd):
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
ScopeDesc(pc=0x00007f03f91c17bd offset=1abd):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c17bd offset=1abd):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c17bd offset=1abd):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c17bd offset=1abd):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c17bd offset=1abd):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c17bd offset=1abd):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c17bd offset=1abd):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c17bd offset=1abd):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c17c8 offset=1ac8):
   App::micro_vector_masked@188 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   Expression stack
    - @0: NULL
    - @1: reg rbp [10],oop
    - @2: stack[40],oop
ScopeDesc(pc=0x00007f03f91c17dc offset=1adc):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c17dc offset=1adc):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c17dc offset=1adc):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c17dc offset=1adc):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c17dc offset=1adc):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c17e1 offset=1ae1):
   App::micro_vector_masked@65 (line 43)
ScopeDesc(pc=0x00007f03f91c17ec offset=1aec):
   jdk.incubator.vector.IntVector::lanewiseTemplate@7 (line 602)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   Expression stack
    - @0: NULL
    - @1: reg rbp [10],oop
ScopeDesc(pc=0x00007f03f91c17ec offset=1aec):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 279)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c17ec offset=1aec):
   jdk.incubator.vector.Int256Vector::lanewise@3 (line 41)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c17ec offset=1aec):
   jdk.incubator.vector.IntVector::lanewise@70 (line 688)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   Expression stack
    - @0: empty
ScopeDesc(pc=0x00007f03f91c17ec offset=1aec):
   jdk.incubator.vector.IntVector::add@6 (line 1133)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x00007f03f91c17ec offset=1aec):
   App::micro_vector_masked@188 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c1800 offset=1b00):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1800 offset=1b00):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1800 offset=1b00):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1800 offset=1b00):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1800 offset=1b00):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1805 offset=1b05):
   jdk.incubator.vector.IntVector::opCode@7 (line 62)
ScopeDesc(pc=0x00007f03f91c1805 offset=1b05):
   jdk.incubator.vector.IntVector::compareTemplate@25 (line 1754)
ScopeDesc(pc=0x00007f03f91c1805 offset=1b05):
   jdk.incubator.vector.Int256Vector::compare@5 (line 357)
ScopeDesc(pc=0x00007f03f91c1805 offset=1b05):
   jdk.incubator.vector.Int256Vector::compare@3 (line 41)
ScopeDesc(pc=0x00007f03f91c1805 offset=1b05):
   jdk.incubator.vector.AbstractMask::checkIndex0@25 (line 258)
ScopeDesc(pc=0x00007f03f91c1805 offset=1b05):
   jdk.incubator.vector.AbstractMask::checkIndexByLane@25 (line 223)
ScopeDesc(pc=0x00007f03f91c1805 offset=1b05):
   jdk.incubator.vector.IntVector::checkMaskFromIndexSize@12 (line 3312)
ScopeDesc(pc=0x00007f03f91c1805 offset=1b05):
   jdk.incubator.vector.IntVector::fromArray@51 (line 2727)
ScopeDesc(pc=0x00007f03f91c1805 offset=1b05):
   App::micro_vector_masked@163 (line 52)
ScopeDesc(pc=0x00007f03f91c180f offset=1b0f):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c180f offset=1b0f):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c180f offset=1b0f):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c180f offset=1b0f):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c180f offset=1b0f):
   App::micro_vector_masked@196 (line 54)
ScopeDesc(pc=0x00007f03f91c1818 offset=1b18):
   jdk.incubator.vector.Int256Vector$Int256Mask::getBits@4 (line 569)
   Locals
    - l0: empty
   Expression stack
    - @0: NULL
ScopeDesc(pc=0x00007f03f91c1818 offset=1b18):
   jdk.incubator.vector.IntVector::stOp@10 (line 352)
   Locals
    - l0: empty
    - l1: reg rbp [10],oop
    - l2: stack[56]
    - l3: empty
    - l4: a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
    - l5: stack[32],oop
    - l6: empty
    - l7: empty
ScopeDesc(pc=0x00007f03f91c1818 offset=1b18):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x00007f03f91c1818 offset=1b18):
   App::micro_vector_masked@196 (line 54)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x00007f03f91c182c offset=1b2c):
   jdk.incubator.vector.VectorMask::fromArray@41 (line 209)
ScopeDesc(pc=0x00007f03f91c182c offset=1b2c):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c1836 offset=1b36):
   jdk.incubator.vector.VectorMask::fromArray@46 (line 208)
ScopeDesc(pc=0x00007f03f91c1836 offset=1b36):
   App::micro_vector_masked@52 (line 40)
ScopeDesc(pc=0x00007f03f91c1838 offset=1b38):
   App::micro_vector_masked@46 (line 40)
ScopeDesc(pc=0x00007f03f91c183d offset=1b3d):
   App::micro_vector_masked@30 (line 37)
ScopeDesc(pc=0x00007f03f91c1842 offset=1b42):
   App::micro_vector_masked@46 (line 40)
ScopeDesc(pc=0x00007f03f91c184c offset=1b4c):
   App::micro_vector_masked@30 (line 37)
ScopeDesc(pc=0x00007f03f91c1851 offset=1b51):
   App::micro_vector_masked@46 (line 40)
ScopeDesc(pc=0x00007f03f91c1854 offset=1b54):
   App::micro_vector_masked@30 (line 37)
ScopeDesc(pc=0x00007f03f91c1864 offset=1b64):
   jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload@-1 (line 101)
ScopeDesc(pc=0x00007f03f91c1864 offset=1b64):
   jdk.incubator.vector.Int256Vector::vec@1 (line 117)
ScopeDesc(pc=0x00007f03f91c1864 offset=1b64):
   jdk.incubator.vector.IntVector::stOp@1 (line 351)
ScopeDesc(pc=0x00007f03f91c1864 offset=1b64):
   jdk.incubator.vector.IntVector::intoArray@41 (line 3006)
ScopeDesc(pc=0x00007f03f91c1864 offset=1b64):
   App::micro_vector_masked@196 (line 54)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007f03f91bf888: 0020
relocInfo@0x00007f03f91bf888 [type=0(none) addr=0x00007f03f91bfd00 offset=32]
         @0x00007f03f91bf88a: 6014
relocInfo@0x00007f03f91bf88a [type=6(runtime_call) addr=0x00007f03f91bfd14 offset=20] | [destination=0x00007f03f9115920]
         @0x00007f03f91bf88c: f00acc37
relocInfo@0x00007f03f91bf88e [type=12(metadata) addr=0x00007f03f91bfd4b offset=55 format=3 data=10] | [metadata_addr=0x00007f03f91c1978 *=0x0000000800094b80 offset=0]metadata_value=0x0000000800094b80: 'jdk/incubator/vector/IntVector$IntSpecies'
         @0x00007f03f91bf890: f011cc83
relocInfo@0x00007f03f91bf892 [type=12(metadata) addr=0x00007f03f91bfdce offset=131 format=3 data=17] | [metadata_addr=0x00007f03f91c19b0 *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007f03f91bf894: 94c0
relocInfo@0x00007f03f91bf894 [type=9(section_word) addr=0x00007f03f91bfe8e offset=192 format=1] | [target=0x00007f03f91bfce0]
         @0x00007f03f91bf896: a047
relocInfo@0x00007f03f91bf896 [type=10(poll) addr=0x00007f03f91bfed5 offset=71]
         @0x00007f03f91bf898: f80305fe48707f047431
relocInfo@0x00007f03f91bf8a0 [type=7(external_word) addr=0x00007f03f91bff06 offset=49 format=1 data={05fe48707f04}] | [target=0x00007f0405fe4870]
         @0x00007f03f91bf8a2: f803055921807f04700d
relocInfo@0x00007f03f91bf8aa [type=7(external_word) addr=0x00007f03f91bff13 offset=13 data={055921807f04}] | [target=0x00007f0405592180]
         @0x00007f03f91bf8ac: 640e
relocInfo@0x00007f03f91bf8ac [type=6(runtime_call) addr=0x00007f03f91bff21 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bf8ae: 100c
relocInfo@0x00007f03f91bf8ae [type=1(oop) addr=0x00007f03f91bff2d offset=12] | [oop_addr=0x00007f03f91bff2f *=0x00000001010002b0 offset=0]
         @0x00007f03f91bf8b0: 1029
relocInfo@0x00007f03f91bf8b0 [type=1(oop) addr=0x00007f03f91bff56 offset=41] | [oop_addr=0x00007f03f91bff58 *=0x0000000101bdc6a0 offset=0]
         @0x00007f03f91bf8b2: 4415
relocInfo@0x00007f03f91bf8b2 [type=4(static_call) addr=0x00007f03f91bff6b offset=21 format=1] | [destination=0x00007f03f918f760 metadata=0x0000000000000000]
         @0x00007f03f91bf8b4: f018cc15
relocInfo@0x00007f03f91bf8b6 [type=12(metadata) addr=0x00007f03f91bff80 offset=21 format=3 data=24] | [metadata_addr=0x00007f03f91c19e8 *=0x0000000800098750 offset=0]metadata_value=0x0000000800098750: 'jdk/incubator/vector/Int256Vector$Int256Mask'
         @0x00007f03f91bf8b8: f00acc25
relocInfo@0x00007f03f91bf8ba [type=12(metadata) addr=0x00007f03f91bffa5 offset=37 format=3 data=10] | [metadata_addr=0x00007f03f91c1978 *=0x0000000800094b80 offset=0]metadata_value=0x0000000800094b80: 'jdk/incubator/vector/IntVector$IntSpecies'
         @0x00007f03f91bf8bc: f019cc63
relocInfo@0x00007f03f91bf8be [type=12(metadata) addr=0x00007f03f91c0008 offset=99 format=3 data=25] | [metadata_addr=0x00007f03f91c19f0 *=0x0000000800098110 offset=0]metadata_value=0x0000000800098110: 'jdk/incubator/vector/Int256Vector'
         @0x00007f03f91bf8c0: a072
relocInfo@0x00007f03f91bf8c0 [type=10(poll) addr=0x00007f03f91c007a offset=114]
         @0x00007f03f91bf8c2: f011ccaf
relocInfo@0x00007f03f91bf8c4 [type=12(metadata) addr=0x00007f03f91c0129 offset=175 format=3 data=17] | [metadata_addr=0x00007f03f91c19b0 *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007f03f91bf8c6: a1a9
relocInfo@0x00007f03f91bf8c6 [type=10(poll) addr=0x00007f03f91c02d2 offset=425]
         @0x00007f03f91bf8c8: f80305fe48707f0474c2
relocInfo@0x00007f03f91bf8d0 [type=7(external_word) addr=0x00007f03f91c0394 offset=194 format=1 data={05fe48707f04}] | [target=0x00007f0405fe4870]
         @0x00007f03f91bf8d2: f803055921807f04700d
relocInfo@0x00007f03f91bf8da [type=7(external_word) addr=0x00007f03f91c03a1 offset=13 data={055921807f04}] | [target=0x00007f0405592180]
         @0x00007f03f91bf8dc: 640e
relocInfo@0x00007f03f91bf8dc [type=6(runtime_call) addr=0x00007f03f91c03af offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bf8de: 100c
relocInfo@0x00007f03f91bf8de [type=1(oop) addr=0x00007f03f91c03bb offset=12] | [oop_addr=0x00007f03f91c03bd *=0x00000001010002b0 offset=0]
         @0x00007f03f91bf8e0: 1022
relocInfo@0x00007f03f91bf8e0 [type=1(oop) addr=0x00007f03f91c03dd offset=34] | [oop_addr=0x00007f03f91c03df *=0x0000000101bdc6a0 offset=0]
         @0x00007f03f91bf8e2: 4412
relocInfo@0x00007f03f91bf8e2 [type=4(static_call) addr=0x00007f03f91c03ef offset=18 format=1] | [destination=0x00007f03f918f760 metadata=0x0000000000000000]
         @0x00007f03f91bf8e4: f018cc11
relocInfo@0x00007f03f91bf8e6 [type=12(metadata) addr=0x00007f03f91c0400 offset=17 format=3 data=24] | [metadata_addr=0x00007f03f91c19e8 *=0x0000000800098750 offset=0]metadata_value=0x0000000800098750: 'jdk/incubator/vector/Int256Vector$Int256Mask'
         @0x00007f03f91bf8e8: f00acc25
relocInfo@0x00007f03f91bf8ea [type=12(metadata) addr=0x00007f03f91c0425 offset=37 format=3 data=10] | [metadata_addr=0x00007f03f91c1978 *=0x0000000800094b80 offset=0]metadata_value=0x0000000800094b80: 'jdk/incubator/vector/IntVector$IntSpecies'
         @0x00007f03f91bf8ec: f0011c45
relocInfo@0x00007f03f91bf8ee [type=1(oop) addr=0x00007f03f91c046a offset=69 format=3 data=1] | [oop_addr=0x00007f03f91c18d0 *=0x000000010188fcd0 offset=0]
         @0x00007f03f91bf8f0: 104e
relocInfo@0x00007f03f91bf8f0 [type=1(oop) addr=0x00007f03f91c04b8 offset=78] | [oop_addr=0x00007f03f91c04ba *=0x0000000101964ea8 offset=0]
         @0x00007f03f91bf8f2: f803f90875a07f037417
relocInfo@0x00007f03f91bf8fa [type=7(external_word) addr=0x00007f03f91c04cf offset=23 format=1 data={f90875a07f03}] | [target=0x00007f03f90875a0]
         @0x00007f03f91bf8fc: f01ccc5e
relocInfo@0x00007f03f91bf8fe [type=12(metadata) addr=0x00007f03f91c052d offset=94 format=3 data=28] | [metadata_addr=0x00007f03f91c1a08 *=0x00000008000acb58 offset=0]metadata_value=0x00000008000acb58: 'jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58'
         @0x00007f03f91bf900: f80305fe48707f047438
relocInfo@0x00007f03f91bf908 [type=7(external_word) addr=0x00007f03f91c0565 offset=56 format=1 data={05fe48707f04}] | [target=0x00007f0405fe4870]
         @0x00007f03f91bf90a: f803055920d07f04700d
relocInfo@0x00007f03f91bf912 [type=7(external_word) addr=0x00007f03f91c0572 offset=13 data={055920d07f04}] | [target=0x00007f04055920d0]
         @0x00007f03f91bf914: 640e
relocInfo@0x00007f03f91bf914 [type=6(runtime_call) addr=0x00007f03f91c0580 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bf916: f803055921107f047011
relocInfo@0x00007f03f91bf91e [type=7(external_word) addr=0x00007f03f91c0591 offset=17 data={055921107f04}] | [target=0x00007f0405592110]
         @0x00007f03f91bf920: 640e
relocInfo@0x00007f03f91bf920 [type=6(runtime_call) addr=0x00007f03f91c059f offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bf922: 3428
relocInfo@0x00007f03f91bf922 [type=3(opt_virtual_call) addr=0x00007f03f91c05c7 offset=40 format=1] | [destination=0x00007f03f918e380 metadata=0x0000000000000000]
         @0x00007f03f91bf924: f00acc19
relocInfo@0x00007f03f91bf926 [type=12(metadata) addr=0x00007f03f91c05e0 offset=25 format=3 data=10] | [metadata_addr=0x00007f03f91c1978 *=0x0000000800094b80 offset=0]metadata_value=0x0000000800094b80: 'jdk/incubator/vector/IntVector$IntSpecies'
         @0x00007f03f91bf928: f0011c40
relocInfo@0x00007f03f91bf92a [type=1(oop) addr=0x00007f03f91c0620 offset=64 format=3 data=1] | [oop_addr=0x00007f03f91c18d0 *=0x000000010188fcd0 offset=0]
         @0x00007f03f91bf92c: 102a
relocInfo@0x00007f03f91bf92c [type=1(oop) addr=0x00007f03f91c064a offset=42] | [oop_addr=0x00007f03f91c064c *=0x0000000101964ea8 offset=0]
         @0x00007f03f91bf92e: f803f90875a07f037438
relocInfo@0x00007f03f91bf936 [type=7(external_word) addr=0x00007f03f91c0682 offset=56 format=1 data={f90875a07f03}] | [target=0x00007f03f90875a0]
         @0x00007f03f91bf938: f01ccc65
relocInfo@0x00007f03f91bf93a [type=12(metadata) addr=0x00007f03f91c06e7 offset=101 format=3 data=28] | [metadata_addr=0x00007f03f91c1a08 *=0x00000008000acb58 offset=0]metadata_value=0x00000008000acb58: 'jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58'
         @0x00007f03f91bf93c: f80305fe48707f04742d
relocInfo@0x00007f03f91bf944 [type=7(external_word) addr=0x00007f03f91c0714 offset=45 format=1 data={05fe48707f04}] | [target=0x00007f0405fe4870]
         @0x00007f03f91bf946: f803055920d07f04700d
relocInfo@0x00007f03f91bf94e [type=7(external_word) addr=0x00007f03f91c0721 offset=13 data={055920d07f04}] | [target=0x00007f04055920d0]
         @0x00007f03f91bf950: 640e
relocInfo@0x00007f03f91bf950 [type=6(runtime_call) addr=0x00007f03f91c072f offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bf952: f803055921107f047011
relocInfo@0x00007f03f91bf95a [type=7(external_word) addr=0x00007f03f91c0740 offset=17 data={055921107f04}] | [target=0x00007f0405592110]
         @0x00007f03f91bf95c: 640e
relocInfo@0x00007f03f91bf95c [type=6(runtime_call) addr=0x00007f03f91c074e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bf95e: 3425
relocInfo@0x00007f03f91bf95e [type=3(opt_virtual_call) addr=0x00007f03f91c0773 offset=37 format=1] | [destination=0x00007f03f918e380 metadata=0x0000000000000000]
         @0x00007f03f91bf960: f019cc11
relocInfo@0x00007f03f91bf962 [type=12(metadata) addr=0x00007f03f91c0784 offset=17 format=3 data=25] | [metadata_addr=0x00007f03f91c19f0 *=0x0000000800098110 offset=0]metadata_value=0x0000000800098110: 'jdk/incubator/vector/Int256Vector'
         @0x00007f03f91bf964: f019cc1c
relocInfo@0x00007f03f91bf966 [type=12(metadata) addr=0x00007f03f91c07a0 offset=28 format=3 data=25] | [metadata_addr=0x00007f03f91c19f0 *=0x0000000800098110 offset=0]metadata_value=0x0000000800098110: 'jdk/incubator/vector/Int256Vector'
         @0x00007f03f91bf968: f01fcc5c
relocInfo@0x00007f03f91bf96a [type=12(metadata) addr=0x00007f03f91c07fc offset=92 format=3 data=31] | [metadata_addr=0x00007f03f91c1a20 *=0x0000000800040c30 offset=0]metadata_value=0x0000000800040c30: {type array int}
         @0x00007f03f91bf96c: 1071
relocInfo@0x00007f03f91bf96c [type=1(oop) addr=0x00007f03f91c086d offset=113] | [oop_addr=0x00007f03f91c086f *=0x0000000101964ea8 offset=0]
         @0x00007f03f91bf96e: f803f90875a07f037443
relocInfo@0x00007f03f91bf976 [type=7(external_word) addr=0x00007f03f91c08b0 offset=67 format=1 data={f90875a07f03}] | [target=0x00007f03f90875a0]
         @0x00007f03f91bf978: f011cc30
relocInfo@0x00007f03f91bf97a [type=12(metadata) addr=0x00007f03f91c08e0 offset=48 format=3 data=17] | [metadata_addr=0x00007f03f91c19b0 *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007f03f91bf97c: f8030557a0787f04716f
relocInfo@0x00007f03f91bf984 [type=7(external_word) addr=0x00007f03f91c0a4f offset=367 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91bf986: 640e
relocInfo@0x00007f03f91bf986 [type=6(runtime_call) addr=0x00007f03f91c0a5d offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bf988: a074
relocInfo@0x00007f03f91bf988 [type=10(poll) addr=0x00007f03f91c0ad1 offset=116]
         @0x00007f03f91bf98a: b095
relocInfo@0x00007f03f91bf98a [type=11(poll_return) addr=0x00007f03f91c0b66 offset=149]
         @0x00007f03f91bf98c: c055
relocInfo@0x00007f03f91bf98c [type=12(metadata) addr=0x00007f03f91c0bbb offset=85] | [metadata_addr=0x00007f03f91c0bbd *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007f03f91bf98e: 6410
relocInfo@0x00007f03f91bf98e [type=6(runtime_call) addr=0x00007f03f91c0bcb offset=16 format=1] | [destination=0x00007f03f9058620]
         @0x00007f03f91bf990: c034
relocInfo@0x00007f03f91bf990 [type=12(metadata) addr=0x00007f03f91c0bff offset=52] | [metadata_addr=0x00007f03f91c0c01 *=0x0000000800040000 offset=0]metadata_value=0x0000000800040000: {type array bool}
         @0x00007f03f91bf992: 6410
relocInfo@0x00007f03f91bf992 [type=6(runtime_call) addr=0x00007f03f91c0c0f offset=16 format=1] | [destination=0x00007f03f9058620]
         @0x00007f03f91bf994: c053
relocInfo@0x00007f03f91bf994 [type=12(metadata) addr=0x00007f03f91c0c62 offset=83] | [metadata_addr=0x00007f03f91c0c64 *=0x00000008000acb58 offset=0]metadata_value=0x00000008000acb58: 'jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58'
         @0x00007f03f91bf996: 640d
relocInfo@0x00007f03f91bf996 [type=6(runtime_call) addr=0x00007f03f91c0c6f offset=13 format=1] | [destination=0x00007f03f9058920]
         @0x00007f03f91bf998: c03a
relocInfo@0x00007f03f91bf998 [type=12(metadata) addr=0x00007f03f91c0ca9 offset=58] | [metadata_addr=0x00007f03f91c0cab *=0x00000008000acb58 offset=0]metadata_value=0x00000008000acb58: 'jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58'
         @0x00007f03f91bf99a: 640e
relocInfo@0x00007f03f91bf99a [type=6(runtime_call) addr=0x00007f03f91c0cb7 offset=14 format=1] | [destination=0x00007f03f9058920]
         @0x00007f03f91bf99c: c01f
relocInfo@0x00007f03f91bf99c [type=12(metadata) addr=0x00007f03f91c0cd6 offset=31] | [metadata_addr=0x00007f03f91c0cd8 *=0x0000000800040c30 offset=0]metadata_value=0x0000000800040c30: {type array int}
         @0x00007f03f91bf99e: 6419
relocInfo@0x00007f03f91bf99e [type=6(runtime_call) addr=0x00007f03f91c0cef offset=25 format=1] | [destination=0x00007f03f9058620]
         @0x00007f03f91bf9a0: 6444
relocInfo@0x00007f03f91bf9a0 [type=6(runtime_call) addr=0x00007f03f91c0d33 offset=68 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bf9a2: f803053e27b87f047005
relocInfo@0x00007f03f91bf9aa [type=7(external_word) addr=0x00007f03f91c0d38 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bf9ac: 640e
relocInfo@0x00007f03f91bf9ac [type=6(runtime_call) addr=0x00007f03f91c0d46 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bf9ae: 6439
relocInfo@0x00007f03f91bf9ae [type=6(runtime_call) addr=0x00007f03f91c0d7f offset=57 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bf9b0: f803053e27b87f047005
relocInfo@0x00007f03f91bf9b8 [type=7(external_word) addr=0x00007f03f91c0d84 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bf9ba: 640e
relocInfo@0x00007f03f91bf9ba [type=6(runtime_call) addr=0x00007f03f91c0d92 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bf9bc: 6431
relocInfo@0x00007f03f91bf9bc [type=6(runtime_call) addr=0x00007f03f91c0dc3 offset=49 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bf9be: f803053e27b87f047005
relocInfo@0x00007f03f91bf9c6 [type=7(external_word) addr=0x00007f03f91c0dc8 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bf9c8: 640e
relocInfo@0x00007f03f91bf9c8 [type=6(runtime_call) addr=0x00007f03f91c0dd6 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bf9ca: 642d
relocInfo@0x00007f03f91bf9ca [type=6(runtime_call) addr=0x00007f03f91c0e03 offset=45 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bf9cc: f803053e27b87f047005
relocInfo@0x00007f03f91bf9d4 [type=7(external_word) addr=0x00007f03f91c0e08 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bf9d6: 640e
relocInfo@0x00007f03f91bf9d6 [type=6(runtime_call) addr=0x00007f03f91c0e16 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bf9d8: 6439
relocInfo@0x00007f03f91bf9d8 [type=6(runtime_call) addr=0x00007f03f91c0e4f offset=57 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bf9da: f803053e27b87f047005
relocInfo@0x00007f03f91bf9e2 [type=7(external_word) addr=0x00007f03f91c0e54 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bf9e4: 640e
relocInfo@0x00007f03f91bf9e4 [type=6(runtime_call) addr=0x00007f03f91c0e62 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bf9e6: 6421
relocInfo@0x00007f03f91bf9e6 [type=6(runtime_call) addr=0x00007f03f91c0e83 offset=33 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bf9e8: f803053e27b87f047005
relocInfo@0x00007f03f91bf9f0 [type=7(external_word) addr=0x00007f03f91c0e88 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bf9f2: 640e
relocInfo@0x00007f03f91bf9f2 [type=6(runtime_call) addr=0x00007f03f91c0e96 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bf9f4: 6415
relocInfo@0x00007f03f91bf9f4 [type=6(runtime_call) addr=0x00007f03f91c0eab offset=21 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bf9f6: f803053e27b87f047005
relocInfo@0x00007f03f91bf9fe [type=7(external_word) addr=0x00007f03f91c0eb0 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfa00: 640e
relocInfo@0x00007f03f91bfa00 [type=6(runtime_call) addr=0x00007f03f91c0ebe offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfa02: 6421
relocInfo@0x00007f03f91bfa02 [type=6(runtime_call) addr=0x00007f03f91c0edf offset=33 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfa04: f803053e27b87f047005
relocInfo@0x00007f03f91bfa0c [type=7(external_word) addr=0x00007f03f91c0ee4 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfa0e: 640e
relocInfo@0x00007f03f91bfa0e [type=6(runtime_call) addr=0x00007f03f91c0ef2 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfa10: 6425
relocInfo@0x00007f03f91bfa10 [type=6(runtime_call) addr=0x00007f03f91c0f17 offset=37 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfa12: f803053e27b87f047005
relocInfo@0x00007f03f91bfa1a [type=7(external_word) addr=0x00007f03f91c0f1c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfa1c: 640e
relocInfo@0x00007f03f91bfa1c [type=6(runtime_call) addr=0x00007f03f91c0f2a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfa1e: 6429
relocInfo@0x00007f03f91bfa1e [type=6(runtime_call) addr=0x00007f03f91c0f53 offset=41 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfa20: f803053e27b87f047005
relocInfo@0x00007f03f91bfa28 [type=7(external_word) addr=0x00007f03f91c0f58 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfa2a: 640e
relocInfo@0x00007f03f91bfa2a [type=6(runtime_call) addr=0x00007f03f91c0f66 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfa2c: 643d
relocInfo@0x00007f03f91bfa2c [type=6(runtime_call) addr=0x00007f03f91c0fa3 offset=61 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfa2e: f803053e27b87f047005
relocInfo@0x00007f03f91bfa36 [type=7(external_word) addr=0x00007f03f91c0fa8 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfa38: 640e
relocInfo@0x00007f03f91bfa38 [type=6(runtime_call) addr=0x00007f03f91c0fb6 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfa3a: f8030557a0787f047006
relocInfo@0x00007f03f91bfa42 [type=7(external_word) addr=0x00007f03f91c0fbc offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91bfa44: 640e
relocInfo@0x00007f03f91bfa44 [type=6(runtime_call) addr=0x00007f03f91c0fca offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfa46: f8030557a0787f047006
relocInfo@0x00007f03f91bfa4e [type=7(external_word) addr=0x00007f03f91c0fd0 offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91bfa50: 640e
relocInfo@0x00007f03f91bfa50 [type=6(runtime_call) addr=0x00007f03f91c0fde offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfa52: 643d
relocInfo@0x00007f03f91bfa52 [type=6(runtime_call) addr=0x00007f03f91c101b offset=61 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfa54: f803053e27b87f047005
relocInfo@0x00007f03f91bfa5c [type=7(external_word) addr=0x00007f03f91c1020 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfa5e: 640e
relocInfo@0x00007f03f91bfa5e [type=6(runtime_call) addr=0x00007f03f91c102e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfa60: 642d
relocInfo@0x00007f03f91bfa60 [type=6(runtime_call) addr=0x00007f03f91c105b offset=45 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfa62: f803053e27b87f047005
relocInfo@0x00007f03f91bfa6a [type=7(external_word) addr=0x00007f03f91c1060 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfa6c: 640e
relocInfo@0x00007f03f91bfa6c [type=6(runtime_call) addr=0x00007f03f91c106e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfa6e: f8030557a0787f047006
relocInfo@0x00007f03f91bfa76 [type=7(external_word) addr=0x00007f03f91c1074 offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91bfa78: 640e
relocInfo@0x00007f03f91bfa78 [type=6(runtime_call) addr=0x00007f03f91c1082 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfa7a: f8030557a9687f047006
relocInfo@0x00007f03f91bfa82 [type=7(external_word) addr=0x00007f03f91c1088 offset=6 data={0557a9687f04}] | [target=0x00007f040557a968]
         @0x00007f03f91bfa84: 640e
relocInfo@0x00007f03f91bfa84 [type=6(runtime_call) addr=0x00007f03f91c1096 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfa86: f8030557a9687f047006
relocInfo@0x00007f03f91bfa8e [type=7(external_word) addr=0x00007f03f91c109c offset=6 data={0557a9687f04}] | [target=0x00007f040557a968]
         @0x00007f03f91bfa90: 640e
relocInfo@0x00007f03f91bfa90 [type=6(runtime_call) addr=0x00007f03f91c10aa offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfa92: f8030557a0787f047006
relocInfo@0x00007f03f91bfa9a [type=7(external_word) addr=0x00007f03f91c10b0 offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91bfa9c: 640e
relocInfo@0x00007f03f91bfa9c [type=6(runtime_call) addr=0x00007f03f91c10be offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfa9e: f8030557a0787f047006
relocInfo@0x00007f03f91bfaa6 [type=7(external_word) addr=0x00007f03f91c10c4 offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91bfaa8: 640e
relocInfo@0x00007f03f91bfaa8 [type=6(runtime_call) addr=0x00007f03f91c10d2 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfaaa: f8030557a0787f047006
relocInfo@0x00007f03f91bfab2 [type=7(external_word) addr=0x00007f03f91c10d8 offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91bfab4: 640e
relocInfo@0x00007f03f91bfab4 [type=6(runtime_call) addr=0x00007f03f91c10e6 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfab6: f8030557a0787f047006
relocInfo@0x00007f03f91bfabe [type=7(external_word) addr=0x00007f03f91c10ec offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91bfac0: 640e
relocInfo@0x00007f03f91bfac0 [type=6(runtime_call) addr=0x00007f03f91c10fa offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfac2: f8030557a0787f047006
relocInfo@0x00007f03f91bfaca [type=7(external_word) addr=0x00007f03f91c1100 offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91bfacc: 640e
relocInfo@0x00007f03f91bfacc [type=6(runtime_call) addr=0x00007f03f91c110e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bface: f8030557a0787f047006
relocInfo@0x00007f03f91bfad6 [type=7(external_word) addr=0x00007f03f91c1114 offset=6 data={0557a0787f04}] | [target=0x00007f040557a078]
         @0x00007f03f91bfad8: 640e
relocInfo@0x00007f03f91bfad8 [type=6(runtime_call) addr=0x00007f03f91c1122 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfada: 6439
relocInfo@0x00007f03f91bfada [type=6(runtime_call) addr=0x00007f03f91c115b offset=57 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfadc: f803053e27b87f047005
relocInfo@0x00007f03f91bfae4 [type=7(external_word) addr=0x00007f03f91c1160 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfae6: 640e
relocInfo@0x00007f03f91bfae6 [type=6(runtime_call) addr=0x00007f03f91c116e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfae8: 6421
relocInfo@0x00007f03f91bfae8 [type=6(runtime_call) addr=0x00007f03f91c118f offset=33 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfaea: f803053e27b87f047005
relocInfo@0x00007f03f91bfaf2 [type=7(external_word) addr=0x00007f03f91c1194 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfaf4: 640e
relocInfo@0x00007f03f91bfaf4 [type=6(runtime_call) addr=0x00007f03f91c11a2 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfaf6: 6461
relocInfo@0x00007f03f91bfaf6 [type=6(runtime_call) addr=0x00007f03f91c1203 offset=97 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfaf8: f803053e27b87f047005
relocInfo@0x00007f03f91bfb00 [type=7(external_word) addr=0x00007f03f91c1208 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfb02: 640e
relocInfo@0x00007f03f91bfb02 [type=6(runtime_call) addr=0x00007f03f91c1216 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfb04: 6439
relocInfo@0x00007f03f91bfb04 [type=6(runtime_call) addr=0x00007f03f91c124f offset=57 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfb06: f803053e27b87f047005
relocInfo@0x00007f03f91bfb0e [type=7(external_word) addr=0x00007f03f91c1254 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfb10: 640e
relocInfo@0x00007f03f91bfb10 [type=6(runtime_call) addr=0x00007f03f91c1262 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfb12: 6445
relocInfo@0x00007f03f91bfb12 [type=6(runtime_call) addr=0x00007f03f91c12a7 offset=69 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfb14: f803053e27b87f047005
relocInfo@0x00007f03f91bfb1c [type=7(external_word) addr=0x00007f03f91c12ac offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfb1e: 640e
relocInfo@0x00007f03f91bfb1e [type=6(runtime_call) addr=0x00007f03f91c12ba offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfb20: 6419
relocInfo@0x00007f03f91bfb20 [type=6(runtime_call) addr=0x00007f03f91c12d3 offset=25 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfb22: f803053e27b87f047005
relocInfo@0x00007f03f91bfb2a [type=7(external_word) addr=0x00007f03f91c12d8 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfb2c: 640e
relocInfo@0x00007f03f91bfb2c [type=6(runtime_call) addr=0x00007f03f91c12e6 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfb2e: 6421
relocInfo@0x00007f03f91bfb2e [type=6(runtime_call) addr=0x00007f03f91c1307 offset=33 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfb30: f803053e27b87f047005
relocInfo@0x00007f03f91bfb38 [type=7(external_word) addr=0x00007f03f91c130c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfb3a: 640e
relocInfo@0x00007f03f91bfb3a [type=6(runtime_call) addr=0x00007f03f91c131a offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfb3c: 6425
relocInfo@0x00007f03f91bfb3c [type=6(runtime_call) addr=0x00007f03f91c133f offset=37 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfb3e: f803053e27b87f047005
relocInfo@0x00007f03f91bfb46 [type=7(external_word) addr=0x00007f03f91c1344 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfb48: 640e
relocInfo@0x00007f03f91bfb48 [type=6(runtime_call) addr=0x00007f03f91c1352 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfb4a: 641d
relocInfo@0x00007f03f91bfb4a [type=6(runtime_call) addr=0x00007f03f91c136f offset=29 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfb4c: f803053e27b87f047005
relocInfo@0x00007f03f91bfb54 [type=7(external_word) addr=0x00007f03f91c1374 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfb56: 640e
relocInfo@0x00007f03f91bfb56 [type=6(runtime_call) addr=0x00007f03f91c1382 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfb58: 6425
relocInfo@0x00007f03f91bfb58 [type=6(runtime_call) addr=0x00007f03f91c13a7 offset=37 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfb5a: f803053e27b87f047005
relocInfo@0x00007f03f91bfb62 [type=7(external_word) addr=0x00007f03f91c13ac offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfb64: 640e
relocInfo@0x00007f03f91bfb64 [type=6(runtime_call) addr=0x00007f03f91c13ba offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfb66: 6435
relocInfo@0x00007f03f91bfb66 [type=6(runtime_call) addr=0x00007f03f91c13ef offset=53 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfb68: f803053e27b87f047005
relocInfo@0x00007f03f91bfb70 [type=7(external_word) addr=0x00007f03f91c13f4 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfb72: 640e
relocInfo@0x00007f03f91bfb72 [type=6(runtime_call) addr=0x00007f03f91c1402 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfb74: 6421
relocInfo@0x00007f03f91bfb74 [type=6(runtime_call) addr=0x00007f03f91c1423 offset=33 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfb76: f803053e27b87f047005
relocInfo@0x00007f03f91bfb7e [type=7(external_word) addr=0x00007f03f91c1428 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfb80: 640e
relocInfo@0x00007f03f91bfb80 [type=6(runtime_call) addr=0x00007f03f91c1436 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfb82: 6429
relocInfo@0x00007f03f91bfb82 [type=6(runtime_call) addr=0x00007f03f91c145f offset=41 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfb84: f803053e27b87f047005
relocInfo@0x00007f03f91bfb8c [type=7(external_word) addr=0x00007f03f91c1464 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfb8e: 640e
relocInfo@0x00007f03f91bfb8e [type=6(runtime_call) addr=0x00007f03f91c1472 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfb90: 6439
relocInfo@0x00007f03f91bfb90 [type=6(runtime_call) addr=0x00007f03f91c14ab offset=57 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfb92: f803053e27b87f047005
relocInfo@0x00007f03f91bfb9a [type=7(external_word) addr=0x00007f03f91c14b0 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfb9c: 640e
relocInfo@0x00007f03f91bfb9c [type=6(runtime_call) addr=0x00007f03f91c14be offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfb9e: 642d
relocInfo@0x00007f03f91bfb9e [type=6(runtime_call) addr=0x00007f03f91c14eb offset=45 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfba0: f803053e27b87f047005
relocInfo@0x00007f03f91bfba8 [type=7(external_word) addr=0x00007f03f91c14f0 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfbaa: 640e
relocInfo@0x00007f03f91bfbaa [type=6(runtime_call) addr=0x00007f03f91c14fe offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfbac: 641d
relocInfo@0x00007f03f91bfbac [type=6(runtime_call) addr=0x00007f03f91c151b offset=29 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfbae: f803053e27b87f047005
relocInfo@0x00007f03f91bfbb6 [type=7(external_word) addr=0x00007f03f91c1520 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfbb8: 640e
relocInfo@0x00007f03f91bfbb8 [type=6(runtime_call) addr=0x00007f03f91c152e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfbba: 6431
relocInfo@0x00007f03f91bfbba [type=6(runtime_call) addr=0x00007f03f91c155f offset=49 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfbbc: f803053e27b87f047005
relocInfo@0x00007f03f91bfbc4 [type=7(external_word) addr=0x00007f03f91c1564 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfbc6: 640e
relocInfo@0x00007f03f91bfbc6 [type=6(runtime_call) addr=0x00007f03f91c1572 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfbc8: 644d
relocInfo@0x00007f03f91bfbc8 [type=6(runtime_call) addr=0x00007f03f91c15bf offset=77 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfbca: f803053e27b87f047005
relocInfo@0x00007f03f91bfbd2 [type=7(external_word) addr=0x00007f03f91c15c4 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfbd4: 640e
relocInfo@0x00007f03f91bfbd4 [type=6(runtime_call) addr=0x00007f03f91c15d2 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfbd6: 641d
relocInfo@0x00007f03f91bfbd6 [type=6(runtime_call) addr=0x00007f03f91c15ef offset=29 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfbd8: f803053e27b87f047005
relocInfo@0x00007f03f91bfbe0 [type=7(external_word) addr=0x00007f03f91c15f4 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfbe2: 640e
relocInfo@0x00007f03f91bfbe2 [type=6(runtime_call) addr=0x00007f03f91c1602 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfbe4: 6411
relocInfo@0x00007f03f91bfbe4 [type=6(runtime_call) addr=0x00007f03f91c1613 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfbe6: f803053e27b87f047005
relocInfo@0x00007f03f91bfbee [type=7(external_word) addr=0x00007f03f91c1618 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfbf0: 640e
relocInfo@0x00007f03f91bfbf0 [type=6(runtime_call) addr=0x00007f03f91c1626 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfbf2: 6429
relocInfo@0x00007f03f91bfbf2 [type=6(runtime_call) addr=0x00007f03f91c164f offset=41 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfbf4: f803053e27b87f047005
relocInfo@0x00007f03f91bfbfc [type=7(external_word) addr=0x00007f03f91c1654 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfbfe: 640e
relocInfo@0x00007f03f91bfbfe [type=6(runtime_call) addr=0x00007f03f91c1662 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfc00: 6411
relocInfo@0x00007f03f91bfc00 [type=6(runtime_call) addr=0x00007f03f91c1673 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfc02: f803053e27b87f047005
relocInfo@0x00007f03f91bfc0a [type=7(external_word) addr=0x00007f03f91c1678 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfc0c: 640e
relocInfo@0x00007f03f91bfc0c [type=6(runtime_call) addr=0x00007f03f91c1686 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfc0e: 6411
relocInfo@0x00007f03f91bfc0e [type=6(runtime_call) addr=0x00007f03f91c1697 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfc10: f803053e27b87f047005
relocInfo@0x00007f03f91bfc18 [type=7(external_word) addr=0x00007f03f91c169c offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfc1a: 640e
relocInfo@0x00007f03f91bfc1a [type=6(runtime_call) addr=0x00007f03f91c16aa offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfc1c: 641d
relocInfo@0x00007f03f91bfc1c [type=6(runtime_call) addr=0x00007f03f91c16c7 offset=29 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfc1e: f803053e27b87f047005
relocInfo@0x00007f03f91bfc26 [type=7(external_word) addr=0x00007f03f91c16cc offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfc28: 640e
relocInfo@0x00007f03f91bfc28 [type=6(runtime_call) addr=0x00007f03f91c16da offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfc2a: 6441
relocInfo@0x00007f03f91bfc2a [type=6(runtime_call) addr=0x00007f03f91c171b offset=65 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfc2c: f803053e27b87f047005
relocInfo@0x00007f03f91bfc34 [type=7(external_word) addr=0x00007f03f91c1720 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfc36: 640e
relocInfo@0x00007f03f91bfc36 [type=6(runtime_call) addr=0x00007f03f91c172e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfc38: 6411
relocInfo@0x00007f03f91bfc38 [type=6(runtime_call) addr=0x00007f03f91c173f offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfc3a: f803053e27b87f047005
relocInfo@0x00007f03f91bfc42 [type=7(external_word) addr=0x00007f03f91c1744 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfc44: 640e
relocInfo@0x00007f03f91bfc44 [type=6(runtime_call) addr=0x00007f03f91c1752 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfc46: 6429
relocInfo@0x00007f03f91bfc46 [type=6(runtime_call) addr=0x00007f03f91c177b offset=41 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfc48: f803053e27b87f047005
relocInfo@0x00007f03f91bfc50 [type=7(external_word) addr=0x00007f03f91c1780 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfc52: 640e
relocInfo@0x00007f03f91bfc52 [type=6(runtime_call) addr=0x00007f03f91c178e offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfc54: 6411
relocInfo@0x00007f03f91bfc54 [type=6(runtime_call) addr=0x00007f03f91c179f offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfc56: f803053e27b87f047005
relocInfo@0x00007f03f91bfc5e [type=7(external_word) addr=0x00007f03f91c17a4 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfc60: 640e
relocInfo@0x00007f03f91bfc60 [type=6(runtime_call) addr=0x00007f03f91c17b2 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfc62: 6411
relocInfo@0x00007f03f91bfc62 [type=6(runtime_call) addr=0x00007f03f91c17c3 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfc64: f803053e27b87f047005
relocInfo@0x00007f03f91bfc6c [type=7(external_word) addr=0x00007f03f91c17c8 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfc6e: 640e
relocInfo@0x00007f03f91bfc6e [type=6(runtime_call) addr=0x00007f03f91c17d6 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfc70: 6411
relocInfo@0x00007f03f91bfc70 [type=6(runtime_call) addr=0x00007f03f91c17e7 offset=17 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfc72: f803053e27b87f047005
relocInfo@0x00007f03f91bfc7a [type=7(external_word) addr=0x00007f03f91c17ec offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfc7c: 640e
relocInfo@0x00007f03f91bfc7c [type=6(runtime_call) addr=0x00007f03f91c17fa offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfc7e: 6419
relocInfo@0x00007f03f91bfc7e [type=6(runtime_call) addr=0x00007f03f91c1813 offset=25 format=1] | [destination=0x00007f03f9116540]
         @0x00007f03f91bfc80: f803053e27b87f047005
relocInfo@0x00007f03f91bfc88 [type=7(external_word) addr=0x00007f03f91c1818 offset=5 data={053e27b87f04}] | [target=0x00007f04053e27b8]
         @0x00007f03f91bfc8a: 640e
relocInfo@0x00007f03f91bfc8a [type=6(runtime_call) addr=0x00007f03f91c1826 offset=14 format=1] | [destination=0x00007f0404ba7ff4]
         @0x00007f03f91bfc8c: 6439
relocInfo@0x00007f03f91bfc8c [type=6(runtime_call) addr=0x00007f03f91c185f offset=57 format=1] | [destination=0x00007f03f90549a0]
         @0x00007f03f91bfc8e: f8010cfe8005
relocInfo@0x00007f03f91bfc92 [type=8(internal_word) addr=0x00007f03f91c1864 offset=5 data=3326] | [target=0x00007f03f91c0b66]
         @0x00007f03f91bfc94: 6411
relocInfo@0x00007f03f91bfc94 [type=6(runtime_call) addr=0x00007f03f91c1875 offset=17 format=1] | [destination=0x00007f03f9117220]
         @0x00007f03f91bfc96: 000b
relocInfo@0x00007f03f91bfc96 [type=0(none) addr=0x00007f03f91c1880 offset=11]
         @0x00007f03f91bfc98: f801fd955000
relocInfo@0x00007f03f91bfc9c [type=5(static_stub) addr=0x00007f03f91c1880 offset=0 data=-619] | [static_call=0x00007f03f91bff6b]
         @0x00007f03f91bfc9e: c000
relocInfo@0x00007f03f91bfc9e [type=12(metadata) addr=0x00007f03f91c1880 offset=0] | [metadata_addr=0x00007f03f91c1882 *=0x0000000000000000 offset=0]
         @0x00007f03f91bfca0: 640a
relocInfo@0x00007f03f91bfca0 [type=6(runtime_call) addr=0x00007f03f91c188a offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007f03f91bfca2: f801f9115005
relocInfo@0x00007f03f91bfca6 [type=5(static_stub) addr=0x00007f03f91c188f offset=5 data=-1775] | [static_call=0x00007f03f91c03ef]
         @0x00007f03f91bfca8: c000
relocInfo@0x00007f03f91bfca8 [type=12(metadata) addr=0x00007f03f91c188f offset=0] | [metadata_addr=0x00007f03f91c1891 *=0x0000000000000000 offset=0]
         @0x00007f03f91bfcaa: 640a
relocInfo@0x00007f03f91bfcaa [type=6(runtime_call) addr=0x00007f03f91c1899 offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007f03f91bfcac: f801f7395005
relocInfo@0x00007f03f91bfcb0 [type=5(static_stub) addr=0x00007f03f91c189e offset=5 data=-2247] | [static_call=0x00007f03f91c05c7]
         @0x00007f03f91bfcb2: c000
relocInfo@0x00007f03f91bfcb2 [type=12(metadata) addr=0x00007f03f91c189e offset=0] | [metadata_addr=0x00007f03f91c18a0 *=0x0000000000000000 offset=0]
         @0x00007f03f91bfcb4: 640a
relocInfo@0x00007f03f91bfcb4 [type=6(runtime_call) addr=0x00007f03f91c18a8 offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007f03f91bfcb6: f801f58d5005
relocInfo@0x00007f03f91bfcba [type=5(static_stub) addr=0x00007f03f91c18ad offset=5 data=-2675] | [static_call=0x00007f03f91c0773]
         @0x00007f03f91bfcbc: c000
relocInfo@0x00007f03f91bfcbc [type=12(metadata) addr=0x00007f03f91c18ad offset=0] | [metadata_addr=0x00007f03f91c18af *=0x0000000000000000 offset=0]
         @0x00007f03f91bfcbe: 640a
relocInfo@0x00007f03f91bfcbe [type=6(runtime_call) addr=0x00007f03f91c18b7 offset=10 format=1] | [destination=0xffffffffffffffff]
         @0x00007f03f91bfcc0: 6405
relocInfo@0x00007f03f91bfcc0 [type=6(runtime_call) addr=0x00007f03f91c18bc offset=5 format=1] | [destination=0x00007f03f905c6a0]
         @0x00007f03f91bfcc2: 640f
relocInfo@0x00007f03f91bfcc2 [type=6(runtime_call) addr=0x00007f03f91c18cb offset=15 format=1] | [destination=0x00007f03f9116860]
         @0x00007f03f91bfcc4: 0000
relocInfo@0x00007f03f91bfcc4 [type=0(none) addr=0x00007f03f91c18cb offset=0]
         @0x00007f03f91bfcc6: 0000
relocInfo@0x00007f03f91bfcc6 [type=0(none) addr=0x00007f03f91c18cb offset=0]
         @0x00007f03f91bfcc8: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type unique_concrete_method
  context = jdk.incubator.vector.IntVector$IntSpecies
  method  = {method} {0x00007f03b0a1d5c0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
   [nmethod<=klass]jdk.incubator.vector.IntVector$IntSpecies
Dependency of type unique_concrete_method
  context = jdk.incubator.vector.Int256Vector$Int256Mask
  method  = {method} {0x00007f03b0a33148} 'checkIndexByLane' '(IILjdk/incubator/vector/Vector;I)V' in 'jdk/incubator/vector/AbstractMask'
   [nmethod<=klass]jdk.incubator.vector.Int256Vector$Int256Mask
Dependency of type unique_concrete_method
  context = jdk.incubator.vector.Int256Vector$Int256Mask
  method  = {method} {0x00007f03b0a320f8} 'vectorSpecies' '()Ljdk/incubator/vector/VectorSpecies;' in 'jdk/incubator/vector/AbstractMask'
   [nmethod<=klass]jdk.incubator.vector.Int256Vector$Int256Mask
Dependency of type unique_concrete_method
  context = jdk.incubator.vector.VectorOperators$AssociativeImpl
  method  = {method} {0x00007f03b0aef2a8} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$AssociativeImpl
Dependency of type unique_concrete_method
  context = jdk.incubator.vector.VectorOperators$AssociativeImpl
  method  = {method} {0x00007f03b0aeee40} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$AssociativeImpl
Dependency of type unique_concrete_method
  context = jdk.incubator.vector.VectorOperators$AssociativeImpl
  method  = {method} {0x00007f03b0aeef18} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$AssociativeImpl
Dependency of type unique_concrete_method
  context = jdk.incubator.vector.VectorOperators$ImplCache
  method  = {method} {0x00007f03b0a118b0} 'find' '(Ljdk/incubator/vector/VectorOperators$Operator;ILjava/util/function/IntFunction;)Ljava/lang/Object;' in 'jdk/incubator/vector/VectorOperators$ImplCache'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$ImplCache
Dependency of type unique_concrete_method
  context = jdk.incubator.vector.VectorOperators$ComparisonImpl
  method  = {method} {0x00007f03b0aeee40} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$ComparisonImpl
Dependency of type unique_concrete_method
  context = jdk.incubator.vector.VectorOperators$ComparisonImpl
  method  = {method} {0x00007f03b0aeef18} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$ComparisonImpl
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 216 bytes)
catch_pco = 624 (1 entries)
  bci -1 at scope depth 0 -> pco 6988
catch_pco = 1780 (1 entries)
  bci -1 at scope depth 0 -> pco 6993
catch_pco = 2252 (1 entries)
  bci -1 at scope depth 0 -> pco 6978
catch_pco = 2680 (1 entries)
  bci -1 at scope depth 0 -> pco 6983
catch_pco = 3792 (1 entries)
  bci -1 at scope depth 0 -> pco 6973
catch_pco = 3860 (1 entries)
  bci -1 at scope depth 0 -> pco 6968
catch_pco = 3956 (1 entries)
  bci -1 at scope depth 0 -> pco 6966
catch_pco = 4028 (1 entries)
  bci -1 at scope depth 0 -> pco 6964
catch_pco = 4084 (1 entries)
  bci -1 at scope depth 0 -> pco 6956
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 15 entries, 124 bytes):
{
   < 0x00007f03f91bfd46, 0x00007f03f91c1608 > < 0x00007f03f91bff70, 0x00007f03f91c162c > < 0x00007f03f91bff92, 0x00007f03f91c1668 > 
   < 0x00007f03f91bffa0, 0x00007f03f91c168c > < 0x00007f03f91bffec, 0x00007f03f91c1136 > < 0x00007f03f91c0003, 0x00007f03f91c112f > 
   < 0x00007f03f91c0020, 0x00007f03f91c113b > < 0x00007f03f91c03f4, 0x00007f03f91c16b0 > < 0x00007f03f91c0420, 0x00007f03f91c16e0 > 
   < 0x00007f03f91c044e, 0x00007f03f91c1734 > < 0x00007f03f91c05d5, 0x00007f03f91c1758 > < 0x00007f03f91c05f2, 0x00007f03f91c1794 > 
   < 0x00007f03f91c0780, 0x00007f03f91c17b8 > < 0x00007f03f91c0791, 0x00007f03f91c17dc > < 0x00007f03f91c08d5, 0x00007f03f91c1800 > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
# 0: 0x0000000000000000 NULL-oop
# 1: 0x000000010188fcd0 a 'java/lang/Class'{0x000000010188fcd0} = 'jdk/incubator/vector/IntMaxVector'
# 2: 0x0000000101c2c488 a 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'{0x0000000101c2c488}
# 3: 0x0000000101c20690 a 'java/lang/invoke/DirectMethodHandle$Constructor'{0x0000000101c20690}
# 4: 0x000000010188b520 a 'java/lang/Class'{0x000000010188b520} = 'jdk/incubator/vector/Int256Vector'
# 5: 0x000000010188b5c0 a 'java/lang/Class'{0x000000010188b5c0} = 'jdk/incubator/vector/Int256Vector$Int256Mask'
# 6: 0x00000001010002b0 a 'java/lang/Class'{0x00000001010002b0} = int
# 7: 0x0000000101c25820 a 'jdk/incubator/vector/IntVector$$Lambda$64+0x00000008000acfa0'{0x0000000101c25820}
# 8: 0x0000000101985d48 a 'jdk/incubator/vector/VectorOperators$AssociativeImpl'{0x0000000101985d48}
# 9: 0x000000010110df10 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x000000010110df10}
#10: 0x0000000101127628 a 'java/lang/Class'{0x0000000101127628} = 'java/lang/invoke/LambdaForm$MH+0x0000000800005800'
#11: 0x0000000101be9bd0 a 'java/lang/Class'{0x0000000101be9bd0} = 'java/lang/invoke/LambdaForm$MH+0x00000008000d5000'
#12: 0x0000000101be2d48 a 'java/lang/Class'{0x0000000101be2d48} = 'java/lang/invoke/LambdaForm$DMH+0x00000008000d4800'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
# 0: 0x0000000000000000 NULL-oop
# 1: 0x00007f03b08119b8 {method} {0x00007f03b08119b8} 'micro_vector_masked' '([I[I[I)V' in 'App'
# 2: 0x00007f03b0a34658 {method} {0x00007f03b0a34658} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[ZI)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
# 3: 0x00007f03b0812e38 {method} {0x00007f03b0812e38} 'intoArray' '([IILjdk/incubator/vector/VectorMask;)V' in 'jdk/incubator/vector/IntVector'
# 4: 0x00007f03b081d998 {method} {0x00007f03b081d998} 'stOp' '(Ljava/lang/Object;ILjdk/incubator/vector/VectorMask;Ljdk/incubator/vector/IntVector$FStOp;)V' in 'jdk/incubator/vector/IntVector'
# 5: 0x00007f03b0a4a240 {method} {0x00007f03b0a4a240} 'vec' '()[I' in 'jdk/incubator/vector/Int256Vector'
# 6: 0x00007f03b053f890 {method} {0x00007f03b053f890} 'getPayload' '()Ljava/lang/Object;' in 'jdk/internal/vm/vector/VectorSupport$VectorPayload'
# 7: 0x00007f03b0812728 {method} {0x00007f03b0812728} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
# 8: 0x00007f03b0a184c0 {method} {0x00007f03b0a184c0} 'dummyVector' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
# 9: 0x00007f03b0a1eb98 {method} {0x00007f03b0a1eb98} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies'
#10: 0x0000000800094b80 'jdk/incubator/vector/IntVector$IntSpecies'
#11: 0x00007f03b0a1e098 {method} {0x00007f03b0a1e098} 'loopBound' '(I)I' in 'jdk/incubator/vector/AbstractSpecies'
#12: 0x00007f03b0a84398 {method} {0x00007f03b0a84398} 'roundDown' '(II)I' in 'jdk/incubator/vector/VectorIntrinsics'
#13: 0x00007f03b0a84090 {method} {0x00007f03b0a84090} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics'
#14: 0x00007f03b0560ca0 {method} {0x00007f03b0560ca0} 'checkIndex' '(II)I' in 'java/util/Objects'
#15: 0x00007f03b0a4d300 {method} {0x00007f03b0a4d300} 'fromArray0' '([II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int256Vector'
#16: 0x00007f03b0813798 {method} {0x00007f03b0813798} 'fromArray0Template' '([II)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#17: 0x0000000800040000 {type array bool}
#18: 0x00007f03b0a34820 {method} {0x00007f03b0a34820} 'fromLong' '(Ljdk/incubator/vector/VectorSpecies;J)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
#19: 0x00007f03b0a34518 {method} {0x00007f03b0a34518} 'fromValues' '(Ljdk/incubator/vector/VectorSpecies;[Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/VectorMask'
#20: 0x00007f03b081f8d8 {method} {0x00007f03b081f8d8} 'add' '(Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#21: 0x00007f03b0a4e770 {method} {0x00007f03b0a4e770} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int256Vector'
#22: 0x00007f03b0a4b6d0 {method} {0x00007f03b0a4b6d0} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/Int256Vector;' in 'jdk/incubator/vector/Int256Vector'
#23: 0x00007f03b081e8d8 {method} {0x00007f03b081e8d8} 'lanewiseTemplate' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#24: 0x0000000800098750 'jdk/incubator/vector/Int256Vector$Int256Mask'
#25: 0x0000000800098110 'jdk/incubator/vector/Int256Vector'
#26: 0x00007f03b0812d08 {method} {0x00007f03b0812d08} 'intoArray' '([II)V' in 'jdk/incubator/vector/IntVector'
#27: 0x00007f03b0a17a40 {method} {0x00007f03b0a17a40} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/IntVector$IntSpecies'
#28: 0x00000008000acb58 'jdk/incubator/vector/IntVector$$Lambda$63+0x00000008000acb58'
#29: 0x00007f03b0812880 {method} {0x00007f03b0812880} 'fromArray' '(Ljdk/incubator/vector/VectorSpecies;[IILjdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#30: 0x00007f03b080aa78 {method} {0x00007f03b080aa78} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800005800'
#31: 0x0000000800040c30 {type array int}
#32: 0x00007f03b0a1dac8 {method} {0x00007f03b0a1dac8} 'maskType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/AbstractSpecies'
#33: 0x00007f03b0a000f8 {method} {0x00007f03b0a000f8} 'checkMaskFromIndexSize' '(ILjdk/incubator/vector/IntVector$IntSpecies;Ljdk/incubator/vector/VectorMask;II)V' in 'jdk/incubator/vector/IntVector'
#34: 0x00007f03b0a33148 {method} {0x00007f03b0a33148} 'checkIndexByLane' '(IILjdk/incubator/vector/Vector;I)V' in 'jdk/incubator/vector/AbstractMask'
#35: 0x00007f03b0a332d8 {method} {0x00007f03b0a332d8} 'checkIndex0' '(IILjdk/incubator/vector/Vector;I)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/AbstractMask'
#36: 0x00007f03b0a4e418 {method} {0x00007f03b0a4e418} 'compare' '(Ljdk/incubator/vector/VectorOperators$Comparison;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/Int256Vector'
#37: 0x00007f03b0a4c040 {method} {0x00007f03b0a4c040} 'compare' '(Ljdk/incubator/vector/VectorOperators$Comparison;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/Int256Vector$Int256Mask;' in 'jdk/incubator/vector/Int256Vector'
#38: 0x00007f03b08157f8 {method} {0x00007f03b08157f8} 'compareTemplate' '(Ljava/lang/Class;Ljdk/incubator/vector/VectorOperators$Comparison;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/IntVector'
#39: 0x00007f03b0a0a230 {method} {0x00007f03b0a0a230} 'check' '(Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractVector'
#40: 0x00007f03b0b25e80 {method} {0x00007f03b0b25e80} 'linkToTargetMethod' '(Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x00000008000d5000'
#41: 0x00007f03b0b24f00 {method} {0x00007f03b0b24f00} 'newInvokeSpecial' '(Ljava/lang/Object;Ljava/lang/Object;I)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$DMH+0x00000008000d4800'
#42: 0x00007f03b04820b0 {method} {0x00007f03b04820b0} 'allocateInstance' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/DirectMethodHandle'
#43: 0x00007f03b0a34418 {method} {0x00007f03b0a34418} 'length' '()I' in 'jdk/incubator/vector/VectorMask'
#44: 0x00007f03b0a320f8 {method} {0x00007f03b0a320f8} 'vectorSpecies' '()Ljdk/incubator/vector/VectorSpecies;' in 'jdk/incubator/vector/AbstractMask'
#45: 0x00007f03b0a52f90 {method} {0x00007f03b0a52f90} 'vspecies' '()Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/Int256Vector$Int256Mask'
#46: 0x00007f03b081faa8 {method} {0x00007f03b081faa8} 'add' '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#47: 0x00007f03b081ea38 {method} {0x00007f03b081ea38} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#48: 0x00007f03b0a4e190 {method} {0x00007f03b0a4e190} 'blend' '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Int256Vector'
#49: 0x00007f03b0a4c320 {method} {0x00007f03b0a4c320} 'blend' '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/Int256Vector;' in 'jdk/incubator/vector/Int256Vector'
#50: 0x00007f03b0816170 {method} {0x00007f03b0816170} 'blendTemplate' '(Ljava/lang/Class;Ljdk/incubator/vector/IntVector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#51: 0x00007f03b0a83e80 {method} {0x00007f03b0a83e80} 'requireLength' '(II)V' in 'jdk/incubator/vector/VectorIntrinsics'
#52: 0x00007f03b081c2c8 {method} {0x00007f03b081c2c8} 'opCode' '(Ljdk/incubator/vector/VectorOperators$Operator;)I' in 'jdk/incubator/vector/IntVector'
#53: 0x00007f03b0a146b8 {method} {0x00007f03b0a146b8} 'opCode' '(Ljdk/incubator/vector/VectorOperators$Operator;II)I' in 'jdk/incubator/vector/VectorOperators'
#54: 0x00007f03b0aeee40 {method} {0x00007f03b0aeee40} 'opCode' '(II)I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#55: 0x00007f03b0baad20 {method} {0x00007f03b0baad20} 'apply' '(Ljava/lang/Object;III)V' in 'jdk/incubator/vector/IntVector$$Lambda$67+0x00000008000ad640'
#56: 0x00007f03b0a04120 {method} {0x00007f03b0a04120} 'lambda$intoArray$82' '([IIII)V' in 'jdk/incubator/vector/IntVector'
#57: 0x00007f03b05606d8 {method} {0x00007f03b05606d8} 'requireNonNull' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/util/Objects'
#58: 0x00007f03b0a18ea8 {method} {0x00007f03b0a18ea8} 'iota' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
#59: 0x00007f03b0a1d690 {method} {0x00007f03b0a1d690} 'laneCount' '()I' in 'jdk/incubator/vector/AbstractSpecies'
#60: 0x00007f03b0a0a350 {method} {0x00007f03b0a0a350} 'sameSpecies' '(Ljdk/incubator/vector/Vector;)Z' in 'jdk/incubator/vector/AbstractVector'
#61: 0x00007f03b0a522f0 {method} {0x00007f03b0a522f0} 'getBits' '()[Z' in 'jdk/incubator/vector/Int256Vector$Int256Mask'
#62: 0x00007f03b0a1d5c0 {method} {0x00007f03b0a1d5c0} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
#63: 0x00000008000a2b78 'jdk/incubator/vector/VectorOperators$AssociativeImpl'
#64: 0x00007f03b0aef2a8 {method} {0x00007f03b0aef2a8} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#65: 0x00007f03b0aeef18 {method} {0x00007f03b0aeef18} 'opCodeRaw' '()I' in 'jdk/incubator/vector/VectorOperators$OperatorImpl'
#66: 0x00007f03b0a118b0 {method} {0x00007f03b0a118b0} 'find' '(Ljdk/incubator/vector/VectorOperators$Operator;ILjava/util/function/IntFunction;)Ljava/lang/Object;' in 'jdk/incubator/vector/VectorOperators$ImplCache'
#67: 0x00000008000a37e8 'jdk/incubator/vector/VectorOperators$ComparisonImpl'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
VECTOR_MASKED : [Time] 405 ms   [Res] 93000000
------------------------------------------------------------------------
App::micro_vector_masked([I[I[I)V
  interpreter_invocation_count:    30128 
  invocation_counter:               5000 
  backedge_counter:                 5011 
  mdo size: 1176 bytes

0 iconst_0
1 istore #4
3 aconst_null
4 astore #5
6 aconst_null
7 astore #6
9 fast_aaccess_0
10 fast_agetfield 13 <App.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
13 invokeinterface 36 <jdk/incubator/vector/VectorSpecies.length()I> 
  0   bci: 13   VirtualCallData     count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/IntVector$IntSpecies'(29853 1.00)
18 newarray boolean
20 astore #7
22 iconst_0
23 istore #8
25 fast_iload #8
27 aload #7
29 arraylength
30 if_icmpge 45
  56  bci: 30   BranchData          taken(29853) displacement(56)
                                    not taken(238824)
33 aload #7
35 fast_iload #8
37 iconst_1
38 bastore
39 iinc #8 1
42 goto 25
  88  bci: 42   JumpData            taken(238824) displacement(-32)
45 fast_aaccess_0
46 fast_agetfield 13 <App.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
49 aload #7
51 iconst_0
52 invokestatic 40 <jdk/incubator/vector/VectorMask.fromArray(Ljdk/incubator/vector/VectorSpecies;[ZI)Ljdk/incubator/vector/VectorMask;> 
  112 bci: 52   CounterData         count(29853)
55 astore #8
57 fast_iload #4
59 fast_aaccess_0
60 fast_agetfield 13 <App.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
63 aload_1
64 arraylength
65 invokeinterface 18 <jdk/incubator/vector/VectorSpecies.loopBound(I)I> 
  128 bci: 65   VirtualCallData     count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/IntVector$IntSpecies'(119413 1.00)
70 if_icmpge 127
  184 bci: 70   BranchData          taken(29854) displacement(256)
                                    not taken(89559)
73 fast_aaccess_0
74 fast_agetfield 13 <App.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
77 aload_2
78 fast_iload #4
80 invokestatic 24 <jdk/incubator/vector/IntVector.fromArray(Ljdk/incubator/vector/VectorSpecies;[II)Ljdk/incubator/vector/IntVector;> 
  216 bci: 80   CounterData         count(89559)
83 astore #5
85 fast_aaccess_0
86 fast_agetfield 13 <App.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
89 aload_3
90 fast_iload #4
92 invokestatic 24 <jdk/incubator/vector/IntVector.fromArray(Ljdk/incubator/vector/VectorSpecies;[II)Ljdk/incubator/vector/IntVector;> 
  232 bci: 92   CounterData         count(89559)
95 astore #6
97 aload #5
99 aload #6
101 invokevirtual 28 <jdk/incubator/vector/IntVector.add(Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;> 
  248 bci: 101  VirtualCallData     count(89559) nonprofiled_count(0) entries(0)
104 aload_1
105 fast_iload #4
107 invokevirtual 32 <jdk/incubator/vector/IntVector.intoArray([II)V> 
  304 bci: 107  VirtualCallData     count(89559) nonprofiled_count(0) entries(0)
110 fast_iload #4
112 fast_aaccess_0
113 fast_agetfield 13 <App.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
116 invokeinterface 36 <jdk/incubator/vector/VectorSpecies.length()I> 
  360 bci: 116  VirtualCallData     count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/IntVector$IntSpecies'(89559 1.00)
121 iadd
122 istore #4
124 goto 57
  416 bci: 124  JumpData            taken(89559) displacement(-288)
127 fast_aaccess_0
128 fast_agetfield 13 <App.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
131 lconst_1
132 aload_1
133 arraylength
134 fast_aaccess_0
135 fast_agetfield 13 <App.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
138 invokeinterface 36 <jdk/incubator/vector/VectorSpecies.length()I> 
  440 bci: 138  VirtualCallData     count(0) nonprofiled_count(0) entries(1)
                                    'jdk/incubator/vector/IntVector$IntSpecies'(29854 1.00)
143 iconst_1
144 isub
145 iand
146 lshl
147 lconst_1
148 lsub
149 invokestatic 45 <jdk/incubator/vector/VectorMask.fromLong(Ljdk/incubator/vector/VectorSpecies;J)Ljdk/incubator/vector/VectorMask;> 
  496 bci: 149  CounterData         count(29854)
152 astore #9
154 fast_aaccess_0
155 fast_agetfield 13 <App.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
158 aload_2
159 fast_iload #4
161 aload #9
163 invokestatic 49 <jdk/incubator/vector/IntVector.fromArray(Ljdk/incubator/vector/VectorSpecies;[IILjdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;> 
  512 bci: 163  CounterData         count(29854)
166 astore #5
168 fast_aaccess_0
169 fast_agetfield 13 <App.SPECIES/Ljdk/incubator/vector/VectorSpecies;> 
172 aload_3
173 fast_iload #4
175 aload #9
177 invokestatic 49 <jdk/incubator/vector/IntVector.fromArray(Ljdk/incubator/vector/VectorSpecies;[IILjdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;> 
  528 bci: 177  CounterData         count(29854)
180 astore #6
182 aload #5
184 aload #6
186 aload #9
188 invokevirtual 52 <jdk/incubator/vector/IntVector.add(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/VectorMask;)Ljdk/incubator/vector/IntVector;> 
  544 bci: 188  VirtualCallData     count(29854) nonprofiled_count(0) entries(0)
191 aload_1
192 fast_iload #4
194 aload #9
196 invokevirtual 55 <jdk/incubator/vector/IntVector.intoArray([IILjdk/incubator/vector/VectorMask;)V> 
  600 bci: 196  VirtualCallData     count(29854) nonprofiled_count(0) entries(0)
199 return
------------------------------------------------------------------------
Total MDO size: 1176 bytes
