CompileCommand: print test_ms.micro bool print = true

============================= C2-compiled nmethod ==============================
#r018 rsi:rsi   : parm 0: int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
#r016 rdx:rdx   : parm 1: int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *
# -- Old rsp -- Framesize: 160 --
#r623 rsp+156: in_preserve
#r622 rsp+152: return address
#r621 rsp+148: in_preserve
#r620 rsp+144: saved fp register
#r619 rsp+140: pad2, stack alignment
#r618 rsp+136: pad2, stack alignment
#r617 rsp+132: Fixed slot 1
#r616 rsp+128: Fixed slot 0
#r655 rsp+124: spill
#r654 rsp+120: spill
#r653 rsp+116: spill
#r652 rsp+112: spill
#r651 rsp+108: spill
#r650 rsp+104: spill
#r649 rsp+100: spill
#r648 rsp+96: spill
#r647 rsp+92: spill
#r646 rsp+88: spill
#r645 rsp+84: spill
#r644 rsp+80: spill
#r643 rsp+76: spill
#r642 rsp+72: spill
#r641 rsp+68: spill
#r640 rsp+64: spill
#r639 rsp+60: spill
#r638 rsp+56: spill
#r637 rsp+52: spill
#r636 rsp+48: spill
#r635 rsp+44: spill
#r634 rsp+40: spill
#r633 rsp+36: spill
#r632 rsp+32: spill
#r631 rsp+28: spill
#r630 rsp+24: spill
#r629 rsp+20: spill
#r628 rsp+16: spill
#r627 rsp+12: spill
#r626 rsp+ 8: spill
#r625 rsp+ 4: spill
#r624 rsp+ 0: spill
#
----------------------- MetaData before Compile_id = 475 ------------------------
{method}
 - this oop:          0x0000732cf84015e0
 - method holder:     'test_ms'
 - constants:         0x0000732cf8401078 constant pool [107]/operands[10] {0x0000732cf8401078} for 'test_ms' cache=0x0000732cf8401a48
 - access:            0x9  public static 
 - flags:             0x4080  queued_for_compilation has_loops_flag_init 
 - name:              'micro'
 - signature:         '([I[I)V'
 - max stack:         6
 - max locals:        5
 - size of params:    2
 - method size:       14
 - vtable index:      -2
 - i2i entry:         0x0000732d1c3ef6a0
 - adapters:          AHE@0x0000732d280cc9f0: 0xbb i2c: 0x0000732d1c500fe0 c2i: 0x0000732d1c501036 c2iUV: 0x0000732d1c501015 c2iNCI: 0x0000732d1c501071
 - compiled entry     0x0000732d1c501036
 - code size:         34
 - code start:        0x0000732cf84015b0
 - code end (excl):   0x0000732cf84015d2
 - method data:       0x0000732cf8401b70
 - checked ex length: 0
 - linenumber start:  0x0000732cf84015d2
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 475 -----------------------
#
#  void ( int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *, int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact * )
#
0000    N1: #	out( B1 ) <- in( B106 B107 B76 B77 B96 B108 B97 B105 B89 B98 B90 B72 B74 B99 B100 B101 B91 B92 B93 B78 B79 B73 B85 B80 B81 B102 B94 B84 B59 B82 B104 B88 B86 B83 B115 B71 B75 B103 B87 )  Freq: 1

0000    B1: #	out( B106 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
0000    # stack bang (1752 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #144	# Create frame

001e    movq    [rsp + #24], RSI	# spill
0023    movq    [rsp + #32], RDX	# spill
0028    movl    R10, [RDX + #12 (8-bit)]	# range
002c    NullCheck RDX

002c    B2: #	out( B107 B3 ) <- in( B1 )  Freq: 1
002c    movslq  R10, R10	# i2l
002f    salq    R10, #2
0033    movl    R11, [RSI + #12 (8-bit)]	# range
0037    NullCheck RSI

0037    B3: #	out( B76 B4 ) <- in( B2 )  Freq: 0.999999
0037    movslq  RBP, R11	# i2l
003a    leaq    R11, [R10 + #-127]
003e    salq    RBP, #2
0042    testq   R11, R11
0045    jl     B76  P=0.000001 C=-1.000000

004b    B4: #	out( B77 B5 ) <- in( B3 )  Freq: 0.999998
004b    testq   R11, R11	# unsigned
004e    jbe,u   B77  P=0.000001 C=-1.000000

0054    B5: #	out( B60 B6 ) <- in( B4 )  Freq: 0.999997
0054    # TLS is in R15
0054    movq    RAX, [R15 + #464 (32-bit)]	# ptr
005b    movq    R10, RAX	# spill
005e    addq    R10, #48	# ptr
0062    # TLS is in R15
0062    cmpq    R10, [R15 + #480 (32-bit)]	# raw ptr
0069    jae,u   B60  P=0.000100 C=-1.000000

006f    B6: #	out( B7 ) <- in( B5 )  Freq: 0.999897
006f    # TLS is in R15
006f    movq    [R15 + #464 (32-bit)], R10	# ptr
0076    PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
007e    movq    [RAX], #1	# long
0085    movl    [RAX + #8 (8-bit)], narrowklass: precise jdk/internal/foreign/layout/ValueLayouts$OfIntImpl: 0x0000732ce44c3160 (java/lang/foreign/ValueLayout$OfInt,java/lang/foreign/ValueLayout,java/lang/foreign/MemoryLayout):Constant:exact *	# compressed klass ptr
008c    movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
0090    movq    [RAX + #16 (8-bit)], R12	# long (R12_heapbase==0)
0094    movq    [RAX + #24 (8-bit)], R12	# long (R12_heapbase==0)
0098    movq    [RAX + #32 (8-bit)], R12	# long (R12_heapbase==0)
009c    movq    [RAX + #40 (8-bit)], R12	# long (R12_heapbase==0)

00a0    B7: #	out( B113 B8 ) <- in( B61 B6 )  Freq: 0.999997
00a0    movq    [rsp + #40], RBP	# spill
00a5    
00a5    MEMBAR-storestore (empty encoding)
00a5    # checkcastPP of RAX
00a5    movq    [rsp + #0], RAX	# spill
00a9    movq    RDI, java/util/Optional:exact *	# ptr
00b3    movq    RSI, RAX	# spill
00b6    movq    RDX, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
00c0    movq    RCX, java/nio/ByteOrder:exact *	# ptr
00ca    movl    R8, #4	# long (unsigned 32-bit)
00d0    movl    R9, #1	# long (unsigned 32-bit)
00d6    movq    RBP, [rsp + #32]	# spill
        nop 	# 1 bytes pad for loops and calls
00dc    call,static  jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::<init>
        # jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::<init> @ bci:11 (line 238) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup @ bci:8 (line 243) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #0
        # jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup @ bci:5 (line 235) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder @ bci:15 (line 95) L[0]=_ L[1]=_
        # jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder @ bci:2 (line 235) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:29 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#ScObj0
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=RBP }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=RBP }
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {rbp=Oop [0]=Oop [24]=Oop [32]=Oop off=228/0xe4}

00ec    B8: #	out( B96 B9 ) <- in( B7 )  Freq: 0.999977
        # Block is sole successor of call
00ec    movq    R10, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
00f6    movl    R11, [R10 + #80 (8-bit)]	# compressed ptr ! Field: volatile java/lang/Class.reflectionData
00fa    MEMBAR-acquire ! (empty encoding)
00fa    movl    R9, [R10 + #12 (8-bit)]	# int ! Field: volatile java/lang/Class.classRedefinedCount
00fe    MEMBAR-acquire ! (empty encoding)
00fe    testl   R11, R11	# compressed ptr
0101    je     B96  P=0.000000 C=6785.000000

0107    B9: #	out( B108 B10 ) <- in( B8 )  Freq: 0.999977
0107    movl    R8, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/ref/Reference.referent
013a    
013a    movl    R10, [R8 + #8 (8-bit)]	# compressed klass ptr
013e    NullCheck R8

013e    B10: #	out( B97 B11 ) <- in( B9 )  Freq: 0.999976
013e    movq    RCX, [R11 + #32 (8-bit)]	# long ! Field: java/lang/ref/SoftReference.timestamp
0142    movq    RBX, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
014c    movq    RBX, [RBX + #120 (8-bit)]	# long ! Field: java/lang/ref/SoftReference.clock
0150    cmpq    RCX, RBX
0153    jne     B97  P=0.000000 C=6785.000000

0159    B11: #	out( B105 B12 ) <- in( B10 )  Freq: 0.999976
0159    cmpl    R10, narrowklass: precise java/lang/Class$ReflectionData: 0x0000732ce437c3b0:Constant:exact *	# compressed klass ptr
0160    jne,u   B105  P=0.000000 C=-1.000000

0166    B12: #	out( B89 B13 ) <- in( B11 )  Freq: 0.999976
0166    decode_heap_oop_not_null R8,R8
0166    # checkcastPP of R8
0166    movl    RBP, [R8 + #12 (8-bit)]	# int ! Field: java/lang/Class$ReflectionData.redefinedCount (constant)
016a    cmpl    RBP, R9
016d    jne     B89  P=0.000000 C=6785.000000

0173    B13: #	out( B98 B14 ) <- in( B12 )  Freq: 0.999975
0173    movl    R10, [R8 + #52 (8-bit)]	# compressed ptr ! Field: java/lang/Class$ReflectionData.simpleName
0177    testl   R10, R10	# compressed ptr
017a    je     B98  P=0.000000 C=6785.000000

0180    B14: #	out( B90 B15 ) <- in( B13 )  Freq: 0.999975
0180    movq    R11, [rsp + #0]	# spill
0184    movq    R8, [R11 + #16 (8-bit)]	# long ! Field: jdk/internal/foreign/layout/AbstractLayout.byteSize (constant)
0188    movl    RBX, R8	# l2i
018b    movslq  R8, RBX	# i2l
018e    leaq    R9, [R8 + #-1]
0192    andq    R9, #128	# long
0199    jne     B90  P=0.000000 C=6784.000000

019f    B15: #	out( B72 B16 ) <- in( B14 )  Freq: 0.999974
019f    testl   RBX, RBX
01a1    je     B72  P=0.000001 C=-1.000000

01a7    B16: #	out( B64 B17 ) <- in( B15 )  Freq: 0.999973
01a7    movl    RAX, #128	# long (unsigned 32-bit)
01ac    movq    rdx, 0x8000000000000000	# ldiv
	cmpq    rax, rdx
	jne,s   normal
	xorl    rdx, rdx
	cmpq    R8, -1
	je,s    done
normal: cdqq
	idivq   R8
done:
01c8    movl    R10, RAX	# l2i
01cb    cmpl    R10, #262144	# unsigned
01d2    ja,u   B64  P=0.000001 C=-1.000000

01d8    B17: #	out( B64 B18 ) <- in( B16 )  Freq: 0.999972
01d8    # TLS is in R15
01d8    movq    R8, [R15 + #464 (32-bit)]	# ptr
01df    movl    R9, R10	# spill
01e2    # castII of R9
01e2    movslq  R9, R9	# i2l
01e5    leaq RCX, [R9 << #2 + #23]	# long
01ed    movq    R9, RCX	# spill
01f0    andq    R9, #-8	# long
01f4    movq    RBX, R8	# spill
01f7    addq    RBX, R9	# ptr
01fa    # TLS is in R15
01fa    cmpq    RBX, [R15 + #480 (32-bit)]	# raw ptr
0201    jae,u   B64  P=0.000100 C=-1.000000

0207    B18: #	out( B19 ) <- in( B17 )  Freq: 0.999872
0207    # TLS is in R15
0207    movq    [R15 + #464 (32-bit)], RBX	# ptr
020e    PREFETCHW [RBX + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0215    movq    [R8], #1	# long
021c    PREFETCHW [RBX + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0223    movl    [R8 + #8 (8-bit)], narrowklass: precise [int (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
022b    movl    [R8 + #12 (8-bit)], R10	# int
022f    PREFETCHW [RBX + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0236    PREFETCHW [RBX + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
023d    movq    RDI, R8	# spill
0240    addq    RDI, #16	# ptr
0244    shrq    RCX, #3
0248    addq    RCX, #-2	# long
024c    xorq    rax, rax	# ClearArray:
	cmp     InitArrayShortSize,rcx
	jg      LARGE
	dec     rcx
	js      DONE	# Zero length
	mov     rax,(rdi,rcx,8)	# LOOP
	dec     rcx
	jge     LOOP
	jmp     DONE
	# LARGE:
	mov     rdi,rax
	vpxor   ymm0,ymm0,ymm0
	jmpq    L_zero_64_bytes
	# L_loop:	# 64-byte LOOP
	vmovdqu ymm0,(rax)
	vmovdqu ymm0,0x20(rax)
	add     0x40,rax
	# L_zero_64_bytes:
	sub     0x8,rcx
	jge     L_loop
	add     0x4,rcx
	jl      L_tail
	vmovdqu ymm0,(rax)
	add     0x20,rax
	sub     0x4,rcx
	# L_tail:	# Clearing tail bytes
	add     0x4,rcx
	jle     L_end
	dec     rcx
	# L_sloop:	# 8-byte short loop
	vmovq   xmm0,(rax)
	add     0x8,rax
	dec     rcx
	jge     L_sloop
	# L_end:
	# DONE

02a9    B19: #	out( B62 B20 ) <- in( B65 B18 )  Freq: 0.999973
02a9    
02a9    MEMBAR-storestore (empty encoding)
02a9    # checkcastPP of R8
02a9    movq    RBP, [R11 + #24 (8-bit)]	# long ! Field: jdk/internal/foreign/layout/AbstractLayout.byteAlignment (constant)
02ad    movl    R9, [R11 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/foreign/layout/AbstractLayout.name (constant)
02b1    # castII of R10
02b1    # TLS is in R15
02b1    movq    RAX, [R15 + #464 (32-bit)]	# ptr
02b8    movslq  RBX, R10	# i2l
02bb    movq    RDI, RAX	# spill
02be    addq    RDI, #48	# ptr
02c2    leaq    RCX, [RBX << #2]
02ca    # TLS is in R15
02ca    cmpq    RDI, [R15 + #480 (32-bit)]	# raw ptr
02d1    jae,u   B62  P=0.000100 C=-1.000000

02d7    B20: #	out( B21 ) <- in( B19 )  Freq: 0.999873
02d7    # TLS is in R15
02d7    movq    [R15 + #464 (32-bit)], RDI	# ptr
02de    PREFETCHW [RDI + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
02e5    movq    [RAX], #1	# long
02ec    movl    [RAX + #8 (8-bit)], narrowklass: precise jdk/internal/foreign/layout/ValueLayouts$OfIntImpl: 0x0000732ce44c3160 (java/lang/foreign/ValueLayout$OfInt,java/lang/foreign/ValueLayout,java/lang/foreign/MemoryLayout):Constant:exact *	# compressed klass ptr
02f3    movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
02f7    movq    [RAX + #16 (8-bit)], R12	# long (R12_heapbase==0)
02fb    movq    [RAX + #24 (8-bit)], R12	# long (R12_heapbase==0)
02ff    movq    [RAX + #32 (8-bit)], R12	# long (R12_heapbase==0)
0303    movq    [RAX + #40 (8-bit)], R12	# long (R12_heapbase==0)
0307    movq    [rsp + #0], R11	# spill
030b    movl    [rsp + #8], R10	# spill
0310    movq    [rsp + #16], R8	# spill
0315    movl    [rsp + #12], R9	# spill
031a    movq    [rsp + #48], RBX	# spill
031f    movq    [rsp + #56], RCX	# spill

0324    B21: #	out( B114 B22 ) <- in( B63 B20 )  Freq: 0.999973
0324    
0324    MEMBAR-storestore (empty encoding)
0324    # checkcastPP of RAX
0324    movq    [rsp + #64], RAX	# spill
0329    movl    R10, [rsp + #12]	# spill
032e    decode_heap_oop RDI,R10
0352    movq    RSI, RAX	# spill
0355    movq    RDX, java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact *	# ptr
035f    movq    RCX, java/nio/ByteOrder:exact *	# ptr
0369    movl    R8, #4	# long (unsigned 32-bit)
036f    movq    R9, RBP	# spill
0372    movq    RBP, [rsp + #32]	# spill
        nop 	# 1 bytes pad for loops and calls
0378    call,static  jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::<init>
        # jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::<init> @ bci:11 (line 238) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup @ bci:8 (line 243) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=rsp + #64
        # jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup @ bci:5 (line 235) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder @ bci:15 (line 95) L[0]=_ L[1]=_
        # jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder @ bci:2 (line 235) L[0]=_ L[1]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:50 (line 343) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #8 L[6]=rsp + #16 L[7]=_ STK[0]=#ScObj0 STK[1]=rsp + #0 STK[2]=#0 STK[3]=_ STK[4]=#ScObj1
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=RBP }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #56, [readOnly :1]=#0, [scope :2]=#ScObj3, [offset :3]=#16, [base :4]=rsp + #16 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=RBP }
        # ScObj3 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #16 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {rbp=Oop [0]=Oop [16]=Oop [24]=Oop [32]=Oop [64]=Oop off=896/0x380}

0388    B22: #	out( B99 B23 ) <- in( B21 )  Freq: 0.999953
        # Block is sole successor of call
0388    movq    R11, [rsp + #0]	# spill
038c    movq    RBX, [R11 + #16 (8-bit)]	# long ! Field: jdk/internal/foreign/layout/AbstractLayout.byteSize (constant)
0390    movq    R8, [rsp + #64]	# spill
0395    movq    R10, [R8 + #16 (8-bit)]	# long ! Field: jdk/internal/foreign/layout/AbstractLayout.byteSize (constant)
0399    cmpq    RBX, R10
039c    jne     B99  P=0.000000 C=6784.000000

03a2    B23: #	out( B100 B24 ) <- in( B22 )  Freq: 0.999953
03a2    movq    R9, [R11 + #24 (8-bit)]	# long ! Field: jdk/internal/foreign/layout/AbstractLayout.byteAlignment (constant)
03a6    cmpq    R9, RBX
03a9    jg     B100  P=0.000000 C=6785.000000

03af    B24: #	out( B101 B25 ) <- in( B23 )  Freq: 0.999952
03af    movq    RCX, [R8 + #24 (8-bit)]	# long ! Field: jdk/internal/foreign/layout/AbstractLayout.byteAlignment (constant)
03b3    cmpq    RCX, R10
03b6    jg     B101  P=0.000000 C=6785.000000

03bc    B25: #	out( B91 B26 ) <- in( B24 )  Freq: 0.999952
03bc    decq    R9	# long
03bf    andq    R9, #20	# long
03c3    jne     B91  P=0.000000 C=6785.000000

03c9    B26: #	out( B92 B27 ) <- in( B25 )  Freq: 0.999951
03c9    decq    RCX	# long
03cc    andq    RCX, #20	# long
03d0    jne     B92  P=0.000000 C=6785.000000

03d6    B27: #	out( B93 B28 ) <- in( B26 )  Freq: 0.999951
03d6    movq    RDX, [rsp + #48]	# spill
03db    imulq   RDX, RBX	# long
03df    xorl    R10, R10	# long
03e2    cmpq    RDX, R10	# CmpL3
	movl    R10, -1
	jl,s    done
	setcc   R10 	# emits setne + movzbl or setzune for APXdone:
03f5    testq   RDX, RDX
03f8    jle     B93  P=0.000000 C=6785.000000

03fe    B28: #	out( B78 B29 ) <- in( B27 )  Freq: 0.99995
03fe    movl    R9, #128	# long (unsigned 32-bit)
0404    subq    R9, RDX	# long
0407    incq    R9	# long
040a    testq   R9, R9
040d    jl     B78  P=0.000001 C=-1.000000

0413    B29: #	out( B79 B30 ) <- in( B28 )  Freq: 0.999949
0413    movl    RBP, #129	# long (unsigned 32-bit)
0418    subq    RBP, RDX	# long
041b    testq   RBP, RBP	# unsigned
041e    jbe,u   B79  P=0.000001 C=-1.000000

0424    B30: #	out( B80 B31 ) <- in( B29 )  Freq: 0.999948
0424    movq    RBP, [rsp + #56]	# spill
0429    subq    RBP, RDX	# long
042c    incq    RBP	# long
042f    testq   RBP, RBP
0432    jl     B80  P=0.000001 C=-1.000000

0438    B31: #	out( B81 B32 ) <- in( B30 )  Freq: 0.999947
0438    testq   RBP, RBP	# unsigned
043b    jbe,u   B81  P=0.000001 C=-1.000000

0441    B32: #	out( B102 B33 ) <- in( B31 )  Freq: 0.999946
0441    cmpq    RBX, #1
0445    je     B102  P=0.000000 C=6784.000000

044b    B33: #	out( B94 B34 ) <- in( B32 )  Freq: 0.999946
044b    movl    R9, [R8 + #36 (8-bit)]	# compressed ptr ! Field: jdk/internal/foreign/layout/ValueLayouts$AbstractValueLayout.order (constant)
044f    movl    RBP, [R11 + #36 (8-bit)]	# compressed ptr ! Field: jdk/internal/foreign/layout/ValueLayouts$AbstractValueLayout.order (constant)
0453    cmpl    RBP, R9	# compressed ptr
0456    jne,u   B94  P=0.000000 C=6784.000000

045c    B34: #	out( B103 B35 ) <- in( B33 )  Freq: 0.999945
045c    testq   RDX, RDX
045f    jl     B103  P=0.000000 C=6784.000000

0465    B35: #	out( B104 B36 ) <- in( B34 )  Freq: 0.999945
0465    testq   RDX, RDX
0468    je     B104  P=0.000000 C=6784.000000

046e    B36: #	out( B66 B37 ) <- in( B35 )  Freq: 0.999944
046e    movq    RBP, [rsp + #16]	# spill
0473    addq    RBP, #16	# ptr
0477    movq    RDI, [rsp + #32]	# spill
047c    addq    RDI, #16	# ptr
0480    movq    RSI, RBP	# spill
0483    call_leaf_nofp,runtime  unsafe_arraycopy
        No JVM State Info
        # 
049b    # TLS is in R15
049b    movb    [R15 + #1480 (32-bit)], R12	# short/char (R12_heapbase==0)
04a2    # TLS is in R15
04a2    movq    R11, [R15 + #464 (32-bit)]	# ptr
04a9    movq    R10, R11	# spill
04ac    addq    R10, #48	# ptr
04b0    # TLS is in R15
04b0    cmpq    R10, [R15 + #480 (32-bit)]	# raw ptr
04b7    jae,u   B66  P=0.000100 C=-1.000000

04bd    B37: #	out( B38 ) <- in( B36 )  Freq: 0.999844
04bd    # TLS is in R15
04bd    movq    [R15 + #464 (32-bit)], R10	# ptr
04c4    PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
04cc    movq    [R11], #1	# long
04d3    PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
04db    movl    [R11 + #8 (8-bit)], narrowklass: precise [byte (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# compressed klass ptr
04e3    PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
04eb    movl    [R11 + #12 (8-bit)], #32	# int
04f3    PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
04fb    movq    [R11 + #16 (8-bit)], R12	# long (R12_heapbase==0)
04ff    movq    [R11 + #24 (8-bit)], R12	# long (R12_heapbase==0)
0503    movq    [R11 + #32 (8-bit)], R12	# long (R12_heapbase==0)
0507    movq    [R11 + #40 (8-bit)], R12	# long (R12_heapbase==0)

050b    B38: #	out( B73 B39 ) <- in( B67 B37 )  Freq: 0.999944
050b    
050b    # checkcastPP of R11
050b    movl    RDI, [rsp + #8]	# spill
050f    testl   RDI, RDI
0511    je     B73  P=0.000001 C=-1.000000

0517    B39: #	out( B73 B40 ) <- in( B38 )  Freq: 0.999943
0517    cmpl    RDI, #31	# unsigned
051a    jbe,u   B73  P=0.000001 C=-1.000000

0520    B40: #	out( B95 B41 ) <- in( B39 )  Freq: 0.999942
0520    movl    R8, [RBP]	# int
0524    movl    RCX, R8	# spill
0527    andl    RCX, #31	# int
052a    cmpl    RCX, R8
052d    jne     B95  P=0.000000 C=6785.000000

0533    B41: #	out( B82 B42 ) <- in( B40 )  Freq: 0.999942
0533    cmpl    RDI, #1	# unsigned
0536    jbe,u   B82  P=0.000001 C=-1.000000

053c    B42: #	out( B83 B43 ) <- in( B41 )  Freq: 0.999941
053c    cmpl    RDI, #4	# unsigned
053f    jbe,u   B83  P=0.000001 C=-1.000000

0545    B43: #	out( B45 ) <- in( B42 )  Freq: 0.99994
0545    movb    [R11 + #16 (8-bit)], RCX	# byte
0549    movl    R9, #1	# int
054f    jmp,s   B45
        nop 	# 15 bytes pad for loops and calls

0560    B44: #	out( B45 ) <- in( B49 ) top-of-loop Freq: 31.996
0560    movl    R9, R10	# spill

0563    B45: #	out( B71 B46 ) <- in( B43 B44 ) Loop( B45-B44 inner main of N478) Freq: 32.9959
0563    movslq  R10, R9	# i2l
0566    movq    RBX, [rsp + #16]	# spill
056b    movl    R8, [RBX + #16 + R10 << #2]	# int
0570    movl    RCX, R8	# spill
0573    andl    RCX, #31	# int
0576    cmpl    RCX, R8
0579    jne     B71  P=0.000000 C=6785.000000

057f    B46: #	out( B69 B47 ) <- in( B45 )  Freq: 32.9959
057f    movb    [R11 + #16 + R10], RCX	# byte
0584    movl    R8, [RBX + #20 + R10 << #2]	# int
0589    movl    RCX, R8	# spill
058c    andl    RCX, #31	# int
058f    cmpl    RCX, R8
0592    jne     B69  P=0.000000 C=6785.000000

0598    B47: #	out( B70 B48 ) <- in( B46 )  Freq: 32.9959
0598    movb    [R11 + #17 + R10], RCX	# byte
059d    movl    R8, [RBX + #24 + R10 << #2]	# int
05a2    movl    RCX, R8	# spill
05a5    andl    RCX, #31	# int
05a8    cmpl    RCX, R8
05ab    jne     B70  P=0.000000 C=6785.000000

05b1    B48: #	out( B68 B49 ) <- in( B47 )  Freq: 32.9959
05b1    movb    [R11 + #18 + R10], RCX	# byte
05b6    movl    R8, [RBX + #28 + R10 << #2]	# int
05bb    movl    RCX, R8	# spill
05be    andl    RCX, #31	# int
05c1    cmpl    RCX, R8
05c4    jne     B68  P=0.000000 C=6785.000000

05ca    B49: #	out( B44 B50 ) <- in( B48 )  Freq: 32.9959
05ca    movb    [R11 + #19 + R10], RCX	# byte
05cf    leal    R10, [R9 + #4]
05d3    cmpl    R10, #29
05d7    jl,s   B44	# loop end  P=0.969697 C=20480.000000

05d9    B50: #	out( B74 B51 ) <- in( B49 )  Freq: 0.999874
05d9    cmpl    R10, RDI	# unsigned
05dc    jae,u   B74  P=0.000001 C=-1.000000

05e2    B51: #	out( B75 B52 ) <- in( B50 )  Freq: 0.999873
05e2    # castII of R9
05e2    addl    R9, #4	# int
05e6    cmpl    R9, RDI	# unsigned
05e9    jae,u   B75  P=0.000001 C=-1.000000

05ef    B52: #	out( B71 B53 ) <- in( B51 B53 ) Loop( B52-B53 inner post of N1296) Freq: 1.99974
05ef    movslq  R10, R9	# i2l
05f2    movl    R8, [RBX + #16 + R10 << #2]	# int
05f7    movl    RCX, R8	# spill
05fa    andl    RCX, #31	# int
05fd    cmpl    RCX, R8
0600    jne     B71  P=0.000000 C=6785.000000

0606    B53: #	out( B52 B54 ) <- in( B52 )  Freq: 1.99974
0606    movb    [R11 + #16 + R10], RCX	# byte
060b    incl    R9	# int
060e    cmpl    R9, #32
0612    jl,s   B52	# loop end  P=0.500000 C=20480.000000

0614    B54: #	out( B84 B55 ) <- in( B53 )  Freq: 0.999871
0614    load_vector XMM2,[R11 + #16 (8-bit)]
061a    movq    RBP, [rsp + #40]	# spill
061f    addq    RBP, #-31	# long
0623    vector_reinterpret_shrink XMM1,XMM2	!
0627    testq   RBP, RBP
062a    jl     B84  P=0.000001 C=-1.000000

0630    B55: #	out( B85 B56 ) <- in( B54 )  Freq: 0.99987
0630    testq   RBP, RBP	# unsigned
0633    jbe,u   B85  P=0.000001 C=-1.000000

0639    B56: #	out( B86 B57 ) <- in( B55 )  Freq: 0.999869
0639    movq    R11, [rsp + #24]	# spill
063e    vector_cast_b2x XMM0,XMM1	!
0643    store_vector [R11 + #16 (8-bit)],XMM0
	
0649    movq    R10, byte[int:32] (java/lang/Cloneable,java/io/Serializable)<ciTypeArray length=32 type=<ciTypeArrayKlass name=[B loaded=true ident=1376 address=0x0000732ce40224d8> ident=1899 address=0x0000732ce48b3a18> *	# ptr
0653    load_vector XMM0,[R10 + #16 (8-bit)]
0659    vector_slice_const_origin XMM1, #8, XMM2, XMM0 	!using XMM1 as TEMP
0665    vector_reinterpret_shrink XMM1,XMM1	!
0669    cmpq    RBP, #32	# unsigned
066d    jbe,u   B86  P=0.000001 C=-1.000000

0673    B57: #	out( B87 B58 ) <- in( B56 )  Freq: 0.999868
0673    vector_cast_b2x XMM1,XMM1	!
0678    store_vector [R11 + #48 (8-bit)],XMM1
	
067e    vector_slice_const_origin XMM1, #16, XMM2, XMM0 	!using XMM1 as TEMP
068a    vector_reinterpret_shrink XMM1,XMM1	!
068e    cmpq    RBP, #64	# unsigned
0692    jbe,u   B87  P=0.000001 C=-1.000000

0698    B58: #	out( B88 B59 ) <- in( B57 )  Freq: 0.999867
0698    vector_cast_b2x XMM1,XMM1	!
069d    store_vector [R11 + #80 (8-bit)],XMM1
	
06a3    vector_slice_const_origin XMM0, #24, XMM2, XMM0 	!using XMM1 as TEMP
06af    vector_reinterpret_shrink XMM0,XMM0	!
06b3    cmpq    RBP, #96	# unsigned
06b7    jbe,u   B88  P=0.000001 C=-1.000000

06bd    B59: #	out( N1 ) <- in( B58 )  Freq: 0.999866
06bd    vector_cast_b2x XMM0,XMM0	!
06c2    store_vector [R11 + #112 (8-bit)],XMM0
	
06c8    vzeroupper
	addq    rsp, 144	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

06dd    ret

06de    B60: #	out( B111 B61 ) <- in( B5 )  Freq: 0.000100016
06de    movq    RSI, precise jdk/internal/foreign/layout/ValueLayouts$OfIntImpl: 0x0000732ce44c3160 (java/lang/foreign/ValueLayout$OfInt,java/lang/foreign/ValueLayout,java/lang/foreign/MemoryLayout):Constant:exact *	# ptr
06e8    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #8]
        nop 	# 2 bytes pad for loops and calls
06f4    call,static  wrapper for: C2 Runtime new_instance_blob
        # jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup @ bci:0 (line 243) L[0]=_ L[1]=#Ptr0x0000732ce44b1780 L[2]=#1 L[3]=_ L[4]=#Ptr0x0000732ce4442660
        # jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup @ bci:5 (line 235) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder @ bci:15 (line 95) L[0]=_ L[1]=_
        # jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder @ bci:2 (line 235) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:29 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#ScObj0
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=RBP, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #8 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #8 }
        # OopMap {[8]=Oop [24]=Oop [32]=Oop off=1788/0x6fc}

0704    B61: #	out( B7 ) <- in( B60 )  Freq: 0.000100014
        # Block is sole successor of call
0704    jmp     B7

0709    B62: #	out( B110 B63 ) <- in( B19 )  Freq: 0.000100014
0709    movq    [rsp + #56], RCX	# spill
070e    movq    [rsp + #48], RBX	# spill
0713    movl    [rsp + #12], R9	# spill
0718    movq    [rsp + #16], R8	# spill
071d    movl    [rsp + #8], R10	# spill
0722    movq    [rsp + #0], R11	# spill
0726    movq    RSI, precise jdk/internal/foreign/layout/ValueLayouts$OfIntImpl: 0x0000732ce44c3160 (java/lang/foreign/ValueLayout$OfInt,java/lang/foreign/ValueLayout,java/lang/foreign/MemoryLayout):Constant:exact *	# ptr
0730    call,static  wrapper for: C2 Runtime new_instance_blob
        # jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup @ bci:0 (line 243) L[0]=_ L[1]=#Ptr0x0000732ce44b1780 L[2]=RBP L[3]=_ L[4]=rsp + #12
        # jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup @ bci:5 (line 235) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder @ bci:15 (line 95) L[0]=_ L[1]=_
        # jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder @ bci:2 (line 235) L[0]=_ L[1]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:50 (line 343) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #8 L[6]=rsp + #16 L[7]=_ STK[0]=#ScObj0 STK[1]=rsp + #0 STK[2]=#0 STK[3]=_ STK[4]=#ScObj1
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #56, [readOnly :1]=#0, [scope :2]=#ScObj3, [offset :3]=#16, [base :4]=rsp + #16 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # ScObj3 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #16 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {[0]=Oop [12]=NarrowOop [16]=Oop [24]=Oop [32]=Oop off=1848/0x738}

0740    B63: #	out( B21 ) <- in( B62 )  Freq: 0.000100012
        # Block is sole successor of call
0740    jmp     B21

0745    B64: #	out( B112 B65 ) <- in( B16 B17 )  Freq: 0.000101027
0745    movl    [rsp + #0], R10	# spill
0749    movq    RBP, R11	# spill
074c    movq    RSI, precise [int (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# ptr
0756    movl    RDX, R10	# spill
        nop 	# 3 bytes pad for loops and calls
075c    call,static  wrapper for: C2 Runtime new_array_blob
        # jdk.internal.foreign.AbstractMemorySegmentImpl::lambda$toArray$3 @ bci:1 (line 321) L[0]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl$$Lambda/0x000000004d00f540::apply @ bci:1 L[0]=_ L[1]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:20 (line 341) L[0]=#ScObj0 L[1]=_ L[2]=RBP L[3]=_ L[4]=#Ptr0x0000732ce4379830 L[5]=rsp + #0 L[6]=_ L[7]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {rbp=Oop [24]=Oop [32]=Oop off=1892/0x764}

076c    B65: #	out( B19 ) <- in( B64 )  Freq: 0.000101025
        # Block is sole successor of call
076c    movq    R11, RBP	# spill
076f    movl    R10, [rsp + #0]	# spill
0773    movq    R8, RAX	# spill
0776    jmp     B19

077b    B66: #	out( B109 B67 ) <- in( B36 )  Freq: 0.000100011
077b    movq    RSI, precise [byte (java/lang/Cloneable,java/io/Serializable): :Constant:exact *	# ptr
0785    movl    RDX, #32	# int
        nop 	# 2 bytes pad for loops and calls
078c    call,static  wrapper for: C2 Runtime new_array_blob
        # jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare @ bci:3 (line 980) L[0]=rsp + #16 L[1]=#0 L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init> @ bci:3 (line 865) L[0]=_ L[1]=_ L[2]=_ STK[0]=#ScObj0
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Shuffle={ [payload :0]=#null }
        # jdk.incubator.vector.Byte256Vector::shuffleFromArray @ bci:6 (line 154) L[0]=_ L[1]=_ L[2]=_ STK[0]=#ScObj0
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Shuffle={ [payload :0]=#null }
        # jdk.incubator.vector.Byte256Vector::shuffleFromArray @ bci:3 (line 43) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.AbstractSpecies::shuffleFromArray @ bci:6 (line 344) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:45 (line 364) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {rbp=Derived_oop_[16] [16]=Oop [24]=Oop off=1940/0x794}

079c    B67: #	out( B38 ) <- in( B66 )  Freq: 0.000100009
        # Block is sole successor of call
079c    movq    R11, RAX	# spill
079f    jmp     B38

07a4    B68: #	out( B69 ) <- in( B48 )  Freq: 1.64979e-05
07a4    # castII of R9
07a4    addl    R9, #2	# int

07a8    B69: #	out( B71 ) <- in( B46 B68 )  Freq: 3.29959e-05
07a8    incl    R9	# int
07ab    jmp,s   B71

07ad    B70: #	out( B71 ) <- in( B47 )  Freq: 1.64979e-05
07ad    # castII of R9
07ad    addl    R9, #2	# int

07b1    B71: #	out( N1 ) <- in( B52 B95 B45 B70 B69 )  Freq: 6.74917e-05
07b1    movl    RSI, #-187	# int
07b6    movq    RBP, RBX	# spill
07b9    movl    [rsp + #0], R9	# spill
07bd    movl    [rsp + #12], RCX	# spill
07c1    movl    [rsp + #16], R8	# spill
07c6    movq    [rsp + #32], R11	# spill
        nop 	# 1 bytes pad for loops and calls
07cc    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.AbstractShuffle::checkIndex0 @ bci:12 (line 136) L[0]=rsp + #16 L[1]=#32 L[2]=#-1 L[3]=rsp + #12 STK[0]=rsp + #12 STK[1]=rsp + #16
        # jdk.incubator.vector.AbstractShuffle::partiallyWrapIndex @ bci:3 (line 129) L[0]=_ L[1]=_
        # jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare @ bci:27 (line 983) L[0]=RBP L[1]=#0 L[2]=rsp + #32 L[3]=rsp + #0 L[4]=_
        # jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init> @ bci:3 (line 865) L[0]=_ L[1]=_ L[2]=_ STK[0]=#ScObj0
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Shuffle={ [payload :0]=#null }
        # jdk.incubator.vector.Byte256Vector::shuffleFromArray @ bci:6 (line 154) L[0]=_ L[1]=_ L[2]=_ STK[0]=#ScObj0
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Shuffle={ [payload :0]=#null }
        # jdk.incubator.vector.Byte256Vector::shuffleFromArray @ bci:3 (line 43) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.AbstractSpecies::shuffleFromArray @ bci:6 (line 344) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:45 (line 364) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {rbp=Oop [24]=Oop [32]=Oop off=2004/0x7d4}
07dc    stop	# ShouldNotReachHere

07f0    B72: #	out( N1 ) <- in( B15 )  Freq: 1.01325e-06
07f0    movl    RSI, #-130	# int
        nop 	# 3 bytes pad for loops and calls
07f8    call,static  wrapper for: uncommon_trap(reason='div0_check' action='maybe_recompile' debug_id='0')
        # jdk.internal.foreign.AbstractMemorySegmentImpl::checkArraySize @ bci:53 (line 393) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#128 STK[1]=_ STK[2]=#0 STK[3]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:12 (line 340) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {off=2048/0x800}
0808    stop	# ShouldNotReachHere

081c    B73: #	out( N1 ) <- in( B39 B38 )  Freq: 2.01317e-06
081c    movl    RSI, #-146	# int
0821    movq    RBP, [rsp + #16]	# spill
0826    movq    [rsp + #0], R11	# spill
        nop 	# 2 bytes pad for loops and calls
082c    call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare @ bci:12 (line 981) L[0]=RBP L[1]=#0 L[2]=rsp + #0 L[3]=#0 L[4]=_ STK[0]=#0 STK[1]=#32
        # jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init> @ bci:3 (line 865) L[0]=_ L[1]=_ L[2]=_ STK[0]=#ScObj0
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Shuffle={ [payload :0]=#null }
        # jdk.incubator.vector.Byte256Vector::shuffleFromArray @ bci:6 (line 154) L[0]=_ L[1]=_ L[2]=_ STK[0]=#ScObj0
        # ScObj0 jdk/incubator/vector/Byte256Vector$Byte256Shuffle={ [payload :0]=#null }
        # jdk.incubator.vector.Byte256Vector::shuffleFromArray @ bci:3 (line 43) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.AbstractSpecies::shuffleFromArray @ bci:6 (line 344) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:45 (line 364) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {rbp=Oop [0]=Oop [24]=Oop off=2100/0x834}
083c    stop	# ShouldNotReachHere

0850    B74: #	out( N1 ) <- in( B50 )  Freq: 1.01315e-06
0850    stop	# ShouldNotReachHere

0864    B75: #	out( N1 ) <- in( B51 )  Freq: 1.01315e-06
0864    stop	# ShouldNotReachHere

0878    B76: #	out( N1 ) <- in( B3 )  Freq: 9.99999e-07
0878    movl    RSI, #-52	# int
087d    movq    [rsp + #0], R11	# spill
0881    movq    [rsp + #16], R10	# spill
        nop 	# 2 bytes pad for loops and calls
0888    call,static  wrapper for: uncommon_trap(reason='intrinsic_or_type_checked_inlining' action='make_not_entrant' debug_id='0')
        # jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds @ bci:16 (line 403) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#0 STK[1]=_ STK[2]=rsp + #0 STK[3]=_ STK[4]=#ScObj0
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #16, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::asSlice @ bci:3 (line 103) L[0]=#ScObj0 L[1]=#0 L[2]=_ L[3]=#128 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #16, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::asSlice @ bci:3 (line 70) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:15 (line 362) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=#Ptr0x0000732ce44b1780 L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=RBP, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {[24]=Oop [32]=Oop off=2192/0x890}
0898    stop	# ShouldNotReachHere

08ac    B77: #	out( N1 ) <- in( B4 )  Freq: 9.99998e-07
08ac    movl    RSI, #-28	# int
08b1    movq    [rsp + #0], R11	# spill
08b5    movq    [rsp + #16], R10	# spill
        nop 	# 2 bytes pad for loops and calls
08bc    call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds @ bci:16 (line 403) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#0 STK[1]=_ STK[2]=rsp + #0 STK[3]=_ STK[4]=#ScObj0
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #16, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::asSlice @ bci:3 (line 103) L[0]=#ScObj0 L[1]=#0 L[2]=_ L[3]=#128 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #16, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::asSlice @ bci:3 (line 70) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:15 (line 362) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=#Ptr0x0000732ce44b1780 L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=RBP, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {[24]=Oop [32]=Oop off=2244/0x8c4}
08cc    stop	# ShouldNotReachHere

08e0    B78: #	out( N1 ) <- in( B28 )  Freq: 9.9995e-07
08e0    movl    RSI, #-52	# int
08e5    movq    RBP, [rsp + #16]	# spill
08ea    movq    [rsp + #16], R11	# spill
08ef    movq    [rsp + #48], R8	# spill
08f4    movq    [rsp + #64], RDX	# spill
08f9    movq    [rsp + #72], R9	# spill
        nop 	# 2 bytes pad for loops and calls
0900    call,static  wrapper for: uncommon_trap(reason='intrinsic_or_type_checked_inlining' action='make_not_entrant' debug_id='0')
        # jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds @ bci:16 (line 403) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#0 STK[1]=_ STK[2]=rsp + #72 STK[3]=_ STK[4]=#ScObj0
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess @ bci:9 (line 357) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::copy @ bci:125 (line 623) L[0]=_ L[1]=rsp + #16 L[2]=#0 L[3]=_ L[4]=_ L[5]=rsp + #48 L[6]=#0 L[7]=_ L[8]=_ L[9]=_ L[10]=#ScObj0 L[11]=#ScObj1 L[12]=rsp + #64 L[13]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #56, [readOnly :1]=#0, [scope :2]=#ScObj3, [offset :3]=#16, [base :4]=RBP }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # ScObj3 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=RBP }
        # java.lang.foreign.MemorySegment::copy @ bci:33 (line 1660) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:59 (line 343) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=RBP L[7]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {rbp=Oop [16]=Oop [24]=Oop [32]=Oop [48]=Oop off=2312/0x908}
0910    stop	# ShouldNotReachHere

0924    B79: #	out( N1 ) <- in( B29 )  Freq: 9.99949e-07
0924    movl    RSI, #-28	# int
0929    movq    [rsp + #48], R11	# spill
092e    movq    [rsp + #72], RDX	# spill
        nop 	# 1 bytes pad for loops and calls
0934    call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds @ bci:16 (line 403) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#0 STK[1]=_ STK[2]=RBP STK[3]=_ STK[4]=#ScObj0
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess @ bci:9 (line 357) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::copy @ bci:125 (line 623) L[0]=_ L[1]=rsp + #48 L[2]=#0 L[3]=_ L[4]=_ L[5]=rsp + #64 L[6]=#0 L[7]=_ L[8]=_ L[9]=_ L[10]=#ScObj0 L[11]=#ScObj1 L[12]=rsp + #72 L[13]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #56, [readOnly :1]=#0, [scope :2]=#ScObj3, [offset :3]=#16, [base :4]=rsp + #16 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # ScObj3 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #16 }
        # java.lang.foreign.MemorySegment::copy @ bci:33 (line 1660) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:59 (line 343) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=rsp + #16 L[7]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {[16]=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop off=2364/0x93c}
0944    stop	# ShouldNotReachHere

0958    B80: #	out( N1 ) <- in( B30 )  Freq: 9.99948e-07
0958    movl    RSI, #-52	# int
095d    movq    [rsp + #48], R11	# spill
0962    movq    [rsp + #72], RDX	# spill
        nop 	# 1 bytes pad for loops and calls
0968    call,static  wrapper for: uncommon_trap(reason='intrinsic_or_type_checked_inlining' action='make_not_entrant' debug_id='0')
        # jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds @ bci:16 (line 403) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#0 STK[1]=_ STK[2]=RBP STK[3]=_ STK[4]=#ScObj0
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #56, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #16 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #16 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess @ bci:9 (line 357) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::copy @ bci:135 (line 624) L[0]=_ L[1]=rsp + #48 L[2]=#0 L[3]=_ L[4]=_ L[5]=rsp + #64 L[6]=#0 L[7]=_ L[8]=_ L[9]=_ L[10]=#ScObj0 L[11]=#ScObj1 L[12]=rsp + #72 L[13]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #56, [readOnly :1]=#0, [scope :2]=#ScObj3, [offset :3]=#16, [base :4]=rsp + #16 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # ScObj3 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #16 }
        # java.lang.foreign.MemorySegment::copy @ bci:33 (line 1660) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:59 (line 343) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=rsp + #16 L[7]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {[16]=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop off=2416/0x970}
0978    stop	# ShouldNotReachHere

098c    B81: #	out( N1 ) <- in( B31 )  Freq: 9.99947e-07
098c    movl    RSI, #-28	# int
0991    movq    [rsp + #48], R11	# spill
0996    movq    [rsp + #72], RDX	# spill
        nop 	# 1 bytes pad for loops and calls
099c    call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds @ bci:16 (line 403) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#0 STK[1]=_ STK[2]=RBP STK[3]=_ STK[4]=#ScObj0
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #56, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #16 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #16 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess @ bci:9 (line 357) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::copy @ bci:135 (line 624) L[0]=_ L[1]=rsp + #48 L[2]=#0 L[3]=_ L[4]=_ L[5]=rsp + #64 L[6]=#0 L[7]=_ L[8]=_ L[9]=_ L[10]=#ScObj0 L[11]=#ScObj1 L[12]=rsp + #72 L[13]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #56, [readOnly :1]=#0, [scope :2]=#ScObj3, [offset :3]=#16, [base :4]=rsp + #16 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # ScObj3 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #16 }
        # java.lang.foreign.MemorySegment::copy @ bci:33 (line 1660) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:59 (line 343) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=rsp + #16 L[7]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {[16]=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop off=2468/0x9a4}
09ac    stop	# ShouldNotReachHere

09c0    B82: #	out( N1 ) <- in( B41 )  Freq: 9.99942e-07
09c0    stop	# ShouldNotReachHere

09d4    B83: #	out( N1 ) <- in( B42 )  Freq: 9.99941e-07
09d4    stop	# ShouldNotReachHere

09e8    B84: #	out( N1 ) <- in( B54 )  Freq: 9.99871e-07
09e8    movl    RSI, #-52	# int
09ed    vector_cast_b2x XMM1,XMM1	!
09f2    vmovdqu [rsp + 64],XMM1	# spill
09f8    vmovdqu [rsp + 96],XMM2	# spill
09fe    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #8]
0a08    call,static  wrapper for: uncommon_trap(reason='intrinsic_or_type_checked_inlining' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 441) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#0 STK[1]=_ STK[2]=RBP STK[3]=_ STK[4]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:45 (line 68) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector::intoMemorySegment @ bci:32 (line 3453) L[0]=#ScObj0 L[1]=#ScObj1 L[2]=_ L[3]=_ L[4]=#Ptr0x0000732ce44b1780
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #64 }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #8 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #8 }
        # jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment @ bci:29 (line 939) L[0]=_ L[1]=#ScObj0 L[2]=#0 L[3]=_ L[4]=#Ptr0x0000732ce44b1780 L[5]=#Ptr0x0000732ce4504670 L[6]=#ScObj1
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #8 }
        # ScObj1 jdk/incubator/vector/Byte256Vector={ [payload :0]=rsp + #96 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #8 }
        # test_ms::micro @ bci:30 (line 16) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {[8]=Oop off=2576/0xa10}
0a18    stop	# ShouldNotReachHere

0a2c    B85: #	out( N1 ) <- in( B55 )  Freq: 9.9987e-07
0a2c    movl    RSI, #-28	# int
0a31    vector_cast_b2x XMM1,XMM1	!
0a36    vmovdqu [rsp + 64],XMM1	# spill
0a3c    vmovdqu [rsp + 96],XMM2	# spill
0a42    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #8]
0a4c    call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 441) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#0 STK[1]=_ STK[2]=RBP STK[3]=_ STK[4]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:45 (line 68) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector::intoMemorySegment @ bci:32 (line 3453) L[0]=#ScObj0 L[1]=#ScObj1 L[2]=_ L[3]=_ L[4]=#Ptr0x0000732ce44b1780
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #64 }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #8 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #8 }
        # jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment @ bci:29 (line 939) L[0]=_ L[1]=#ScObj0 L[2]=#0 L[3]=_ L[4]=#Ptr0x0000732ce44b1780 L[5]=#Ptr0x0000732ce4504670 L[6]=#ScObj1
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #8 }
        # ScObj1 jdk/incubator/vector/Byte256Vector={ [payload :0]=rsp + #96 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #8 }
        # test_ms::micro @ bci:30 (line 16) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {[8]=Oop off=2644/0xa54}
0a5c    stop	# ShouldNotReachHere

0a70    B86: #	out( N1 ) <- in( B56 )  Freq: 9.99869e-07
0a70    movl    RSI, #-28	# int
0a75    vector_cast_b2x XMM1,XMM1	!
0a7a    vmovdqu [rsp + 0],XMM1	# spill
0a7f    vmovdqu [rsp + 64],XMM2	# spill
0a85    movq    R10, [rsp + #40]	# spill
0a8a    movq    [rsp + #32], R10	# spill
0a8f    movq    [rsp + #48], R11	# spill
0a94    call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 441) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#32 STK[1]=_ STK[2]=RBP STK[3]=_ STK[4]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:45 (line 68) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector::intoMemorySegment @ bci:32 (line 3453) L[0]=#ScObj0 L[1]=#ScObj1 L[2]=_ L[3]=_ L[4]=#Ptr0x0000732ce44b1780
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #0 }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #32, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #48 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #48 }
        # jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment @ bci:59 (line 942) L[0]=_ L[1]=#ScObj0 L[2]=#0 L[3]=_ L[4]=#Ptr0x0000732ce44b1780 L[5]=#Ptr0x0000732ce4504670 L[6]=#ScObj1
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #32, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #48 }
        # ScObj1 jdk/incubator/vector/Byte256Vector={ [payload :0]=rsp + #64 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #48 }
        # test_ms::micro @ bci:30 (line 16) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {[48]=Oop off=2716/0xa9c}
0aa4    stop	# ShouldNotReachHere

0ab8    B87: #	out( N1 ) <- in( B57 )  Freq: 9.99868e-07
0ab8    movl    RSI, #-28	# int
0abd    vector_cast_b2x XMM1,XMM1	!
0ac2    vmovdqu [rsp + 0],XMM1	# spill
0ac7    vmovdqu [rsp + 64],XMM2	# spill
0acd    movq    R10, [rsp + #40]	# spill
0ad2    movq    [rsp + #32], R10	# spill
0ad7    movq    [rsp + #48], R11	# spill
0adc    call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 441) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#64 STK[1]=_ STK[2]=RBP STK[3]=_ STK[4]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:45 (line 68) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector::intoMemorySegment @ bci:32 (line 3453) L[0]=#ScObj0 L[1]=#ScObj1 L[2]=_ L[3]=_ L[4]=#Ptr0x0000732ce44b1780
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #0 }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #32, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #48 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #48 }
        # jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment @ bci:91 (line 945) L[0]=_ L[1]=#ScObj0 L[2]=#0 L[3]=_ L[4]=#Ptr0x0000732ce44b1780 L[5]=#Ptr0x0000732ce4504670 L[6]=#ScObj1
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #32, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #48 }
        # ScObj1 jdk/incubator/vector/Byte256Vector={ [payload :0]=rsp + #64 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #48 }
        # test_ms::micro @ bci:30 (line 16) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {[48]=Oop off=2788/0xae4}
0aec    stop	# ShouldNotReachHere

0b00    B88: #	out( N1 ) <- in( B58 )  Freq: 9.99867e-07
0b00    movl    RSI, #-28	# int
0b05    vector_cast_b2x XMM0,XMM0	!
0b0a    vmovdqu [rsp + 0],XMM0	# spill
0b0f    movq    R10, [rsp + #40]	# spill
0b14    movq    [rsp + #32], R10	# spill
0b19    movq    [rsp + #48], R11	# spill
        nop 	# 2 bytes pad for loops and calls
0b20    call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.Objects::checkIndex @ bci:3 (line 441) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#96 STK[1]=_ STK[2]=RBP STK[3]=_ STK[4]=#null
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:45 (line 68) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector::intoMemorySegment @ bci:32 (line 3453) L[0]=#ScObj0 L[1]=#ScObj1 L[2]=_ L[3]=_ L[4]=#Ptr0x0000732ce44b1780
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #0 }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #32, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #48 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #48 }
        # jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment @ bci:123 (line 948) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # test_ms::micro @ bci:30 (line 16) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {[48]=Oop off=2856/0xb28}
0b30    stop	# ShouldNotReachHere

0b44    B89: #	out( N1 ) <- in( B12 )  Freq: 4.99988e-07
0b44    movl    RSI, #-187	# int
0b49    movl    [rsp + #8], R11	# spill
0b4e    movl    [rsp + #16], R9	# spill
        nop 	# 1 bytes pad for loops and calls
0b54    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # java.lang.Class::reflectionData @ bci:31 (line 2836) L[0]=#Ptr0x0000732ce44486f0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=_ STK[0]=RBP STK[1]=rsp + #16
        # java.lang.Class::getSimpleName @ bci:1 (line 1669) L[0]=#Ptr0x0000732ce44486f0 L[1]=_ L[2]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:2 (line 340) L[0]=#ScObj0 L[1]=_ L[2]=rsp + #0 L[3]=#Ptr0x0000732ce4379018 L[4]=#Ptr0x0000732ce4379830 L[5]=_ L[6]=_ L[7]=_ STK[0]=#ScObj0
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {[0]=Oop [8]=NarrowOop [24]=Oop [32]=Oop off=2908/0xb5c}
0b64    stop	# ShouldNotReachHere

0b78    B90: #	out( N1 ) <- in( B14 )  Freq: 4.99987e-07
0b78    xorl    R8, R8	# long
0b7b    cmpq    R9, R8	# CmpL3
	movl    RBP, -1
	jl,s    done
	setcc   RBP 	# emits setne + movzbl or setzune for APXdone:
0b8d    movl    RSI, #-187	# int
0b92    movl    [rsp + #8], R10	# spill
0b97    movl    [rsp + #12], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
0b9c    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.internal.foreign.Utils::isAligned @ bci:7 (line 201) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP
        # jdk.internal.foreign.AbstractMemorySegmentImpl::checkArraySize @ bci:6 (line 390) L[0]=#ScObj0 L[1]=rsp + #8 L[2]=rsp + #12 L[3]=_ L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:12 (line 340) L[0]=#ScObj0 L[1]=_ L[2]=rsp + #0 L[3]=#Ptr0x0000732ce4379018 L[4]=#Ptr0x0000732ce4379830 L[5]=_ L[6]=_ L[7]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {[0]=Oop [8]=NarrowOop [24]=Oop [32]=Oop off=2980/0xba4}
0bac    stop	# ShouldNotReachHere

0bc0    B91: #	out( N1 ) <- in( B25 )  Freq: 4.99976e-07
0bc0    xorl    R10, R10	# long
0bc3    cmpq    R9, R10	# CmpL3
	movl    RBP, -1
	jl,s    done
	setcc   RBP 	# emits setne + movzbl or setzune for APXdone:
0bd5    movl    RSI, #-187	# int
0bda    movq    [rsp + #64], R11	# spill
0bdf    movq    [rsp + #72], R8	# spill
0be4    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.internal.foreign.AbstractMemorySegmentImpl::isAlignedForElement @ bci:17 (line 385) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP
        # jdk.internal.foreign.AbstractMemorySegmentImpl::isAlignedForElement @ bci:8 (line 380) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::copy @ bci:68 (line 616) L[0]=_ L[1]=rsp + #64 L[2]=#0 L[3]=_ L[4]=_ L[5]=rsp + #72 L[6]=#0 L[7]=_ L[8]=rsp + #48 L[9]=_ L[10]=#ScObj0 L[11]=#ScObj1 L[12]=_ L[13]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #56, [readOnly :1]=#0, [scope :2]=#ScObj3, [offset :3]=#16, [base :4]=rsp + #16 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # ScObj3 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #16 }
        # java.lang.foreign.MemorySegment::copy @ bci:33 (line 1660) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:59 (line 343) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=rsp + #16 L[7]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {[16]=Oop [24]=Oop [32]=Oop [64]=Oop [72]=Oop off=3052/0xbec}
0bf4    stop	# ShouldNotReachHere

0c08    B92: #	out( N1 ) <- in( B26 )  Freq: 4.99976e-07
0c08    xorl    R10, R10	# long
0c0b    cmpq    RCX, R10	# CmpL3
	movl    RBP, -1
	jl,s    done
	setcc   RBP 	# emits setne + movzbl or setzune for APXdone:
0c1d    movl    RSI, #-187	# int
0c22    movq    [rsp + #64], R11	# spill
0c27    movq    [rsp + #72], R8	# spill
0c2c    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.internal.foreign.AbstractMemorySegmentImpl::isAlignedForElement @ bci:17 (line 385) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP
        # jdk.internal.foreign.AbstractMemorySegmentImpl::isAlignedForElement @ bci:8 (line 380) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::copy @ bci:91 (line 619) L[0]=_ L[1]=rsp + #64 L[2]=#0 L[3]=_ L[4]=_ L[5]=rsp + #72 L[6]=#0 L[7]=_ L[8]=rsp + #48 L[9]=_ L[10]=#ScObj0 L[11]=#ScObj1 L[12]=_ L[13]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #56, [readOnly :1]=#0, [scope :2]=#ScObj3, [offset :3]=#16, [base :4]=rsp + #16 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # ScObj3 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #16 }
        # java.lang.foreign.MemorySegment::copy @ bci:33 (line 1660) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:59 (line 343) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=rsp + #16 L[7]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {[16]=Oop [24]=Oop [32]=Oop [64]=Oop [72]=Oop off=3124/0xc34}
0c3c    stop	# ShouldNotReachHere

0c50    B93: #	out( N1 ) <- in( B27 )  Freq: 4.99975e-07
0c50    movl    RSI, #-187	# int
0c55    movq    RBP, [rsp + #16]	# spill
0c5a    movq    [rsp + #16], R11	# spill
0c5f    movq    [rsp + #48], R8	# spill
0c64    movq    [rsp + #72], RDX	# spill
0c69    movl    [rsp + #80], R10	# spill
        nop 	# 2 bytes pad for loops and calls
0c70    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds @ bci:3 (line 402) L[0]=#ScObj0 L[1]=#0 L[2]=_ L[3]=rsp + #72 L[4]=_ STK[0]=rsp + #80
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess @ bci:9 (line 357) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::copy @ bci:125 (line 623) L[0]=_ L[1]=rsp + #16 L[2]=#0 L[3]=_ L[4]=_ L[5]=rsp + #48 L[6]=#0 L[7]=_ L[8]=_ L[9]=_ L[10]=#ScObj0 L[11]=#ScObj1 L[12]=rsp + #72 L[13]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #56, [readOnly :1]=#0, [scope :2]=#ScObj3, [offset :3]=#16, [base :4]=RBP }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # ScObj3 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=RBP }
        # java.lang.foreign.MemorySegment::copy @ bci:33 (line 1660) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:59 (line 343) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=RBP L[7]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {rbp=Oop [16]=Oop [24]=Oop [32]=Oop [48]=Oop off=3192/0xc78}
0c80    stop	# ShouldNotReachHere

0c94    B94: #	out( N1 ) <- in( B33 )  Freq: 4.99973e-07
0c94    movl    RSI, #-187	# int
0c99    movq    [rsp + #48], R11	# spill
0c9e    movq    [rsp + #64], RDX	# spill
0ca3    movl    [rsp + #72], R9	# spill
0ca8    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.internal.foreign.AbstractMemorySegmentImpl::copy @ bci:162 (line 625) L[0]=_ L[1]=rsp + #48 L[2]=#0 L[3]=_ L[4]=_ L[5]=_ L[6]=#0 L[7]=_ L[8]=_ L[9]=_ L[10]=#ScObj0 L[11]=#ScObj1 L[12]=rsp + #64 L[13]=_ STK[0]=RBP STK[1]=rsp + #72
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #56, [readOnly :1]=#0, [scope :2]=#ScObj3, [offset :3]=#16, [base :4]=rsp + #16 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # ScObj3 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #16 }
        # java.lang.foreign.MemorySegment::copy @ bci:33 (line 1660) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:59 (line 343) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=rsp + #16 L[7]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {rbp=NarrowOop [16]=Oop [24]=Oop [32]=Oop [48]=Oop [72]=NarrowOop off=3248/0xcb0}
0cb8    stop	# ShouldNotReachHere

0ccc    B95: #	out( B71 ) <- in( B40 )  Freq: 4.99971e-07
0ccc    xorl    R9, R9	# int
0ccf    movq    RBX, [rsp + #16]	# spill
0cd4    jmp     B71

0cd9    B96: #	out( N1 ) <- in( B8 )  Freq: 4.76826e-07
0cd9    movl    RSI, #-187	# int
0cde    movq    RBP, [rsp + #0]	# spill
0ce2    movl    [rsp + #4], R9	# spill
0ce7    movl    [rsp + #8], R11	# spill
0cec    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # java.lang.Class::reflectionData @ bci:11 (line 2835) L[0]=#Ptr0x0000732ce44486f0 L[1]=rsp + #8 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # java.lang.Class::getSimpleName @ bci:1 (line 1669) L[0]=#Ptr0x0000732ce44486f0 L[1]=_ L[2]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:2 (line 340) L[0]=#ScObj0 L[1]=_ L[2]=RBP L[3]=#Ptr0x0000732ce4379018 L[4]=#Ptr0x0000732ce4379830 L[5]=_ L[6]=_ L[7]=_ STK[0]=#ScObj0
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {rbp=Oop [8]=NarrowOop [24]=Oop [32]=Oop off=3316/0xcf4}
0cfc    stop	# ShouldNotReachHere

0d10    B97: #	out( N1 ) <- in( B10 )  Freq: 4.76826e-07
0d10    cmpq    RCX, RBX	# CmpL3
	movl    RBP, -1
	jl,s    done
	setcc   RBP 	# emits setne + movzbl or setzune for APXdone:
0d22    movl    RSI, #-187	# int
0d27    movl    [rsp + #12], R9	# spill
0d2c    movl    [rsp + #16], R11	# spill
0d31    movl    [rsp + #20], R8	# spill
        nop 	# 2 bytes pad for loops and calls
0d38    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # java.lang.ref.SoftReference::get @ bci:17 (line 114) L[0]=rsp + #16 L[1]=rsp + #20 STK[0]=RBP
        # java.lang.Class::reflectionData @ bci:15 (line 2836) L[0]=#Ptr0x0000732ce44486f0 L[1]=rsp + #16 L[2]=rsp + #12 L[3]=_
        # java.lang.Class::getSimpleName @ bci:1 (line 1669) L[0]=#Ptr0x0000732ce44486f0 L[1]=_ L[2]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:2 (line 340) L[0]=#ScObj0 L[1]=_ L[2]=rsp + #0 L[3]=#Ptr0x0000732ce4379018 L[4]=#Ptr0x0000732ce4379830 L[5]=_ L[6]=_ L[7]=_ STK[0]=#ScObj0
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {[0]=Oop [16]=NarrowOop [20]=NarrowOop [24]=Oop [32]=Oop off=3392/0xd40}
0d48    stop	# ShouldNotReachHere

0d5c    B98: #	out( N1 ) <- in( B13 )  Freq: 4.76825e-07
0d5c    movl    RSI, #-187	# int
0d61    movq    RBP, [rsp + #0]	# spill
0d65    movq    [rsp + #0], R8	# spill
0d69    movl    [rsp + #12], R10	# spill
        nop 	# 2 bytes pad for loops and calls
0d70    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # java.lang.Class::getSimpleName @ bci:11 (line 1671) L[0]=#Ptr0x0000732ce44486f0 L[1]=rsp + #0 L[2]=rsp + #12 STK[0]=rsp + #12
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:2 (line 340) L[0]=#ScObj0 L[1]=_ L[2]=RBP L[3]=#Ptr0x0000732ce4379018 L[4]=#Ptr0x0000732ce4379830 L[5]=_ L[6]=_ L[7]=_ STK[0]=#ScObj0
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {rbp=Oop [0]=Oop [12]=NarrowOop [24]=Oop [32]=Oop off=3448/0xd78}
0d80    stop	# ShouldNotReachHere

0d94    B99: #	out( N1 ) <- in( B22 )  Freq: 4.76815e-07
0d94    cmpq    RBX, R10	# CmpL3
	movl    RBP, -1
	jl,s    done
	setcc   RBP 	# emits setne + movzbl or setzune for APXdone:
0da6    movl    RSI, #-187	# int
0dab    movq    R10, [rsp + #16]	# spill
0db0    movq    [rsp + #0], R10	# spill
0db4    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.internal.foreign.AbstractMemorySegmentImpl::copy @ bci:35 (line 611) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=RBP
        # java.lang.foreign.MemorySegment::copy @ bci:33 (line 1660) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:59 (line 343) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=rsp + #0 L[7]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {[0]=Oop [24]=Oop off=3516/0xdbc}
0dc4    stop	# ShouldNotReachHere

0dd8    B100: #	out( N1 ) <- in( B23 )  Freq: 4.76815e-07
0dd8    cmpq    R9, RBX	# CmpL3
	movl    RBP, -1
	jl,s    done
	setcc   RBP 	# emits setne + movzbl or setzune for APXdone:
0dea    movl    RSI, #-187	# int
0def    movq    [rsp + #64], R11	# spill
0df4    movq    [rsp + #72], R8	# spill
        nop 	# 3 bytes pad for loops and calls
0dfc    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.internal.foreign.Utils::isElementAligned @ bci:39 (line 209) L[0]=_ STK[0]=RBP
        # jdk.internal.foreign.Utils::checkElementAlignment @ bci:1 (line 214) L[0]=_ L[1]=#Ptr0x0000732ce465d630
        # jdk.internal.foreign.AbstractMemorySegmentImpl::copy @ bci:53 (line 614) L[0]=_ L[1]=rsp + #64 L[2]=#0 L[3]=_ L[4]=_ L[5]=rsp + #72 L[6]=#0 L[7]=_ L[8]=rsp + #48 L[9]=_ L[10]=#ScObj0 L[11]=#ScObj1 L[12]=_ L[13]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #56, [readOnly :1]=#0, [scope :2]=#ScObj3, [offset :3]=#16, [base :4]=rsp + #16 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # ScObj3 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #16 }
        # java.lang.foreign.MemorySegment::copy @ bci:33 (line 1660) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:59 (line 343) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=rsp + #16 L[7]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {[16]=Oop [24]=Oop [32]=Oop [64]=Oop [72]=Oop off=3588/0xe04}
0e0c    stop	# ShouldNotReachHere

0e20    B101: #	out( N1 ) <- in( B24 )  Freq: 4.76814e-07
0e20    cmpq    RCX, R10	# CmpL3
	movl    RBP, -1
	jl,s    done
	setcc   RBP 	# emits setne + movzbl or setzune for APXdone:
0e32    movl    RSI, #-187	# int
0e37    movq    [rsp + #64], R11	# spill
0e3c    movq    [rsp + #72], R8	# spill
        nop 	# 3 bytes pad for loops and calls
0e44    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.internal.foreign.Utils::isElementAligned @ bci:39 (line 209) L[0]=_ STK[0]=RBP
        # jdk.internal.foreign.Utils::checkElementAlignment @ bci:1 (line 214) L[0]=_ L[1]=#Ptr0x0000732ce465d820
        # jdk.internal.foreign.AbstractMemorySegmentImpl::copy @ bci:61 (line 615) L[0]=_ L[1]=rsp + #64 L[2]=#0 L[3]=_ L[4]=_ L[5]=rsp + #72 L[6]=#0 L[7]=_ L[8]=rsp + #48 L[9]=_ L[10]=#ScObj0 L[11]=#ScObj1 L[12]=_ L[13]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #56, [readOnly :1]=#0, [scope :2]=#ScObj3, [offset :3]=#16, [base :4]=rsp + #16 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # ScObj3 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #16 }
        # java.lang.foreign.MemorySegment::copy @ bci:33 (line 1660) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:59 (line 343) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=rsp + #16 L[7]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {[16]=Oop [24]=Oop [32]=Oop [64]=Oop [72]=Oop off=3660/0xe4c}
0e54    stop	# ShouldNotReachHere

0e68    B102: #	out( N1 ) <- in( B32 )  Freq: 4.76811e-07
0e68    movl    R10, #1	# long (unsigned 32-bit)
0e6e    cmpq    RBX, R10	# CmpL3
	movl    RBP, -1
	jl,s    done
	setcc   RBP 	# emits setne + movzbl or setzune for APXdone:
0e80    movl    RSI, #-187	# int
0e85    movq    [rsp + #48], RDX	# spill
        nop 	# 2 bytes pad for loops and calls
0e8c    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.internal.foreign.AbstractMemorySegmentImpl::copy @ bci:146 (line 625) L[0]=_ L[1]=_ L[2]=#0 L[3]=_ L[4]=_ L[5]=_ L[6]=#0 L[7]=_ L[8]=_ L[9]=_ L[10]=#ScObj0 L[11]=#ScObj1 L[12]=rsp + #48 L[13]=_ STK[0]=RBP
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj2, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #56, [readOnly :1]=#0, [scope :2]=#ScObj3, [offset :3]=#16, [base :4]=rsp + #16 }
        # ScObj2 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # ScObj3 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #16 }
        # java.lang.foreign.MemorySegment::copy @ bci:33 (line 1660) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:59 (line 343) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=rsp + #16 L[7]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {[16]=Oop [24]=Oop [32]=Oop off=3732/0xe94}
0e9c    stop	# ShouldNotReachHere

0eb0    B103: #	out( N1 ) <- in( B34 )  Freq: 4.76811e-07
0eb0    movl    RSI, #-187	# int
0eb5    movq    [rsp + #48], RDX	# spill
0eba    movl    [rsp + #64], R10	# spill
        nop 	# 1 bytes pad for loops and calls
0ec0    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.internal.misc.Unsafe::checkSize @ bci:23 (line 473) L[0]=#Ptr0x0000732ce4723240 L[1]=_ L[2]=_ STK[0]=rsp + #64
        # jdk.internal.misc.Unsafe::copyMemoryChecks @ bci:3 (line 837) L[0]=#Ptr0x0000732ce4723240 L[1]=rsp + #32 L[2]=#16 L[3]=_ L[4]=rsp + #16 L[5]=#16 L[6]=_ L[7]=_ L[8]=_
        # jdk.internal.misc.Unsafe::copyMemory @ bci:9 (line 806) L[0]=#Ptr0x0000732ce4723240 L[1]=rsp + #32 L[2]=#16 L[3]=_ L[4]=rsp + #16 L[5]=#16 L[6]=_ L[7]=rsp + #48 L[8]=_
        # jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal @ bci:28 (line 148) L[0]=_ L[1]=#ScObj0 L[2]=#ScObj1 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # ScObj0 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #16 }
        # jdk.internal.misc.ScopedMemoryAccess::copyMemory @ bci:12 (line 130) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::copy @ bci:205 (line 626) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_
        # java.lang.foreign.MemorySegment::copy @ bci:33 (line 1660) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:59 (line 343) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=rsp + #16 L[7]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {[16]=Oop [24]=Oop [32]=Oop off=3784/0xec8}
0ed0    stop	# ShouldNotReachHere

0ee4    B104: #	out( N1 ) <- in( B35 )  Freq: 4.76811e-07
0ee4    movl    RSI, #-187	# int
0ee9    movq    RBP, [rsp + #16]	# spill
0eee    movl    [rsp + #8], R10	# spill
0ef3    movq    R10, [rsp + #40]	# spill
0ef8    movq    [rsp + #16], R10	# spill
        nop 	# 3 bytes pad for loops and calls
0f00    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.internal.misc.Unsafe::copyMemory @ bci:16 (line 808) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=rsp + #8
        # jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal @ bci:28 (line 148) L[0]=_ L[1]=#ScObj0 L[2]=#ScObj1 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # ScObj0 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=RBP }
        # jdk.internal.misc.ScopedMemoryAccess::copyMemory @ bci:12 (line 130) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::copy @ bci:205 (line 626) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_
        # java.lang.foreign.MemorySegment::copy @ bci:33 (line 1660) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:59 (line 343) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=RBP L[7]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #16, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {rbp=Oop [24]=Oop [32]=Oop off=3848/0xf08}
0f10    stop	# ShouldNotReachHere

0f24    B105: #	out( N1 ) <- in( B11 )  Freq: 1e-35
0f24    movl    RSI, #-34	# int
0f29    movq    RBP, [rsp + #0]	# spill
0f2d    movl    [rsp + #0], R11	# spill
0f31    movl    [rsp + #4], R9	# spill
0f36    movl    [rsp + #8], R8	# spill
        nop 	# 1 bytes pad for loops and calls
0f3c    call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # java.lang.Class::reflectionData @ bci:18 (line 2836) L[0]=#Ptr0x0000732ce44486f0 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # java.lang.Class::getSimpleName @ bci:1 (line 1669) L[0]=#Ptr0x0000732ce44486f0 L[1]=_ L[2]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:2 (line 340) L[0]=#ScObj0 L[1]=_ L[2]=RBP L[3]=#Ptr0x0000732ce4379018 L[4]=#Ptr0x0000732ce4379830 L[5]=_ L[6]=_ L[7]=_ STK[0]=#ScObj0
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {rbp=Oop [0]=NarrowOop [8]=NarrowOop [24]=Oop [32]=Oop off=3908/0xf44}
0f4c    stop	# ShouldNotReachHere

0f60    B106: #	out( N1 ) <- in( B1 )  Freq: 4.76837e-07
0f60    movl    RSI, #-187	# int
0f65    movq    RBP, [rsp + #24]	# spill
0f6a    movq    [rsp + #8], RDX	# spill
0f6f    movq    [rsp + #16], RDX	# spill
0f74    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # java.util.Objects::requireNonNull @ bci:1 (line 219) L[0]=rsp + #16 STK[0]=rsp + #8
        # jdk.internal.foreign.SegmentFactories::fromArray @ bci:4 (line 104) L[0]=rsp + #8 L[1]=_ L[2]=_
        # java.lang.foreign.MemorySegment::ofArray @ bci:1 (line 1476) L[0]=_
        # test_ms::micro @ bci:1 (line 13) L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap {rbp=Oop [8]=Oop [16]=Oop off=3964/0xf7c}
0f84    stop	# ShouldNotReachHere

0f98    B107: #	out( N1 ) <- in( B2 )  Freq: 4.76837e-07
0f98    movl    RSI, #-187	# int
0f9d    movq    RBP, [rsp + #24]	# spill
0fa2    movq    [rsp + #16], R10	# spill
        nop 	# 1 bytes pad for loops and calls
0fa8    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # java.util.Objects::requireNonNull @ bci:1 (line 219) L[0]=RBP STK[0]=RBP
        # jdk.internal.foreign.SegmentFactories::fromArray @ bci:4 (line 104) L[0]=RBP L[1]=_ L[2]=_
        # java.lang.foreign.MemorySegment::ofArray @ bci:1 (line 1476) L[0]=_
        # test_ms::micro @ bci:6 (line 14) L[0]=_ L[1]=_ L[2]=#ScObj0 L[3]=_ L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #16, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # OopMap {rbp=Oop [32]=Oop off=4016/0xfb0}
0fb8    stop	# ShouldNotReachHere

0fcc    B108: #	out( N1 ) <- in( B9 )  Freq: 4.76826e-07
0fcc    movl    RSI, #-187	# int
0fd1    movq    RBP, [rsp + #0]	# spill
0fd5    movl    [rsp + #0], R11	# spill
0fd9    movl    [rsp + #4], R9	# spill
0fde    movl    [rsp + #12], R8	# spill
        nop 	# 1 bytes pad for loops and calls
0fe4    call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # java.lang.ref.SoftReference::get @ bci:6 (line 114) L[0]=_ L[1]=rsp + #12 STK[0]=rsp + #12
        # java.lang.Class::reflectionData @ bci:15 (line 2836) L[0]=#Ptr0x0000732ce44486f0 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_
        # java.lang.Class::getSimpleName @ bci:1 (line 1669) L[0]=#Ptr0x0000732ce44486f0 L[1]=_ L[2]=_
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:2 (line 340) L[0]=#ScObj0 L[1]=_ L[2]=RBP L[3]=#Ptr0x0000732ce4379018 L[4]=#Ptr0x0000732ce4379830 L[5]=_ L[6]=_ L[7]=_ STK[0]=#ScObj0
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=#128, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #32 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #32 }
        # jdk.internal.foreign.AbstractMemorySegmentImpl::toArray @ bci:14 (line 321) L[0]=_ L[1]=_
        # jdk.incubator.vector.VectorShuffle::fromMemorySegment @ bci:34 (line 363) L[0]=#Ptr0x0000732ce44b0c38 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # test_ms::micro @ bci:18 (line 15) L[0]=_ L[1]=_ L[2]=_ L[3]=#ScObj0 L[4]=_
        # ScObj0 jdk/internal/foreign/HeapMemorySegmentImpl$OfInt={ [length :0]=rsp + #40, [readOnly :1]=#0, [scope :2]=#ScObj1, [offset :3]=#16, [base :4]=rsp + #24 }
        # ScObj1 jdk/internal/foreign/GlobalSession$HeapSession={ [resourceList :0]=#null, [owner :1]=#null, [state :2]=#1, [acquireCount :3]=#0, [ref :4]=rsp + #24 }
        # OopMap {rbp=Oop [0]=NarrowOop [12]=NarrowOop [24]=Oop [32]=Oop off=4076/0xfec}
0ff4    stop	# ShouldNotReachHere

1008    B109: #	out( B115 ) <- in( B66 )  Freq: 1.00011e-09
1008    # exception oop is in rax; no code emitted
1008    movq    RSI, RAX	# spill
100b    jmp,s   B115

100d    B110: #	out( B115 ) <- in( B62 )  Freq: 1.00014e-09
100d    # exception oop is in rax; no code emitted
100d    movq    RSI, RAX	# spill
1010    jmp,s   B115

1012    B111: #	out( B115 ) <- in( B60 )  Freq: 1.00016e-09
1012    # exception oop is in rax; no code emitted
1012    movq    RSI, RAX	# spill
1015    jmp,s   B115

1017    B112: #	out( B115 ) <- in( B64 )  Freq: 1.01027e-09
1017    # exception oop is in rax; no code emitted
1017    movq    RSI, RAX	# spill
101a    jmp,s   B115

101c    B113: #	out( B115 ) <- in( B7 )  Freq: 9.99997e-06
101c    # exception oop is in rax; no code emitted
101c    movq    RSI, RAX	# spill
101f    jmp,s   B115

1021    B114: #	out( B115 ) <- in( B21 )  Freq: 9.99973e-06
1021    # exception oop is in rax; no code emitted
1021    movq    RSI, RAX	# spill

1024    B115: #	out( N1 ) <- in( B110 B114 B109 B111 B113 B112 )  Freq: 2.00037e-05
1024    vzeroupper
	addq    rsp, 144	# Destroy frame
	popq    rbp

102f    jmp     rethrow_stub

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------
[5.148s][warning][os] Loading hsdis library failed

Compiled method (c2) 5149  475             test_ms::micro (34 bytes)
 total in heap  [0x0000732d1c51fb88,0x0000732d1c520de0] = 4696
 main code      [0x0000732d1c51fc80,0x0000732d1c520d38] = 4280
 stub code      [0x0000732d1c520d38,0x0000732d1c520d60] = 40
 oops           [0x0000732d1c520d60,0x0000732d1c520de0] = 128
 mutable data [0x0000732ce49b19d0,0x0000732ce49b2210] = 2112
 relocation     [0x0000732ce49b19d0,0x0000732ce49b1c60] = 656
 metadata       [0x0000732ce49b1c60,0x0000732ce49b2210] = 1456
 immutable data [0x0000732ce4c2a320,0x0000732ce4c2d660] = 13120
 dependencies   [0x0000732ce4c2a320,0x0000732ce4c2a4c8] = 424
 nul chk table  [0x0000732ce4c2a4c8,0x0000732ce4c2a4e8] = 32
 handler table  [0x0000732ce4c2a4e8,0x0000732ce4c2a578] = 144
 scopes pcs     [0x0000732ce4c2a578,0x0000732ce4c2b088] = 2832
 scopes data    [0x0000732ce4c2b088,0x0000732ce4c2d660] = 9688

[Constant Pool (empty)]


Loading hsdis library failed, undisassembled code is shown in MachCode section
[MachCode]
[Verified Entry Point]
  # {method} {0x0000732cf84015e0} 'micro' '([I[I)V' in 'test_ms'
  # parm0:    rsi:rsi   = '[I'
  # parm1:    rdx:rdx   = '[I'
  #           [sp+0xa0]  (sp of caller)
 ;; N1: #	out( B1 ) <- in( B106 B107 B76 B77 B96 B108 B97 B105 B89 B98 B90 B72 B74 B99 B100 B101 B91 B92 B93 B78 B79 B73 B85 B80 B81 B102 B94 B84 B59 B82 B104 B88 B86 B83 B115 B71 B75 B103 B87 )  Freq: 1
 ;; B1: #	out( B106 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
  0x0000732d1c51fc80: 8984 2400 | 80fe ff55 | 4881 ec90 | 0000 0090 | 4181 7f20 | 0000 0000 | 0f85 9010 

  0x0000732d1c51fc9c: ;*synchronization entry
                      ; - test_ms::micro@-1 (line 13)
  0x0000732d1c51fc9c: 0000 4889 | 7424 1848 | 8954 2420 

  0x0000732d1c51fca8: ; implicit exception: dispatches to 0x0000732d1c520be0
  0x0000732d1c51fca8: 448b 520c 
 ;; B2: #	out( B107 B3 ) <- in( B1 )  Freq: 1
  0x0000732d1c51fcac: 4d63 d249 | c1e2 0244 | 8b5e 0c49 | 63eb 4d8d | 5a81 48c1 | e502 4d85 

  0x0000732d1c51fcc4: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c51fcc4: db0f 8c2d | 0800 004d | 85db 0f86 | 5808 0000 
 ;; B5: #	out( B60 B6 ) <- in( B4 )  Freq: 0.999997
  0x0000732d1c51fcd4: 498b 87d0 | 0100 004c | 8bd0 4983 | c230 4d3b | 97e0 0100 | 000f 836f 

  0x0000732d1c51fcec: ;*invokevirtual copyMemory0 {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
                      ; - jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
                      ; - jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51fcec: 0600 004d | 8997 d001 | 0000 410f | 0d8a c000 | 0000 48c7 | 0001 0000 

  0x0000732d1c51fd04: ;   {metadata('jdk/internal/foreign/layout/ValueLayouts$OfIntImpl')}
  0x0000732d1c51fd04: 00c7 4008 | 4836 0001 | 4489 600c | 4c89 6010 | 4c89 6018 | 4c89 6020 | 4c89 6028 
 ;; B7: #	out( B113 B8 ) <- in( B61 B6 )  Freq: 0.999997
  0x0000732d1c51fd20: 4889 6c24 

  0x0000732d1c51fd24: ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
                      ; - jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@29 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51fd24: 2848 8904 

  0x0000732d1c51fd28: ;   {oop(a 'java/util/Optional'{0x00000000c8f2c1b8})}
  0x0000732d1c51fd28: 2448 bfb8 | c1f2 c800 | 0000 0048 

  0x0000732d1c51fd34: ;   {oop(a 'java/lang/Class'{0x00000000ffeb20f8} = int)}
  0x0000732d1c51fd34: 8bf0 48ba | f820 ebff | 0000 0000 

  0x0000732d1c51fd40: ;   {oop(a 'java/nio/ByteOrder'{0x00000000c8f05120})}
  0x0000732d1c51fd40: 48b9 2051 | f0c8 0000 | 0000 41b8 | 0400 0000 | 41b9 0100 | 0000 488b 

  0x0000732d1c51fd58: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c51fd58: 6c24 2090 

  0x0000732d1c51fd5c: ;   {optimized virtual_call}
  0x0000732d1c51fd5c: c5f8 77e8 

  0x0000732d1c51fd60: ; ImmutableOopMap {rbp=Oop [0]=Oop [24]=Oop [32]=Oop }
                      ;*invokespecial <init> {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::<init>@11 (line 238)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@8 (line 243)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
                      ; - jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@29 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51fd60: 7c9d fdff 

  0x0000732d1c51fd64: ;   {post_call_nop}
  0x0000732d1c51fd64: 0f1f 8400 | dc01 0000 
 ;; B8: #	out( B96 B9 ) <- in( B7 )  Freq: 0.999977
  0x0000732d1c51fd6c: ;   {oop(a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int})}
  0x0000732d1c51fd6c: 49ba c0be | e7ff 0000 

  0x0000732d1c51fd74: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c51fd74: 0000 458b 

  0x0000732d1c51fd78: ;*getfield reflectionData {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.lang.Class::reflectionData@1 (line 2832)
                      ; - java.lang.Class::getSimpleName@1 (line 1669)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51fd78: 5a50 458b 

  0x0000732d1c51fd7c: ;*getfield classRedefinedCount {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.lang.Class::reflectionData@6 (line 2833)
                      ; - java.lang.Class::getSimpleName@1 (line 1669)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51fd7c: 4a0c 4585 | db0f 84d2 

  0x0000732d1c51fd84: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c51fd84: 0b00 0045 | 8b43 0c45 

  0x0000732d1c51fd8c: ;   {external_word}
  0x0000732d1c51fd8c: 8bd0 4c3b | 258b 4d48 | 140f 8414 

  0x0000732d1c51fd98: ;   {external_word}
  0x0000732d1c51fd98: 0000 0048 | bfa8 d5db | 2f2d 7300 | 0048 83e4 

  0x0000732d1c51fda8: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c51fda8: f0e8 3452 | a512 f441 | 807f 4800 | 0f85 fa0e 

  0x0000732d1c51fdb8: ;*invokevirtual get0 {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.lang.ref.Reference::get@1 (line 343)
                      ; - java.lang.ref.SoftReference::get@1 (line 113)
                      ; - java.lang.Class::reflectionData@15 (line 2836)
                      ; - java.lang.Class::getSimpleName@1 (line 1669)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51fdb8: 0000 458b 

  0x0000732d1c51fdbc: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c51fdbc: 5008 498b 

  0x0000732d1c51fdc0: ;*getfield timestamp {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.lang.ref.SoftReference::get@10 (line 114)
                      ; - java.lang.Class::reflectionData@15 (line 2836)
                      ; - java.lang.Class::getSimpleName@1 (line 1669)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
                      ;   {oop(a 'java/lang/Class'{0x00000000ffe815f0} = 'java/lang/ref/SoftReference')}
  0x0000732d1c51fdc0: 4b20 48bb | f015 e8ff 

  0x0000732d1c51fdc8: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c51fdc8: 0000 0000 

  0x0000732d1c51fdcc: ;*getstatic clock {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.lang.ref.SoftReference::get@13 (line 114)
                      ; - java.lang.Class::reflectionData@15 (line 2836)
                      ; - java.lang.Class::getSimpleName@1 (line 1669)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51fdcc: 488b 5b78 | 483b cb0f | 85b7 0b00 

  0x0000732d1c51fdd8: ;   {metadata('java/lang/Class$ReflectionData')}
  0x0000732d1c51fdd8: 0041 81fa 

  0x0000732d1c51fddc: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c51fddc: 1892 2a00 | 0f85 be0d 

  0x0000732d1c51fde4: ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.lang.Class::reflectionData@18 (line 2836)
                      ; - java.lang.Class::getSimpleName@1 (line 1669)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51fde4: 0000 418b 

  0x0000732d1c51fde8: ;*getfield redefinedCount {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.lang.Class::reflectionData@27 (line 2836)
                      ; - java.lang.Class::getSimpleName@1 (line 1669)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51fde8: 680c 413b | e90f 85d1 

  0x0000732d1c51fdf0: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c51fdf0: 0900 0045 

  0x0000732d1c51fdf4: ;*getfield simpleName {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.lang.Class::getSimpleName@6 (line 1670)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51fdf4: 8b50 3445 | 85d2 0f84 | dc0b 0000 
 ;; B14: #	out( B90 B15 ) <- in( B13 )  Freq: 0.999975
  0x0000732d1c51fe00: 4c8b 1c24 

  0x0000732d1c51fe04: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c51fe04: 4d8b 4310 

  0x0000732d1c51fe08: ;*l2i {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@11 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51fe08: 418b d84c 

  0x0000732d1c51fe0c: ;*i2l {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::checkArraySize@5 (line 390)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@12 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51fe0c: 63c3 4d8d | 48ff 4981 | e180 0000 | 000f 85d9 | 0900 0085 | db0f 8449 | 0600 00b8 | 8000 0000 
  0x0000732d1c51fe2c: 48ba 0000 | 0000 0000 | 0080 483b | c275 0833 | d249 83f8 | ff74 0548 

  0x0000732d1c51fe44: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c51fe44: 9949 f7f8 

  0x0000732d1c51fe48: ;*l2i {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::checkArraySize@96 (line 397)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@12 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51fe48: 448b d041 | 81fa 0000 | 0400 0f87 

  0x0000732d1c51fe54: ;*invokevirtual copyMemory0 {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
                      ; - jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
                      ; - jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51fe54: 6d05 0000 
 ;; B17: #	out( B64 B18 ) <- in( B16 )  Freq: 0.999972
  0x0000732d1c51fe58: 4d8b 87d0 | 0100 0045 | 8bca 4d63 

  0x0000732d1c51fe64: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c51fe64: c94a 8d0c | 8d17 0000 

  0x0000732d1c51fe6c: ;*newarray {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::lambda$toArray$3@1 (line 321)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl$$Lambda/0x000000004d00f540::apply@1
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@20 (line 341)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51fe6c: 004c 8bc9 | 4983 e1f8 | 498b d849 | 03d9 493b | 9fe0 0100 | 000f 833e 

  0x0000732d1c51fe84: ;*invokevirtual copyMemory0 {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
                      ; - jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
                      ; - jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51fe84: 0500 0049 | 899f d001 | 0000 0f0d | 8bc0 0000 | 0049 c700 | 0100 0000 | 0f0d 8b00 

  0x0000732d1c51fea0: ;   {metadata({type array int})}
  0x0000732d1c51fea0: 0100 0041 | c740 08f0 | 871b 0045 | 8950 0c0f | 0d8b 4001 | 0000 0f0d | 8b80 0100 | 0049 8bf8 
  0x0000732d1c51fec0: 4883 c710 | 48c1 e903 | 4883 c1fe | 4833 c048 | 83f9 087f | 1048 ffc9 | 784f 4889 | 04cf 48ff 
  0x0000732d1c51fee0: c97d f7eb | 44c5 fdef | c0e9 0d00 | 0000 c5fe | 7f07 c5fe | 7f47 2048 | 83c7 4048 | 83e9 087d 
  0x0000732d1c51ff00: ed48 83c1 | 047c 0cc5 | fe7f 0748 | 83c7 2048 | 83e9 0448 | 83c1 047e | 1048 ffc9 
 ;; L_sloop:
  0x0000732d1c51ff1c: c5f9 d607 | 4883 c708 | 48ff c97d 

  0x0000732d1c51ff28: ;*newarray {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::lambda$toArray$3@1 (line 321)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl$$Lambda/0x000000004d00f540::apply@1
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@20 (line 341)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51ff28: f349 8b6b 

  0x0000732d1c51ff2c: ;*getfield byteAlignment {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.layout.AbstractLayout::byteAlignment@1 (line 80)
                      ; - jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@8 (line 95)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51ff2c: 1845 8b4b 

  0x0000732d1c51ff30: ;*invokevirtual copyMemory0 {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
                      ; - jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
                      ; - jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51ff30: 0c49 8b87 

  0x0000732d1c51ff34: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c51ff34: d001 0000 

  0x0000732d1c51ff38: ;*i2l {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.SegmentFactories::fromArray@10 (line 105)
                      ; - java.lang.foreign.MemorySegment::ofArray@1 (line 1476)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl$$Lambda/0x000000004d00f778::apply@4
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@31 (line 342)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51ff38: 4963 da48 | 8bf8 4883 | c730 488d | 0c9d 0000 | 0000 493b | bfe0 0100 | 000f 8332 

  0x0000732d1c51ff54: ;*invokevirtual copyMemory0 {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
                      ; - jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
                      ; - jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51ff54: 0400 0049 | 89bf d001 | 0000 0f0d | 8fc0 0000 | 0048 c700 | 0100 0000 

  0x0000732d1c51ff6c: ;   {metadata('jdk/internal/foreign/layout/ValueLayouts$OfIntImpl')}
  0x0000732d1c51ff6c: c740 0848 | 3600 0144 | 8960 0c4c | 8960 104c | 8960 184c | 8960 204c | 8960 284c | 891c 2444 
  0x0000732d1c51ff8c: 8954 2408 | 4c89 4424 | 1044 894c | 240c 4889 | 5c24 3048 

  0x0000732d1c51ffa0: ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
                      ; - jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51ffa0: 894c 2438 
 ;; B21: #	out( B114 B22 ) <- in( B63 B20 )  Freq: 0.999973
  0x0000732d1c51ffa4: 4889 4424 

  0x0000732d1c51ffa8: ;*synchronization entry
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::<init>@-1 (line 238)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@8 (line 243)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
                      ; - jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51ffa8: 4044 8b54 | 240c 498b 

  0x0000732d1c51ffb0: ;   {external_word}
  0x0000732d1c51ffb0: fa4c 3b25 | 684b 4814 | 0f84 1400 

  0x0000732d1c51ffbc: ;   {external_word}
  0x0000732d1c51ffbc: 0000 48bf | a8d5 db2f | 2d73 0000 | 4883 e4f0 

  0x0000732d1c51ffcc: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c51ffcc: e811 50a5 | 12f4 488b 

  0x0000732d1c51ffd4: ;   {oop(a 'java/lang/Class'{0x00000000ffeb20f8} = int)}
  0x0000732d1c51ffd4: f048 baf8 | 20eb ff00 

  0x0000732d1c51ffdc: ;   {oop(a 'java/nio/ByteOrder'{0x00000000c8f05120})}
  0x0000732d1c51ffdc: 0000 0048 | b920 51f0 | c800 0000 | 0041 b804 | 0000 004c | 8bcd 488b 

  0x0000732d1c51fff4: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c51fff4: 6c24 2090 

  0x0000732d1c51fff8: ;   {optimized virtual_call}
  0x0000732d1c51fff8: c5f8 77e8 

  0x0000732d1c51fffc: ; ImmutableOopMap {rbp=Oop [0]=Oop [16]=Oop [24]=Oop [32]=Oop [64]=Oop }
                      ;*invokespecial <init> {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::<init>@11 (line 238)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@8 (line 243)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
                      ; - jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c51fffc: e09a fdff 

  0x0000732d1c520000: ;   {post_call_nop}
  0x0000732d1c520000: 0f1f 8400 | 7804 0001 
 ;; B22: #	out( B99 B23 ) <- in( B21 )  Freq: 0.999953
  0x0000732d1c520008: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520008: 4c8b 1c24 

  0x0000732d1c52000c: ;*getfield byteSize {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.layout.AbstractLayout::byteSize@1 (line 84)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@22 (line 611)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c52000c: 498b 5b10 | 4c8b 4424 

  0x0000732d1c520014: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520014: 404d 8b50 

  0x0000732d1c520018: ;*getfield byteSize {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.layout.AbstractLayout::byteSize@1 (line 84)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@29 (line 611)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520018: 1049 3bda | 0f85 f209 

  0x0000732d1c520020: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520020: 0000 4d8b 

  0x0000732d1c520024: ;*getfield byteAlignment {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.layout.AbstractLayout::byteAlignment@1 (line 80)
                      ; - jdk.internal.foreign.Utils::isElementAligned@27 (line 209)
                      ; - jdk.internal.foreign.Utils::checkElementAlignment@1 (line 214)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@53 (line 614)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520024: 4b18 4c3b | cb0f 8f29 

  0x0000732d1c52002c: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c52002c: 0a00 0049 

  0x0000732d1c520030: ;*getfield byteAlignment {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.layout.AbstractLayout::byteAlignment@1 (line 80)
                      ; - jdk.internal.foreign.Utils::isElementAligned@27 (line 209)
                      ; - jdk.internal.foreign.Utils::checkElementAlignment@1 (line 214)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@61 (line 615)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520030: 8b48 1849 | 3bca 0f8f | 640a 0000 
 ;; B25: #	out( B91 B26 ) <- in( B24 )  Freq: 0.999952
  0x0000732d1c52003c: 49ff c949 | 83e1 140f | 85f7 0700 | 0048 ffc9 | 4883 e114 | 0f85 3208 | 0000 488b | 5424 3048 
  0x0000732d1c52005c: 0faf d345 | 33d2 493b | d241 baff | ffff ff7c | 0841 0f95 | c245 0fb6 | d248 85d2 | 0f8e 5208 
  0x0000732d1c52007c: 0000 41b9 | 8000 0000 | 4c2b ca49 | ffc1 4d85 | c90f 8ccd | 0400 00bd | 8100 0000 | 482b ea48 
  0x0000732d1c52009c: 85ed 0f86 | 0005 0000 
 ;; B30: #	out( B80 B31 ) <- in( B29 )  Freq: 0.999948
  0x0000732d1c5200a4: 488b 6c24 | 3848 2bea | 48ff c548 | 85ed 0f8c | 2005 0000 
 ;; B31: #	out( B81 B32 ) <- in( B30 )  Freq: 0.999947
  0x0000732d1c5200b8: 4885 ed0f | 864b 0500 | 0048 83fb | 010f 841d 

  0x0000732d1c5200c8: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5200c8: 0a00 0045 

  0x0000732d1c5200cc: ;*getfield order {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::order@1 (line 83)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@157 (line 625)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c5200cc: 8b48 2441 

  0x0000732d1c5200d0: ;*getfield order {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::order@1 (line 83)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@150 (line 625)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c5200d0: 8b6b 2441 | 3be9 0f85 | 3808 0000 
 ;; B34: #	out( B103 B35 ) <- in( B33 )  Freq: 0.999945
  0x0000732d1c5200dc: 4885 d20f | 8c4b 0a00 | 0048 85d2 | 0f84 760a | 0000 488b | 6c24 1048 | 83c5 1048 | 8b7c 2420 
  0x0000732d1c5200fc: ;   {other}
  0x0000732d1c5200fc: 4883 c710 

  0x0000732d1c520100: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520100: 488b f5c5 

  0x0000732d1c520104: ;   {runtime_call Stub::Stub Generator unsafe_arraycopy_stub}
  0x0000732d1c520104: f877 49ba | 800a 4e1c | 2d73 0000 

  0x0000732d1c520110: ;   {post_call_nop}
  0x0000732d1c520110: 41ff d20f | 1f84 0000 | 0000 0045 | 88a7 c805 | 0000 4d8b | 9fd0 0100 | 004d 8bd3 | 4983 c230 
  0x0000732d1c520130: 4d3b 97e0 | 0100 000f | 83be 0200 

  0x0000732d1c52013c: ;*invokevirtual copyMemory0 {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
                      ; - jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
                      ; - jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c52013c: 004d 8997 | d001 0000 | 410f 0d8a | c000 0000 | 49c7 0301 | 0000 0041 | 0f0d 8a00 

  0x0000732d1c520158: ;   {metadata({type array byte})}
  0x0000732d1c520158: 0100 0041 | c743 08d0 | 831b 0041 | 0f0d 8a40 | 0100 0041 | c743 0c20 | 0000 0041 | 0f0d 8a80 
  0x0000732d1c520178: 0100 004d | 8963 104d | 8963 184d | 8963 204d 

  0x0000732d1c520188: ;*newarray {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@3 (line 980)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520188: 8963 288b | 7c24 0885 | ff0f 8405 | 0300 0083 | ff1f 0f86 

  0x0000732d1c52019c: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c52019c: fc02 0000 
 ;; B40: #	out( B95 B41 ) <- in( B39 )  Freq: 0.999942
  0x0000732d1c5201a0: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c5201a0: 448b 4500 | 418b c883 | e11f 413b | c80f 8599 | 0700 0083 | ff01 0f86 | 8404 0000 
 ;; B42: #	out( B83 B43 ) <- in( B41 )  Freq: 0.999941
  0x0000732d1c5201bc: 83ff 040f | 868f 0400 

  0x0000732d1c5201c4: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5201c4: 0041 884b 

  0x0000732d1c5201c8: ;*bastore {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c5201c8: 1041 b901 | 0000 00eb | 1290 9090 | 9090 9090 | 9090 9090 | 9090 9090 
 ;; B44: #	out( B45 ) <- in( B49 ) top-of-loop Freq: 31.996
  0x0000732d1c5201e0: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5201e0: 458b ca4d 

  0x0000732d1c5201e4: ;*bastore {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c5201e4: 63d1 488b 

  0x0000732d1c5201e8: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5201e8: 5c24 1046 

  0x0000732d1c5201ec: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c5201ec: 8b44 9310 | 418b c883 | e11f 413b | c80f 8532 

  0x0000732d1c5201fc: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5201fc: 0200 0043 

  0x0000732d1c520200: ;*bastore {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520200: 884c 1310 | 468b 4493 

  0x0000732d1c520208: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520208: 1441 8bc8 | 83e1 1f41 | 3bc8 0f85 

  0x0000732d1c520214: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520214: 1002 0000 
 ;; B47: #	out( B70 B48 ) <- in( B46 )  Freq: 32.9959
  0x0000732d1c520218: 4388 4c13 

  0x0000732d1c52021c: ;*bastore {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c52021c: 1146 8b44 

  0x0000732d1c520220: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520220: 9318 418b | c883 e11f | 413b c80f | 85fc 0100 

  0x0000732d1c520230: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520230: 0043 884c 

  0x0000732d1c520234: ;*bastore {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520234: 1312 468b 

  0x0000732d1c520238: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520238: 4493 1c41 | 8bc8 83e1 | 1f41 3bc8 | 0f85 da01 

  0x0000732d1c520248: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520248: 0000 4388 

  0x0000732d1c52024c: ;*bastore {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c52024c: 4c13 1345 | 8d51 0441 | 83fa 1d7c 

  0x0000732d1c520258: ;   {other}
  0x0000732d1c520258: 8744 3bd7 | 0f83 6e02 | 0000 4183 | c104 443b | cf0f 8375 

  0x0000732d1c52026c: ;*aload_0 {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@15 (line 982)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c52026c: 0200 004d 

  0x0000732d1c520270: ;*bastore {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520270: 63d1 468b 

  0x0000732d1c520274: ;*iaload {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520274: 4493 1041 | 8bc8 83e1 | 1f41 3bc8 | 0f85 ab01 

  0x0000732d1c520284: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520284: 0000 4388 

  0x0000732d1c520288: ;*bastore {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520288: 4c13 1041 | ffc1 4183 

  0x0000732d1c520290: ;*invokespecial <init> {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.vm.vector.VectorSupport$VectorShuffle::<init>@2 (line 185)
                      ; - jdk.incubator.vector.VectorShuffle::<init>@2 (line 141)
                      ; - jdk.incubator.vector.AbstractShuffle::<init>@2 (line 38)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@2 (line 859)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@6 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520290: f920 7cdb 
 ;; B54: #	out( B84 B55 ) <- in( B53 )  Freq: 0.999871
  0x0000732d1c520294: c4c1 7e6f | 5310 488b | 6c24 2848 | 83c5 e1c5 | f9d6 d148 | 85ed 0f8c | b803 0000 
 ;; B55: #	out( B85 B56 ) <- in( B54 )  Freq: 0.99987
  0x0000732d1c5202b0: 4885 ed0f | 86f3 0300 | 004c 8b5c 

  0x0000732d1c5202bc: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5202bc: 2418 c4e2 

  0x0000732d1c5202c0: ;*invokestatic convert {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
                      ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 410)
                      ; - jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@19 (line 937)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5202c0: 7d21 c1c4 | c17e 7f43 

  0x0000732d1c5202c8: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@29 (line 939)
                      ; - test_ms::micro@30 (line 16)
                      ;   {oop([B{0x00000000c8ea9908})}
  0x0000732d1c5202c8: 1049 ba08 | 99ea c800 | 0000 00c4 | c17e 6f42 | 10c4 e36d | 46c8 21c4 | e375 0fca | 08c5 f9d6 
  0x0000732d1c5202e8: c948 83fd | 200f 86fd 

  0x0000732d1c5202f0: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5202f0: 0300 00c4 

  0x0000732d1c5202f4: ;*invokestatic convert {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
                      ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
                      ; - jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@40 (line 940)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5202f4: e27d 21c9 | c4c1 7e7f | 4b30 c4e3 | 6d46 c821 | c4e3 750f | ca10 c5f9 | d6c9 4883 | fd40 0f86 
  0x0000732d1c520314: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520314: 2004 0000 
 ;; B58: #	out( B88 B59 ) <- in( B57 )  Freq: 0.999867
  0x0000732d1c520318: c4e2 7d21 

  0x0000732d1c52031c: ;*invokestatic convert {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
                      ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
                      ; - jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@70 (line 943)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c52031c: c9c4 c17e | 7f4b 50c4 | e36d 46c8 | 21c4 e37d | 0fc1 18c5 | f9d6 c048 | 83fd 600f | 8643 0400 
  0x0000732d1c52033c: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c52033c: 00c4 e27d 

  0x0000732d1c520340: ;*invokestatic convert {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
                      ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
                      ; - jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@102 (line 946)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520340: 21c0 c4c1 | 7e7f 4370 | c5f8 7748 | 81c4 9000 

  0x0000732d1c520350: ;   {poll_return}
  0x0000732d1c520350: 0000 5d49 | 3b67 280f | 87bb 0900 

  0x0000732d1c52035c: ;   {metadata('jdk/internal/foreign/layout/ValueLayouts$OfIntImpl')}
  0x0000732d1c52035c: 00c3 48be | 4836 004d | 0000 0000 | 48ff 7424 | 1848 8f44 

  0x0000732d1c520370: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520370: 2408 9090 

  0x0000732d1c520374: ;   {runtime_call C2 Runtime new_instance_blob}
  0x0000732d1c520374: c5f8 77e8 

  0x0000732d1c520378: ; ImmutableOopMap {[8]=Oop [24]=Oop [32]=Oop }
                      ;*new {reexecute=0 rethrow=0 return_oop=1}
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
                      ; - jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@29 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520378: e4b5 f6ff 

  0x0000732d1c52037c: ;   {post_call_nop}
  0x0000732d1c52037c: 0f1f 8400 | f407 0002 
 ;; B61: #	out( B7 ) <- in( B60 )  Freq: 0.000100014
  0x0000732d1c520384: e997 f9ff | ff48 894c | 2438 4889 | 5c24 3044 | 894c 240c | 4c89 4424 | 1044 8954 | 2408 4c89 
  0x0000732d1c5203a4: ;   {metadata('jdk/internal/foreign/layout/ValueLayouts$OfIntImpl')}
  0x0000732d1c5203a4: 1c24 48be | 4836 004d | 0000 0000 

  0x0000732d1c5203b0: ;   {runtime_call C2 Runtime new_instance_blob}
  0x0000732d1c5203b0: c5f8 77e8 

  0x0000732d1c5203b4: ; ImmutableOopMap {[0]=Oop [12]=NarrowOop [16]=Oop [24]=Oop [32]=Oop }
                      ;*new {reexecute=0 rethrow=0 return_oop=1}
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
                      ; - jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c5203b4: a8b5 f6ff 

  0x0000732d1c5203b8: ;   {post_call_nop}
  0x0000732d1c5203b8: 0f1f 8400 | 3008 0003 
 ;; B63: #	out( B21 ) <- in( B62 )  Freq: 0.000100012
  0x0000732d1c5203c0: e9df fbff | ff44 8914 | 2449 8beb 

  0x0000732d1c5203cc: ;   {metadata({type array int})}
  0x0000732d1c5203cc: 48be f087 | 1b4c 0000 | 0000 418b 

  0x0000732d1c5203d8: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5203d8: d290 9090 

  0x0000732d1c5203dc: ;   {runtime_call C2 Runtime new_array_blob}
  0x0000732d1c5203dc: c5f8 77e8 

  0x0000732d1c5203e0: ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop }
                      ;*newarray {reexecute=0 rethrow=0 return_oop=1}
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::lambda$toArray$3@1 (line 321)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl$$Lambda/0x000000004d00f540::apply@1
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@20 (line 341)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c5203e0: 7cb2 f6ff 

  0x0000732d1c5203e4: ;   {post_call_nop}
  0x0000732d1c5203e4: 0f1f 8400 | 5c08 0004 
 ;; B65: #	out( B19 ) <- in( B64 )  Freq: 0.000101025
  0x0000732d1c5203ec: 4c8b dd44 | 8b14 244c | 8bc0 e92e 

  0x0000732d1c5203f8: ;   {metadata({type array byte})}
  0x0000732d1c5203f8: fbff ff48 | bed0 831b | 4c00 0000 | 00ba 2000 

  0x0000732d1c520408: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520408: 0000 9090 

  0x0000732d1c52040c: ;   {runtime_call C2 Runtime new_array_blob}
  0x0000732d1c52040c: c5f8 77e8 

  0x0000732d1c520410: ; ImmutableOopMap {[16]=Oop rbp=Derived_oop_[16] [24]=Oop }
                      ;*newarray {reexecute=0 rethrow=0 return_oop=1}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@3 (line 980)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520410: 4cb2 f6ff 

  0x0000732d1c520414: ;   {post_call_nop}
  0x0000732d1c520414: 0f1f 8400 | 8c08 0005 
 ;; B67: #	out( B38 ) <- in( B66 )  Freq: 0.000100009
  0x0000732d1c52041c: 4c8b d8e9 | 67fd ffff 
 ;; B68: #	out( B69 ) <- in( B48 )  Freq: 1.64979e-05
  0x0000732d1c520424: 4183 c102 
 ;; B69: #	out( B71 ) <- in( B46 B68 )  Freq: 3.29959e-05
  0x0000732d1c520428: 41ff c1eb | 0441 83c1 | 02be 45ff | ffff 488b | eb44 890c | 2489 4c24 | 0c44 8944 | 2410 4c89 
  0x0000732d1c520448: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520448: 5c24 2090 

  0x0000732d1c52044c: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c52044c: c5f8 77e8 

  0x0000732d1c520450: ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop }
                      ;*if_icmpne {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) jdk.incubator.vector.AbstractShuffle::checkIndex0@12 (line 136)
                      ; - jdk.incubator.vector.AbstractShuffle::partiallyWrapIndex@3 (line 129)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@27 (line 983)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520450: 8c04 f7ff 

  0x0000732d1c520454: ;   {post_call_nop}
  0x0000732d1c520454: 0f1f 8400 | cc08 0006 

  0x0000732d1c52045c: ;   {external_word}
  0x0000732d1c52045c: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520468: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520468: e4f0 e873 | 4ba5 12f4 
 ;; B72: #	out( N1 ) <- in( B15 )  Freq: 1.01325e-06
  0x0000732d1c520470: be7e ffff 

  0x0000732d1c520474: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520474: ff90 9090 

  0x0000732d1c520478: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c520478: c5f8 77e8 

  0x0000732d1c52047c: ; ImmutableOopMap {}
                      ;*ldiv {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::checkArraySize@53 (line 393)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@12 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c52047c: 6004 f7ff 

  0x0000732d1c520480: ;   {post_call_nop}
  0x0000732d1c520480: 0f1f 8400 | f808 0007 

  0x0000732d1c520488: ;   {external_word}
  0x0000732d1c520488: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520494: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520494: e4f0 e847 | 4ba5 12f4 
 ;; B73: #	out( N1 ) <- in( B39 B38 )  Freq: 2.01317e-06
  0x0000732d1c52049c: be6e ffff | ff48 8b6c | 2410 4c89 

  0x0000732d1c5204a8: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5204a8: 1c24 9090 

  0x0000732d1c5204ac: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c5204ac: c5f8 77e8 

  0x0000732d1c5204b0: ; ImmutableOopMap {rbp=Oop [0]=Oop [24]=Oop }
                      ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@12 (line 981)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c5204b0: 2c04 f7ff 

  0x0000732d1c5204b4: ;   {post_call_nop}
  0x0000732d1c5204b4: 0f1f 8400 | 2c09 0008 

  0x0000732d1c5204bc: ;   {external_word}
  0x0000732d1c5204bc: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c5204c8: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c5204c8: e4f0 e813 | 4ba5 12f4 
 ;; B74: #	out( N1 ) <- in( B50 )  Freq: 1.01315e-06
  0x0000732d1c5204d0: ;   {external_word}
  0x0000732d1c5204d0: 48bf d0fb | 9ae4 2c73 | 0000 4883 

  0x0000732d1c5204dc: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c5204dc: e4f0 e8ff | 4aa5 12f4 
 ;; B75: #	out( N1 ) <- in( B51 )  Freq: 1.01315e-06
  0x0000732d1c5204e4: ;   {external_word}
  0x0000732d1c5204e4: 48bf d0fb | 9ae4 2c73 | 0000 4883 

  0x0000732d1c5204f0: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c5204f0: e4f0 e8eb | 4aa5 12f4 
 ;; B76: #	out( N1 ) <- in( B3 )  Freq: 9.99999e-07
  0x0000732d1c5204f8: becc ffff | ff4c 891c | 244c 8954 

  0x0000732d1c520504: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520504: 2410 9090 

  0x0000732d1c520508: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c520508: c5f8 77e8 

  0x0000732d1c52050c: ; ImmutableOopMap {[24]=Oop [32]=Oop }
                      ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::asSlice@3 (line 103)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::asSlice@3 (line 70)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@15 (line 362)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c52050c: d003 f7ff 

  0x0000732d1c520510: ;   {post_call_nop}
  0x0000732d1c520510: 0f1f 8400 | 8809 0009 

  0x0000732d1c520518: ;   {external_word}
  0x0000732d1c520518: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520524: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520524: e4f0 e8b7 | 4aa5 12f4 
 ;; B77: #	out( N1 ) <- in( B4 )  Freq: 9.99998e-07
  0x0000732d1c52052c: bee4 ffff | ff4c 891c | 244c 8954 

  0x0000732d1c520538: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520538: 2410 9090 

  0x0000732d1c52053c: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c52053c: c5f8 77e8 

  0x0000732d1c520540: ; ImmutableOopMap {[24]=Oop [32]=Oop }
                      ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::asSlice@3 (line 103)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::asSlice@3 (line 70)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@15 (line 362)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520540: 9c03 f7ff 

  0x0000732d1c520544: ;   {post_call_nop}
  0x0000732d1c520544: 0f1f 8400 | bc09 000a 

  0x0000732d1c52054c: ;   {external_word}
  0x0000732d1c52054c: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520558: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520558: e4f0 e883 | 4aa5 12f4 
 ;; B78: #	out( N1 ) <- in( B28 )  Freq: 9.9995e-07
  0x0000732d1c520560: becc ffff | ff48 8b6c | 2410 4c89 | 5c24 104c | 8944 2430 | 4889 5424 | 404c 894c 

  0x0000732d1c52057c: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c52057c: 2448 9090 

  0x0000732d1c520580: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c520580: c5f8 77e8 

  0x0000732d1c520584: ; ImmutableOopMap {rbp=Oop [16]=Oop [24]=Oop [32]=Oop [48]=Oop }
                      ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess@9 (line 357)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@125 (line 623)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520584: 5803 f7ff 

  0x0000732d1c520588: ;   {post_call_nop}
  0x0000732d1c520588: 0f1f 8400 | 000a 000b 

  0x0000732d1c520590: ;   {external_word}
  0x0000732d1c520590: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c52059c: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c52059c: e4f0 e83f | 4aa5 12f4 
 ;; B79: #	out( N1 ) <- in( B29 )  Freq: 9.99949e-07
  0x0000732d1c5205a4: bee4 ffff | ff4c 895c | 2430 4889 

  0x0000732d1c5205b0: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5205b0: 5424 4890 

  0x0000732d1c5205b4: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c5205b4: c5f8 77e8 

  0x0000732d1c5205b8: ; ImmutableOopMap {[16]=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop }
                      ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess@9 (line 357)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@125 (line 623)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c5205b8: 2403 f7ff 

  0x0000732d1c5205bc: ;   {post_call_nop}
  0x0000732d1c5205bc: 0f1f 8400 | 340a 000c 

  0x0000732d1c5205c4: ;   {external_word}
  0x0000732d1c5205c4: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c5205d0: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c5205d0: e4f0 e80b | 4aa5 12f4 
 ;; B80: #	out( N1 ) <- in( B30 )  Freq: 9.99948e-07
  0x0000732d1c5205d8: becc ffff | ff4c 895c | 2430 4889 

  0x0000732d1c5205e4: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5205e4: 5424 4890 

  0x0000732d1c5205e8: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c5205e8: c5f8 77e8 

  0x0000732d1c5205ec: ; ImmutableOopMap {[16]=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop }
                      ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess@9 (line 357)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@135 (line 624)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c5205ec: f002 f7ff 

  0x0000732d1c5205f0: ;   {post_call_nop}
  0x0000732d1c5205f0: 0f1f 8400 | 680a 000d 

  0x0000732d1c5205f8: ;   {external_word}
  0x0000732d1c5205f8: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520604: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520604: e4f0 e8d7 | 49a5 12f4 
 ;; B81: #	out( N1 ) <- in( B31 )  Freq: 9.99947e-07
  0x0000732d1c52060c: bee4 ffff | ff4c 895c | 2430 4889 

  0x0000732d1c520618: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520618: 5424 4890 

  0x0000732d1c52061c: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c52061c: c5f8 77e8 

  0x0000732d1c520620: ; ImmutableOopMap {[16]=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop }
                      ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess@9 (line 357)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@135 (line 624)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520620: bc02 f7ff 

  0x0000732d1c520624: ;   {post_call_nop}
  0x0000732d1c520624: 0f1f 8400 | 9c0a 000e 

  0x0000732d1c52062c: ;   {external_word}
  0x0000732d1c52062c: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520638: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520638: e4f0 e8a3 | 49a5 12f4 
 ;; B82: #	out( N1 ) <- in( B41 )  Freq: 9.99942e-07
  0x0000732d1c520640: ;   {external_word}
  0x0000732d1c520640: 48bf d0fb | 9ae4 2c73 | 0000 4883 

  0x0000732d1c52064c: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c52064c: e4f0 e88f | 49a5 12f4 
 ;; B83: #	out( N1 ) <- in( B42 )  Freq: 9.99941e-07
  0x0000732d1c520654: ;   {external_word}
  0x0000732d1c520654: 48bf d0fb | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520660: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520660: e4f0 e87b | 49a5 12f4 
 ;; B84: #	out( N1 ) <- in( B54 )  Freq: 9.99871e-07
  0x0000732d1c520668: becc ffff 

  0x0000732d1c52066c: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c52066c: ffc4 e27d 

  0x0000732d1c520670: ;*invokestatic convert {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
                      ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 410)
                      ; - jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@19 (line 937)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520670: 21c9 c5fe | 7f4c 2440 | c5fe 7f54 | 2460 48ff | 7424 1848 | 8f44 2408 

  0x0000732d1c520688: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c520688: c5f8 77e8 

  0x0000732d1c52068c: ; ImmutableOopMap {[8]=Oop }
                      ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.util.Objects::checkIndex@3 (line 441)
                      ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@45 (line 68)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@32 (line 3453)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@29 (line 939)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c52068c: 5002 f7ff 

  0x0000732d1c520690: ;   {post_call_nop}
  0x0000732d1c520690: 0f1f 8400 | 080b 000f 

  0x0000732d1c520698: ;   {external_word}
  0x0000732d1c520698: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c5206a4: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c5206a4: e4f0 e837 | 49a5 12f4 
 ;; B85: #	out( N1 ) <- in( B55 )  Freq: 9.9987e-07
  0x0000732d1c5206ac: bee4 ffff 

  0x0000732d1c5206b0: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5206b0: ffc4 e27d 

  0x0000732d1c5206b4: ;*invokestatic convert {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
                      ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 410)
                      ; - jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@19 (line 937)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5206b4: 21c9 c5fe | 7f4c 2440 | c5fe 7f54 | 2460 48ff | 7424 1848 | 8f44 2408 

  0x0000732d1c5206cc: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c5206cc: c5f8 77e8 

  0x0000732d1c5206d0: ; ImmutableOopMap {[8]=Oop }
                      ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.util.Objects::checkIndex@3 (line 441)
                      ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@45 (line 68)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@32 (line 3453)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@29 (line 939)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5206d0: 0c02 f7ff 

  0x0000732d1c5206d4: ;   {post_call_nop}
  0x0000732d1c5206d4: 0f1f 8400 | 4c0b 0010 

  0x0000732d1c5206dc: ;   {external_word}
  0x0000732d1c5206dc: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c5206e8: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c5206e8: e4f0 e8f3 | 48a5 12f4 
 ;; B86: #	out( N1 ) <- in( B56 )  Freq: 9.99869e-07
  0x0000732d1c5206f0: bee4 ffff 

  0x0000732d1c5206f4: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5206f4: ffc4 e27d 

  0x0000732d1c5206f8: ;*invokestatic convert {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
                      ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
                      ; - jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@40 (line 940)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5206f8: 21c9 c5fe | 7f0c 24c5 | fe7f 5424 | 404c 8b54 | 2428 4c89 | 5424 204c | 895c 2430 

  0x0000732d1c520714: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c520714: c5f8 77e8 

  0x0000732d1c520718: ; ImmutableOopMap {[48]=Oop }
                      ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.util.Objects::checkIndex@3 (line 441)
                      ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@45 (line 68)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@32 (line 3453)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@59 (line 942)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520718: c401 f7ff 

  0x0000732d1c52071c: ;   {post_call_nop}
  0x0000732d1c52071c: 0f1f 8400 | 940b 0011 

  0x0000732d1c520724: ;   {external_word}
  0x0000732d1c520724: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520730: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520730: e4f0 e8ab | 48a5 12f4 
 ;; B87: #	out( N1 ) <- in( B57 )  Freq: 9.99868e-07
  0x0000732d1c520738: bee4 ffff 

  0x0000732d1c52073c: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c52073c: ffc4 e27d 

  0x0000732d1c520740: ;*invokestatic convert {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
                      ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
                      ; - jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@70 (line 943)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520740: 21c9 c5fe | 7f0c 24c5 | fe7f 5424 | 404c 8b54 | 2428 4c89 | 5424 204c | 895c 2430 

  0x0000732d1c52075c: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c52075c: c5f8 77e8 

  0x0000732d1c520760: ; ImmutableOopMap {[48]=Oop }
                      ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.util.Objects::checkIndex@3 (line 441)
                      ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@45 (line 68)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@32 (line 3453)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@91 (line 945)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520760: 7c01 f7ff 

  0x0000732d1c520764: ;   {post_call_nop}
  0x0000732d1c520764: 0f1f 8400 | dc0b 0012 

  0x0000732d1c52076c: ;   {external_word}
  0x0000732d1c52076c: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520778: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520778: e4f0 e863 | 48a5 12f4 
 ;; B88: #	out( N1 ) <- in( B58 )  Freq: 9.99867e-07
  0x0000732d1c520780: bee4 ffff 

  0x0000732d1c520784: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520784: ffc4 e27d 

  0x0000732d1c520788: ;*invokestatic convert {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
                      ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
                      ; - jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@102 (line 946)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520788: 21c0 c5fe | 7f04 244c | 8b54 2428 | 4c89 5424 | 204c 895c 

  0x0000732d1c52079c: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c52079c: 2430 9090 

  0x0000732d1c5207a0: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c5207a0: c5f8 77e8 

  0x0000732d1c5207a4: ; ImmutableOopMap {[48]=Oop }
                      ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.util.Objects::checkIndex@3 (line 441)
                      ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@45 (line 68)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@32 (line 3453)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5207a4: 3801 f7ff 

  0x0000732d1c5207a8: ;   {post_call_nop}
  0x0000732d1c5207a8: 0f1f 8400 | 200c 0013 

  0x0000732d1c5207b0: ;   {external_word}
  0x0000732d1c5207b0: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c5207bc: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c5207bc: e4f0 e81f | 48a5 12f4 
 ;; B89: #	out( N1 ) <- in( B12 )  Freq: 4.99988e-07
  0x0000732d1c5207c4: be45 ffff | ff44 895c | 2408 4489 

  0x0000732d1c5207d0: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5207d0: 4c24 1090 

  0x0000732d1c5207d4: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c5207d4: c5f8 77e8 

  0x0000732d1c5207d8: ; ImmutableOopMap {[0]=Oop [8]=NarrowOop [24]=Oop [32]=Oop }
                      ;*if_icmpne {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) java.lang.Class::reflectionData@31 (line 2836)
                      ; - java.lang.Class::getSimpleName@1 (line 1669)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c5207d8: 0401 f7ff 

  0x0000732d1c5207dc: ;   {post_call_nop}
  0x0000732d1c5207dc: 0f1f 8400 | 540c 0014 

  0x0000732d1c5207e4: ;   {external_word}
  0x0000732d1c5207e4: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c5207f0: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c5207f0: e4f0 e8eb | 47a5 12f4 
 ;; B90: #	out( N1 ) <- in( B14 )  Freq: 4.99987e-07
  0x0000732d1c5207f8: 4533 c04d | 3bc8 bdff | ffff ff7c | 0840 0f95 | c540 0fb6 | edbe 45ff | ffff 4489 | 5424 0889 
  0x0000732d1c520818: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520818: 5c24 0c90 

  0x0000732d1c52081c: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c52081c: c5f8 77e8 

  0x0000732d1c520820: ; ImmutableOopMap {[0]=Oop [8]=NarrowOop [24]=Oop [32]=Oop }
                      ;*ifne {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) jdk.internal.foreign.Utils::isAligned@7 (line 201)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::checkArraySize@6 (line 390)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@12 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520820: bc00 f7ff 

  0x0000732d1c520824: ;   {post_call_nop}
  0x0000732d1c520824: 0f1f 8400 | 9c0c 0015 

  0x0000732d1c52082c: ;   {external_word}
  0x0000732d1c52082c: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520838: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520838: e4f0 e8a3 | 47a5 12f4 
 ;; B91: #	out( N1 ) <- in( B25 )  Freq: 4.99976e-07
  0x0000732d1c520840: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520840: 4533 d24d | 3bca bdff | ffff ff7c | 0840 0f95 | c540 0fb6 | edbe 45ff | ffff 4c89 | 5c24 404c 
  0x0000732d1c520860: 8944 2448 

  0x0000732d1c520864: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c520864: c5f8 77e8 

  0x0000732d1c520868: ; ImmutableOopMap {[16]=Oop [24]=Oop [32]=Oop [64]=Oop [72]=Oop }
                      ;*ifne {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) jdk.internal.foreign.AbstractMemorySegmentImpl::isAlignedForElement@17 (line 385)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::isAlignedForElement@8 (line 380)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@68 (line 616)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520868: 7400 f7ff 

  0x0000732d1c52086c: ;   {post_call_nop}
  0x0000732d1c52086c: 0f1f 8400 | e40c 0016 

  0x0000732d1c520874: ;   {external_word}
  0x0000732d1c520874: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520880: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520880: e4f0 e85b | 47a5 12f4 
 ;; B92: #	out( N1 ) <- in( B26 )  Freq: 4.99976e-07
  0x0000732d1c520888: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520888: 4533 d249 | 3bca bdff | ffff ff7c | 0840 0f95 | c540 0fb6 | edbe 45ff | ffff 4c89 | 5c24 404c 
  0x0000732d1c5208a8: 8944 2448 

  0x0000732d1c5208ac: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c5208ac: c5f8 77e8 

  0x0000732d1c5208b0: ; ImmutableOopMap {[16]=Oop [24]=Oop [32]=Oop [64]=Oop [72]=Oop }
                      ;*ifne {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) jdk.internal.foreign.AbstractMemorySegmentImpl::isAlignedForElement@17 (line 385)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::isAlignedForElement@8 (line 380)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@91 (line 619)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c5208b0: 2c00 f7ff 

  0x0000732d1c5208b4: ;   {post_call_nop}
  0x0000732d1c5208b4: 0f1f 8400 | 2c0d 0017 

  0x0000732d1c5208bc: ;   {external_word}
  0x0000732d1c5208bc: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c5208c8: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c5208c8: e4f0 e813 | 47a5 12f4 
 ;; B93: #	out( N1 ) <- in( B27 )  Freq: 4.99975e-07
  0x0000732d1c5208d0: be45 ffff | ff48 8b6c | 2410 4c89 | 5c24 104c | 8944 2430 | 4889 5424 | 4844 8954 

  0x0000732d1c5208ec: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5208ec: 2450 9090 

  0x0000732d1c5208f0: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c5208f0: c5f8 77e8 

  0x0000732d1c5208f4: ; ImmutableOopMap {rbp=Oop [16]=Oop [24]=Oop [32]=Oop [48]=Oop }
                      ;*ifle {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@3 (line 402)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess@9 (line 357)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@125 (line 623)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c5208f4: e8ff f6ff 

  0x0000732d1c5208f8: ;   {post_call_nop}
  0x0000732d1c5208f8: 0f1f 8400 

  0x0000732d1c5208fc: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5208fc: 700d 0018 

  0x0000732d1c520900: ;   {external_word}
  0x0000732d1c520900: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c52090c: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c52090c: e4f0 e8cf | 46a5 12f4 
 ;; B94: #	out( N1 ) <- in( B33 )  Freq: 4.99973e-07
  0x0000732d1c520914: be45 ffff | ff4c 895c | 2430 4889 | 5424 4044 | 894c 2448 

  0x0000732d1c520928: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c520928: c5f8 77e8 

  0x0000732d1c52092c: ; ImmutableOopMap {rbp=NarrowOop [16]=Oop [24]=Oop [32]=Oop [48]=Oop [72]=NarrowOop }
                      ;*if_acmpne {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) jdk.internal.foreign.AbstractMemorySegmentImpl::copy@162 (line 625)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c52092c: b0ff f6ff 

  0x0000732d1c520930: ;   {post_call_nop}
  0x0000732d1c520930: 0f1f 8400 

  0x0000732d1c520934: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520934: a80d 0019 

  0x0000732d1c520938: ;   {external_word}
  0x0000732d1c520938: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520944: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520944: e4f0 e897 | 46a5 12f4 
 ;; B95: #	out( B71 ) <- in( B40 )  Freq: 4.99971e-07
  0x0000732d1c52094c: 4533 c948 | 8b5c 2410 | e9d8 faff | ffbe 45ff | ffff 488b | 2c24 4489 | 4c24 0444 | 895c 2408 
  0x0000732d1c52096c: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c52096c: c5f8 77e8 

  0x0000732d1c520970: ; ImmutableOopMap {rbp=Oop [8]=NarrowOop [24]=Oop [32]=Oop }
                      ;*ifnull {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) java.lang.Class::reflectionData@11 (line 2835)
                      ; - java.lang.Class::getSimpleName@1 (line 1669)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520970: 6cff f6ff 

  0x0000732d1c520974: ;   {post_call_nop}
  0x0000732d1c520974: 0f1f 8400 | ec0d 001a 

  0x0000732d1c52097c: ;   {external_word}
  0x0000732d1c52097c: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520988: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520988: e4f0 e853 | 46a5 12f4 
 ;; B97: #	out( N1 ) <- in( B10 )  Freq: 4.76826e-07
  0x0000732d1c520990: 483b cbbd | ffff ffff | 7c08 400f | 95c5 400f | b6ed be45 | ffff ff44 | 894c 240c | 4489 5c24 
  0x0000732d1c5209b0: 1044 8944 

  0x0000732d1c5209b4: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5209b4: 2414 9090 

  0x0000732d1c5209b8: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c5209b8: c5f8 77e8 

  0x0000732d1c5209bc: ; ImmutableOopMap {[0]=Oop [16]=NarrowOop [20]=NarrowOop [24]=Oop [32]=Oop }
                      ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) java.lang.ref.SoftReference::get@17 (line 114)
                      ; - java.lang.Class::reflectionData@15 (line 2836)
                      ; - java.lang.Class::getSimpleName@1 (line 1669)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c5209bc: 20ff f6ff 

  0x0000732d1c5209c0: ;   {post_call_nop}
  0x0000732d1c5209c0: 0f1f 8400 | 380e 001b 

  0x0000732d1c5209c8: ;   {external_word}
  0x0000732d1c5209c8: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c5209d4: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c5209d4: e4f0 e807 | 46a5 12f4 
 ;; B98: #	out( N1 ) <- in( B13 )  Freq: 4.76825e-07
  0x0000732d1c5209dc: be45 ffff | ff48 8b2c | 244c 8904 | 2444 8954 

  0x0000732d1c5209ec: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c5209ec: 240c 9090 

  0x0000732d1c5209f0: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c5209f0: c5f8 77e8 

  0x0000732d1c5209f4: ; ImmutableOopMap {rbp=Oop [0]=Oop [12]=NarrowOop [24]=Oop [32]=Oop }
                      ;*ifnonnull {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) java.lang.Class::getSimpleName@11 (line 1671)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c5209f4: e8fe f6ff 

  0x0000732d1c5209f8: ;   {post_call_nop}
  0x0000732d1c5209f8: 0f1f 8400 | 700e 001c 

  0x0000732d1c520a00: ;   {external_word}
  0x0000732d1c520a00: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520a0c: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520a0c: e4f0 e8cf 

  0x0000732d1c520a10: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520a10: 45a5 12f4 
 ;; B99: #	out( N1 ) <- in( B22 )  Freq: 4.76815e-07
  0x0000732d1c520a14: 493b dabd | ffff ffff | 7c08 400f | 95c5 400f | b6ed be45 | ffff ff4c | 8b54 2410 | 4c89 1424 
  0x0000732d1c520a34: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c520a34: c5f8 77e8 

  0x0000732d1c520a38: ; ImmutableOopMap {[0]=Oop [24]=Oop }
                      ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) jdk.internal.foreign.AbstractMemorySegmentImpl::copy@35 (line 611)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520a38: a4fe f6ff 

  0x0000732d1c520a3c: ;   {post_call_nop}
  0x0000732d1c520a3c: 0f1f 8400 | b40e 001d 

  0x0000732d1c520a44: ;   {external_word}
  0x0000732d1c520a44: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520a50: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520a50: e4f0 e88b | 45a5 12f4 
 ;; B100: #	out( N1 ) <- in( B23 )  Freq: 4.76815e-07
  0x0000732d1c520a58: 4c3b cbbd | ffff ffff | 7c08 400f | 95c5 400f | b6ed be45 | ffff ff4c | 895c 2440 | 4c89 4424 
  0x0000732d1c520a78: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520a78: 4890 9090 

  0x0000732d1c520a7c: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c520a7c: c5f8 77e8 

  0x0000732d1c520a80: ; ImmutableOopMap {[16]=Oop [24]=Oop [32]=Oop [64]=Oop [72]=Oop }
                      ;*ifgt {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) jdk.internal.foreign.Utils::isElementAligned@39 (line 209)
                      ; - jdk.internal.foreign.Utils::checkElementAlignment@1 (line 214)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@53 (line 614)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520a80: 5cfe f6ff 

  0x0000732d1c520a84: ;   {post_call_nop}
  0x0000732d1c520a84: 0f1f 8400 | fc0e 001e 

  0x0000732d1c520a8c: ;   {external_word}
  0x0000732d1c520a8c: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520a98: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520a98: e4f0 e843 | 45a5 12f4 
 ;; B101: #	out( N1 ) <- in( B24 )  Freq: 4.76814e-07
  0x0000732d1c520aa0: 493b cabd | ffff ffff | 7c08 400f | 95c5 400f | b6ed be45 | ffff ff4c | 895c 2440 | 4c89 4424 
  0x0000732d1c520ac0: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520ac0: 4890 9090 

  0x0000732d1c520ac4: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c520ac4: c5f8 77e8 

  0x0000732d1c520ac8: ; ImmutableOopMap {[16]=Oop [24]=Oop [32]=Oop [64]=Oop [72]=Oop }
                      ;*ifgt {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) jdk.internal.foreign.Utils::isElementAligned@39 (line 209)
                      ; - jdk.internal.foreign.Utils::checkElementAlignment@1 (line 214)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@61 (line 615)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520ac8: 14fe f6ff 

  0x0000732d1c520acc: ;   {post_call_nop}
  0x0000732d1c520acc: 0f1f 8400 | 440f 001f 

  0x0000732d1c520ad4: ;   {external_word}
  0x0000732d1c520ad4: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520ae0: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520ae0: e4f0 e8fb | 44a5 12f4 
 ;; B102: #	out( N1 ) <- in( B32 )  Freq: 4.76811e-07
  0x0000732d1c520ae8: 41ba 0100 | 0000 493b | dabd ffff | ffff 7c08 | 400f 95c5 | 400f b6ed | be45 ffff | ff48 8954 
  0x0000732d1c520b08: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520b08: 2430 9090 

  0x0000732d1c520b0c: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c520b0c: c5f8 77e8 

  0x0000732d1c520b10: ; ImmutableOopMap {[16]=Oop [24]=Oop [32]=Oop }
                      ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) jdk.internal.foreign.AbstractMemorySegmentImpl::copy@146 (line 625)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520b10: ccfd f6ff 

  0x0000732d1c520b14: ;   {post_call_nop}
  0x0000732d1c520b14: 0f1f 8400 | 8c0f 0020 

  0x0000732d1c520b1c: ;   {external_word}
  0x0000732d1c520b1c: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520b28: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520b28: e4f0 e8b3 | 44a5 12f4 
 ;; B103: #	out( N1 ) <- in( B34 )  Freq: 4.76811e-07
  0x0000732d1c520b30: be45 ffff | ff48 8954 | 2430 4489 

  0x0000732d1c520b3c: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520b3c: 5424 4090 

  0x0000732d1c520b40: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c520b40: c5f8 77e8 

  0x0000732d1c520b44: ; ImmutableOopMap {[16]=Oop [24]=Oop [32]=Oop }
                      ;*ifge {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) jdk.internal.misc.Unsafe::checkSize@23 (line 473)
                      ; - jdk.internal.misc.Unsafe::copyMemoryChecks@3 (line 837)
                      ; - jdk.internal.misc.Unsafe::copyMemory@9 (line 806)
                      ; - jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
                      ; - jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520b44: 98fd f6ff 

  0x0000732d1c520b48: ;   {post_call_nop}
  0x0000732d1c520b48: 0f1f 8400 | c00f 0021 

  0x0000732d1c520b50: ;   {external_word}
  0x0000732d1c520b50: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520b5c: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520b5c: e4f0 e87f | 44a5 12f4 
 ;; B104: #	out( N1 ) <- in( B35 )  Freq: 4.76811e-07
  0x0000732d1c520b64: be45 ffff | ff48 8b6c | 2410 4489 | 5424 084c | 8b54 2428 | 4c89 5424 

  0x0000732d1c520b7c: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520b7c: 1090 9090 

  0x0000732d1c520b80: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c520b80: c5f8 77e8 

  0x0000732d1c520b84: ; ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop }
                      ;*ifne {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) jdk.internal.misc.Unsafe::copyMemory@16 (line 808)
                      ; - jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
                      ; - jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
                      ; - java.lang.foreign.MemorySegment::copy@33 (line 1660)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520b84: 58fd f6ff 

  0x0000732d1c520b88: ;   {post_call_nop}
  0x0000732d1c520b88: 0f1f 8400 | 0010 0022 

  0x0000732d1c520b90: ;   {external_word}
  0x0000732d1c520b90: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520b9c: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520b9c: e4f0 e83f | 44a5 12f4 
 ;; B105: #	out( N1 ) <- in( B11 )  Freq: 1e-35
  0x0000732d1c520ba4: bede ffff | ff48 8b2c | 2444 891c | 2444 894c | 2404 4489 

  0x0000732d1c520bb8: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520bb8: 4424 0890 

  0x0000732d1c520bbc: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c520bbc: c5f8 77e8 

  0x0000732d1c520bc0: ; ImmutableOopMap {rbp=Oop [0]=NarrowOop [8]=NarrowOop [24]=Oop [32]=Oop }
                      ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                      ; - java.lang.Class::reflectionData@18 (line 2836)
                      ; - java.lang.Class::getSimpleName@1 (line 1669)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520bc0: 1cfd f6ff 

  0x0000732d1c520bc4: ;   {post_call_nop}
  0x0000732d1c520bc4: 0f1f 8400 

  0x0000732d1c520bc8: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520bc8: 3c10 0023 

  0x0000732d1c520bcc: ;   {external_word}
  0x0000732d1c520bcc: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520bd8: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520bd8: e4f0 e803 | 44a5 12f4 
 ;; B106: #	out( N1 ) <- in( B1 )  Freq: 4.76837e-07
  0x0000732d1c520be0: be45 ffff | ff48 8b6c | 2418 4889 | 5424 0848 | 8954 2410 

  0x0000732d1c520bf4: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c520bf4: c5f8 77e8 

  0x0000732d1c520bf8: ; ImmutableOopMap {rbp=Oop [8]=Oop [16]=Oop }
                      ;*ifnonnull {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) java.util.Objects::requireNonNull@1 (line 219)
                      ; - jdk.internal.foreign.SegmentFactories::fromArray@4 (line 104)
                      ; - java.lang.foreign.MemorySegment::ofArray@1 (line 1476)
                      ; - test_ms::micro@1 (line 13)
  0x0000732d1c520bf8: e4fc f6ff 

  0x0000732d1c520bfc: ;   {post_call_nop}
  0x0000732d1c520bfc: 0f1f 8400 | 7410 0024 

  0x0000732d1c520c04: ;   {external_word}
  0x0000732d1c520c04: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520c10: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520c10: e4f0 e8cb | 43a5 12f4 
 ;; B107: #	out( N1 ) <- in( B2 )  Freq: 4.76837e-07
  0x0000732d1c520c18: be45 ffff | ff48 8b6c | 2418 4c89 

  0x0000732d1c520c24: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520c24: 5424 1090 

  0x0000732d1c520c28: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c520c28: c5f8 77e8 

  0x0000732d1c520c2c: ; ImmutableOopMap {rbp=Oop [32]=Oop }
                      ;*ifnonnull {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) java.util.Objects::requireNonNull@1 (line 219)
                      ; - jdk.internal.foreign.SegmentFactories::fromArray@4 (line 104)
                      ; - java.lang.foreign.MemorySegment::ofArray@1 (line 1476)
                      ; - test_ms::micro@6 (line 14)
  0x0000732d1c520c2c: b0fc f6ff 

  0x0000732d1c520c30: ;   {post_call_nop}
  0x0000732d1c520c30: 0f1f 8400 | a810 0025 

  0x0000732d1c520c38: ;   {external_word}
  0x0000732d1c520c38: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520c44: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520c44: e4f0 e897 | 43a5 12f4 
 ;; B108: #	out( N1 ) <- in( B9 )  Freq: 4.76826e-07
  0x0000732d1c520c4c: be45 ffff | ff48 8b2c | 2444 891c | 2444 894c | 2404 4489 

  0x0000732d1c520c60: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520c60: 4424 0c90 

  0x0000732d1c520c64: ;   {runtime_call UncommonTrapBlob}
  0x0000732d1c520c64: c5f8 77e8 

  0x0000732d1c520c68: ; ImmutableOopMap {rbp=Oop [0]=NarrowOop [12]=NarrowOop [24]=Oop [32]=Oop }
                      ;*ifnull {reexecute=1 rethrow=0 return_oop=0}
                      ; - (reexecute) java.lang.ref.SoftReference::get@6 (line 114)
                      ; - java.lang.Class::reflectionData@15 (line 2836)
                      ; - java.lang.Class::getSimpleName@1 (line 1669)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520c68: 74fc f6ff 

  0x0000732d1c520c6c: ;   {post_call_nop}
  0x0000732d1c520c6c: 0f1f 8400 

  0x0000732d1c520c70: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520c70: e410 0026 

  0x0000732d1c520c74: ;   {external_word}
  0x0000732d1c520c74: 48bf 90f9 | 9ae4 2c73 | 0000 4883 

  0x0000732d1c520c80: ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x0000732d1c520c80: e4f0 e85b 

  0x0000732d1c520c84: ;*newarray {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@3 (line 980)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
                      ; - jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
                      ; - jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520c84: 43a5 12f4 
 ;; B109: #	out( B115 ) <- in( B66 )  Freq: 1.00011e-09
  0x0000732d1c520c88: 488b f0eb 

  0x0000732d1c520c8c: ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
                      ; - jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520c8c: 1748 8bf0 

  0x0000732d1c520c90: ;*new {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
                      ; - jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@29 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520c90: eb12 488b 

  0x0000732d1c520c94: ;*newarray {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::lambda$toArray$3@1 (line 321)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl$$Lambda/0x000000004d00f540::apply@1
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@20 (line 341)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520c94: f0eb 0d48 

  0x0000732d1c520c98: ;*invokespecial <init> {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::<init>@11 (line 238)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@8 (line 243)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
                      ; - jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@29 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520c98: 8bf0 eb08 
 ;; B113: #	out( B115 ) <- in( B7 )  Freq: 9.99997e-06
  0x0000732d1c520c9c: 488b f0eb 

  0x0000732d1c520ca0: ;*invokespecial <init> {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::<init>@11 (line 238)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@8 (line 243)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
                      ; - jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
                      ; - jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
                      ; - jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
                      ; - jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
                      ; - test_ms::micro@18 (line 15)
  0x0000732d1c520ca0: 0348 8bf0 
 ;; B115: #	out( N1 ) <- in( B110 B114 B109 B111 B113 B112 )  Freq: 2.00037e-05
  0x0000732d1c520ca4: c5f8 7748 | 81c4 9000 

  0x0000732d1c520cac: ;   {runtime_call C2 Runtime rethrow_blob}
  0x0000732d1c520cac: 0000 5de9 

  0x0000732d1c520cb0: ;*invokestatic store {reexecute=0 rethrow=0 return_oop=0}
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
                      ; - jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
                      ; - jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
                      ; - jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
                      ; - test_ms::micro@30 (line 16)
  0x0000732d1c520cb0: ac85 f6ff | 4983 fa00 | 0f84 fcf0 | ffff 498b | 4f38 4885 | c90f 8414 | 0000 0048 | 83e9 0849 
  0x0000732d1c520cd0: 894f 3849 | 034f 404c | 8911 e9db | f0ff ff48 | 83ec 204c | 895c 2418 | 4c89 4424 | 104c 894c 
  0x0000732d1c520cf0: 2408 498b | fa49 8bf7 

  0x0000732d1c520cf8: ;   {runtime_call G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)}
  0x0000732d1c520cf8: e89d dc46 | 124c 8b4c | 2408 4c8b | 4424 104c | 8b5c 2418 | c5f8 7748 | 83c4 20e9 | a2f0 ffff 
  0x0000732d1c520d18: ;   {internal_word}
  0x0000732d1c520d18: 49ba 5303 | 521c 2d73 | 0000 4d89 | 97a8 0500 

  0x0000732d1c520d28: ;   {runtime_call SafepointBlob}
  0x0000732d1c520d28: 00e9 32af 

  0x0000732d1c520d2c: ;   {runtime_call Stub::Stub Generator method_entry_barrier_stub}
  0x0000732d1c520d2c: fdff e86d | 06fc ffe9 | 66ef ffff 
[Stub Code]
  0x0000732d1c520d38: ;   {static_stub}
  0x0000732d1c520d38: 48bb 0000 | 0000 0000 

  0x0000732d1c520d40: ;   {runtime_call nmethod}
  0x0000732d1c520d40: 0000 e9fb 

  0x0000732d1c520d44: ;   {runtime_call ExceptionBlob}
  0x0000732d1c520d44: ffff ffe9 | 94f8 f6ff 
[Deopt Handler Code]
  0x0000732d1c520d4c: e800 0000 | 0048 832c 

  0x0000732d1c520d54: ;   {runtime_call DeoptimizationBlob}
  0x0000732d1c520d54: 2405 e925 | b2fd fff4 | f4f4 f4f4 
[/MachCode]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x0000732d1c520d60:   0x00000000c8e9a8e8 a 'java/lang/Class'{0x00000000c8e9a8e8} = 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
  0x0000732d1c520d68:   0x00000000c8e9a9b0 a 'java/lang/Class'{0x00000000c8e9a9b0} = 'jdk/internal/foreign/GlobalSession$HeapSession'
  0x0000732d1c520d70:   0x00000000c8e64330 a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
  0x0000732d1c520d78:   0x00000000c8f05120 a 'java/nio/ByteOrder'{0x00000000c8f05120}
  0x0000732d1c520d80:   0x00000000c8f2c1b8 a 'java/util/Optional'{0x00000000c8f2c1b8}
  0x0000732d1c520d88:   0x00000000c8ea95a0 a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
  0x0000732d1c520d90:   0x00000000c8e644c0 a 'java/lang/Class'{0x00000000c8e644c0} = 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
  0x0000732d1c520d98:   0x00000000c8e64380 a 'java/lang/Class'{0x00000000c8e64380} = 'jdk/incubator/vector/Byte256Vector'
  0x0000732d1c520da0:   0x00000000c8ecd658 a 'jdk/incubator/vector/IntVector$IntSpecies'{0x00000000c8ecd658}
  0x0000732d1c520da8:   0x00000000c8ecd6a8 a 'java/lang/Class'{0x00000000c8ecd6a8} = 'jdk/incubator/vector/Int256Vector'
  0x0000732d1c520db0:   0x00000000c8ea2000 a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'{0x00000000c8ea2000}
  0x0000732d1c520db8:   0x00000000ffe7bec0 a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
  0x0000732d1c520dc0:   0x00000000c8ea9810 "Source layout alignment greater than its size"{0x00000000c8ea9810}
  0x0000732d1c520dc8:   0x00000000c8ea9868 "Destination layout alignment greater than its size"{0x00000000c8ea9868}
  0x0000732d1c520dd0:   0x00000000c8f03408 a 'jdk/internal/misc/Unsafe'{0x00000000c8f03408}
  0x0000732d1c520dd8:   0x00000000c8f114a0 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000000c8f114a0}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x0000732ce49b1c60:   0x0000732cf84015e0 {method} {0x0000732cf84015e0} 'micro' '([I[I)V' in 'test_ms'
  0x0000732ce49b1c68:   0x0000732cf8103708 {method} {0x0000732cf8103708} 'intoMemorySegment' '(Ljava/lang/foreign/MemorySegment;JLjava/nio/ByteOrder;)V' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
  0x0000732ce49b1c70:   0x0000732cf8181a18 {method} {0x0000732cf8181a18} 'intoMemorySegment' '(Ljava/lang/foreign/MemorySegment;JLjava/nio/ByteOrder;)V' in 'jdk/incubator/vector/IntVector'
  0x0000732ce49b1c78:   0x0000732cf8182d60 {method} {0x0000732cf8182d60} 'intoMemorySegment0' '(Ljava/lang/foreign/MemorySegment;J)V' in 'jdk/incubator/vector/IntVector'
  0x0000732ce49b1c80:   0x000000004c24ab60 {method} {0x000000004c24ab60} 'storeIntoMemorySegment' '(Ljava/lang/Class;Ljava/lang/Class;ILjdk/internal/vm/vector/VectorSupport$Vector;Ljdk/internal/foreign/AbstractMemorySegmentImpl;JLjdk/internal/vm/vector/VectorSupport$StoreVectorOperation;)V' in 'jdk/internal/misc/ScopedMemoryAccess'
  0x0000732ce49b1c88:   0x000000004c244260 {method} {0x000000004c244260} 'storeIntoMemorySegmentScopedInternal' '(Ljdk/internal/foreign/MemorySessionImpl;Ljava/lang/Class;Ljava/lang/Class;ILjdk/internal/vm/vector/VectorSupport$Vector;Ljdk/internal/foreign/AbstractMemorySegmentImpl;JLjdk/internal/vm/vector/VectorSupport$StoreVectorOperation;)V' in 'jdk/internal/misc/ScopedMemoryAccess'
  0x0000732ce49b1c90:   0x0000732cf80da118 {method} {0x0000732cf80da118} 'fromMemorySegment' '(Ljdk/incubator/vector/VectorSpecies;Ljava/lang/foreign/MemorySegment;JLjava/nio/ByteOrder;)Ljdk/incubator/vector/VectorShuffle;' in 'jdk/incubator/vector/VectorShuffle'
  0x0000732ce49b1c98:   0x0000732cf814d370 {method} {0x0000732cf814d370} 'toArray' '(Ljava/lang/foreign/ValueLayout$OfInt;)[I' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b1ca0:   0x0000732cf814d768 {method} {0x0000732cf814d768} 'toArray' '(Ljava/lang/Class;Ljava/lang/foreign/ValueLayout;Ljava/util/function/IntFunction;Ljava/util/function/Function;)Ljava/lang/Object;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b1ca8:   0x0000732cf807ce98 {method} {0x0000732cf807ce98} 'copy' '(Ljava/lang/foreign/MemorySegment;Ljava/lang/foreign/ValueLayout;JLjava/lang/foreign/MemorySegment;Ljava/lang/foreign/ValueLayout;JJ)V' in 'java/lang/foreign/MemorySegment'
  0x0000732ce49b1cb0:   0x0000732cf814f3a0 {method} {0x0000732cf814f3a0} 'copy' '(Ljava/lang/foreign/MemorySegment;Ljava/lang/foreign/ValueLayout;JLjava/lang/foreign/MemorySegment;Ljava/lang/foreign/ValueLayout;JJ)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b1cb8:   0x000000004c2405f0 {method} {0x000000004c2405f0} 'copyMemory' '(Ljdk/internal/foreign/MemorySessionImpl;Ljdk/internal/foreign/MemorySessionImpl;Ljava/lang/Object;JLjava/lang/Object;JJ)V' in 'jdk/internal/misc/ScopedMemoryAccess'
  0x0000732ce49b1cc0:   0x000000004c243cb0 {method} {0x000000004c243cb0} 'copyMemoryInternal' '(Ljdk/internal/foreign/MemorySessionImpl;Ljdk/internal/foreign/MemorySessionImpl;Ljava/lang/Object;JLjava/lang/Object;JJ)V' in 'jdk/internal/misc/ScopedMemoryAccess'
  0x0000732ce49b1cc8:   0x000000004c237ca0 {method} {0x000000004c237ca0} 'copyMemory' '(Ljava/lang/Object;JLjava/lang/Object;JJ)V' in 'jdk/internal/misc/Unsafe'
  0x0000732ce49b1cd0:   0x000000004d003648 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
  0x0000732ce49b1cd8:   0x0000732cf8099e88 {method} {0x0000732cf8099e88} 'withOrder' '(Ljava/nio/ByteOrder;)Ljava/lang/foreign/ValueLayout$OfInt;' in 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
  0x0000732ce49b1ce0:   0x0000732cf8074990 {method} {0x0000732cf8074990} 'withOrder' '(Ljava/nio/ByteOrder;)Ljdk/internal/foreign/layout/ValueLayouts$AbstractValueLayout;' in 'jdk/internal/foreign/layout/ValueLayouts$AbstractValueLayout'
  0x0000732ce49b1ce8:   0x0000732cf8099b70 {method} {0x0000732cf8099b70} 'dup' '(Ljava/nio/ByteOrder;JLjava/util/Optional;)Ljdk/internal/foreign/layout/ValueLayouts$AbstractValueLayout;' in 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
  0x0000732ce49b1cf0:   0x0000732cf8099a28 {method} {0x0000732cf8099a28} 'dup' '(Ljava/nio/ByteOrder;JLjava/util/Optional;)Ljdk/internal/foreign/layout/ValueLayouts$OfIntImpl;' in 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
  0x0000732ce49b1cf8:   0x0000732cf8099938 {method} {0x0000732cf8099938} '<init>' '(Ljava/nio/ByteOrder;JLjava/util/Optional;)V' in 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
  0x0000732ce49b1d00:   0x000000004c1cece8 {method} {0x000000004c1cece8} 'getSimpleName' '()Ljava/lang/String;' in 'java/lang/Class'
  0x0000732ce49b1d08:   0x000000004c1ce4d8 {method} {0x000000004c1ce4d8} 'reflectionData' '()Ljava/lang/Class$ReflectionData;' in 'java/lang/Class'
  0x0000732ce49b1d10:   0x000000004c1f36b0 {method} {0x000000004c1f36b0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference'
  0x0000732ce49b1d18:   0x000000004c1f27c0 {method} {0x000000004c1f27c0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/Reference'
  0x0000732ce49b1d20:   0x000000004c2a9218 'java/lang/Class$ReflectionData'
  0x0000732ce49b1d28:   0x0000732cf814e028 {method} {0x0000732cf814e028} 'checkArraySize' '(Ljava/lang/String;I)I' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b1d30:   0x0000732cf8168ca8 {method} {0x0000732cf8168ca8} 'apply' '(I)Ljava/lang/Object;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'
  0x0000732ce49b1d38:   0x0000732cf8152950 {method} {0x0000732cf8152950} 'lambda$toArray$3' '(I)[I' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b1d40:   0x000000004c1b87f0 {type array int}
  0x0000732ce49b1d48:   0x0000732cf809a428 {method} {0x0000732cf809a428} 'withOrder' '(Ljava/nio/ByteOrder;)Ljava/lang/foreign/ValueLayout;' in 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
  0x0000732ce49b1d50:   0x0000732cf80768c8 {method} {0x0000732cf80768c8} 'byteAlignment' '()J' in 'jdk/internal/foreign/layout/AbstractLayout'
  0x0000732ce49b1d58:   0x0000732cf81692f8 {method} {0x0000732cf81692f8} 'apply' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'
  0x0000732ce49b1d60:   0x0000732cf807c940 {method} {0x0000732cf807c940} 'ofArray' '([I)Ljava/lang/foreign/MemorySegment;' in 'java/lang/foreign/MemorySegment'
  0x0000732ce49b1d68:   0x0000732cf8143360 {method} {0x0000732cf8143360} 'fromArray' '([I)Ljdk/internal/foreign/HeapMemorySegmentImpl$OfInt;' in 'jdk/internal/foreign/SegmentFactories'
  0x0000732ce49b1d70:   0x0000732cf8076988 {method} {0x0000732cf8076988} 'byteSize' '()J' in 'jdk/internal/foreign/layout/AbstractLayout'
  0x0000732ce49b1d78:   0x0000732cf80817e8 {method} {0x0000732cf80817e8} 'checkElementAlignment' '(Ljava/lang/foreign/ValueLayout;Ljava/lang/String;)V' in 'jdk/internal/foreign/Utils'
  0x0000732ce49b1d80:   0x0000732cf80816e0 {method} {0x0000732cf80816e0} 'isElementAligned' '(Ljava/lang/foreign/ValueLayout;)Z' in 'jdk/internal/foreign/Utils'
  0x0000732ce49b1d88:   0x0000732cf80748b0 {method} {0x0000732cf80748b0} 'order' '()Ljava/nio/ByteOrder;' in 'jdk/internal/foreign/layout/ValueLayouts$AbstractValueLayout'
  0x0000732ce49b1d90:   0x000000004c1b83d0 {type array byte}
  0x0000732ce49b1d98:   0x0000732cf80b52f0 {method} {0x0000732cf80b52f0} 'shuffleFromArray' '([II)Ljdk/incubator/vector/VectorShuffle;' in 'jdk/incubator/vector/AbstractSpecies'
  0x0000732ce49b1da0:   0x0000732cf80fb728 {method} {0x0000732cf80fb728} 'shuffleFromArray' '([II)Ljdk/incubator/vector/AbstractShuffle;' in 'jdk/incubator/vector/Byte256Vector'
  0x0000732ce49b1da8:   0x0000732cf80f4e50 {method} {0x0000732cf80f4e50} 'shuffleFromArray' '([II)Ljdk/incubator/vector/Byte256Vector$Byte256Shuffle;' in 'jdk/incubator/vector/Byte256Vector'
  0x0000732ce49b1db0:   0x0000732cf8102e10 {method} {0x0000732cf8102e10} '<init>' '([II)V' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
  0x0000732ce49b1db8:   0x0000732cf8103b88 {method} {0x0000732cf8103b88} 'prepare' '([II)[B' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
  0x0000732ce49b1dc0:   0x0000732cf8102d18 {method} {0x0000732cf8102d18} '<init>' '([B)V' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
  0x0000732ce49b1dc8:   0x0000732cf80d7af0 {method} {0x0000732cf80d7af0} '<init>' '(Ljava/lang/Object;)V' in 'jdk/incubator/vector/AbstractShuffle'
  0x0000732ce49b1dd0:   0x0000732cf80d9760 {method} {0x0000732cf80d9760} '<init>' '(Ljava/lang/Object;)V' in 'jdk/incubator/vector/VectorShuffle'
  0x0000732ce49b1dd8:   0x000000004c1f1978 {method} {0x000000004c1f1978} '<init>' '(Ljava/lang/Object;)V' in 'jdk/internal/vm/vector/VectorSupport$VectorShuffle'
  0x0000732ce49b1de0:   0x0000732cf80f5a20 {method} {0x0000732cf80f5a20} 'convertShape' '(Ljdk/incubator/vector/VectorOperators$Conversion;Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/Byte256Vector'
  0x0000732ce49b1de8:   0x0000732cf805f3a0 {method} {0x0000732cf805f3a0} 'convertShapeTemplate' '(Ljdk/incubator/vector/VectorOperators$Conversion;Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractVector'
  0x0000732ce49b1df0:   0x0000732cf8060900 {method} {0x0000732cf8060900} 'convert0' '(CLjdk/incubator/vector/AbstractSpecies;)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractVector'
  0x0000732ce49b1df8:   0x0000732cf80d8630 {method} {0x0000732cf80d8630} 'partiallyWrapIndex' '(II)I' in 'jdk/incubator/vector/AbstractShuffle'
  0x0000732ce49b1e00:   0x0000732cf80d8750 {method} {0x0000732cf80d8750} 'checkIndex0' '(IIB)I' in 'jdk/incubator/vector/AbstractShuffle'
  0x0000732ce49b1e08:   0x0000732cf81523e8 {method} {0x0000732cf81523e8} 'asSlice' '(JJ)Ljava/lang/foreign/MemorySegment;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b1e10:   0x0000732cf814b728 {method} {0x0000732cf814b728} 'asSlice' '(JJ)Ljdk/internal/foreign/AbstractMemorySegmentImpl;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b1e18:   0x0000732cf814e150 {method} {0x0000732cf814e150} 'checkBounds' '(JJ)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b1e20:   0x0000732cf814d968 {method} {0x0000732cf814d968} 'checkAccess' '(JJZ)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b1e28:   0x0000732cf816d150 {method} {0x0000732cf816d150} 'checkFromIndexSize' '(JJJ)J' in 'jdk/incubator/vector/VectorIntrinsics'
  0x0000732ce49b1e30:   0x000000004c27f578 {method} {0x000000004c27f578} 'checkIndex' '(JJ)J' in 'java/util/Objects'
  0x0000732ce49b1e38:   0x0000732cf80815c8 {method} {0x0000732cf80815c8} 'isAligned' '(JJ)Z' in 'jdk/internal/foreign/Utils'
  0x0000732ce49b1e40:   0x0000732cf814ddb0 {method} {0x0000732cf814ddb0} 'isAlignedForElement' '(JLjava/lang/foreign/MemoryLayout;)Z' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b1e48:   0x0000732cf814deb8 {method} {0x0000732cf814deb8} 'isAlignedForElement' '(JJ)Z' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b1e50:   0x000000004c237bc0 {method} {0x000000004c237bc0} 'copyMemoryChecks' '(Ljava/lang/Object;JLjava/lang/Object;JJ)V' in 'jdk/internal/misc/Unsafe'
  0x0000732ce49b1e58:   0x000000004c237830 {method} {0x000000004c237830} 'checkSize' '(J)V' in 'jdk/internal/misc/Unsafe'
  0x0000732ce49b1e60:   0x000000004c27f818 {method} {0x000000004c27f818} 'requireNonNull' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/util/Objects'
  0x0000732ce49b1e68:   0x000000004c3612f8 {method} {0x000000004c3612f8} 'nativeOrder' '()Ljava/nio/ByteOrder;' in 'java/nio/ByteOrder'
  0x0000732ce49b1e70:   0x0000732cf81445c0 {method} {0x0000732cf81445c0} 'ensureInitialized' '()V' in 'jdk/internal/foreign/SegmentFactories'
  0x0000732ce49b1e78:   0x0000732cf8163d80 {method} {0x0000732cf8163d80} 'scale' '()J' in 'jdk/internal/foreign/Utils$BaseAndScale'
  0x0000732ce49b1e80:   0x0000732cf8163cc0 {method} {0x0000732cf8163cc0} 'base' '()J' in 'jdk/internal/foreign/Utils$BaseAndScale'
  0x0000732ce49b1e88:   0x0000732cf815a088 {method} {0x0000732cf815a088} 'createHeap' '(Ljava/lang/Object;)Ljdk/internal/foreign/MemorySessionImpl;' in 'jdk/internal/foreign/MemorySessionImpl'
  0x0000732ce49b1e90:   0x0000732cf8164958 {method} {0x0000732cf8164958} '<init>' '(JLjava/lang/Object;JZLjdk/internal/foreign/MemorySessionImpl;)V' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
  0x0000732ce49b1e98:   0x0000732cf8167e20 {method} {0x0000732cf8167e20} '<init>' '(Ljava/lang/Object;)V' in 'jdk/internal/foreign/GlobalSession$HeapSession'
  0x0000732ce49b1ea0:   0x0000732cf8162930 {method} {0x0000732cf8162930} '<init>' '()V' in 'jdk/internal/foreign/GlobalSession'
  0x0000732ce49b1ea8:   0x0000732cf8159d78 {method} {0x0000732cf8159d78} '<init>' '(Ljava/lang/Thread;Ljdk/internal/foreign/MemorySessionImpl$ResourceList;)V' in 'jdk/internal/foreign/MemorySessionImpl'
  0x0000732ce49b1eb0:   0x000000004c575f88 {method} {0x000000004c575f88} '<init>' '()V' in 'java/lang/Object'
  0x0000732ce49b1eb8:   0x0000732cf8165aa0 {method} {0x0000732cf8165aa0} '<init>' '(JLjava/lang/Object;JZLjdk/internal/foreign/MemorySessionImpl;)V' in 'jdk/internal/foreign/HeapMemorySegmentImpl'
  0x0000732ce49b1ec0:   0x0000732cf814b350 {method} {0x0000732cf814b350} '<init>' '(JZLjdk/internal/foreign/MemorySessionImpl;)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b1ec8:   0x0000732cf80b3648 {method} {0x0000732cf80b3648} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  0x0000732ce49b1ed0:   0x0000732cf814c078 {method} {0x0000732cf814c078} 'asSliceNoCheck' '(JJ)Ljdk/internal/foreign/AbstractMemorySegmentImpl;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b1ed8:   0x0000732cf81650a0 {method} {0x0000732cf81650a0} 'dup' '(JJZLjdk/internal/foreign/MemorySessionImpl;)Ljdk/internal/foreign/AbstractMemorySegmentImpl;' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
  0x0000732ce49b1ee0:   0x0000732cf8164a60 {method} {0x0000732cf8164a60} 'dup' '(JJZLjdk/internal/foreign/MemorySessionImpl;)Ljdk/internal/foreign/HeapMemorySegmentImpl$OfInt;' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
  0x0000732ce49b1ee8:   0x0000732cf8076730 {method} {0x0000732cf8076730} 'name' '()Ljava/util/Optional;' in 'jdk/internal/foreign/layout/AbstractLayout'
  0x0000732ce49b1ef0:   0x000000004c26b840 {method} {0x000000004c26b840} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder'
  0x0000732ce49b1ef8:   0x000000004c272ed0 {method} {0x000000004c272ed0} 'constant_L' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$Holder'
  0x0000732ce49b1f00:   0x0000732cf8081ed0 {method} {0x0000732cf8081ed0} 'checkNonNegativeIndex' '(JLjava/lang/String;)V' in 'jdk/internal/foreign/Utils'
  0x0000732ce49b1f08:   0x000000004c243bc0 {method} {0x000000004c243bc0} 'getScopedMemoryAccess' '()Ljdk/internal/misc/ScopedMemoryAccess;' in 'jdk/internal/misc/ScopedMemoryAccess'
  0x0000732ce49b1f10:   0x0000732cf814e4e8 {method} {0x0000732cf814e4e8} 'sessionImpl' '()Ljdk/internal/foreign/MemorySessionImpl;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b1f18:   0x0000732cf8164e48 {method} {0x0000732cf8164e48} 'unsafeGetOffset' '()J' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
  0x0000732ce49b1f20:   0x0000732cf8165b70 {method} {0x0000732cf8165b70} 'unsafeGetOffset' '()J' in 'jdk/internal/foreign/HeapMemorySegmentImpl'
  0x0000732ce49b1f28:   0x0000732cf8164be8 {method} {0x0000732cf8164be8} 'maxAlignMask' '()J' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
  0x0000732ce49b1f30:   0x0000732cf814d850 {method} {0x0000732cf814d850} 'checkReadOnly' '(Z)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b1f38:   0x0000732cf8164fc8 {method} {0x0000732cf8164fc8} 'unsafeGetBase' '()Ljava/lang/Object;' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
  0x0000732ce49b1f40:   0x0000732cf8164b28 {method} {0x0000732cf8164b28} 'unsafeGetBase' '()[I' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
  0x0000732ce49b1f48:   0x000000004c1f33d0 {method} {0x000000004c1f33d0} 'reachabilityFence' '(Ljava/lang/Object;)V' in 'java/lang/ref/Reference'
  0x0000732ce49b1f50:   0x0000732cf815a658 {method} {0x0000732cf815a658} 'checkValidStateRaw' '()V' in 'jdk/internal/foreign/MemorySessionImpl'
  0x0000732ce49b1f58:   0x000000004c237b50 {method} {0x000000004c237b50} 'checkPrimitivePointer' '(Ljava/lang/Object;J)V' in 'jdk/internal/misc/Unsafe'
  0x0000732ce49b1f60:   0x000000004c2375f0 {method} {0x000000004c2375f0} 'checkPointer' '(Ljava/lang/Object;J)V' in 'jdk/internal/misc/Unsafe'
  0x0000732ce49b1f68:   0x000000004c237660 {method} {0x000000004c237660} 'checkPrimitiveArray' '(Ljava/lang/Class;)V' in 'jdk/internal/misc/Unsafe'
  0x0000732ce49b1f70:   0x000000004c236b50 {method} {0x000000004c236b50} 'checkOffset' '(Ljava/lang/Object;J)V' in 'jdk/internal/misc/Unsafe'
  0x0000732ce49b1f78:   0x000000004c1cdce8 {method} {0x000000004c1cdce8} 'getComponentType' '()Ljava/lang/Class;' in 'java/lang/Class'
  0x0000732ce49b1f80:   0x000000004c1cdc08 {method} {0x000000004c1cdc08} 'isPrimitive' '()Z' in 'java/lang/Class'
  0x0000732ce49b1f88:   0x0000732cf80b5008 {method} {0x0000732cf80b5008} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies'
  0x0000732ce49b1f90:   0x0000732cf80aee70 {method} {0x0000732cf80aee70} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/ByteVector$ByteSpecies'
  0x0000732ce49b1f98:   0x0000732cf80ad9f8 {method} {0x0000732cf80ad9f8} 'dummyVector' '()Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector$ByteSpecies'
  0x0000732ce49b1fa0:   0x0000732cf816d880 {method} {0x0000732cf816d880} 'wrapToRange' '(II)I' in 'jdk/incubator/vector/VectorIntrinsics'
  0x0000732ce49b1fa8:   0x000000004c1f1068 {method} {0x000000004c1f1068} '<init>' '(Ljava/lang/Object;)V' in 'jdk/internal/vm/vector/VectorSupport$VectorPayload'
  0x0000732ce49b1fb0:   0x0000732cf8103230 {method} {0x0000732cf8103230} 'toBitsVector' '()Ljdk/incubator/vector/Byte256Vector;' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
  0x0000732ce49b1fb8:   0x0000732cf80d7e58 {method} {0x0000732cf80d7e58} 'toBitsVectorTemplate' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractShuffle'
  0x0000732ce49b1fc0:   0x0000732cf80b4820 {method} {0x0000732cf80b4820} 'asIntegral' '()Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/AbstractSpecies'
  0x0000732ce49b1fc8:   0x0000732cf80d98f0 {method} {0x0000732cf80d98f0} 'length' '()I' in 'jdk/incubator/vector/VectorShuffle'
  0x0000732ce49b1fd0:   0x0000732cf8104088 {method} {0x0000732cf8104088} 'vspecies' '()Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
  0x0000732ce49b1fd8:   0x0000732cf8103078 {method} {0x0000732cf8103078} 'vspecies' '()Ljdk/incubator/vector/ByteVector$ByteSpecies;' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
  0x0000732ce49b1fe0:   0x0000732cf80bc808 {method} {0x0000732cf80bc808} 'asIntegral' '()Ljdk/incubator/vector/LaneType;' in 'jdk/incubator/vector/LaneType'
  0x0000732ce49b1fe8:   0x0000732cf80b4728 {method} {0x0000732cf80b4728} 'withLanes' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/AbstractSpecies'
  0x0000732ce49b1ff0:   0x0000732cf80bd120 {method} {0x0000732cf80bd120} 'check' '()Ljdk/incubator/vector/LaneType;' in 'jdk/incubator/vector/LaneType'
  0x0000732ce49b1ff8:   0x0000732cf80acde0 {method} {0x0000732cf80acde0} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/ByteVector$ByteSpecies'
  0x0000732ce49b2000:   0x0000732cf80b3720 {method} {0x0000732cf80b3720} 'laneCount' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  0x0000732ce49b2008:   0x0000732cf80d7c70 {method} {0x0000732cf80d7c70} 'vectorSpecies' '()Ljdk/incubator/vector/VectorSpecies;' in 'jdk/incubator/vector/AbstractShuffle'
  0x0000732ce49b2010:   0x0000732cf8204880 {method} {0x0000732cf8204880} 'kind' '()C' in 'jdk/incubator/vector/VectorOperators$ConversionImpl'
  0x0000732ce49b2018:   0x0000732cf8204940 {method} {0x0000732cf8204940} 'domain' '()Ljdk/incubator/vector/LaneType;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl'
  0x0000732ce49b2020:   0x0000732cf80b6448 {method} {0x0000732cf80b6448} 'check' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/AbstractSpecies'
  0x0000732ce49b2028:   0x0000732cf8204a00 {method} {0x0000732cf8204a00} 'range' '()Ljdk/incubator/vector/LaneType;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl'
  0x0000732ce49b2030:   0x0000732cf805f5c8 {method} {0x0000732cf805f5c8} 'shapeChangeOrigin' '(Ljdk/incubator/vector/AbstractSpecies;Ljdk/incubator/vector/AbstractSpecies;ZI)I' in 'jdk/incubator/vector/AbstractVector'
  0x0000732ce49b2038:   0x0000732cf80fbb78 {method} {0x0000732cf80fbb78} 'vspecies' '()Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/Byte256Vector'
  0x0000732ce49b2040:   0x0000732cf80f42c8 {method} {0x0000732cf80f42c8} 'vspecies' '()Ljdk/incubator/vector/ByteVector$ByteSpecies;' in 'jdk/incubator/vector/Byte256Vector'
  0x0000732ce49b2048:   0x0000732cf81946b8 {method} {0x0000732cf81946b8} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/IntVector$IntSpecies'
  0x0000732ce49b2050:   0x0000732cf80f43a0 {method} {0x0000732cf80f43a0} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/Byte256Vector'
  0x0000732ce49b2058:   0x0000732cf80f4628 {method} {0x0000732cf80f4628} 'length' '()I' in 'jdk/incubator/vector/Byte256Vector'
  0x0000732ce49b2060:   0x0000732cf8196748 {method} {0x0000732cf8196748} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
  0x0000732ce49b2068:   0x0000732cf81952d0 {method} {0x0000732cf81952d0} 'dummyVector' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
  0x0000732ce49b2070:   0x0000732cf8183fb0 {method} {0x0000732cf8183fb0} 'reinterpretAsInts' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x0000732ce49b2078:   0x0000732cf805e890 {method} {0x0000732cf805e890} 'reinterpretAsInts' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/AbstractVector'
  0x0000732ce49b2080:   0x0000732cf81c15d8 {method} {0x0000732cf81c15d8} 'asVectorRaw' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/Int256Vector'
  0x0000732ce49b2088:   0x0000732cf805db58 {method} {0x0000732cf805db58} 'asVectorRawTemplate' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractVector'
  0x0000732ce49b2090:   0x0000732cf81c7af0 {method} {0x0000732cf81c7af0} 'vspecies' '()Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/Int256Vector'
  0x0000732ce49b2098:   0x0000732cf81c06b8 {method} {0x0000732cf81c06b8} 'vspecies' '()Ljdk/incubator/vector/IntVector$IntSpecies;' in 'jdk/incubator/vector/Int256Vector'
  0x0000732ce49b20a0:   0x0000732cf81c0790 {method} {0x0000732cf81c0790} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/Int256Vector'
  0x0000732ce49b20a8:   0x0000732cf81c0a18 {method} {0x0000732cf81c0a18} 'length' '()I' in 'jdk/incubator/vector/Int256Vector'
  0x0000732ce49b20b0:   0x0000732cf81831d0 {method} {0x0000732cf81831d0} 'maybeSwap' '(Ljava/nio/ByteOrder;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  0x0000732ce49b20b8:   0x0000732cf814b640 {method} {0x0000732cf814b640} 'isReadOnly' '()Z' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b20c0:   0x0000732cf81c0bd0 {method} {0x0000732cf81c0bd0} 'byteSize' '()I' in 'jdk/incubator/vector/Int256Vector'
  0x0000732ce49b20c8:   0x0000732cf814c620 {method} {0x0000732cf814c620} 'byteSize' '()J' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b20d0:   0x0000732cf8194870 {method} {0x0000732cf8194870} 'vectorType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/IntVector$IntSpecies'
  0x0000732ce49b20d8:   0x0000732cf805f778 {method} {0x0000732cf805f778} 'partInRange' '(III)Z' in 'jdk/incubator/vector/AbstractVector'
  0x0000732ce49b20e0:   0x0000732cf80fb390 {method} {0x0000732cf80fb390} 'slice' '(I)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/Byte256Vector'
  0x0000732ce49b20e8:   0x0000732cf80f7288 {method} {0x0000732cf80f7288} 'slice' '(I)Ljdk/incubator/vector/Byte256Vector;' in 'jdk/incubator/vector/Byte256Vector'
  0x0000732ce49b20f0:   0x0000732cf8049420 {method} {0x0000732cf8049420} 'sliceTemplate' '(I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
  0x0000732ce49b20f8:   0x000000004c27f508 {method} {0x000000004c27f508} 'checkIndex' '(II)I' in 'java/util/Objects'
  0x0000732ce49b2100:   0x0000732cf80ae780 {method} {0x0000732cf80ae780} 'zero' '()Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector$ByteSpecies'
  0x0000732ce49b2108:   0x0000732cf80acf98 {method} {0x0000732cf80acf98} 'vectorType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/ByteVector$ByteSpecies'
  0x0000732ce49b2110:   0x0000732cf80b40a8 {method} {0x0000732cf80b40a8} 'vectorBitSize' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  0x0000732ce49b2118:   0x0000732cf80b4180 {method} {0x0000732cf80b4180} 'vectorByteSize' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  0x0000732ce49b2120:   0x0000732cf815b198 'jdk/internal/foreign/MemorySessionImpl'
  0x0000732ce49b2128:   0x000000004d00e500 'jdk/internal/foreign/GlobalSession'
  0x0000732ce49b2130:   0x000000004c1f3448 'java/lang/ref/SoftReference'
  0x0000732ce49b2138:   0x000000004d008f60 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
  0x0000732ce49b2140:   0x0000732cf80db1b8 'jdk/incubator/vector/VectorShuffle'
  0x0000732ce49b2148:   0x0000732cf80d9810 {method} {0x0000732cf80d9810} 'vectorSpecies' '()Ljdk/incubator/vector/VectorSpecies;' in 'jdk/incubator/vector/VectorShuffle'
  0x0000732ce49b2150:   0x000000004d00e9d8 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
  0x0000732ce49b2158:   0x0000732cf807ecf0 'java/lang/foreign/MemorySegment'
  0x0000732ce49b2160:   0x0000732cf807b158 {method} {0x0000732cf807b158} 'asSlice' '(JJ)Ljava/lang/foreign/MemorySegment;' in 'java/lang/foreign/MemorySegment'
  0x0000732ce49b2168:   0x0000732cf8152e58 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  0x0000732ce49b2170:   0x0000732cf807c0e8 {method} {0x0000732cf807c0e8} 'toArray' '(Ljava/lang/foreign/ValueLayout$OfInt;)[I' in 'java/lang/foreign/MemorySegment'
  0x0000732ce49b2178:   0x0000732cf807b660 {method} {0x0000732cf807b660} 'isReadOnly' '()Z' in 'java/lang/foreign/MemorySegment'
  0x0000732ce49b2180:   0x0000732cf807b008 {method} {0x0000732cf807b008} 'byteSize' '()J' in 'java/lang/foreign/MemorySegment'
  0x0000732ce49b2188:   0x000000004d004dd8 'jdk/incubator/vector/ByteVector$ByteSpecies'
  0x0000732ce49b2190:   0x0000732cf80b2d30 'jdk/incubator/vector/VectorSpecies'
  0x0000732ce49b2198:   0x0000732cf80b18c8 {method} {0x0000732cf80b18c8} 'length' '()I' in 'jdk/incubator/vector/VectorSpecies'
  0x0000732ce49b21a0:   0x0000732cf80b2950 {method} {0x0000732cf80b2950} 'shuffleFromArray' '([II)Ljdk/incubator/vector/VectorShuffle;' in 'jdk/incubator/vector/VectorSpecies'
  0x0000732ce49b21a8:   0x0000732cf80b7608 'jdk/incubator/vector/AbstractSpecies'
  0x0000732ce49b21b0:   0x0000732cf806e5a8 'java/lang/foreign/ValueLayout'
  0x0000732ce49b21b8:   0x0000732cf806ec58 {method} {0x0000732cf806ec58} 'byteAlignment' '()J' in 'java/lang/foreign/ValueLayout'
  0x0000732ce49b21c0:   0x0000732cf806d960 'java/lang/foreign/MemoryLayout'
  0x0000732ce49b21c8:   0x0000732cf806cb80 {method} {0x0000732cf806cb80} 'byteAlignment' '()J' in 'java/lang/foreign/MemoryLayout'
  0x0000732ce49b21d0:   0x0000732cf806eae8 {method} {0x0000732cf806eae8} 'byteSize' '()J' in 'java/lang/foreign/ValueLayout'
  0x0000732ce49b21d8:   0x0000732cf806dc10 {method} {0x0000732cf806dc10} 'order' '()Ljava/nio/ByteOrder;' in 'java/lang/foreign/ValueLayout'
  0x0000732ce49b21e0:   0x000000004d012060 'jdk/incubator/vector/Int256Vector'
  0x0000732ce49b21e8:   0x0000732cf8065108 'jdk/incubator/vector/Vector'
  0x0000732ce49b21f0:   0x0000732cf8064378 {method} {0x0000732cf8064378} 'reinterpretAsInts' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Vector'
  0x0000732ce49b21f8:   0x000000004d00fe48 'jdk/incubator/vector/IntVector$IntSpecies'
  0x0000732ce49b2200:   0x0000732cf80b1a18 {method} {0x0000732cf80b1a18} 'vectorByteSize' '()I' in 'jdk/incubator/vector/VectorSpecies'
  0x0000732ce49b2208:   0x000000004d016490 'jdk/incubator/vector/VectorOperators$ConversionImpl'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x0000732d1c51fc7f offset=ffffffff bits=0):
PcDesc(pc=0x0000732d1c51fc9e offset=1e bits=0):
   test_ms::micro@-1 (line 13)
PcDesc(pc=0x0000732d1c51fcc5 offset=45 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c51fcef offset=6f bits=0):
   jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
   jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
   jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51fd25 offset=a5 bits=0):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@29 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51fd5b offset=db bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c51fd64 offset=e4 bits=0):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::<init>@11 (line 238)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@8 (line 243)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[0],oop
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
   Locals
    - l0: empty
    - l1: empty
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@29 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   Expression stack
    - @0: obj[220]
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[219]
    - l4: empty
   Objects
    - 0: R obj[219], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[222], 0, 16, stack[24],oop
    - 1: R obj[222], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[220], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[221], 0, 16, reg rbp [10],oop
    - 3: R obj[221], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, reg rbp [10],oop
PcDesc(pc=0x0000732d1c51fd76 offset=f6 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c51fd7a offset=fa bits=0):
   java.lang.Class::reflectionData@1 (line 2832)
   java.lang.Class::getSimpleName@1 (line 1669)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51fd7e offset=fe bits=0):
   java.lang.Class::reflectionData@6 (line 2833)
   java.lang.Class::getSimpleName@1 (line 1669)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51fd87 offset=107 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c51fdba offset=13a bits=0):
   java.lang.ref.Reference::get@1 (line 343)
   java.lang.ref.SoftReference::get@1 (line 113)
   java.lang.Class::reflectionData@15 (line 2836)
   java.lang.Class::getSimpleName@1 (line 1669)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51fdbe offset=13e bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c51fdc2 offset=142 bits=0):
   java.lang.ref.SoftReference::get@10 (line 114)
   java.lang.Class::reflectionData@15 (line 2836)
   java.lang.Class::getSimpleName@1 (line 1669)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51fdcc offset=14c bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c51fdd0 offset=150 bits=0):
   java.lang.ref.SoftReference::get@13 (line 114)
   java.lang.Class::reflectionData@15 (line 2836)
   java.lang.Class::getSimpleName@1 (line 1669)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51fde0 offset=160 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c51fde6 offset=166 bits=0):
   java.lang.Class::reflectionData@18 (line 2836)
   java.lang.Class::getSimpleName@1 (line 1669)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51fdea offset=16a bits=0):
   java.lang.Class::reflectionData@27 (line 2836)
   java.lang.Class::getSimpleName@1 (line 1669)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51fdf3 offset=173 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c51fdf7 offset=177 bits=0):
   java.lang.Class::getSimpleName@6 (line 1670)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51fe08 offset=188 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c51fe0b offset=18b bits=0):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@11 (line 340)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51fe0e offset=18e bits=0):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkArraySize@5 (line 390)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@12 (line 340)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51fe48 offset=1c8 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c51fe4b offset=1cb bits=0):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkArraySize@96 (line 397)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@12 (line 340)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51fe58 offset=1d8 bits=0):
   jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
   jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
   jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51fe65 offset=1e5 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c51fe6d offset=1ed bits=0):
   jdk.internal.foreign.AbstractMemorySegmentImpl::lambda$toArray$3@1 (line 321)
   jdk.internal.foreign.AbstractMemorySegmentImpl$$Lambda/0x000000004d00f540::apply@1
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@20 (line 341)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51fe87 offset=207 bits=0):
   jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
   jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
   jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51ff29 offset=2a9 bits=0):
   jdk.internal.foreign.AbstractMemorySegmentImpl::lambda$toArray$3@1 (line 321)
   jdk.internal.foreign.AbstractMemorySegmentImpl$$Lambda/0x000000004d00f540::apply@1
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@20 (line 341)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51ff2d offset=2ad bits=0):
   jdk.internal.foreign.layout.AbstractLayout::byteAlignment@1 (line 80)
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@8 (line 95)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51ff31 offset=2b1 bits=0):
   jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
   jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
   jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51ff38 offset=2b8 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c51ff3b offset=2bb bits=0):
   jdk.internal.foreign.SegmentFactories::fromArray@10 (line 105)
   java.lang.foreign.MemorySegment::ofArray@1 (line 1476)
   jdk.internal.foreign.AbstractMemorySegmentImpl$$Lambda/0x000000004d00f778::apply@4
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@31 (line 342)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51ff57 offset=2d7 bits=0):
   jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
   jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
   jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51ffa4 offset=324 bits=0):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51ffa9 offset=329 bits=0):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::<init>@-1 (line 238)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@8 (line 243)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c51fff7 offset=377 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520000 offset=380 bits=0):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::<init>@11 (line 238)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@8 (line 243)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[64],oop
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
   Locals
    - l0: empty
    - l1: empty
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
   Locals
    - l0: empty
    - l1: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: stack[8]
    - l6: stack[16],oop
    - l7: empty
   Expression stack
    - @0: obj[743]
    - @1: stack[0],oop
    - @2: 0
    - @3: 0
    - @4: obj[744]
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[742]
    - l4: empty
   Objects
    - 0: R obj[742], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[746], 0, 16, stack[24],oop
    - 1: R obj[746], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[743], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[745], 0, 16, reg rbp [10],oop
    - 3: R obj[745], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, reg rbp [10],oop
    - 4: R obj[744], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[747], 0, 16, stack[16],oop
    - 5: R obj[747], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
PcDesc(pc=0x0000732d1c52000c offset=38c bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520010 offset=390 bits=0):
   jdk.internal.foreign.layout.AbstractLayout::byteSize@1 (line 84)
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@22 (line 611)
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c520015 offset=395 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520019 offset=399 bits=0):
   jdk.internal.foreign.layout.AbstractLayout::byteSize@1 (line 84)
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@29 (line 611)
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c520022 offset=3a2 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520026 offset=3a6 bits=0):
   jdk.internal.foreign.layout.AbstractLayout::byteAlignment@1 (line 80)
   jdk.internal.foreign.Utils::isElementAligned@27 (line 209)
   jdk.internal.foreign.Utils::checkElementAlignment@1 (line 214)
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@53 (line 614)
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c52002f offset=3af bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520033 offset=3b3 bits=0):
   jdk.internal.foreign.layout.AbstractLayout::byteAlignment@1 (line 80)
   jdk.internal.foreign.Utils::isElementAligned@27 (line 209)
   jdk.internal.foreign.Utils::checkElementAlignment@1 (line 214)
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@61 (line 615)
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c5200cb offset=44b bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5200cf offset=44f bits=0):
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::order@1 (line 83)
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@157 (line 625)
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c5200d3 offset=453 bits=0):
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::order@1 (line 83)
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@150 (line 625)
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c520103 offset=483 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c52013d offset=4bd bits=0):
   jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
   jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
   jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c52018b offset=50b bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@3 (line 980)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c5201a0 offset=520 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5201a4 offset=524 bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c5201c5 offset=545 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5201c9 offset=549 bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c5201e3 offset=563 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5201e6 offset=566 bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c5201eb offset=56b bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5201f0 offset=570 bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c5201ff offset=57f bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520204 offset=584 bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c520209 offset=589 bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c520218 offset=598 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c52021d offset=59d bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c520222 offset=5a2 bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c520231 offset=5b1 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520236 offset=5b6 bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c52023b offset=5bb bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c52024a offset=5ca bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c52024f offset=5cf bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c52026f offset=5ef bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@15 (line 982)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c520272 offset=5f2 bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c520277 offset=5f7 bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c520286 offset=606 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c52028b offset=60b bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c520294 offset=614 bits=0):
   jdk.internal.vm.vector.VectorSupport$VectorShuffle::<init>@2 (line 185)
   jdk.incubator.vector.VectorShuffle::<init>@2 (line 141)
   jdk.incubator.vector.AbstractShuffle::<init>@2 (line 38)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@2 (line 859)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@6 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c5202be offset=63e bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5202c3 offset=643 bits=0):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 410)
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@19 (line 937)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5202c9 offset=649 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@29 (line 939)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5202f3 offset=673 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5202f8 offset=678 bits=0):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@40 (line 940)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520318 offset=698 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c52031d offset=69d bits=0):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@70 (line 943)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c52033d offset=6bd bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520342 offset=6c2 bits=0):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@102 (line 946)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520372 offset=6f2 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c52037c offset=6fc bits=4):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
   Locals
    - l0: empty
    - l1: a 'java/nio/ByteOrder'{0x00000000c8f05120}
    - l2: 0
    - l3: 1
    - l4: a 'java/util/Optional'{0x00000000c8f2c1b8}
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
   Locals
    - l0: empty
    - l1: empty
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@29 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   Expression stack
    - @0: obj[190]
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[189]
    - l4: empty
   Objects
    - 0: R obj[189], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, reg rbp [10],long, 0, obj[192], 0, 16, stack[8],oop
    - 1: R obj[192], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[8],oop
    - 2: R obj[190], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[191], 0, 16, stack[32],oop
    - 3: R obj[191], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
PcDesc(pc=0x0000732d1c5203b8 offset=738 bits=4):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
   Locals
    - l0: empty
    - l1: a 'java/nio/ByteOrder'{0x00000000c8f05120}
    - l2: 0
    - l3: reg rbp [10],long
    - l4: stack[12],narrowoop
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
   Locals
    - l0: empty
    - l1: empty
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
   Locals
    - l0: empty
    - l1: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: stack[8]
    - l6: stack[16],oop
    - l7: empty
   Expression stack
    - @0: obj[704]
    - @1: stack[0],oop
    - @2: 0
    - @3: 0
    - @4: obj[705]
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[699]
    - l4: empty
   Objects
    - 0: R obj[699], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[709], 0, 16, stack[24],oop
    - 1: R obj[709], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[704], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[708], 0, 16, stack[32],oop
    - 3: R obj[708], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[705], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[713], 0, 16, stack[16],oop
    - 5: R obj[713], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
PcDesc(pc=0x0000732d1c5203d9 offset=759 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5203e4 offset=764 bits=4):
   jdk.internal.foreign.AbstractMemorySegmentImpl::lambda$toArray$3@1 (line 321)
   Locals
    - l0: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl$$Lambda/0x000000004d00f540::apply@1
   Locals
    - l0: empty
    - l1: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@20 (line 341)
   Locals
    - l0: obj[668]
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: empty
    - l4: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
    - l5: stack[0]
    - l6: empty
    - l7: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[667]
    - l4: empty
   Objects
    - 0: R obj[667], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[670], 0, 16, stack[24],oop
    - 1: R obj[670], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[668], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[669], 0, 16, stack[32],oop
    - 3: R obj[669], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
PcDesc(pc=0x0000732d1c52040a offset=78a bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520414 offset=794 bits=4):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@3 (line 980)
   Locals
    - l0: stack[16],oop
    - l1: 0
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: obj[790]
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: obj[790]
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[789]
    - l4: empty
   Objects
    - 0: R obj[789], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[791], 0, 16, stack[24],oop
    - 1: R obj[791], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[790], jdk.incubator.vector.Byte256Vector$Byte256Shuffle
        Fields: null
PcDesc(pc=0x0000732d1c52044b offset=7cb bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520454 offset=7d4 bits=1):
   jdk.incubator.vector.AbstractShuffle::checkIndex0@12 (line 136)  reexecute=true
   Locals
    - l0: stack[16]
    - l1: 32
    - l2: -1
    - l3: stack[12]
   Expression stack
    - @0: stack[12]
    - @1: stack[16]
   jdk.incubator.vector.AbstractShuffle::partiallyWrapIndex@3 (line 129)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@27 (line 983)
   Locals
    - l0: reg rbp [10],oop
    - l1: 0
    - l2: stack[32],oop
    - l3: stack[0]
    - l4: empty
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: obj[1512]
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: obj[1512]
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1511]
    - l4: empty
   Objects
    - 0: R obj[1511], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1538], 0, 16, stack[24],oop
    - 1: R obj[1538], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1512], jdk.incubator.vector.Byte256Vector$Byte256Shuffle
        Fields: null
PcDesc(pc=0x0000732d1c520475 offset=7f5 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520480 offset=800 bits=0):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkArraySize@53 (line 393)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: 128
    - @2: 0
    - @3: 0
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@12 (line 340)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x0000732d1c5204aa offset=82a bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5204b4 offset=834 bits=1):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@12 (line 981)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: 0
    - l2: stack[0],oop
    - l3: 0
    - l4: empty
   Expression stack
    - @0: 0
    - @1: 32
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: obj[1123]
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: obj[1123]
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1122]
    - l4: empty
   Objects
    - 0: R obj[1122], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1127], 0, 16, stack[24],oop
    - 1: R obj[1127], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1123], jdk.incubator.vector.Byte256Vector$Byte256Shuffle
        Fields: null
PcDesc(pc=0x0000732d1c520506 offset=886 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520510 offset=890 bits=0):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: 0
    - @2: 0
    - @3: stack[0],long
    - @4: obj[68]
   jdk.internal.foreign.AbstractMemorySegmentImpl::asSlice@3 (line 103)
   Locals
    - l0: obj[68]
    - l1: 0
    - l2: 0
    - l3: 0
    - l4: 128
   jdk.internal.foreign.AbstractMemorySegmentImpl::asSlice@3 (line 70)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@15 (line 362)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[67]
    - l4: empty
   Objects
    - 0: R obj[67], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, reg rbp [10],long, 0, obj[73], 0, 16, stack[24],oop
    - 1: R obj[73], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[68], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[16],long, 0, obj[74], 0, 16, stack[32],oop
    - 3: R obj[74], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
PcDesc(pc=0x0000732d1c52053a offset=8ba bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520544 offset=8c4 bits=0):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: 0
    - @2: 0
    - @3: stack[0],long
    - @4: obj[102]
   jdk.internal.foreign.AbstractMemorySegmentImpl::asSlice@3 (line 103)
   Locals
    - l0: obj[102]
    - l1: 0
    - l2: 0
    - l3: 0
    - l4: 128
   jdk.internal.foreign.AbstractMemorySegmentImpl::asSlice@3 (line 70)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@15 (line 362)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[101]
    - l4: empty
   Objects
    - 0: R obj[101], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, reg rbp [10],long, 0, obj[103], 0, 16, stack[24],oop
    - 1: R obj[103], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[102], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[16],long, 0, obj[104], 0, 16, stack[32],oop
    - 3: R obj[104], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
PcDesc(pc=0x0000732d1c52057e offset=8fe bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520588 offset=908 bits=0):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: 0
    - @2: 0
    - @3: stack[72],long
    - @4: obj[1056]
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess@9 (line 357)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@125 (line 623)
   Locals
    - l0: empty
    - l1: stack[16],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[48],oop
    - l6: 0
    - l7: 0
    - l8: empty
    - l9: empty
    - l10: obj[1056]
    - l11: obj[1057]
    - l12: 0
    - l13: stack[64],long
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: reg rbp [10],oop
    - l7: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1055]
    - l4: empty
   Objects
    - 0: R obj[1055], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1059], 0, 16, stack[24],oop
    - 1: R obj[1059], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1056], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[1058], 0, 16, stack[32],oop
    - 3: R obj[1058], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[1057], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[1060], 0, 16, reg rbp [10],oop
    - 5: R obj[1060], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, reg rbp [10],oop
PcDesc(pc=0x0000732d1c5205b3 offset=933 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5205bc offset=93c bits=0):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: 0
    - @2: 0
    - @3: reg rbp [10],long
    - @4: obj[1091]
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess@9 (line 357)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@125 (line 623)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[64],oop
    - l6: 0
    - l7: 0
    - l8: empty
    - l9: empty
    - l10: obj[1091]
    - l11: obj[1092]
    - l12: 0
    - l13: stack[72],long
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1090]
    - l4: empty
   Objects
    - 0: R obj[1090], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1094], 0, 16, stack[24],oop
    - 1: R obj[1094], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1091], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[1093], 0, 16, stack[32],oop
    - 3: R obj[1093], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[1092], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[1095], 0, 16, stack[16],oop
    - 5: R obj[1095], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
PcDesc(pc=0x0000732d1c5205e7 offset=967 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5205f0 offset=970 bits=0):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: 0
    - @2: 0
    - @3: reg rbp [10],long
    - @4: obj[1222]
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess@9 (line 357)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@135 (line 624)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[64],oop
    - l6: 0
    - l7: 0
    - l8: empty
    - l9: empty
    - l10: obj[1221]
    - l11: obj[1222]
    - l12: 0
    - l13: stack[72],long
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1220]
    - l4: empty
   Objects
    - 0: R obj[1220], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1224], 0, 16, stack[24],oop
    - 1: R obj[1224], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1221], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[1223], 0, 16, stack[32],oop
    - 3: R obj[1223], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[1222], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[1225], 0, 16, stack[16],oop
    - 5: R obj[1225], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
PcDesc(pc=0x0000732d1c52061b offset=99b bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520624 offset=9a4 bits=0):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: 0
    - @2: 0
    - @3: reg rbp [10],long
    - @4: obj[1257]
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess@9 (line 357)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@135 (line 624)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[64],oop
    - l6: 0
    - l7: 0
    - l8: empty
    - l9: empty
    - l10: obj[1256]
    - l11: obj[1257]
    - l12: 0
    - l13: stack[72],long
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1255]
    - l4: empty
   Objects
    - 0: R obj[1255], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1259], 0, 16, stack[24],oop
    - 1: R obj[1259], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1256], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[1258], 0, 16, stack[32],oop
    - 3: R obj[1258], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[1257], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[1260], 0, 16, stack[16],oop
    - 5: R obj[1260], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
PcDesc(pc=0x0000732d1c52066d offset=9ed bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520672 offset=9f2 bits=0):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 410)
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@19 (line 937)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520690 offset=a10 bits=0):
   java.util.Objects::checkIndex@3 (line 441)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: 0
    - @1: 0
    - @2: 0
    - @3: reg rbp [10],long
    - @4: null
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@45 (line 68)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   jdk.incubator.vector.IntVector::intoMemorySegment@32 (line 3453)
   Locals
    - l0: obj[1351]
    - l1: obj[1349]
    - l2: empty
    - l3: empty
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@29 (line 939)
   Locals
    - l0: empty
    - l1: obj[1349]
    - l2: 0
    - l3: 0
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
    - l5: a 'jdk/incubator/vector/IntVector$IntSpecies'{0x00000000c8ecd658}
    - l6: obj[1350]
   test_ms::micro@30 (line 16)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 0: R obj[1349], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1352], 0, 16, stack[8],oop
    - 1: R obj[1352], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[8],oop
    - 2: R obj[1350], jdk.incubator.vector.Byte256Vector
        Fields: stack[96],vector
    - 3: R obj[1351], jdk.incubator.vector.Int256Vector
        Fields: stack[64],vector
PcDesc(pc=0x0000732d1c5206b1 offset=a31 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5206b6 offset=a36 bits=0):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 410)
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@19 (line 937)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5206d4 offset=a54 bits=0):
   java.util.Objects::checkIndex@3 (line 441)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: 0
    - @1: 0
    - @2: 0
    - @3: reg rbp [10],long
    - @4: null
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@45 (line 68)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   jdk.incubator.vector.IntVector::intoMemorySegment@32 (line 3453)
   Locals
    - l0: obj[1186]
    - l1: obj[1184]
    - l2: empty
    - l3: empty
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@29 (line 939)
   Locals
    - l0: empty
    - l1: obj[1184]
    - l2: 0
    - l3: 0
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
    - l5: a 'jdk/incubator/vector/IntVector$IntSpecies'{0x00000000c8ecd658}
    - l6: obj[1185]
   test_ms::micro@30 (line 16)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 0: R obj[1184], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1190], 0, 16, stack[8],oop
    - 1: R obj[1190], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[8],oop
    - 2: R obj[1185], jdk.incubator.vector.Byte256Vector
        Fields: stack[96],vector
    - 3: R obj[1186], jdk.incubator.vector.Int256Vector
        Fields: stack[64],vector
PcDesc(pc=0x0000732d1c5206f5 offset=a75 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5206fa offset=a7a bits=0):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@40 (line 940)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c52071c offset=a9c bits=0):
   java.util.Objects::checkIndex@3 (line 441)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: 0
    - @1: 32
    - @2: 0
    - @3: reg rbp [10],long
    - @4: null
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@45 (line 68)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   jdk.incubator.vector.IntVector::intoMemorySegment@32 (line 3453)
   Locals
    - l0: obj[1453]
    - l1: obj[1451]
    - l2: empty
    - l3: empty
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@59 (line 942)
   Locals
    - l0: empty
    - l1: obj[1451]
    - l2: 0
    - l3: 0
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
    - l5: a 'jdk/incubator/vector/IntVector$IntSpecies'{0x00000000c8ecd658}
    - l6: obj[1452]
   test_ms::micro@30 (line 16)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 0: R obj[1451], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[32],long, 0, obj[1454], 0, 16, stack[48],oop
    - 1: R obj[1454], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[48],oop
    - 2: R obj[1452], jdk.incubator.vector.Byte256Vector
        Fields: stack[64],vector
    - 3: R obj[1453], jdk.incubator.vector.Int256Vector
        Fields: stack[0],vector
PcDesc(pc=0x0000732d1c52073d offset=abd bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520742 offset=ac2 bits=0):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@70 (line 943)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520764 offset=ae4 bits=0):
   java.util.Objects::checkIndex@3 (line 441)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: 0
    - @1: 64
    - @2: 0
    - @3: reg rbp [10],long
    - @4: null
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@45 (line 68)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   jdk.incubator.vector.IntVector::intoMemorySegment@32 (line 3453)
   Locals
    - l0: obj[1594]
    - l1: obj[1592]
    - l2: empty
    - l3: empty
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@91 (line 945)
   Locals
    - l0: empty
    - l1: obj[1592]
    - l2: 0
    - l3: 0
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
    - l5: a 'jdk/incubator/vector/IntVector$IntSpecies'{0x00000000c8ecd658}
    - l6: obj[1593]
   test_ms::micro@30 (line 16)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 0: R obj[1592], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[32],long, 0, obj[1595], 0, 16, stack[48],oop
    - 1: R obj[1595], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[48],oop
    - 2: R obj[1593], jdk.incubator.vector.Byte256Vector
        Fields: stack[64],vector
    - 3: R obj[1594], jdk.incubator.vector.Int256Vector
        Fields: stack[0],vector
PcDesc(pc=0x0000732d1c520785 offset=b05 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c52078a offset=b0a bits=0):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@102 (line 946)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c52079e offset=b1e bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5207a8 offset=b28 bits=0):
   java.util.Objects::checkIndex@3 (line 441)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: 0
    - @1: 96
    - @2: 0
    - @3: reg rbp [10],long
    - @4: null
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@45 (line 68)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   jdk.incubator.vector.IntVector::intoMemorySegment@32 (line 3453)
   Locals
    - l0: obj[1429]
    - l1: obj[1430]
    - l2: empty
    - l3: empty
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
   test_ms::micro@30 (line 16)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 0: R obj[1429], jdk.incubator.vector.Int256Vector
        Fields: stack[0],vector
    - 1: R obj[1430], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[32],long, 0, obj[1431], 0, 16, stack[48],oop
    - 2: R obj[1431], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[48],oop
PcDesc(pc=0x0000732d1c5207d3 offset=b53 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5207dc offset=b5c bits=1):
   java.lang.Class::reflectionData@31 (line 2836)  reexecute=true
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: stack[8],narrowoop
    - l2: stack[16]
    - l3: empty
   Expression stack
    - @0: reg rbp [10],int
    - @1: stack[16]
   java.lang.Class::getSimpleName@1 (line 1669)
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: empty
    - l2: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   Locals
    - l0: obj[374]
    - l1: empty
    - l2: stack[0],oop
    - l3: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'{0x00000000c8ea2000}
    - l4: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
    - l5: empty
    - l6: empty
    - l7: empty
   Expression stack
    - @0: obj[374]
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[373]
    - l4: empty
   Objects
    - 0: R obj[373], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[376], 0, 16, stack[24],oop
    - 1: R obj[376], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[374], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[375], 0, 16, stack[32],oop
    - 3: R obj[375], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
PcDesc(pc=0x0000732d1c52081b offset=b9b bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520824 offset=ba4 bits=1):
   jdk.internal.foreign.Utils::isAligned@7 (line 201)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: reg rbp [10],int
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkArraySize@6 (line 390)
   Locals
    - l0: obj[441]
    - l1: stack[8],narrowoop
    - l2: stack[12]
    - l3: empty
    - l4: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@12 (line 340)
   Locals
    - l0: obj[441]
    - l1: empty
    - l2: stack[0],oop
    - l3: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'{0x00000000c8ea2000}
    - l4: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
    - l5: empty
    - l6: empty
    - l7: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[440]
    - l4: empty
   Objects
    - 0: R obj[440], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[447], 0, 16, stack[24],oop
    - 1: R obj[447], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[441], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[446], 0, 16, stack[32],oop
    - 3: R obj[446], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
PcDesc(pc=0x0000732d1c520843 offset=bc3 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c52086c offset=bec bits=1):
   jdk.internal.foreign.AbstractMemorySegmentImpl::isAlignedForElement@17 (line 385)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],int
   jdk.internal.foreign.AbstractMemorySegmentImpl::isAlignedForElement@8 (line 380)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@68 (line 616)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[72],oop
    - l6: 0
    - l7: 0
    - l8: 0
    - l9: stack[48],long
    - l10: obj[946]
    - l11: obj[947]
    - l12: empty
    - l13: empty
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[945]
    - l4: empty
   Objects
    - 0: R obj[945], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[951], 0, 16, stack[24],oop
    - 1: R obj[951], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[946], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[950], 0, 16, stack[32],oop
    - 3: R obj[950], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[947], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[952], 0, 16, stack[16],oop
    - 5: R obj[952], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
PcDesc(pc=0x0000732d1c52088b offset=c0b bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5208b4 offset=c34 bits=1):
   jdk.internal.foreign.AbstractMemorySegmentImpl::isAlignedForElement@17 (line 385)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],int
   jdk.internal.foreign.AbstractMemorySegmentImpl::isAlignedForElement@8 (line 380)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@91 (line 619)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[72],oop
    - l6: 0
    - l7: 0
    - l8: 0
    - l9: stack[48],long
    - l10: obj[982]
    - l11: obj[983]
    - l12: empty
    - l13: empty
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[981]
    - l4: empty
   Objects
    - 0: R obj[981], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[987], 0, 16, stack[24],oop
    - 1: R obj[987], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[982], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[986], 0, 16, stack[32],oop
    - 3: R obj[986], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[983], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[988], 0, 16, stack[16],oop
    - 5: R obj[988], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
PcDesc(pc=0x0000732d1c5208ee offset=c6e bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5208f8 offset=c78 bits=1):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@3 (line 402)  reexecute=true
   Locals
    - l0: obj[1019]
    - l1: 0
    - l2: 0
    - l3: 0
    - l4: stack[72],long
   Expression stack
    - @0: stack[80]
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess@9 (line 357)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@125 (line 623)
   Locals
    - l0: empty
    - l1: stack[16],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[48],oop
    - l6: 0
    - l7: 0
    - l8: empty
    - l9: empty
    - l10: obj[1019]
    - l11: obj[1020]
    - l12: 0
    - l13: stack[72],long
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: reg rbp [10],oop
    - l7: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1018]
    - l4: empty
   Objects
    - 0: R obj[1018], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1024], 0, 16, stack[24],oop
    - 1: R obj[1024], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1019], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[1023], 0, 16, stack[32],oop
    - 3: R obj[1023], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[1020], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[1025], 0, 16, reg rbp [10],oop
    - 5: R obj[1025], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, reg rbp [10],oop
PcDesc(pc=0x0000732d1c520900 offset=c80 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520930 offset=cb0 bits=1):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@162 (line 625)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: empty
    - l6: 0
    - l7: 0
    - l8: empty
    - l9: empty
    - l10: obj[1326]
    - l11: obj[1327]
    - l12: 0
    - l13: stack[64],long
   Expression stack
    - @0: reg rbp [10],narrowoop
    - @1: stack[72],narrowoop
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1325]
    - l4: empty
   Objects
    - 0: R obj[1325], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1329], 0, 16, stack[24],oop
    - 1: R obj[1329], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1326], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[1328], 0, 16, stack[32],oop
    - 3: R obj[1328], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[1327], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[1330], 0, 16, stack[16],oop
    - 5: R obj[1330], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
PcDesc(pc=0x0000732d1c520938 offset=cb8 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520974 offset=cf4 bits=1):
   java.lang.Class::reflectionData@11 (line 2835)  reexecute=true
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: stack[8],narrowoop
    - l2: stack[4]
    - l3: empty
   Expression stack
    - @0: stack[8],narrowoop
   java.lang.Class::getSimpleName@1 (line 1669)
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: empty
    - l2: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   Locals
    - l0: obj[231]
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'{0x00000000c8ea2000}
    - l4: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
    - l5: empty
    - l6: empty
    - l7: empty
   Expression stack
    - @0: obj[231]
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[230]
    - l4: empty
   Objects
    - 0: R obj[230], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[234], 0, 16, stack[24],oop
    - 1: R obj[234], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[231], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[233], 0, 16, stack[32],oop
    - 3: R obj[233], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
PcDesc(pc=0x0000732d1c5209b6 offset=d36 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5209c0 offset=d40 bits=1):
   java.lang.ref.SoftReference::get@17 (line 114)  reexecute=true
   Locals
    - l0: stack[16],narrowoop
    - l1: stack[20],narrowoop
   Expression stack
    - @0: reg rbp [10],int
   java.lang.Class::reflectionData@15 (line 2836)
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: stack[16],narrowoop
    - l2: stack[12]
    - l3: empty
   java.lang.Class::getSimpleName@1 (line 1669)
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: empty
    - l2: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   Locals
    - l0: obj[305]
    - l1: empty
    - l2: stack[0],oop
    - l3: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'{0x00000000c8ea2000}
    - l4: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
    - l5: empty
    - l6: empty
    - l7: empty
   Expression stack
    - @0: obj[305]
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[304]
    - l4: empty
   Objects
    - 0: R obj[304], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[309], 0, 16, stack[24],oop
    - 1: R obj[309], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[305], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[308], 0, 16, stack[32],oop
    - 3: R obj[308], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
PcDesc(pc=0x0000732d1c5209ee offset=d6e bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c5209f8 offset=d78 bits=1):
   java.lang.Class::getSimpleName@11 (line 1671)  reexecute=true
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: stack[0],oop
    - l2: stack[12],narrowoop
   Expression stack
    - @0: stack[12],narrowoop
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   Locals
    - l0: obj[405]
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'{0x00000000c8ea2000}
    - l4: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
    - l5: empty
    - l6: empty
    - l7: empty
   Expression stack
    - @0: obj[405]
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[404]
    - l4: empty
   Objects
    - 0: R obj[404], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[407], 0, 16, stack[24],oop
    - 1: R obj[407], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[405], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[406], 0, 16, stack[32],oop
    - 3: R obj[406], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
PcDesc(pc=0x0000732d1c520a14 offset=d94 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520a3c offset=dbc bits=1):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@35 (line 611)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
   Expression stack
    - @0: reg rbp [10],int
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[0],oop
    - l7: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[839]
    - l4: empty
   Objects
    - 0: R obj[839], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[842], 0, 16, stack[24],oop
    - 1: R obj[842], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
PcDesc(pc=0x0000732d1c520a79 offset=df9 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520a84 offset=e04 bits=1):
   jdk.internal.foreign.Utils::isElementAligned@39 (line 209)  reexecute=true
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],int
   jdk.internal.foreign.Utils::checkElementAlignment@1 (line 214)
   Locals
    - l0: empty
    - l1: "Source layout alignment greater than its size"{0x00000000c8ea9810}
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@53 (line 614)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[72],oop
    - l6: 0
    - l7: 0
    - l8: 0
    - l9: stack[48],long
    - l10: obj[873]
    - l11: obj[874]
    - l12: empty
    - l13: empty
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[872]
    - l4: empty
   Objects
    - 0: R obj[872], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[878], 0, 16, stack[24],oop
    - 1: R obj[878], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[873], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[877], 0, 16, stack[32],oop
    - 3: R obj[877], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[874], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[879], 0, 16, stack[16],oop
    - 5: R obj[879], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
PcDesc(pc=0x0000732d1c520ac1 offset=e41 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520acc offset=e4c bits=1):
   jdk.internal.foreign.Utils::isElementAligned@39 (line 209)  reexecute=true
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],int
   jdk.internal.foreign.Utils::checkElementAlignment@1 (line 214)
   Locals
    - l0: empty
    - l1: "Destination layout alignment greater than its size"{0x00000000c8ea9868}
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@61 (line 615)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[72],oop
    - l6: 0
    - l7: 0
    - l8: 0
    - l9: stack[48],long
    - l10: obj[910]
    - l11: obj[911]
    - l12: empty
    - l13: empty
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[909]
    - l4: empty
   Objects
    - 0: R obj[909], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[915], 0, 16, stack[24],oop
    - 1: R obj[915], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[910], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[914], 0, 16, stack[32],oop
    - 3: R obj[914], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[911], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[916], 0, 16, stack[16],oop
    - 5: R obj[916], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
PcDesc(pc=0x0000732d1c520b0a offset=e8a bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520b14 offset=e94 bits=1):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@146 (line 625)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: empty
    - l6: 0
    - l7: 0
    - l8: empty
    - l9: empty
    - l10: obj[1290]
    - l11: obj[1291]
    - l12: 0
    - l13: stack[48],long
   Expression stack
    - @0: reg rbp [10],int
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1289]
    - l4: empty
   Objects
    - 0: R obj[1289], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1295], 0, 16, stack[24],oop
    - 1: R obj[1295], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1290], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[1294], 0, 16, stack[32],oop
    - 3: R obj[1294], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[1291], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[1296], 0, 16, stack[16],oop
    - 5: R obj[1296], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
PcDesc(pc=0x0000732d1c520b3f offset=ebf bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520b48 offset=ec8 bits=1):
   jdk.internal.misc.Unsafe::checkSize@23 (line 473)  reexecute=true
   Locals
    - l0: a 'jdk/internal/misc/Unsafe'{0x00000000c8f03408}
    - l1: empty
    - l2: empty
   Expression stack
    - @0: stack[64]
   jdk.internal.misc.Unsafe::copyMemoryChecks@3 (line 837)
   Locals
    - l0: a 'jdk/internal/misc/Unsafe'{0x00000000c8f03408}
    - l1: stack[32],oop
    - l2: 0
    - l3: 16
    - l4: stack[16],oop
    - l5: 0
    - l6: 16
    - l7: empty
    - l8: empty
   jdk.internal.misc.Unsafe::copyMemory@9 (line 806)
   Locals
    - l0: a 'jdk/internal/misc/Unsafe'{0x00000000c8f03408}
    - l1: stack[32],oop
    - l2: 0
    - l3: 16
    - l4: stack[16],oop
    - l5: 0
    - l6: 16
    - l7: 0
    - l8: stack[48],long
   jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
   Locals
    - l0: empty
    - l1: obj[1570]
    - l2: obj[1571]
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
   jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1569]
    - l4: empty
   Objects
    - 0: R obj[1569], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1572], 0, 16, stack[24],oop
    - 1: R obj[1572], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1570], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 3: R obj[1571], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
PcDesc(pc=0x0000732d1c520b7d offset=efd bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520b88 offset=f08 bits=1):
   jdk.internal.misc.Unsafe::copyMemory@16 (line 808)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   Expression stack
    - @0: stack[8]
   jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
   Locals
    - l0: empty
    - l1: obj[1410]
    - l2: obj[1411]
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
   jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: reg rbp [10],oop
    - l7: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1409]
    - l4: empty
   Objects
    - 0: R obj[1409], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[16],long, 0, obj[1412], 0, 16, stack[24],oop
    - 1: R obj[1412], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1410], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 3: R obj[1411], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, reg rbp [10],oop
PcDesc(pc=0x0000732d1c520bbb offset=f3b bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520bc4 offset=f44 bits=0):
   java.lang.Class::reflectionData@18 (line 2836)
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: stack[0],narrowoop
    - l2: stack[4]
    - l3: empty
   Expression stack
    - @0: stack[8],narrowoop
   java.lang.Class::getSimpleName@1 (line 1669)
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: empty
    - l2: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   Locals
    - l0: obj[339]
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'{0x00000000c8ea2000}
    - l4: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
    - l5: empty
    - l6: empty
    - l7: empty
   Expression stack
    - @0: obj[339]
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[338]
    - l4: empty
   Objects
    - 0: R obj[338], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[341], 0, 16, stack[24],oop
    - 1: R obj[341], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[339], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[340], 0, 16, stack[32],oop
    - 3: R obj[340], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
PcDesc(pc=0x0000732d1c520bcc offset=f4c bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520bfc offset=f7c bits=1):
   java.util.Objects::requireNonNull@1 (line 219)  reexecute=true
   Locals
    - l0: stack[16],oop
   Expression stack
    - @0: stack[8],oop
   jdk.internal.foreign.SegmentFactories::fromArray@4 (line 104)
   Locals
    - l0: stack[8],oop
    - l1: empty
    - l2: empty
   java.lang.foreign.MemorySegment::ofArray@1 (line 1476)
   Locals
    - l0: empty
   test_ms::micro@1 (line 13)
   Locals
    - l0: reg rbp [10],oop
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
PcDesc(pc=0x0000732d1c520c27 offset=fa7 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520c30 offset=fb0 bits=1):
   java.util.Objects::requireNonNull@1 (line 219)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
   Expression stack
    - @0: reg rbp [10],oop
   jdk.internal.foreign.SegmentFactories::fromArray@4 (line 104)
   Locals
    - l0: reg rbp [10],oop
    - l1: empty
    - l2: empty
   java.lang.foreign.MemorySegment::ofArray@1 (line 1476)
   Locals
    - l0: empty
   test_ms::micro@6 (line 14)
   Locals
    - l0: empty
    - l1: empty
    - l2: obj[33]
    - l3: empty
    - l4: empty
   Objects
    - 0: R obj[33], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[16],long, 0, obj[38], 0, 16, stack[32],oop
    - 1: R obj[38], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
PcDesc(pc=0x0000732d1c520c63 offset=fe3 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520c6c offset=fec bits=1):
   java.lang.ref.SoftReference::get@6 (line 114)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[12],narrowoop
   Expression stack
    - @0: stack[12],narrowoop
   java.lang.Class::reflectionData@15 (line 2836)
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: stack[0],narrowoop
    - l2: stack[4]
    - l3: empty
   java.lang.Class::getSimpleName@1 (line 1669)
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: empty
    - l2: empty
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   Locals
    - l0: obj[271]
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'{0x00000000c8ea2000}
    - l4: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
    - l5: empty
    - l6: empty
    - l7: empty
   Expression stack
    - @0: obj[271]
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[270]
    - l4: empty
   Objects
    - 0: R obj[270], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[273], 0, 16, stack[24],oop
    - 1: R obj[273], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[271], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[272], 0, 16, stack[32],oop
    - 3: R obj[272], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
PcDesc(pc=0x0000732d1c520c74 offset=ff4 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520c88 offset=1008 bits=0):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@3 (line 980)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c520c8d offset=100d bits=0):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c520c92 offset=1012 bits=0):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@29 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c520c97 offset=1017 bits=0):
   jdk.internal.foreign.AbstractMemorySegmentImpl::lambda$toArray$3@1 (line 321)
   jdk.internal.foreign.AbstractMemorySegmentImpl$$Lambda/0x000000004d00f540::apply@1
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@20 (line 341)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c520c9c offset=101c bits=0):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::<init>@11 (line 238)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@8 (line 243)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@29 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c520ca1 offset=1021 bits=0):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::<init>@11 (line 238)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@8 (line 243)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   test_ms::micro@18 (line 15)
PcDesc(pc=0x0000732d1c520ca4 offset=1024 bits=0):
   jdk.internal.foreign.SegmentFactories::fromArray@-1 (line 103)
   java.lang.foreign.MemorySegment::ofArray@1 (line 1476)
   test_ms::micro@1 (line 13)
PcDesc(pc=0x0000732d1c520cb4 offset=1034 bits=0):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   test_ms::micro@30 (line 16)
PcDesc(pc=0x0000732d1c520d61 offset=10e1 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 39 OopMaps

ImmutableOopMap {rbp=Oop [0]=Oop [24]=Oop [32]=Oop } pc offsets: 228 
ImmutableOopMap {rbp=Oop [0]=Oop [16]=Oop [24]=Oop [32]=Oop [64]=Oop } pc offsets: 896 
ImmutableOopMap {[8]=Oop [24]=Oop [32]=Oop } pc offsets: 1788 
ImmutableOopMap {[0]=Oop [12]=NarrowOop [16]=Oop [24]=Oop [32]=Oop } pc offsets: 1848 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop } pc offsets: 1892 
ImmutableOopMap {[16]=Oop rbp=Derived_oop_[16] [24]=Oop } pc offsets: 1940 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop } pc offsets: 2004 
ImmutableOopMap {} pc offsets: 2048 
ImmutableOopMap {rbp=Oop [0]=Oop [24]=Oop } pc offsets: 2100 
ImmutableOopMap {[24]=Oop [32]=Oop } pc offsets: 2192 2244 
ImmutableOopMap {rbp=Oop [16]=Oop [24]=Oop [32]=Oop [48]=Oop } pc offsets: 2312 
ImmutableOopMap {[16]=Oop [24]=Oop [32]=Oop [48]=Oop [64]=Oop } pc offsets: 2364 2416 2468 
ImmutableOopMap {[8]=Oop } pc offsets: 2576 2644 
ImmutableOopMap {[48]=Oop } pc offsets: 2716 2788 2856 
ImmutableOopMap {[0]=Oop [8]=NarrowOop [24]=Oop [32]=Oop } pc offsets: 2908 2980 
ImmutableOopMap {[16]=Oop [24]=Oop [32]=Oop [64]=Oop [72]=Oop } pc offsets: 3052 3124 
ImmutableOopMap {rbp=Oop [16]=Oop [24]=Oop [32]=Oop [48]=Oop } pc offsets: 3192 
ImmutableOopMap {rbp=NarrowOop [16]=Oop [24]=Oop [32]=Oop [48]=Oop [72]=NarrowOop } pc offsets: 3248 
ImmutableOopMap {rbp=Oop [8]=NarrowOop [24]=Oop [32]=Oop } pc offsets: 3316 
ImmutableOopMap {[0]=Oop [16]=NarrowOop [20]=NarrowOop [24]=Oop [32]=Oop } pc offsets: 3392 
ImmutableOopMap {rbp=Oop [0]=Oop [12]=NarrowOop [24]=Oop [32]=Oop } pc offsets: 3448 
ImmutableOopMap {[0]=Oop [24]=Oop } pc offsets: 3516 
ImmutableOopMap {[16]=Oop [24]=Oop [32]=Oop [64]=Oop [72]=Oop } pc offsets: 3588 3660 
ImmutableOopMap {[16]=Oop [24]=Oop [32]=Oop } pc offsets: 3732 3784 
ImmutableOopMap {rbp=Oop [24]=Oop [32]=Oop } pc offsets: 3848 
ImmutableOopMap {rbp=Oop [0]=NarrowOop [8]=NarrowOop [24]=Oop [32]=Oop } pc offsets: 3908 
ImmutableOopMap {rbp=Oop [8]=Oop [16]=Oop } pc offsets: 3964 
ImmutableOopMap {rbp=Oop [32]=Oop } pc offsets: 4016 
ImmutableOopMap {rbp=Oop [0]=NarrowOop [12]=NarrowOop [24]=Oop [32]=Oop } pc offsets: 4076 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x0000732d1c51fc9e offset=1e):
   test_ms::micro@-1 (line 13)
ScopeDesc(pc=0x0000732d1c51fcc5 offset=45):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c51fcc5 offset=45):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c51fcc5 offset=45):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c51fcc5 offset=45):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c51fcc5 offset=45):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c51fcc5 offset=45):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c51fcef offset=6f):
   jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
ScopeDesc(pc=0x0000732d1c51fcef offset=6f):
   jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
ScopeDesc(pc=0x0000732d1c51fcef offset=6f):
   jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
ScopeDesc(pc=0x0000732d1c51fcef offset=6f):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
ScopeDesc(pc=0x0000732d1c51fcef offset=6f):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
ScopeDesc(pc=0x0000732d1c51fcef offset=6f):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
ScopeDesc(pc=0x0000732d1c51fcef offset=6f):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51fcef offset=6f):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51fcef offset=6f):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51fd25 offset=a5):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
ScopeDesc(pc=0x0000732d1c51fd25 offset=a5):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
ScopeDesc(pc=0x0000732d1c51fd25 offset=a5):
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
ScopeDesc(pc=0x0000732d1c51fd25 offset=a5):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
ScopeDesc(pc=0x0000732d1c51fd25 offset=a5):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@29 (line 363)
ScopeDesc(pc=0x0000732d1c51fd25 offset=a5):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51fd5b offset=db):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c51fd5b offset=db):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c51fd5b offset=db):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c51fd5b offset=db):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c51fd5b offset=db):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c51fd5b offset=db):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c51fd64 offset=e4):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::<init>@11 (line 238)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x0000732d1c51fd64 offset=e4):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@8 (line 243)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[0],oop
ScopeDesc(pc=0x0000732d1c51fd64 offset=e4):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x0000732d1c51fd64 offset=e4):
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c51fd64 offset=e4):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c51fd64 offset=e4):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@29 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   Expression stack
    - @0: obj[220]
ScopeDesc(pc=0x0000732d1c51fd64 offset=e4):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[219]
    - l4: empty
   Objects
    - 0: R obj[219], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[222], 0, 16, stack[24],oop
    - 1: R obj[222], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[220], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[221], 0, 16, reg rbp [10],oop
    - 3: R obj[221], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, reg rbp [10],oop
ScopeDesc(pc=0x0000732d1c51fd76 offset=f6):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c51fd76 offset=f6):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c51fd76 offset=f6):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c51fd76 offset=f6):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c51fd76 offset=f6):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c51fd76 offset=f6):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c51fd7a offset=fa):
   java.lang.Class::reflectionData@1 (line 2832)
ScopeDesc(pc=0x0000732d1c51fd7a offset=fa):
   java.lang.Class::getSimpleName@1 (line 1669)
ScopeDesc(pc=0x0000732d1c51fd7a offset=fa):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
ScopeDesc(pc=0x0000732d1c51fd7a offset=fa):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51fd7a offset=fa):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51fd7a offset=fa):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51fd7e offset=fe):
   java.lang.Class::reflectionData@6 (line 2833)
ScopeDesc(pc=0x0000732d1c51fd7e offset=fe):
   java.lang.Class::getSimpleName@1 (line 1669)
ScopeDesc(pc=0x0000732d1c51fd7e offset=fe):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
ScopeDesc(pc=0x0000732d1c51fd7e offset=fe):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51fd7e offset=fe):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51fd7e offset=fe):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51fd87 offset=107):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c51fd87 offset=107):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c51fd87 offset=107):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c51fd87 offset=107):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c51fd87 offset=107):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c51fd87 offset=107):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c51fdba offset=13a):
   java.lang.ref.Reference::get@1 (line 343)
ScopeDesc(pc=0x0000732d1c51fdba offset=13a):
   java.lang.ref.SoftReference::get@1 (line 113)
ScopeDesc(pc=0x0000732d1c51fdba offset=13a):
   java.lang.Class::reflectionData@15 (line 2836)
ScopeDesc(pc=0x0000732d1c51fdba offset=13a):
   java.lang.Class::getSimpleName@1 (line 1669)
ScopeDesc(pc=0x0000732d1c51fdba offset=13a):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
ScopeDesc(pc=0x0000732d1c51fdba offset=13a):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51fdba offset=13a):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51fdba offset=13a):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51fdbe offset=13e):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c51fdbe offset=13e):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c51fdbe offset=13e):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c51fdbe offset=13e):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c51fdbe offset=13e):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c51fdbe offset=13e):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c51fdc2 offset=142):
   java.lang.ref.SoftReference::get@10 (line 114)
ScopeDesc(pc=0x0000732d1c51fdc2 offset=142):
   java.lang.Class::reflectionData@15 (line 2836)
ScopeDesc(pc=0x0000732d1c51fdc2 offset=142):
   java.lang.Class::getSimpleName@1 (line 1669)
ScopeDesc(pc=0x0000732d1c51fdc2 offset=142):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
ScopeDesc(pc=0x0000732d1c51fdc2 offset=142):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51fdc2 offset=142):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51fdc2 offset=142):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51fdcc offset=14c):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c51fdcc offset=14c):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c51fdcc offset=14c):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c51fdcc offset=14c):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c51fdcc offset=14c):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c51fdcc offset=14c):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c51fdd0 offset=150):
   java.lang.ref.SoftReference::get@13 (line 114)
ScopeDesc(pc=0x0000732d1c51fdd0 offset=150):
   java.lang.Class::reflectionData@15 (line 2836)
ScopeDesc(pc=0x0000732d1c51fdd0 offset=150):
   java.lang.Class::getSimpleName@1 (line 1669)
ScopeDesc(pc=0x0000732d1c51fdd0 offset=150):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
ScopeDesc(pc=0x0000732d1c51fdd0 offset=150):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51fdd0 offset=150):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51fdd0 offset=150):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51fde0 offset=160):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c51fde0 offset=160):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c51fde0 offset=160):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c51fde0 offset=160):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c51fde0 offset=160):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c51fde0 offset=160):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c51fde6 offset=166):
   java.lang.Class::reflectionData@18 (line 2836)
ScopeDesc(pc=0x0000732d1c51fde6 offset=166):
   java.lang.Class::getSimpleName@1 (line 1669)
ScopeDesc(pc=0x0000732d1c51fde6 offset=166):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
ScopeDesc(pc=0x0000732d1c51fde6 offset=166):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51fde6 offset=166):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51fde6 offset=166):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51fdea offset=16a):
   java.lang.Class::reflectionData@27 (line 2836)
ScopeDesc(pc=0x0000732d1c51fdea offset=16a):
   java.lang.Class::getSimpleName@1 (line 1669)
ScopeDesc(pc=0x0000732d1c51fdea offset=16a):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
ScopeDesc(pc=0x0000732d1c51fdea offset=16a):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51fdea offset=16a):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51fdea offset=16a):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51fdf3 offset=173):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c51fdf3 offset=173):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c51fdf3 offset=173):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c51fdf3 offset=173):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c51fdf3 offset=173):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c51fdf3 offset=173):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c51fdf7 offset=177):
   java.lang.Class::getSimpleName@6 (line 1670)
ScopeDesc(pc=0x0000732d1c51fdf7 offset=177):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
ScopeDesc(pc=0x0000732d1c51fdf7 offset=177):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51fdf7 offset=177):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51fdf7 offset=177):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51fe08 offset=188):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c51fe08 offset=188):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c51fe08 offset=188):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c51fe08 offset=188):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c51fe08 offset=188):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c51fe08 offset=188):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c51fe0b offset=18b):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@11 (line 340)
ScopeDesc(pc=0x0000732d1c51fe0b offset=18b):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51fe0b offset=18b):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51fe0b offset=18b):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51fe0e offset=18e):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkArraySize@5 (line 390)
ScopeDesc(pc=0x0000732d1c51fe0e offset=18e):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@12 (line 340)
ScopeDesc(pc=0x0000732d1c51fe0e offset=18e):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51fe0e offset=18e):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51fe0e offset=18e):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51fe48 offset=1c8):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c51fe48 offset=1c8):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c51fe48 offset=1c8):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c51fe48 offset=1c8):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c51fe48 offset=1c8):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c51fe48 offset=1c8):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c51fe4b offset=1cb):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkArraySize@96 (line 397)
ScopeDesc(pc=0x0000732d1c51fe4b offset=1cb):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@12 (line 340)
ScopeDesc(pc=0x0000732d1c51fe4b offset=1cb):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51fe4b offset=1cb):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51fe4b offset=1cb):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51fe58 offset=1d8):
   jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
ScopeDesc(pc=0x0000732d1c51fe58 offset=1d8):
   jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
ScopeDesc(pc=0x0000732d1c51fe58 offset=1d8):
   jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
ScopeDesc(pc=0x0000732d1c51fe58 offset=1d8):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
ScopeDesc(pc=0x0000732d1c51fe58 offset=1d8):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
ScopeDesc(pc=0x0000732d1c51fe58 offset=1d8):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
ScopeDesc(pc=0x0000732d1c51fe58 offset=1d8):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51fe58 offset=1d8):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51fe58 offset=1d8):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51fe65 offset=1e5):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c51fe65 offset=1e5):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c51fe65 offset=1e5):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c51fe65 offset=1e5):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c51fe65 offset=1e5):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c51fe65 offset=1e5):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c51fe6d offset=1ed):
   jdk.internal.foreign.AbstractMemorySegmentImpl::lambda$toArray$3@1 (line 321)
ScopeDesc(pc=0x0000732d1c51fe6d offset=1ed):
   jdk.internal.foreign.AbstractMemorySegmentImpl$$Lambda/0x000000004d00f540::apply@1
ScopeDesc(pc=0x0000732d1c51fe6d offset=1ed):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@20 (line 341)
ScopeDesc(pc=0x0000732d1c51fe6d offset=1ed):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51fe6d offset=1ed):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51fe6d offset=1ed):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51fe87 offset=207):
   jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
ScopeDesc(pc=0x0000732d1c51fe87 offset=207):
   jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
ScopeDesc(pc=0x0000732d1c51fe87 offset=207):
   jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
ScopeDesc(pc=0x0000732d1c51fe87 offset=207):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
ScopeDesc(pc=0x0000732d1c51fe87 offset=207):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
ScopeDesc(pc=0x0000732d1c51fe87 offset=207):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
ScopeDesc(pc=0x0000732d1c51fe87 offset=207):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51fe87 offset=207):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51fe87 offset=207):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51ff29 offset=2a9):
   jdk.internal.foreign.AbstractMemorySegmentImpl::lambda$toArray$3@1 (line 321)
ScopeDesc(pc=0x0000732d1c51ff29 offset=2a9):
   jdk.internal.foreign.AbstractMemorySegmentImpl$$Lambda/0x000000004d00f540::apply@1
ScopeDesc(pc=0x0000732d1c51ff29 offset=2a9):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@20 (line 341)
ScopeDesc(pc=0x0000732d1c51ff29 offset=2a9):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51ff29 offset=2a9):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51ff29 offset=2a9):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51ff2d offset=2ad):
   jdk.internal.foreign.layout.AbstractLayout::byteAlignment@1 (line 80)
ScopeDesc(pc=0x0000732d1c51ff2d offset=2ad):
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@8 (line 95)
ScopeDesc(pc=0x0000732d1c51ff2d offset=2ad):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
ScopeDesc(pc=0x0000732d1c51ff2d offset=2ad):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
ScopeDesc(pc=0x0000732d1c51ff2d offset=2ad):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51ff2d offset=2ad):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51ff2d offset=2ad):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51ff31 offset=2b1):
   jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
ScopeDesc(pc=0x0000732d1c51ff31 offset=2b1):
   jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
ScopeDesc(pc=0x0000732d1c51ff31 offset=2b1):
   jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
ScopeDesc(pc=0x0000732d1c51ff31 offset=2b1):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
ScopeDesc(pc=0x0000732d1c51ff31 offset=2b1):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
ScopeDesc(pc=0x0000732d1c51ff31 offset=2b1):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
ScopeDesc(pc=0x0000732d1c51ff31 offset=2b1):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51ff31 offset=2b1):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51ff31 offset=2b1):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51ff38 offset=2b8):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c51ff38 offset=2b8):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c51ff38 offset=2b8):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c51ff38 offset=2b8):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c51ff38 offset=2b8):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c51ff38 offset=2b8):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c51ff3b offset=2bb):
   jdk.internal.foreign.SegmentFactories::fromArray@10 (line 105)
ScopeDesc(pc=0x0000732d1c51ff3b offset=2bb):
   java.lang.foreign.MemorySegment::ofArray@1 (line 1476)
ScopeDesc(pc=0x0000732d1c51ff3b offset=2bb):
   jdk.internal.foreign.AbstractMemorySegmentImpl$$Lambda/0x000000004d00f778::apply@4
ScopeDesc(pc=0x0000732d1c51ff3b offset=2bb):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@31 (line 342)
ScopeDesc(pc=0x0000732d1c51ff3b offset=2bb):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51ff3b offset=2bb):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51ff3b offset=2bb):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51ff57 offset=2d7):
   jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
ScopeDesc(pc=0x0000732d1c51ff57 offset=2d7):
   jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
ScopeDesc(pc=0x0000732d1c51ff57 offset=2d7):
   jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
ScopeDesc(pc=0x0000732d1c51ff57 offset=2d7):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
ScopeDesc(pc=0x0000732d1c51ff57 offset=2d7):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
ScopeDesc(pc=0x0000732d1c51ff57 offset=2d7):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
ScopeDesc(pc=0x0000732d1c51ff57 offset=2d7):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51ff57 offset=2d7):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51ff57 offset=2d7):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51ffa4 offset=324):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
ScopeDesc(pc=0x0000732d1c51ffa4 offset=324):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
ScopeDesc(pc=0x0000732d1c51ffa4 offset=324):
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
ScopeDesc(pc=0x0000732d1c51ffa4 offset=324):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
ScopeDesc(pc=0x0000732d1c51ffa4 offset=324):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
ScopeDesc(pc=0x0000732d1c51ffa4 offset=324):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51ffa4 offset=324):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51ffa4 offset=324):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51ffa9 offset=329):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::<init>@-1 (line 238)
ScopeDesc(pc=0x0000732d1c51ffa9 offset=329):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@8 (line 243)
ScopeDesc(pc=0x0000732d1c51ffa9 offset=329):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
ScopeDesc(pc=0x0000732d1c51ffa9 offset=329):
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
ScopeDesc(pc=0x0000732d1c51ffa9 offset=329):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
ScopeDesc(pc=0x0000732d1c51ffa9 offset=329):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
ScopeDesc(pc=0x0000732d1c51ffa9 offset=329):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c51ffa9 offset=329):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c51ffa9 offset=329):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c51fff7 offset=377):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c51fff7 offset=377):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c51fff7 offset=377):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c51fff7 offset=377):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c51fff7 offset=377):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c51fff7 offset=377):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520000 offset=380):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::<init>@11 (line 238)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x0000732d1c520000 offset=380):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@8 (line 243)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: stack[64],oop
ScopeDesc(pc=0x0000732d1c520000 offset=380):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x0000732d1c520000 offset=380):
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520000 offset=380):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520000 offset=380):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: stack[8]
    - l6: stack[16],oop
    - l7: empty
   Expression stack
    - @0: obj[743]
    - @1: stack[0],oop
    - @2: 0
    - @3: 0
    - @4: obj[744]
ScopeDesc(pc=0x0000732d1c520000 offset=380):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520000 offset=380):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520000 offset=380):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[742]
    - l4: empty
   Objects
    - 0: R obj[742], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[746], 0, 16, stack[24],oop
    - 1: R obj[746], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[743], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[745], 0, 16, reg rbp [10],oop
    - 3: R obj[745], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, reg rbp [10],oop
    - 4: R obj[744], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[747], 0, 16, stack[16],oop
    - 5: R obj[747], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
ScopeDesc(pc=0x0000732d1c52000c offset=38c):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c52000c offset=38c):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c52000c offset=38c):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c52000c offset=38c):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c52000c offset=38c):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c52000c offset=38c):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520010 offset=390):
   jdk.internal.foreign.layout.AbstractLayout::byteSize@1 (line 84)
ScopeDesc(pc=0x0000732d1c520010 offset=390):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@22 (line 611)
ScopeDesc(pc=0x0000732d1c520010 offset=390):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
ScopeDesc(pc=0x0000732d1c520010 offset=390):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
ScopeDesc(pc=0x0000732d1c520010 offset=390):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c520010 offset=390):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c520010 offset=390):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c520015 offset=395):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520015 offset=395):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520015 offset=395):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520015 offset=395):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520015 offset=395):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520015 offset=395):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520019 offset=399):
   jdk.internal.foreign.layout.AbstractLayout::byteSize@1 (line 84)
ScopeDesc(pc=0x0000732d1c520019 offset=399):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@29 (line 611)
ScopeDesc(pc=0x0000732d1c520019 offset=399):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
ScopeDesc(pc=0x0000732d1c520019 offset=399):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
ScopeDesc(pc=0x0000732d1c520019 offset=399):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c520019 offset=399):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c520019 offset=399):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c520022 offset=3a2):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520022 offset=3a2):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520022 offset=3a2):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520022 offset=3a2):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520022 offset=3a2):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520022 offset=3a2):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520026 offset=3a6):
   jdk.internal.foreign.layout.AbstractLayout::byteAlignment@1 (line 80)
ScopeDesc(pc=0x0000732d1c520026 offset=3a6):
   jdk.internal.foreign.Utils::isElementAligned@27 (line 209)
ScopeDesc(pc=0x0000732d1c520026 offset=3a6):
   jdk.internal.foreign.Utils::checkElementAlignment@1 (line 214)
ScopeDesc(pc=0x0000732d1c520026 offset=3a6):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@53 (line 614)
ScopeDesc(pc=0x0000732d1c520026 offset=3a6):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
ScopeDesc(pc=0x0000732d1c520026 offset=3a6):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
ScopeDesc(pc=0x0000732d1c520026 offset=3a6):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c520026 offset=3a6):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c520026 offset=3a6):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c52002f offset=3af):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c52002f offset=3af):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c52002f offset=3af):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c52002f offset=3af):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c52002f offset=3af):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c52002f offset=3af):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520033 offset=3b3):
   jdk.internal.foreign.layout.AbstractLayout::byteAlignment@1 (line 80)
ScopeDesc(pc=0x0000732d1c520033 offset=3b3):
   jdk.internal.foreign.Utils::isElementAligned@27 (line 209)
ScopeDesc(pc=0x0000732d1c520033 offset=3b3):
   jdk.internal.foreign.Utils::checkElementAlignment@1 (line 214)
ScopeDesc(pc=0x0000732d1c520033 offset=3b3):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@61 (line 615)
ScopeDesc(pc=0x0000732d1c520033 offset=3b3):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
ScopeDesc(pc=0x0000732d1c520033 offset=3b3):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
ScopeDesc(pc=0x0000732d1c520033 offset=3b3):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c520033 offset=3b3):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c520033 offset=3b3):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c5200cb offset=44b):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5200cb offset=44b):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5200cb offset=44b):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5200cb offset=44b):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5200cb offset=44b):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5200cb offset=44b):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5200cf offset=44f):
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::order@1 (line 83)
ScopeDesc(pc=0x0000732d1c5200cf offset=44f):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@157 (line 625)
ScopeDesc(pc=0x0000732d1c5200cf offset=44f):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
ScopeDesc(pc=0x0000732d1c5200cf offset=44f):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
ScopeDesc(pc=0x0000732d1c5200cf offset=44f):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c5200cf offset=44f):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c5200cf offset=44f):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c5200d3 offset=453):
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::order@1 (line 83)
ScopeDesc(pc=0x0000732d1c5200d3 offset=453):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@150 (line 625)
ScopeDesc(pc=0x0000732d1c5200d3 offset=453):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
ScopeDesc(pc=0x0000732d1c5200d3 offset=453):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
ScopeDesc(pc=0x0000732d1c5200d3 offset=453):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c5200d3 offset=453):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c5200d3 offset=453):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c520103 offset=483):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520103 offset=483):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520103 offset=483):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520103 offset=483):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520103 offset=483):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520103 offset=483):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c52013d offset=4bd):
   jdk.internal.misc.Unsafe::copyMemory@29 (line 812)
ScopeDesc(pc=0x0000732d1c52013d offset=4bd):
   jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
ScopeDesc(pc=0x0000732d1c52013d offset=4bd):
   jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
ScopeDesc(pc=0x0000732d1c52013d offset=4bd):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
ScopeDesc(pc=0x0000732d1c52013d offset=4bd):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
ScopeDesc(pc=0x0000732d1c52013d offset=4bd):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
ScopeDesc(pc=0x0000732d1c52013d offset=4bd):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c52013d offset=4bd):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c52013d offset=4bd):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c52018b offset=50b):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@3 (line 980)
ScopeDesc(pc=0x0000732d1c52018b offset=50b):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
ScopeDesc(pc=0x0000732d1c52018b offset=50b):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c52018b offset=50b):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c52018b offset=50b):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c52018b offset=50b):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c52018b offset=50b):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c5201a0 offset=520):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5201a0 offset=520):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5201a0 offset=520):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5201a0 offset=520):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5201a0 offset=520):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5201a0 offset=520):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5201a4 offset=524):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
ScopeDesc(pc=0x0000732d1c5201a4 offset=524):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
ScopeDesc(pc=0x0000732d1c5201a4 offset=524):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c5201a4 offset=524):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c5201a4 offset=524):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c5201a4 offset=524):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c5201a4 offset=524):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c5201c5 offset=545):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5201c5 offset=545):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5201c5 offset=545):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5201c5 offset=545):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5201c5 offset=545):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5201c5 offset=545):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5201c9 offset=549):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
ScopeDesc(pc=0x0000732d1c5201c9 offset=549):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
ScopeDesc(pc=0x0000732d1c5201c9 offset=549):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c5201c9 offset=549):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c5201c9 offset=549):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c5201c9 offset=549):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c5201c9 offset=549):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c5201e3 offset=563):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5201e3 offset=563):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5201e3 offset=563):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5201e3 offset=563):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5201e3 offset=563):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5201e3 offset=563):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5201e6 offset=566):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
ScopeDesc(pc=0x0000732d1c5201e6 offset=566):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
ScopeDesc(pc=0x0000732d1c5201e6 offset=566):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c5201e6 offset=566):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c5201e6 offset=566):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c5201e6 offset=566):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c5201e6 offset=566):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c5201eb offset=56b):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5201eb offset=56b):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5201eb offset=56b):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5201eb offset=56b):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5201eb offset=56b):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5201eb offset=56b):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5201f0 offset=570):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
ScopeDesc(pc=0x0000732d1c5201f0 offset=570):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
ScopeDesc(pc=0x0000732d1c5201f0 offset=570):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c5201f0 offset=570):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c5201f0 offset=570):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c5201f0 offset=570):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c5201f0 offset=570):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c5201ff offset=57f):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5201ff offset=57f):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5201ff offset=57f):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5201ff offset=57f):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5201ff offset=57f):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5201ff offset=57f):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520204 offset=584):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
ScopeDesc(pc=0x0000732d1c520204 offset=584):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
ScopeDesc(pc=0x0000732d1c520204 offset=584):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c520204 offset=584):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c520204 offset=584):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c520204 offset=584):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c520204 offset=584):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c520209 offset=589):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
ScopeDesc(pc=0x0000732d1c520209 offset=589):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
ScopeDesc(pc=0x0000732d1c520209 offset=589):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c520209 offset=589):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c520209 offset=589):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c520209 offset=589):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c520209 offset=589):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c520218 offset=598):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520218 offset=598):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520218 offset=598):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520218 offset=598):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520218 offset=598):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520218 offset=598):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c52021d offset=59d):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
ScopeDesc(pc=0x0000732d1c52021d offset=59d):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
ScopeDesc(pc=0x0000732d1c52021d offset=59d):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c52021d offset=59d):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c52021d offset=59d):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c52021d offset=59d):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c52021d offset=59d):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c520222 offset=5a2):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
ScopeDesc(pc=0x0000732d1c520222 offset=5a2):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
ScopeDesc(pc=0x0000732d1c520222 offset=5a2):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c520222 offset=5a2):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c520222 offset=5a2):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c520222 offset=5a2):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c520222 offset=5a2):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c520231 offset=5b1):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520231 offset=5b1):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520231 offset=5b1):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520231 offset=5b1):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520231 offset=5b1):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520231 offset=5b1):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520236 offset=5b6):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
ScopeDesc(pc=0x0000732d1c520236 offset=5b6):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
ScopeDesc(pc=0x0000732d1c520236 offset=5b6):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c520236 offset=5b6):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c520236 offset=5b6):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c520236 offset=5b6):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c520236 offset=5b6):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c52023b offset=5bb):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
ScopeDesc(pc=0x0000732d1c52023b offset=5bb):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
ScopeDesc(pc=0x0000732d1c52023b offset=5bb):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c52023b offset=5bb):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c52023b offset=5bb):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c52023b offset=5bb):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c52023b offset=5bb):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c52024a offset=5ca):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c52024a offset=5ca):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c52024a offset=5ca):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c52024a offset=5ca):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c52024a offset=5ca):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c52024a offset=5ca):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c52024f offset=5cf):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
ScopeDesc(pc=0x0000732d1c52024f offset=5cf):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
ScopeDesc(pc=0x0000732d1c52024f offset=5cf):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c52024f offset=5cf):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c52024f offset=5cf):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c52024f offset=5cf):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c52024f offset=5cf):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c52026f offset=5ef):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@15 (line 982)
ScopeDesc(pc=0x0000732d1c52026f offset=5ef):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
ScopeDesc(pc=0x0000732d1c52026f offset=5ef):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c52026f offset=5ef):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c52026f offset=5ef):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c52026f offset=5ef):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c52026f offset=5ef):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c520272 offset=5f2):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
ScopeDesc(pc=0x0000732d1c520272 offset=5f2):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
ScopeDesc(pc=0x0000732d1c520272 offset=5f2):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c520272 offset=5f2):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c520272 offset=5f2):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c520272 offset=5f2):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c520272 offset=5f2):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c520277 offset=5f7):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@19 (line 982)
ScopeDesc(pc=0x0000732d1c520277 offset=5f7):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
ScopeDesc(pc=0x0000732d1c520277 offset=5f7):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c520277 offset=5f7):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c520277 offset=5f7):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c520277 offset=5f7):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c520277 offset=5f7):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c520286 offset=606):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520286 offset=606):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520286 offset=606):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520286 offset=606):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520286 offset=606):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520286 offset=606):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c52028b offset=60b):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@37 (line 984)
ScopeDesc(pc=0x0000732d1c52028b offset=60b):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
ScopeDesc(pc=0x0000732d1c52028b offset=60b):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c52028b offset=60b):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c52028b offset=60b):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c52028b offset=60b):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c52028b offset=60b):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c520294 offset=614):
   jdk.internal.vm.vector.VectorSupport$VectorShuffle::<init>@2 (line 185)
ScopeDesc(pc=0x0000732d1c520294 offset=614):
   jdk.incubator.vector.VectorShuffle::<init>@2 (line 141)
ScopeDesc(pc=0x0000732d1c520294 offset=614):
   jdk.incubator.vector.AbstractShuffle::<init>@2 (line 38)
ScopeDesc(pc=0x0000732d1c520294 offset=614):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@2 (line 859)
ScopeDesc(pc=0x0000732d1c520294 offset=614):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@6 (line 865)
ScopeDesc(pc=0x0000732d1c520294 offset=614):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c520294 offset=614):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c520294 offset=614):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c520294 offset=614):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c520294 offset=614):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c5202be offset=63e):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5202be offset=63e):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5202be offset=63e):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5202be offset=63e):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5202be offset=63e):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5202be offset=63e):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5202c3 offset=643):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
ScopeDesc(pc=0x0000732d1c5202c3 offset=643):
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 410)
ScopeDesc(pc=0x0000732d1c5202c3 offset=643):
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
ScopeDesc(pc=0x0000732d1c5202c3 offset=643):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@19 (line 937)
ScopeDesc(pc=0x0000732d1c5202c3 offset=643):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5202c9 offset=649):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5202c9 offset=649):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5202c9 offset=649):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5202c9 offset=649):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5202c9 offset=649):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@29 (line 939)
ScopeDesc(pc=0x0000732d1c5202c9 offset=649):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5202f3 offset=673):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5202f3 offset=673):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5202f3 offset=673):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5202f3 offset=673):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5202f3 offset=673):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5202f3 offset=673):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5202f8 offset=678):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
ScopeDesc(pc=0x0000732d1c5202f8 offset=678):
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
ScopeDesc(pc=0x0000732d1c5202f8 offset=678):
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
ScopeDesc(pc=0x0000732d1c5202f8 offset=678):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@40 (line 940)
ScopeDesc(pc=0x0000732d1c5202f8 offset=678):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520318 offset=698):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520318 offset=698):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520318 offset=698):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520318 offset=698):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520318 offset=698):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520318 offset=698):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c52031d offset=69d):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
ScopeDesc(pc=0x0000732d1c52031d offset=69d):
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
ScopeDesc(pc=0x0000732d1c52031d offset=69d):
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
ScopeDesc(pc=0x0000732d1c52031d offset=69d):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@70 (line 943)
ScopeDesc(pc=0x0000732d1c52031d offset=69d):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c52033d offset=6bd):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c52033d offset=6bd):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c52033d offset=6bd):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c52033d offset=6bd):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c52033d offset=6bd):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c52033d offset=6bd):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520342 offset=6c2):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
ScopeDesc(pc=0x0000732d1c520342 offset=6c2):
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
ScopeDesc(pc=0x0000732d1c520342 offset=6c2):
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
ScopeDesc(pc=0x0000732d1c520342 offset=6c2):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@102 (line 946)
ScopeDesc(pc=0x0000732d1c520342 offset=6c2):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520372 offset=6f2):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520372 offset=6f2):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520372 offset=6f2):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520372 offset=6f2):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520372 offset=6f2):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520372 offset=6f2):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c52037c offset=6fc):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
   Locals
    - l0: empty
    - l1: a 'java/nio/ByteOrder'{0x00000000c8f05120}
    - l2: 0
    - l3: 1
    - l4: a 'java/util/Optional'{0x00000000c8f2c1b8}
ScopeDesc(pc=0x0000732d1c52037c offset=6fc):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x0000732d1c52037c offset=6fc):
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c52037c offset=6fc):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c52037c offset=6fc):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@29 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   Expression stack
    - @0: obj[190]
ScopeDesc(pc=0x0000732d1c52037c offset=6fc):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[189]
    - l4: empty
   Objects
    - 0: R obj[189], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, reg rbp [10],long, 0, obj[192], 0, 16, stack[8],oop
    - 1: R obj[192], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[8],oop
    - 2: R obj[190], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[191], 0, 16, stack[32],oop
    - 3: R obj[191], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
ScopeDesc(pc=0x0000732d1c5203b8 offset=738):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
   Locals
    - l0: empty
    - l1: a 'java/nio/ByteOrder'{0x00000000c8f05120}
    - l2: 0
    - l3: reg rbp [10],long
    - l4: stack[12],narrowoop
ScopeDesc(pc=0x0000732d1c5203b8 offset=738):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x0000732d1c5203b8 offset=738):
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c5203b8 offset=738):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c5203b8 offset=738):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: stack[8]
    - l6: stack[16],oop
    - l7: empty
   Expression stack
    - @0: obj[704]
    - @1: stack[0],oop
    - @2: 0
    - @3: 0
    - @4: obj[705]
ScopeDesc(pc=0x0000732d1c5203b8 offset=738):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c5203b8 offset=738):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c5203b8 offset=738):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[699]
    - l4: empty
   Objects
    - 0: R obj[699], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[709], 0, 16, stack[24],oop
    - 1: R obj[709], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[704], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[708], 0, 16, stack[32],oop
    - 3: R obj[708], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[705], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[713], 0, 16, stack[16],oop
    - 5: R obj[713], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
ScopeDesc(pc=0x0000732d1c5203d9 offset=759):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5203d9 offset=759):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5203d9 offset=759):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5203d9 offset=759):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5203d9 offset=759):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5203d9 offset=759):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5203e4 offset=764):
   jdk.internal.foreign.AbstractMemorySegmentImpl::lambda$toArray$3@1 (line 321)
   Locals
    - l0: empty
ScopeDesc(pc=0x0000732d1c5203e4 offset=764):
   jdk.internal.foreign.AbstractMemorySegmentImpl$$Lambda/0x000000004d00f540::apply@1
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c5203e4 offset=764):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@20 (line 341)
   Locals
    - l0: obj[668]
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: empty
    - l4: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
    - l5: stack[0]
    - l6: empty
    - l7: empty
ScopeDesc(pc=0x0000732d1c5203e4 offset=764):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c5203e4 offset=764):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c5203e4 offset=764):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[667]
    - l4: empty
   Objects
    - 0: R obj[667], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[670], 0, 16, stack[24],oop
    - 1: R obj[670], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[668], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[669], 0, 16, stack[32],oop
    - 3: R obj[669], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
ScopeDesc(pc=0x0000732d1c52040a offset=78a):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c52040a offset=78a):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c52040a offset=78a):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c52040a offset=78a):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c52040a offset=78a):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c52040a offset=78a):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520414 offset=794):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@3 (line 980)
   Locals
    - l0: stack[16],oop
    - l1: 0
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x0000732d1c520414 offset=794):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: obj[790]
ScopeDesc(pc=0x0000732d1c520414 offset=794):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: obj[790]
ScopeDesc(pc=0x0000732d1c520414 offset=794):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x0000732d1c520414 offset=794):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x0000732d1c520414 offset=794):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520414 offset=794):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[789]
    - l4: empty
   Objects
    - 0: R obj[789], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[791], 0, 16, stack[24],oop
    - 1: R obj[791], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[790], jdk.incubator.vector.Byte256Vector$Byte256Shuffle
        Fields: null
ScopeDesc(pc=0x0000732d1c52044b offset=7cb):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c52044b offset=7cb):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c52044b offset=7cb):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c52044b offset=7cb):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c52044b offset=7cb):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c52044b offset=7cb):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520454 offset=7d4):
   jdk.incubator.vector.AbstractShuffle::checkIndex0@12 (line 136)  reexecute=true
   Locals
    - l0: stack[16]
    - l1: 32
    - l2: -1
    - l3: stack[12]
   Expression stack
    - @0: stack[12]
    - @1: stack[16]
ScopeDesc(pc=0x0000732d1c520454 offset=7d4):
   jdk.incubator.vector.AbstractShuffle::partiallyWrapIndex@3 (line 129)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520454 offset=7d4):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@27 (line 983)
   Locals
    - l0: reg rbp [10],oop
    - l1: 0
    - l2: stack[32],oop
    - l3: stack[0]
    - l4: empty
ScopeDesc(pc=0x0000732d1c520454 offset=7d4):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: obj[1512]
ScopeDesc(pc=0x0000732d1c520454 offset=7d4):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: obj[1512]
ScopeDesc(pc=0x0000732d1c520454 offset=7d4):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x0000732d1c520454 offset=7d4):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x0000732d1c520454 offset=7d4):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520454 offset=7d4):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1511]
    - l4: empty
   Objects
    - 0: R obj[1511], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1538], 0, 16, stack[24],oop
    - 1: R obj[1538], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1512], jdk.incubator.vector.Byte256Vector$Byte256Shuffle
        Fields: null
ScopeDesc(pc=0x0000732d1c520475 offset=7f5):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520475 offset=7f5):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520475 offset=7f5):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520475 offset=7f5):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520475 offset=7f5):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520475 offset=7f5):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520480 offset=800):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkArraySize@53 (line 393)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: 128
    - @2: 0
    - @3: 0
ScopeDesc(pc=0x0000732d1c520480 offset=800):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@12 (line 340)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
ScopeDesc(pc=0x0000732d1c520480 offset=800):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520480 offset=800):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520480 offset=800):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x0000732d1c5204aa offset=82a):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5204aa offset=82a):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5204aa offset=82a):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5204aa offset=82a):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5204aa offset=82a):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5204aa offset=82a):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5204b4 offset=834):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@12 (line 981)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
    - l1: 0
    - l2: stack[0],oop
    - l3: 0
    - l4: empty
   Expression stack
    - @0: 0
    - @1: 32
ScopeDesc(pc=0x0000732d1c5204b4 offset=834):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: obj[1123]
ScopeDesc(pc=0x0000732d1c5204b4 offset=834):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
   Expression stack
    - @0: obj[1123]
ScopeDesc(pc=0x0000732d1c5204b4 offset=834):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x0000732d1c5204b4 offset=834):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x0000732d1c5204b4 offset=834):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c5204b4 offset=834):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1122]
    - l4: empty
   Objects
    - 0: R obj[1122], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1127], 0, 16, stack[24],oop
    - 1: R obj[1127], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1123], jdk.incubator.vector.Byte256Vector$Byte256Shuffle
        Fields: null
ScopeDesc(pc=0x0000732d1c520506 offset=886):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520506 offset=886):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520506 offset=886):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520506 offset=886):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520506 offset=886):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520506 offset=886):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520510 offset=890):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: 0
    - @2: 0
    - @3: stack[0],long
    - @4: obj[68]
ScopeDesc(pc=0x0000732d1c520510 offset=890):
   jdk.internal.foreign.AbstractMemorySegmentImpl::asSlice@3 (line 103)
   Locals
    - l0: obj[68]
    - l1: 0
    - l2: 0
    - l3: 0
    - l4: 128
ScopeDesc(pc=0x0000732d1c520510 offset=890):
   jdk.internal.foreign.AbstractMemorySegmentImpl::asSlice@3 (line 70)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x0000732d1c520510 offset=890):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@15 (line 362)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520510 offset=890):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[67]
    - l4: empty
   Objects
    - 0: R obj[67], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, reg rbp [10],long, 0, obj[73], 0, 16, stack[24],oop
    - 1: R obj[73], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[68], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[16],long, 0, obj[74], 0, 16, stack[32],oop
    - 3: R obj[74], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
ScopeDesc(pc=0x0000732d1c52053a offset=8ba):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c52053a offset=8ba):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c52053a offset=8ba):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c52053a offset=8ba):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c52053a offset=8ba):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c52053a offset=8ba):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520544 offset=8c4):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: 0
    - @2: 0
    - @3: stack[0],long
    - @4: obj[102]
ScopeDesc(pc=0x0000732d1c520544 offset=8c4):
   jdk.internal.foreign.AbstractMemorySegmentImpl::asSlice@3 (line 103)
   Locals
    - l0: obj[102]
    - l1: 0
    - l2: 0
    - l3: 0
    - l4: 128
ScopeDesc(pc=0x0000732d1c520544 offset=8c4):
   jdk.internal.foreign.AbstractMemorySegmentImpl::asSlice@3 (line 70)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x0000732d1c520544 offset=8c4):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@15 (line 362)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520544 offset=8c4):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[101]
    - l4: empty
   Objects
    - 0: R obj[101], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, reg rbp [10],long, 0, obj[103], 0, 16, stack[24],oop
    - 1: R obj[103], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[102], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[16],long, 0, obj[104], 0, 16, stack[32],oop
    - 3: R obj[104], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
ScopeDesc(pc=0x0000732d1c52057e offset=8fe):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c52057e offset=8fe):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c52057e offset=8fe):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c52057e offset=8fe):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c52057e offset=8fe):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c52057e offset=8fe):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520588 offset=908):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: 0
    - @2: 0
    - @3: stack[72],long
    - @4: obj[1056]
ScopeDesc(pc=0x0000732d1c520588 offset=908):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess@9 (line 357)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x0000732d1c520588 offset=908):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@125 (line 623)
   Locals
    - l0: empty
    - l1: stack[16],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[48],oop
    - l6: 0
    - l7: 0
    - l8: empty
    - l9: empty
    - l10: obj[1056]
    - l11: obj[1057]
    - l12: 0
    - l13: stack[64],long
ScopeDesc(pc=0x0000732d1c520588 offset=908):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000732d1c520588 offset=908):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: reg rbp [10],oop
    - l7: empty
ScopeDesc(pc=0x0000732d1c520588 offset=908):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520588 offset=908):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520588 offset=908):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1055]
    - l4: empty
   Objects
    - 0: R obj[1055], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1059], 0, 16, stack[24],oop
    - 1: R obj[1059], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1056], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[1058], 0, 16, stack[32],oop
    - 3: R obj[1058], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[1057], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[1060], 0, 16, reg rbp [10],oop
    - 5: R obj[1060], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, reg rbp [10],oop
ScopeDesc(pc=0x0000732d1c5205b3 offset=933):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5205b3 offset=933):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5205b3 offset=933):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5205b3 offset=933):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5205b3 offset=933):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5205b3 offset=933):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5205bc offset=93c):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: 0
    - @2: 0
    - @3: reg rbp [10],long
    - @4: obj[1091]
ScopeDesc(pc=0x0000732d1c5205bc offset=93c):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess@9 (line 357)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x0000732d1c5205bc offset=93c):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@125 (line 623)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[64],oop
    - l6: 0
    - l7: 0
    - l8: empty
    - l9: empty
    - l10: obj[1091]
    - l11: obj[1092]
    - l12: 0
    - l13: stack[72],long
ScopeDesc(pc=0x0000732d1c5205bc offset=93c):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000732d1c5205bc offset=93c):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
ScopeDesc(pc=0x0000732d1c5205bc offset=93c):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c5205bc offset=93c):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c5205bc offset=93c):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1090]
    - l4: empty
   Objects
    - 0: R obj[1090], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1094], 0, 16, stack[24],oop
    - 1: R obj[1094], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1091], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[1093], 0, 16, stack[32],oop
    - 3: R obj[1093], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[1092], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[1095], 0, 16, stack[16],oop
    - 5: R obj[1095], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
ScopeDesc(pc=0x0000732d1c5205e7 offset=967):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5205e7 offset=967):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5205e7 offset=967):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5205e7 offset=967):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5205e7 offset=967):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5205e7 offset=967):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5205f0 offset=970):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: 0
    - @2: 0
    - @3: reg rbp [10],long
    - @4: obj[1222]
ScopeDesc(pc=0x0000732d1c5205f0 offset=970):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess@9 (line 357)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x0000732d1c5205f0 offset=970):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@135 (line 624)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[64],oop
    - l6: 0
    - l7: 0
    - l8: empty
    - l9: empty
    - l10: obj[1221]
    - l11: obj[1222]
    - l12: 0
    - l13: stack[72],long
ScopeDesc(pc=0x0000732d1c5205f0 offset=970):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000732d1c5205f0 offset=970):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
ScopeDesc(pc=0x0000732d1c5205f0 offset=970):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c5205f0 offset=970):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c5205f0 offset=970):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1220]
    - l4: empty
   Objects
    - 0: R obj[1220], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1224], 0, 16, stack[24],oop
    - 1: R obj[1224], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1221], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[1223], 0, 16, stack[32],oop
    - 3: R obj[1223], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[1222], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[1225], 0, 16, stack[16],oop
    - 5: R obj[1225], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
ScopeDesc(pc=0x0000732d1c52061b offset=99b):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c52061b offset=99b):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c52061b offset=99b):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c52061b offset=99b):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c52061b offset=99b):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c52061b offset=99b):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520624 offset=9a4):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@16 (line 403)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: 0
    - @1: 0
    - @2: 0
    - @3: reg rbp [10],long
    - @4: obj[1257]
ScopeDesc(pc=0x0000732d1c520624 offset=9a4):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess@9 (line 357)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x0000732d1c520624 offset=9a4):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@135 (line 624)
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[64],oop
    - l6: 0
    - l7: 0
    - l8: empty
    - l9: empty
    - l10: obj[1256]
    - l11: obj[1257]
    - l12: 0
    - l13: stack[72],long
ScopeDesc(pc=0x0000732d1c520624 offset=9a4):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000732d1c520624 offset=9a4):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
ScopeDesc(pc=0x0000732d1c520624 offset=9a4):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520624 offset=9a4):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520624 offset=9a4):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1255]
    - l4: empty
   Objects
    - 0: R obj[1255], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1259], 0, 16, stack[24],oop
    - 1: R obj[1259], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1256], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[1258], 0, 16, stack[32],oop
    - 3: R obj[1258], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[1257], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[1260], 0, 16, stack[16],oop
    - 5: R obj[1260], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
ScopeDesc(pc=0x0000732d1c52066d offset=9ed):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c52066d offset=9ed):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c52066d offset=9ed):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c52066d offset=9ed):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c52066d offset=9ed):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c52066d offset=9ed):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520672 offset=9f2):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
ScopeDesc(pc=0x0000732d1c520672 offset=9f2):
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 410)
ScopeDesc(pc=0x0000732d1c520672 offset=9f2):
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
ScopeDesc(pc=0x0000732d1c520672 offset=9f2):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@19 (line 937)
ScopeDesc(pc=0x0000732d1c520672 offset=9f2):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520690 offset=a10):
   java.util.Objects::checkIndex@3 (line 441)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: 0
    - @1: 0
    - @2: 0
    - @3: reg rbp [10],long
    - @4: null
ScopeDesc(pc=0x0000732d1c520690 offset=a10):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@45 (line 68)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x0000732d1c520690 offset=a10):
   jdk.incubator.vector.IntVector::intoMemorySegment@32 (line 3453)
   Locals
    - l0: obj[1351]
    - l1: obj[1349]
    - l2: empty
    - l3: empty
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
ScopeDesc(pc=0x0000732d1c520690 offset=a10):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@29 (line 939)
   Locals
    - l0: empty
    - l1: obj[1349]
    - l2: 0
    - l3: 0
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
    - l5: a 'jdk/incubator/vector/IntVector$IntSpecies'{0x00000000c8ecd658}
    - l6: obj[1350]
ScopeDesc(pc=0x0000732d1c520690 offset=a10):
   test_ms::micro@30 (line 16)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 0: R obj[1349], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1352], 0, 16, stack[8],oop
    - 1: R obj[1352], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[8],oop
    - 2: R obj[1350], jdk.incubator.vector.Byte256Vector
        Fields: stack[96],vector
    - 3: R obj[1351], jdk.incubator.vector.Int256Vector
        Fields: stack[64],vector
ScopeDesc(pc=0x0000732d1c5206b1 offset=a31):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5206b1 offset=a31):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5206b1 offset=a31):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5206b1 offset=a31):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5206b1 offset=a31):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5206b1 offset=a31):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5206b6 offset=a36):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
ScopeDesc(pc=0x0000732d1c5206b6 offset=a36):
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 410)
ScopeDesc(pc=0x0000732d1c5206b6 offset=a36):
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
ScopeDesc(pc=0x0000732d1c5206b6 offset=a36):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@19 (line 937)
ScopeDesc(pc=0x0000732d1c5206b6 offset=a36):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5206d4 offset=a54):
   java.util.Objects::checkIndex@3 (line 441)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: 0
    - @1: 0
    - @2: 0
    - @3: reg rbp [10],long
    - @4: null
ScopeDesc(pc=0x0000732d1c5206d4 offset=a54):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@45 (line 68)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x0000732d1c5206d4 offset=a54):
   jdk.incubator.vector.IntVector::intoMemorySegment@32 (line 3453)
   Locals
    - l0: obj[1186]
    - l1: obj[1184]
    - l2: empty
    - l3: empty
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
ScopeDesc(pc=0x0000732d1c5206d4 offset=a54):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@29 (line 939)
   Locals
    - l0: empty
    - l1: obj[1184]
    - l2: 0
    - l3: 0
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
    - l5: a 'jdk/incubator/vector/IntVector$IntSpecies'{0x00000000c8ecd658}
    - l6: obj[1185]
ScopeDesc(pc=0x0000732d1c5206d4 offset=a54):
   test_ms::micro@30 (line 16)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 0: R obj[1184], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1190], 0, 16, stack[8],oop
    - 1: R obj[1190], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[8],oop
    - 2: R obj[1185], jdk.incubator.vector.Byte256Vector
        Fields: stack[96],vector
    - 3: R obj[1186], jdk.incubator.vector.Int256Vector
        Fields: stack[64],vector
ScopeDesc(pc=0x0000732d1c5206f5 offset=a75):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5206f5 offset=a75):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5206f5 offset=a75):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5206f5 offset=a75):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5206f5 offset=a75):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5206f5 offset=a75):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5206fa offset=a7a):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
ScopeDesc(pc=0x0000732d1c5206fa offset=a7a):
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
ScopeDesc(pc=0x0000732d1c5206fa offset=a7a):
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
ScopeDesc(pc=0x0000732d1c5206fa offset=a7a):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@40 (line 940)
ScopeDesc(pc=0x0000732d1c5206fa offset=a7a):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c52071c offset=a9c):
   java.util.Objects::checkIndex@3 (line 441)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: 0
    - @1: 32
    - @2: 0
    - @3: reg rbp [10],long
    - @4: null
ScopeDesc(pc=0x0000732d1c52071c offset=a9c):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@45 (line 68)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x0000732d1c52071c offset=a9c):
   jdk.incubator.vector.IntVector::intoMemorySegment@32 (line 3453)
   Locals
    - l0: obj[1453]
    - l1: obj[1451]
    - l2: empty
    - l3: empty
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
ScopeDesc(pc=0x0000732d1c52071c offset=a9c):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@59 (line 942)
   Locals
    - l0: empty
    - l1: obj[1451]
    - l2: 0
    - l3: 0
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
    - l5: a 'jdk/incubator/vector/IntVector$IntSpecies'{0x00000000c8ecd658}
    - l6: obj[1452]
ScopeDesc(pc=0x0000732d1c52071c offset=a9c):
   test_ms::micro@30 (line 16)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 0: R obj[1451], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[32],long, 0, obj[1454], 0, 16, stack[48],oop
    - 1: R obj[1454], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[48],oop
    - 2: R obj[1452], jdk.incubator.vector.Byte256Vector
        Fields: stack[64],vector
    - 3: R obj[1453], jdk.incubator.vector.Int256Vector
        Fields: stack[0],vector
ScopeDesc(pc=0x0000732d1c52073d offset=abd):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c52073d offset=abd):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c52073d offset=abd):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c52073d offset=abd):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c52073d offset=abd):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c52073d offset=abd):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520742 offset=ac2):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
ScopeDesc(pc=0x0000732d1c520742 offset=ac2):
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
ScopeDesc(pc=0x0000732d1c520742 offset=ac2):
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
ScopeDesc(pc=0x0000732d1c520742 offset=ac2):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@70 (line 943)
ScopeDesc(pc=0x0000732d1c520742 offset=ac2):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520764 offset=ae4):
   java.util.Objects::checkIndex@3 (line 441)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: 0
    - @1: 64
    - @2: 0
    - @3: reg rbp [10],long
    - @4: null
ScopeDesc(pc=0x0000732d1c520764 offset=ae4):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@45 (line 68)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x0000732d1c520764 offset=ae4):
   jdk.incubator.vector.IntVector::intoMemorySegment@32 (line 3453)
   Locals
    - l0: obj[1594]
    - l1: obj[1592]
    - l2: empty
    - l3: empty
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
ScopeDesc(pc=0x0000732d1c520764 offset=ae4):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@91 (line 945)
   Locals
    - l0: empty
    - l1: obj[1592]
    - l2: 0
    - l3: 0
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
    - l5: a 'jdk/incubator/vector/IntVector$IntSpecies'{0x00000000c8ecd658}
    - l6: obj[1593]
ScopeDesc(pc=0x0000732d1c520764 offset=ae4):
   test_ms::micro@30 (line 16)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 0: R obj[1592], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[32],long, 0, obj[1595], 0, 16, stack[48],oop
    - 1: R obj[1595], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[48],oop
    - 2: R obj[1593], jdk.incubator.vector.Byte256Vector
        Fields: stack[64],vector
    - 3: R obj[1594], jdk.incubator.vector.Int256Vector
        Fields: stack[0],vector
ScopeDesc(pc=0x0000732d1c520785 offset=b05):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520785 offset=b05):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520785 offset=b05):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520785 offset=b05):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520785 offset=b05):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520785 offset=b05):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c52078a offset=b0a):
   jdk.incubator.vector.AbstractVector::convert0@257 (line 756)
ScopeDesc(pc=0x0000732d1c52078a offset=b0a):
   jdk.incubator.vector.AbstractVector::convertShapeTemplate@241 (line 415)
ScopeDesc(pc=0x0000732d1c52078a offset=b0a):
   jdk.incubator.vector.Byte256Vector::convertShape@4 (line 241)
ScopeDesc(pc=0x0000732d1c52078a offset=b0a):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@102 (line 946)
ScopeDesc(pc=0x0000732d1c52078a offset=b0a):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c52079e offset=b1e):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c52079e offset=b1e):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c52079e offset=b1e):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c52079e offset=b1e):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c52079e offset=b1e):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c52079e offset=b1e):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5207a8 offset=b28):
   java.util.Objects::checkIndex@3 (line 441)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: 0
    - @1: 96
    - @2: 0
    - @3: reg rbp [10],long
    - @4: null
ScopeDesc(pc=0x0000732d1c5207a8 offset=b28):
   jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@45 (line 68)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x0000732d1c5207a8 offset=b28):
   jdk.incubator.vector.IntVector::intoMemorySegment@32 (line 3453)
   Locals
    - l0: obj[1429]
    - l1: obj[1430]
    - l2: empty
    - l3: empty
    - l4: a 'java/nio/ByteOrder'{0x00000000c8f05120}
ScopeDesc(pc=0x0000732d1c5207a8 offset=b28):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
ScopeDesc(pc=0x0000732d1c5207a8 offset=b28):
   test_ms::micro@30 (line 16)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Objects
    - 0: R obj[1429], jdk.incubator.vector.Int256Vector
        Fields: stack[0],vector
    - 1: R obj[1430], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[32],long, 0, obj[1431], 0, 16, stack[48],oop
    - 2: R obj[1431], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[48],oop
ScopeDesc(pc=0x0000732d1c5207d3 offset=b53):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5207d3 offset=b53):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5207d3 offset=b53):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5207d3 offset=b53):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5207d3 offset=b53):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5207d3 offset=b53):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5207dc offset=b5c):
   java.lang.Class::reflectionData@31 (line 2836)  reexecute=true
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: stack[8],narrowoop
    - l2: stack[16]
    - l3: empty
   Expression stack
    - @0: reg rbp [10],int
    - @1: stack[16]
ScopeDesc(pc=0x0000732d1c5207dc offset=b5c):
   java.lang.Class::getSimpleName@1 (line 1669)
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x0000732d1c5207dc offset=b5c):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   Locals
    - l0: obj[374]
    - l1: empty
    - l2: stack[0],oop
    - l3: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'{0x00000000c8ea2000}
    - l4: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
    - l5: empty
    - l6: empty
    - l7: empty
   Expression stack
    - @0: obj[374]
ScopeDesc(pc=0x0000732d1c5207dc offset=b5c):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c5207dc offset=b5c):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c5207dc offset=b5c):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[373]
    - l4: empty
   Objects
    - 0: R obj[373], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[376], 0, 16, stack[24],oop
    - 1: R obj[376], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[374], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[375], 0, 16, stack[32],oop
    - 3: R obj[375], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
ScopeDesc(pc=0x0000732d1c52081b offset=b9b):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c52081b offset=b9b):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c52081b offset=b9b):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c52081b offset=b9b):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c52081b offset=b9b):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c52081b offset=b9b):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520824 offset=ba4):
   jdk.internal.foreign.Utils::isAligned@7 (line 201)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x0000732d1c520824 offset=ba4):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkArraySize@6 (line 390)
   Locals
    - l0: obj[441]
    - l1: stack[8],narrowoop
    - l2: stack[12]
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x0000732d1c520824 offset=ba4):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@12 (line 340)
   Locals
    - l0: obj[441]
    - l1: empty
    - l2: stack[0],oop
    - l3: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'{0x00000000c8ea2000}
    - l4: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
    - l5: empty
    - l6: empty
    - l7: empty
ScopeDesc(pc=0x0000732d1c520824 offset=ba4):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520824 offset=ba4):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520824 offset=ba4):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[440]
    - l4: empty
   Objects
    - 0: R obj[440], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[447], 0, 16, stack[24],oop
    - 1: R obj[447], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[441], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[446], 0, 16, stack[32],oop
    - 3: R obj[446], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
ScopeDesc(pc=0x0000732d1c520843 offset=bc3):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520843 offset=bc3):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520843 offset=bc3):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520843 offset=bc3):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520843 offset=bc3):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520843 offset=bc3):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c52086c offset=bec):
   jdk.internal.foreign.AbstractMemorySegmentImpl::isAlignedForElement@17 (line 385)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x0000732d1c52086c offset=bec):
   jdk.internal.foreign.AbstractMemorySegmentImpl::isAlignedForElement@8 (line 380)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x0000732d1c52086c offset=bec):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@68 (line 616)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[72],oop
    - l6: 0
    - l7: 0
    - l8: 0
    - l9: stack[48],long
    - l10: obj[946]
    - l11: obj[947]
    - l12: empty
    - l13: empty
ScopeDesc(pc=0x0000732d1c52086c offset=bec):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000732d1c52086c offset=bec):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
ScopeDesc(pc=0x0000732d1c52086c offset=bec):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c52086c offset=bec):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c52086c offset=bec):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[945]
    - l4: empty
   Objects
    - 0: R obj[945], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[951], 0, 16, stack[24],oop
    - 1: R obj[951], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[946], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[950], 0, 16, stack[32],oop
    - 3: R obj[950], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[947], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[952], 0, 16, stack[16],oop
    - 5: R obj[952], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
ScopeDesc(pc=0x0000732d1c52088b offset=c0b):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c52088b offset=c0b):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c52088b offset=c0b):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c52088b offset=c0b):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c52088b offset=c0b):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c52088b offset=c0b):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5208b4 offset=c34):
   jdk.internal.foreign.AbstractMemorySegmentImpl::isAlignedForElement@17 (line 385)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x0000732d1c5208b4 offset=c34):
   jdk.internal.foreign.AbstractMemorySegmentImpl::isAlignedForElement@8 (line 380)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
ScopeDesc(pc=0x0000732d1c5208b4 offset=c34):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@91 (line 619)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[72],oop
    - l6: 0
    - l7: 0
    - l8: 0
    - l9: stack[48],long
    - l10: obj[982]
    - l11: obj[983]
    - l12: empty
    - l13: empty
ScopeDesc(pc=0x0000732d1c5208b4 offset=c34):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000732d1c5208b4 offset=c34):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
ScopeDesc(pc=0x0000732d1c5208b4 offset=c34):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c5208b4 offset=c34):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c5208b4 offset=c34):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[981]
    - l4: empty
   Objects
    - 0: R obj[981], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[987], 0, 16, stack[24],oop
    - 1: R obj[987], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[982], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[986], 0, 16, stack[32],oop
    - 3: R obj[986], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[983], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[988], 0, 16, stack[16],oop
    - 5: R obj[988], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
ScopeDesc(pc=0x0000732d1c5208ee offset=c6e):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5208ee offset=c6e):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5208ee offset=c6e):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5208ee offset=c6e):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5208ee offset=c6e):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5208ee offset=c6e):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5208f8 offset=c78):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkBounds@3 (line 402)  reexecute=true
   Locals
    - l0: obj[1019]
    - l1: 0
    - l2: 0
    - l3: 0
    - l4: stack[72],long
   Expression stack
    - @0: stack[80]
ScopeDesc(pc=0x0000732d1c5208f8 offset=c78):
   jdk.internal.foreign.AbstractMemorySegmentImpl::checkAccess@9 (line 357)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
ScopeDesc(pc=0x0000732d1c5208f8 offset=c78):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@125 (line 623)
   Locals
    - l0: empty
    - l1: stack[16],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[48],oop
    - l6: 0
    - l7: 0
    - l8: empty
    - l9: empty
    - l10: obj[1019]
    - l11: obj[1020]
    - l12: 0
    - l13: stack[72],long
ScopeDesc(pc=0x0000732d1c5208f8 offset=c78):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000732d1c5208f8 offset=c78):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: reg rbp [10],oop
    - l7: empty
ScopeDesc(pc=0x0000732d1c5208f8 offset=c78):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c5208f8 offset=c78):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c5208f8 offset=c78):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1018]
    - l4: empty
   Objects
    - 0: R obj[1018], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1024], 0, 16, stack[24],oop
    - 1: R obj[1024], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1019], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[1023], 0, 16, stack[32],oop
    - 3: R obj[1023], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[1020], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[1025], 0, 16, reg rbp [10],oop
    - 5: R obj[1025], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, reg rbp [10],oop
ScopeDesc(pc=0x0000732d1c520900 offset=c80):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520900 offset=c80):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520900 offset=c80):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520900 offset=c80):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520900 offset=c80):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520900 offset=c80):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520930 offset=cb0):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@162 (line 625)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[48],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: empty
    - l6: 0
    - l7: 0
    - l8: empty
    - l9: empty
    - l10: obj[1326]
    - l11: obj[1327]
    - l12: 0
    - l13: stack[64],long
   Expression stack
    - @0: reg rbp [10],narrowoop
    - @1: stack[72],narrowoop
ScopeDesc(pc=0x0000732d1c520930 offset=cb0):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000732d1c520930 offset=cb0):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
ScopeDesc(pc=0x0000732d1c520930 offset=cb0):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520930 offset=cb0):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520930 offset=cb0):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1325]
    - l4: empty
   Objects
    - 0: R obj[1325], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1329], 0, 16, stack[24],oop
    - 1: R obj[1329], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1326], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[1328], 0, 16, stack[32],oop
    - 3: R obj[1328], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[1327], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[1330], 0, 16, stack[16],oop
    - 5: R obj[1330], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
ScopeDesc(pc=0x0000732d1c520938 offset=cb8):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520938 offset=cb8):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520938 offset=cb8):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520938 offset=cb8):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520938 offset=cb8):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520938 offset=cb8):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520974 offset=cf4):
   java.lang.Class::reflectionData@11 (line 2835)  reexecute=true
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: stack[8],narrowoop
    - l2: stack[4]
    - l3: empty
   Expression stack
    - @0: stack[8],narrowoop
ScopeDesc(pc=0x0000732d1c520974 offset=cf4):
   java.lang.Class::getSimpleName@1 (line 1669)
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x0000732d1c520974 offset=cf4):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   Locals
    - l0: obj[231]
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'{0x00000000c8ea2000}
    - l4: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
    - l5: empty
    - l6: empty
    - l7: empty
   Expression stack
    - @0: obj[231]
ScopeDesc(pc=0x0000732d1c520974 offset=cf4):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520974 offset=cf4):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520974 offset=cf4):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[230]
    - l4: empty
   Objects
    - 0: R obj[230], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[234], 0, 16, stack[24],oop
    - 1: R obj[234], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[231], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[233], 0, 16, stack[32],oop
    - 3: R obj[233], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
ScopeDesc(pc=0x0000732d1c5209b6 offset=d36):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5209b6 offset=d36):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5209b6 offset=d36):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5209b6 offset=d36):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5209b6 offset=d36):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5209b6 offset=d36):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5209c0 offset=d40):
   java.lang.ref.SoftReference::get@17 (line 114)  reexecute=true
   Locals
    - l0: stack[16],narrowoop
    - l1: stack[20],narrowoop
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x0000732d1c5209c0 offset=d40):
   java.lang.Class::reflectionData@15 (line 2836)
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: stack[16],narrowoop
    - l2: stack[12]
    - l3: empty
ScopeDesc(pc=0x0000732d1c5209c0 offset=d40):
   java.lang.Class::getSimpleName@1 (line 1669)
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x0000732d1c5209c0 offset=d40):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   Locals
    - l0: obj[305]
    - l1: empty
    - l2: stack[0],oop
    - l3: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'{0x00000000c8ea2000}
    - l4: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
    - l5: empty
    - l6: empty
    - l7: empty
   Expression stack
    - @0: obj[305]
ScopeDesc(pc=0x0000732d1c5209c0 offset=d40):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c5209c0 offset=d40):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c5209c0 offset=d40):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[304]
    - l4: empty
   Objects
    - 0: R obj[304], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[309], 0, 16, stack[24],oop
    - 1: R obj[309], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[305], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[308], 0, 16, stack[32],oop
    - 3: R obj[308], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
ScopeDesc(pc=0x0000732d1c5209ee offset=d6e):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c5209ee offset=d6e):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c5209ee offset=d6e):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c5209ee offset=d6e):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c5209ee offset=d6e):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c5209ee offset=d6e):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c5209f8 offset=d78):
   java.lang.Class::getSimpleName@11 (line 1671)  reexecute=true
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: stack[0],oop
    - l2: stack[12],narrowoop
   Expression stack
    - @0: stack[12],narrowoop
ScopeDesc(pc=0x0000732d1c5209f8 offset=d78):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   Locals
    - l0: obj[405]
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'{0x00000000c8ea2000}
    - l4: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
    - l5: empty
    - l6: empty
    - l7: empty
   Expression stack
    - @0: obj[405]
ScopeDesc(pc=0x0000732d1c5209f8 offset=d78):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c5209f8 offset=d78):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c5209f8 offset=d78):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[404]
    - l4: empty
   Objects
    - 0: R obj[404], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[407], 0, 16, stack[24],oop
    - 1: R obj[407], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[405], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[406], 0, 16, stack[32],oop
    - 3: R obj[406], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
ScopeDesc(pc=0x0000732d1c520a14 offset=d94):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520a14 offset=d94):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520a14 offset=d94):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520a14 offset=d94):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520a14 offset=d94):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520a14 offset=d94):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520a3c offset=dbc):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@35 (line 611)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x0000732d1c520a3c offset=dbc):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000732d1c520a3c offset=dbc):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[0],oop
    - l7: empty
ScopeDesc(pc=0x0000732d1c520a3c offset=dbc):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520a3c offset=dbc):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520a3c offset=dbc):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[839]
    - l4: empty
   Objects
    - 0: R obj[839], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[842], 0, 16, stack[24],oop
    - 1: R obj[842], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
ScopeDesc(pc=0x0000732d1c520a79 offset=df9):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520a79 offset=df9):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520a79 offset=df9):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520a79 offset=df9):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520a79 offset=df9):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520a79 offset=df9):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520a84 offset=e04):
   jdk.internal.foreign.Utils::isElementAligned@39 (line 209)  reexecute=true
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x0000732d1c520a84 offset=e04):
   jdk.internal.foreign.Utils::checkElementAlignment@1 (line 214)
   Locals
    - l0: empty
    - l1: "Source layout alignment greater than its size"{0x00000000c8ea9810}
ScopeDesc(pc=0x0000732d1c520a84 offset=e04):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@53 (line 614)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[72],oop
    - l6: 0
    - l7: 0
    - l8: 0
    - l9: stack[48],long
    - l10: obj[873]
    - l11: obj[874]
    - l12: empty
    - l13: empty
ScopeDesc(pc=0x0000732d1c520a84 offset=e04):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000732d1c520a84 offset=e04):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
ScopeDesc(pc=0x0000732d1c520a84 offset=e04):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520a84 offset=e04):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520a84 offset=e04):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[872]
    - l4: empty
   Objects
    - 0: R obj[872], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[878], 0, 16, stack[24],oop
    - 1: R obj[878], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[873], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[877], 0, 16, stack[32],oop
    - 3: R obj[877], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[874], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[879], 0, 16, stack[16],oop
    - 5: R obj[879], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
ScopeDesc(pc=0x0000732d1c520ac1 offset=e41):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520ac1 offset=e41):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520ac1 offset=e41):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520ac1 offset=e41):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520ac1 offset=e41):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520ac1 offset=e41):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520acc offset=e4c):
   jdk.internal.foreign.Utils::isElementAligned@39 (line 209)  reexecute=true
   Locals
    - l0: empty
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x0000732d1c520acc offset=e4c):
   jdk.internal.foreign.Utils::checkElementAlignment@1 (line 214)
   Locals
    - l0: empty
    - l1: "Destination layout alignment greater than its size"{0x00000000c8ea9868}
ScopeDesc(pc=0x0000732d1c520acc offset=e4c):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@61 (line 615)
   Locals
    - l0: empty
    - l1: stack[64],oop
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: stack[72],oop
    - l6: 0
    - l7: 0
    - l8: 0
    - l9: stack[48],long
    - l10: obj[910]
    - l11: obj[911]
    - l12: empty
    - l13: empty
ScopeDesc(pc=0x0000732d1c520acc offset=e4c):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000732d1c520acc offset=e4c):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
ScopeDesc(pc=0x0000732d1c520acc offset=e4c):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520acc offset=e4c):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520acc offset=e4c):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[909]
    - l4: empty
   Objects
    - 0: R obj[909], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[915], 0, 16, stack[24],oop
    - 1: R obj[915], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[910], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[914], 0, 16, stack[32],oop
    - 3: R obj[914], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[911], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[916], 0, 16, stack[16],oop
    - 5: R obj[916], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
ScopeDesc(pc=0x0000732d1c520b0a offset=e8a):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520b0a offset=e8a):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520b0a offset=e8a):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520b0a offset=e8a):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520b0a offset=e8a):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520b0a offset=e8a):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520b14 offset=e94):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@146 (line 625)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: 0
    - l3: 0
    - l4: empty
    - l5: empty
    - l6: 0
    - l7: 0
    - l8: empty
    - l9: empty
    - l10: obj[1290]
    - l11: obj[1291]
    - l12: 0
    - l13: stack[48],long
   Expression stack
    - @0: reg rbp [10],int
ScopeDesc(pc=0x0000732d1c520b14 offset=e94):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000732d1c520b14 offset=e94):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
ScopeDesc(pc=0x0000732d1c520b14 offset=e94):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520b14 offset=e94):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520b14 offset=e94):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1289]
    - l4: empty
   Objects
    - 0: R obj[1289], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1295], 0, 16, stack[24],oop
    - 1: R obj[1295], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1290], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[1294], 0, 16, stack[32],oop
    - 3: R obj[1294], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 4: R obj[1291], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[56],long, 0, obj[1296], 0, 16, stack[16],oop
    - 5: R obj[1296], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
ScopeDesc(pc=0x0000732d1c520b3f offset=ebf):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520b3f offset=ebf):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520b3f offset=ebf):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520b3f offset=ebf):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520b3f offset=ebf):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520b3f offset=ebf):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520b48 offset=ec8):
   jdk.internal.misc.Unsafe::checkSize@23 (line 473)  reexecute=true
   Locals
    - l0: a 'jdk/internal/misc/Unsafe'{0x00000000c8f03408}
    - l1: empty
    - l2: empty
   Expression stack
    - @0: stack[64]
ScopeDesc(pc=0x0000732d1c520b48 offset=ec8):
   jdk.internal.misc.Unsafe::copyMemoryChecks@3 (line 837)
   Locals
    - l0: a 'jdk/internal/misc/Unsafe'{0x00000000c8f03408}
    - l1: stack[32],oop
    - l2: 0
    - l3: 16
    - l4: stack[16],oop
    - l5: 0
    - l6: 16
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520b48 offset=ec8):
   jdk.internal.misc.Unsafe::copyMemory@9 (line 806)
   Locals
    - l0: a 'jdk/internal/misc/Unsafe'{0x00000000c8f03408}
    - l1: stack[32],oop
    - l2: 0
    - l3: 16
    - l4: stack[16],oop
    - l5: 0
    - l6: 16
    - l7: 0
    - l8: stack[48],long
ScopeDesc(pc=0x0000732d1c520b48 offset=ec8):
   jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
   Locals
    - l0: empty
    - l1: obj[1570]
    - l2: obj[1571]
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
ScopeDesc(pc=0x0000732d1c520b48 offset=ec8):
   jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
ScopeDesc(pc=0x0000732d1c520b48 offset=ec8):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
ScopeDesc(pc=0x0000732d1c520b48 offset=ec8):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000732d1c520b48 offset=ec8):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: stack[16],oop
    - l7: empty
ScopeDesc(pc=0x0000732d1c520b48 offset=ec8):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520b48 offset=ec8):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520b48 offset=ec8):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1569]
    - l4: empty
   Objects
    - 0: R obj[1569], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[1572], 0, 16, stack[24],oop
    - 1: R obj[1572], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1570], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 3: R obj[1571], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[16],oop
ScopeDesc(pc=0x0000732d1c520b7d offset=efd):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520b7d offset=efd):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520b7d offset=efd):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520b7d offset=efd):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520b7d offset=efd):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520b7d offset=efd):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520b88 offset=f08):
   jdk.internal.misc.Unsafe::copyMemory@16 (line 808)  reexecute=true
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
   Expression stack
    - @0: stack[8]
ScopeDesc(pc=0x0000732d1c520b88 offset=f08):
   jdk.internal.misc.ScopedMemoryAccess::copyMemoryInternal@28 (line 148)
   Locals
    - l0: empty
    - l1: obj[1410]
    - l2: obj[1411]
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
ScopeDesc(pc=0x0000732d1c520b88 offset=f08):
   jdk.internal.misc.ScopedMemoryAccess::copyMemory@12 (line 130)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
ScopeDesc(pc=0x0000732d1c520b88 offset=f08):
   jdk.internal.foreign.AbstractMemorySegmentImpl::copy@205 (line 626)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
    - l10: empty
    - l11: empty
    - l12: empty
    - l13: empty
ScopeDesc(pc=0x0000732d1c520b88 offset=f08):
   java.lang.foreign.MemorySegment::copy@33 (line 1660)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
    - l9: empty
ScopeDesc(pc=0x0000732d1c520b88 offset=f08):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@59 (line 343)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: reg rbp [10],oop
    - l7: empty
ScopeDesc(pc=0x0000732d1c520b88 offset=f08):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520b88 offset=f08):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520b88 offset=f08):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[1409]
    - l4: empty
   Objects
    - 0: R obj[1409], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[16],long, 0, obj[1412], 0, 16, stack[24],oop
    - 1: R obj[1412], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[1410], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
    - 3: R obj[1411], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, reg rbp [10],oop
ScopeDesc(pc=0x0000732d1c520bbb offset=f3b):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520bbb offset=f3b):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520bbb offset=f3b):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520bbb offset=f3b):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520bbb offset=f3b):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520bbb offset=f3b):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520bc4 offset=f44):
   java.lang.Class::reflectionData@18 (line 2836)
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: stack[0],narrowoop
    - l2: stack[4]
    - l3: empty
   Expression stack
    - @0: stack[8],narrowoop
ScopeDesc(pc=0x0000732d1c520bc4 offset=f44):
   java.lang.Class::getSimpleName@1 (line 1669)
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x0000732d1c520bc4 offset=f44):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   Locals
    - l0: obj[339]
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'{0x00000000c8ea2000}
    - l4: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
    - l5: empty
    - l6: empty
    - l7: empty
   Expression stack
    - @0: obj[339]
ScopeDesc(pc=0x0000732d1c520bc4 offset=f44):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520bc4 offset=f44):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520bc4 offset=f44):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[338]
    - l4: empty
   Objects
    - 0: R obj[338], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[341], 0, 16, stack[24],oop
    - 1: R obj[341], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[339], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[340], 0, 16, stack[32],oop
    - 3: R obj[340], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
ScopeDesc(pc=0x0000732d1c520bcc offset=f4c):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520bcc offset=f4c):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520bcc offset=f4c):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520bcc offset=f4c):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520bcc offset=f4c):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520bcc offset=f4c):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520bfc offset=f7c):
   java.util.Objects::requireNonNull@1 (line 219)  reexecute=true
   Locals
    - l0: stack[16],oop
   Expression stack
    - @0: stack[8],oop
ScopeDesc(pc=0x0000732d1c520bfc offset=f7c):
   jdk.internal.foreign.SegmentFactories::fromArray@4 (line 104)
   Locals
    - l0: stack[8],oop
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x0000732d1c520bfc offset=f7c):
   java.lang.foreign.MemorySegment::ofArray@1 (line 1476)
   Locals
    - l0: empty
ScopeDesc(pc=0x0000732d1c520bfc offset=f7c):
   test_ms::micro@1 (line 13)
   Locals
    - l0: reg rbp [10],oop
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
ScopeDesc(pc=0x0000732d1c520c27 offset=fa7):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520c27 offset=fa7):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520c27 offset=fa7):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520c27 offset=fa7):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520c27 offset=fa7):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520c27 offset=fa7):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520c30 offset=fb0):
   java.util.Objects::requireNonNull@1 (line 219)  reexecute=true
   Locals
    - l0: reg rbp [10],oop
   Expression stack
    - @0: reg rbp [10],oop
ScopeDesc(pc=0x0000732d1c520c30 offset=fb0):
   jdk.internal.foreign.SegmentFactories::fromArray@4 (line 104)
   Locals
    - l0: reg rbp [10],oop
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x0000732d1c520c30 offset=fb0):
   java.lang.foreign.MemorySegment::ofArray@1 (line 1476)
   Locals
    - l0: empty
ScopeDesc(pc=0x0000732d1c520c30 offset=fb0):
   test_ms::micro@6 (line 14)
   Locals
    - l0: empty
    - l1: empty
    - l2: obj[33]
    - l3: empty
    - l4: empty
   Objects
    - 0: R obj[33], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[16],long, 0, obj[38], 0, 16, stack[32],oop
    - 1: R obj[38], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
ScopeDesc(pc=0x0000732d1c520c63 offset=fe3):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520c63 offset=fe3):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520c63 offset=fe3):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520c63 offset=fe3):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520c63 offset=fe3):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520c63 offset=fe3):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520c6c offset=fec):
   java.lang.ref.SoftReference::get@6 (line 114)  reexecute=true
   Locals
    - l0: empty
    - l1: stack[12],narrowoop
   Expression stack
    - @0: stack[12],narrowoop
ScopeDesc(pc=0x0000732d1c520c6c offset=fec):
   java.lang.Class::reflectionData@15 (line 2836)
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: stack[0],narrowoop
    - l2: stack[4]
    - l3: empty
ScopeDesc(pc=0x0000732d1c520c6c offset=fec):
   java.lang.Class::getSimpleName@1 (line 1669)
   Locals
    - l0: a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
    - l1: empty
    - l2: empty
ScopeDesc(pc=0x0000732d1c520c6c offset=fec):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@2 (line 340)
   Locals
    - l0: obj[271]
    - l1: empty
    - l2: reg rbp [10],oop
    - l3: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'{0x00000000c8ea2000}
    - l4: a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
    - l5: empty
    - l6: empty
    - l7: empty
   Expression stack
    - @0: obj[271]
ScopeDesc(pc=0x0000732d1c520c6c offset=fec):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
   Locals
    - l0: empty
    - l1: empty
ScopeDesc(pc=0x0000732d1c520c6c offset=fec):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
   Locals
    - l0: a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
    - l1: empty
    - l2: empty
    - l3: empty
    - l4: empty
    - l5: empty
    - l6: empty
    - l7: empty
    - l8: empty
ScopeDesc(pc=0x0000732d1c520c6c offset=fec):
   test_ms::micro@18 (line 15)
   Locals
    - l0: empty
    - l1: empty
    - l2: empty
    - l3: obj[270]
    - l4: empty
   Objects
    - 0: R obj[270], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, stack[40],long, 0, obj[273], 0, 16, stack[24],oop
    - 1: R obj[273], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[24],oop
    - 2: R obj[271], jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
        Fields: 0, 128, 0, obj[272], 0, 16, stack[32],oop
    - 3: R obj[272], jdk.internal.foreign.GlobalSession$HeapSession
        Fields: null, null, 1, 0, stack[32],oop
ScopeDesc(pc=0x0000732d1c520c74 offset=ff4):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520c74 offset=ff4):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520c74 offset=ff4):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520c74 offset=ff4):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520c74 offset=ff4):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520c74 offset=ff4):
   test_ms::micro@30 (line 16)
ScopeDesc(pc=0x0000732d1c520c88 offset=1008):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::prepare@3 (line 980)
ScopeDesc(pc=0x0000732d1c520c88 offset=1008):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::<init>@3 (line 865)
ScopeDesc(pc=0x0000732d1c520c88 offset=1008):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@6 (line 154)
ScopeDesc(pc=0x0000732d1c520c88 offset=1008):
   jdk.incubator.vector.Byte256Vector::shuffleFromArray@3 (line 43)
ScopeDesc(pc=0x0000732d1c520c88 offset=1008):
   jdk.incubator.vector.AbstractSpecies::shuffleFromArray@6 (line 344)
ScopeDesc(pc=0x0000732d1c520c88 offset=1008):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@45 (line 364)
ScopeDesc(pc=0x0000732d1c520c88 offset=1008):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c520c8d offset=100d):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
ScopeDesc(pc=0x0000732d1c520c8d offset=100d):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
ScopeDesc(pc=0x0000732d1c520c8d offset=100d):
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
ScopeDesc(pc=0x0000732d1c520c8d offset=100d):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
ScopeDesc(pc=0x0000732d1c520c8d offset=100d):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
ScopeDesc(pc=0x0000732d1c520c8d offset=100d):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c520c8d offset=100d):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c520c8d offset=100d):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c520c92 offset=1012):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@0 (line 243)
ScopeDesc(pc=0x0000732d1c520c92 offset=1012):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
ScopeDesc(pc=0x0000732d1c520c92 offset=1012):
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
ScopeDesc(pc=0x0000732d1c520c92 offset=1012):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
ScopeDesc(pc=0x0000732d1c520c92 offset=1012):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@29 (line 363)
ScopeDesc(pc=0x0000732d1c520c92 offset=1012):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c520c97 offset=1017):
   jdk.internal.foreign.AbstractMemorySegmentImpl::lambda$toArray$3@1 (line 321)
ScopeDesc(pc=0x0000732d1c520c97 offset=1017):
   jdk.internal.foreign.AbstractMemorySegmentImpl$$Lambda/0x000000004d00f540::apply@1
ScopeDesc(pc=0x0000732d1c520c97 offset=1017):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@20 (line 341)
ScopeDesc(pc=0x0000732d1c520c97 offset=1017):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c520c97 offset=1017):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c520c97 offset=1017):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c520c9c offset=101c):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::<init>@11 (line 238)
ScopeDesc(pc=0x0000732d1c520c9c offset=101c):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@8 (line 243)
ScopeDesc(pc=0x0000732d1c520c9c offset=101c):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
ScopeDesc(pc=0x0000732d1c520c9c offset=101c):
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
ScopeDesc(pc=0x0000732d1c520c9c offset=101c):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
ScopeDesc(pc=0x0000732d1c520c9c offset=101c):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@29 (line 363)
ScopeDesc(pc=0x0000732d1c520c9c offset=101c):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c520ca1 offset=1021):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::<init>@11 (line 238)
ScopeDesc(pc=0x0000732d1c520ca1 offset=1021):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@8 (line 243)
ScopeDesc(pc=0x0000732d1c520ca1 offset=1021):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::dup@5 (line 235)
ScopeDesc(pc=0x0000732d1c520ca1 offset=1021):
   jdk.internal.foreign.layout.ValueLayouts$AbstractValueLayout::withOrder@15 (line 95)
ScopeDesc(pc=0x0000732d1c520ca1 offset=1021):
   jdk.internal.foreign.layout.ValueLayouts$OfIntImpl::withOrder@2 (line 235)
ScopeDesc(pc=0x0000732d1c520ca1 offset=1021):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@50 (line 343)
ScopeDesc(pc=0x0000732d1c520ca1 offset=1021):
   jdk.internal.foreign.AbstractMemorySegmentImpl::toArray@14 (line 321)
ScopeDesc(pc=0x0000732d1c520ca1 offset=1021):
   jdk.incubator.vector.VectorShuffle::fromMemorySegment@34 (line 363)
ScopeDesc(pc=0x0000732d1c520ca1 offset=1021):
   test_ms::micro@18 (line 15)
ScopeDesc(pc=0x0000732d1c520ca4 offset=1024):
   jdk.internal.foreign.SegmentFactories::fromArray@-1 (line 103)
ScopeDesc(pc=0x0000732d1c520ca4 offset=1024):
   java.lang.foreign.MemorySegment::ofArray@1 (line 1476)
ScopeDesc(pc=0x0000732d1c520ca4 offset=1024):
   test_ms::micro@1 (line 13)
ScopeDesc(pc=0x0000732d1c520cb4 offset=1034):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegmentScopedInternal@29 (line 441)
ScopeDesc(pc=0x0000732d1c520cb4 offset=1034):
   jdk.internal.misc.ScopedMemoryAccess::storeIntoMemorySegment@15 (line 418)
ScopeDesc(pc=0x0000732d1c520cb4 offset=1034):
   jdk.incubator.vector.IntVector::intoMemorySegment0@32 (line 3674)
ScopeDesc(pc=0x0000732d1c520cb4 offset=1034):
   jdk.incubator.vector.IntVector::intoMemorySegment@44 (line 3454)
ScopeDesc(pc=0x0000732d1c520cb4 offset=1034):
   jdk.incubator.vector.Byte256Vector$Byte256Shuffle::intoMemorySegment@123 (line 948)
ScopeDesc(pc=0x0000732d1c520cb4 offset=1034):
   test_ms::micro@30 (line 16)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x0000732ce49b19d0: 780f6385
relocInfo@0x0000732ce49b19d2 [type=12(metadata) addr=0x0000732d1c51fd05 offset=133 format=3 data=15] | [metadata_addr=0x0000732ce49b1cd0 *=0x000000004d003648]metadata_value=0x000000004d003648: 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
         @0x0000732ce49b19d4: 0824
relocInfo@0x0000732ce49b19d4 [type=1(oop) addr=0x0000732d1c51fd29 offset=36] | [oop_addr=0x0000732d1c51fd2b *=0x00000000c8f2c1b8]
         @0x0000732ce49b19d6: 080d
relocInfo@0x0000732ce49b19d6 [type=1(oop) addr=0x0000732d1c51fd36 offset=13] | [oop_addr=0x0000732d1c51fd38 *=0x00000000ffeb20f8]
         @0x0000732ce49b19d8: 080a
relocInfo@0x0000732ce49b19d8 [type=1(oop) addr=0x0000732d1c51fd40 offset=10] | [oop_addr=0x0000732d1c51fd42 *=0x00000000c8f05120]
         @0x0000732ce49b19da: 191f
relocInfo@0x0000732ce49b19da [type=3(opt_virtual_call) addr=0x0000732d1c51fd5f offset=31 format=1] | [destination=0x0000732d1c4f9ae0 metadata=0x0000000000000000] Blob::Shared Runtime resolve_opt_virtual_call_blob
         @0x0000732ce49b19dc: 8005
relocInfo@0x0000732ce49b19dc [type=16(post_call_nop) addr=0x0000732d1c51fd64 offset=5]
         @0x0000732ce49b19de: 0808
relocInfo@0x0000732ce49b19de [type=1(oop) addr=0x0000732d1c51fd6c offset=8] | [oop_addr=0x0000732d1c51fd6e *=0x00000000ffe7bec0]
         @0x0000732ce49b19e0: 7c020000000a3922
relocInfo@0x0000732ce49b19e6 [type=7(external_word) addr=0x0000732d1c51fd8e offset=34 format=1 data={0000000a}] | [target=0x0000732d309a4b20]
         @0x0000732ce49b19e8: 7c020000000b380d
relocInfo@0x0000732ce49b19ee [type=7(external_word) addr=0x0000732d1c51fd9b offset=13 data={0000000b}] | [target=0x0000732d2fdbd5a8]
         @0x0000732ce49b19f0: 310e
relocInfo@0x0000732ce49b19f0 [type=6(runtime_call) addr=0x0000732d1c51fda9 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b19f2: 0819
relocInfo@0x0000732ce49b19f2 [type=1(oop) addr=0x0000732d1c51fdc2 offset=25] | [oop_addr=0x0000732d1c51fdc4 *=0x00000000ffe815f0]
         @0x0000732ce49b19f4: 78196317
relocInfo@0x0000732ce49b19f6 [type=12(metadata) addr=0x0000732d1c51fdd9 offset=23 format=3 data=25] | [metadata_addr=0x0000732ce49b1d20 *=0x000000004c2a9218]metadata_value=0x000000004c2a9218: 'java/lang/Class$ReflectionData'
         @0x0000732ce49b19f8: 781d63ca
relocInfo@0x0000732ce49b19fa [type=12(metadata) addr=0x0000732d1c51fea3 offset=202 format=3 data=29] | [metadata_addr=0x0000732ce49b1d40 *=0x000000004c1b87f0]metadata_value=0x000000004c1b87f0: {type array int}
         @0x0000732ce49b19fc: 780f63c9
relocInfo@0x0000732ce49b19fe [type=12(metadata) addr=0x0000732d1c51ff6c offset=201 format=3 data=15] | [metadata_addr=0x0000732ce49b1cd0 *=0x000000004d003648]metadata_value=0x000000004d003648: 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
         @0x0000732ce49b1a00: 7c020000000a3945
relocInfo@0x0000732ce49b1a06 [type=7(external_word) addr=0x0000732d1c51ffb1 offset=69 format=1 data={0000000a}] | [target=0x0000732d309a4b20]
         @0x0000732ce49b1a08: 7c020000000b380d
relocInfo@0x0000732ce49b1a0e [type=7(external_word) addr=0x0000732d1c51ffbe offset=13 data={0000000b}] | [target=0x0000732d2fdbd5a8]
         @0x0000732ce49b1a10: 310e
relocInfo@0x0000732ce49b1a10 [type=6(runtime_call) addr=0x0000732d1c51ffcc offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1a12: 0809
relocInfo@0x0000732ce49b1a12 [type=1(oop) addr=0x0000732d1c51ffd5 offset=9] | [oop_addr=0x0000732d1c51ffd7 *=0x00000000ffeb20f8]
         @0x0000732ce49b1a14: 080a
relocInfo@0x0000732ce49b1a14 [type=1(oop) addr=0x0000732d1c51ffdf offset=10] | [oop_addr=0x0000732d1c51ffe1 *=0x00000000c8f05120]
         @0x0000732ce49b1a16: 191c
relocInfo@0x0000732ce49b1a16 [type=3(opt_virtual_call) addr=0x0000732d1c51fffb offset=28 format=1] | [destination=0x0000732d1c4f9ae0 metadata=0x0000000000000000] Blob::Shared Runtime resolve_opt_virtual_call_blob
         @0x0000732ce49b1a18: 8005
relocInfo@0x0000732ce49b1a18 [type=16(post_call_nop) addr=0x0000732d1c520000 offset=5]
         @0x0000732ce49b1a1a: 00ff
relocInfo@0x0000732ce49b1a1a [type=0(none) addr=0x0000732d1c5200ff offset=255]
         @0x0000732ce49b1a1c: 3007
relocInfo@0x0000732ce49b1a1c [type=6(runtime_call) addr=0x0000732d1c520106 offset=7] | [destination=0x0000732d1c4e0a80] Stub::Stub Generator unsafe_arraycopy_stub
         @0x0000732ce49b1a1e: 800d
relocInfo@0x0000732ce49b1a1e [type=16(post_call_nop) addr=0x0000732d1c520113 offset=13]
         @0x0000732ce49b1a20: 78276348
relocInfo@0x0000732ce49b1a22 [type=12(metadata) addr=0x0000732d1c52015b offset=72 format=3 data=39] | [metadata_addr=0x0000732ce49b1d90 *=0x000000004c1b83d0]metadata_value=0x000000004c1b83d0: {type array byte}
         @0x0000732ce49b1a24: 00ff
relocInfo@0x0000732ce49b1a24 [type=0(none) addr=0x0000732d1c52025a offset=255]
         @0x0000732ce49b1a26: 086f
relocInfo@0x0000732ce49b1a26 [type=1(oop) addr=0x0000732d1c5202c9 offset=111] | [oop_addr=0x0000732d1c5202cb *=0x00000000c8ea9908]
         @0x0000732ce49b1a28: 588a
relocInfo@0x0000732ce49b1a28 [type=11(poll_return) addr=0x0000732d1c520353 offset=138]
         @0x0000732ce49b1a2a: 600b
relocInfo@0x0000732ce49b1a2a [type=12(metadata) addr=0x0000732d1c52035e offset=11] | [metadata_addr=0x0000732d1c520360 *=0x000000004d003648]metadata_value=0x000000004d003648: 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
         @0x0000732ce49b1a2c: 3119
relocInfo@0x0000732ce49b1a2c [type=6(runtime_call) addr=0x0000732d1c520377 offset=25 format=1] | [destination=0x0000732d1c48b960] C2 Runtime new_instance_blob
         @0x0000732ce49b1a2e: 8005
relocInfo@0x0000732ce49b1a2e [type=16(post_call_nop) addr=0x0000732d1c52037c offset=5]
         @0x0000732ce49b1a30: 602a
relocInfo@0x0000732ce49b1a30 [type=12(metadata) addr=0x0000732d1c5203a6 offset=42] | [metadata_addr=0x0000732d1c5203a8 *=0x000000004d003648]metadata_value=0x000000004d003648: 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
         @0x0000732ce49b1a32: 310d
relocInfo@0x0000732ce49b1a32 [type=6(runtime_call) addr=0x0000732d1c5203b3 offset=13 format=1] | [destination=0x0000732d1c48b960] C2 Runtime new_instance_blob
         @0x0000732ce49b1a34: 8005
relocInfo@0x0000732ce49b1a34 [type=16(post_call_nop) addr=0x0000732d1c5203b8 offset=5]
         @0x0000732ce49b1a36: 6014
relocInfo@0x0000732ce49b1a36 [type=12(metadata) addr=0x0000732d1c5203cc offset=20] | [metadata_addr=0x0000732d1c5203ce *=0x000000004c1b87f0]metadata_value=0x000000004c1b87f0: {type array int}
         @0x0000732ce49b1a38: 3113
relocInfo@0x0000732ce49b1a38 [type=6(runtime_call) addr=0x0000732d1c5203df offset=19 format=1] | [destination=0x0000732d1c48b660] C2 Runtime new_array_blob
         @0x0000732ce49b1a3a: 8005
relocInfo@0x0000732ce49b1a3a [type=16(post_call_nop) addr=0x0000732d1c5203e4 offset=5]
         @0x0000732ce49b1a3c: 6017
relocInfo@0x0000732ce49b1a3c [type=12(metadata) addr=0x0000732d1c5203fb offset=23] | [metadata_addr=0x0000732d1c5203fd *=0x000000004c1b83d0]metadata_value=0x000000004c1b83d0: {type array byte}
         @0x0000732ce49b1a3e: 3114
relocInfo@0x0000732ce49b1a3e [type=6(runtime_call) addr=0x0000732d1c52040f offset=20 format=1] | [destination=0x0000732d1c48b660] C2 Runtime new_array_blob
         @0x0000732ce49b1a40: 8005
relocInfo@0x0000732ce49b1a40 [type=16(post_call_nop) addr=0x0000732d1c520414 offset=5]
         @0x0000732ce49b1a42: 313b
relocInfo@0x0000732ce49b1a42 [type=6(runtime_call) addr=0x0000732d1c52044f offset=59 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1a44: 8005
relocInfo@0x0000732ce49b1a44 [type=16(post_call_nop) addr=0x0000732d1c520454 offset=5]
         @0x0000732ce49b1a46: 7c02000001343808
relocInfo@0x0000732ce49b1a4c [type=7(external_word) addr=0x0000732d1c52045c offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1a4e: 310e
relocInfo@0x0000732ce49b1a4e [type=6(runtime_call) addr=0x0000732d1c52046a offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1a50: 3111
relocInfo@0x0000732ce49b1a50 [type=6(runtime_call) addr=0x0000732d1c52047b offset=17 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1a52: 8005
relocInfo@0x0000732ce49b1a52 [type=16(post_call_nop) addr=0x0000732d1c520480 offset=5]
         @0x0000732ce49b1a54: 7c02000001343808
relocInfo@0x0000732ce49b1a5a [type=7(external_word) addr=0x0000732d1c520488 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1a5c: 310e
relocInfo@0x0000732ce49b1a5c [type=6(runtime_call) addr=0x0000732d1c520496 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1a5e: 3119
relocInfo@0x0000732ce49b1a5e [type=6(runtime_call) addr=0x0000732d1c5204af offset=25 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1a60: 8005
relocInfo@0x0000732ce49b1a60 [type=16(post_call_nop) addr=0x0000732d1c5204b4 offset=5]
         @0x0000732ce49b1a62: 7c02000001343808
relocInfo@0x0000732ce49b1a68 [type=7(external_word) addr=0x0000732d1c5204bc offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1a6a: 310e
relocInfo@0x0000732ce49b1a6a [type=6(runtime_call) addr=0x0000732d1c5204ca offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1a6c: 7c02000001353806
relocInfo@0x0000732ce49b1a72 [type=7(external_word) addr=0x0000732d1c5204d0 offset=6 data={00000135}] | [target=0x0000732ce49afbd0]
         @0x0000732ce49b1a74: 310e
relocInfo@0x0000732ce49b1a74 [type=6(runtime_call) addr=0x0000732d1c5204de offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1a76: 7c02000001353806
relocInfo@0x0000732ce49b1a7c [type=7(external_word) addr=0x0000732d1c5204e4 offset=6 data={00000135}] | [target=0x0000732ce49afbd0]
         @0x0000732ce49b1a7e: 310e
relocInfo@0x0000732ce49b1a7e [type=6(runtime_call) addr=0x0000732d1c5204f2 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1a80: 3119
relocInfo@0x0000732ce49b1a80 [type=6(runtime_call) addr=0x0000732d1c52050b offset=25 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1a82: 8005
relocInfo@0x0000732ce49b1a82 [type=16(post_call_nop) addr=0x0000732d1c520510 offset=5]
         @0x0000732ce49b1a84: 7c02000001343808
relocInfo@0x0000732ce49b1a8a [type=7(external_word) addr=0x0000732d1c520518 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1a8c: 310e
relocInfo@0x0000732ce49b1a8c [type=6(runtime_call) addr=0x0000732d1c520526 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1a8e: 3119
relocInfo@0x0000732ce49b1a8e [type=6(runtime_call) addr=0x0000732d1c52053f offset=25 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1a90: 8005
relocInfo@0x0000732ce49b1a90 [type=16(post_call_nop) addr=0x0000732d1c520544 offset=5]
         @0x0000732ce49b1a92: 7c02000001343808
relocInfo@0x0000732ce49b1a98 [type=7(external_word) addr=0x0000732d1c52054c offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1a9a: 310e
relocInfo@0x0000732ce49b1a9a [type=6(runtime_call) addr=0x0000732d1c52055a offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1a9c: 3129
relocInfo@0x0000732ce49b1a9c [type=6(runtime_call) addr=0x0000732d1c520583 offset=41 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1a9e: 8005
relocInfo@0x0000732ce49b1a9e [type=16(post_call_nop) addr=0x0000732d1c520588 offset=5]
         @0x0000732ce49b1aa0: 7c02000001343808
relocInfo@0x0000732ce49b1aa6 [type=7(external_word) addr=0x0000732d1c520590 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1aa8: 310e
relocInfo@0x0000732ce49b1aa8 [type=6(runtime_call) addr=0x0000732d1c52059e offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1aaa: 3119
relocInfo@0x0000732ce49b1aaa [type=6(runtime_call) addr=0x0000732d1c5205b7 offset=25 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1aac: 8005
relocInfo@0x0000732ce49b1aac [type=16(post_call_nop) addr=0x0000732d1c5205bc offset=5]
         @0x0000732ce49b1aae: 7c02000001343808
relocInfo@0x0000732ce49b1ab4 [type=7(external_word) addr=0x0000732d1c5205c4 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1ab6: 310e
relocInfo@0x0000732ce49b1ab6 [type=6(runtime_call) addr=0x0000732d1c5205d2 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1ab8: 3119
relocInfo@0x0000732ce49b1ab8 [type=6(runtime_call) addr=0x0000732d1c5205eb offset=25 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1aba: 8005
relocInfo@0x0000732ce49b1aba [type=16(post_call_nop) addr=0x0000732d1c5205f0 offset=5]
         @0x0000732ce49b1abc: 7c02000001343808
relocInfo@0x0000732ce49b1ac2 [type=7(external_word) addr=0x0000732d1c5205f8 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1ac4: 310e
relocInfo@0x0000732ce49b1ac4 [type=6(runtime_call) addr=0x0000732d1c520606 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1ac6: 3119
relocInfo@0x0000732ce49b1ac6 [type=6(runtime_call) addr=0x0000732d1c52061f offset=25 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1ac8: 8005
relocInfo@0x0000732ce49b1ac8 [type=16(post_call_nop) addr=0x0000732d1c520624 offset=5]
         @0x0000732ce49b1aca: 7c02000001343808
relocInfo@0x0000732ce49b1ad0 [type=7(external_word) addr=0x0000732d1c52062c offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1ad2: 310e
relocInfo@0x0000732ce49b1ad2 [type=6(runtime_call) addr=0x0000732d1c52063a offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1ad4: 7c02000001353806
relocInfo@0x0000732ce49b1ada [type=7(external_word) addr=0x0000732d1c520640 offset=6 data={00000135}] | [target=0x0000732ce49afbd0]
         @0x0000732ce49b1adc: 310e
relocInfo@0x0000732ce49b1adc [type=6(runtime_call) addr=0x0000732d1c52064e offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1ade: 7c02000001353806
relocInfo@0x0000732ce49b1ae4 [type=7(external_word) addr=0x0000732d1c520654 offset=6 data={00000135}] | [target=0x0000732ce49afbd0]
         @0x0000732ce49b1ae6: 310e
relocInfo@0x0000732ce49b1ae6 [type=6(runtime_call) addr=0x0000732d1c520662 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1ae8: 3129
relocInfo@0x0000732ce49b1ae8 [type=6(runtime_call) addr=0x0000732d1c52068b offset=41 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1aea: 8005
relocInfo@0x0000732ce49b1aea [type=16(post_call_nop) addr=0x0000732d1c520690 offset=5]
         @0x0000732ce49b1aec: 7c02000001343808
relocInfo@0x0000732ce49b1af2 [type=7(external_word) addr=0x0000732d1c520698 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1af4: 310e
relocInfo@0x0000732ce49b1af4 [type=6(runtime_call) addr=0x0000732d1c5206a6 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1af6: 3129
relocInfo@0x0000732ce49b1af6 [type=6(runtime_call) addr=0x0000732d1c5206cf offset=41 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1af8: 8005
relocInfo@0x0000732ce49b1af8 [type=16(post_call_nop) addr=0x0000732d1c5206d4 offset=5]
         @0x0000732ce49b1afa: 7c02000001343808
relocInfo@0x0000732ce49b1b00 [type=7(external_word) addr=0x0000732d1c5206dc offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1b02: 310e
relocInfo@0x0000732ce49b1b02 [type=6(runtime_call) addr=0x0000732d1c5206ea offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1b04: 312d
relocInfo@0x0000732ce49b1b04 [type=6(runtime_call) addr=0x0000732d1c520717 offset=45 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1b06: 8005
relocInfo@0x0000732ce49b1b06 [type=16(post_call_nop) addr=0x0000732d1c52071c offset=5]
         @0x0000732ce49b1b08: 7c02000001343808
relocInfo@0x0000732ce49b1b0e [type=7(external_word) addr=0x0000732d1c520724 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1b10: 310e
relocInfo@0x0000732ce49b1b10 [type=6(runtime_call) addr=0x0000732d1c520732 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1b12: 312d
relocInfo@0x0000732ce49b1b12 [type=6(runtime_call) addr=0x0000732d1c52075f offset=45 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1b14: 8005
relocInfo@0x0000732ce49b1b14 [type=16(post_call_nop) addr=0x0000732d1c520764 offset=5]
         @0x0000732ce49b1b16: 7c02000001343808
relocInfo@0x0000732ce49b1b1c [type=7(external_word) addr=0x0000732d1c52076c offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1b1e: 310e
relocInfo@0x0000732ce49b1b1e [type=6(runtime_call) addr=0x0000732d1c52077a offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1b20: 3129
relocInfo@0x0000732ce49b1b20 [type=6(runtime_call) addr=0x0000732d1c5207a3 offset=41 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1b22: 8005
relocInfo@0x0000732ce49b1b22 [type=16(post_call_nop) addr=0x0000732d1c5207a8 offset=5]
         @0x0000732ce49b1b24: 7c02000001343808
relocInfo@0x0000732ce49b1b2a [type=7(external_word) addr=0x0000732d1c5207b0 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1b2c: 310e
relocInfo@0x0000732ce49b1b2c [type=6(runtime_call) addr=0x0000732d1c5207be offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1b2e: 3119
relocInfo@0x0000732ce49b1b2e [type=6(runtime_call) addr=0x0000732d1c5207d7 offset=25 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1b30: 8005
relocInfo@0x0000732ce49b1b30 [type=16(post_call_nop) addr=0x0000732d1c5207dc offset=5]
         @0x0000732ce49b1b32: 7c02000001343808
relocInfo@0x0000732ce49b1b38 [type=7(external_word) addr=0x0000732d1c5207e4 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1b3a: 310e
relocInfo@0x0000732ce49b1b3a [type=6(runtime_call) addr=0x0000732d1c5207f2 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1b3c: 312d
relocInfo@0x0000732ce49b1b3c [type=6(runtime_call) addr=0x0000732d1c52081f offset=45 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1b3e: 8005
relocInfo@0x0000732ce49b1b3e [type=16(post_call_nop) addr=0x0000732d1c520824 offset=5]
         @0x0000732ce49b1b40: 7c02000001343808
relocInfo@0x0000732ce49b1b46 [type=7(external_word) addr=0x0000732d1c52082c offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1b48: 310e
relocInfo@0x0000732ce49b1b48 [type=6(runtime_call) addr=0x0000732d1c52083a offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1b4a: 312d
relocInfo@0x0000732ce49b1b4a [type=6(runtime_call) addr=0x0000732d1c520867 offset=45 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1b4c: 8005
relocInfo@0x0000732ce49b1b4c [type=16(post_call_nop) addr=0x0000732d1c52086c offset=5]
         @0x0000732ce49b1b4e: 7c02000001343808
relocInfo@0x0000732ce49b1b54 [type=7(external_word) addr=0x0000732d1c520874 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1b56: 310e
relocInfo@0x0000732ce49b1b56 [type=6(runtime_call) addr=0x0000732d1c520882 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1b58: 312d
relocInfo@0x0000732ce49b1b58 [type=6(runtime_call) addr=0x0000732d1c5208af offset=45 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1b5a: 8005
relocInfo@0x0000732ce49b1b5a [type=16(post_call_nop) addr=0x0000732d1c5208b4 offset=5]
         @0x0000732ce49b1b5c: 7c02000001343808
relocInfo@0x0000732ce49b1b62 [type=7(external_word) addr=0x0000732d1c5208bc offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1b64: 310e
relocInfo@0x0000732ce49b1b64 [type=6(runtime_call) addr=0x0000732d1c5208ca offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1b66: 3129
relocInfo@0x0000732ce49b1b66 [type=6(runtime_call) addr=0x0000732d1c5208f3 offset=41 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1b68: 8005
relocInfo@0x0000732ce49b1b68 [type=16(post_call_nop) addr=0x0000732d1c5208f8 offset=5]
         @0x0000732ce49b1b6a: 7c02000001343808
relocInfo@0x0000732ce49b1b70 [type=7(external_word) addr=0x0000732d1c520900 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1b72: 310e
relocInfo@0x0000732ce49b1b72 [type=6(runtime_call) addr=0x0000732d1c52090e offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1b74: 311d
relocInfo@0x0000732ce49b1b74 [type=6(runtime_call) addr=0x0000732d1c52092b offset=29 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1b76: 8005
relocInfo@0x0000732ce49b1b76 [type=16(post_call_nop) addr=0x0000732d1c520930 offset=5]
         @0x0000732ce49b1b78: 7c02000001343808
relocInfo@0x0000732ce49b1b7e [type=7(external_word) addr=0x0000732d1c520938 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1b80: 310e
relocInfo@0x0000732ce49b1b80 [type=6(runtime_call) addr=0x0000732d1c520946 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1b82: 3129
relocInfo@0x0000732ce49b1b82 [type=6(runtime_call) addr=0x0000732d1c52096f offset=41 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1b84: 8005
relocInfo@0x0000732ce49b1b84 [type=16(post_call_nop) addr=0x0000732d1c520974 offset=5]
         @0x0000732ce49b1b86: 7c02000001343808
relocInfo@0x0000732ce49b1b8c [type=7(external_word) addr=0x0000732d1c52097c offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1b8e: 310e
relocInfo@0x0000732ce49b1b8e [type=6(runtime_call) addr=0x0000732d1c52098a offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1b90: 3131
relocInfo@0x0000732ce49b1b90 [type=6(runtime_call) addr=0x0000732d1c5209bb offset=49 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1b92: 8005
relocInfo@0x0000732ce49b1b92 [type=16(post_call_nop) addr=0x0000732d1c5209c0 offset=5]
         @0x0000732ce49b1b94: 7c02000001343808
relocInfo@0x0000732ce49b1b9a [type=7(external_word) addr=0x0000732d1c5209c8 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1b9c: 310e
relocInfo@0x0000732ce49b1b9c [type=6(runtime_call) addr=0x0000732d1c5209d6 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1b9e: 311d
relocInfo@0x0000732ce49b1b9e [type=6(runtime_call) addr=0x0000732d1c5209f3 offset=29 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1ba0: 8005
relocInfo@0x0000732ce49b1ba0 [type=16(post_call_nop) addr=0x0000732d1c5209f8 offset=5]
         @0x0000732ce49b1ba2: 7c02000001343808
relocInfo@0x0000732ce49b1ba8 [type=7(external_word) addr=0x0000732d1c520a00 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1baa: 310e
relocInfo@0x0000732ce49b1baa [type=6(runtime_call) addr=0x0000732d1c520a0e offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1bac: 3129
relocInfo@0x0000732ce49b1bac [type=6(runtime_call) addr=0x0000732d1c520a37 offset=41 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1bae: 8005
relocInfo@0x0000732ce49b1bae [type=16(post_call_nop) addr=0x0000732d1c520a3c offset=5]
         @0x0000732ce49b1bb0: 7c02000001343808
relocInfo@0x0000732ce49b1bb6 [type=7(external_word) addr=0x0000732d1c520a44 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1bb8: 310e
relocInfo@0x0000732ce49b1bb8 [type=6(runtime_call) addr=0x0000732d1c520a52 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1bba: 312d
relocInfo@0x0000732ce49b1bba [type=6(runtime_call) addr=0x0000732d1c520a7f offset=45 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1bbc: 8005
relocInfo@0x0000732ce49b1bbc [type=16(post_call_nop) addr=0x0000732d1c520a84 offset=5]
         @0x0000732ce49b1bbe: 7c02000001343808
relocInfo@0x0000732ce49b1bc4 [type=7(external_word) addr=0x0000732d1c520a8c offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1bc6: 310e
relocInfo@0x0000732ce49b1bc6 [type=6(runtime_call) addr=0x0000732d1c520a9a offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1bc8: 312d
relocInfo@0x0000732ce49b1bc8 [type=6(runtime_call) addr=0x0000732d1c520ac7 offset=45 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1bca: 8005
relocInfo@0x0000732ce49b1bca [type=16(post_call_nop) addr=0x0000732d1c520acc offset=5]
         @0x0000732ce49b1bcc: 7c02000001343808
relocInfo@0x0000732ce49b1bd2 [type=7(external_word) addr=0x0000732d1c520ad4 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1bd4: 310e
relocInfo@0x0000732ce49b1bd4 [type=6(runtime_call) addr=0x0000732d1c520ae2 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1bd6: 312d
relocInfo@0x0000732ce49b1bd6 [type=6(runtime_call) addr=0x0000732d1c520b0f offset=45 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1bd8: 8005
relocInfo@0x0000732ce49b1bd8 [type=16(post_call_nop) addr=0x0000732d1c520b14 offset=5]
         @0x0000732ce49b1bda: 7c02000001343808
relocInfo@0x0000732ce49b1be0 [type=7(external_word) addr=0x0000732d1c520b1c offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1be2: 310e
relocInfo@0x0000732ce49b1be2 [type=6(runtime_call) addr=0x0000732d1c520b2a offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1be4: 3119
relocInfo@0x0000732ce49b1be4 [type=6(runtime_call) addr=0x0000732d1c520b43 offset=25 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1be6: 8005
relocInfo@0x0000732ce49b1be6 [type=16(post_call_nop) addr=0x0000732d1c520b48 offset=5]
         @0x0000732ce49b1be8: 7c02000001343808
relocInfo@0x0000732ce49b1bee [type=7(external_word) addr=0x0000732d1c520b50 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1bf0: 310e
relocInfo@0x0000732ce49b1bf0 [type=6(runtime_call) addr=0x0000732d1c520b5e offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1bf2: 3125
relocInfo@0x0000732ce49b1bf2 [type=6(runtime_call) addr=0x0000732d1c520b83 offset=37 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1bf4: 8005
relocInfo@0x0000732ce49b1bf4 [type=16(post_call_nop) addr=0x0000732d1c520b88 offset=5]
         @0x0000732ce49b1bf6: 7c02000001343808
relocInfo@0x0000732ce49b1bfc [type=7(external_word) addr=0x0000732d1c520b90 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1bfe: 310e
relocInfo@0x0000732ce49b1bfe [type=6(runtime_call) addr=0x0000732d1c520b9e offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1c00: 3121
relocInfo@0x0000732ce49b1c00 [type=6(runtime_call) addr=0x0000732d1c520bbf offset=33 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1c02: 8005
relocInfo@0x0000732ce49b1c02 [type=16(post_call_nop) addr=0x0000732d1c520bc4 offset=5]
         @0x0000732ce49b1c04: 7c02000001343808
relocInfo@0x0000732ce49b1c0a [type=7(external_word) addr=0x0000732d1c520bcc offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1c0c: 310e
relocInfo@0x0000732ce49b1c0c [type=6(runtime_call) addr=0x0000732d1c520bda offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1c0e: 311d
relocInfo@0x0000732ce49b1c0e [type=6(runtime_call) addr=0x0000732d1c520bf7 offset=29 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1c10: 8005
relocInfo@0x0000732ce49b1c10 [type=16(post_call_nop) addr=0x0000732d1c520bfc offset=5]
         @0x0000732ce49b1c12: 7c02000001343808
relocInfo@0x0000732ce49b1c18 [type=7(external_word) addr=0x0000732d1c520c04 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1c1a: 310e
relocInfo@0x0000732ce49b1c1a [type=6(runtime_call) addr=0x0000732d1c520c12 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1c1c: 3119
relocInfo@0x0000732ce49b1c1c [type=6(runtime_call) addr=0x0000732d1c520c2b offset=25 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1c1e: 8005
relocInfo@0x0000732ce49b1c1e [type=16(post_call_nop) addr=0x0000732d1c520c30 offset=5]
         @0x0000732ce49b1c20: 7c02000001343808
relocInfo@0x0000732ce49b1c26 [type=7(external_word) addr=0x0000732d1c520c38 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1c28: 310e
relocInfo@0x0000732ce49b1c28 [type=6(runtime_call) addr=0x0000732d1c520c46 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1c2a: 3121
relocInfo@0x0000732ce49b1c2a [type=6(runtime_call) addr=0x0000732d1c520c67 offset=33 format=1] | [destination=0x0000732d1c4908e0] UncommonTrapBlob
         @0x0000732ce49b1c2c: 8005
relocInfo@0x0000732ce49b1c2c [type=16(post_call_nop) addr=0x0000732d1c520c6c offset=5]
         @0x0000732ce49b1c2e: 7c02000001343808
relocInfo@0x0000732ce49b1c34 [type=7(external_word) addr=0x0000732d1c520c74 offset=8 data={00000134}] | [target=0x0000732ce49af990]
         @0x0000732ce49b1c36: 310e
relocInfo@0x0000732ce49b1c36 [type=6(runtime_call) addr=0x0000732d1c520c82 offset=14 format=1] | [destination=0x0000732d2ef74fe2] MacroAssembler::debug64(char*, long, long*)
         @0x0000732ce49b1c38: 312d
relocInfo@0x0000732ce49b1c38 [type=6(runtime_call) addr=0x0000732d1c520caf offset=45 format=1] | [destination=0x0000732d1c489260] C2 Runtime rethrow_blob
         @0x0000732ce49b1c3a: 3149
relocInfo@0x0000732ce49b1c3a [type=6(runtime_call) addr=0x0000732d1c520cf8 offset=73 format=1] | [destination=0x0000732d2e98e99a] G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
         @0x0000732ce49b1c3c: 7c0109c54020
relocInfo@0x0000732ce49b1c40 [type=8(internal_word) addr=0x0000732d1c520d18 offset=32 data=2501] | [target=0x0000732d1c520353]
         @0x0000732ce49b1c42: 3111
relocInfo@0x0000732ce49b1c42 [type=6(runtime_call) addr=0x0000732d1c520d29 offset=17 format=1] | [destination=0x0000732d1c4fbc60] SafepointBlob
         @0x0000732ce49b1c44: 3105
relocInfo@0x0000732ce49b1c44 [type=6(runtime_call) addr=0x0000732d1c520d2e offset=5 format=1] | [destination=0x0000732d1c4e13a0] Stub::Stub Generator method_entry_barrier_stub
         @0x0000732ce49b1c46: 000a
relocInfo@0x0000732ce49b1c46 [type=0(none) addr=0x0000732d1c520d38 offset=10]
         @0x0000732ce49b1c48: 7c01ff212800
relocInfo@0x0000732ce49b1c4c [type=5(static_stub) addr=0x0000732d1c520d38 offset=0 data=-223] | [static_call=0x0000732d1c51fd5f]
         @0x0000732ce49b1c4e: 7c01fc852800
relocInfo@0x0000732ce49b1c52 [type=5(static_stub) addr=0x0000732d1c520d38 offset=0 data=-891] | [static_call=0x0000732d1c51fffb]
         @0x0000732ce49b1c54: 6000
relocInfo@0x0000732ce49b1c54 [type=12(metadata) addr=0x0000732d1c520d38 offset=0] | [metadata_addr=0x0000732d1c520d3a *=0x0000000000000000]
         @0x0000732ce49b1c56: 310a
relocInfo@0x0000732ce49b1c56 [type=6(runtime_call) addr=0x0000732d1c520d42 offset=10 format=1] | [destination=0x0000732d1c520d42] nmethod
         @0x0000732ce49b1c58: 3105
relocInfo@0x0000732ce49b1c58 [type=6(runtime_call) addr=0x0000732d1c520d47 offset=5 format=1] | [destination=0x0000732d1c4905e0] ExceptionBlob
         @0x0000732ce49b1c5a: 310f
relocInfo@0x0000732ce49b1c5a [type=6(runtime_call) addr=0x0000732d1c520d56 offset=15 format=1] | [destination=0x0000732d1c4fbf80] DeoptimizationBlob
         @0x0000732ce49b1c5c: 0000
relocInfo@0x0000732ce49b1c5c [type=0(none) addr=0x0000732d1c520d56 offset=0]
         @0x0000732ce49b1c5e: 0000
relocInfo@0x0000732ce49b1c5e [type=0(none) addr=0x0000732d1c520d56 offset=0]
         @0x0000732ce49b1c60: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type evol_method
  method  = *{method} {0x0000732cf84015e0} 'micro' '([I[I)V' in 'test_ms'
Dependency of type evol_method
  method  = *{method} {0x0000732cf807c940} 'ofArray' '([I)Ljava/lang/foreign/MemorySegment;' in 'java/lang/foreign/MemorySegment'
Dependency of type evol_method
  method  = *{method} {0x000000004c3612f8} 'nativeOrder' '()Ljava/nio/ByteOrder;' in 'java/nio/ByteOrder'
Dependency of type evol_method
  method  = *{method} {0x0000732cf80da118} 'fromMemorySegment' '(Ljdk/incubator/vector/VectorSpecies;Ljava/lang/foreign/MemorySegment;JLjava/nio/ByteOrder;)Ljdk/incubator/vector/VectorShuffle;' in 'jdk/incubator/vector/VectorShuffle'
Dependency of type evol_method
  method  = *{method} {0x0000732cf8143360} 'fromArray' '([I)Ljdk/internal/foreign/HeapMemorySegmentImpl$OfInt;' in 'jdk/internal/foreign/SegmentFactories'
Dependency of type evol_method
  method  = *{method} {0x0000732cf81445c0} 'ensureInitialized' '()V' in 'jdk/internal/foreign/SegmentFactories'
Dependency of type evol_method
  method  = *{method} {0x000000004c27f818} 'requireNonNull' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/util/Objects'
Dependency of type evol_method
  method  = {method} {0x0000732cf8163d80} 'scale' '()J' in 'jdk/internal/foreign/Utils$BaseAndScale'
Dependency of type evol_method
  method  = {method} {0x0000732cf8163cc0} 'base' '()J' in 'jdk/internal/foreign/Utils$BaseAndScale'
Dependency of type evol_method
  method  = *{method} {0x0000732cf815a088} 'createHeap' '(Ljava/lang/Object;)Ljdk/internal/foreign/MemorySessionImpl;' in 'jdk/internal/foreign/MemorySessionImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf8164958} '<init>' '(JLjava/lang/Object;JZLjdk/internal/foreign/MemorySessionImpl;)V' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
Dependency of type evol_method
  method  = {method} {0x0000732cf8167e20} '<init>' '(Ljava/lang/Object;)V' in 'jdk/internal/foreign/GlobalSession$HeapSession'
Dependency of type evol_method
  method  = {method} {0x0000732cf8162930} '<init>' '()V' in 'jdk/internal/foreign/GlobalSession'
Dependency of type evol_method
  method  = {method} {0x0000732cf8159d78} '<init>' '(Ljava/lang/Thread;Ljdk/internal/foreign/MemorySessionImpl$ResourceList;)V' in 'jdk/internal/foreign/MemorySessionImpl'
Dependency of type evol_method
  method  = {method} {0x000000004c575f88} '<init>' '()V' in 'java/lang/Object'
Dependency of type evol_method
  method  = {method} {0x0000732cf8165aa0} '<init>' '(JLjava/lang/Object;JZLjdk/internal/foreign/MemorySessionImpl;)V' in 'jdk/internal/foreign/HeapMemorySegmentImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf814b350} '<init>' '(JZLjdk/internal/foreign/MemorySessionImpl;)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf80b3648} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
Dependency of type evol_method
  method  = {method} {0x0000732cf81523e8} 'asSlice' '(JJ)Ljava/lang/foreign/MemorySegment;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf814b728} 'asSlice' '(JJ)Ljdk/internal/foreign/AbstractMemorySegmentImpl;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf814e150} 'checkBounds' '(JJ)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf814c078} 'asSliceNoCheck' '(JJ)Ljdk/internal/foreign/AbstractMemorySegmentImpl;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf81650a0} 'dup' '(JJZLjdk/internal/foreign/MemorySessionImpl;)Ljdk/internal/foreign/AbstractMemorySegmentImpl;' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
Dependency of type evol_method
  method  = {method} {0x0000732cf8164a60} 'dup' '(JJZLjdk/internal/foreign/MemorySessionImpl;)Ljdk/internal/foreign/HeapMemorySegmentImpl$OfInt;' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
Dependency of type evol_method
  method  = {method} {0x0000732cf8099e88} 'withOrder' '(Ljava/nio/ByteOrder;)Ljava/lang/foreign/ValueLayout$OfInt;' in 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf8074990} 'withOrder' '(Ljava/nio/ByteOrder;)Ljdk/internal/foreign/layout/ValueLayouts$AbstractValueLayout;' in 'jdk/internal/foreign/layout/ValueLayouts$AbstractValueLayout'
Dependency of type evol_method
  method  = {method} {0x0000732cf80768c8} 'byteAlignment' '()J' in 'jdk/internal/foreign/layout/AbstractLayout'
Dependency of type evol_method
  method  = {method} {0x0000732cf8076730} 'name' '()Ljava/util/Optional;' in 'jdk/internal/foreign/layout/AbstractLayout'
Dependency of type evol_method
  method  = {method} {0x0000732cf8099b70} 'dup' '(Ljava/nio/ByteOrder;JLjava/util/Optional;)Ljdk/internal/foreign/layout/ValueLayouts$AbstractValueLayout;' in 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf8099a28} 'dup' '(Ljava/nio/ByteOrder;JLjava/util/Optional;)Ljdk/internal/foreign/layout/ValueLayouts$OfIntImpl;' in 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf8099938} '<init>' '(Ljava/nio/ByteOrder;JLjava/util/Optional;)V' in 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf814d370} 'toArray' '(Ljava/lang/foreign/ValueLayout$OfInt;)[I' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
Dependency of type evol_method
  method  = *{method} {0x000000004c26b840} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder'
Dependency of type evol_method
  method  = {method} {0x0000732cf814d768} 'toArray' '(Ljava/lang/Class;Ljava/lang/foreign/ValueLayout;Ljava/util/function/IntFunction;Ljava/util/function/Function;)Ljava/lang/Object;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
Dependency of type evol_method
  method  = *{method} {0x000000004c272ed0} 'constant_L' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$Holder'
Dependency of type evol_method
  method  = {method} {0x000000004c1cece8} 'getSimpleName' '()Ljava/lang/String;' in 'java/lang/Class'
Dependency of type evol_method
  method  = {method} {0x0000732cf814e028} 'checkArraySize' '(Ljava/lang/String;I)I' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
Dependency of type evol_method
  method  = *{method} {0x0000732cf807ce98} 'copy' '(Ljava/lang/foreign/MemorySegment;Ljava/lang/foreign/ValueLayout;JLjava/lang/foreign/MemorySegment;Ljava/lang/foreign/ValueLayout;JJ)V' in 'java/lang/foreign/MemorySegment'
Dependency of type evol_method
  method  = {method} {0x000000004c1ce4d8} 'reflectionData' '()Ljava/lang/Class$ReflectionData;' in 'java/lang/Class'
Dependency of type evol_method
  method  = {method} {0x000000004c1f36b0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference'
Dependency of type evol_method
  method  = {method} {0x000000004c1f27c0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/Reference'
Dependency of type evol_method
  method  = {method} {0x0000732cf8076988} 'byteSize' '()J' in 'jdk/internal/foreign/layout/AbstractLayout'
Dependency of type evol_method
  method  = *{method} {0x0000732cf80815c8} 'isAligned' '(JJ)Z' in 'jdk/internal/foreign/Utils'
Dependency of type evol_method
  method  = {method} {0x0000732cf8168ca8} 'apply' '(I)Ljava/lang/Object;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'
Dependency of type evol_method
  method  = *{method} {0x0000732cf8152950} 'lambda$toArray$3' '(I)[I' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf81692f8} 'apply' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'
Dependency of type evol_method
  method  = {method} {0x0000732cf809a428} 'withOrder' '(Ljava/nio/ByteOrder;)Ljava/lang/foreign/ValueLayout;' in 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
Dependency of type evol_method
  method  = *{method} {0x0000732cf814f3a0} 'copy' '(Ljava/lang/foreign/MemorySegment;Ljava/lang/foreign/ValueLayout;JLjava/lang/foreign/MemorySegment;Ljava/lang/foreign/ValueLayout;JJ)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
Dependency of type evol_method
  method  = *{method} {0x0000732cf8081ed0} 'checkNonNegativeIndex' '(JLjava/lang/String;)V' in 'jdk/internal/foreign/Utils'
Dependency of type evol_method
  method  = *{method} {0x0000732cf80817e8} 'checkElementAlignment' '(Ljava/lang/foreign/ValueLayout;Ljava/lang/String;)V' in 'jdk/internal/foreign/Utils'
Dependency of type evol_method
  method  = {method} {0x0000732cf814ddb0} 'isAlignedForElement' '(JLjava/lang/foreign/MemoryLayout;)Z' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf814d968} 'checkAccess' '(JJZ)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
Dependency of type evol_method
  method  = *{method} {0x000000004c243bc0} 'getScopedMemoryAccess' '()Ljdk/internal/misc/ScopedMemoryAccess;' in 'jdk/internal/misc/ScopedMemoryAccess'
Dependency of type evol_method
  method  = {method} {0x0000732cf814e4e8} 'sessionImpl' '()Ljdk/internal/foreign/MemorySessionImpl;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
Dependency of type evol_method
  method  = {method} {0x000000004c2405f0} 'copyMemory' '(Ljdk/internal/foreign/MemorySessionImpl;Ljdk/internal/foreign/MemorySessionImpl;Ljava/lang/Object;JLjava/lang/Object;JJ)V' in 'jdk/internal/misc/ScopedMemoryAccess'
Dependency of type evol_method
  method  = *{method} {0x0000732cf80816e0} 'isElementAligned' '(Ljava/lang/foreign/ValueLayout;)Z' in 'jdk/internal/foreign/Utils'
Dependency of type evol_method
  method  = {method} {0x0000732cf814deb8} 'isAlignedForElement' '(JJ)Z' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf8164e48} 'unsafeGetOffset' '()J' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
Dependency of type evol_method
  method  = {method} {0x0000732cf8165b70} 'unsafeGetOffset' '()J' in 'jdk/internal/foreign/HeapMemorySegmentImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf8164be8} 'maxAlignMask' '()J' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
Dependency of type evol_method
  method  = {method} {0x0000732cf814d850} 'checkReadOnly' '(Z)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf80748b0} 'order' '()Ljava/nio/ByteOrder;' in 'jdk/internal/foreign/layout/ValueLayouts$AbstractValueLayout'
Dependency of type evol_method
  method  = {method} {0x0000732cf8164fc8} 'unsafeGetBase' '()Ljava/lang/Object;' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
Dependency of type evol_method
  method  = {method} {0x0000732cf8164b28} 'unsafeGetBase' '()[I' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
Dependency of type evol_method
  method  = {method} {0x000000004c243cb0} 'copyMemoryInternal' '(Ljdk/internal/foreign/MemorySessionImpl;Ljdk/internal/foreign/MemorySessionImpl;Ljava/lang/Object;JLjava/lang/Object;JJ)V' in 'jdk/internal/misc/ScopedMemoryAccess'
Dependency of type evol_method
  method  = {method} {0x000000004c237ca0} 'copyMemory' '(Ljava/lang/Object;JLjava/lang/Object;JJ)V' in 'jdk/internal/misc/Unsafe'
Dependency of type evol_method
  method  = *{method} {0x000000004c1f33d0} 'reachabilityFence' '(Ljava/lang/Object;)V' in 'java/lang/ref/Reference'
Dependency of type evol_method
  method  = {method} {0x0000732cf815a658} 'checkValidStateRaw' '()V' in 'jdk/internal/foreign/MemorySessionImpl'
Dependency of type evol_method
  method  = {method} {0x000000004c237bc0} 'copyMemoryChecks' '(Ljava/lang/Object;JLjava/lang/Object;JJ)V' in 'jdk/internal/misc/Unsafe'
Dependency of type evol_method
  method  = {method} {0x000000004c237830} 'checkSize' '(J)V' in 'jdk/internal/misc/Unsafe'
Dependency of type evol_method
  method  = {method} {0x000000004c237b50} 'checkPrimitivePointer' '(Ljava/lang/Object;J)V' in 'jdk/internal/misc/Unsafe'
Dependency of type evol_method
  method  = {method} {0x000000004c2375f0} 'checkPointer' '(Ljava/lang/Object;J)V' in 'jdk/internal/misc/Unsafe'
Dependency of type evol_method
  method  = {method} {0x000000004c237660} 'checkPrimitiveArray' '(Ljava/lang/Class;)V' in 'jdk/internal/misc/Unsafe'
Dependency of type evol_method
  method  = {method} {0x000000004c236b50} 'checkOffset' '(Ljava/lang/Object;J)V' in 'jdk/internal/misc/Unsafe'
Dependency of type evol_method
  method  = {method} {0x000000004c1cdce8} 'getComponentType' '()Ljava/lang/Class;' in 'java/lang/Class'
Dependency of type evol_method
  method  = {method} {0x000000004c1cdc08} 'isPrimitive' '()Z' in 'java/lang/Class'
Dependency of type evol_method
  method  = {method} {0x0000732cf80b52f0} 'shuffleFromArray' '([II)Ljdk/incubator/vector/VectorShuffle;' in 'jdk/incubator/vector/AbstractSpecies'
Dependency of type evol_method
  method  = {method} {0x0000732cf80b5008} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies'
Dependency of type evol_method
  method  = {method} {0x0000732cf80aee70} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/ByteVector$ByteSpecies'
Dependency of type evol_method
  method  = {method} {0x0000732cf80ad9f8} 'dummyVector' '()Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector$ByteSpecies'
Dependency of type evol_method
  method  = {method} {0x0000732cf80fb728} 'shuffleFromArray' '([II)Ljdk/incubator/vector/AbstractShuffle;' in 'jdk/incubator/vector/Byte256Vector'
Dependency of type evol_method
  method  = {method} {0x0000732cf80f4e50} 'shuffleFromArray' '([II)Ljdk/incubator/vector/Byte256Vector$Byte256Shuffle;' in 'jdk/incubator/vector/Byte256Vector'
Dependency of type evol_method
  method  = {method} {0x0000732cf8102e10} '<init>' '([II)V' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
Dependency of type evol_method
  method  = *{method} {0x0000732cf8103b88} 'prepare' '([II)[B' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
Dependency of type evol_method
  method  = {method} {0x0000732cf8102d18} '<init>' '([B)V' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
Dependency of type evol_method
  method  = *{method} {0x0000732cf80d8630} 'partiallyWrapIndex' '(II)I' in 'jdk/incubator/vector/AbstractShuffle'
Dependency of type evol_method
  method  = *{method} {0x0000732cf80d8750} 'checkIndex0' '(IIB)I' in 'jdk/incubator/vector/AbstractShuffle'
Dependency of type evol_method
  method  = *{method} {0x0000732cf816d880} 'wrapToRange' '(II)I' in 'jdk/incubator/vector/VectorIntrinsics'
Dependency of type evol_method
  method  = {method} {0x0000732cf80d7af0} '<init>' '(Ljava/lang/Object;)V' in 'jdk/incubator/vector/AbstractShuffle'
Dependency of type evol_method
  method  = {method} {0x0000732cf80d9760} '<init>' '(Ljava/lang/Object;)V' in 'jdk/incubator/vector/VectorShuffle'
Dependency of type evol_method
  method  = {method} {0x000000004c1f1978} '<init>' '(Ljava/lang/Object;)V' in 'jdk/internal/vm/vector/VectorSupport$VectorShuffle'
Dependency of type evol_method
  method  = {method} {0x000000004c1f1068} '<init>' '(Ljava/lang/Object;)V' in 'jdk/internal/vm/vector/VectorSupport$VectorPayload'
Dependency of type evol_method
  method  = {method} {0x0000732cf8103708} 'intoMemorySegment' '(Ljava/lang/foreign/MemorySegment;JLjava/nio/ByteOrder;)V' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
Dependency of type evol_method
  method  = {method} {0x0000732cf8103230} 'toBitsVector' '()Ljdk/incubator/vector/Byte256Vector;' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
Dependency of type evol_method
  method  = {method} {0x0000732cf8181a18} 'intoMemorySegment' '(Ljava/lang/foreign/MemorySegment;JLjava/nio/ByteOrder;)V' in 'jdk/incubator/vector/IntVector'
Dependency of type evol_method
  method  = {method} {0x0000732cf80d7e58} 'toBitsVectorTemplate' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractShuffle'
Dependency of type evol_method
  method  = {method} {0x0000732cf80b4820} 'asIntegral' '()Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/AbstractSpecies'
Dependency of type evol_method
  method  = {method} {0x0000732cf80d98f0} 'length' '()I' in 'jdk/incubator/vector/VectorShuffle'
Dependency of type evol_method
  method  = {method} {0x0000732cf8104088} 'vspecies' '()Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
Dependency of type evol_method
  method  = {method} {0x0000732cf8103078} 'vspecies' '()Ljdk/incubator/vector/ByteVector$ByteSpecies;' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
Dependency of type evol_method
  method  = {method} {0x0000732cf80bc808} 'asIntegral' '()Ljdk/incubator/vector/LaneType;' in 'jdk/incubator/vector/LaneType'
Dependency of type evol_method
  method  = {method} {0x0000732cf80b4728} 'withLanes' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/AbstractSpecies'
Dependency of type evol_method
  method  = {method} {0x0000732cf80bd120} 'check' '()Ljdk/incubator/vector/LaneType;' in 'jdk/incubator/vector/LaneType'
Dependency of type evol_method
  method  = {method} {0x0000732cf80acde0} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/ByteVector$ByteSpecies'
Dependency of type evol_method
  method  = {method} {0x0000732cf80b3720} 'laneCount' '()I' in 'jdk/incubator/vector/AbstractSpecies'
Dependency of type evol_method
  method  = {method} {0x0000732cf80d7c70} 'vectorSpecies' '()Ljdk/incubator/vector/VectorSpecies;' in 'jdk/incubator/vector/AbstractShuffle'
Dependency of type evol_method
  method  = {method} {0x0000732cf80f5a20} 'convertShape' '(Ljdk/incubator/vector/VectorOperators$Conversion;Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/Byte256Vector'
Dependency of type evol_method
  method  = {method} {0x0000732cf805f3a0} 'convertShapeTemplate' '(Ljdk/incubator/vector/VectorOperators$Conversion;Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractVector'
Dependency of type evol_method
  method  = {method} {0x0000732cf8204880} 'kind' '()C' in 'jdk/incubator/vector/VectorOperators$ConversionImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf8204940} 'domain' '()Ljdk/incubator/vector/LaneType;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf80b6448} 'check' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/AbstractSpecies'
Dependency of type evol_method
  method  = {method} {0x0000732cf8204a00} 'range' '()Ljdk/incubator/vector/LaneType;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl'
Dependency of type evol_method
  method  = *{method} {0x0000732cf805f5c8} 'shapeChangeOrigin' '(Ljdk/incubator/vector/AbstractSpecies;Ljdk/incubator/vector/AbstractSpecies;ZI)I' in 'jdk/incubator/vector/AbstractVector'
Dependency of type evol_method
  method  = {method} {0x0000732cf8060900} 'convert0' '(CLjdk/incubator/vector/AbstractSpecies;)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractVector'
Dependency of type evol_method
  method  = {method} {0x0000732cf80fbb78} 'vspecies' '()Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/Byte256Vector'
Dependency of type evol_method
  method  = {method} {0x0000732cf80f42c8} 'vspecies' '()Ljdk/incubator/vector/ByteVector$ByteSpecies;' in 'jdk/incubator/vector/Byte256Vector'
Dependency of type evol_method
  method  = {method} {0x0000732cf81946b8} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/IntVector$IntSpecies'
Dependency of type evol_method
  method  = {method} {0x0000732cf80f43a0} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/Byte256Vector'
Dependency of type evol_method
  method  = {method} {0x0000732cf80f4628} 'length' '()I' in 'jdk/incubator/vector/Byte256Vector'
Dependency of type evol_method
  method  = {method} {0x0000732cf8196748} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
Dependency of type evol_method
  method  = {method} {0x0000732cf81952d0} 'dummyVector' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
Dependency of type evol_method
  method  = {method} {0x0000732cf8183fb0} 'reinterpretAsInts' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
Dependency of type evol_method
  method  = {method} {0x0000732cf805e890} 'reinterpretAsInts' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/AbstractVector'
Dependency of type evol_method
  method  = {method} {0x0000732cf81c15d8} 'asVectorRaw' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/Int256Vector'
Dependency of type evol_method
  method  = {method} {0x0000732cf805db58} 'asVectorRawTemplate' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractVector'
Dependency of type evol_method
  method  = {method} {0x0000732cf81c7af0} 'vspecies' '()Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/Int256Vector'
Dependency of type evol_method
  method  = {method} {0x0000732cf81c06b8} 'vspecies' '()Ljdk/incubator/vector/IntVector$IntSpecies;' in 'jdk/incubator/vector/Int256Vector'
Dependency of type evol_method
  method  = {method} {0x0000732cf81c0790} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/Int256Vector'
Dependency of type evol_method
  method  = {method} {0x0000732cf81c0a18} 'length' '()I' in 'jdk/incubator/vector/Int256Vector'
Dependency of type evol_method
  method  = *{method} {0x0000732cf816d150} 'checkFromIndexSize' '(JJJ)J' in 'jdk/incubator/vector/VectorIntrinsics'
Dependency of type evol_method
  method  = {method} {0x0000732cf81831d0} 'maybeSwap' '(Ljava/nio/ByteOrder;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
Dependency of type evol_method
  method  = {method} {0x0000732cf8182d60} 'intoMemorySegment0' '(Ljava/lang/foreign/MemorySegment;J)V' in 'jdk/incubator/vector/IntVector'
Dependency of type evol_method
  method  = {method} {0x0000732cf814b640} 'isReadOnly' '()Z' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
Dependency of type evol_method
  method  = {method} {0x0000732cf81c0bd0} 'byteSize' '()I' in 'jdk/incubator/vector/Int256Vector'
Dependency of type evol_method
  method  = {method} {0x0000732cf814c620} 'byteSize' '()J' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
Dependency of type evol_method
  method  = *{method} {0x000000004c27f578} 'checkIndex' '(JJ)J' in 'java/util/Objects'
Dependency of type evol_method
  method  = {method} {0x0000732cf8194870} 'vectorType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/IntVector$IntSpecies'
Dependency of type evol_method
  method  = *{method} {0x000000004c24ab60} 'storeIntoMemorySegment' '(Ljava/lang/Class;Ljava/lang/Class;ILjdk/internal/vm/vector/VectorSupport$Vector;Ljdk/internal/foreign/AbstractMemorySegmentImpl;JLjdk/internal/vm/vector/VectorSupport$StoreVectorOperation;)V' in 'jdk/internal/misc/ScopedMemoryAccess'
Dependency of type evol_method
  method  = *{method} {0x000000004c244260} 'storeIntoMemorySegmentScopedInternal' '(Ljdk/internal/foreign/MemorySessionImpl;Ljava/lang/Class;Ljava/lang/Class;ILjdk/internal/vm/vector/VectorSupport$Vector;Ljdk/internal/foreign/AbstractMemorySegmentImpl;JLjdk/internal/vm/vector/VectorSupport$StoreVectorOperation;)V' in 'jdk/internal/misc/ScopedMemoryAccess'
Dependency of type evol_method
  method  = *{method} {0x0000732cf805f778} 'partInRange' '(III)Z' in 'jdk/incubator/vector/AbstractVector'
Dependency of type evol_method
  method  = {method} {0x0000732cf80fb390} 'slice' '(I)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/Byte256Vector'
Dependency of type evol_method
  method  = {method} {0x0000732cf80f7288} 'slice' '(I)Ljdk/incubator/vector/Byte256Vector;' in 'jdk/incubator/vector/Byte256Vector'
Dependency of type evol_method
  method  = {method} {0x0000732cf8049420} 'sliceTemplate' '(I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
Dependency of type evol_method
  method  = *{method} {0x000000004c27f508} 'checkIndex' '(II)I' in 'java/util/Objects'
Dependency of type evol_method
  method  = {method} {0x0000732cf80ae780} 'zero' '()Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector$ByteSpecies'
Dependency of type evol_method
  method  = {method} {0x0000732cf80acf98} 'vectorType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/ByteVector$ByteSpecies'
Dependency of type evol_method
  method  = {method} {0x0000732cf80b40a8} 'vectorBitSize' '()I' in 'jdk/incubator/vector/AbstractSpecies'
Dependency of type evol_method
  method  = {method} {0x0000732cf80b4180} 'vectorByteSize' '()I' in 'jdk/incubator/vector/AbstractSpecies'
Dependency of type leaf_type
  context = java.lang.Class$ReflectionData
   [nmethod<=klass]java.lang.Class$ReflectionData
Dependency of type abstract_with_unique_concrete_subtype
  context = *jdk.internal.foreign.MemorySessionImpl
  class   = jdk.internal.foreign.GlobalSession
   [nmethod<=klass]jdk.internal.foreign.MemorySessionImpl
Dependency of type unique_concrete_method_4
  context = java.lang.ref.SoftReference
  method  = {method} {0x000000004c1f36b0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference'
  class   = java.lang.ref.SoftReference
  method  = {method} {0x000000004c1f36b0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference'
   [nmethod<=klass]java.lang.ref.SoftReference
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.Byte256Vector$Byte256Shuffle
  method  = {method} {0x0000732cf80d7c70} 'vectorSpecies' '()Ljdk/incubator/vector/VectorSpecies;' in 'jdk/incubator/vector/AbstractShuffle'
  class   = jdk.incubator.vector.VectorShuffle
  method  = *{method} {0x0000732cf80d9810} 'vectorSpecies' '()Ljdk/incubator/vector/VectorSpecies;' in 'jdk/incubator/vector/VectorShuffle'
   [nmethod<=klass]jdk.incubator.vector.Byte256Vector$Byte256Shuffle
Dependency of type unique_concrete_method_4
  context = jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
  method  = {method} {0x0000732cf81523e8} 'asSlice' '(JJ)Ljava/lang/foreign/MemorySegment;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  class   = java.lang.foreign.MemorySegment
  method  = *{method} {0x0000732cf807b158} 'asSlice' '(JJ)Ljava/lang/foreign/MemorySegment;' in 'java/lang/foreign/MemorySegment'
   [nmethod<=klass]jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
Dependency of type unique_concrete_method_4
  context = jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
  method  = {method} {0x0000732cf814b728} 'asSlice' '(JJ)Ljdk/internal/foreign/AbstractMemorySegmentImpl;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  class   = jdk.internal.foreign.AbstractMemorySegmentImpl
  method  = {method} {0x0000732cf814b728} 'asSlice' '(JJ)Ljdk/internal/foreign/AbstractMemorySegmentImpl;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
   [nmethod<=klass]jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
Dependency of type unique_concrete_method_4
  context = jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
  method  = {method} {0x0000732cf814e150} 'checkBounds' '(JJ)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  class   = jdk.internal.foreign.AbstractMemorySegmentImpl
  method  = {method} {0x0000732cf814e150} 'checkBounds' '(JJ)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
   [nmethod<=klass]jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
Dependency of type unique_concrete_method_4
  context = jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
  method  = {method} {0x0000732cf814d370} 'toArray' '(Ljava/lang/foreign/ValueLayout$OfInt;)[I' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  class   = java.lang.foreign.MemorySegment
  method  = *{method} {0x0000732cf807c0e8} 'toArray' '(Ljava/lang/foreign/ValueLayout$OfInt;)[I' in 'java/lang/foreign/MemorySegment'
   [nmethod<=klass]jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
Dependency of type unique_concrete_method_4
  context = jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
  method  = {method} {0x0000732cf814d968} 'checkAccess' '(JJZ)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  class   = jdk.internal.foreign.AbstractMemorySegmentImpl
  method  = {method} {0x0000732cf814d968} 'checkAccess' '(JJZ)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
   [nmethod<=klass]jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
Dependency of type unique_concrete_method_4
  context = jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
  method  = {method} {0x0000732cf814d850} 'checkReadOnly' '(Z)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  class   = jdk.internal.foreign.AbstractMemorySegmentImpl
  method  = {method} {0x0000732cf814d850} 'checkReadOnly' '(Z)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
   [nmethod<=klass]jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
Dependency of type unique_concrete_method_4
  context = jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
  method  = {method} {0x0000732cf814b640} 'isReadOnly' '()Z' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  class   = java.lang.foreign.MemorySegment
  method  = *{method} {0x0000732cf807b660} 'isReadOnly' '()Z' in 'java/lang/foreign/MemorySegment'
   [nmethod<=klass]jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
Dependency of type unique_concrete_method_4
  context = jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
  method  = {method} {0x0000732cf814c620} 'byteSize' '()J' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
  class   = java.lang.foreign.MemorySegment
  method  = *{method} {0x0000732cf807b008} 'byteSize' '()J' in 'java/lang/foreign/MemorySegment'
   [nmethod<=klass]jdk.internal.foreign.HeapMemorySegmentImpl$OfInt
Dependency of type unique_concrete_method_4
  context = jdk.internal.foreign.GlobalSession
  method  = {method} {0x0000732cf815a658} 'checkValidStateRaw' '()V' in 'jdk/internal/foreign/MemorySessionImpl'
  class   = jdk.internal.foreign.MemorySessionImpl
  method  = {method} {0x0000732cf815a658} 'checkValidStateRaw' '()V' in 'jdk/internal/foreign/MemorySessionImpl'
   [nmethod<=klass]jdk.internal.foreign.GlobalSession
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.ByteVector$ByteSpecies
  method  = {method} {0x0000732cf80b3648} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  class   = jdk.incubator.vector.VectorSpecies
  method  = *{method} {0x0000732cf80b18c8} 'length' '()I' in 'jdk/incubator/vector/VectorSpecies'
   [nmethod<=klass]jdk.incubator.vector.ByteVector$ByteSpecies
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.ByteVector$ByteSpecies
  method  = {method} {0x0000732cf80b52f0} 'shuffleFromArray' '([II)Ljdk/incubator/vector/VectorShuffle;' in 'jdk/incubator/vector/AbstractSpecies'
  class   = jdk.incubator.vector.VectorSpecies
  method  = *{method} {0x0000732cf80b2950} 'shuffleFromArray' '([II)Ljdk/incubator/vector/VectorShuffle;' in 'jdk/incubator/vector/VectorSpecies'
   [nmethod<=klass]jdk.incubator.vector.ByteVector$ByteSpecies
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.ByteVector$ByteSpecies
  method  = {method} {0x0000732cf80b4820} 'asIntegral' '()Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/AbstractSpecies'
  class   = jdk.incubator.vector.AbstractSpecies
  method  = {method} {0x0000732cf80b4820} 'asIntegral' '()Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/AbstractSpecies'
   [nmethod<=klass]jdk.incubator.vector.ByteVector$ByteSpecies
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.ByteVector$ByteSpecies
  method  = {method} {0x0000732cf80b6448} 'check' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/AbstractSpecies'
  class   = jdk.incubator.vector.AbstractSpecies
  method  = {method} {0x0000732cf80b6448} 'check' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/AbstractSpecies'
   [nmethod<=klass]jdk.incubator.vector.ByteVector$ByteSpecies
Dependency of type unique_concrete_method_4
  context = jdk.internal.foreign.layout.ValueLayouts$OfIntImpl
  method  = {method} {0x0000732cf80768c8} 'byteAlignment' '()J' in 'jdk/internal/foreign/layout/AbstractLayout'
  class   = java.lang.foreign.ValueLayout
  method  = {method} {0x0000732cf806ec58} 'byteAlignment' '()J' in 'java/lang/foreign/ValueLayout'
   [nmethod<=klass]jdk.internal.foreign.layout.ValueLayouts$OfIntImpl
Dependency of type unique_concrete_method_4
  context = jdk.internal.foreign.layout.ValueLayouts$OfIntImpl
  method  = {method} {0x0000732cf80768c8} 'byteAlignment' '()J' in 'jdk/internal/foreign/layout/AbstractLayout'
  class   = java.lang.foreign.MemoryLayout
  method  = *{method} {0x0000732cf806cb80} 'byteAlignment' '()J' in 'java/lang/foreign/MemoryLayout'
   [nmethod<=klass]jdk.internal.foreign.layout.ValueLayouts$OfIntImpl
Dependency of type unique_concrete_method_4
  context = jdk.internal.foreign.layout.ValueLayouts$OfIntImpl
  method  = {method} {0x0000732cf8076988} 'byteSize' '()J' in 'jdk/internal/foreign/layout/AbstractLayout'
  class   = java.lang.foreign.ValueLayout
  method  = {method} {0x0000732cf806eae8} 'byteSize' '()J' in 'java/lang/foreign/ValueLayout'
   [nmethod<=klass]jdk.internal.foreign.layout.ValueLayouts$OfIntImpl
Dependency of type unique_concrete_method_4
  context = jdk.internal.foreign.layout.ValueLayouts$OfIntImpl
  method  = {method} {0x0000732cf80748b0} 'order' '()Ljava/nio/ByteOrder;' in 'jdk/internal/foreign/layout/ValueLayouts$AbstractValueLayout'
  class   = java.lang.foreign.ValueLayout
  method  = *{method} {0x0000732cf806dc10} 'order' '()Ljava/nio/ByteOrder;' in 'java/lang/foreign/ValueLayout'
   [nmethod<=klass]jdk.internal.foreign.layout.ValueLayouts$OfIntImpl
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.Int256Vector
  method  = {method} {0x0000732cf8183fb0} 'reinterpretAsInts' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
  class   = jdk.incubator.vector.Vector
  method  = *{method} {0x0000732cf8064378} 'reinterpretAsInts' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Vector'
   [nmethod<=klass]jdk.incubator.vector.Int256Vector
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.IntVector$IntSpecies
  method  = {method} {0x0000732cf80b6448} 'check' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/AbstractSpecies'
  class   = jdk.incubator.vector.AbstractSpecies
  method  = {method} {0x0000732cf80b6448} 'check' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/AbstractSpecies'
   [nmethod<=klass]jdk.incubator.vector.IntVector$IntSpecies
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.IntVector$IntSpecies
  method  = {method} {0x0000732cf80b4180} 'vectorByteSize' '()I' in 'jdk/incubator/vector/AbstractSpecies'
  class   = jdk.incubator.vector.VectorSpecies
  method  = *{method} {0x0000732cf80b1a18} 'vectorByteSize' '()I' in 'jdk/incubator/vector/VectorSpecies'
   [nmethod<=klass]jdk.incubator.vector.IntVector$IntSpecies
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.VectorOperators$ConversionImpl
  method  = {method} {0x0000732cf8204880} 'kind' '()C' in 'jdk/incubator/vector/VectorOperators$ConversionImpl'
  class   = jdk.incubator.vector.VectorOperators$ConversionImpl
  method  = {method} {0x0000732cf8204880} 'kind' '()C' in 'jdk/incubator/vector/VectorOperators$ConversionImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$ConversionImpl
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.VectorOperators$ConversionImpl
  method  = {method} {0x0000732cf8204940} 'domain' '()Ljdk/incubator/vector/LaneType;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl'
  class   = jdk.incubator.vector.VectorOperators$ConversionImpl
  method  = {method} {0x0000732cf8204940} 'domain' '()Ljdk/incubator/vector/LaneType;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$ConversionImpl
Dependency of type unique_concrete_method_4
  context = jdk.incubator.vector.VectorOperators$ConversionImpl
  method  = {method} {0x0000732cf8204a00} 'range' '()Ljdk/incubator/vector/LaneType;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl'
  class   = jdk.incubator.vector.VectorOperators$ConversionImpl
  method  = {method} {0x0000732cf8204a00} 'range' '()Ljdk/incubator/vector/LaneType;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl'
   [nmethod<=klass]jdk.incubator.vector.VectorOperators$ConversionImpl
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 144 bytes)
catch_pco = 228 (pc=0x0000732d1c51fd64, 1 entries)
  bci -1 at scope depth 0 -> pco 4124 (pc=0x0000732d1c520c9c)
catch_pco = 896 (pc=0x0000732d1c520000, 1 entries)
  bci -1 at scope depth 0 -> pco 4129 (pc=0x0000732d1c520ca1)
catch_pco = 1788 (pc=0x0000732d1c52037c, 1 entries)
  bci -1 at scope depth 0 -> pco 4114 (pc=0x0000732d1c520c92)
catch_pco = 1848 (pc=0x0000732d1c5203b8, 1 entries)
  bci -1 at scope depth 0 -> pco 4109 (pc=0x0000732d1c520c8d)
catch_pco = 1892 (pc=0x0000732d1c5203e4, 1 entries)
  bci -1 at scope depth 0 -> pco 4119 (pc=0x0000732d1c520c97)
catch_pco = 1940 (pc=0x0000732d1c520414, 1 entries)
  bci -1 at scope depth 0 -> pco 4104 (pc=0x0000732d1c520c88)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable (size = 3 entries, 28 bytes):
{
   < 0x0000732d1c51fca8, 0x0000732d1c520be0 > < 0x0000732d1c51fcb3, 0x0000732d1c520c18 > < 0x0000732d1c51fdba, 0x0000732d1c520c4c > 
}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
# 0: 0x0000000000000000 nullptr-oop
# 1: 0x00000000c8e9a8e8 a 'java/lang/Class'{0x00000000c8e9a8e8} = 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
# 2: 0x00000000c8e9a9b0 a 'java/lang/Class'{0x00000000c8e9a9b0} = 'jdk/internal/foreign/GlobalSession$HeapSession'
# 3: 0x00000000c8e64330 a 'jdk/incubator/vector/ByteVector$ByteSpecies'{0x00000000c8e64330}
# 4: 0x00000000c8f05120 a 'java/nio/ByteOrder'{0x00000000c8f05120}
# 5: 0x00000000c8f2c1b8 a 'java/util/Optional'{0x00000000c8f2c1b8}
# 6: 0x00000000c8ea95a0 a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'{0x00000000c8ea95a0}
# 7: 0x00000000c8e644c0 a 'java/lang/Class'{0x00000000c8e644c0} = 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
# 8: 0x00000000c8e64380 a 'java/lang/Class'{0x00000000c8e64380} = 'jdk/incubator/vector/Byte256Vector'
# 9: 0x00000000c8ecd658 a 'jdk/incubator/vector/IntVector$IntSpecies'{0x00000000c8ecd658}
#10: 0x00000000c8ecd6a8 a 'java/lang/Class'{0x00000000c8ecd6a8} = 'jdk/incubator/vector/Int256Vector'
#11: 0x00000000c8ea2000 a 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'{0x00000000c8ea2000}
#12: 0x00000000ffe7bec0 a 'java/lang/Class'{0x00000000ffe7bec0} = {type array int}
#13: 0x00000000c8ea9810 "Source layout alignment greater than its size"{0x00000000c8ea9810}
#14: 0x00000000c8ea9868 "Destination layout alignment greater than its size"{0x00000000c8ea9868}
#15: 0x00000000c8f03408 a 'jdk/internal/misc/Unsafe'{0x00000000c8f03408}
#16: 0x00000000c8f114a0 a 'jdk/internal/loader/ClassLoaders$AppClassLoader'{0x00000000c8f114a0}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#  0: 0x0000000000000000 nullptr-oop
#  1: 0x0000732cf84015e0 {method} {0x0000732cf84015e0} 'micro' '([I[I)V' in 'test_ms'
#  2: 0x0000732cf8103708 {method} {0x0000732cf8103708} 'intoMemorySegment' '(Ljava/lang/foreign/MemorySegment;JLjava/nio/ByteOrder;)V' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
#  3: 0x0000732cf8181a18 {method} {0x0000732cf8181a18} 'intoMemorySegment' '(Ljava/lang/foreign/MemorySegment;JLjava/nio/ByteOrder;)V' in 'jdk/incubator/vector/IntVector'
#  4: 0x0000732cf8182d60 {method} {0x0000732cf8182d60} 'intoMemorySegment0' '(Ljava/lang/foreign/MemorySegment;J)V' in 'jdk/incubator/vector/IntVector'
#  5: 0x000000004c24ab60 {method} {0x000000004c24ab60} 'storeIntoMemorySegment' '(Ljava/lang/Class;Ljava/lang/Class;ILjdk/internal/vm/vector/VectorSupport$Vector;Ljdk/internal/foreign/AbstractMemorySegmentImpl;JLjdk/internal/vm/vector/VectorSupport$StoreVectorOperation;)V' in 'jdk/internal/misc/ScopedMemoryAccess'
#  6: 0x000000004c244260 {method} {0x000000004c244260} 'storeIntoMemorySegmentScopedInternal' '(Ljdk/internal/foreign/MemorySessionImpl;Ljava/lang/Class;Ljava/lang/Class;ILjdk/internal/vm/vector/VectorSupport$Vector;Ljdk/internal/foreign/AbstractMemorySegmentImpl;JLjdk/internal/vm/vector/VectorSupport$StoreVectorOperation;)V' in 'jdk/internal/misc/ScopedMemoryAccess'
#  7: 0x0000732cf80da118 {method} {0x0000732cf80da118} 'fromMemorySegment' '(Ljdk/incubator/vector/VectorSpecies;Ljava/lang/foreign/MemorySegment;JLjava/nio/ByteOrder;)Ljdk/incubator/vector/VectorShuffle;' in 'jdk/incubator/vector/VectorShuffle'
#  8: 0x0000732cf814d370 {method} {0x0000732cf814d370} 'toArray' '(Ljava/lang/foreign/ValueLayout$OfInt;)[I' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
#  9: 0x0000732cf814d768 {method} {0x0000732cf814d768} 'toArray' '(Ljava/lang/Class;Ljava/lang/foreign/ValueLayout;Ljava/util/function/IntFunction;Ljava/util/function/Function;)Ljava/lang/Object;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
# 10: 0x0000732cf807ce98 {method} {0x0000732cf807ce98} 'copy' '(Ljava/lang/foreign/MemorySegment;Ljava/lang/foreign/ValueLayout;JLjava/lang/foreign/MemorySegment;Ljava/lang/foreign/ValueLayout;JJ)V' in 'java/lang/foreign/MemorySegment'
# 11: 0x0000732cf814f3a0 {method} {0x0000732cf814f3a0} 'copy' '(Ljava/lang/foreign/MemorySegment;Ljava/lang/foreign/ValueLayout;JLjava/lang/foreign/MemorySegment;Ljava/lang/foreign/ValueLayout;JJ)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
# 12: 0x000000004c2405f0 {method} {0x000000004c2405f0} 'copyMemory' '(Ljdk/internal/foreign/MemorySessionImpl;Ljdk/internal/foreign/MemorySessionImpl;Ljava/lang/Object;JLjava/lang/Object;JJ)V' in 'jdk/internal/misc/ScopedMemoryAccess'
# 13: 0x000000004c243cb0 {method} {0x000000004c243cb0} 'copyMemoryInternal' '(Ljdk/internal/foreign/MemorySessionImpl;Ljdk/internal/foreign/MemorySessionImpl;Ljava/lang/Object;JLjava/lang/Object;JJ)V' in 'jdk/internal/misc/ScopedMemoryAccess'
# 14: 0x000000004c237ca0 {method} {0x000000004c237ca0} 'copyMemory' '(Ljava/lang/Object;JLjava/lang/Object;JJ)V' in 'jdk/internal/misc/Unsafe'
# 15: 0x000000004d003648 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
# 16: 0x0000732cf8099e88 {method} {0x0000732cf8099e88} 'withOrder' '(Ljava/nio/ByteOrder;)Ljava/lang/foreign/ValueLayout$OfInt;' in 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
# 17: 0x0000732cf8074990 {method} {0x0000732cf8074990} 'withOrder' '(Ljava/nio/ByteOrder;)Ljdk/internal/foreign/layout/ValueLayouts$AbstractValueLayout;' in 'jdk/internal/foreign/layout/ValueLayouts$AbstractValueLayout'
# 18: 0x0000732cf8099b70 {method} {0x0000732cf8099b70} 'dup' '(Ljava/nio/ByteOrder;JLjava/util/Optional;)Ljdk/internal/foreign/layout/ValueLayouts$AbstractValueLayout;' in 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
# 19: 0x0000732cf8099a28 {method} {0x0000732cf8099a28} 'dup' '(Ljava/nio/ByteOrder;JLjava/util/Optional;)Ljdk/internal/foreign/layout/ValueLayouts$OfIntImpl;' in 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
# 20: 0x0000732cf8099938 {method} {0x0000732cf8099938} '<init>' '(Ljava/nio/ByteOrder;JLjava/util/Optional;)V' in 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
# 21: 0x000000004c1cece8 {method} {0x000000004c1cece8} 'getSimpleName' '()Ljava/lang/String;' in 'java/lang/Class'
# 22: 0x000000004c1ce4d8 {method} {0x000000004c1ce4d8} 'reflectionData' '()Ljava/lang/Class$ReflectionData;' in 'java/lang/Class'
# 23: 0x000000004c1f36b0 {method} {0x000000004c1f36b0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference'
# 24: 0x000000004c1f27c0 {method} {0x000000004c1f27c0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/Reference'
# 25: 0x000000004c2a9218 'java/lang/Class$ReflectionData'
# 26: 0x0000732cf814e028 {method} {0x0000732cf814e028} 'checkArraySize' '(Ljava/lang/String;I)I' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
# 27: 0x0000732cf8168ca8 {method} {0x0000732cf8168ca8} 'apply' '(I)Ljava/lang/Object;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f540'
# 28: 0x0000732cf8152950 {method} {0x0000732cf8152950} 'lambda$toArray$3' '(I)[I' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
# 29: 0x000000004c1b87f0 {type array int}
# 30: 0x0000732cf809a428 {method} {0x0000732cf809a428} 'withOrder' '(Ljava/nio/ByteOrder;)Ljava/lang/foreign/ValueLayout;' in 'jdk/internal/foreign/layout/ValueLayouts$OfIntImpl'
# 31: 0x0000732cf80768c8 {method} {0x0000732cf80768c8} 'byteAlignment' '()J' in 'jdk/internal/foreign/layout/AbstractLayout'
# 32: 0x0000732cf81692f8 {method} {0x0000732cf81692f8} 'apply' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl$$Lambda+0x000000004d00f778'
# 33: 0x0000732cf807c940 {method} {0x0000732cf807c940} 'ofArray' '([I)Ljava/lang/foreign/MemorySegment;' in 'java/lang/foreign/MemorySegment'
# 34: 0x0000732cf8143360 {method} {0x0000732cf8143360} 'fromArray' '([I)Ljdk/internal/foreign/HeapMemorySegmentImpl$OfInt;' in 'jdk/internal/foreign/SegmentFactories'
# 35: 0x0000732cf8076988 {method} {0x0000732cf8076988} 'byteSize' '()J' in 'jdk/internal/foreign/layout/AbstractLayout'
# 36: 0x0000732cf80817e8 {method} {0x0000732cf80817e8} 'checkElementAlignment' '(Ljava/lang/foreign/ValueLayout;Ljava/lang/String;)V' in 'jdk/internal/foreign/Utils'
# 37: 0x0000732cf80816e0 {method} {0x0000732cf80816e0} 'isElementAligned' '(Ljava/lang/foreign/ValueLayout;)Z' in 'jdk/internal/foreign/Utils'
# 38: 0x0000732cf80748b0 {method} {0x0000732cf80748b0} 'order' '()Ljava/nio/ByteOrder;' in 'jdk/internal/foreign/layout/ValueLayouts$AbstractValueLayout'
# 39: 0x000000004c1b83d0 {type array byte}
# 40: 0x0000732cf80b52f0 {method} {0x0000732cf80b52f0} 'shuffleFromArray' '([II)Ljdk/incubator/vector/VectorShuffle;' in 'jdk/incubator/vector/AbstractSpecies'
# 41: 0x0000732cf80fb728 {method} {0x0000732cf80fb728} 'shuffleFromArray' '([II)Ljdk/incubator/vector/AbstractShuffle;' in 'jdk/incubator/vector/Byte256Vector'
# 42: 0x0000732cf80f4e50 {method} {0x0000732cf80f4e50} 'shuffleFromArray' '([II)Ljdk/incubator/vector/Byte256Vector$Byte256Shuffle;' in 'jdk/incubator/vector/Byte256Vector'
# 43: 0x0000732cf8102e10 {method} {0x0000732cf8102e10} '<init>' '([II)V' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
# 44: 0x0000732cf8103b88 {method} {0x0000732cf8103b88} 'prepare' '([II)[B' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
# 45: 0x0000732cf8102d18 {method} {0x0000732cf8102d18} '<init>' '([B)V' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
# 46: 0x0000732cf80d7af0 {method} {0x0000732cf80d7af0} '<init>' '(Ljava/lang/Object;)V' in 'jdk/incubator/vector/AbstractShuffle'
# 47: 0x0000732cf80d9760 {method} {0x0000732cf80d9760} '<init>' '(Ljava/lang/Object;)V' in 'jdk/incubator/vector/VectorShuffle'
# 48: 0x000000004c1f1978 {method} {0x000000004c1f1978} '<init>' '(Ljava/lang/Object;)V' in 'jdk/internal/vm/vector/VectorSupport$VectorShuffle'
# 49: 0x0000732cf80f5a20 {method} {0x0000732cf80f5a20} 'convertShape' '(Ljdk/incubator/vector/VectorOperators$Conversion;Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/Byte256Vector'
# 50: 0x0000732cf805f3a0 {method} {0x0000732cf805f3a0} 'convertShapeTemplate' '(Ljdk/incubator/vector/VectorOperators$Conversion;Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractVector'
# 51: 0x0000732cf8060900 {method} {0x0000732cf8060900} 'convert0' '(CLjdk/incubator/vector/AbstractSpecies;)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractVector'
# 52: 0x0000732cf80d8630 {method} {0x0000732cf80d8630} 'partiallyWrapIndex' '(II)I' in 'jdk/incubator/vector/AbstractShuffle'
# 53: 0x0000732cf80d8750 {method} {0x0000732cf80d8750} 'checkIndex0' '(IIB)I' in 'jdk/incubator/vector/AbstractShuffle'
# 54: 0x0000732cf81523e8 {method} {0x0000732cf81523e8} 'asSlice' '(JJ)Ljava/lang/foreign/MemorySegment;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
# 55: 0x0000732cf814b728 {method} {0x0000732cf814b728} 'asSlice' '(JJ)Ljdk/internal/foreign/AbstractMemorySegmentImpl;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
# 56: 0x0000732cf814e150 {method} {0x0000732cf814e150} 'checkBounds' '(JJ)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
# 57: 0x0000732cf814d968 {method} {0x0000732cf814d968} 'checkAccess' '(JJZ)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
# 58: 0x0000732cf816d150 {method} {0x0000732cf816d150} 'checkFromIndexSize' '(JJJ)J' in 'jdk/incubator/vector/VectorIntrinsics'
# 59: 0x000000004c27f578 {method} {0x000000004c27f578} 'checkIndex' '(JJ)J' in 'java/util/Objects'
# 60: 0x0000732cf80815c8 {method} {0x0000732cf80815c8} 'isAligned' '(JJ)Z' in 'jdk/internal/foreign/Utils'
# 61: 0x0000732cf814ddb0 {method} {0x0000732cf814ddb0} 'isAlignedForElement' '(JLjava/lang/foreign/MemoryLayout;)Z' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
# 62: 0x0000732cf814deb8 {method} {0x0000732cf814deb8} 'isAlignedForElement' '(JJ)Z' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
# 63: 0x000000004c237bc0 {method} {0x000000004c237bc0} 'copyMemoryChecks' '(Ljava/lang/Object;JLjava/lang/Object;JJ)V' in 'jdk/internal/misc/Unsafe'
# 64: 0x000000004c237830 {method} {0x000000004c237830} 'checkSize' '(J)V' in 'jdk/internal/misc/Unsafe'
# 65: 0x000000004c27f818 {method} {0x000000004c27f818} 'requireNonNull' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/util/Objects'
# 66: 0x000000004c3612f8 {method} {0x000000004c3612f8} 'nativeOrder' '()Ljava/nio/ByteOrder;' in 'java/nio/ByteOrder'
# 67: 0x0000732cf81445c0 {method} {0x0000732cf81445c0} 'ensureInitialized' '()V' in 'jdk/internal/foreign/SegmentFactories'
# 68: 0x0000732cf8163d80 {method} {0x0000732cf8163d80} 'scale' '()J' in 'jdk/internal/foreign/Utils$BaseAndScale'
# 69: 0x0000732cf8163cc0 {method} {0x0000732cf8163cc0} 'base' '()J' in 'jdk/internal/foreign/Utils$BaseAndScale'
# 70: 0x0000732cf815a088 {method} {0x0000732cf815a088} 'createHeap' '(Ljava/lang/Object;)Ljdk/internal/foreign/MemorySessionImpl;' in 'jdk/internal/foreign/MemorySessionImpl'
# 71: 0x0000732cf8164958 {method} {0x0000732cf8164958} '<init>' '(JLjava/lang/Object;JZLjdk/internal/foreign/MemorySessionImpl;)V' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
# 72: 0x0000732cf8167e20 {method} {0x0000732cf8167e20} '<init>' '(Ljava/lang/Object;)V' in 'jdk/internal/foreign/GlobalSession$HeapSession'
# 73: 0x0000732cf8162930 {method} {0x0000732cf8162930} '<init>' '()V' in 'jdk/internal/foreign/GlobalSession'
# 74: 0x0000732cf8159d78 {method} {0x0000732cf8159d78} '<init>' '(Ljava/lang/Thread;Ljdk/internal/foreign/MemorySessionImpl$ResourceList;)V' in 'jdk/internal/foreign/MemorySessionImpl'
# 75: 0x000000004c575f88 {method} {0x000000004c575f88} '<init>' '()V' in 'java/lang/Object'
# 76: 0x0000732cf8165aa0 {method} {0x0000732cf8165aa0} '<init>' '(JLjava/lang/Object;JZLjdk/internal/foreign/MemorySessionImpl;)V' in 'jdk/internal/foreign/HeapMemorySegmentImpl'
# 77: 0x0000732cf814b350 {method} {0x0000732cf814b350} '<init>' '(JZLjdk/internal/foreign/MemorySessionImpl;)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
# 78: 0x0000732cf80b3648 {method} {0x0000732cf80b3648} 'length' '()I' in 'jdk/incubator/vector/AbstractSpecies'
# 79: 0x0000732cf814c078 {method} {0x0000732cf814c078} 'asSliceNoCheck' '(JJ)Ljdk/internal/foreign/AbstractMemorySegmentImpl;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
# 80: 0x0000732cf81650a0 {method} {0x0000732cf81650a0} 'dup' '(JJZLjdk/internal/foreign/MemorySessionImpl;)Ljdk/internal/foreign/AbstractMemorySegmentImpl;' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
# 81: 0x0000732cf8164a60 {method} {0x0000732cf8164a60} 'dup' '(JJZLjdk/internal/foreign/MemorySessionImpl;)Ljdk/internal/foreign/HeapMemorySegmentImpl$OfInt;' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
# 82: 0x0000732cf8076730 {method} {0x0000732cf8076730} 'name' '()Ljava/util/Optional;' in 'jdk/internal/foreign/layout/AbstractLayout'
# 83: 0x000000004c26b840 {method} {0x000000004c26b840} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder'
# 84: 0x000000004c272ed0 {method} {0x000000004c272ed0} 'constant_L' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$Holder'
# 85: 0x0000732cf8081ed0 {method} {0x0000732cf8081ed0} 'checkNonNegativeIndex' '(JLjava/lang/String;)V' in 'jdk/internal/foreign/Utils'
# 86: 0x000000004c243bc0 {method} {0x000000004c243bc0} 'getScopedMemoryAccess' '()Ljdk/internal/misc/ScopedMemoryAccess;' in 'jdk/internal/misc/ScopedMemoryAccess'
# 87: 0x0000732cf814e4e8 {method} {0x0000732cf814e4e8} 'sessionImpl' '()Ljdk/internal/foreign/MemorySessionImpl;' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
# 88: 0x0000732cf8164e48 {method} {0x0000732cf8164e48} 'unsafeGetOffset' '()J' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
# 89: 0x0000732cf8165b70 {method} {0x0000732cf8165b70} 'unsafeGetOffset' '()J' in 'jdk/internal/foreign/HeapMemorySegmentImpl'
# 90: 0x0000732cf8164be8 {method} {0x0000732cf8164be8} 'maxAlignMask' '()J' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
# 91: 0x0000732cf814d850 {method} {0x0000732cf814d850} 'checkReadOnly' '(Z)V' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
# 92: 0x0000732cf8164fc8 {method} {0x0000732cf8164fc8} 'unsafeGetBase' '()Ljava/lang/Object;' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
# 93: 0x0000732cf8164b28 {method} {0x0000732cf8164b28} 'unsafeGetBase' '()[I' in 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
# 94: 0x000000004c1f33d0 {method} {0x000000004c1f33d0} 'reachabilityFence' '(Ljava/lang/Object;)V' in 'java/lang/ref/Reference'
# 95: 0x0000732cf815a658 {method} {0x0000732cf815a658} 'checkValidStateRaw' '()V' in 'jdk/internal/foreign/MemorySessionImpl'
# 96: 0x000000004c237b50 {method} {0x000000004c237b50} 'checkPrimitivePointer' '(Ljava/lang/Object;J)V' in 'jdk/internal/misc/Unsafe'
# 97: 0x000000004c2375f0 {method} {0x000000004c2375f0} 'checkPointer' '(Ljava/lang/Object;J)V' in 'jdk/internal/misc/Unsafe'
# 98: 0x000000004c237660 {method} {0x000000004c237660} 'checkPrimitiveArray' '(Ljava/lang/Class;)V' in 'jdk/internal/misc/Unsafe'
# 99: 0x000000004c236b50 {method} {0x000000004c236b50} 'checkOffset' '(Ljava/lang/Object;J)V' in 'jdk/internal/misc/Unsafe'
#100: 0x000000004c1cdce8 {method} {0x000000004c1cdce8} 'getComponentType' '()Ljava/lang/Class;' in 'java/lang/Class'
#101: 0x000000004c1cdc08 {method} {0x000000004c1cdc08} 'isPrimitive' '()Z' in 'java/lang/Class'
#102: 0x0000732cf80b5008 {method} {0x0000732cf80b5008} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies'
#103: 0x0000732cf80aee70 {method} {0x0000732cf80aee70} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/ByteVector$ByteSpecies'
#104: 0x0000732cf80ad9f8 {method} {0x0000732cf80ad9f8} 'dummyVector' '()Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector$ByteSpecies'
#105: 0x0000732cf816d880 {method} {0x0000732cf816d880} 'wrapToRange' '(II)I' in 'jdk/incubator/vector/VectorIntrinsics'
#106: 0x000000004c1f1068 {method} {0x000000004c1f1068} '<init>' '(Ljava/lang/Object;)V' in 'jdk/internal/vm/vector/VectorSupport$VectorPayload'
#107: 0x0000732cf8103230 {method} {0x0000732cf8103230} 'toBitsVector' '()Ljdk/incubator/vector/Byte256Vector;' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
#108: 0x0000732cf80d7e58 {method} {0x0000732cf80d7e58} 'toBitsVectorTemplate' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractShuffle'
#109: 0x0000732cf80b4820 {method} {0x0000732cf80b4820} 'asIntegral' '()Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/AbstractSpecies'
#110: 0x0000732cf80d98f0 {method} {0x0000732cf80d98f0} 'length' '()I' in 'jdk/incubator/vector/VectorShuffle'
#111: 0x0000732cf8104088 {method} {0x0000732cf8104088} 'vspecies' '()Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
#112: 0x0000732cf8103078 {method} {0x0000732cf8103078} 'vspecies' '()Ljdk/incubator/vector/ByteVector$ByteSpecies;' in 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
#113: 0x0000732cf80bc808 {method} {0x0000732cf80bc808} 'asIntegral' '()Ljdk/incubator/vector/LaneType;' in 'jdk/incubator/vector/LaneType'
#114: 0x0000732cf80b4728 {method} {0x0000732cf80b4728} 'withLanes' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/AbstractSpecies'
#115: 0x0000732cf80bd120 {method} {0x0000732cf80bd120} 'check' '()Ljdk/incubator/vector/LaneType;' in 'jdk/incubator/vector/LaneType'
#116: 0x0000732cf80acde0 {method} {0x0000732cf80acde0} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/ByteVector$ByteSpecies'
#117: 0x0000732cf80b3720 {method} {0x0000732cf80b3720} 'laneCount' '()I' in 'jdk/incubator/vector/AbstractSpecies'
#118: 0x0000732cf80d7c70 {method} {0x0000732cf80d7c70} 'vectorSpecies' '()Ljdk/incubator/vector/VectorSpecies;' in 'jdk/incubator/vector/AbstractShuffle'
#119: 0x0000732cf8204880 {method} {0x0000732cf8204880} 'kind' '()C' in 'jdk/incubator/vector/VectorOperators$ConversionImpl'
#120: 0x0000732cf8204940 {method} {0x0000732cf8204940} 'domain' '()Ljdk/incubator/vector/LaneType;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl'
#121: 0x0000732cf80b6448 {method} {0x0000732cf80b6448} 'check' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/AbstractSpecies'
#122: 0x0000732cf8204a00 {method} {0x0000732cf8204a00} 'range' '()Ljdk/incubator/vector/LaneType;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl'
#123: 0x0000732cf805f5c8 {method} {0x0000732cf805f5c8} 'shapeChangeOrigin' '(Ljdk/incubator/vector/AbstractSpecies;Ljdk/incubator/vector/AbstractSpecies;ZI)I' in 'jdk/incubator/vector/AbstractVector'
#124: 0x0000732cf80fbb78 {method} {0x0000732cf80fbb78} 'vspecies' '()Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/Byte256Vector'
#125: 0x0000732cf80f42c8 {method} {0x0000732cf80f42c8} 'vspecies' '()Ljdk/incubator/vector/ByteVector$ByteSpecies;' in 'jdk/incubator/vector/Byte256Vector'
#126: 0x0000732cf81946b8 {method} {0x0000732cf81946b8} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/IntVector$IntSpecies'
#127: 0x0000732cf80f43a0 {method} {0x0000732cf80f43a0} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/Byte256Vector'
#128: 0x0000732cf80f4628 {method} {0x0000732cf80f4628} 'length' '()I' in 'jdk/incubator/vector/Byte256Vector'
#129: 0x0000732cf8196748 {method} {0x0000732cf8196748} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
#130: 0x0000732cf81952d0 {method} {0x0000732cf81952d0} 'dummyVector' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector$IntSpecies'
#131: 0x0000732cf8183fb0 {method} {0x0000732cf8183fb0} 'reinterpretAsInts' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#132: 0x0000732cf805e890 {method} {0x0000732cf805e890} 'reinterpretAsInts' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/AbstractVector'
#133: 0x0000732cf81c15d8 {method} {0x0000732cf81c15d8} 'asVectorRaw' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/Int256Vector'
#134: 0x0000732cf805db58 {method} {0x0000732cf805db58} 'asVectorRawTemplate' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractVector'
#135: 0x0000732cf81c7af0 {method} {0x0000732cf81c7af0} 'vspecies' '()Ljdk/incubator/vector/AbstractSpecies;' in 'jdk/incubator/vector/Int256Vector'
#136: 0x0000732cf81c06b8 {method} {0x0000732cf81c06b8} 'vspecies' '()Ljdk/incubator/vector/IntVector$IntSpecies;' in 'jdk/incubator/vector/Int256Vector'
#137: 0x0000732cf81c0790 {method} {0x0000732cf81c0790} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/Int256Vector'
#138: 0x0000732cf81c0a18 {method} {0x0000732cf81c0a18} 'length' '()I' in 'jdk/incubator/vector/Int256Vector'
#139: 0x0000732cf81831d0 {method} {0x0000732cf81831d0} 'maybeSwap' '(Ljava/nio/ByteOrder;)Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/IntVector'
#140: 0x0000732cf814b640 {method} {0x0000732cf814b640} 'isReadOnly' '()Z' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
#141: 0x0000732cf81c0bd0 {method} {0x0000732cf81c0bd0} 'byteSize' '()I' in 'jdk/incubator/vector/Int256Vector'
#142: 0x0000732cf814c620 {method} {0x0000732cf814c620} 'byteSize' '()J' in 'jdk/internal/foreign/AbstractMemorySegmentImpl'
#143: 0x0000732cf8194870 {method} {0x0000732cf8194870} 'vectorType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/IntVector$IntSpecies'
#144: 0x0000732cf805f778 {method} {0x0000732cf805f778} 'partInRange' '(III)Z' in 'jdk/incubator/vector/AbstractVector'
#145: 0x0000732cf80fb390 {method} {0x0000732cf80fb390} 'slice' '(I)Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/Byte256Vector'
#146: 0x0000732cf80f7288 {method} {0x0000732cf80f7288} 'slice' '(I)Ljdk/incubator/vector/Byte256Vector;' in 'jdk/incubator/vector/Byte256Vector'
#147: 0x0000732cf8049420 {method} {0x0000732cf8049420} 'sliceTemplate' '(I)Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector'
#148: 0x000000004c27f508 {method} {0x000000004c27f508} 'checkIndex' '(II)I' in 'java/util/Objects'
#149: 0x0000732cf80ae780 {method} {0x0000732cf80ae780} 'zero' '()Ljdk/incubator/vector/ByteVector;' in 'jdk/incubator/vector/ByteVector$ByteSpecies'
#150: 0x0000732cf80acf98 {method} {0x0000732cf80acf98} 'vectorType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/ByteVector$ByteSpecies'
#151: 0x0000732cf80b40a8 {method} {0x0000732cf80b40a8} 'vectorBitSize' '()I' in 'jdk/incubator/vector/AbstractSpecies'
#152: 0x0000732cf80b4180 {method} {0x0000732cf80b4180} 'vectorByteSize' '()I' in 'jdk/incubator/vector/AbstractSpecies'
#153: 0x0000732cf815b198 'jdk/internal/foreign/MemorySessionImpl'
#154: 0x000000004d00e500 'jdk/internal/foreign/GlobalSession'
#155: 0x000000004c1f3448 'java/lang/ref/SoftReference'
#156: 0x000000004d008f60 'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'
#157: 0x0000732cf80db1b8 'jdk/incubator/vector/VectorShuffle'
#158: 0x0000732cf80d9810 {method} {0x0000732cf80d9810} 'vectorSpecies' '()Ljdk/incubator/vector/VectorSpecies;' in 'jdk/incubator/vector/VectorShuffle'
#159: 0x000000004d00e9d8 'jdk/internal/foreign/HeapMemorySegmentImpl$OfInt'
#160: 0x0000732cf807ecf0 'java/lang/foreign/MemorySegment'
#161: 0x0000732cf807b158 {method} {0x0000732cf807b158} 'asSlice' '(JJ)Ljava/lang/foreign/MemorySegment;' in 'java/lang/foreign/MemorySegment'
#162: 0x0000732cf8152e58 'jdk/internal/foreign/AbstractMemorySegmentImpl'
#163: 0x0000732cf807c0e8 {method} {0x0000732cf807c0e8} 'toArray' '(Ljava/lang/foreign/ValueLayout$OfInt;)[I' in 'java/lang/foreign/MemorySegment'
#164: 0x0000732cf807b660 {method} {0x0000732cf807b660} 'isReadOnly' '()Z' in 'java/lang/foreign/MemorySegment'
#165: 0x0000732cf807b008 {method} {0x0000732cf807b008} 'byteSize' '()J' in 'java/lang/foreign/MemorySegment'
#166: 0x000000004d004dd8 'jdk/incubator/vector/ByteVector$ByteSpecies'
#167: 0x0000732cf80b2d30 'jdk/incubator/vector/VectorSpecies'
#168: 0x0000732cf80b18c8 {method} {0x0000732cf80b18c8} 'length' '()I' in 'jdk/incubator/vector/VectorSpecies'
#169: 0x0000732cf80b2950 {method} {0x0000732cf80b2950} 'shuffleFromArray' '([II)Ljdk/incubator/vector/VectorShuffle;' in 'jdk/incubator/vector/VectorSpecies'
#170: 0x0000732cf80b7608 'jdk/incubator/vector/AbstractSpecies'
#171: 0x0000732cf806e5a8 'java/lang/foreign/ValueLayout'
#172: 0x0000732cf806ec58 {method} {0x0000732cf806ec58} 'byteAlignment' '()J' in 'java/lang/foreign/ValueLayout'
#173: 0x0000732cf806d960 'java/lang/foreign/MemoryLayout'
#174: 0x0000732cf806cb80 {method} {0x0000732cf806cb80} 'byteAlignment' '()J' in 'java/lang/foreign/MemoryLayout'
#175: 0x0000732cf806eae8 {method} {0x0000732cf806eae8} 'byteSize' '()J' in 'java/lang/foreign/ValueLayout'
#176: 0x0000732cf806dc10 {method} {0x0000732cf806dc10} 'order' '()Ljava/nio/ByteOrder;' in 'java/lang/foreign/ValueLayout'
#177: 0x000000004d012060 'jdk/incubator/vector/Int256Vector'
#178: 0x0000732cf8065108 'jdk/incubator/vector/Vector'
#179: 0x0000732cf8064378 {method} {0x0000732cf8064378} 'reinterpretAsInts' '()Ljdk/incubator/vector/IntVector;' in 'jdk/incubator/vector/Vector'
#180: 0x000000004d00fe48 'jdk/incubator/vector/IntVector$IntSpecies'
#181: 0x0000732cf80b1a18 {method} {0x0000732cf80b1a18} 'vectorByteSize' '()I' in 'jdk/incubator/vector/VectorSpecies'
#182: 0x000000004d016490 'jdk/incubator/vector/VectorOperators$ConversionImpl'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[src] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
[dst] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0, 0, 0, 0, 0, 0, 0, 0]
------------------------------------------------------------------------
static test_ms::micro([I[I)V
  interpreter_invocation_count:        8304
  invocation_counter:                  8304
  backedge_counter:                       0
  decompile_count:                        1
  mdo size: 424 bytes

   0 aload_1
   1 invokestatic 7 <java/lang/foreign/MemorySegment.ofArray([I)Ljava/lang/foreign/MemorySegment;> 
  0    bci: 1    CounterData        count(6641)
   4 astore_2
   5 fast_aload_0
   6 invokestatic 7 <java/lang/foreign/MemorySegment.ofArray([I)Ljava/lang/foreign/MemorySegment;> 
  16   bci: 6    CounterData        count(6641)
   9 astore_3
  10 getstatic 13 <test_ms.BSP:Ljdk/incubator/vector/VectorSpecies;> 
  13 aload_2
  14 lconst_0
  15 invokestatic 19 <java/nio/ByteOrder.nativeOrder()Ljava/nio/ByteOrder;> 
  32   bci: 15   CounterData        count(6641)
  18 invokestatic 25 <jdk/incubator/vector/VectorShuffle.fromMemorySegment(Ljdk/incubator/vector/VectorSpecies;Ljava/lang/foreign/MemorySegment;JLjava/nio/ByteOrder;)Ljdk/incubator/vector/VectorShuffle;> 
  48   bci: 18   CounterData        count(6641)
  21 astore #4
  23 aload #4
  25 aload_3
  26 lconst_0
  27 invokestatic 19 <java/nio/ByteOrder.nativeOrder()Ljava/nio/ByteOrder;> 
  64   bci: 27   CounterData        count(6642)
  30 invokevirtual 31 <jdk/incubator/vector/VectorShuffle.intoMemorySegment(Ljava/lang/foreign/MemorySegment;JLjava/nio/ByteOrder;)V> 
  80   bci: 30   VirtualCallData    count(0) entries(1)
                                    'jdk/incubator/vector/Byte256Vector$Byte256Shuffle'(6642 1.00)
  33 return
------------------------------------------------------------------------
Total MDO size: 424 bytes
